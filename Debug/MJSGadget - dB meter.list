
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027774  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004340  08027838  08027838  00028838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bb78  0802bb78  0002d448  2**0
                  CONTENTS
  4 .ARM          00000008  0802bb78  0802bb78  0002cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bb80  0802bb80  0002d448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bb80  0802bb80  0002cb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802bb84  0802bb84  0002cb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802bb88  0002d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a8  20000448  0802bfd0  0002d448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200035f0  0802bfd0  0002d5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002d448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003645e  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c03  00000000  00000000  000638ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d40  00000000  00000000  0006d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021ae  00000000  00000000  00070218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241a8  00000000  00000000  000723c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045990  00000000  00000000  0009656e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a06  00000000  00000000  000dbefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0017e904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9a0  00000000  00000000  0017e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018a358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0018c941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802781c 	.word	0x0802781c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	0802781c 	.word	0x0802781c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802acc8 	.word	0x0802acc8
 8000e0c:	0802ad08 	.word	0x0802ad08
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802ad44 	.word	0x0802ad44
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000470 	.word	0x20000470
 80036ac:	200004a0 	.word	0x200004a0

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	2000046c 	.word	0x2000046c
 800370c:	200004a0 	.word	0x200004a0

08003710 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 800371a:	4b05      	ldr	r3, [pc, #20]	@ (8003730 <ENS_Init+0x20>)
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <ENS_Init+0x24>)
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	601a      	str	r2, [r3, #0]
}	
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	2000046c 	.word	0x2000046c
 8003734:	20000470 	.word	0x20000470

08003738 <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	22f0      	movs	r2, #240	@ 0xf0
 8003742:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003744:	1dba      	adds	r2, r7, #6
 8003746:	2301      	movs	r3, #1
 8003748:	2101      	movs	r1, #1
 800374a:	2010      	movs	r0, #16
 800374c:	f7ff ff80 	bl	8003650 <WriteMemRegister>
 8003750:	0003      	movs	r3, r0
 8003752:	001a      	movs	r2, r3
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003758:	201e      	movs	r0, #30
 800375a:	f00e fc91 	bl	8012080 <HAL_Delay>
	return result;
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	1e5a      	subs	r2, r3, #1
 8003764:	4193      	sbcs	r3, r2
 8003766:	b2db      	uxtb	r3, r3
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003776:	003b      	movs	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003782:	003a      	movs	r2, r7
 8003784:	2302      	movs	r3, #2
 8003786:	2101      	movs	r1, #1
 8003788:	2000      	movs	r0, #0
 800378a:	f7ff ff91 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 800378e:	003b      	movs	r3, r7
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b21a      	sxth	r2, r3
 8003794:	003b      	movs	r3, r7
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	b21b      	sxth	r3, r3
 800379c:	4313      	orrs	r3, r2
 800379e:	b21a      	sxth	r2, r3
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <ENS160_checkPartID+0xa8>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	23b0      	movs	r3, #176	@ 0xb0
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d009      	beq.n	80037cc <ENS160_checkPartID+0x5c>
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	2362      	movs	r3, #98	@ 0x62
 80037be:	33ff      	adds	r3, #255	@ 0xff
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d101      	bne.n	80037c8 <ENS160_checkPartID+0x58>
 80037c4:	4b15      	ldr	r3, [pc, #84]	@ (800381c <ENS160_checkPartID+0xac>)
 80037c6:	e002      	b.n	80037ce <ENS160_checkPartID+0x5e>
 80037c8:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <ENS160_checkPartID+0xb0>)
 80037ca:	e000      	b.n	80037ce <ENS160_checkPartID+0x5e>
 80037cc:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <ENS160_checkPartID+0xb4>)
 80037ce:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <ENS160_checkPartID+0xb8>)
 80037d0:	4916      	ldr	r1, [pc, #88]	@ (800382c <ENS160_checkPartID+0xbc>)
 80037d2:	2003      	movs	r0, #3
 80037d4:	f00d fffe 	bl	80117d4 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	23b0      	movs	r3, #176	@ 0xb0
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d106      	bne.n	80037f2 <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 80037e4:	4b12      	ldr	r3, [pc, #72]	@ (8003830 <ENS160_checkPartID+0xc0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	70da      	strb	r2, [r3, #3]
	  result = true;
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00b      	b.n	800380a <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	2362      	movs	r3, #98	@ 0x62
 80037f8:	33ff      	adds	r3, #255	@ 0xff
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d105      	bne.n	800380a <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 80037fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <ENS160_checkPartID+0xc0>)
 8003800:	2201      	movs	r2, #1
 8003802:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
	}
	return result;
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	781b      	ldrb	r3, [r3, #0]
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	20000464 	.word	0x20000464
 800381c:	08027838 	.word	0x08027838
 8003820:	08027844 	.word	0x08027844
 8003824:	08027848 	.word	0x08027848
 8003828:	08027854 	.word	0x08027854
 800382c:	08027874 	.word	0x08027874
 8003830:	200004a0 	.word	0x200004a0

08003834 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800383a:	4a27      	ldr	r2, [pc, #156]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 800383c:	2301      	movs	r3, #1
 800383e:	2101      	movs	r1, #1
 8003840:	2012      	movs	r0, #18
 8003842:	f7ff ff05 	bl	8003650 <WriteMemRegister>
 8003846:	0003      	movs	r3, r0
 8003848:	001a      	movs	r2, r3
 800384a:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <ENS160_clearCommand+0xa8>)
 800384c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800384e:	200a      	movs	r0, #10
 8003850:	f00e fc16 	bl	8012080 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003854:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 8003856:	22cc      	movs	r2, #204	@ 0xcc
 8003858:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800385a:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 800385c:	2301      	movs	r3, #1
 800385e:	2101      	movs	r1, #1
 8003860:	2012      	movs	r0, #18
 8003862:	f7ff fef5 	bl	8003650 <WriteMemRegister>
 8003866:	0003      	movs	r3, r0
 8003868:	001a      	movs	r2, r3
 800386a:	4b1c      	ldr	r3, [pc, #112]	@ (80038dc <ENS160_clearCommand+0xa8>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4013      	ands	r3, r2
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <ENS160_clearCommand+0xa8>)
 8003874:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003876:	200a      	movs	r0, #10
 8003878:	f00e fc02 	bl	8012080 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 800387e:	2301      	movs	r3, #1
 8003880:	2101      	movs	r1, #1
 8003882:	2020      	movs	r0, #32
 8003884:	f7ff ff14 	bl	80036b0 <ReadMemRegister>
 8003888:	0003      	movs	r3, r0
 800388a:	001a      	movs	r2, r3
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <ENS160_clearCommand+0xa8>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4013      	ands	r3, r2
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <ENS160_clearCommand+0xa8>)
 8003896:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <ENS160_clearCommand+0xac>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	0018      	movs	r0, r3
 80038a6:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <ENS160_clearCommand+0xa4>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <ENS160_clearCommand+0x7e>
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <ENS160_clearCommand+0xb0>)
 80038b0:	e000      	b.n	80038b4 <ENS160_clearCommand+0x80>
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <ENS160_clearCommand+0xb4>)
 80038b4:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <ENS160_clearCommand+0xb8>)
 80038b6:	490e      	ldr	r1, [pc, #56]	@ (80038f0 <ENS160_clearCommand+0xbc>)
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	0003      	movs	r3, r0
 80038bc:	2003      	movs	r0, #3
 80038be:	f00d ff89 	bl	80117d4 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038c2:	200a      	movs	r0, #10
 80038c4:	f00e fbdc 	bl	8012080 <HAL_Delay>
		
	return result;
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <ENS160_clearCommand+0xa8>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2db      	uxtb	r3, r3
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200004a8 	.word	0x200004a8
 80038dc:	200004a9 	.word	0x200004a9
 80038e0:	20000464 	.word	0x20000464
 80038e4:	08027878 	.word	0x08027878
 80038e8:	08027844 	.word	0x08027844
 80038ec:	0802787c 	.word	0x0802787c
 80038f0:	08027874 	.word	0x08027874

080038f4 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 80038fa:	f7ff ff9b 	bl	8003834 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038fe:	200a      	movs	r0, #10
 8003900:	f00e fbbe 	bl	8012080 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	220e      	movs	r2, #14
 8003908:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 800390a:	1d3a      	adds	r2, r7, #4
 800390c:	2301      	movs	r3, #1
 800390e:	2101      	movs	r1, #1
 8003910:	2012      	movs	r0, #18
 8003912:	f7ff fe9d 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 8003916:	200a      	movs	r0, #10
 8003918:	f00e fbb2 	bl	8012080 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 800391c:	1d3a      	adds	r2, r7, #4
 800391e:	2303      	movs	r3, #3
 8003920:	2101      	movs	r1, #1
 8003922:	204c      	movs	r0, #76	@ 0x4c
 8003924:	f7ff fec4 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <ENS160_getFirmware+0xa4>)
 800392e:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	785a      	ldrb	r2, [r3, #1]
 8003934:	4b18      	ldr	r3, [pc, #96]	@ (8003998 <ENS160_getFirmware+0xa4>)
 8003936:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	789a      	ldrb	r2, [r3, #2]
 800393c:	4b16      	ldr	r3, [pc, #88]	@ (8003998 <ENS160_getFirmware+0xa4>)
 800393e:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003940:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <ENS160_getFirmware+0xa4>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d903      	bls.n	8003950 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <ENS160_getFirmware+0xa4>)
 800394a:	2201      	movs	r2, #1
 800394c:	70da      	strb	r2, [r3, #3]
 800394e:	e002      	b.n	8003956 <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <ENS160_getFirmware+0xa4>)
 8003952:	2200      	movs	r2, #0
 8003954:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <ENS160_getFirmware+0xa8>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 800395e:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <ENS160_getFirmware+0xa4>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	001c      	movs	r4, r3
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <ENS160_getFirmware+0xa4>)
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	0018      	movs	r0, r3
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <ENS160_getFirmware+0xa4>)
 800396c:	789b      	ldrb	r3, [r3, #2]
 800396e:	4a0c      	ldr	r2, [pc, #48]	@ (80039a0 <ENS160_getFirmware+0xac>)
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <ENS160_getFirmware+0xb0>)
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	9000      	str	r0, [sp, #0]
 8003976:	0023      	movs	r3, r4
 8003978:	2003      	movs	r0, #3
 800397a:	f00d ff2b 	bl	80117d4 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 800397e:	200a      	movs	r0, #10
 8003980:	f00e fb7e 	bl	8012080 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	1e5a      	subs	r2, r3, #1
 800398a:	4193      	sbcs	r3, r2
 800398c:	b2db      	uxtb	r3, r3
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b003      	add	sp, #12
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	200004a0 	.word	0x200004a0
 800399c:	20000464 	.word	0x20000464
 80039a0:	080278a8 	.word	0x080278a8
 80039a4:	08027874 	.word	0x08027874

080039a8 <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	0002      	movs	r2, r0
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d108      	bne.n	80039ce <ENS160_setMode+0x26>
 80039bc:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <ENS160_setMode+0x58>)
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <ENS160_setMode+0x26>
	  result = 1;
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e00a      	b.n	80039e4 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 80039ce:	1dfa      	adds	r2, r7, #7
 80039d0:	2301      	movs	r3, #1
 80039d2:	2101      	movs	r1, #1
 80039d4:	2010      	movs	r0, #16
 80039d6:	f7ff fe3b 	bl	8003650 <WriteMemRegister>
 80039da:	0003      	movs	r3, r0
 80039dc:	001a      	movs	r2, r3
 80039de:	230f      	movs	r3, #15
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039e4:	200a      	movs	r0, #10
 80039e6:	f00e fb4b 	bl	8012080 <HAL_Delay>
	
	return result;
 80039ea:	230f      	movs	r3, #15
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	4193      	sbcs	r3, r2
 80039f4:	b2db      	uxtb	r3, r3
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	200004a0 	.word	0x200004a0

08003a04 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a0a:	4b29      	ldr	r3, [pc, #164]	@ (8003ab0 <ENS_DeviceConnected+0xac>)
 8003a0c:	2253      	movs	r2, #83	@ 0x53
 8003a0e:	711a      	strb	r2, [r3, #4]
  bool _available = true;            // ENS160 available
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
  _available &= ENS160_reset();
 8003a16:	f7ff fe8f 	bl	8003738 <ENS160_reset>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	401a      	ands	r2, r3
 8003a24:	1dfb      	adds	r3, r7, #7
 8003a26:	1e51      	subs	r1, r2, #1
 8003a28:	418a      	sbcs	r2, r1
 8003a2a:	701a      	strb	r2, [r3, #0]
  _available &= ENS160_checkPartID();
 8003a2c:	f7ff fea0 	bl	8003770 <ENS160_checkPartID>
 8003a30:	0003      	movs	r3, r0
 8003a32:	001a      	movs	r2, r3
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	401a      	ands	r2, r3
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	1e51      	subs	r1, r2, #1
 8003a3e:	418a      	sbcs	r2, r1
 8003a40:	701a      	strb	r2, [r3, #0]

  if (_available) {
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <ENS_DeviceConnected+0x8a>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f7ff ffac 	bl	80039a8 <ENS160_setMode>
 8003a50:	0003      	movs	r3, r0
 8003a52:	001a      	movs	r2, r3
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	401a      	ands	r2, r3
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	1e51      	subs	r1, r2, #1
 8003a5e:	418a      	sbcs	r2, r1
 8003a60:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003a62:	f7ff fee7 	bl	8003834 <ENS160_clearCommand>
 8003a66:	0003      	movs	r3, r0
 8003a68:	001a      	movs	r2, r3
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	1e51      	subs	r1, r2, #1
 8003a74:	418a      	sbcs	r2, r1
 8003a76:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003a78:	f7ff ff3c 	bl	80038f4 <ENS160_getFirmware>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	001a      	movs	r2, r3
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	401a      	ands	r2, r3
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	1e51      	subs	r1, r2, #1
 8003a8a:	418a      	sbcs	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
  }
  if (debugENS160) {
 8003a8e:	4b09      	ldr	r3, [pc, #36]	@ (8003ab4 <ENS_DeviceConnected+0xb0>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <ENS_DeviceConnected+0x9e>
    Debug("ENS160 in idle mode");
 8003a96:	4a08      	ldr	r2, [pc, #32]	@ (8003ab8 <ENS_DeviceConnected+0xb4>)
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <ENS_DeviceConnected+0xb8>)
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f00d fe99 	bl	80117d4 <CreateLine>
  }
  return _available;
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	781b      	ldrb	r3, [r3, #0]
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	200004a0 	.word	0x200004a0
 8003ab4:	20000464 	.word	0x20000464
 8003ab8:	080278c4 	.word	0x080278c4
 8003abc:	08027874 	.word	0x08027874

08003ac0 <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003ac6:	1dfa      	adds	r2, r7, #7
 8003ac8:	2301      	movs	r3, #1
 8003aca:	2101      	movs	r1, #1
 8003acc:	2020      	movs	r0, #32
 8003ace:	f7ff fdef 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003ad2:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <ENS160_readStatus+0x34>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	4a06      	ldr	r2, [pc, #24]	@ (8003af8 <ENS160_readStatus+0x38>)
 8003ae0:	4906      	ldr	r1, [pc, #24]	@ (8003afc <ENS160_readStatus+0x3c>)
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	f00d fe76 	bl	80117d4 <CreateLine>
  }
  return status;
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	781b      	ldrb	r3, [r3, #0]
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000464 	.word	0x20000464
 8003af8:	080278f8 	.word	0x080278f8
 8003afc:	08027874 	.word	0x08027874

08003b00 <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	0002      	movs	r2, r0
 8003b08:	1dfb      	adds	r3, r7, #7
 8003b0a:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b0c:	2317      	movs	r3, #23
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b14:	4b32      	ldr	r3, [pc, #200]	@ (8003be0 <ENS160_measure+0xe0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b1c:	4a31      	ldr	r2, [pc, #196]	@ (8003be4 <ENS160_measure+0xe4>)
 8003b1e:	4b32      	ldr	r3, [pc, #200]	@ (8003be8 <ENS160_measure+0xe8>)
 8003b20:	0019      	movs	r1, r3
 8003b22:	2003      	movs	r0, #3
 8003b24:	f00d fe56 	bl	80117d4 <CreateLine>
	}
	
	if (waitForNew) {
 8003b28:	1dfb      	adds	r3, r7, #7
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f00e faa5 	bl	8012080 <HAL_Delay>
			status = ENS160_readStatus();
 8003b36:	2516      	movs	r5, #22
 8003b38:	197c      	adds	r4, r7, r5
 8003b3a:	f7ff ffc1 	bl	8003ac0 <ENS160_readStatus>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003b42:	197b      	adds	r3, r7, r5
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2202      	movs	r2, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <ENS160_measure+0x30>
 8003b50:	e002      	b.n	8003b58 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003b52:	200a      	movs	r0, #10
 8003b54:	f00e fa94 	bl	8012080 <HAL_Delay>
	}
	
	newData = true;
 8003b58:	2317      	movs	r3, #23
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003b60:	240c      	movs	r4, #12
 8003b62:	193a      	adds	r2, r7, r4
 8003b64:	2307      	movs	r3, #7
 8003b66:	2101      	movs	r1, #1
 8003b68:	2021      	movs	r0, #33	@ 0x21
 8003b6a:	f7ff fda1 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003b6e:	0021      	movs	r1, r4
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <ENS160_measure+0xec>)
 8003b76:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	b21a      	sxth	r2, r3
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	b21b      	sxth	r3, r3
 8003b86:	4313      	orrs	r3, r2
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <ENS160_measure+0xec>)
 8003b8e:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	78db      	ldrb	r3, [r3, #3]
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	791b      	ldrb	r3, [r3, #4]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	b21b      	sxth	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b21b      	sxth	r3, r3
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <ENS160_measure+0xec>)
 8003ba6:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <ENS160_measure+0xf0>)
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00c      	beq.n	8003bca <ENS160_measure+0xca>
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	795b      	ldrb	r3, [r3, #5]
 8003bb4:	b21a      	sxth	r2, r3
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	799b      	ldrb	r3, [r3, #6]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <ENS160_measure+0xec>)
 8003bc6:	80da      	strh	r2, [r3, #6]
 8003bc8:	e002      	b.n	8003bd0 <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003bca:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <ENS160_measure+0xec>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003bd0:	2317      	movs	r3, #23
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	781b      	ldrb	r3, [r3, #0]
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b006      	add	sp, #24
 8003bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	20000464 	.word	0x20000464
 8003be4:	0802790c 	.word	0x0802790c
 8003be8:	08027874 	.word	0x08027874
 8003bec:	20000498 	.word	0x20000498
 8003bf0:	200004a0 	.word	0x200004a0

08003bf4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c00:	2317      	movs	r3, #23
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c08:	4bae      	ldr	r3, [pc, #696]	@ (8003ec4 <ENS160_measureRaw+0x2d0>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c10:	4aad      	ldr	r2, [pc, #692]	@ (8003ec8 <ENS160_measureRaw+0x2d4>)
 8003c12:	4bae      	ldr	r3, [pc, #696]	@ (8003ecc <ENS160_measureRaw+0x2d8>)
 8003c14:	0019      	movs	r1, r3
 8003c16:	2003      	movs	r0, #3
 8003c18:	f00d fddc 	bl	80117d4 <CreateLine>
	}
	
	if (waitForNew) {
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f00e fa2b 	bl	8012080 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003c2a:	240b      	movs	r4, #11
 8003c2c:	193a      	adds	r2, r7, r4
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2101      	movs	r1, #1
 8003c32:	2020      	movs	r0, #32
 8003c34:	f7ff fd3c 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003c38:	193b      	adds	r3, r7, r4
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003c46:	240c      	movs	r4, #12
 8003c48:	193a      	adds	r2, r7, r4
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	2048      	movs	r0, #72	@ 0x48
 8003c50:	f7ff fd2e 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	001a      	movs	r2, r3
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	4313      	orrs	r3, r2
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fd fd00 	bl	8001668 <__aeabi_ui2f>
 8003c68:	1c03      	adds	r3, r0, #0
 8003c6a:	218a      	movs	r1, #138	@ 0x8a
 8003c6c:	05c9      	lsls	r1, r1, #23
 8003c6e:	1c18      	adds	r0, r3, #0
 8003c70:	f7fc ffb0 	bl	8000bd4 <__aeabi_fdiv>
 8003c74:	1c03      	adds	r3, r0, #0
 8003c76:	1c18      	adds	r0, r3, #0
 8003c78:	f7ff fbf4 	bl	8003464 <__aeabi_f2d>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	000b      	movs	r3, r1
 8003c80:	2000      	movs	r0, #0
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	05c9      	lsls	r1, r1, #23
 8003c86:	f022 fca5 	bl	80265d4 <pow>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	000b      	movs	r3, r1
 8003c8e:	0010      	movs	r0, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	f7fc fcdb 	bl	800064c <__aeabi_d2uiz>
 8003c96:	0002      	movs	r2, r0
 8003c98:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003c9a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	789b      	ldrb	r3, [r3, #2]
 8003ca0:	001a      	movs	r2, r3
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fd fcdc 	bl	8001668 <__aeabi_ui2f>
 8003cb0:	1c03      	adds	r3, r0, #0
 8003cb2:	218a      	movs	r1, #138	@ 0x8a
 8003cb4:	05c9      	lsls	r1, r1, #23
 8003cb6:	1c18      	adds	r0, r3, #0
 8003cb8:	f7fc ff8c 	bl	8000bd4 <__aeabi_fdiv>
 8003cbc:	1c03      	adds	r3, r0, #0
 8003cbe:	1c18      	adds	r0, r3, #0
 8003cc0:	f7ff fbd0 	bl	8003464 <__aeabi_f2d>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	000b      	movs	r3, r1
 8003cc8:	2000      	movs	r0, #0
 8003cca:	2180      	movs	r1, #128	@ 0x80
 8003ccc:	05c9      	lsls	r1, r1, #23
 8003cce:	f022 fc81 	bl	80265d4 <pow>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	000b      	movs	r3, r1
 8003cd6:	0010      	movs	r0, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	f7fc fcb7 	bl	800064c <__aeabi_d2uiz>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003ce2:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003ce4:	193b      	adds	r3, r7, r4
 8003ce6:	791b      	ldrb	r3, [r3, #4]
 8003ce8:	001a      	movs	r2, r3
 8003cea:	193b      	adds	r3, r7, r4
 8003cec:	795b      	ldrb	r3, [r3, #5]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fd fcb8 	bl	8001668 <__aeabi_ui2f>
 8003cf8:	1c03      	adds	r3, r0, #0
 8003cfa:	218a      	movs	r1, #138	@ 0x8a
 8003cfc:	05c9      	lsls	r1, r1, #23
 8003cfe:	1c18      	adds	r0, r3, #0
 8003d00:	f7fc ff68 	bl	8000bd4 <__aeabi_fdiv>
 8003d04:	1c03      	adds	r3, r0, #0
 8003d06:	1c18      	adds	r0, r3, #0
 8003d08:	f7ff fbac 	bl	8003464 <__aeabi_f2d>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	000b      	movs	r3, r1
 8003d10:	2000      	movs	r0, #0
 8003d12:	2180      	movs	r1, #128	@ 0x80
 8003d14:	05c9      	lsls	r1, r1, #23
 8003d16:	f022 fc5d 	bl	80265d4 <pow>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	000b      	movs	r3, r1
 8003d1e:	0010      	movs	r0, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	f7fc fc93 	bl	800064c <__aeabi_d2uiz>
 8003d26:	0002      	movs	r2, r0
 8003d28:	4b69      	ldr	r3, [pc, #420]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003d2a:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003d2c:	193b      	adds	r3, r7, r4
 8003d2e:	799b      	ldrb	r3, [r3, #6]
 8003d30:	001a      	movs	r2, r3
 8003d32:	193b      	adds	r3, r7, r4
 8003d34:	79db      	ldrb	r3, [r3, #7]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7fd fc94 	bl	8001668 <__aeabi_ui2f>
 8003d40:	1c03      	adds	r3, r0, #0
 8003d42:	218a      	movs	r1, #138	@ 0x8a
 8003d44:	05c9      	lsls	r1, r1, #23
 8003d46:	1c18      	adds	r0, r3, #0
 8003d48:	f7fc ff44 	bl	8000bd4 <__aeabi_fdiv>
 8003d4c:	1c03      	adds	r3, r0, #0
 8003d4e:	1c18      	adds	r0, r3, #0
 8003d50:	f7ff fb88 	bl	8003464 <__aeabi_f2d>
 8003d54:	0002      	movs	r2, r0
 8003d56:	000b      	movs	r3, r1
 8003d58:	2000      	movs	r0, #0
 8003d5a:	2180      	movs	r1, #128	@ 0x80
 8003d5c:	05c9      	lsls	r1, r1, #23
 8003d5e:	f022 fc39 	bl	80265d4 <pow>
 8003d62:	0002      	movs	r2, r0
 8003d64:	000b      	movs	r3, r1
 8003d66:	0010      	movs	r0, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	f7fc fc6f 	bl	800064c <__aeabi_d2uiz>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	4b57      	ldr	r3, [pc, #348]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003d72:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003d74:	193a      	adds	r2, r7, r4
 8003d76:	2308      	movs	r3, #8
 8003d78:	2101      	movs	r1, #1
 8003d7a:	2028      	movs	r0, #40	@ 0x28
 8003d7c:	f7ff fc98 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003d80:	193b      	adds	r3, r7, r4
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	001a      	movs	r2, r3
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7fd fc6a 	bl	8001668 <__aeabi_ui2f>
 8003d94:	1c03      	adds	r3, r0, #0
 8003d96:	218a      	movs	r1, #138	@ 0x8a
 8003d98:	05c9      	lsls	r1, r1, #23
 8003d9a:	1c18      	adds	r0, r3, #0
 8003d9c:	f7fc ff1a 	bl	8000bd4 <__aeabi_fdiv>
 8003da0:	1c03      	adds	r3, r0, #0
 8003da2:	1c18      	adds	r0, r3, #0
 8003da4:	f7ff fb5e 	bl	8003464 <__aeabi_f2d>
 8003da8:	0002      	movs	r2, r0
 8003daa:	000b      	movs	r3, r1
 8003dac:	2000      	movs	r0, #0
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	05c9      	lsls	r1, r1, #23
 8003db2:	f022 fc0f 	bl	80265d4 <pow>
 8003db6:	0002      	movs	r2, r0
 8003db8:	000b      	movs	r3, r1
 8003dba:	0010      	movs	r0, r2
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	f7fc fc45 	bl	800064c <__aeabi_d2uiz>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003dc6:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003dc8:	193b      	adds	r3, r7, r4
 8003dca:	789b      	ldrb	r3, [r3, #2]
 8003dcc:	001a      	movs	r2, r3
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fd fc46 	bl	8001668 <__aeabi_ui2f>
 8003ddc:	1c03      	adds	r3, r0, #0
 8003dde:	218a      	movs	r1, #138	@ 0x8a
 8003de0:	05c9      	lsls	r1, r1, #23
 8003de2:	1c18      	adds	r0, r3, #0
 8003de4:	f7fc fef6 	bl	8000bd4 <__aeabi_fdiv>
 8003de8:	1c03      	adds	r3, r0, #0
 8003dea:	1c18      	adds	r0, r3, #0
 8003dec:	f7ff fb3a 	bl	8003464 <__aeabi_f2d>
 8003df0:	0002      	movs	r2, r0
 8003df2:	000b      	movs	r3, r1
 8003df4:	2000      	movs	r0, #0
 8003df6:	2180      	movs	r1, #128	@ 0x80
 8003df8:	05c9      	lsls	r1, r1, #23
 8003dfa:	f022 fbeb 	bl	80265d4 <pow>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	0010      	movs	r0, r2
 8003e04:	0019      	movs	r1, r3
 8003e06:	f7fc fc21 	bl	800064c <__aeabi_d2uiz>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003e0e:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	791b      	ldrb	r3, [r3, #4]
 8003e14:	001a      	movs	r2, r3
 8003e16:	193b      	adds	r3, r7, r4
 8003e18:	795b      	ldrb	r3, [r3, #5]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7fd fc22 	bl	8001668 <__aeabi_ui2f>
 8003e24:	1c03      	adds	r3, r0, #0
 8003e26:	218a      	movs	r1, #138	@ 0x8a
 8003e28:	05c9      	lsls	r1, r1, #23
 8003e2a:	1c18      	adds	r0, r3, #0
 8003e2c:	f7fc fed2 	bl	8000bd4 <__aeabi_fdiv>
 8003e30:	1c03      	adds	r3, r0, #0
 8003e32:	1c18      	adds	r0, r3, #0
 8003e34:	f7ff fb16 	bl	8003464 <__aeabi_f2d>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	000b      	movs	r3, r1
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	2180      	movs	r1, #128	@ 0x80
 8003e40:	05c9      	lsls	r1, r1, #23
 8003e42:	f022 fbc7 	bl	80265d4 <pow>
 8003e46:	0002      	movs	r2, r0
 8003e48:	000b      	movs	r3, r1
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	f7fc fbfd 	bl	800064c <__aeabi_d2uiz>
 8003e52:	0002      	movs	r2, r0
 8003e54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003e56:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	799b      	ldrb	r3, [r3, #6]
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	79db      	ldrb	r3, [r3, #7]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4313      	orrs	r3, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7fd fbfe 	bl	8001668 <__aeabi_ui2f>
 8003e6c:	1c03      	adds	r3, r0, #0
 8003e6e:	218a      	movs	r1, #138	@ 0x8a
 8003e70:	05c9      	lsls	r1, r1, #23
 8003e72:	1c18      	adds	r0, r3, #0
 8003e74:	f7fc feae 	bl	8000bd4 <__aeabi_fdiv>
 8003e78:	1c03      	adds	r3, r0, #0
 8003e7a:	1c18      	adds	r0, r3, #0
 8003e7c:	f7ff faf2 	bl	8003464 <__aeabi_f2d>
 8003e80:	0002      	movs	r2, r0
 8003e82:	000b      	movs	r3, r1
 8003e84:	2000      	movs	r0, #0
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	05c9      	lsls	r1, r1, #23
 8003e8a:	f022 fba3 	bl	80265d4 <pow>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	000b      	movs	r3, r1
 8003e92:	0010      	movs	r0, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	f7fc fbd9 	bl	800064c <__aeabi_d2uiz>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003e9e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003ea0:	193a      	adds	r2, r7, r4
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	2038      	movs	r0, #56	@ 0x38
 8003ea8:	f7ff fc02 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	7819      	ldrb	r1, [r3, #0]
 8003eb0:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <ENS160_measureRaw+0x2dc>)
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003eb6:	2317      	movs	r3, #23
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b007      	add	sp, #28
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	20000464 	.word	0x20000464
 8003ec8:	08027928 	.word	0x08027928
 8003ecc:	08027874 	.word	0x08027874
 8003ed0:	20000474 	.word	0x20000474

08003ed4 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	0002      	movs	r2, r0
 8003edc:	1dbb      	adds	r3, r7, #6
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	1c0a      	adds	r2, r1, #0
 8003ee4:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003ee6:	1dbb      	adds	r3, r7, #6
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	2108      	movs	r1, #8
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003ef2:	1dbb      	adds	r3, r7, #6
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f18:	187a      	adds	r2, r7, r1
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	2013      	movs	r0, #19
 8003f20:	f7ff fb96 	bl	8003650 <WriteMemRegister>
 8003f24:	0003      	movs	r3, r0
 8003f26:	001a      	movs	r2, r3
 8003f28:	210f      	movs	r1, #15
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	701a      	strb	r2, [r3, #0]
  return result;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	4193      	sbcs	r3, r2
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b004      	add	sp, #16
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003f4a:	4916      	ldr	r1, [pc, #88]	@ (8003fa4 <ENS160_set_envdata+0x64>)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fc fcb7 	bl	80008c0 <__aeabi_fadd>
 8003f52:	1c03      	adds	r3, r0, #0
 8003f54:	2185      	movs	r1, #133	@ 0x85
 8003f56:	05c9      	lsls	r1, r1, #23
 8003f58:	1c18      	adds	r0, r3, #0
 8003f5a:	f7fd f821 	bl	8000fa0 <__aeabi_fmul>
 8003f5e:	1c03      	adds	r3, r0, #0
 8003f60:	250e      	movs	r5, #14
 8003f62:	197c      	adds	r4, r7, r5
 8003f64:	1c18      	adds	r0, r3, #0
 8003f66:	f7fc fb59 	bl	800061c <__aeabi_f2uiz>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003f6e:	2188      	movs	r1, #136	@ 0x88
 8003f70:	05c9      	lsls	r1, r1, #23
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f7fd f814 	bl	8000fa0 <__aeabi_fmul>
 8003f78:	1c03      	adds	r3, r0, #0
 8003f7a:	260c      	movs	r6, #12
 8003f7c:	19bc      	adds	r4, r7, r6
 8003f7e:	1c18      	adds	r0, r3, #0
 8003f80:	f7fc fb4c 	bl	800061c <__aeabi_f2uiz>
 8003f84:	0003      	movs	r3, r0
 8003f86:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8003f88:	19bb      	adds	r3, r7, r6
 8003f8a:	881a      	ldrh	r2, [r3, #0]
 8003f8c:	197b      	adds	r3, r7, r5
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	0011      	movs	r1, r2
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff ff9e 	bl	8003ed4 <ENS160_set_envdata210>
 8003f98:	0003      	movs	r3, r0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b005      	add	sp, #20
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	43889333 	.word	0x43889333

08003fa8 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 8003fae:	4bd3      	ldr	r3, [pc, #844]	@ (80042fc <ENS_Upkeep+0x354>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f00d fbb8 	bl	8011728 <TimestampIsReached>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	001a      	movs	r2, r3
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4053      	eors	r3, r2
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <ENS_Upkeep+0x24>
    return ENSState;
 8003fc6:	4bce      	ldr	r3, [pc, #824]	@ (8004300 <ENS_Upkeep+0x358>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	e1f8      	b.n	80043be <ENS_Upkeep+0x416>
  }
  switch(ENSState) {
 8003fcc:	4bcc      	ldr	r3, [pc, #816]	@ (8004300 <ENS_Upkeep+0x358>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d900      	bls.n	8003fd6 <ENS_Upkeep+0x2e>
 8003fd4:	e1dc      	b.n	8004390 <ENS_Upkeep+0x3e8>
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	4bca      	ldr	r3, [pc, #808]	@ (8004304 <ENS_Upkeep+0x35c>)
 8003fda:	18d3      	adds	r3, r2, r3
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8003fe0:	4ac9      	ldr	r2, [pc, #804]	@ (8004308 <ENS_Upkeep+0x360>)
 8003fe2:	4bca      	ldr	r3, [pc, #808]	@ (800430c <ENS_Upkeep+0x364>)
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f00d fbf4 	bl	80117d4 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8003fec:	f00e f83e 	bl	801206c <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	4ac7      	ldr	r2, [pc, #796]	@ (8004310 <ENS_Upkeep+0x368>)
 8003ff4:	189a      	adds	r2, r3, r2
 8003ff6:	4bc1      	ldr	r3, [pc, #772]	@ (80042fc <ENS_Upkeep+0x354>)
 8003ff8:	601a      	str	r2, [r3, #0]
    break;
 8003ffa:	e1de      	b.n	80043ba <ENS_Upkeep+0x412>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 8003ffc:	f007 fd58 	bl	800bab0 <getSensorLock>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d000      	beq.n	8004006 <ENS_Upkeep+0x5e>
 8004004:	e1d0      	b.n	80043a8 <ENS_Upkeep+0x400>
      break;
    }
    setSensorLock(ENS160);
 8004006:	2005      	movs	r0, #5
 8004008:	f007 fd42 	bl	800ba90 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800400c:	1d3c      	adds	r4, r7, #4
 800400e:	2002      	movs	r0, #2
 8004010:	f7ff fcca 	bl	80039a8 <ENS160_setMode>
 8004014:	0003      	movs	r3, r0
 8004016:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <ENS_Upkeep+0x7c>
 8004020:	4bbc      	ldr	r3, [pc, #752]	@ (8004314 <ENS_Upkeep+0x36c>)
 8004022:	e000      	b.n	8004026 <ENS_Upkeep+0x7e>
 8004024:	4bbc      	ldr	r3, [pc, #752]	@ (8004318 <ENS_Upkeep+0x370>)
 8004026:	4abd      	ldr	r2, [pc, #756]	@ (800431c <ENS_Upkeep+0x374>)
 8004028:	49b8      	ldr	r1, [pc, #736]	@ (800430c <ENS_Upkeep+0x364>)
 800402a:	2003      	movs	r0, #3
 800402c:	f00d fbd2 	bl	80117d4 <CreateLine>
    setSensorLock(FREE);
 8004030:	2000      	movs	r0, #0
 8004032:	f007 fd2d 	bl	800ba90 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004036:	4bb2      	ldr	r3, [pc, #712]	@ (8004300 <ENS_Upkeep+0x358>)
 8004038:	2203      	movs	r2, #3
 800403a:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 800403c:	f00e f816 	bl	801206c <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	22fa      	movs	r2, #250	@ 0xfa
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	189a      	adds	r2, r3, r2
 8004048:	4bac      	ldr	r3, [pc, #688]	@ (80042fc <ENS_Upkeep+0x354>)
 800404a:	601a      	str	r2, [r3, #0]
    break;
 800404c:	e1b5      	b.n	80043ba <ENS_Upkeep+0x412>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 800404e:	f007 fd2f 	bl	800bab0 <getSensorLock>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d000      	beq.n	8004058 <ENS_Upkeep+0xb0>
 8004056:	e1a9      	b.n	80043ac <ENS_Upkeep+0x404>
      break;
    }
    setSensorLock(ENS160);
 8004058:	2005      	movs	r0, #5
 800405a:	f007 fd19 	bl	800ba90 <setSensorLock>
    status = ENS160_readStatus();
 800405e:	1d7c      	adds	r4, r7, #5
 8004060:	f7ff fd2e 	bl	8003ac0 <ENS160_readStatus>
 8004064:	0003      	movs	r3, r0
 8004066:	7023      	strb	r3, [r4, #0]
    setSensorLock(FREE);
 8004068:	2000      	movs	r0, #0
 800406a:	f007 fd11 	bl	800ba90 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800406e:	1d7b      	adds	r3, r7, #5
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	220c      	movs	r2, #12
 8004074:	4013      	ands	r3, r2
 8004076:	d02d      	beq.n	80040d4 <ENS_Upkeep+0x12c>
      switch (status >> 2) {
 8004078:	1d7b      	adds	r3, r7, #5
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d013      	beq.n	80040ac <ENS_Upkeep+0x104>
 8004084:	dc19      	bgt.n	80040ba <ENS_Upkeep+0x112>
 8004086:	2b01      	cmp	r3, #1
 8004088:	d002      	beq.n	8004090 <ENS_Upkeep+0xe8>
 800408a:	2b02      	cmp	r3, #2
 800408c:	d007      	beq.n	800409e <ENS_Upkeep+0xf6>
 800408e:	e014      	b.n	80040ba <ENS_Upkeep+0x112>
      case 1:
        Debug("Warm-Up phase");
 8004090:	4aa3      	ldr	r2, [pc, #652]	@ (8004320 <ENS_Upkeep+0x378>)
 8004092:	4b9e      	ldr	r3, [pc, #632]	@ (800430c <ENS_Upkeep+0x364>)
 8004094:	0019      	movs	r1, r3
 8004096:	2003      	movs	r0, #3
 8004098:	f00d fb9c 	bl	80117d4 <CreateLine>
        break;
 800409c:	e00d      	b.n	80040ba <ENS_Upkeep+0x112>
      case 2:
        Debug("Initial Start-UP phase");
 800409e:	4aa1      	ldr	r2, [pc, #644]	@ (8004324 <ENS_Upkeep+0x37c>)
 80040a0:	4b9a      	ldr	r3, [pc, #616]	@ (800430c <ENS_Upkeep+0x364>)
 80040a2:	0019      	movs	r1, r3
 80040a4:	2003      	movs	r0, #3
 80040a6:	f00d fb95 	bl	80117d4 <CreateLine>
        break;
 80040aa:	e006      	b.n	80040ba <ENS_Upkeep+0x112>
      case 3:
        Debug("Invalid output");
 80040ac:	4a9e      	ldr	r2, [pc, #632]	@ (8004328 <ENS_Upkeep+0x380>)
 80040ae:	4b97      	ldr	r3, [pc, #604]	@ (800430c <ENS_Upkeep+0x364>)
 80040b0:	0019      	movs	r1, r3
 80040b2:	2003      	movs	r0, #3
 80040b4:	f00d fb8e 	bl	80117d4 <CreateLine>
        break;
 80040b8:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 80040ba:	1d7b      	adds	r3, r7, #5
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2203      	movs	r2, #3
 80040c0:	4013      	ands	r3, r2
 80040c2:	d107      	bne.n	80040d4 <ENS_Upkeep+0x12c>
        ENS160TimeStamp = HAL_GetTick() + 5000;
 80040c4:	f00d ffd2 	bl	801206c <HAL_GetTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	4a98      	ldr	r2, [pc, #608]	@ (800432c <ENS_Upkeep+0x384>)
 80040cc:	189a      	adds	r2, r3, r2
 80040ce:	4b8b      	ldr	r3, [pc, #556]	@ (80042fc <ENS_Upkeep+0x354>)
 80040d0:	601a      	str	r2, [r3, #0]
        break;
 80040d2:	e172      	b.n	80043ba <ENS_Upkeep+0x412>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80040d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004300 <ENS_Upkeep+0x358>)
 80040d6:	2204      	movs	r2, #4
 80040d8:	701a      	strb	r2, [r3, #0]
    break;
 80040da:	e16e      	b.n	80043ba <ENS_Upkeep+0x412>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80040dc:	f007 fce8 	bl	800bab0 <getSensorLock>
 80040e0:	1e03      	subs	r3, r0, #0
 80040e2:	d035      	beq.n	8004150 <ENS_Upkeep+0x1a8>
 80040e4:	f007 fce4 	bl	800bab0 <getSensorLock>
 80040e8:	0003      	movs	r3, r0
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d030      	beq.n	8004150 <ENS_Upkeep+0x1a8>
      uint8_t locktype = getSensorLock();
 80040ee:	1dbc      	adds	r4, r7, #6
 80040f0:	f007 fcde 	bl	800bab0 <getSensorLock>
 80040f4:	0003      	movs	r3, r0
 80040f6:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d019      	beq.n	8004134 <ENS_Upkeep+0x18c>
 8004100:	1dbb      	adds	r3, r7, #6
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d013      	beq.n	8004130 <ENS_Upkeep+0x188>
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d00d      	beq.n	800412c <ENS_Upkeep+0x184>
 8004110:	1dbb      	adds	r3, r7, #6
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d007      	beq.n	8004128 <ENS_Upkeep+0x180>
 8004118:	1dbb      	adds	r3, r7, #6
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d101      	bne.n	8004124 <ENS_Upkeep+0x17c>
 8004120:	4b83      	ldr	r3, [pc, #524]	@ (8004330 <ENS_Upkeep+0x388>)
 8004122:	e008      	b.n	8004136 <ENS_Upkeep+0x18e>
 8004124:	4b83      	ldr	r3, [pc, #524]	@ (8004334 <ENS_Upkeep+0x38c>)
 8004126:	e006      	b.n	8004136 <ENS_Upkeep+0x18e>
 8004128:	4b83      	ldr	r3, [pc, #524]	@ (8004338 <ENS_Upkeep+0x390>)
 800412a:	e004      	b.n	8004136 <ENS_Upkeep+0x18e>
 800412c:	4b83      	ldr	r3, [pc, #524]	@ (800433c <ENS_Upkeep+0x394>)
 800412e:	e002      	b.n	8004136 <ENS_Upkeep+0x18e>
 8004130:	4b83      	ldr	r3, [pc, #524]	@ (8004340 <ENS_Upkeep+0x398>)
 8004132:	e000      	b.n	8004136 <ENS_Upkeep+0x18e>
 8004134:	4b83      	ldr	r3, [pc, #524]	@ (8004344 <ENS_Upkeep+0x39c>)
 8004136:	4a84      	ldr	r2, [pc, #528]	@ (8004348 <ENS_Upkeep+0x3a0>)
 8004138:	4974      	ldr	r1, [pc, #464]	@ (800430c <ENS_Upkeep+0x364>)
 800413a:	2003      	movs	r0, #3
 800413c:	f00d fb4a 	bl	80117d4 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 97;
 8004140:	f00d ff94 	bl	801206c <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	3361      	adds	r3, #97	@ 0x61
 8004148:	001a      	movs	r2, r3
 800414a:	4b6c      	ldr	r3, [pc, #432]	@ (80042fc <ENS_Upkeep+0x354>)
 800414c:	601a      	str	r2, [r3, #0]
      break;
 800414e:	e134      	b.n	80043ba <ENS_Upkeep+0x412>
    }
    setSensorLock(ENS160);
 8004150:	2005      	movs	r0, #5
 8004152:	f007 fc9d 	bl	800ba90 <setSensorLock>
    status = ENS160_readStatus();
 8004156:	1d7c      	adds	r4, r7, #5
 8004158:	f7ff fcb2 	bl	8003ac0 <ENS160_readStatus>
 800415c:	0003      	movs	r3, r0
 800415e:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004160:	1d7b      	adds	r3, r7, #5
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
 8004168:	d10b      	bne.n	8004182 <ENS_Upkeep+0x1da>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800416a:	f00d ff7f 	bl	801206c <HAL_GetTick>
 800416e:	0003      	movs	r3, r0
 8004170:	33f5      	adds	r3, #245	@ 0xf5
 8004172:	33ff      	adds	r3, #255	@ 0xff
 8004174:	001a      	movs	r2, r3
 8004176:	4b61      	ldr	r3, [pc, #388]	@ (80042fc <ENS_Upkeep+0x354>)
 8004178:	601a      	str	r2, [r3, #0]
      setSensorLock(FREE);
 800417a:	2000      	movs	r0, #0
 800417c:	f007 fc88 	bl	800ba90 <setSensorLock>
      break;
 8004180:	e11b      	b.n	80043ba <ENS_Upkeep+0x412>
    }
    ENS160_measure(false);
 8004182:	2000      	movs	r0, #0
 8004184:	f7ff fcbc 	bl	8003b00 <ENS160_measure>
    HAL_Delay(10);
 8004188:	200a      	movs	r0, #10
 800418a:	f00d ff79 	bl	8012080 <HAL_Delay>
    ENS160_measureRaw(false);
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff fd30 	bl	8003bf4 <ENS160_measureRaw>
    HAL_Delay(10);
 8004194:	200a      	movs	r0, #10
 8004196:	f00d ff73 	bl	8012080 <HAL_Delay>
    setSensorLock(FREE);
 800419a:	2000      	movs	r0, #0
 800419c:	f007 fc78 	bl	800ba90 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 80041a0:	4b57      	ldr	r3, [pc, #348]	@ (8004300 <ENS_Upkeep+0x358>)
 80041a2:	2206      	movs	r2, #6
 80041a4:	701a      	strb	r2, [r3, #0]
    break;
 80041a6:	e108      	b.n	80043ba <ENS_Upkeep+0x412>

  case ENS_STATE_PROCESS_RESULTS:
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80041a8:	4b68      	ldr	r3, [pc, #416]	@ (800434c <ENS_Upkeep+0x3a4>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001c      	movs	r4, r3
 80041ae:	4b67      	ldr	r3, [pc, #412]	@ (800434c <ENS_Upkeep+0x3a4>)
 80041b0:	885b      	ldrh	r3, [r3, #2]
 80041b2:	0018      	movs	r0, r3
 80041b4:	4b65      	ldr	r3, [pc, #404]	@ (800434c <ENS_Upkeep+0x3a4>)
 80041b6:	889b      	ldrh	r3, [r3, #4]
 80041b8:	4a65      	ldr	r2, [pc, #404]	@ (8004350 <ENS_Upkeep+0x3a8>)
 80041ba:	4966      	ldr	r1, [pc, #408]	@ (8004354 <ENS_Upkeep+0x3ac>)
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	9000      	str	r0, [sp, #0]
 80041c0:	0023      	movs	r3, r4
 80041c2:	2002      	movs	r0, #2
 80041c4:	f00d fb06 	bl	80117d4 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80041c8:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4b62      	ldr	r3, [pc, #392]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a62      	ldr	r2, [pc, #392]	@ (800435c <ENS_Upkeep+0x3b4>)
 80041d2:	4960      	ldr	r1, [pc, #384]	@ (8004354 <ENS_Upkeep+0x3ac>)
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	0003      	movs	r3, r0
 80041d8:	2002      	movs	r0, #2
 80041da:	f00d fafb 	bl	80117d4 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80041de:	4b5e      	ldr	r3, [pc, #376]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041e0:	6898      	ldr	r0, [r3, #8]
 80041e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <ENS_Upkeep+0x3b8>)
 80041e8:	495a      	ldr	r1, [pc, #360]	@ (8004354 <ENS_Upkeep+0x3ac>)
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	0003      	movs	r3, r0
 80041ee:	2002      	movs	r0, #2
 80041f0:	f00d faf0 	bl	80117d4 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80041f4:	4b58      	ldr	r3, [pc, #352]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041f6:	6918      	ldr	r0, [r3, #16]
 80041f8:	4b57      	ldr	r3, [pc, #348]	@ (8004358 <ENS_Upkeep+0x3b0>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4a59      	ldr	r2, [pc, #356]	@ (8004364 <ENS_Upkeep+0x3bc>)
 80041fe:	4955      	ldr	r1, [pc, #340]	@ (8004354 <ENS_Upkeep+0x3ac>)
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	0003      	movs	r3, r0
 8004204:	2002      	movs	r0, #2
 8004206:	f00d fae5 	bl	80117d4 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 800420a:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <ENS_Upkeep+0x3b0>)
 800420c:	6998      	ldr	r0, [r3, #24]
 800420e:	4b52      	ldr	r3, [pc, #328]	@ (8004358 <ENS_Upkeep+0x3b0>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4a55      	ldr	r2, [pc, #340]	@ (8004368 <ENS_Upkeep+0x3c0>)
 8004214:	494f      	ldr	r1, [pc, #316]	@ (8004354 <ENS_Upkeep+0x3ac>)
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	0003      	movs	r3, r0
 800421a:	2002      	movs	r0, #2
 800421c:	f00d fada 	bl	80117d4 <CreateLine>
    ENSState = ENS_LOW_POWER;
 8004220:	4b37      	ldr	r3, [pc, #220]	@ (8004300 <ENS_Upkeep+0x358>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
    break;
 8004226:	e0c8      	b.n	80043ba <ENS_Upkeep+0x412>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 5000;
 8004228:	f00d ff20 	bl	801206c <HAL_GetTick>
 800422c:	0003      	movs	r3, r0
 800422e:	4a3f      	ldr	r2, [pc, #252]	@ (800432c <ENS_Upkeep+0x384>)
 8004230:	189a      	adds	r2, r3, r2
 8004232:	4b32      	ldr	r3, [pc, #200]	@ (80042fc <ENS_Upkeep+0x354>)
 8004234:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle) {
 8004236:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <ENS_Upkeep+0x3c4>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	4053      	eors	r3, r2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02a      	beq.n	800429a <ENS_Upkeep+0x2f2>
 8004244:	4b4a      	ldr	r3, [pc, #296]	@ (8004370 <ENS_Upkeep+0x3c8>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	4053      	eors	r3, r2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <ENS_Upkeep+0x2f2>
      if (getSensorLock() != FREE) {
 8004252:	f007 fc2d 	bl	800bab0 <getSensorLock>
 8004256:	1e03      	subs	r3, r0, #0
 8004258:	d000      	beq.n	800425c <ENS_Upkeep+0x2b4>
 800425a:	e0a9      	b.n	80043b0 <ENS_Upkeep+0x408>
        break;
      }
      setSensorLock(ENS160);
 800425c:	2005      	movs	r0, #5
 800425e:	f007 fc17 	bl	800ba90 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004262:	1cfc      	adds	r4, r7, #3
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff fb9f 	bl	80039a8 <ENS160_setMode>
 800426a:	0003      	movs	r3, r0
 800426c:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s", result?"done.":"failed.");
 800426e:	1cfb      	adds	r3, r7, #3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <ENS_Upkeep+0x2d2>
 8004276:	4b27      	ldr	r3, [pc, #156]	@ (8004314 <ENS_Upkeep+0x36c>)
 8004278:	e000      	b.n	800427c <ENS_Upkeep+0x2d4>
 800427a:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <ENS_Upkeep+0x370>)
 800427c:	4a3d      	ldr	r2, [pc, #244]	@ (8004374 <ENS_Upkeep+0x3cc>)
 800427e:	4923      	ldr	r1, [pc, #140]	@ (800430c <ENS_Upkeep+0x364>)
 8004280:	2003      	movs	r0, #3
 8004282:	f00d faa7 	bl	80117d4 <CreateLine>
      setSensorLock(FREE);
 8004286:	2000      	movs	r0, #0
 8004288:	f007 fc02 	bl	800ba90 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 800428c:	f00d feee 	bl	801206c <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	4a39      	ldr	r2, [pc, #228]	@ (8004378 <ENS_Upkeep+0x3d0>)
 8004294:	189a      	adds	r2, r3, r2
 8004296:	4b19      	ldr	r3, [pc, #100]	@ (80042fc <ENS_Upkeep+0x354>)
 8004298:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <ENS_Upkeep+0x358>)
 800429c:	2208      	movs	r2, #8
 800429e:	701a      	strb	r2, [r3, #0]
    break;
 80042a0:	e08b      	b.n	80043ba <ENS_Upkeep+0x412>

  case ENS_STATE_WAIT:
    ENSState = ENS_STATUS_CHECK;
 80042a2:	4b17      	ldr	r3, [pc, #92]	@ (8004300 <ENS_Upkeep+0x358>)
 80042a4:	2203      	movs	r2, #3
 80042a6:	701a      	strb	r2, [r3, #0]
    if (usbPluggedIn || userToggle) {
 80042a8:	4b30      	ldr	r3, [pc, #192]	@ (800436c <ENS_Upkeep+0x3c4>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <ENS_Upkeep+0x312>
 80042b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004370 <ENS_Upkeep+0x3c8>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d100      	bne.n	80042ba <ENS_Upkeep+0x312>
 80042b8:	e07c      	b.n	80043b4 <ENS_Upkeep+0x40c>
      if (getSensorLock() != FREE) {
 80042ba:	f007 fbf9 	bl	800bab0 <getSensorLock>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d003      	beq.n	80042ca <ENS_Upkeep+0x322>
        ENSState = ENS_STATE_WAIT;
 80042c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <ENS_Upkeep+0x358>)
 80042c4:	2208      	movs	r2, #8
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e077      	b.n	80043ba <ENS_Upkeep+0x412>
        break;
      }
      setSensorLock(ENS160);
 80042ca:	2005      	movs	r0, #5
 80042cc:	f007 fbe0 	bl	800ba90 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 80042d0:	1cba      	adds	r2, r7, #2
 80042d2:	2301      	movs	r3, #1
 80042d4:	2101      	movs	r1, #1
 80042d6:	2010      	movs	r0, #16
 80042d8:	f7ff f9ea 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 80042dc:	1cbb      	adds	r3, r7, #2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d167      	bne.n	80043b4 <ENS_Upkeep+0x40c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80042e4:	1dfc      	adds	r4, r7, #7
 80042e6:	2002      	movs	r0, #2
 80042e8:	f7ff fb5e 	bl	80039a8 <ENS160_setMode>
 80042ec:	0003      	movs	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 80042f0:	1dfb      	adds	r3, r7, #7
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d041      	beq.n	800437c <ENS_Upkeep+0x3d4>
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <ENS_Upkeep+0x36c>)
 80042fa:	e040      	b.n	800437e <ENS_Upkeep+0x3d6>
 80042fc:	20000468 	.word	0x20000468
 8004300:	20000000 	.word	0x20000000
 8004304:	0802ad84 	.word	0x0802ad84
 8004308:	08027948 	.word	0x08027948
 800430c:	08027874 	.word	0x08027874
 8004310:	002f9b80 	.word	0x002f9b80
 8004314:	0802797c 	.word	0x0802797c
 8004318:	08027984 	.word	0x08027984
 800431c:	0802798c 	.word	0x0802798c
 8004320:	080279b0 	.word	0x080279b0
 8004324:	080279c0 	.word	0x080279c0
 8004328:	080279d8 	.word	0x080279d8
 800432c:	00001388 	.word	0x00001388
 8004330:	080279e8 	.word	0x080279e8
 8004334:	080279f0 	.word	0x080279f0
 8004338:	080279f8 	.word	0x080279f8
 800433c:	08027a00 	.word	0x08027a00
 8004340:	08027a08 	.word	0x08027a08
 8004344:	08027a10 	.word	0x08027a10
 8004348:	08027a18 	.word	0x08027a18
 800434c:	20000498 	.word	0x20000498
 8004350:	08027a40 	.word	0x08027a40
 8004354:	08027a6c 	.word	0x08027a6c
 8004358:	20000474 	.word	0x20000474
 800435c:	08027a70 	.word	0x08027a70
 8004360:	08027a8c 	.word	0x08027a8c
 8004364:	08027aa8 	.word	0x08027aa8
 8004368:	08027ac4 	.word	0x08027ac4
 800436c:	20001e2d 	.word	0x20001e2d
 8004370:	20001e2e 	.word	0x20001e2e
 8004374:	08027ae0 	.word	0x08027ae0
 8004378:	0000afc8 	.word	0x0000afc8
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <ENS_Upkeep+0x420>)
 800437e:	4a13      	ldr	r2, [pc, #76]	@ (80043cc <ENS_Upkeep+0x424>)
 8004380:	4913      	ldr	r1, [pc, #76]	@ (80043d0 <ENS_Upkeep+0x428>)
 8004382:	2003      	movs	r0, #3
 8004384:	f00d fa26 	bl	80117d4 <CreateLine>
        setSensorLock(FREE);
 8004388:	2000      	movs	r0, #0
 800438a:	f007 fb81 	bl	800ba90 <setSensorLock>
      }
    }
    break;
 800438e:	e011      	b.n	80043b4 <ENS_Upkeep+0x40c>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004390:	4b10      	ldr	r3, [pc, #64]	@ (80043d4 <ENS_Upkeep+0x42c>)
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 8004396:	f007 fb8b 	bl	800bab0 <getSensorLock>
 800439a:	0003      	movs	r3, r0
 800439c:	2b05      	cmp	r3, #5
 800439e:	d00b      	beq.n	80043b8 <ENS_Upkeep+0x410>
      setSensorLock(FREE);
 80043a0:	2000      	movs	r0, #0
 80043a2:	f007 fb75 	bl	800ba90 <setSensorLock>
    }
    break;
 80043a6:	e007      	b.n	80043b8 <ENS_Upkeep+0x410>
      break;
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	e006      	b.n	80043ba <ENS_Upkeep+0x412>
      break;
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	e004      	b.n	80043ba <ENS_Upkeep+0x412>
        break;
 80043b0:	46c0      	nop			@ (mov r8, r8)
 80043b2:	e002      	b.n	80043ba <ENS_Upkeep+0x412>
    break;
 80043b4:	46c0      	nop			@ (mov r8, r8)
 80043b6:	e000      	b.n	80043ba <ENS_Upkeep+0x412>
    break;
 80043b8:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <ENS_Upkeep+0x42c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b003      	add	sp, #12
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	08027984 	.word	0x08027984
 80043cc:	08027b04 	.word	0x08027b04
 80043d0:	08027874 	.word	0x08027874
 80043d4:	20000000 	.word	0x20000000

080043d8 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80043dc:	4b02      	ldr	r3, [pc, #8]	@ (80043e8 <forceNTPupdate+0x10>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000684 	.word	0x20000684

080043ec <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80043f4:	f00d fe3a 	bl	801206c <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	18d2      	adds	r2, r2, r3
 80043fe:	4b03      	ldr	r3, [pc, #12]	@ (800440c <setESPTimeStamp+0x20>)
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	20000680 	.word	0x20000680

08004410 <setCharges>:
void setCharges(){
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004414:	f003 fc46 	bl	8007ca4 <ReadBatteryVoltage>
 8004418:	1c02      	adds	r2, r0, #0
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <setCharges+0x3c>)
 800441c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800441e:	f003 fca3 	bl	8007d68 <ReadSolarVoltage>
 8004422:	0003      	movs	r3, r0
 8004424:	0018      	movs	r0, r3
 8004426:	f7fe ffcb 	bl	80033c0 <__aeabi_i2d>
 800442a:	2200      	movs	r2, #0
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <setCharges+0x40>)
 800442e:	f7fd fcc1 	bl	8001db4 <__aeabi_ddiv>
 8004432:	0002      	movs	r2, r0
 8004434:	000b      	movs	r3, r1
 8004436:	0010      	movs	r0, r2
 8004438:	0019      	movs	r1, r3
 800443a:	f7ff f85b 	bl	80034f4 <__aeabi_d2f>
 800443e:	1c02      	adds	r2, r0, #0
 8004440:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <setCharges+0x44>)
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	46c0      	nop			@ (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	200005d8 	.word	0x200005d8
 8004450:	408f4000 	.word	0x408f4000
 8004454:	200005dc 	.word	0x200005dc

08004458 <checkEEprom>:
bool checkEEprom(){
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800445e:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <checkEEprom+0x5c>)
 8004460:	4815      	ldr	r0, [pc, #84]	@ (80044b8 <checkEEprom+0x60>)
 8004462:	220c      	movs	r2, #12
 8004464:	0019      	movs	r1, r3
 8004466:	f005 fe57 	bl	800a118 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800446a:	1dfb      	adds	r3, r7, #7
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e00e      	b.n	8004490 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8004472:	1dfb      	adds	r3, r7, #7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	4a0f      	ldr	r2, [pc, #60]	@ (80044b4 <checkEEprom+0x5c>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	001a      	movs	r2, r3
 800447c:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <checkEEprom+0x64>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	18d2      	adds	r2, r2, r3
 8004482:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <checkEEprom+0x64>)
 8004484:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004486:	1dfb      	adds	r3, r7, #7
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	1dfb      	adds	r3, r7, #7
 800448c:	3201      	adds	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b0b      	cmp	r3, #11
 8004496:	d9ec      	bls.n	8004472 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <checkEEprom+0x64>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	425a      	negs	r2, r3
 800449e:	4153      	adcs	r3, r2
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <checkEEprom+0x68>)
 80044a4:	701a      	strb	r2, [r3, #0]
  return test;
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <checkEEprom+0x68>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	200006cc 	.word	0x200006cc
 80044b8:	0808000c 	.word	0x0808000c
 80044bc:	200006d8 	.word	0x200006d8
 80044c0:	200006dc 	.word	0x200006dc

080044c4 <checkName>:
bool checkName(){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <checkName+0x5c>)
 80044cc:	4815      	ldr	r0, [pc, #84]	@ (8004524 <checkName+0x60>)
 80044ce:	2220      	movs	r2, #32
 80044d0:	0019      	movs	r1, r3
 80044d2:	f005 fe21 	bl	800a118 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e00e      	b.n	80044fc <checkName+0x38>
    configSum += nameConfig[i];
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004520 <checkName+0x5c>)
 80044e4:	5cd3      	ldrb	r3, [r2, r3]
 80044e6:	001a      	movs	r2, r3
 80044e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004528 <checkName+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	18d2      	adds	r2, r2, r3
 80044ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <checkName+0x64>)
 80044f0:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	3201      	adds	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b0b      	cmp	r3, #11
 8004502:	d9ec      	bls.n	80044de <checkName+0x1a>
  }
  test = (configSum != 0);
 8004504:	4b08      	ldr	r3, [pc, #32]	@ (8004528 <checkName+0x64>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	4193      	sbcs	r3, r2
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <checkName+0x68>)
 8004510:	701a      	strb	r2, [r3, #0]
  return test;
 8004512:	4b06      	ldr	r3, [pc, #24]	@ (800452c <checkName+0x68>)
 8004514:	781b      	ldrb	r3, [r3, #0]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	200006e0 	.word	0x200006e0
 8004524:	08080090 	.word	0x08080090
 8004528:	20000700 	.word	0x20000700
 800452c:	20000704 	.word	0x20000704

08004530 <setHIDS>:


void setHIDS(float temp, float humid){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 800453a:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <setHIDS+0x20>)
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <setHIDS+0x20>)
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	20000690 	.word	0x20000690

08004554 <setVOC>:

void setVOC(uint16_t voc) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	0002      	movs	r2, r0
 800455c:	1dbb      	adds	r3, r7, #6
 800455e:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004560:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <setVOC+0x30>)
 8004562:	1dba      	adds	r2, r7, #6
 8004564:	8812      	ldrh	r2, [r2, #0]
 8004566:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <setVOC+0x30>)
 800456a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800456c:	1dba      	adds	r2, r7, #6
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 8004574:	4b03      	ldr	r3, [pc, #12]	@ (8004584 <setVOC+0x30>)
 8004576:	1dba      	adds	r2, r7, #6
 8004578:	8812      	ldrh	r2, [r2, #0]
 800457a:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000690 	.word	0x20000690

08004588 <sethPa>:

void sethPa(float hPa) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <sethPa+0x30>)
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <sethPa+0x30>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	1c19      	adds	r1, r3, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fb ffdb 	bl	8000558 <__aeabi_fcmpgt>
 80045a2:	1e03      	subs	r3, r0, #0
 80045a4:	d100      	bne.n	80045a8 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 80045a6:	e002      	b.n	80045ae <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <sethPa+0x30>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	20000690 	.word	0x20000690

080045bc <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 80045c8:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <setMic+0x28>)
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 80045ce:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <setMic+0x28>)
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <setMic+0x28>)
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	20000690 	.word	0x20000690

080045e8 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	0002      	movs	r2, r0
 80045f0:	1dbb      	adds	r3, r7, #6
 80045f2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 80045f4:	1dbb      	adds	r3, r7, #6
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fc ffe9 	bl	80015d0 <__aeabi_i2f>
 80045fe:	1c03      	adds	r3, r0, #0
 8004600:	490d      	ldr	r1, [pc, #52]	@ (8004638 <setPM2p5+0x50>)
 8004602:	1c18      	adds	r0, r3, #0
 8004604:	f7fc fae6 	bl	8000bd4 <__aeabi_fdiv>
 8004608:	1c03      	adds	r3, r0, #0
 800460a:	1c1a      	adds	r2, r3, #0
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <setPM2p5+0x54>)
 800460e:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <setPM2p5+0x54>)
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <setPM2p5+0x54>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	1c19      	adds	r1, r3, #0
 800461a:	1c10      	adds	r0, r2, #0
 800461c:	f7fb ff9c 	bl	8000558 <__aeabi_fcmpgt>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d100      	bne.n	8004626 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004624:	e003      	b.n	800462e <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <setPM2p5+0x54>)
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	4b04      	ldr	r3, [pc, #16]	@ (800463c <setPM2p5+0x54>)
 800462c:	60da      	str	r2, [r3, #12]
}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b002      	add	sp, #8
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	41200000 	.word	0x41200000
 800463c:	20000690 	.word	0x20000690

08004640 <setPM10>:

void setPM10(uint16_t PM10) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	0002      	movs	r2, r0
 8004648:	1dbb      	adds	r3, r7, #6
 800464a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 800464c:	1dbb      	adds	r3, r7, #6
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f7fc ffbd 	bl	80015d0 <__aeabi_i2f>
 8004656:	1c03      	adds	r3, r0, #0
 8004658:	490d      	ldr	r1, [pc, #52]	@ (8004690 <setPM10+0x50>)
 800465a:	1c18      	adds	r0, r3, #0
 800465c:	f7fc faba 	bl	8000bd4 <__aeabi_fdiv>
 8004660:	1c03      	adds	r3, r0, #0
 8004662:	1c1a      	adds	r2, r3, #0
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <setPM10+0x54>)
 8004666:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004668:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <setPM10+0x54>)
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <setPM10+0x54>)
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	1c19      	adds	r1, r3, #0
 8004672:	1c10      	adds	r0, r2, #0
 8004674:	f7fb ff70 	bl	8000558 <__aeabi_fcmpgt>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d100      	bne.n	800467e <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 800467c:	e003      	b.n	8004686 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 800467e:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <setPM10+0x54>)
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <setPM10+0x54>)
 8004684:	615a      	str	r2, [r3, #20]
}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	41200000 	.word	0x41200000
 8004694:	20000690 	.word	0x20000690

08004698 <setNOx>:

void setNOx(uint16_t nox) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	0002      	movs	r2, r0
 80046a0:	1dbb      	adds	r3, r7, #6
 80046a2:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <setNOx+0x30>)
 80046a6:	1dba      	adds	r2, r7, #6
 80046a8:	8812      	ldrh	r2, [r2, #0]
 80046aa:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <setNOx+0x30>)
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b0:	1dba      	adds	r2, r7, #6
 80046b2:	8812      	ldrh	r2, [r2, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d903      	bls.n	80046c0 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <setNOx+0x30>)
 80046ba:	1dba      	adds	r2, r7, #6
 80046bc:	8812      	ldrh	r2, [r2, #0]
 80046be:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000690 	.word	0x20000690

080046cc <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 80046d0:	f007 fda2 	bl	800c218 <sen5x_Get_sen5x_enable_state>
 80046d4:	1e03      	subs	r3, r0, #0
 80046d6:	d008      	beq.n	80046ea <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 80046d8:	4b08      	ldr	r3, [pc, #32]	@ (80046fc <resetMaxMeasurementValues+0x30>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 80046de:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <resetMaxMeasurementValues+0x30>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <resetMaxMeasurementValues+0x30>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.hPaValuemax = 0.0;
 80046ea:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <resetMaxMeasurementValues+0x30>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.VOCIndexmax = 0;
 80046f0:	4b02      	ldr	r3, [pc, #8]	@ (80046fc <resetMaxMeasurementValues+0x30>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000690 	.word	0x20000690

08004700 <SetConfigMode>:

void SetConfigMode(){
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004704:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <SetConfigMode+0x30>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	4053      	eors	r3, r2
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004712:	4a08      	ldr	r2, [pc, #32]	@ (8004734 <SetConfigMode+0x34>)
 8004714:	4b08      	ldr	r3, [pc, #32]	@ (8004738 <SetConfigMode+0x38>)
 8004716:	0019      	movs	r1, r3
 8004718:	2003      	movs	r0, #3
 800471a:	f00d f85b 	bl	80117d4 <CreateLine>
  }
  ReconfigSet = true;
 800471e:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <SetConfigMode+0x30>)
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <SetConfigMode+0x3c>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200005b7 	.word	0x200005b7
 8004734:	08027b34 	.word	0x08027b34
 8004738:	08027b54 	.word	0x08027b54
 800473c:	20000207 	.word	0x20000207

08004740 <GetReconfigMode>:

bool GetReconfigMode() {
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004744:	4b02      	ldr	r3, [pc, #8]	@ (8004750 <GetReconfigMode+0x10>)
 8004746:	781b      	ldrb	r3, [r3, #0]
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	200005b7 	.word	0x200005b7

08004754 <ESP_GetUID>:

void ESP_GetUID(){
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004758:	f00d fcd2 	bl	8012100 <HAL_GetUIDw0>
 800475c:	0002      	movs	r2, r0
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <ESP_GetUID+0x28>)
 8004760:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004762:	f00d fcd7 	bl	8012114 <HAL_GetUIDw1>
 8004766:	0002      	movs	r2, r0
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <ESP_GetUID+0x28>)
 800476a:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 800476c:	f00d fcdc 	bl	8012128 <HAL_GetUIDw2>
 8004770:	0002      	movs	r2, r0
 8004772:	4b02      	ldr	r3, [pc, #8]	@ (800477c <ESP_GetUID+0x28>)
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200005c0 	.word	0x200005c0

08004780 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004788:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <ESP_Init+0x2c>)
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <ESP_Init+0x30>)
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004794:	f7ff ffde 	bl	8004754 <ESP_GetUID>
  beurs = checkEEprom();
 8004798:	f7ff fe5e 	bl	8004458 <checkEEprom>
 800479c:	0003      	movs	r3, r0
 800479e:	001a      	movs	r2, r3
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <ESP_Init+0x34>)
 80047a2:	701a      	strb	r2, [r3, #0]
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200004ac 	.word	0x200004ac
 80047b0:	2000002c 	.word	0x2000002c
 80047b4:	200005ba 	.word	0x200005ba

080047b8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	000a      	movs	r2, r1
 80047c2:	1cbb      	adds	r3, r7, #2
 80047c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <ESP_Send+0x54>)
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	250f      	movs	r5, #15
 80047cc:	197c      	adds	r4, r7, r5
 80047ce:	1cbb      	adds	r3, r7, #2
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0019      	movs	r1, r3
 80047d6:	f016 fa0b 	bl	801abf0 <HAL_UART_Transmit_DMA>
 80047da:	0003      	movs	r3, r0
 80047dc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80047de:	197b      	adds	r3, r7, r5
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 80047e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004810 <ESP_Send+0x58>)
 80047e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004814 <ESP_Send+0x5c>)
 80047ea:	0019      	movs	r1, r3
 80047ec:	2001      	movs	r0, #1
 80047ee:	f00c fff1 	bl	80117d4 <CreateLine>
    return false;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e006      	b.n	8004804 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	4b07      	ldr	r3, [pc, #28]	@ (8004818 <ESP_Send+0x60>)
 80047fa:	0011      	movs	r1, r2
 80047fc:	0018      	movs	r0, r3
 80047fe:	f01e ff71 	bl	80236e4 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004802:	2301      	movs	r3, #1
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b004      	add	sp, #16
 800480a:	bdb0      	pop	{r4, r5, r7, pc}
 800480c:	200004ac 	.word	0x200004ac
 8004810:	08027b58 	.word	0x08027b58
 8004814:	08027b78 	.word	0x08027b78
 8004818:	08027b7c 	.word	0x08027b7c

0800481c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	000a      	movs	r2, r1
 8004826:	1cbb      	adds	r3, r7, #2
 8004828:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 800482a:	4b52      	ldr	r3, [pc, #328]	@ (8004974 <ESP_Receive+0x158>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004830:	260f      	movs	r6, #15
 8004832:	19bb      	adds	r3, r7, r6
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <ESP_Receive+0x15c>)
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	250e      	movs	r5, #14
 800483e:	197c      	adds	r4, r7, r5
 8004840:	1cbb      	adds	r3, r7, #2
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	0019      	movs	r1, r3
 8004848:	f016 fa62 	bl	801ad10 <HAL_UART_Receive_DMA>
 800484c:	0003      	movs	r3, r0
 800484e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004850:	002c      	movs	r4, r5
 8004852:	193b      	adds	r3, r7, r4
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d100      	bne.n	800485c <ESP_Receive+0x40>
 800485a:	e085      	b.n	8004968 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 800485c:	4b46      	ldr	r3, [pc, #280]	@ (8004978 <ESP_Receive+0x15c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2284      	movs	r2, #132	@ 0x84
 8004862:	589b      	ldr	r3, [r3, r2]
 8004864:	4a45      	ldr	r2, [pc, #276]	@ (800497c <ESP_Receive+0x160>)
 8004866:	4946      	ldr	r1, [pc, #280]	@ (8004980 <ESP_Receive+0x164>)
 8004868:	2001      	movs	r0, #1
 800486a:	f00c ffb3 	bl	80117d4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 800486e:	193b      	adds	r3, r7, r4
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	4013      	ands	r3, r2
 8004876:	d008      	beq.n	800488a <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004878:	4a42      	ldr	r2, [pc, #264]	@ (8004984 <ESP_Receive+0x168>)
 800487a:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <ESP_Receive+0x164>)
 800487c:	0019      	movs	r1, r3
 800487e:	2001      	movs	r0, #1
 8004880:	f00c ffa8 	bl	80117d4 <CreateLine>
      reset = true;
 8004884:	19bb      	adds	r3, r7, r6
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 800488a:	230e      	movs	r3, #14
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2202      	movs	r2, #2
 8004892:	4013      	ands	r3, r2
 8004894:	d005      	beq.n	80048a2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004896:	4a3c      	ldr	r2, [pc, #240]	@ (8004988 <ESP_Receive+0x16c>)
 8004898:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <ESP_Receive+0x164>)
 800489a:	0019      	movs	r1, r3
 800489c:	2001      	movs	r0, #1
 800489e:	f00c ff99 	bl	80117d4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 80048a2:	230e      	movs	r3, #14
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2204      	movs	r2, #4
 80048aa:	4013      	ands	r3, r2
 80048ac:	d005      	beq.n	80048ba <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 80048ae:	4a37      	ldr	r2, [pc, #220]	@ (800498c <ESP_Receive+0x170>)
 80048b0:	4b33      	ldr	r3, [pc, #204]	@ (8004980 <ESP_Receive+0x164>)
 80048b2:	0019      	movs	r1, r3
 80048b4:	2001      	movs	r0, #1
 80048b6:	f00c ff8d 	bl	80117d4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 80048ba:	230e      	movs	r3, #14
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
 80048c4:	d005      	beq.n	80048d2 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 80048c6:	4a32      	ldr	r2, [pc, #200]	@ (8004990 <ESP_Receive+0x174>)
 80048c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004980 <ESP_Receive+0x164>)
 80048ca:	0019      	movs	r1, r3
 80048cc:	2001      	movs	r0, #1
 80048ce:	f00c ff81 	bl	80117d4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 80048d2:	230e      	movs	r3, #14
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2210      	movs	r2, #16
 80048da:	4013      	ands	r3, r2
 80048dc:	d005      	beq.n	80048ea <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 80048de:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <ESP_Receive+0x178>)
 80048e0:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <ESP_Receive+0x164>)
 80048e2:	0019      	movs	r1, r3
 80048e4:	2001      	movs	r0, #1
 80048e6:	f00c ff75 	bl	80117d4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 80048ea:	230e      	movs	r3, #14
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2220      	movs	r2, #32
 80048f2:	4013      	ands	r3, r2
 80048f4:	d005      	beq.n	8004902 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <ESP_Receive+0x17c>)
 80048f8:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <ESP_Receive+0x164>)
 80048fa:	0019      	movs	r1, r3
 80048fc:	2001      	movs	r0, #1
 80048fe:	f00c ff69 	bl	80117d4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004902:	230e      	movs	r3, #14
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2240      	movs	r2, #64	@ 0x40
 800490a:	4013      	ands	r3, r2
 800490c:	d005      	beq.n	800491a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800490e:	4a23      	ldr	r2, [pc, #140]	@ (800499c <ESP_Receive+0x180>)
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <ESP_Receive+0x164>)
 8004912:	0019      	movs	r1, r3
 8004914:	2001      	movs	r0, #1
 8004916:	f00c ff5d 	bl	80117d4 <CreateLine>
    }
#endif
    if (reset) {
 800491a:	230f      	movs	r3, #15
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01c      	beq.n	800495e <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004924:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <ESP_Receive+0x184>)
 8004926:	2200      	movs	r2, #0
 8004928:	2101      	movs	r1, #1
 800492a:	0018      	movs	r0, r3
 800492c:	f00e fe2f 	bl	801358e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004930:	2001      	movs	r0, #1
 8004932:	f00d fba5 	bl	8012080 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004936:	2380      	movs	r3, #128	@ 0x80
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	481a      	ldr	r0, [pc, #104]	@ (80049a4 <ESP_Receive+0x188>)
 800493c:	2200      	movs	r2, #0
 800493e:	0019      	movs	r1, r3
 8004940:	f00e fe25 	bl	801358e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004944:	2001      	movs	r0, #1
 8004946:	f00d fb9b 	bl	8012080 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800494a:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <ESP_Receive+0x184>)
 800494c:	2200      	movs	r2, #0
 800494e:	2102      	movs	r1, #2
 8004950:	0018      	movs	r0, r3
 8004952:	f00e fe1c 	bl	801358e <HAL_GPIO_WritePin>
      SetAllREDLED();
 8004956:	f00b feaf 	bl	80106b8 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 800495a:	f00e f850 	bl	80129fe <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <ESP_Receive+0x158>)
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
    return false;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <ESP_Receive+0x14e>
  }
  return true;
 8004968:	2301      	movs	r3, #1
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b005      	add	sp, #20
 8004970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	200004b0 	.word	0x200004b0
 8004978:	200004ac 	.word	0x200004ac
 800497c:	08027b8c 	.word	0x08027b8c
 8004980:	08027b78 	.word	0x08027b78
 8004984:	08027bbc 	.word	0x08027bbc
 8004988:	08027be0 	.word	0x08027be0
 800498c:	08027c04 	.word	0x08027c04
 8004990:	08027c28 	.word	0x08027c28
 8004994:	08027c4c 	.word	0x08027c4c
 8004998:	08027c78 	.word	0x08027c78
 800499c:	08027ca8 	.word	0x08027ca8
 80049a0:	50001c00 	.word	0x50001c00
 80049a4:	50000800 	.word	0x50000800

080049a8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80049b0:	4b39      	ldr	r3, [pc, #228]	@ (8004a98 <HAL_UART_ErrorCallback+0xf0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d16b      	bne.n	8004a92 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2284      	movs	r2, #132	@ 0x84
 80049be:	589b      	ldr	r3, [r3, r2]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d065      	beq.n	8004a90 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2284      	movs	r2, #132	@ 0x84
 80049c8:	589b      	ldr	r3, [r3, r2]
 80049ca:	4a34      	ldr	r2, [pc, #208]	@ (8004a9c <HAL_UART_ErrorCallback+0xf4>)
 80049cc:	4934      	ldr	r1, [pc, #208]	@ (8004aa0 <HAL_UART_ErrorCallback+0xf8>)
 80049ce:	2003      	movs	r0, #3
 80049d0:	f00c ff00 	bl	80117d4 <CreateLine>
    switch (huart->ErrorCode) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	@ 0x84
 80049d8:	589b      	ldr	r3, [r3, r2]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d851      	bhi.n	8004a82 <HAL_UART_ErrorCallback+0xda>
 80049de:	009a      	lsls	r2, r3, #2
 80049e0:	4b30      	ldr	r3, [pc, #192]	@ (8004aa4 <HAL_UART_ErrorCallback+0xfc>)
 80049e2:	18d3      	adds	r3, r2, r3
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 80049e8:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa8 <HAL_UART_ErrorCallback+0x100>)
 80049ea:	4b30      	ldr	r3, [pc, #192]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 80049ec:	0019      	movs	r1, r3
 80049ee:	2001      	movs	r0, #1
 80049f0:	f00c fef0 	bl	80117d4 <CreateLine>
        break;
 80049f4:	e04d      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 80049f6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab0 <HAL_UART_ErrorCallback+0x108>)
 80049f8:	4b2c      	ldr	r3, [pc, #176]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 80049fa:	0019      	movs	r1, r3
 80049fc:	2001      	movs	r0, #1
 80049fe:	f00c fee9 	bl	80117d4 <CreateLine>
        break;
 8004a02:	e046      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <HAL_UART_ErrorCallback+0x10c>)
 8004a06:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a08:	0019      	movs	r1, r3
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f00c fee2 	bl	80117d4 <CreateLine>
        break;
 8004a10:	e03f      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004a12:	4a29      	ldr	r2, [pc, #164]	@ (8004ab8 <HAL_UART_ErrorCallback+0x110>)
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a16:	0019      	movs	r1, r3
 8004a18:	2001      	movs	r0, #1
 8004a1a:	f00c fedb 	bl	80117d4 <CreateLine>
        break;
 8004a1e:	e038      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004a20:	4a26      	ldr	r2, [pc, #152]	@ (8004abc <HAL_UART_ErrorCallback+0x114>)
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a24:	0019      	movs	r1, r3
 8004a26:	2001      	movs	r0, #1
 8004a28:	f00c fed4 	bl	80117d4 <CreateLine>
        break;
 8004a2c:	e031      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004a2e:	4a24      	ldr	r2, [pc, #144]	@ (8004ac0 <HAL_UART_ErrorCallback+0x118>)
 8004a30:	4b1e      	ldr	r3, [pc, #120]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a32:	0019      	movs	r1, r3
 8004a34:	2001      	movs	r0, #1
 8004a36:	f00c fecd 	bl	80117d4 <CreateLine>
        break;
 8004a3a:	e02a      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004a3c:	4a21      	ldr	r2, [pc, #132]	@ (8004ac4 <HAL_UART_ErrorCallback+0x11c>)
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a40:	0019      	movs	r1, r3
 8004a42:	2001      	movs	r0, #1
 8004a44:	f00c fec6 	bl	80117d4 <CreateLine>
        break;
 8004a48:	e023      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac8 <HAL_UART_ErrorCallback+0x120>)
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a4e:	0019      	movs	r1, r3
 8004a50:	2001      	movs	r0, #1
 8004a52:	f00c febf 	bl	80117d4 <CreateLine>
        break;
 8004a56:	e01c      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004a58:	4a1c      	ldr	r2, [pc, #112]	@ (8004acc <HAL_UART_ErrorCallback+0x124>)
 8004a5a:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f00c feb8 	bl	80117d4 <CreateLine>
        break;
 8004a64:	e015      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004a66:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad0 <HAL_UART_ErrorCallback+0x128>)
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f00c feb1 	bl	80117d4 <CreateLine>
        break;
 8004a72:	e00e      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004a74:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <HAL_UART_ErrorCallback+0x12c>)
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a78:	0019      	movs	r1, r3
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f00c feaa 	bl	80117d4 <CreateLine>
        break;
 8004a80:	e007      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004a82:	4a15      	ldr	r2, [pc, #84]	@ (8004ad8 <HAL_UART_ErrorCallback+0x130>)
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <HAL_UART_ErrorCallback+0x104>)
 8004a86:	0019      	movs	r1, r3
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f00c fea3 	bl	80117d4 <CreateLine>
 8004a8e:	e000      	b.n	8004a92 <HAL_UART_ErrorCallback+0xea>
      return;
 8004a90:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	200004ac 	.word	0x200004ac
 8004a9c:	08027cd8 	.word	0x08027cd8
 8004aa0:	08027b54 	.word	0x08027b54
 8004aa4:	0802ae34 	.word	0x0802ae34
 8004aa8:	08027d08 	.word	0x08027d08
 8004aac:	08027b78 	.word	0x08027b78
 8004ab0:	08027d3c 	.word	0x08027d3c
 8004ab4:	08027d68 	.word	0x08027d68
 8004ab8:	08027d9c 	.word	0x08027d9c
 8004abc:	08027dc8 	.word	0x08027dc8
 8004ac0:	08027df0 	.word	0x08027df0
 8004ac4:	08027e20 	.word	0x08027e20
 8004ac8:	08027e58 	.word	0x08027e58
 8004acc:	08027e90 	.word	0x08027e90
 8004ad0:	08027eb8 	.word	0x08027eb8
 8004ad4:	08027ee0 	.word	0x08027ee0
 8004ad8:	08027f0c 	.word	0x08027f0c

08004adc <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e010      	b.n	8004b0e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	001a      	movs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1898      	adds	r0, r3, r2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	18d3      	adds	r3, r2, r3
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	001a      	movs	r2, r3
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <uint8ArrayToString+0x44>)
 8004b02:	0019      	movs	r1, r3
 8004b04:	f01e fe5e 	bl	80237c4 <siprintf>
  for (int i = 0; i < 12; i++) {
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	ddeb      	ble.n	8004aec <uint8ArrayToString+0x10>
  }
}
 8004b14:	46c0      	nop			@ (mov r8, r8)
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	08027f30 	.word	0x08027f30

08004b24 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	b089      	sub	sp, #36	@ 0x24
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	6039      	str	r1, [r7, #0]
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	1c02      	adds	r2, r0, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	1c0a      	adds	r2, r1, #0
 8004b38:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8004b3a:	4b23      	ldr	r3, [pc, #140]	@ (8004bc8 <CreateMessage+0xa4>)
 8004b3c:	4823      	ldr	r0, [pc, #140]	@ (8004bcc <CreateMessage+0xa8>)
 8004b3e:	220c      	movs	r2, #12
 8004b40:	0019      	movs	r1, r3
 8004b42:	f005 fae9 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8004b46:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <CreateMessage+0xac>)
 8004b48:	4822      	ldr	r0, [pc, #136]	@ (8004bd4 <CreateMessage+0xb0>)
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	0019      	movs	r1, r3
 8004b4e:	f005 fae3 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8004b52:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <CreateMessage+0xb4>)
 8004b54:	4821      	ldr	r0, [pc, #132]	@ (8004bdc <CreateMessage+0xb8>)
 8004b56:	220c      	movs	r2, #12
 8004b58:	0019      	movs	r1, r3
 8004b5a:	f005 fadd 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <CreateMessage+0xbc>)
 8004b60:	4820      	ldr	r0, [pc, #128]	@ (8004be4 <CreateMessage+0xc0>)
 8004b62:	220c      	movs	r2, #12
 8004b64:	0019      	movs	r1, r3
 8004b66:	f005 fad7 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8004b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004be8 <CreateMessage+0xc4>)
 8004b6c:	481f      	ldr	r0, [pc, #124]	@ (8004bec <CreateMessage+0xc8>)
 8004b6e:	220c      	movs	r2, #12
 8004b70:	0019      	movs	r1, r3
 8004b72:	f005 fad1 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8004b76:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <CreateMessage+0xcc>)
 8004b78:	481e      	ldr	r0, [pc, #120]	@ (8004bf4 <CreateMessage+0xd0>)
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	f005 facb 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8004b82:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <CreateMessage+0xd4>)
 8004b84:	481d      	ldr	r0, [pc, #116]	@ (8004bfc <CreateMessage+0xd8>)
 8004b86:	220c      	movs	r2, #12
 8004b88:	0019      	movs	r1, r3
 8004b8a:	f005 fac5 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c00 <CreateMessage+0xdc>)
 8004b90:	481c      	ldr	r0, [pc, #112]	@ (8004c04 <CreateMessage+0xe0>)
 8004b92:	220c      	movs	r2, #12
 8004b94:	0019      	movs	r1, r3
 8004b96:	f005 fabf 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <CreateMessage+0xe4>)
 8004b9c:	481b      	ldr	r0, [pc, #108]	@ (8004c0c <CreateMessage+0xe8>)
 8004b9e:	220c      	movs	r2, #12
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	f005 fab9 	bl	800a118 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <CreateMessage+0xec>)
 8004ba8:	481a      	ldr	r0, [pc, #104]	@ (8004c14 <CreateMessage+0xf0>)
 8004baa:	220c      	movs	r2, #12
 8004bac:	0019      	movs	r1, r3
 8004bae:	f005 fab3 	bl	800a118 <ReadUint8ArrayEEprom>
  if(checkName()){
 8004bb2:	f7ff fc87 	bl	80044c4 <checkName>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d032      	beq.n	8004c20 <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004bba:	4b17      	ldr	r3, [pc, #92]	@ (8004c18 <CreateMessage+0xf4>)
 8004bbc:	4817      	ldr	r0, [pc, #92]	@ (8004c1c <CreateMessage+0xf8>)
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	f005 faa9 	bl	800a118 <ReadUint8ArrayEEprom>
 8004bc6:	e031      	b.n	8004c2c <CreateMessage+0x108>
 8004bc8:	20000708 	.word	0x20000708
 8004bcc:	0808000c 	.word	0x0808000c
 8004bd0:	20000714 	.word	0x20000714
 8004bd4:	08080018 	.word	0x08080018
 8004bd8:	20000720 	.word	0x20000720
 8004bdc:	08080048 	.word	0x08080048
 8004be0:	2000072c 	.word	0x2000072c
 8004be4:	08080030 	.word	0x08080030
 8004be8:	20000738 	.word	0x20000738
 8004bec:	0808003c 	.word	0x0808003c
 8004bf0:	20000744 	.word	0x20000744
 8004bf4:	0808006c 	.word	0x0808006c
 8004bf8:	20000750 	.word	0x20000750
 8004bfc:	08080078 	.word	0x08080078
 8004c00:	2000075c 	.word	0x2000075c
 8004c04:	08080024 	.word	0x08080024
 8004c08:	20000768 	.word	0x20000768
 8004c0c:	08080054 	.word	0x08080054
 8004c10:	20000774 	.word	0x20000774
 8004c14:	08080060 	.word	0x08080060
 8004c18:	20000780 	.word	0x20000780
 8004c1c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004c20:	4bed      	ldr	r3, [pc, #948]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004c22:	4aee      	ldr	r2, [pc, #952]	@ (8004fdc <CreateMessage+0x4b8>)
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	6019      	str	r1, [r3, #0]
 8004c28:	7912      	ldrb	r2, [r2, #4]
 8004c2a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004c2c:	f7ff fbf0 	bl	8004410 <setCharges>
  uint16_t index = 0;
 8004c30:	260e      	movs	r6, #14
 8004c32:	19bb      	adds	r3, r7, r6
 8004c34:	2200      	movs	r2, #0
 8004c36:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004c38:	19bb      	adds	r3, r7, r6
 8004c3a:	881a      	ldrh	r2, [r3, #0]
 8004c3c:	4be8      	ldr	r3, [pc, #928]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004c3e:	18d3      	adds	r3, r2, r3
 8004c40:	4ae8      	ldr	r2, [pc, #928]	@ (8004fe4 <CreateMessage+0x4c0>)
 8004c42:	0011      	movs	r1, r2
 8004c44:	0018      	movs	r0, r3
 8004c46:	f01e fdbd 	bl	80237c4 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8004c4a:	4ae7      	ldr	r2, [pc, #924]	@ (8004fe8 <CreateMessage+0x4c4>)
 8004c4c:	4be7      	ldr	r3, [pc, #924]	@ (8004fec <CreateMessage+0x4c8>)
 8004c4e:	0011      	movs	r1, r2
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff ff43 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004c56:	4be6      	ldr	r3, [pc, #920]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004c58:	689c      	ldr	r4, [r3, #8]
 8004c5a:	4be6      	ldr	r3, [pc, #920]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1c18      	adds	r0, r3, #0
 8004c60:	f7fe fc00 	bl	8003464 <__aeabi_f2d>
 8004c64:	0002      	movs	r2, r0
 8004c66:	000b      	movs	r3, r1
 8004c68:	4ddb      	ldr	r5, [pc, #876]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004c6a:	49e3      	ldr	r1, [pc, #908]	@ (8004ff8 <CreateMessage+0x4d4>)
 8004c6c:	48e3      	ldr	r0, [pc, #908]	@ (8004ffc <CreateMessage+0x4d8>)
 8004c6e:	9202      	str	r2, [sp, #8]
 8004c70:	9303      	str	r3, [sp, #12]
 8004c72:	4bde      	ldr	r3, [pc, #888]	@ (8004fec <CreateMessage+0x4c8>)
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	002b      	movs	r3, r5
 8004c78:	0022      	movs	r2, r4
 8004c7a:	f01e fda3 	bl	80237c4 <siprintf>
#endif
index = strlen(message);
 8004c7e:	4bd8      	ldr	r3, [pc, #864]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fb fa73 	bl	800016c <strlen>
 8004c86:	0002      	movs	r2, r0
 8004c88:	19bb      	adds	r3, r7, r6
 8004c8a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004c8c:	1dbb      	adds	r3, r7, #6
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004c94:	4bd2      	ldr	r3, [pc, #840]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7fb fa68 	bl	800016c <strlen>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	4bcf      	ldr	r3, [pc, #828]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004ca2:	0011      	movs	r1, r2
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7ff fd87 	bl	80047b8 <ESP_Send>
 8004caa:	0003      	movs	r3, r0
 8004cac:	001a      	movs	r2, r3
 8004cae:	4bd4      	ldr	r3, [pc, #848]	@ (8005000 <CreateMessage+0x4dc>)
 8004cb0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004cb2:	4bd4      	ldr	r3, [pc, #848]	@ (8005004 <CreateMessage+0x4e0>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	4bd1      	ldr	r3, [pc, #836]	@ (8005000 <CreateMessage+0x4dc>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	1e5a      	subs	r2, r3, #1
 8004cc0:	4193      	sbcs	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	4bcf      	ldr	r3, [pc, #828]	@ (8005004 <CreateMessage+0x4e0>)
 8004cc6:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8004cc8:	4acf      	ldr	r2, [pc, #828]	@ (8005008 <CreateMessage+0x4e4>)
 8004cca:	4bc8      	ldr	r3, [pc, #800]	@ (8004fec <CreateMessage+0x4c8>)
 8004ccc:	0011      	movs	r1, r2
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f7ff ff04 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004cd4:	4bc6      	ldr	r3, [pc, #792]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004cd6:	689c      	ldr	r4, [r3, #8]
 8004cd8:	4bc6      	ldr	r3, [pc, #792]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	1c18      	adds	r0, r3, #0
 8004cde:	f7fe fbc1 	bl	8003464 <__aeabi_f2d>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	000b      	movs	r3, r1
 8004ce6:	4dbc      	ldr	r5, [pc, #752]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004ce8:	49c8      	ldr	r1, [pc, #800]	@ (800500c <CreateMessage+0x4e8>)
 8004cea:	48bd      	ldr	r0, [pc, #756]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	4bbe      	ldr	r3, [pc, #760]	@ (8004fec <CreateMessage+0x4c8>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	002b      	movs	r3, r5
 8004cf6:	0022      	movs	r2, r4
 8004cf8:	f01e fd64 	bl	80237c4 <siprintf>
#endif
  index += strlen(message);
 8004cfc:	4bb8      	ldr	r3, [pc, #736]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7fb fa34 	bl	800016c <strlen>
 8004d04:	0003      	movs	r3, r0
 8004d06:	b299      	uxth	r1, r3
 8004d08:	220e      	movs	r2, #14
 8004d0a:	18bb      	adds	r3, r7, r2
 8004d0c:	18ba      	adds	r2, r7, r2
 8004d0e:	8812      	ldrh	r2, [r2, #0]
 8004d10:	188a      	adds	r2, r1, r2
 8004d12:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004d14:	1dbb      	adds	r3, r7, #6
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d019      	beq.n	8004d50 <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004d1c:	4bb0      	ldr	r3, [pc, #704]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7fb fa24 	bl	800016c <strlen>
 8004d24:	0003      	movs	r3, r0
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	4bad      	ldr	r3, [pc, #692]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7ff fd43 	bl	80047b8 <ESP_Send>
 8004d32:	0003      	movs	r3, r0
 8004d34:	001a      	movs	r2, r3
 8004d36:	4bb2      	ldr	r3, [pc, #712]	@ (8005000 <CreateMessage+0x4dc>)
 8004d38:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004d3a:	4bb2      	ldr	r3, [pc, #712]	@ (8005004 <CreateMessage+0x4e0>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	001a      	movs	r2, r3
 8004d40:	4baf      	ldr	r3, [pc, #700]	@ (8005000 <CreateMessage+0x4dc>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	4013      	ands	r3, r2
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	4193      	sbcs	r3, r2
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4bad      	ldr	r3, [pc, #692]	@ (8005004 <CreateMessage+0x4e0>)
 8004d4e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8004d50:	4aaf      	ldr	r2, [pc, #700]	@ (8005010 <CreateMessage+0x4ec>)
 8004d52:	4ba6      	ldr	r3, [pc, #664]	@ (8004fec <CreateMessage+0x4c8>)
 8004d54:	0011      	movs	r1, r2
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7ff fec0 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8004d5c:	4ba4      	ldr	r3, [pc, #656]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	4ba4      	ldr	r3, [pc, #656]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004d62:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004d64:	4c9c      	ldr	r4, [pc, #624]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004d66:	49ab      	ldr	r1, [pc, #684]	@ (8005014 <CreateMessage+0x4f0>)
 8004d68:	489d      	ldr	r0, [pc, #628]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	4b9f      	ldr	r3, [pc, #636]	@ (8004fec <CreateMessage+0x4c8>)
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	0023      	movs	r3, r4
 8004d72:	f01e fd27 	bl	80237c4 <siprintf>
#endif
  index += strlen(message);
 8004d76:	4b9a      	ldr	r3, [pc, #616]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fb f9f7 	bl	800016c <strlen>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	b299      	uxth	r1, r3
 8004d82:	220e      	movs	r2, #14
 8004d84:	18bb      	adds	r3, r7, r2
 8004d86:	18ba      	adds	r2, r7, r2
 8004d88:	8812      	ldrh	r2, [r2, #0]
 8004d8a:	188a      	adds	r2, r1, r2
 8004d8c:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004d8e:	1dbb      	adds	r3, r7, #6
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d019      	beq.n	8004dca <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004d96:	4b92      	ldr	r3, [pc, #584]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fb f9e7 	bl	800016c <strlen>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	4b8f      	ldr	r3, [pc, #572]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7ff fd06 	bl	80047b8 <ESP_Send>
 8004dac:	0003      	movs	r3, r0
 8004dae:	001a      	movs	r2, r3
 8004db0:	4b93      	ldr	r3, [pc, #588]	@ (8005000 <CreateMessage+0x4dc>)
 8004db2:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004db4:	4b93      	ldr	r3, [pc, #588]	@ (8005004 <CreateMessage+0x4e0>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	001a      	movs	r2, r3
 8004dba:	4b91      	ldr	r3, [pc, #580]	@ (8005000 <CreateMessage+0x4dc>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	4193      	sbcs	r3, r2
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <CreateMessage+0x4e0>)
 8004dc8:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8004dca:	f006 faab 	bl	800b324 <IsBMP280SensorPresent>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d043      	beq.n	8004e5a <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 8004dd2:	4a91      	ldr	r2, [pc, #580]	@ (8005018 <CreateMessage+0x4f4>)
 8004dd4:	4b85      	ldr	r3, [pc, #532]	@ (8004fec <CreateMessage+0x4c8>)
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff fe7f 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004dde:	4b84      	ldr	r3, [pc, #528]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004de0:	689c      	ldr	r4, [r3, #8]
 8004de2:	4b84      	ldr	r3, [pc, #528]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	1c18      	adds	r0, r3, #0
 8004de8:	f7fe fb3c 	bl	8003464 <__aeabi_f2d>
 8004dec:	0002      	movs	r2, r0
 8004dee:	000b      	movs	r3, r1
 8004df0:	4d79      	ldr	r5, [pc, #484]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004df2:	498a      	ldr	r1, [pc, #552]	@ (800501c <CreateMessage+0x4f8>)
 8004df4:	487a      	ldr	r0, [pc, #488]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004df6:	9202      	str	r2, [sp, #8]
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8004fec <CreateMessage+0x4c8>)
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	002b      	movs	r3, r5
 8004e00:	0022      	movs	r2, r4
 8004e02:	f01e fcdf 	bl	80237c4 <siprintf>
#endif
    index += strlen(message);
 8004e06:	4b76      	ldr	r3, [pc, #472]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7fb f9af 	bl	800016c <strlen>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	b299      	uxth	r1, r3
 8004e12:	220e      	movs	r2, #14
 8004e14:	18bb      	adds	r3, r7, r2
 8004e16:	18ba      	adds	r2, r7, r2
 8004e18:	8812      	ldrh	r2, [r2, #0]
 8004e1a:	188a      	adds	r2, r1, r2
 8004e1c:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004e1e:	1dbb      	adds	r3, r7, #6
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d019      	beq.n	8004e5a <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004e26:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7fb f99f 	bl	800016c <strlen>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	4b6b      	ldr	r3, [pc, #428]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004e34:	0011      	movs	r1, r2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7ff fcbe 	bl	80047b8 <ESP_Send>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	001a      	movs	r2, r3
 8004e40:	4b6f      	ldr	r3, [pc, #444]	@ (8005000 <CreateMessage+0x4dc>)
 8004e42:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004e44:	4b6f      	ldr	r3, [pc, #444]	@ (8005004 <CreateMessage+0x4e0>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	001a      	movs	r2, r3
 8004e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8005000 <CreateMessage+0x4dc>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	4193      	sbcs	r3, r2
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b6b      	ldr	r3, [pc, #428]	@ (8005004 <CreateMessage+0x4e0>)
 8004e58:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 8004e5a:	4a71      	ldr	r2, [pc, #452]	@ (8005020 <CreateMessage+0x4fc>)
 8004e5c:	4b63      	ldr	r3, [pc, #396]	@ (8004fec <CreateMessage+0x4c8>)
 8004e5e:	0011      	movs	r1, r2
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7ff fe3b 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8004e66:	4b62      	ldr	r3, [pc, #392]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004e68:	689c      	ldr	r4, [r3, #8]
 8004e6a:	4b62      	ldr	r3, [pc, #392]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	1c18      	adds	r0, r3, #0
 8004e70:	f7fe faf8 	bl	8003464 <__aeabi_f2d>
 8004e74:	0002      	movs	r2, r0
 8004e76:	000b      	movs	r3, r1
 8004e78:	4d57      	ldr	r5, [pc, #348]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004e7a:	496a      	ldr	r1, [pc, #424]	@ (8005024 <CreateMessage+0x500>)
 8004e7c:	4858      	ldr	r0, [pc, #352]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004e7e:	9202      	str	r2, [sp, #8]
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	4b5a      	ldr	r3, [pc, #360]	@ (8004fec <CreateMessage+0x4c8>)
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	002b      	movs	r3, r5
 8004e88:	0022      	movs	r2, r4
 8004e8a:	f01e fc9b 	bl	80237c4 <siprintf>
#endif
  index += strlen(message);
 8004e8e:	4b54      	ldr	r3, [pc, #336]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fb f96b 	bl	800016c <strlen>
 8004e96:	0003      	movs	r3, r0
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	220e      	movs	r2, #14
 8004e9c:	18bb      	adds	r3, r7, r2
 8004e9e:	18ba      	adds	r2, r7, r2
 8004ea0:	8812      	ldrh	r2, [r2, #0]
 8004ea2:	188a      	adds	r2, r1, r2
 8004ea4:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004eae:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7fb f95b 	bl	800016c <strlen>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	4b49      	ldr	r3, [pc, #292]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004ebc:	0011      	movs	r1, r2
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7ff fc7a 	bl	80047b8 <ESP_Send>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8005000 <CreateMessage+0x4dc>)
 8004eca:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8005004 <CreateMessage+0x4e0>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	001a      	movs	r2, r3
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <CreateMessage+0x4dc>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	4193      	sbcs	r3, r2
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b49      	ldr	r3, [pc, #292]	@ (8005004 <CreateMessage+0x4e0>)
 8004ee0:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4053      	eors	r3, r2
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d100      	bne.n	8004ef2 <CreateMessage+0x3ce>
 8004ef0:	e14b      	b.n	800518a <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 8004ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8005028 <CreateMessage+0x504>)
 8004ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fec <CreateMessage+0x4c8>)
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff fdef 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004efe:	4b3c      	ldr	r3, [pc, #240]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004f00:	689c      	ldr	r4, [r3, #8]
 8004f02:	4b4a      	ldr	r3, [pc, #296]	@ (800502c <CreateMessage+0x508>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1c18      	adds	r0, r3, #0
 8004f08:	f7fe faac 	bl	8003464 <__aeabi_f2d>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	000b      	movs	r3, r1
 8004f10:	4d31      	ldr	r5, [pc, #196]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004f12:	4947      	ldr	r1, [pc, #284]	@ (8005030 <CreateMessage+0x50c>)
 8004f14:	4832      	ldr	r0, [pc, #200]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004f16:	9202      	str	r2, [sp, #8]
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <CreateMessage+0x4c8>)
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	002b      	movs	r3, r5
 8004f20:	0022      	movs	r2, r4
 8004f22:	f01e fc4f 	bl	80237c4 <siprintf>
#endif
    index += strlen(message);
 8004f26:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f7fb f91f 	bl	800016c <strlen>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	b299      	uxth	r1, r3
 8004f32:	220e      	movs	r2, #14
 8004f34:	18bb      	adds	r3, r7, r2
 8004f36:	18ba      	adds	r2, r7, r2
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	188a      	adds	r2, r1, r2
 8004f3c:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004f3e:	1dbb      	adds	r3, r7, #6
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004f46:	4b26      	ldr	r3, [pc, #152]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7fb f90f 	bl	800016c <strlen>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004f54:	0011      	movs	r1, r2
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff fc2e 	bl	80047b8 <ESP_Send>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	001a      	movs	r2, r3
 8004f60:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <CreateMessage+0x4dc>)
 8004f62:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004f64:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <CreateMessage+0x4e0>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	001a      	movs	r2, r3
 8004f6a:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <CreateMessage+0x4dc>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	4193      	sbcs	r3, r2
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <CreateMessage+0x4e0>)
 8004f78:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005034 <CreateMessage+0x510>)
 8004f7c:	791b      	ldrb	r3, [r3, #4]
 8004f7e:	2b35      	cmp	r3, #53	@ 0x35
 8004f80:	d000      	beq.n	8004f84 <CreateMessage+0x460>
 8004f82:	e075      	b.n	8005070 <CreateMessage+0x54c>
 8004f84:	f002 ff44 	bl	8007e10 <Check_USB_PowerOn>
 8004f88:	1e03      	subs	r3, r0, #0
 8004f8a:	d071      	beq.n	8005070 <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005038 <CreateMessage+0x514>)
 8004f8e:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <CreateMessage+0x4c8>)
 8004f90:	0011      	movs	r1, r2
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7ff fda2 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004f98:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <CreateMessage+0x4cc>)
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <CreateMessage+0x4d0>)
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd8 <CreateMessage+0x4b4>)
 8004fa2:	4926      	ldr	r1, [pc, #152]	@ (800503c <CreateMessage+0x518>)
 8004fa4:	480e      	ldr	r0, [pc, #56]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <CreateMessage+0x4c8>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	0023      	movs	r3, r4
 8004fae:	f01e fc09 	bl	80237c4 <siprintf>
#endif
      index += strlen(message);
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7fb f8d9 	bl	800016c <strlen>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	220e      	movs	r2, #14
 8004fc0:	18bb      	adds	r3, r7, r2
 8004fc2:	18ba      	adds	r2, r7, r2
 8004fc4:	8812      	ldrh	r2, [r2, #0]
 8004fc6:	188a      	adds	r2, r1, r2
 8004fc8:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004fca:	1dbb      	adds	r3, r7, #6
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04e      	beq.n	8005070 <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004fd2:	4b03      	ldr	r3, [pc, #12]	@ (8004fe0 <CreateMessage+0x4bc>)
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	e033      	b.n	8005040 <CreateMessage+0x51c>
 8004fd8:	20000780 	.word	0x20000780
 8004fdc:	0802adc8 	.word	0x0802adc8
 8004fe0:	200005e0 	.word	0x200005e0
 8004fe4:	08027f38 	.word	0x08027f38
 8004fe8:	20000708 	.word	0x20000708
 8004fec:	200007a0 	.word	0x200007a0
 8004ff0:	200005c0 	.word	0x200005c0
 8004ff4:	20000690 	.word	0x20000690
 8004ff8:	08027f3c 	.word	0x08027f3c
 8004ffc:	200005e1 	.word	0x200005e1
 8005000:	200007b9 	.word	0x200007b9
 8005004:	2000002d 	.word	0x2000002d
 8005008:	20000714 	.word	0x20000714
 800500c:	08027f90 	.word	0x08027f90
 8005010:	2000072c 	.word	0x2000072c
 8005014:	08027fe8 	.word	0x08027fe8
 8005018:	20000738 	.word	0x20000738
 800501c:	0802803c 	.word	0x0802803c
 8005020:	20000720 	.word	0x20000720
 8005024:	08028094 	.word	0x08028094
 8005028:	20000750 	.word	0x20000750
 800502c:	200005dc 	.word	0x200005dc
 8005030:	080280f0 	.word	0x080280f0
 8005034:	20000ea0 	.word	0x20000ea0
 8005038:	2000075c 	.word	0x2000075c
 800503c:	08028150 	.word	0x08028150
 8005040:	f7fb f894 	bl	800016c <strlen>
 8005044:	0003      	movs	r3, r0
 8005046:	b29a      	uxth	r2, r3
 8005048:	4b7d      	ldr	r3, [pc, #500]	@ (8005240 <CreateMessage+0x71c>)
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff fbb3 	bl	80047b8 <ESP_Send>
 8005052:	0003      	movs	r3, r0
 8005054:	001a      	movs	r2, r3
 8005056:	4b7b      	ldr	r3, [pc, #492]	@ (8005244 <CreateMessage+0x720>)
 8005058:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800505a:	4b7b      	ldr	r3, [pc, #492]	@ (8005248 <CreateMessage+0x724>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	001a      	movs	r2, r3
 8005060:	4b78      	ldr	r3, [pc, #480]	@ (8005244 <CreateMessage+0x720>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	4013      	ands	r3, r2
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4193      	sbcs	r3, r2
 800506a:	b2da      	uxtb	r2, r3
 800506c:	4b76      	ldr	r3, [pc, #472]	@ (8005248 <CreateMessage+0x724>)
 800506e:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 8005070:	f007 f8d2 	bl	800c218 <sen5x_Get_sen5x_enable_state>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d100      	bne.n	800507a <CreateMessage+0x556>
 8005078:	e087      	b.n	800518a <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 800507a:	4a74      	ldr	r2, [pc, #464]	@ (800524c <CreateMessage+0x728>)
 800507c:	4b74      	ldr	r3, [pc, #464]	@ (8005250 <CreateMessage+0x72c>)
 800507e:	0011      	movs	r1, r2
 8005080:	0018      	movs	r0, r3
 8005082:	f7ff fd2b 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005086:	4b73      	ldr	r3, [pc, #460]	@ (8005254 <CreateMessage+0x730>)
 8005088:	689c      	ldr	r4, [r3, #8]
 800508a:	4b73      	ldr	r3, [pc, #460]	@ (8005258 <CreateMessage+0x734>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	1c18      	adds	r0, r3, #0
 8005090:	f7fe f9e8 	bl	8003464 <__aeabi_f2d>
 8005094:	0002      	movs	r2, r0
 8005096:	000b      	movs	r3, r1
 8005098:	4d70      	ldr	r5, [pc, #448]	@ (800525c <CreateMessage+0x738>)
 800509a:	4971      	ldr	r1, [pc, #452]	@ (8005260 <CreateMessage+0x73c>)
 800509c:	4868      	ldr	r0, [pc, #416]	@ (8005240 <CreateMessage+0x71c>)
 800509e:	9202      	str	r2, [sp, #8]
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005250 <CreateMessage+0x72c>)
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	002b      	movs	r3, r5
 80050a8:	0022      	movs	r2, r4
 80050aa:	f01e fb8b 	bl	80237c4 <siprintf>
#endif
      index += strlen(message);
 80050ae:	4b64      	ldr	r3, [pc, #400]	@ (8005240 <CreateMessage+0x71c>)
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fb f85b 	bl	800016c <strlen>
 80050b6:	0003      	movs	r3, r0
 80050b8:	b299      	uxth	r1, r3
 80050ba:	220e      	movs	r2, #14
 80050bc:	18bb      	adds	r3, r7, r2
 80050be:	18ba      	adds	r2, r7, r2
 80050c0:	8812      	ldrh	r2, [r2, #0]
 80050c2:	188a      	adds	r2, r1, r2
 80050c4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80050c6:	1dbb      	adds	r3, r7, #6
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80050ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005240 <CreateMessage+0x71c>)
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fb f84b 	bl	800016c <strlen>
 80050d6:	0003      	movs	r3, r0
 80050d8:	b29a      	uxth	r2, r3
 80050da:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <CreateMessage+0x71c>)
 80050dc:	0011      	movs	r1, r2
 80050de:	0018      	movs	r0, r3
 80050e0:	f7ff fb6a 	bl	80047b8 <ESP_Send>
 80050e4:	0003      	movs	r3, r0
 80050e6:	001a      	movs	r2, r3
 80050e8:	4b56      	ldr	r3, [pc, #344]	@ (8005244 <CreateMessage+0x720>)
 80050ea:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80050ec:	4b56      	ldr	r3, [pc, #344]	@ (8005248 <CreateMessage+0x724>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	001a      	movs	r2, r3
 80050f2:	4b54      	ldr	r3, [pc, #336]	@ (8005244 <CreateMessage+0x720>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	4013      	ands	r3, r2
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	4193      	sbcs	r3, r2
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	4b52      	ldr	r3, [pc, #328]	@ (8005248 <CreateMessage+0x724>)
 8005100:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8005102:	4a58      	ldr	r2, [pc, #352]	@ (8005264 <CreateMessage+0x740>)
 8005104:	4b52      	ldr	r3, [pc, #328]	@ (8005250 <CreateMessage+0x72c>)
 8005106:	0011      	movs	r1, r2
 8005108:	0018      	movs	r0, r3
 800510a:	f7ff fce7 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800510e:	4b51      	ldr	r3, [pc, #324]	@ (8005254 <CreateMessage+0x730>)
 8005110:	689c      	ldr	r4, [r3, #8]
 8005112:	4b51      	ldr	r3, [pc, #324]	@ (8005258 <CreateMessage+0x734>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	1c18      	adds	r0, r3, #0
 8005118:	f7fe f9a4 	bl	8003464 <__aeabi_f2d>
 800511c:	0002      	movs	r2, r0
 800511e:	000b      	movs	r3, r1
 8005120:	4d4e      	ldr	r5, [pc, #312]	@ (800525c <CreateMessage+0x738>)
 8005122:	4951      	ldr	r1, [pc, #324]	@ (8005268 <CreateMessage+0x744>)
 8005124:	4846      	ldr	r0, [pc, #280]	@ (8005240 <CreateMessage+0x71c>)
 8005126:	9202      	str	r2, [sp, #8]
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	4b49      	ldr	r3, [pc, #292]	@ (8005250 <CreateMessage+0x72c>)
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	002b      	movs	r3, r5
 8005130:	0022      	movs	r2, r4
 8005132:	f01e fb47 	bl	80237c4 <siprintf>
#endif
      index += strlen(message);
 8005136:	4b42      	ldr	r3, [pc, #264]	@ (8005240 <CreateMessage+0x71c>)
 8005138:	0018      	movs	r0, r3
 800513a:	f7fb f817 	bl	800016c <strlen>
 800513e:	0003      	movs	r3, r0
 8005140:	b299      	uxth	r1, r3
 8005142:	220e      	movs	r2, #14
 8005144:	18bb      	adds	r3, r7, r2
 8005146:	18ba      	adds	r2, r7, r2
 8005148:	8812      	ldrh	r2, [r2, #0]
 800514a:	188a      	adds	r2, r1, r2
 800514c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800514e:	1dbb      	adds	r3, r7, #6
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d019      	beq.n	800518a <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005156:	4b3a      	ldr	r3, [pc, #232]	@ (8005240 <CreateMessage+0x71c>)
 8005158:	0018      	movs	r0, r3
 800515a:	f7fb f807 	bl	800016c <strlen>
 800515e:	0003      	movs	r3, r0
 8005160:	b29a      	uxth	r2, r3
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <CreateMessage+0x71c>)
 8005164:	0011      	movs	r1, r2
 8005166:	0018      	movs	r0, r3
 8005168:	f7ff fb26 	bl	80047b8 <ESP_Send>
 800516c:	0003      	movs	r3, r0
 800516e:	001a      	movs	r2, r3
 8005170:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <CreateMessage+0x720>)
 8005172:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005174:	4b34      	ldr	r3, [pc, #208]	@ (8005248 <CreateMessage+0x724>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	001a      	movs	r2, r3
 800517a:	4b32      	ldr	r3, [pc, #200]	@ (8005244 <CreateMessage+0x720>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4013      	ands	r3, r2
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	4193      	sbcs	r3, r2
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4b30      	ldr	r3, [pc, #192]	@ (8005248 <CreateMessage+0x724>)
 8005188:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 800518a:	4a38      	ldr	r2, [pc, #224]	@ (800526c <CreateMessage+0x748>)
 800518c:	4b30      	ldr	r3, [pc, #192]	@ (8005250 <CreateMessage+0x72c>)
 800518e:	0011      	movs	r1, r2
 8005190:	0018      	movs	r0, r3
 8005192:	f7ff fca3 	bl	8004adc <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8005196:	4b2f      	ldr	r3, [pc, #188]	@ (8005254 <CreateMessage+0x730>)
 8005198:	689c      	ldr	r4, [r3, #8]
 800519a:	4b35      	ldr	r3, [pc, #212]	@ (8005270 <CreateMessage+0x74c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1c18      	adds	r0, r3, #0
 80051a0:	f7fe f960 	bl	8003464 <__aeabi_f2d>
 80051a4:	0002      	movs	r2, r0
 80051a6:	000b      	movs	r3, r1
 80051a8:	4d2c      	ldr	r5, [pc, #176]	@ (800525c <CreateMessage+0x738>)
 80051aa:	4932      	ldr	r1, [pc, #200]	@ (8005274 <CreateMessage+0x750>)
 80051ac:	4824      	ldr	r0, [pc, #144]	@ (8005240 <CreateMessage+0x71c>)
 80051ae:	9202      	str	r2, [sp, #8]
 80051b0:	9303      	str	r3, [sp, #12]
 80051b2:	4b27      	ldr	r3, [pc, #156]	@ (8005250 <CreateMessage+0x72c>)
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	002b      	movs	r3, r5
 80051b8:	0022      	movs	r2, r4
 80051ba:	f01e fb03 	bl	80237c4 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80051be:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <CreateMessage+0x71c>)
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7fa ffd3 	bl	800016c <strlen>
 80051c6:	0002      	movs	r2, r0
 80051c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <CreateMessage+0x71c>)
 80051ca:	18d3      	adds	r3, r2, r3
 80051cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005278 <CreateMessage+0x754>)
 80051ce:	0011      	movs	r1, r2
 80051d0:	0018      	movs	r0, r3
 80051d2:	f01e faf7 	bl	80237c4 <siprintf>
  index += strlen(message);
 80051d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005240 <CreateMessage+0x71c>)
 80051d8:	0018      	movs	r0, r3
 80051da:	f7fa ffc7 	bl	800016c <strlen>
 80051de:	0003      	movs	r3, r0
 80051e0:	b299      	uxth	r1, r3
 80051e2:	220e      	movs	r2, #14
 80051e4:	18bb      	adds	r3, r7, r2
 80051e6:	18ba      	adds	r2, r7, r2
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	188a      	adds	r2, r1, r2
 80051ec:	801a      	strh	r2, [r3, #0]
  if (send) {
 80051ee:	1dbb      	adds	r3, r7, #6
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d019      	beq.n	800522a <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <CreateMessage+0x71c>)
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fa ffb7 	bl	800016c <strlen>
 80051fe:	0003      	movs	r3, r0
 8005200:	b29a      	uxth	r2, r3
 8005202:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <CreateMessage+0x71c>)
 8005204:	0011      	movs	r1, r2
 8005206:	0018      	movs	r0, r3
 8005208:	f7ff fad6 	bl	80047b8 <ESP_Send>
 800520c:	0003      	movs	r3, r0
 800520e:	001a      	movs	r2, r3
 8005210:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <CreateMessage+0x720>)
 8005212:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <CreateMessage+0x724>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	001a      	movs	r2, r3
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <CreateMessage+0x720>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	4013      	ands	r3, r2
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	4193      	sbcs	r3, r2
 8005224:	b2da      	uxtb	r2, r3
 8005226:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <CreateMessage+0x724>)
 8005228:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800522a:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <CreateMessage+0x724>)
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	701a      	strb	r2, [r3, #0]
  return index;
 8005232:	230e      	movs	r3, #14
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	881b      	ldrh	r3, [r3, #0]
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b005      	add	sp, #20
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005240:	200005e0 	.word	0x200005e0
 8005244:	200007b9 	.word	0x200007b9
 8005248:	2000002d 	.word	0x2000002d
 800524c:	20000768 	.word	0x20000768
 8005250:	200007a0 	.word	0x200007a0
 8005254:	200005c0 	.word	0x200005c0
 8005258:	20000690 	.word	0x20000690
 800525c:	20000780 	.word	0x20000780
 8005260:	080281a4 	.word	0x080281a4
 8005264:	20000774 	.word	0x20000774
 8005268:	08028200 	.word	0x08028200
 800526c:	20000744 	.word	0x20000744
 8005270:	200005d8 	.word	0x200005d8
 8005274:	0802825c 	.word	0x0802825c
 8005278:	080282b4 	.word	0x080282b4

0800527c <StartProg>:

void StartProg(){
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8005280:	2064      	movs	r0, #100	@ 0x64
 8005282:	f00c fefd 	bl	8012080 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <StartProg+0x60>)
 8005288:	2200      	movs	r2, #0
 800528a:	2101      	movs	r1, #1
 800528c:	0018      	movs	r0, r3
 800528e:	f00e f97e 	bl	801358e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005292:	2064      	movs	r0, #100	@ 0x64
 8005294:	f00c fef4 	bl	8012080 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005298:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <StartProg+0x60>)
 800529a:	2200      	movs	r2, #0
 800529c:	2102      	movs	r1, #2
 800529e:	0018      	movs	r0, r3
 80052a0:	f00e f975 	bl	801358e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80052a4:	23fa      	movs	r3, #250	@ 0xfa
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	0018      	movs	r0, r3
 80052aa:	f00c fee9 	bl	8012080 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <StartProg+0x60>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	2101      	movs	r1, #1
 80052b4:	0018      	movs	r0, r3
 80052b6:	f00e f96a 	bl	801358e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80052ba:	23fa      	movs	r3, #250	@ 0xfa
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	0018      	movs	r0, r3
 80052c0:	f00c fede 	bl	8012080 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <StartProg+0x60>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	2102      	movs	r1, #2
 80052ca:	0018      	movs	r0, r3
 80052cc:	f00e f95f 	bl	801358e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80052d0:	2028      	movs	r0, #40	@ 0x28
 80052d2:	f00c fed5 	bl	8012080 <HAL_Delay>
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	50001c00 	.word	0x50001c00

080052e0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80052e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e2:	b0d9      	sub	sp, #356	@ 0x164
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	0008      	movs	r0, r1
 80052ea:	0011      	movs	r1, r2
 80052ec:	4ba4      	ldr	r3, [pc, #656]	@ (8005580 <ParseBuffer+0x2a0>)
 80052ee:	24b0      	movs	r4, #176	@ 0xb0
 80052f0:	0064      	lsls	r4, r4, #1
 80052f2:	191b      	adds	r3, r3, r4
 80052f4:	19db      	adds	r3, r3, r7
 80052f6:	1c02      	adds	r2, r0, #0
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	4ba2      	ldr	r3, [pc, #648]	@ (8005584 <ParseBuffer+0x2a4>)
 80052fc:	191b      	adds	r3, r3, r4
 80052fe:	19db      	adds	r3, r3, r7
 8005300:	1c0a      	adds	r2, r1, #0
 8005302:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	005a      	lsls	r2, r3, #1
 8005308:	2348      	movs	r3, #72	@ 0x48
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2100      	movs	r1, #0
 800530e:	0018      	movs	r0, r3
 8005310:	f01e fbbe 	bl	8023a90 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005314:	2360      	movs	r3, #96	@ 0x60
 8005316:	33ff      	adds	r3, #255	@ 0xff
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	2203      	movs	r2, #3
 800531c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800531e:	23ae      	movs	r3, #174	@ 0xae
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	2200      	movs	r2, #0
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e013      	b.n	8005352 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800532a:	20ae      	movs	r0, #174	@ 0xae
 800532c:	0040      	lsls	r0, r0, #1
 800532e:	183b      	adds	r3, r7, r0
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	18d2      	adds	r2, r2, r3
 8005336:	183b      	adds	r3, r7, r0
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	7811      	ldrb	r1, [r2, #0]
 800533c:	4a92      	ldr	r2, [pc, #584]	@ (8005588 <ParseBuffer+0x2a8>)
 800533e:	24b0      	movs	r4, #176	@ 0xb0
 8005340:	0064      	lsls	r4, r4, #1
 8005342:	1912      	adds	r2, r2, r4
 8005344:	19d2      	adds	r2, r2, r7
 8005346:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005348:	183b      	adds	r3, r7, r0
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	183b      	adds	r3, r7, r0
 800534e:	3201      	adds	r2, #1
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	23ae      	movs	r3, #174	@ 0xae
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	18fa      	adds	r2, r7, r3
 8005358:	4b89      	ldr	r3, [pc, #548]	@ (8005580 <ParseBuffer+0x2a0>)
 800535a:	21b0      	movs	r1, #176	@ 0xb0
 800535c:	0049      	lsls	r1, r1, #1
 800535e:	185b      	adds	r3, r3, r1
 8005360:	19db      	adds	r3, r3, r7
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d3df      	bcc.n	800532a <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800536a:	4b85      	ldr	r3, [pc, #532]	@ (8005580 <ParseBuffer+0x2a0>)
 800536c:	185b      	adds	r3, r3, r1
 800536e:	19db      	adds	r3, r3, r7
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	4a85      	ldr	r2, [pc, #532]	@ (8005588 <ParseBuffer+0x2a8>)
 8005374:	1852      	adds	r2, r2, r1
 8005376:	19d2      	adds	r2, r2, r7
 8005378:	2100      	movs	r1, #0
 800537a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800537c:	f00c faa4 	bl	80118c8 <GetVerboseLevel>
 8005380:	0003      	movs	r3, r0
 8005382:	2b03      	cmp	r3, #3
 8005384:	d106      	bne.n	8005394 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8005386:	2348      	movs	r3, #72	@ 0x48
 8005388:	18fa      	adds	r2, r7, r3
 800538a:	4b80      	ldr	r3, [pc, #512]	@ (800558c <ParseBuffer+0x2ac>)
 800538c:	0011      	movs	r1, r2
 800538e:	0018      	movs	r0, r3
 8005390:	f01e f9a8 	bl	80236e4 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	26ac      	movs	r6, #172	@ 0xac
 8005398:	0076      	lsls	r6, r6, #1
 800539a:	19ba      	adds	r2, r7, r6
 800539c:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 800539e:	4b7c      	ldr	r3, [pc, #496]	@ (8005590 <ParseBuffer+0x2b0>)
 80053a0:	25b0      	movs	r5, #176	@ 0xb0
 80053a2:	006d      	lsls	r5, r5, #1
 80053a4:	195b      	adds	r3, r3, r5
 80053a6:	19db      	adds	r3, r3, r7
 80053a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005594 <ParseBuffer+0x2b4>)
 80053aa:	8811      	ldrh	r1, [r2, #0]
 80053ac:	8019      	strh	r1, [r3, #0]
 80053ae:	7892      	ldrb	r2, [r2, #2]
 80053b0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80053b2:	4b79      	ldr	r3, [pc, #484]	@ (8005598 <ParseBuffer+0x2b8>)
 80053b4:	195b      	adds	r3, r3, r5
 80053b6:	19db      	adds	r3, r3, r7
 80053b8:	4a78      	ldr	r2, [pc, #480]	@ (800559c <ParseBuffer+0x2bc>)
 80053ba:	6811      	ldr	r1, [r2, #0]
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	8892      	ldrh	r2, [r2, #4]
 80053c0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80053c2:	4b77      	ldr	r3, [pc, #476]	@ (80055a0 <ParseBuffer+0x2c0>)
 80053c4:	195b      	adds	r3, r3, r5
 80053c6:	19db      	adds	r3, r3, r7
 80053c8:	4a76      	ldr	r2, [pc, #472]	@ (80055a4 <ParseBuffer+0x2c4>)
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	6019      	str	r1, [r3, #0]
 80053ce:	7912      	ldrb	r2, [r2, #4]
 80053d0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80053d2:	4b75      	ldr	r3, [pc, #468]	@ (80055a8 <ParseBuffer+0x2c8>)
 80053d4:	195b      	adds	r3, r3, r5
 80053d6:	19db      	adds	r3, r3, r7
 80053d8:	4a74      	ldr	r2, [pc, #464]	@ (80055ac <ParseBuffer+0x2cc>)
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	6019      	str	r1, [r3, #0]
 80053de:	8892      	ldrh	r2, [r2, #4]
 80053e0:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80053e2:	4b73      	ldr	r3, [pc, #460]	@ (80055b0 <ParseBuffer+0x2d0>)
 80053e4:	195b      	adds	r3, r3, r5
 80053e6:	19db      	adds	r3, r3, r7
 80053e8:	223e      	movs	r2, #62	@ 0x3e
 80053ea:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80053ec:	4b71      	ldr	r3, [pc, #452]	@ (80055b4 <ParseBuffer+0x2d4>)
 80053ee:	195b      	adds	r3, r3, r5
 80053f0:	19db      	adds	r3, r3, r7
 80053f2:	4a71      	ldr	r2, [pc, #452]	@ (80055b8 <ParseBuffer+0x2d8>)
 80053f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053f6:	c313      	stmia	r3!, {r0, r1, r4}
 80053f8:	8811      	ldrh	r1, [r2, #0]
 80053fa:	8019      	strh	r1, [r3, #0]
 80053fc:	7892      	ldrb	r2, [r2, #2]
 80053fe:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8005400:	4b6e      	ldr	r3, [pc, #440]	@ (80055bc <ParseBuffer+0x2dc>)
 8005402:	195b      	adds	r3, r3, r5
 8005404:	19db      	adds	r3, r3, r7
 8005406:	4a6e      	ldr	r2, [pc, #440]	@ (80055c0 <ParseBuffer+0x2e0>)
 8005408:	ca13      	ldmia	r2!, {r0, r1, r4}
 800540a:	c313      	stmia	r3!, {r0, r1, r4}
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8005410:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <ParseBuffer+0x2a4>)
 8005412:	195b      	adds	r3, r3, r5
 8005414:	19db      	adds	r3, r3, r7
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 800541c:	2344      	movs	r3, #68	@ 0x44
 800541e:	18fa      	adds	r2, r7, r3
 8005420:	2348      	movs	r3, #72	@ 0x48
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	0011      	movs	r1, r2
 8005426:	0018      	movs	r0, r3
 8005428:	f01e fb6d 	bl	8023b06 <strstr>
 800542c:	0003      	movs	r3, r0
 800542e:	19ba      	adds	r2, r7, r6
 8005430:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8005432:	4b54      	ldr	r3, [pc, #336]	@ (8005584 <ParseBuffer+0x2a4>)
 8005434:	22b0      	movs	r2, #176	@ 0xb0
 8005436:	0052      	lsls	r2, r2, #1
 8005438:	189b      	adds	r3, r3, r2
 800543a:	19db      	adds	r3, r3, r7
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10c      	bne.n	800545c <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8005442:	232c      	movs	r3, #44	@ 0x2c
 8005444:	18fa      	adds	r2, r7, r3
 8005446:	2348      	movs	r3, #72	@ 0x48
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f01e fb5a 	bl	8023b06 <strstr>
 8005452:	0003      	movs	r3, r0
 8005454:	22ac      	movs	r2, #172	@ 0xac
 8005456:	0052      	lsls	r2, r2, #1
 8005458:	18ba      	adds	r2, r7, r2
 800545a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800545c:	4b49      	ldr	r3, [pc, #292]	@ (8005584 <ParseBuffer+0x2a4>)
 800545e:	22b0      	movs	r2, #176	@ 0xb0
 8005460:	0052      	lsls	r2, r2, #1
 8005462:	189b      	adds	r3, r3, r2
 8005464:	19db      	adds	r3, r3, r7
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d10c      	bne.n	8005486 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 800546c:	2328      	movs	r3, #40	@ 0x28
 800546e:	18fa      	adds	r2, r7, r3
 8005470:	2348      	movs	r3, #72	@ 0x48
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	0011      	movs	r1, r2
 8005476:	0018      	movs	r0, r3
 8005478:	f01e fb45 	bl	8023b06 <strstr>
 800547c:	0003      	movs	r3, r0
 800547e:	22ac      	movs	r2, #172	@ 0xac
 8005480:	0052      	lsls	r2, r2, #1
 8005482:	18ba      	adds	r2, r7, r2
 8005484:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8005486:	4b3f      	ldr	r3, [pc, #252]	@ (8005584 <ParseBuffer+0x2a4>)
 8005488:	22b0      	movs	r2, #176	@ 0xb0
 800548a:	0052      	lsls	r2, r2, #1
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d10c      	bne.n	80054b0 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8005496:	2308      	movs	r3, #8
 8005498:	18fa      	adds	r2, r7, r3
 800549a:	2348      	movs	r3, #72	@ 0x48
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f01e fb30 	bl	8023b06 <strstr>
 80054a6:	0003      	movs	r3, r0
 80054a8:	22ac      	movs	r2, #172	@ 0xac
 80054aa:	0052      	lsls	r2, r2, #1
 80054ac:	18ba      	adds	r2, r7, r2
 80054ae:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80054b0:	233c      	movs	r3, #60	@ 0x3c
 80054b2:	18fa      	adds	r2, r7, r3
 80054b4:	2448      	movs	r4, #72	@ 0x48
 80054b6:	193b      	adds	r3, r7, r4
 80054b8:	0011      	movs	r1, r2
 80054ba:	0018      	movs	r0, r3
 80054bc:	f01e fb23 	bl	8023b06 <strstr>
 80054c0:	0003      	movs	r3, r0
 80054c2:	22aa      	movs	r2, #170	@ 0xaa
 80054c4:	0052      	lsls	r2, r2, #1
 80054c6:	18ba      	adds	r2, r7, r2
 80054c8:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80054ca:	2318      	movs	r3, #24
 80054cc:	18fa      	adds	r2, r7, r3
 80054ce:	193b      	adds	r3, r7, r4
 80054d0:	0011      	movs	r1, r2
 80054d2:	0018      	movs	r0, r3
 80054d4:	f01e fb17 	bl	8023b06 <strstr>
 80054d8:	0003      	movs	r3, r0
 80054da:	22a8      	movs	r2, #168	@ 0xa8
 80054dc:	0052      	lsls	r2, r2, #1
 80054de:	18ba      	adds	r2, r7, r2
 80054e0:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80054e2:	4a38      	ldr	r2, [pc, #224]	@ (80055c4 <ParseBuffer+0x2e4>)
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	0011      	movs	r1, r2
 80054e8:	0018      	movs	r0, r3
 80054ea:	f01e fb0c 	bl	8023b06 <strstr>
 80054ee:	0003      	movs	r3, r0
 80054f0:	22a6      	movs	r2, #166	@ 0xa6
 80054f2:	0052      	lsls	r2, r2, #1
 80054f4:	18ba      	adds	r2, r7, r2
 80054f6:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80054f8:	2334      	movs	r3, #52	@ 0x34
 80054fa:	18fa      	adds	r2, r7, r3
 80054fc:	193b      	adds	r3, r7, r4
 80054fe:	0011      	movs	r1, r2
 8005500:	0018      	movs	r0, r3
 8005502:	f01e fb00 	bl	8023b06 <strstr>
 8005506:	0003      	movs	r3, r0
 8005508:	22a4      	movs	r2, #164	@ 0xa4
 800550a:	0052      	lsls	r2, r2, #1
 800550c:	18ba      	adds	r2, r7, r2
 800550e:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <ParseBuffer+0x2a0>)
 8005512:	21b0      	movs	r1, #176	@ 0xb0
 8005514:	0049      	lsls	r1, r1, #1
 8005516:	185b      	adds	r3, r3, r1
 8005518:	19db      	adds	r3, r3, r7
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d800      	bhi.n	8005522 <ParseBuffer+0x242>
 8005520:	e0bf      	b.n	80056a2 <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8005522:	22ac      	movs	r2, #172	@ 0xac
 8005524:	0052      	lsls	r2, r2, #1
 8005526:	18bb      	adds	r3, r7, r2
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d052      	beq.n	80055d4 <ParseBuffer+0x2f4>
 800552e:	18bb      	adds	r3, r7, r2
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b4f      	cmp	r3, #79	@ 0x4f
 8005536:	d14d      	bne.n	80055d4 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8005538:	2360      	movs	r3, #96	@ 0x60
 800553a:	33ff      	adds	r3, #255	@ 0xff
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8005542:	4b21      	ldr	r3, [pc, #132]	@ (80055c8 <ParseBuffer+0x2e8>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b12      	cmp	r3, #18
 8005548:	d144      	bne.n	80055d4 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <ParseBuffer+0x2a0>)
 800554c:	185b      	adds	r3, r3, r1
 800554e:	19db      	adds	r3, r3, r7
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	2b2b      	cmp	r3, #43	@ 0x2b
 8005554:	d10b      	bne.n	800556e <ParseBuffer+0x28e>
 8005556:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <ParseBuffer+0x2a8>)
 8005558:	185b      	adds	r3, r3, r1
 800555a:	19db      	adds	r3, r3, r7
 800555c:	2221      	movs	r2, #33	@ 0x21
 800555e:	5c9b      	ldrb	r3, [r3, r2]
 8005560:	2b32      	cmp	r3, #50	@ 0x32
 8005562:	d104      	bne.n	800556e <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8005564:	193b      	adds	r3, r7, r4
 8005566:	0018      	movs	r0, r3
 8005568:	f002 fdd2 	bl	8008110 <ParseTime>
 800556c:	e032      	b.n	80055d4 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 800556e:	4a17      	ldr	r2, [pc, #92]	@ (80055cc <ParseBuffer+0x2ec>)
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <ParseBuffer+0x2f0>)
 8005572:	0019      	movs	r1, r3
 8005574:	2001      	movs	r0, #1
 8005576:	f00c f92d 	bl	80117d4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800557a:	2306      	movs	r3, #6
 800557c:	e095      	b.n	80056aa <ParseBuffer+0x3ca>
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	fffffea2 	.word	0xfffffea2
 8005584:	fffffea1 	.word	0xfffffea1
 8005588:	fffffee8 	.word	0xfffffee8
 800558c:	080282b8 	.word	0x080282b8
 8005590:	fffffee4 	.word	0xfffffee4
 8005594:	080282e4 	.word	0x080282e4
 8005598:	fffffedc 	.word	0xfffffedc
 800559c:	080282e8 	.word	0x080282e8
 80055a0:	fffffed4 	.word	0xfffffed4
 80055a4:	080282f0 	.word	0x080282f0
 80055a8:	fffffecc 	.word	0xfffffecc
 80055ac:	080282f8 	.word	0x080282f8
 80055b0:	fffffec8 	.word	0xfffffec8
 80055b4:	fffffeb8 	.word	0xfffffeb8
 80055b8:	08028300 	.word	0x08028300
 80055bc:	fffffea8 	.word	0xfffffea8
 80055c0:	08028310 	.word	0x08028310
 80055c4:	0802ada8 	.word	0x0802ada8
 80055c8:	2000068a 	.word	0x2000068a
 80055cc:	080282d0 	.word	0x080282d0
 80055d0:	08027b78 	.word	0x08027b78
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80055d4:	22ac      	movs	r2, #172	@ 0xac
 80055d6:	0052      	lsls	r2, r2, #1
 80055d8:	18bb      	adds	r3, r7, r2
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <ParseBuffer+0x314>
 80055e0:	18bb      	adds	r3, r7, r2
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b72      	cmp	r3, #114	@ 0x72
 80055e8:	d104      	bne.n	80055f4 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 80055ea:	2360      	movs	r3, #96	@ 0x60
 80055ec:	33ff      	adds	r3, #255	@ 0xff
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2202      	movs	r2, #2
 80055f2:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80055f4:	22ac      	movs	r2, #172	@ 0xac
 80055f6:	0052      	lsls	r2, r2, #1
 80055f8:	18bb      	adds	r3, r7, r2
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <ParseBuffer+0x334>
 8005600:	18bb      	adds	r3, r7, r2
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b3e      	cmp	r3, #62	@ 0x3e
 8005608:	d104      	bne.n	8005614 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 800560a:	2360      	movs	r3, #96	@ 0x60
 800560c:	33ff      	adds	r3, #255	@ 0xff
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2205      	movs	r2, #5
 8005612:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8005614:	22ac      	movs	r2, #172	@ 0xac
 8005616:	0052      	lsls	r2, r2, #1
 8005618:	18bb      	adds	r3, r7, r2
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d009      	beq.n	8005634 <ParseBuffer+0x354>
 8005620:	18bb      	adds	r3, r7, r2
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b2b      	cmp	r3, #43	@ 0x2b
 8005628:	d104      	bne.n	8005634 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 800562a:	2360      	movs	r3, #96	@ 0x60
 800562c:	33ff      	adds	r3, #255	@ 0xff
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	220b      	movs	r2, #11
 8005632:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8005634:	22aa      	movs	r2, #170	@ 0xaa
 8005636:	0052      	lsls	r2, r2, #1
 8005638:	18bb      	adds	r3, r7, r2
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <ParseBuffer+0x36a>
 8005640:	18bb      	adds	r3, r7, r2
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b45      	cmp	r3, #69	@ 0x45
 8005648:	d00a      	beq.n	8005660 <ParseBuffer+0x380>
 800564a:	22a4      	movs	r2, #164	@ 0xa4
 800564c:	0052      	lsls	r2, r2, #1
 800564e:	18bb      	adds	r3, r7, r2
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <ParseBuffer+0x38a>
 8005656:	18bb      	adds	r3, r7, r2
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b46      	cmp	r3, #70	@ 0x46
 800565e:	d104      	bne.n	800566a <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 8005660:	2360      	movs	r3, #96	@ 0x60
 8005662:	33ff      	adds	r3, #255	@ 0xff
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800566a:	22a8      	movs	r2, #168	@ 0xa8
 800566c:	0052      	lsls	r2, r2, #1
 800566e:	18bb      	adds	r3, r7, r2
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <ParseBuffer+0x3a6>
 8005676:	18bb      	adds	r3, r7, r2
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b57      	cmp	r3, #87	@ 0x57
 800567e:	d102      	bne.n	8005686 <ParseBuffer+0x3a6>
      ConnectionMade = true;
 8005680:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <ParseBuffer+0x3d4>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8005686:	22a6      	movs	r2, #166	@ 0xa6
 8005688:	0052      	lsls	r2, r2, #1
 800568a:	18bb      	adds	r3, r7, r2
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <ParseBuffer+0x3c2>
 8005692:	18bb      	adds	r3, r7, r2
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b32      	cmp	r3, #50	@ 0x32
 800569a:	d102      	bne.n	80056a2 <ParseBuffer+0x3c2>
      beurs = true;
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <ParseBuffer+0x3d8>)
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80056a2:	2360      	movs	r3, #96	@ 0x60
 80056a4:	33ff      	adds	r3, #255	@ 0xff
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	781b      	ldrb	r3, [r3, #0]

}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b059      	add	sp, #356	@ 0x164
 80056b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	200005b8 	.word	0x200005b8
 80056b8:	200005ba 	.word	0x200005ba

080056bc <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <PollAwake+0x34>)
 80056c4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fa fd4f 	bl	800016c <strlen>
 80056ce:	0003      	movs	r3, r0
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0011      	movs	r1, r2
 80056d6:	0018      	movs	r0, r3
 80056d8:	f7ff f86e 	bl	80047b8 <ESP_Send>
 80056dc:	1e03      	subs	r3, r0, #0
 80056de:	d001      	beq.n	80056e4 <PollAwake+0x28>
    return true;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <PollAwake+0x2a>
  }
  else{
    return false;
 80056e4:	2300      	movs	r3, #0
  }
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b002      	add	sp, #8
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	08028320 	.word	0x08028320

080056f4 <RFPower>:

bool RFPower(){
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80056fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <RFPower+0x34>)
 80056fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f7fa fd33 	bl	800016c <strlen>
 8005706:	0003      	movs	r3, r0
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0011      	movs	r1, r2
 800570e:	0018      	movs	r0, r3
 8005710:	f7ff f852 	bl	80047b8 <ESP_Send>
 8005714:	1e03      	subs	r3, r0, #0
 8005716:	d001      	beq.n	800571c <RFPower+0x28>
    return true;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <RFPower+0x2a>
  }
  else{
    return false;
 800571c:	2300      	movs	r3, #0
  }
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	08028328 	.word	0x08028328

0800572c <CheckRFPower>:

bool CheckRFPower(){
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <CheckRFPower+0x34>)
 8005734:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f7fa fd17 	bl	800016c <strlen>
 800573e:	0003      	movs	r3, r0
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	0011      	movs	r1, r2
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff f836 	bl	80047b8 <ESP_Send>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d001      	beq.n	8005754 <CheckRFPower+0x28>
    return true;
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8005754:	2300      	movs	r3, #0
  }
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	08028338 	.word	0x08028338

08005764 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800576a:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <ATRestore+0x34>)
 800576c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f7fa fcfb 	bl	800016c <strlen>
 8005776:	0003      	movs	r3, r0
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	0011      	movs	r1, r2
 800577e:	0018      	movs	r0, r3
 8005780:	f7ff f81a 	bl	80047b8 <ESP_Send>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d001      	beq.n	800578c <ATRestore+0x28>
    return true;
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <ATRestore+0x2a>
  }
  else{
    return false;
 800578c:	2300      	movs	r3, #0
  }
}
 800578e:	0018      	movs	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	b002      	add	sp, #8
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	08028348 	.word	0x08028348

0800579c <CWINIT>:

bool CWINIT(){
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <CWINIT+0x34>)
 80057a4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7fa fcdf 	bl	800016c <strlen>
 80057ae:	0003      	movs	r3, r0
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0011      	movs	r1, r2
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7fe fffe 	bl	80047b8 <ESP_Send>
 80057bc:	1e03      	subs	r3, r0, #0
 80057be:	d001      	beq.n	80057c4 <CWINIT+0x28>
    return true;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <CWINIT+0x2a>
  }
  else{
    return false;
 80057c4:	2300      	movs	r3, #0
  }
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	08028358 	.word	0x08028358

080057d4 <CWMODE1>:

bool CWMODE1(){
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80057da:	4b0b      	ldr	r3, [pc, #44]	@ (8005808 <CWMODE1+0x34>)
 80057dc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7fa fcc3 	bl	800016c <strlen>
 80057e6:	0003      	movs	r3, r0
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0011      	movs	r1, r2
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7fe ffe2 	bl	80047b8 <ESP_Send>
 80057f4:	1e03      	subs	r3, r0, #0
 80057f6:	d001      	beq.n	80057fc <CWMODE1+0x28>
    return true;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e000      	b.n	80057fe <CWMODE1+0x2a>
  }
  else{
    return false;
 80057fc:	2300      	movs	r3, #0
  }
}
 80057fe:	0018      	movs	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	b002      	add	sp, #8
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	08028368 	.word	0x08028368

0800580c <CWMODE2>:

bool CWMODE2(){
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8005812:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <CWMODE2+0x34>)
 8005814:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f7fa fca7 	bl	800016c <strlen>
 800581e:	0003      	movs	r3, r0
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7fe ffc6 	bl	80047b8 <ESP_Send>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d001      	beq.n	8005834 <CWMODE2+0x28>
    return true;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <CWMODE2+0x2a>
  }
  else{
    return false;
 8005834:	2300      	movs	r3, #0
  }
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b002      	add	sp, #8
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	08028378 	.word	0x08028378

08005844 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800584a:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <CWAUTOCONN+0x34>)
 800584c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	0018      	movs	r0, r3
 8005852:	f7fa fc8b 	bl	800016c <strlen>
 8005856:	0003      	movs	r3, r0
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0011      	movs	r1, r2
 800585e:	0018      	movs	r0, r3
 8005860:	f7fe ffaa 	bl	80047b8 <ESP_Send>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <CWAUTOCONN+0x28>
    return true;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 800586c:	2300      	movs	r3, #0
  }
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b002      	add	sp, #8
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	08028388 	.word	0x08028388

0800587c <CWJAP>:

bool CWJAP(){
 800587c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800587e:	46c6      	mov	lr, r8
 8005880:	b500      	push	{lr}
 8005882:	b0a2      	sub	sp, #136	@ 0x88
 8005884:	af00      	add	r7, sp, #0
 8005886:	466b      	mov	r3, sp
 8005888:	4698      	mov	r8, r3
  beursTest = true;
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <CWJAP+0xf4>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8005890:	2618      	movs	r6, #24
 8005892:	19bb      	adds	r3, r7, r6
 8005894:	2264      	movs	r2, #100	@ 0x64
 8005896:	2100      	movs	r1, #0
 8005898:	0018      	movs	r0, r3
 800589a:	f01e f8f9 	bl	8023a90 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800589e:	4b35      	ldr	r3, [pc, #212]	@ (8005974 <CWJAP+0xf8>)
 80058a0:	4a35      	ldr	r2, [pc, #212]	@ (8005978 <CWJAP+0xfc>)
 80058a2:	4936      	ldr	r1, [pc, #216]	@ (800597c <CWJAP+0x100>)
 80058a4:	19b8      	adds	r0, r7, r6
 80058a6:	f01d ff8d 	bl	80237c4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80058aa:	19bb      	adds	r3, r7, r6
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7fa fc5d 	bl	800016c <strlen>
 80058b2:	0002      	movs	r2, r0
 80058b4:	216f      	movs	r1, #111	@ 0x6f
 80058b6:	0030      	movs	r0, r6
 80058b8:	180b      	adds	r3, r1, r0
 80058ba:	19db      	adds	r3, r3, r7
 80058bc:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80058be:	180b      	adds	r3, r1, r0
 80058c0:	19db      	adds	r3, r3, r7
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	1e5a      	subs	r2, r3, #1
 80058c8:	2180      	movs	r1, #128	@ 0x80
 80058ca:	1879      	adds	r1, r7, r1
 80058cc:	600a      	str	r2, [r1, #0]
 80058ce:	001a      	movs	r2, r3
 80058d0:	60ba      	str	r2, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	60fa      	str	r2, [r7, #12]
 80058d6:	68b8      	ldr	r0, [r7, #8]
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	0002      	movs	r2, r0
 80058dc:	0f52      	lsrs	r2, r2, #29
 80058de:	000e      	movs	r6, r1
 80058e0:	00f6      	lsls	r6, r6, #3
 80058e2:	617e      	str	r6, [r7, #20]
 80058e4:	697e      	ldr	r6, [r7, #20]
 80058e6:	4316      	orrs	r6, r2
 80058e8:	617e      	str	r6, [r7, #20]
 80058ea:	0002      	movs	r2, r0
 80058ec:	00d2      	lsls	r2, r2, #3
 80058ee:	613a      	str	r2, [r7, #16]
 80058f0:	001a      	movs	r2, r3
 80058f2:	603a      	str	r2, [r7, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	6838      	ldr	r0, [r7, #0]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	0002      	movs	r2, r0
 80058fe:	0f52      	lsrs	r2, r2, #29
 8005900:	000e      	movs	r6, r1
 8005902:	00f5      	lsls	r5, r6, #3
 8005904:	4315      	orrs	r5, r2
 8005906:	0002      	movs	r2, r0
 8005908:	00d4      	lsls	r4, r2, #3
 800590a:	3307      	adds	r3, #7
 800590c:	08db      	lsrs	r3, r3, #3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	466a      	mov	r2, sp
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	469d      	mov	sp, r3
 8005916:	466b      	mov	r3, sp
 8005918:	3300      	adds	r3, #0
 800591a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800591c:	246f      	movs	r4, #111	@ 0x6f
 800591e:	2518      	movs	r5, #24
 8005920:	1963      	adds	r3, r4, r5
 8005922:	19db      	adds	r3, r3, r7
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	001a      	movs	r2, r3
 800592a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800592c:	2100      	movs	r1, #0
 800592e:	0018      	movs	r0, r3
 8005930:	f01e f8ae 	bl	8023a90 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8005934:	1963      	adds	r3, r4, r5
 8005936:	19db      	adds	r3, r3, r7
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	1979      	adds	r1, r7, r5
 800593c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800593e:	0018      	movs	r0, r3
 8005940:	f01e f8cd 	bl	8023ade <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8005944:	1963      	adds	r3, r4, r5
 8005946:	19db      	adds	r3, r3, r7
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b29a      	uxth	r2, r3
 800594c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f7fe ff31 	bl	80047b8 <ESP_Send>
 8005956:	1e03      	subs	r3, r0, #0
 8005958:	d001      	beq.n	800595e <CWJAP+0xe2>
    return true;
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <CWJAP+0xe4>
  }
  else{
    return false;
 800595e:	2300      	movs	r3, #0
 8005960:	46c5      	mov	sp, r8
  }
}
 8005962:	0018      	movs	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	b022      	add	sp, #136	@ 0x88
 8005968:	bc80      	pop	{r7}
 800596a:	46b8      	mov	r8, r7
 800596c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	200005b9 	.word	0x200005b9
 8005974:	0802adb4 	.word	0x0802adb4
 8005978:	0802ada8 	.word	0x0802ada8
 800597c:	0802839c 	.word	0x0802839c

08005980 <CWMODE3>:

bool CWMODE3(){
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8005986:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <CWMODE3+0x34>)
 8005988:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	0018      	movs	r0, r3
 800598e:	f7fa fbed 	bl	800016c <strlen>
 8005992:	0003      	movs	r3, r0
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f7fe ff0c 	bl	80047b8 <ESP_Send>
 80059a0:	1e03      	subs	r3, r0, #0
 80059a2:	d001      	beq.n	80059a8 <CWMODE3+0x28>
    return true;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <CWMODE3+0x2a>
  }
  else{
    return false;
 80059a8:	2300      	movs	r3, #0
  }
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b002      	add	sp, #8
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	080283b4 	.word	0x080283b4

080059b8 <CWSTATE>:

bool CWSTATE(){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80059be:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <CWSTATE+0x34>)
 80059c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fa fbd1 	bl	800016c <strlen>
 80059ca:	0003      	movs	r3, r0
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	0011      	movs	r1, r2
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fe fef0 	bl	80047b8 <ESP_Send>
 80059d8:	1e03      	subs	r3, r0, #0
 80059da:	d001      	beq.n	80059e0 <CWSTATE+0x28>
    return true;
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <CWSTATE+0x2a>
  }
  else{
    return false;
 80059e0:	2300      	movs	r3, #0
  }
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b002      	add	sp, #8
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	080283c4 	.word	0x080283c4

080059f0 <CWSAP>:

bool CWSAP(){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80059f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <CWSAP+0x34>)
 80059f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fa fbb5 	bl	800016c <strlen>
 8005a02:	0003      	movs	r3, r0
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0011      	movs	r1, r2
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7fe fed4 	bl	80047b8 <ESP_Send>
 8005a10:	1e03      	subs	r3, r0, #0
 8005a12:	d001      	beq.n	8005a18 <CWSAP+0x28>
    return true;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <CWSAP+0x2a>
  }
  else{
    return false;
 8005a18:	2300      	movs	r3, #0
  }
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b002      	add	sp, #8
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	080283d4 	.word	0x080283d4

08005a28 <CIPMUX>:

bool CIPMUX(){
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <CIPMUX+0x34>)
 8005a30:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fa fb99 	bl	800016c <strlen>
 8005a3a:	0003      	movs	r3, r0
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	0011      	movs	r1, r2
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fe feb8 	bl	80047b8 <ESP_Send>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d001      	beq.n	8005a50 <CIPMUX+0x28>
    return true;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <CIPMUX+0x2a>
  }
  else{
    return false;
 8005a50:	2300      	movs	r3, #0
  }
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	080283f8 	.word	0x080283f8

08005a60 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8005a66:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <WEBSERVER+0x34>)
 8005a68:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f7fa fb7d 	bl	800016c <strlen>
 8005a72:	0003      	movs	r3, r0
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0011      	movs	r1, r2
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7fe fe9c 	bl	80047b8 <ESP_Send>
 8005a80:	1e03      	subs	r3, r0, #0
 8005a82:	d001      	beq.n	8005a88 <WEBSERVER+0x28>
    return true;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <WEBSERVER+0x2a>
  }
  else{
    return false;
 8005a88:	2300      	movs	r3, #0
  }
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b002      	add	sp, #8
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	08028408 	.word	0x08028408

08005a98 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8005a98:	b590      	push	{r4, r7, lr}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8005a9e:	1cfb      	adds	r3, r7, #3
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8005aa4:	4b26      	ldr	r3, [pc, #152]	@ (8005b40 <HTTPCPOST+0xa8>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	1dbc      	adds	r4, r7, #6
 8005aaa:	1cf9      	adds	r1, r7, #3
 8005aac:	2200      	movs	r2, #0
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff f838 	bl	8004b24 <CreateMessage>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8005ab8:	4b21      	ldr	r3, [pc, #132]	@ (8005b40 <HTTPCPOST+0xa8>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8005ac0:	1dbb      	adds	r3, r7, #6
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b44 <HTTPCPOST+0xac>)
 8005ac6:	4920      	ldr	r1, [pc, #128]	@ (8005b48 <HTTPCPOST+0xb0>)
 8005ac8:	4820      	ldr	r0, [pc, #128]	@ (8005b4c <HTTPCPOST+0xb4>)
 8005aca:	f01d fe7b 	bl	80237c4 <siprintf>
 8005ace:	e015      	b.n	8005afc <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b50 <HTTPCPOST+0xb8>)
 8005ad2:	4820      	ldr	r0, [pc, #128]	@ (8005b54 <HTTPCPOST+0xbc>)
 8005ad4:	220c      	movs	r2, #12
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	f004 fb1e 	bl	800a118 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8005adc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b50 <HTTPCPOST+0xb8>)
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <HTTPCPOST+0xc0>)
 8005ae0:	0011      	movs	r1, r2
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fe fffa 	bl	8004adc <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8005ae8:	1dbb      	adds	r3, r7, #6
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	4c1a      	ldr	r4, [pc, #104]	@ (8005b58 <HTTPCPOST+0xc0>)
 8005aee:	4a1b      	ldr	r2, [pc, #108]	@ (8005b5c <HTTPCPOST+0xc4>)
 8005af0:	491b      	ldr	r1, [pc, #108]	@ (8005b60 <HTTPCPOST+0xc8>)
 8005af2:	4816      	ldr	r0, [pc, #88]	@ (8005b4c <HTTPCPOST+0xb4>)
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	0023      	movs	r3, r4
 8005af8:	f01d fe64 	bl	80237c4 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8005afc:	4b13      	ldr	r3, [pc, #76]	@ (8005b4c <HTTPCPOST+0xb4>)
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fa fb34 	bl	800016c <strlen>
 8005b04:	0002      	movs	r2, r0
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	8818      	ldrh	r0, [r3, #0]
 8005b0e:	1cfb      	adds	r3, r7, #3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <HTTPCPOST+0xcc>)
 8005b14:	4914      	ldr	r1, [pc, #80]	@ (8005b68 <HTTPCPOST+0xd0>)
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	0003      	movs	r3, r0
 8005b1a:	2003      	movs	r0, #3
 8005b1c:	f00b fe5a 	bl	80117d4 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <HTTPCPOST+0xb4>)
 8005b26:	0011      	movs	r1, r2
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fe fe45 	bl	80047b8 <ESP_Send>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d001      	beq.n	8005b36 <HTTPCPOST+0x9e>
    return true;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8005b36:	2300      	movs	r3, #0
  }
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bd90      	pop	{r4, r7, pc}
 8005b40:	200005ba 	.word	0x200005ba
 8005b44:	0802add0 	.word	0x0802add0
 8005b48:	08028420 	.word	0x08028420
 8005b4c:	200005e0 	.word	0x200005e0
 8005b50:	200007bc 	.word	0x200007bc
 8005b54:	08080000 	.word	0x08080000
 8005b58:	200007c8 	.word	0x200007c8
 8005b5c:	0802ae0c 	.word	0x0802ae0c
 8005b60:	08028458 	.word	0x08028458
 8005b64:	08028498 	.word	0x08028498
 8005b68:	08027b54 	.word	0x08027b54

08005b6c <SENDDATA>:

bool SENDDATA(){
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af02      	add	r7, sp, #8
  bool result = false;
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8005b78:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb4 <SENDDATA+0x48>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	1df9      	adds	r1, r7, #7
 8005b7e:	2201      	movs	r2, #1
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fe ffcf 	bl	8004b24 <CreateMessage>
 8005b86:	0003      	movs	r3, r0
 8005b88:	001a      	movs	r2, r3
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <SENDDATA+0x4c>)
 8005b8c:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8005b8e:	1dfb      	adds	r3, r7, #7
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	0018      	movs	r0, r3
 8005b94:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <SENDDATA+0x4c>)
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	4a08      	ldr	r2, [pc, #32]	@ (8005bbc <SENDDATA+0x50>)
 8005b9a:	4909      	ldr	r1, [pc, #36]	@ (8005bc0 <SENDDATA+0x54>)
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	2003      	movs	r0, #3
 8005ba2:	f00b fe17 	bl	80117d4 <CreateLine>
  return result;
 8005ba6:	1dfb      	adds	r3, r7, #7
 8005ba8:	781b      	ldrb	r3, [r3, #0]
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b002      	add	sp, #8
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	200005ba 	.word	0x200005ba
 8005bb8:	200005d4 	.word	0x200005d4
 8005bbc:	080284f4 	.word	0x080284f4
 8005bc0:	08027b54 	.word	0x08027b54

08005bc4 <SLEEP>:

bool SLEEP(){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8005bca:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <SLEEP+0x34>)
 8005bcc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fa facb 	bl	800016c <strlen>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0011      	movs	r1, r2
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7fe fdea 	bl	80047b8 <ESP_Send>
 8005be4:	1e03      	subs	r3, r0, #0
 8005be6:	d001      	beq.n	8005bec <SLEEP+0x28>
    return true;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <SLEEP+0x2a>
  }
  else{
    return false;
 8005bec:	2300      	movs	r3, #0
  }
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	08028530 	.word	0x08028530

08005bfc <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <CIPSNTPCFG+0x3c>)
 8005c04:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f7fa faaf 	bl	800016c <strlen>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fe fdce 	bl	80047b8 <ESP_Send>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d006      	beq.n	8005c2e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8005c20:	23fa      	movs	r3, #250	@ 0xfa
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	0018      	movs	r0, r3
 8005c26:	f00c fa2b 	bl	8012080 <HAL_Delay>
    return true;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8005c2e:	2300      	movs	r3, #0
  }
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08028540 	.word	0x08028540

08005c3c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8005c42:	4b0b      	ldr	r3, [pc, #44]	@ (8005c70 <CIPSNTPTIME+0x34>)
 8005c44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fa fa8f 	bl	800016c <strlen>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0011      	movs	r1, r2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f7fe fdae 	bl	80047b8 <ESP_Send>
 8005c5c:	1e03      	subs	r3, r0, #0
 8005c5e:	d001      	beq.n	8005c64 <CIPSNTPTIME+0x28>
    return true;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8005c64:	2300      	movs	r3, #0
  }
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	08028590 	.word	0x08028590

08005c74 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <CIPSNTPINTV+0x34>)
 8005c7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7fa fa73 	bl	800016c <strlen>
 8005c86:	0003      	movs	r3, r0
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0011      	movs	r1, r2
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7fe fd92 	bl	80047b8 <ESP_Send>
 8005c94:	1e03      	subs	r3, r0, #0
 8005c96:	d001      	beq.n	8005c9c <CIPSNTPINTV+0x28>
    return true;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8005c9c:	2300      	movs	r3, #0
  }
}
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b002      	add	sp, #8
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	46c0      	nop			@ (mov r8, r8)
 8005ca8:	080285a4 	.word	0x080285a4

08005cac <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	0002      	movs	r2, r0
 8005cb4:	1dfb      	adds	r3, r7, #7
 8005cb6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8005cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e6c <DMA_ProcessBuffer+0x1c0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	200e      	movs	r0, #14
 8005cc2:	183b      	adds	r3, r7, r0
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	0049      	lsls	r1, r1, #1
 8005cc8:	1a8a      	subs	r2, r1, r2
 8005cca:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8005ccc:	230d      	movs	r3, #13
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8005cd4:	183b      	adds	r3, r7, r0
 8005cd6:	881a      	ldrh	r2, [r3, #0]
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8005ce0:	183b      	adds	r3, r7, r0
 8005ce2:	2280      	movs	r2, #128	@ 0x80
 8005ce4:	0052      	lsls	r2, r2, #1
 8005ce6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8005ce8:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	001a      	movs	r2, r3
 8005cf0:	230e      	movs	r3, #14
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d131      	bne.n	8005d5e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8005cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8005e74 <DMA_ProcessBuffer+0x1c8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b14      	cmp	r3, #20
 8005d00:	d91b      	bls.n	8005d3a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8005d02:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <DMA_ProcessBuffer+0x1c8>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8005d08:	4b5b      	ldr	r3, [pc, #364]	@ (8005e78 <DMA_ProcessBuffer+0x1cc>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <DMA_ProcessBuffer+0x74>
 8005d10:	4b5a      	ldr	r3, [pc, #360]	@ (8005e7c <DMA_ProcessBuffer+0x1d0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8005d18:	230d      	movs	r3, #13
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8005d20:	4b55      	ldr	r3, [pc, #340]	@ (8005e78 <DMA_ProcessBuffer+0x1cc>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d103      	bne.n	8005d30 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8005d28:	4b55      	ldr	r3, [pc, #340]	@ (8005e80 <DMA_ProcessBuffer+0x1d4>)
 8005d2a:	220b      	movs	r2, #11
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e016      	b.n	8005d5e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8005d30:	230d      	movs	r3, #13
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2206      	movs	r2, #6
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e011      	b.n	8005d5e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8005d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e74 <DMA_ProcessBuffer+0x1c8>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4b4c      	ldr	r3, [pc, #304]	@ (8005e74 <DMA_ProcessBuffer+0x1c8>)
 8005d44:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8005d46:	f00c f991 	bl	801206c <HAL_GetTick>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	33f5      	adds	r3, #245	@ 0xf5
 8005d4e:	33ff      	adds	r3, #255	@ 0xff
 8005d50:	001a      	movs	r2, r3
 8005d52:	4b4c      	ldr	r3, [pc, #304]	@ (8005e84 <DMA_ProcessBuffer+0x1d8>)
 8005d54:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8005d56:	230d      	movs	r3, #13
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8005d5e:	4b44      	ldr	r3, [pc, #272]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	001a      	movs	r2, r3
 8005d66:	210e      	movs	r1, #14
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <DMA_ProcessBuffer+0xc6>
 8005d70:	e075      	b.n	8005e5e <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8005d72:	4b40      	ldr	r3, [pc, #256]	@ (8005e74 <DMA_ProcessBuffer+0x1c8>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8005d78:	4b43      	ldr	r3, [pc, #268]	@ (8005e88 <DMA_ProcessBuffer+0x1dc>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d109      	bne.n	8005d9c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e88 <DMA_ProcessBuffer+0x1dc>)
 8005d90:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8005d92:	230d      	movs	r3, #13
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	220a      	movs	r2, #10
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e060      	b.n	8005e5e <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005e88 <DMA_ProcessBuffer+0x1dc>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	001a      	movs	r2, r3
 8005da4:	210e      	movs	r1, #14
 8005da6:	187b      	adds	r3, r7, r1
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	4b34      	ldr	r3, [pc, #208]	@ (8005e88 <DMA_ProcessBuffer+0x1dc>)
 8005db6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8005db8:	230d      	movs	r3, #13
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e04d      	b.n	8005e5e <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	001a      	movs	r2, r3
 8005dca:	210e      	movs	r1, #14
 8005dcc:	187b      	adds	r3, r7, r1
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d917      	bls.n	8005e04 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8005dd4:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	001a      	movs	r2, r3
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e8c <DMA_ProcessBuffer+0x1e0>)
 8005dde:	18d0      	adds	r0, r2, r3
 8005de0:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	001a      	movs	r2, r3
 8005de8:	187b      	adds	r3, r7, r1
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	b299      	uxth	r1, r3
 8005df0:	230d      	movs	r3, #13
 8005df2:	18fc      	adds	r4, r7, r3
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	001a      	movs	r2, r3
 8005dfa:	f7ff fa71 	bl	80052e0 <ParseBuffer>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	7023      	strb	r3, [r4, #0]
 8005e02:	e026      	b.n	8005e52 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8005e04:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005e8c <DMA_ProcessBuffer+0x1e0>)
 8005e0e:	18d0      	adds	r0, r2, r3
 8005e10:	4b17      	ldr	r3, [pc, #92]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	001a      	movs	r2, r3
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	b299      	uxth	r1, r3
 8005e20:	250d      	movs	r5, #13
 8005e22:	197c      	adds	r4, r7, r5
 8005e24:	1dfb      	adds	r3, r7, #7
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	f7ff fa59 	bl	80052e0 <ParseBuffer>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8005e32:	210e      	movs	r1, #14
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8005e3c:	197c      	adds	r4, r7, r5
 8005e3e:	1dfb      	adds	r3, r7, #7
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	187b      	adds	r3, r7, r1
 8005e44:	8819      	ldrh	r1, [r3, #0]
 8005e46:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <DMA_ProcessBuffer+0x1e0>)
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7ff fa49 	bl	80052e0 <ParseBuffer>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8005e52:	230e      	movs	r3, #14
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <DMA_ProcessBuffer+0x1c4>)
 8005e5c:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8005e5e:	230d      	movs	r3, #13
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	781b      	ldrb	r3, [r3, #0]
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b004      	add	sp, #16
 8005e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e6c:	20002134 	.word	0x20002134
 8005e70:	200007e1 	.word	0x200007e1
 8005e74:	20000688 	.word	0x20000688
 8005e78:	2000068a 	.word	0x2000068a
 8005e7c:	20000001 	.word	0x20000001
 8005e80:	2000002c 	.word	0x2000002c
 8005e84:	20000680 	.word	0x20000680
 8005e88:	200007e2 	.word	0x200007e2
 8005e8c:	200004b4 	.word	0x200004b4

08005e90 <clearDMABuffer>:

void clearDMABuffer(){
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005e94:	2380      	movs	r3, #128	@ 0x80
 8005e96:	005a      	lsls	r2, r3, #1
 8005e98:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <clearDMABuffer+0x18>)
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f01d fdf7 	bl	8023a90 <memset>
}
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200004b4 	.word	0x200004b4

08005eac <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	0002      	movs	r2, r0
 8005eb4:	1dfb      	adds	r3, r7, #7
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	1dbb      	adds	r3, r7, #6
 8005eba:	1c0a      	adds	r2, r1, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005ebe:	210f      	movs	r1, #15
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8005ec6:	1dbb      	adds	r3, r7, #6
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	1dfa      	adds	r2, r7, #7
 8005ed2:	7812      	ldrb	r2, [r2, #0]
 8005ed4:	4251      	negs	r1, r2
 8005ed6:	414a      	adcs	r2, r1
 8005ed8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005eda:	1dbb      	adds	r3, r7, #6
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005ee2:	230f      	movs	r3, #15
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	1dfa      	adds	r2, r7, #7
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	3a02      	subs	r2, #2
 8005eec:	4251      	negs	r1, r2
 8005eee:	414a      	adcs	r2, r1
 8005ef0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005ef2:	1dbb      	adds	r3, r7, #6
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d107      	bne.n	8005f0a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005efa:	230f      	movs	r3, #15
 8005efc:	18fb      	adds	r3, r7, r3
 8005efe:	1dfa      	adds	r2, r7, #7
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	3a05      	subs	r2, #5
 8005f04:	4251      	negs	r1, r2
 8005f06:	414a      	adcs	r2, r1
 8005f08:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005f0a:	1dbb      	adds	r3, r7, #6
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d107      	bne.n	8005f22 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8005f12:	230f      	movs	r3, #15
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	1dfa      	adds	r2, r7, #7
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	3a0b      	subs	r2, #11
 8005f1c:	4251      	negs	r1, r2
 8005f1e:	414a      	adcs	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8005f22:	230f      	movs	r3, #15
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	781b      	ldrb	r3, [r3, #0]
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <AT_Send>:

bool AT_Send(AT_Commands state){
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	0002      	movs	r2, r0
 8005f38:	1dfb      	adds	r3, r7, #7
 8005f3a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  switch (state){
 8005f44:	1dfb      	adds	r3, r7, #7
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b14      	cmp	r3, #20
 8005f4a:	d900      	bls.n	8005f4e <AT_Send+0x1e>
 8005f4c:	e19e      	b.n	800628c <AT_Send+0x35c>
 8005f4e:	009a      	lsls	r2, r3, #2
 8005f50:	4bd2      	ldr	r3, [pc, #840]	@ (800629c <AT_Send+0x36c>)
 8005f52:	18d3      	adds	r3, r2, r3
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8005f58:	4bd1      	ldr	r3, [pc, #836]	@ (80062a0 <AT_Send+0x370>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f00b fbe3 	bl	8011728 <TimestampIsReached>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d100      	bne.n	8005f68 <AT_Send+0x38>
 8005f66:	e190      	b.n	800628a <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8005f68:	4ace      	ldr	r2, [pc, #824]	@ (80062a4 <AT_Send+0x374>)
 8005f6a:	4bcf      	ldr	r3, [pc, #828]	@ (80062a8 <AT_Send+0x378>)
 8005f6c:	0019      	movs	r1, r3
 8005f6e:	2003      	movs	r0, #3
 8005f70:	f00b fc30 	bl	80117d4 <CreateLine>
    ATCommandSend = PollAwake();
 8005f74:	230f      	movs	r3, #15
 8005f76:	18fc      	adds	r4, r7, r3
 8005f78:	f7ff fba0 	bl	80056bc <PollAwake>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005f80:	f00c f874 	bl	801206c <HAL_GetTick>
 8005f84:	0003      	movs	r3, r0
 8005f86:	3332      	adds	r3, #50	@ 0x32
 8005f88:	001a      	movs	r2, r3
 8005f8a:	4bc5      	ldr	r3, [pc, #788]	@ (80062a0 <AT_Send+0x370>)
 8005f8c:	601a      	str	r2, [r3, #0]
  }
  break;
 8005f8e:	e17c      	b.n	800628a <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005f90:	4ac6      	ldr	r2, [pc, #792]	@ (80062ac <AT_Send+0x37c>)
 8005f92:	4bc5      	ldr	r3, [pc, #788]	@ (80062a8 <AT_Send+0x378>)
 8005f94:	0019      	movs	r1, r3
 8005f96:	2003      	movs	r0, #3
 8005f98:	f00b fc1c 	bl	80117d4 <CreateLine>
    ATCommandSend = RFPower();
 8005f9c:	230f      	movs	r3, #15
 8005f9e:	18fc      	adds	r4, r7, r3
 8005fa0:	f7ff fba8 	bl	80056f4 <RFPower>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005fa8:	f00c f860 	bl	801206c <HAL_GetTick>
 8005fac:	0003      	movs	r3, r0
 8005fae:	330a      	adds	r3, #10
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	4bbb      	ldr	r3, [pc, #748]	@ (80062a0 <AT_Send+0x370>)
 8005fb4:	601a      	str	r2, [r3, #0]
    break;
 8005fb6:	e169      	b.n	800628c <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005fb8:	4abd      	ldr	r2, [pc, #756]	@ (80062b0 <AT_Send+0x380>)
 8005fba:	4bbb      	ldr	r3, [pc, #748]	@ (80062a8 <AT_Send+0x378>)
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	2003      	movs	r0, #3
 8005fc0:	f00b fc08 	bl	80117d4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8005fc4:	230f      	movs	r3, #15
 8005fc6:	18fc      	adds	r4, r7, r3
 8005fc8:	f7ff fbb0 	bl	800572c <CheckRFPower>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005fd0:	f00c f84c 	bl	801206c <HAL_GetTick>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	330a      	adds	r3, #10
 8005fd8:	001a      	movs	r2, r3
 8005fda:	4bb1      	ldr	r3, [pc, #708]	@ (80062a0 <AT_Send+0x370>)
 8005fdc:	601a      	str	r2, [r3, #0]
    break;
 8005fde:	e155      	b.n	800628c <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005fe0:	4ab4      	ldr	r2, [pc, #720]	@ (80062b4 <AT_Send+0x384>)
 8005fe2:	4bb1      	ldr	r3, [pc, #708]	@ (80062a8 <AT_Send+0x378>)
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	2003      	movs	r0, #3
 8005fe8:	f00b fbf4 	bl	80117d4 <CreateLine>
    ATCommandSend = ATRestore();
 8005fec:	230f      	movs	r3, #15
 8005fee:	18fc      	adds	r4, r7, r3
 8005ff0:	f7ff fbb8 	bl	8005764 <ATRestore>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005ff8:	f00c f838 	bl	801206c <HAL_GetTick>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	3332      	adds	r3, #50	@ 0x32
 8006000:	001a      	movs	r2, r3
 8006002:	4ba7      	ldr	r3, [pc, #668]	@ (80062a0 <AT_Send+0x370>)
 8006004:	601a      	str	r2, [r3, #0]
    break;
 8006006:	e141      	b.n	800628c <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006008:	4aab      	ldr	r2, [pc, #684]	@ (80062b8 <AT_Send+0x388>)
 800600a:	4ba7      	ldr	r3, [pc, #668]	@ (80062a8 <AT_Send+0x378>)
 800600c:	0019      	movs	r1, r3
 800600e:	2003      	movs	r0, #3
 8006010:	f00b fbe0 	bl	80117d4 <CreateLine>
    ATCommandSend = CWINIT();
 8006014:	230f      	movs	r3, #15
 8006016:	18fc      	adds	r4, r7, r3
 8006018:	f7ff fbc0 	bl	800579c <CWINIT>
 800601c:	0003      	movs	r3, r0
 800601e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006020:	f00c f824 	bl	801206c <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	33f5      	adds	r3, #245	@ 0xf5
 8006028:	33ff      	adds	r3, #255	@ 0xff
 800602a:	001a      	movs	r2, r3
 800602c:	4b9c      	ldr	r3, [pc, #624]	@ (80062a0 <AT_Send+0x370>)
 800602e:	601a      	str	r2, [r3, #0]
    break;
 8006030:	e12c      	b.n	800628c <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006032:	4aa2      	ldr	r2, [pc, #648]	@ (80062bc <AT_Send+0x38c>)
 8006034:	4b9c      	ldr	r3, [pc, #624]	@ (80062a8 <AT_Send+0x378>)
 8006036:	0019      	movs	r1, r3
 8006038:	2003      	movs	r0, #3
 800603a:	f00b fbcb 	bl	80117d4 <CreateLine>
    ATCommandSend = CWSTATE();
 800603e:	230f      	movs	r3, #15
 8006040:	18fc      	adds	r4, r7, r3
 8006042:	f7ff fcb9 	bl	80059b8 <CWSTATE>
 8006046:	0003      	movs	r3, r0
 8006048:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800604a:	f00c f80f 	bl	801206c <HAL_GetTick>
 800604e:	0003      	movs	r3, r0
 8006050:	33f5      	adds	r3, #245	@ 0xf5
 8006052:	33ff      	adds	r3, #255	@ 0xff
 8006054:	001a      	movs	r2, r3
 8006056:	4b92      	ldr	r3, [pc, #584]	@ (80062a0 <AT_Send+0x370>)
 8006058:	601a      	str	r2, [r3, #0]
    break;
 800605a:	e117      	b.n	800628c <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 800605c:	4a98      	ldr	r2, [pc, #608]	@ (80062c0 <AT_Send+0x390>)
 800605e:	4b92      	ldr	r3, [pc, #584]	@ (80062a8 <AT_Send+0x378>)
 8006060:	0019      	movs	r1, r3
 8006062:	2003      	movs	r0, #3
 8006064:	f00b fbb6 	bl	80117d4 <CreateLine>
    ATCommandSend = CWMODE1();
 8006068:	230f      	movs	r3, #15
 800606a:	18fc      	adds	r4, r7, r3
 800606c:	f7ff fbb2 	bl	80057d4 <CWMODE1>
 8006070:	0003      	movs	r3, r0
 8006072:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006074:	f00b fffa 	bl	801206c <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	330a      	adds	r3, #10
 800607c:	001a      	movs	r2, r3
 800607e:	4b88      	ldr	r3, [pc, #544]	@ (80062a0 <AT_Send+0x370>)
 8006080:	601a      	str	r2, [r3, #0]
    break;
 8006082:	e103      	b.n	800628c <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006084:	4a8e      	ldr	r2, [pc, #568]	@ (80062c0 <AT_Send+0x390>)
 8006086:	4b88      	ldr	r3, [pc, #544]	@ (80062a8 <AT_Send+0x378>)
 8006088:	0019      	movs	r1, r3
 800608a:	2003      	movs	r0, #3
 800608c:	f00b fba2 	bl	80117d4 <CreateLine>
    ATCommandSend = CWMODE2();
 8006090:	230f      	movs	r3, #15
 8006092:	18fc      	adds	r4, r7, r3
 8006094:	f7ff fbba 	bl	800580c <CWMODE2>
 8006098:	0003      	movs	r3, r0
 800609a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800609c:	f00b ffe6 	bl	801206c <HAL_GetTick>
 80060a0:	0003      	movs	r3, r0
 80060a2:	330a      	adds	r3, #10
 80060a4:	001a      	movs	r2, r3
 80060a6:	4b7e      	ldr	r3, [pc, #504]	@ (80062a0 <AT_Send+0x370>)
 80060a8:	601a      	str	r2, [r3, #0]
    break;
 80060aa:	e0ef      	b.n	800628c <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80060ac:	4a85      	ldr	r2, [pc, #532]	@ (80062c4 <AT_Send+0x394>)
 80060ae:	4b7e      	ldr	r3, [pc, #504]	@ (80062a8 <AT_Send+0x378>)
 80060b0:	0019      	movs	r1, r3
 80060b2:	2003      	movs	r0, #3
 80060b4:	f00b fb8e 	bl	80117d4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80060b8:	230f      	movs	r3, #15
 80060ba:	18fc      	adds	r4, r7, r3
 80060bc:	f7ff fbc2 	bl	8005844 <CWAUTOCONN>
 80060c0:	0003      	movs	r3, r0
 80060c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80060c4:	f00b ffd2 	bl	801206c <HAL_GetTick>
 80060c8:	0003      	movs	r3, r0
 80060ca:	330a      	adds	r3, #10
 80060cc:	001a      	movs	r2, r3
 80060ce:	4b74      	ldr	r3, [pc, #464]	@ (80062a0 <AT_Send+0x370>)
 80060d0:	601a      	str	r2, [r3, #0]
    break;
 80060d2:	e0db      	b.n	800628c <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80060d4:	4a7c      	ldr	r2, [pc, #496]	@ (80062c8 <AT_Send+0x398>)
 80060d6:	4b74      	ldr	r3, [pc, #464]	@ (80062a8 <AT_Send+0x378>)
 80060d8:	0019      	movs	r1, r3
 80060da:	2003      	movs	r0, #3
 80060dc:	f00b fb7a 	bl	80117d4 <CreateLine>
    ATCommandSend = CWJAP();
 80060e0:	230f      	movs	r3, #15
 80060e2:	18fc      	adds	r4, r7, r3
 80060e4:	f7ff fbca 	bl	800587c <CWJAP>
 80060e8:	0003      	movs	r3, r0
 80060ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80060ec:	f00b ffbe 	bl	801206c <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	3332      	adds	r3, #50	@ 0x32
 80060f4:	001a      	movs	r2, r3
 80060f6:	4b6a      	ldr	r3, [pc, #424]	@ (80062a0 <AT_Send+0x370>)
 80060f8:	601a      	str	r2, [r3, #0]
    break;
 80060fa:	e0c7      	b.n	800628c <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80060fc:	4a73      	ldr	r2, [pc, #460]	@ (80062cc <AT_Send+0x39c>)
 80060fe:	4b6a      	ldr	r3, [pc, #424]	@ (80062a8 <AT_Send+0x378>)
 8006100:	0019      	movs	r1, r3
 8006102:	2003      	movs	r0, #3
 8006104:	f00b fb66 	bl	80117d4 <CreateLine>
    ATCommandSend = CWMODE3();
 8006108:	230f      	movs	r3, #15
 800610a:	18fc      	adds	r4, r7, r3
 800610c:	f7ff fc38 	bl	8005980 <CWMODE3>
 8006110:	0003      	movs	r3, r0
 8006112:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006114:	f00b ffaa 	bl	801206c <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	330a      	adds	r3, #10
 800611c:	001a      	movs	r2, r3
 800611e:	4b60      	ldr	r3, [pc, #384]	@ (80062a0 <AT_Send+0x370>)
 8006120:	601a      	str	r2, [r3, #0]
    break;
 8006122:	e0b3      	b.n	800628c <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006124:	4a6a      	ldr	r2, [pc, #424]	@ (80062d0 <AT_Send+0x3a0>)
 8006126:	4b60      	ldr	r3, [pc, #384]	@ (80062a8 <AT_Send+0x378>)
 8006128:	0019      	movs	r1, r3
 800612a:	2003      	movs	r0, #3
 800612c:	f00b fb52 	bl	80117d4 <CreateLine>
    ATCommandSend = CWSAP();
 8006130:	230f      	movs	r3, #15
 8006132:	18fc      	adds	r4, r7, r3
 8006134:	f7ff fc5c 	bl	80059f0 <CWSAP>
 8006138:	0003      	movs	r3, r0
 800613a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800613c:	f00b ff96 	bl	801206c <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	330a      	adds	r3, #10
 8006144:	001a      	movs	r2, r3
 8006146:	4b56      	ldr	r3, [pc, #344]	@ (80062a0 <AT_Send+0x370>)
 8006148:	601a      	str	r2, [r3, #0]
    break;
 800614a:	e09f      	b.n	800628c <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 800614c:	4a61      	ldr	r2, [pc, #388]	@ (80062d4 <AT_Send+0x3a4>)
 800614e:	4b56      	ldr	r3, [pc, #344]	@ (80062a8 <AT_Send+0x378>)
 8006150:	0019      	movs	r1, r3
 8006152:	2003      	movs	r0, #3
 8006154:	f00b fb3e 	bl	80117d4 <CreateLine>
    ATCommandSend = CIPMUX();
 8006158:	230f      	movs	r3, #15
 800615a:	18fc      	adds	r4, r7, r3
 800615c:	f7ff fc64 	bl	8005a28 <CIPMUX>
 8006160:	0003      	movs	r3, r0
 8006162:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006164:	f00b ff82 	bl	801206c <HAL_GetTick>
 8006168:	0003      	movs	r3, r0
 800616a:	330a      	adds	r3, #10
 800616c:	001a      	movs	r2, r3
 800616e:	4b4c      	ldr	r3, [pc, #304]	@ (80062a0 <AT_Send+0x370>)
 8006170:	601a      	str	r2, [r3, #0]
    break;
 8006172:	e08b      	b.n	800628c <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006174:	4a58      	ldr	r2, [pc, #352]	@ (80062d8 <AT_Send+0x3a8>)
 8006176:	4b4c      	ldr	r3, [pc, #304]	@ (80062a8 <AT_Send+0x378>)
 8006178:	0019      	movs	r1, r3
 800617a:	2003      	movs	r0, #3
 800617c:	f00b fb2a 	bl	80117d4 <CreateLine>
    ATCommandSend = WEBSERVER();
 8006180:	230f      	movs	r3, #15
 8006182:	18fc      	adds	r4, r7, r3
 8006184:	f7ff fc6c 	bl	8005a60 <WEBSERVER>
 8006188:	0003      	movs	r3, r0
 800618a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800618c:	f00b ff6e 	bl	801206c <HAL_GetTick>
 8006190:	0003      	movs	r3, r0
 8006192:	330a      	adds	r3, #10
 8006194:	001a      	movs	r2, r3
 8006196:	4b42      	ldr	r3, [pc, #264]	@ (80062a0 <AT_Send+0x370>)
 8006198:	601a      	str	r2, [r3, #0]
    break;
 800619a:	e077      	b.n	800628c <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800619c:	230f      	movs	r3, #15
 800619e:	18fc      	adds	r4, r7, r3
 80061a0:	f7ff fc7a 	bl	8005a98 <HTTPCPOST>
 80061a4:	0003      	movs	r3, r0
 80061a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80061a8:	f00b ff60 	bl	801206c <HAL_GetTick>
 80061ac:	0003      	movs	r3, r0
 80061ae:	33f5      	adds	r3, #245	@ 0xf5
 80061b0:	33ff      	adds	r3, #255	@ 0xff
 80061b2:	001a      	movs	r2, r3
 80061b4:	4b3a      	ldr	r3, [pc, #232]	@ (80062a0 <AT_Send+0x370>)
 80061b6:	601a      	str	r2, [r3, #0]
    break;
 80061b8:	e068      	b.n	800628c <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 80061ba:	4a48      	ldr	r2, [pc, #288]	@ (80062dc <AT_Send+0x3ac>)
 80061bc:	4b3a      	ldr	r3, [pc, #232]	@ (80062a8 <AT_Send+0x378>)
 80061be:	0019      	movs	r1, r3
 80061c0:	2003      	movs	r0, #3
 80061c2:	f00b fb07 	bl	80117d4 <CreateLine>
    ATCommandSend = SENDDATA();
 80061c6:	230f      	movs	r3, #15
 80061c8:	18fc      	adds	r4, r7, r3
 80061ca:	f7ff fccf 	bl	8005b6c <SENDDATA>
 80061ce:	0003      	movs	r3, r0
 80061d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80061d2:	f00b ff4b 	bl	801206c <HAL_GetTick>
 80061d6:	0003      	movs	r3, r0
 80061d8:	33f5      	adds	r3, #245	@ 0xf5
 80061da:	33ff      	adds	r3, #255	@ 0xff
 80061dc:	001a      	movs	r2, r3
 80061de:	4b30      	ldr	r3, [pc, #192]	@ (80062a0 <AT_Send+0x370>)
 80061e0:	601a      	str	r2, [r3, #0]
    break;
 80061e2:	e053      	b.n	800628c <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80061e4:	4a3e      	ldr	r2, [pc, #248]	@ (80062e0 <AT_Send+0x3b0>)
 80061e6:	4b30      	ldr	r3, [pc, #192]	@ (80062a8 <AT_Send+0x378>)
 80061e8:	0019      	movs	r1, r3
 80061ea:	2003      	movs	r0, #3
 80061ec:	f00b faf2 	bl	80117d4 <CreateLine>
    ATCommandSend = SLEEP();
 80061f0:	230f      	movs	r3, #15
 80061f2:	18fc      	adds	r4, r7, r3
 80061f4:	f7ff fce6 	bl	8005bc4 <SLEEP>
 80061f8:	0003      	movs	r3, r0
 80061fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80061fc:	f00b ff36 	bl	801206c <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	330a      	adds	r3, #10
 8006204:	001a      	movs	r2, r3
 8006206:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <AT_Send+0x370>)
 8006208:	601a      	str	r2, [r3, #0]
    break;
 800620a:	e03f      	b.n	800628c <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800620c:	4a35      	ldr	r2, [pc, #212]	@ (80062e4 <AT_Send+0x3b4>)
 800620e:	4b26      	ldr	r3, [pc, #152]	@ (80062a8 <AT_Send+0x378>)
 8006210:	0019      	movs	r1, r3
 8006212:	2003      	movs	r0, #3
 8006214:	f00b fade 	bl	80117d4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006218:	230f      	movs	r3, #15
 800621a:	18fc      	adds	r4, r7, r3
 800621c:	f7ff fcee 	bl	8005bfc <CIPSNTPCFG>
 8006220:	0003      	movs	r3, r0
 8006222:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006224:	f00b ff22 	bl	801206c <HAL_GetTick>
 8006228:	0003      	movs	r3, r0
 800622a:	330a      	adds	r3, #10
 800622c:	001a      	movs	r2, r3
 800622e:	4b1c      	ldr	r3, [pc, #112]	@ (80062a0 <AT_Send+0x370>)
 8006230:	601a      	str	r2, [r3, #0]
    break;
 8006232:	e02b      	b.n	800628c <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006234:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <AT_Send+0x3b8>)
 8006236:	4b1c      	ldr	r3, [pc, #112]	@ (80062a8 <AT_Send+0x378>)
 8006238:	0019      	movs	r1, r3
 800623a:	2003      	movs	r0, #3
 800623c:	f00b faca 	bl	80117d4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8006240:	230f      	movs	r3, #15
 8006242:	18fc      	adds	r4, r7, r3
 8006244:	f7ff fcfa 	bl	8005c3c <CIPSNTPTIME>
 8006248:	0003      	movs	r3, r0
 800624a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800624c:	f00b ff0e 	bl	801206c <HAL_GetTick>
 8006250:	0003      	movs	r3, r0
 8006252:	33f5      	adds	r3, #245	@ 0xf5
 8006254:	33ff      	adds	r3, #255	@ 0xff
 8006256:	001a      	movs	r2, r3
 8006258:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <AT_Send+0x370>)
 800625a:	601a      	str	r2, [r3, #0]
    break;
 800625c:	e016      	b.n	800628c <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800625e:	4a23      	ldr	r2, [pc, #140]	@ (80062ec <AT_Send+0x3bc>)
 8006260:	4b11      	ldr	r3, [pc, #68]	@ (80062a8 <AT_Send+0x378>)
 8006262:	0019      	movs	r1, r3
 8006264:	2003      	movs	r0, #3
 8006266:	f00b fab5 	bl	80117d4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800626a:	230f      	movs	r3, #15
 800626c:	18fc      	adds	r4, r7, r3
 800626e:	f7ff fd01 	bl	8005c74 <CIPSNTPINTV>
 8006272:	0003      	movs	r3, r0
 8006274:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006276:	f00b fef9 	bl	801206c <HAL_GetTick>
 800627a:	0003      	movs	r3, r0
 800627c:	330a      	adds	r3, #10
 800627e:	001a      	movs	r2, r3
 8006280:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <AT_Send+0x370>)
 8006282:	601a      	str	r2, [r3, #0]
    break;
 8006284:	e002      	b.n	800628c <AT_Send+0x35c>

  case AT_END:
    break;
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	e000      	b.n	800628c <AT_Send+0x35c>
  break;
 800628a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800628c:	230f      	movs	r3, #15
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	781b      	ldrb	r3, [r3, #0]
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b005      	add	sp, #20
 8006298:	bd90      	pop	{r4, r7, pc}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	0802ae68 	.word	0x0802ae68
 80062a0:	20000680 	.word	0x20000680
 80062a4:	080285bc 	.word	0x080285bc
 80062a8:	08027b54 	.word	0x08027b54
 80062ac:	080285c8 	.word	0x080285c8
 80062b0:	080285dc 	.word	0x080285dc
 80062b4:	080285f0 	.word	0x080285f0
 80062b8:	08028600 	.word	0x08028600
 80062bc:	08028614 	.word	0x08028614
 80062c0:	0802862c 	.word	0x0802862c
 80062c4:	08028644 	.word	0x08028644
 80062c8:	0802865c 	.word	0x0802865c
 80062cc:	08028670 	.word	0x08028670
 80062d0:	0802868c 	.word	0x0802868c
 80062d4:	080286a8 	.word	0x080286a8
 80062d8:	080286c4 	.word	0x080286c4
 80062dc:	080286e0 	.word	0x080286e0
 80062e0:	080286f0 	.word	0x080286f0
 80062e4:	08028714 	.word	0x08028714
 80062e8:	08028728 	.word	0x08028728
 80062ec:	08028740 	.word	0x08028740

080062f0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80062f6:	1dfb      	adds	r3, r7, #7
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80062fc:	4b7d      	ldr	r3, [pc, #500]	@ (80064f4 <ESP_WakeTest+0x204>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b05      	cmp	r3, #5
 8006302:	d900      	bls.n	8006306 <ESP_WakeTest+0x16>
 8006304:	e0d9      	b.n	80064ba <ESP_WakeTest+0x1ca>
 8006306:	009a      	lsls	r2, r3, #2
 8006308:	4b7b      	ldr	r3, [pc, #492]	@ (80064f8 <ESP_WakeTest+0x208>)
 800630a:	18d3      	adds	r3, r2, r3
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8006310:	4b7a      	ldr	r3, [pc, #488]	@ (80064fc <ESP_WakeTest+0x20c>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2201      	movs	r2, #1
 8006316:	4053      	eors	r3, r2
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d036      	beq.n	800638c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800631e:	2380      	movs	r3, #128	@ 0x80
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4877      	ldr	r0, [pc, #476]	@ (8006500 <ESP_WakeTest+0x210>)
 8006324:	2200      	movs	r2, #0
 8006326:	0019      	movs	r1, r3
 8006328:	f00d f931 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800632c:	2032      	movs	r0, #50	@ 0x32
 800632e:	f00b fea7 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006332:	2380      	movs	r3, #128	@ 0x80
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	4872      	ldr	r0, [pc, #456]	@ (8006500 <ESP_WakeTest+0x210>)
 8006338:	2201      	movs	r2, #1
 800633a:	0019      	movs	r1, r3
 800633c:	f00d f927 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006340:	200a      	movs	r0, #10
 8006342:	f00b fe9d 	bl	8012080 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006346:	4b6f      	ldr	r3, [pc, #444]	@ (8006504 <ESP_WakeTest+0x214>)
 8006348:	2200      	movs	r2, #0
 800634a:	2101      	movs	r1, #1
 800634c:	0018      	movs	r0, r3
 800634e:	f00d f91e 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006352:	200a      	movs	r0, #10
 8006354:	f00b fe94 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006358:	4b6a      	ldr	r3, [pc, #424]	@ (8006504 <ESP_WakeTest+0x214>)
 800635a:	2201      	movs	r2, #1
 800635c:	2102      	movs	r1, #2
 800635e:	0018      	movs	r0, r3
 8006360:	f00d f915 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006364:	200a      	movs	r0, #10
 8006366:	f00b fe8b 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800636a:	4b66      	ldr	r3, [pc, #408]	@ (8006504 <ESP_WakeTest+0x214>)
 800636c:	2201      	movs	r2, #1
 800636e:	2101      	movs	r1, #1
 8006370:	0018      	movs	r0, r3
 8006372:	f00d f90c 	bl	801358e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006376:	f00b fe79 	bl	801206c <HAL_GetTick>
 800637a:	0003      	movs	r3, r0
 800637c:	22af      	movs	r2, #175	@ 0xaf
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	189a      	adds	r2, r3, r2
 8006382:	4b61      	ldr	r3, [pc, #388]	@ (8006508 <ESP_WakeTest+0x218>)
 8006384:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006386:	4b5d      	ldr	r3, [pc, #372]	@ (80064fc <ESP_WakeTest+0x20c>)
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	005a      	lsls	r2, r3, #1
 8006390:	4b5e      	ldr	r3, [pc, #376]	@ (800650c <ESP_WakeTest+0x21c>)
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f7fe fa41 	bl	800481c <ESP_Receive>
 800639a:	1e03      	subs	r3, r0, #0
 800639c:	d100      	bne.n	80063a0 <ESP_WakeTest+0xb0>
 800639e:	e09f      	b.n	80064e0 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80063a0:	4b54      	ldr	r3, [pc, #336]	@ (80064f4 <ESP_WakeTest+0x204>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80063a6:	e09b      	b.n	80064e0 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80063a8:	4b57      	ldr	r3, [pc, #348]	@ (8006508 <ESP_WakeTest+0x218>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	0018      	movs	r0, r3
 80063ae:	f00b f9bb 	bl	8011728 <TimestampIsReached>
 80063b2:	1e03      	subs	r3, r0, #0
 80063b4:	d100      	bne.n	80063b8 <ESP_WakeTest+0xc8>
 80063b6:	e095      	b.n	80064e4 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 80063b8:	4b55      	ldr	r3, [pc, #340]	@ (8006510 <ESP_WakeTest+0x220>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	1dfc      	adds	r4, r7, #7
 80063be:	0018      	movs	r0, r3
 80063c0:	f7ff fdb6 	bl	8005f30 <AT_Send>
 80063c4:	0003      	movs	r3, r0
 80063c6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80063c8:	1dfb      	adds	r3, r7, #7
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d100      	bne.n	80063d2 <ESP_WakeTest+0xe2>
 80063d0:	e088      	b.n	80064e4 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 80063d2:	4b48      	ldr	r3, [pc, #288]	@ (80064f4 <ESP_WakeTest+0x204>)
 80063d4:	2202      	movs	r2, #2
 80063d6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80063d8:	e084      	b.n	80064e4 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80063da:	4b4b      	ldr	r3, [pc, #300]	@ (8006508 <ESP_WakeTest+0x218>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	0018      	movs	r0, r3
 80063e0:	f00b f9a2 	bl	8011728 <TimestampIsReached>
 80063e4:	1e03      	subs	r3, r0, #0
 80063e6:	d100      	bne.n	80063ea <ESP_WakeTest+0xfa>
 80063e8:	e07e      	b.n	80064e8 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80063ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006514 <ESP_WakeTest+0x224>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7ff fc5c 	bl	8005cac <DMA_ProcessBuffer>
 80063f4:	0003      	movs	r3, r0
 80063f6:	001a      	movs	r2, r3
 80063f8:	4b47      	ldr	r3, [pc, #284]	@ (8006518 <ESP_WakeTest+0x228>)
 80063fa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80063fc:	4b46      	ldr	r3, [pc, #280]	@ (8006518 <ESP_WakeTest+0x228>)
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	4b44      	ldr	r3, [pc, #272]	@ (8006514 <ESP_WakeTest+0x224>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	1dbc      	adds	r4, r7, #6
 8006406:	0019      	movs	r1, r3
 8006408:	0010      	movs	r0, r2
 800640a:	f7ff fd4f 	bl	8005eac <ATCompare>
 800640e:	0003      	movs	r3, r0
 8006410:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8006412:	4b41      	ldr	r3, [pc, #260]	@ (8006518 <ESP_WakeTest+0x228>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d102      	bne.n	8006420 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800641a:	4b36      	ldr	r3, [pc, #216]	@ (80064f4 <ESP_WakeTest+0x204>)
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8006420:	4b3d      	ldr	r3, [pc, #244]	@ (8006518 <ESP_WakeTest+0x228>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b07      	cmp	r3, #7
 8006426:	d104      	bne.n	8006432 <ESP_WakeTest+0x142>
          StartProg();
 8006428:	f7fe ff28 	bl	800527c <StartProg>
          TestState = ESP_TEST_BOOT;
 800642c:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <ESP_WakeTest+0x204>)
 800642e:	2205      	movs	r2, #5
 8006430:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006432:	4b39      	ldr	r3, [pc, #228]	@ (8006518 <ESP_WakeTest+0x228>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d109      	bne.n	800644e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800643a:	f00b fe17 	bl	801206c <HAL_GetTick>
 800643e:	0003      	movs	r3, r0
 8006440:	3332      	adds	r3, #50	@ 0x32
 8006442:	001a      	movs	r2, r3
 8006444:	4b30      	ldr	r3, [pc, #192]	@ (8006508 <ESP_WakeTest+0x218>)
 8006446:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <ESP_WakeTest+0x204>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800644e:	1dbb      	adds	r3, r7, #6
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d048      	beq.n	80064e8 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 8006456:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <ESP_WakeTest+0x204>)
 8006458:	2203      	movs	r2, #3
 800645a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800645c:	e044      	b.n	80064e8 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800645e:	4b2f      	ldr	r3, [pc, #188]	@ (800651c <ESP_WakeTest+0x22c>)
 8006460:	22fa      	movs	r2, #250	@ 0xfa
 8006462:	0112      	lsls	r2, r2, #4
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8006466:	f009 ff05 	bl	8010274 <Calculate_LED_ON>
 800646a:	0003      	movs	r3, r0
 800646c:	001a      	movs	r2, r3
 800646e:	4b2b      	ldr	r3, [pc, #172]	@ (800651c <ESP_WakeTest+0x22c>)
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8006472:	4b2a      	ldr	r3, [pc, #168]	@ (800651c <ESP_WakeTest+0x22c>)
 8006474:	22fa      	movs	r2, #250	@ 0xfa
 8006476:	0112      	lsls	r2, r2, #4
 8006478:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800647a:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <ESP_WakeTest+0x204>)
 800647c:	2204      	movs	r2, #4
 800647e:	701a      	strb	r2, [r3, #0]

      break;
 8006480:	e033      	b.n	80064ea <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8006482:	4b27      	ldr	r3, [pc, #156]	@ (8006520 <ESP_WakeTest+0x230>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8006488:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <ESP_WakeTest+0x20c>)
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800648e:	4b1d      	ldr	r3, [pc, #116]	@ (8006504 <ESP_WakeTest+0x214>)
 8006490:	2200      	movs	r2, #0
 8006492:	2101      	movs	r1, #1
 8006494:	0018      	movs	r0, r3
 8006496:	f00d f87a 	bl	801358e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800649a:	2380      	movs	r3, #128	@ 0x80
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	4818      	ldr	r0, [pc, #96]	@ (8006500 <ESP_WakeTest+0x210>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	0019      	movs	r1, r3
 80064a4:	f00d f873 	bl	801358e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80064a8:	4b16      	ldr	r3, [pc, #88]	@ (8006504 <ESP_WakeTest+0x214>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	2102      	movs	r1, #2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f00d f86d 	bl	801358e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80064b4:	f004 ffa4 	bl	800b400 <SetESPMeasurementDone>
      break;
 80064b8:	e017      	b.n	80064ea <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 80064ba:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <ESP_WakeTest+0x204>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
      break;
 80064c0:	e013      	b.n	80064ea <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80064c2:	4b16      	ldr	r3, [pc, #88]	@ (800651c <ESP_WakeTest+0x22c>)
 80064c4:	22fa      	movs	r2, #250	@ 0xfa
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80064ca:	4b14      	ldr	r3, [pc, #80]	@ (800651c <ESP_WakeTest+0x22c>)
 80064cc:	22fa      	movs	r2, #250	@ 0xfa
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80064d2:	f009 fecf 	bl	8010274 <Calculate_LED_ON>
 80064d6:	0003      	movs	r3, r0
 80064d8:	001a      	movs	r2, r3
 80064da:	4b10      	ldr	r3, [pc, #64]	@ (800651c <ESP_WakeTest+0x22c>)
 80064dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80064de:	e004      	b.n	80064ea <ESP_WakeTest+0x1fa>
      break;
 80064e0:	46c0      	nop			@ (mov r8, r8)
 80064e2:	e002      	b.n	80064ea <ESP_WakeTest+0x1fa>
      break;
 80064e4:	46c0      	nop			@ (mov r8, r8)
 80064e6:	e000      	b.n	80064ea <ESP_WakeTest+0x1fa>
      break;
 80064e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80064ea:	46c0      	nop			@ (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b003      	add	sp, #12
 80064f0:	bd90      	pop	{r4, r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	2000068c 	.word	0x2000068c
 80064f8:	0802aebc 	.word	0x0802aebc
 80064fc:	200005b4 	.word	0x200005b4
 8006500:	50000800 	.word	0x50000800
 8006504:	50001c00 	.word	0x50001c00
 8006508:	20000680 	.word	0x20000680
 800650c:	200004b4 	.word	0x200004b4
 8006510:	2000068a 	.word	0x2000068a
 8006514:	20000689 	.word	0x20000689
 8006518:	2000002e 	.word	0x2000002e
 800651c:	40000400 	.word	0x40000400
 8006520:	20000001 	.word	0x20000001

08006524 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8006524:	b5b0      	push	{r4, r5, r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800652a:	1dfb      	adds	r3, r7, #7
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8006530:	4be2      	ldr	r3, [pc, #904]	@ (80068bc <ESP_Upkeep+0x398>)
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	4be2      	ldr	r3, [pc, #904]	@ (80068c0 <ESP_Upkeep+0x39c>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d024      	beq.n	8006586 <ESP_Upkeep+0x62>
 800653c:	f00b f9c4 	bl	80118c8 <GetVerboseLevel>
 8006540:	0003      	movs	r3, r0
 8006542:	2b03      	cmp	r3, #3
 8006544:	d11f      	bne.n	8006586 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8006546:	4bdd      	ldr	r3, [pc, #884]	@ (80068bc <ESP_Upkeep+0x398>)
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	4bdd      	ldr	r3, [pc, #884]	@ (80068c0 <ESP_Upkeep+0x39c>)
 800654c:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800654e:	4bdc      	ldr	r3, [pc, #880]	@ (80068c0 <ESP_Upkeep+0x39c>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d103      	bne.n	800655e <ESP_Upkeep+0x3a>
 8006556:	4bdb      	ldr	r3, [pc, #876]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b0e      	cmp	r3, #14
 800655c:	d013      	beq.n	8006586 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800655e:	4bd8      	ldr	r3, [pc, #864]	@ (80068c0 <ESP_Upkeep+0x39c>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	001d      	movs	r5, r3
 8006564:	4bd7      	ldr	r3, [pc, #860]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	0018      	movs	r0, r3
 800656a:	4bd7      	ldr	r3, [pc, #860]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	001c      	movs	r4, r3
 8006570:	4bd6      	ldr	r3, [pc, #856]	@ (80068cc <ESP_Upkeep+0x3a8>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4ad6      	ldr	r2, [pc, #856]	@ (80068d0 <ESP_Upkeep+0x3ac>)
 8006576:	49d7      	ldr	r1, [pc, #860]	@ (80068d4 <ESP_Upkeep+0x3b0>)
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	9401      	str	r4, [sp, #4]
 800657c:	9000      	str	r0, [sp, #0]
 800657e:	002b      	movs	r3, r5
 8006580:	2003      	movs	r0, #3
 8006582:	f00b f927 	bl	80117d4 <CreateLine>
    }
  }
  switch (EspState) {
 8006586:	4bcd      	ldr	r3, [pc, #820]	@ (80068bc <ESP_Upkeep+0x398>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b0f      	cmp	r3, #15
 800658c:	d901      	bls.n	8006592 <ESP_Upkeep+0x6e>
 800658e:	f000 fc36 	bl	8006dfe <ESP_Upkeep+0x8da>
 8006592:	009a      	lsls	r2, r3, #2
 8006594:	4bd0      	ldr	r3, [pc, #832]	@ (80068d8 <ESP_Upkeep+0x3b4>)
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800659c:	4bc7      	ldr	r3, [pc, #796]	@ (80068bc <ESP_Upkeep+0x398>)
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
      break;
 80065a2:	f000 fc45 	bl	8006e30 <ESP_Upkeep+0x90c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 80065a6:	f005 fa4d 	bl	800ba44 <DisableConnectedDevices>
      SetESPIndicator();
 80065aa:	f009 fff5 	bl	8010598 <SetESPIndicator>
      if(!EspTurnedOn){
 80065ae:	4bcb      	ldr	r3, [pc, #812]	@ (80068dc <ESP_Upkeep+0x3b8>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2201      	movs	r2, #1
 80065b4:	4053      	eors	r3, r2
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d036      	beq.n	800662a <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	48c7      	ldr	r0, [pc, #796]	@ (80068e0 <ESP_Upkeep+0x3bc>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	0019      	movs	r1, r3
 80065c6:	f00c ffe2 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80065ca:	2001      	movs	r0, #1
 80065cc:	f00b fd58 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	48c2      	ldr	r0, [pc, #776]	@ (80068e0 <ESP_Upkeep+0x3bc>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	0019      	movs	r1, r3
 80065da:	f00c ffd8 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80065de:	2001      	movs	r0, #1
 80065e0:	f00b fd4e 	bl	8012080 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80065e4:	4bbf      	ldr	r3, [pc, #764]	@ (80068e4 <ESP_Upkeep+0x3c0>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	2101      	movs	r1, #1
 80065ea:	0018      	movs	r0, r3
 80065ec:	f00c ffcf 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80065f0:	2001      	movs	r0, #1
 80065f2:	f00b fd45 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80065f6:	4bbb      	ldr	r3, [pc, #748]	@ (80068e4 <ESP_Upkeep+0x3c0>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	2102      	movs	r1, #2
 80065fc:	0018      	movs	r0, r3
 80065fe:	f00c ffc6 	bl	801358e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006602:	2001      	movs	r0, #1
 8006604:	f00b fd3c 	bl	8012080 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006608:	4bb6      	ldr	r3, [pc, #728]	@ (80068e4 <ESP_Upkeep+0x3c0>)
 800660a:	2201      	movs	r2, #1
 800660c:	2101      	movs	r1, #1
 800660e:	0018      	movs	r0, r3
 8006610:	f00c ffbd 	bl	801358e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006614:	f00b fd2a 	bl	801206c <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	22af      	movs	r2, #175	@ 0xaf
 800661c:	0092      	lsls	r2, r2, #2
 800661e:	189a      	adds	r2, r3, r2
 8006620:	4bb1      	ldr	r3, [pc, #708]	@ (80068e8 <ESP_Upkeep+0x3c4>)
 8006622:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006624:	4bad      	ldr	r3, [pc, #692]	@ (80068dc <ESP_Upkeep+0x3b8>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	005a      	lsls	r2, r3, #1
 800662e:	4baf      	ldr	r3, [pc, #700]	@ (80068ec <ESP_Upkeep+0x3c8>)
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f7fe f8f2 	bl	800481c <ESP_Receive>
 8006638:	1e03      	subs	r3, r0, #0
 800663a:	d101      	bne.n	8006640 <ESP_Upkeep+0x11c>
 800663c:	f000 fbeb 	bl	8006e16 <ESP_Upkeep+0x8f2>
        EspState = ESP_STATE_WAIT_AWAKE;
 8006640:	4b9e      	ldr	r3, [pc, #632]	@ (80068bc <ESP_Upkeep+0x398>)
 8006642:	220f      	movs	r2, #15
 8006644:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8006646:	f00b fd11 	bl	801206c <HAL_GetTick>
 800664a:	0003      	movs	r3, r0
 800664c:	22fa      	movs	r2, #250	@ 0xfa
 800664e:	00d2      	lsls	r2, r2, #3
 8006650:	189a      	adds	r2, r3, r2
 8006652:	4ba7      	ldr	r3, [pc, #668]	@ (80068f0 <ESP_Upkeep+0x3cc>)
 8006654:	601a      	str	r2, [r3, #0]
      }
      break;
 8006656:	f000 fbde 	bl	8006e16 <ESP_Upkeep+0x8f2>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800665a:	2001      	movs	r0, #1
 800665c:	f7ff fb26 	bl	8005cac <DMA_ProcessBuffer>
 8006660:	0003      	movs	r3, r0
 8006662:	001a      	movs	r2, r3
 8006664:	4ba3      	ldr	r3, [pc, #652]	@ (80068f4 <ESP_Upkeep+0x3d0>)
 8006666:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8006668:	4ba2      	ldr	r3, [pc, #648]	@ (80068f4 <ESP_Upkeep+0x3d0>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	1dbc      	adds	r4, r7, #6
 800666e:	2101      	movs	r1, #1
 8006670:	0018      	movs	r0, r3
 8006672:	f7ff fc1b 	bl	8005eac <ATCompare>
 8006676:	0003      	movs	r3, r0
 8006678:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800667a:	1dbb      	adds	r3, r7, #6
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <ESP_Upkeep+0x170>
 8006682:	4b9b      	ldr	r3, [pc, #620]	@ (80068f0 <ESP_Upkeep+0x3cc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	0018      	movs	r0, r3
 8006688:	f00b f84e 	bl	8011728 <TimestampIsReached>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d101      	bne.n	8006694 <ESP_Upkeep+0x170>
 8006690:	f000 fbc3 	bl	8006e1a <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_MODE_SELECT;
 8006694:	4b89      	ldr	r3, [pc, #548]	@ (80068bc <ESP_Upkeep+0x398>)
 8006696:	220b      	movs	r2, #11
 8006698:	701a      	strb	r2, [r3, #0]
        }
        break;
 800669a:	f000 fbbe 	bl	8006e1a <ESP_Upkeep+0x8f6>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 800669e:	4b96      	ldr	r3, [pc, #600]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 80066a0:	2209      	movs	r2, #9
 80066a2:	2114      	movs	r1, #20
 80066a4:	0018      	movs	r0, r3
 80066a6:	f01d f9f3 	bl	8023a90 <memset>
      if(!InitIsDone || WifiReset){
 80066aa:	4b94      	ldr	r3, [pc, #592]	@ (80068fc <ESP_Upkeep+0x3d8>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2201      	movs	r2, #1
 80066b0:	4053      	eors	r3, r2
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <ESP_Upkeep+0x19c>
 80066b8:	4b91      	ldr	r3, [pc, #580]	@ (8006900 <ESP_Upkeep+0x3dc>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 80066c0:	4b8d      	ldr	r3, [pc, #564]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 80066c2:	4a90      	ldr	r2, [pc, #576]	@ (8006904 <ESP_Upkeep+0x3e0>)
 80066c4:	6811      	ldr	r1, [r2, #0]
 80066c6:	6019      	str	r1, [r3, #0]
 80066c8:	8891      	ldrh	r1, [r2, #4]
 80066ca:	8099      	strh	r1, [r3, #4]
 80066cc:	7992      	ldrb	r2, [r2, #6]
 80066ce:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80066d0:	4b7a      	ldr	r3, [pc, #488]	@ (80068bc <ESP_Upkeep+0x398>)
 80066d2:	2204      	movs	r2, #4
 80066d4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80066d6:	4b8c      	ldr	r3, [pc, #560]	@ (8006908 <ESP_Upkeep+0x3e4>)
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80066dc:	4b7a      	ldr	r3, [pc, #488]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80066e2:	4b89      	ldr	r3, [pc, #548]	@ (8006908 <ESP_Upkeep+0x3e4>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	001a      	movs	r2, r3
 80066e8:	4b83      	ldr	r3, [pc, #524]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 80066ea:	5c9a      	ldrb	r2, [r3, r2]
 80066ec:	4b75      	ldr	r3, [pc, #468]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 80066ee:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80066f0:	4b76      	ldr	r3, [pc, #472]	@ (80068cc <ESP_Upkeep+0x3a8>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80066f6:	4b81      	ldr	r3, [pc, #516]	@ (80068fc <ESP_Upkeep+0x3d8>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01f      	beq.n	800673e <ESP_Upkeep+0x21a>
 80066fe:	4b83      	ldr	r3, [pc, #524]	@ (800690c <ESP_Upkeep+0x3e8>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	4053      	eors	r3, r2
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d018      	beq.n	800673e <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800670c:	4b7a      	ldr	r3, [pc, #488]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 800670e:	4a80      	ldr	r2, [pc, #512]	@ (8006910 <ESP_Upkeep+0x3ec>)
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	6019      	str	r1, [r3, #0]
 8006714:	8892      	ldrh	r2, [r2, #4]
 8006716:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8006718:	4b68      	ldr	r3, [pc, #416]	@ (80068bc <ESP_Upkeep+0x398>)
 800671a:	2204      	movs	r2, #4
 800671c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800671e:	4b7a      	ldr	r3, [pc, #488]	@ (8006908 <ESP_Upkeep+0x3e4>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8006724:	4b68      	ldr	r3, [pc, #416]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800672a:	4b77      	ldr	r3, [pc, #476]	@ (8006908 <ESP_Upkeep+0x3e4>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	001a      	movs	r2, r3
 8006730:	4b71      	ldr	r3, [pc, #452]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 8006732:	5c9a      	ldrb	r2, [r3, r2]
 8006734:	4b63      	ldr	r3, [pc, #396]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 8006736:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006738:	4b64      	ldr	r3, [pc, #400]	@ (80068cc <ESP_Upkeep+0x3a8>)
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800673e:	4b6f      	ldr	r3, [pc, #444]	@ (80068fc <ESP_Upkeep+0x3d8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d021      	beq.n	800678a <ESP_Upkeep+0x266>
 8006746:	4b71      	ldr	r3, [pc, #452]	@ (800690c <ESP_Upkeep+0x3e8>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01d      	beq.n	800678a <ESP_Upkeep+0x266>
 800674e:	4b71      	ldr	r3, [pc, #452]	@ (8006914 <ESP_Upkeep+0x3f0>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2201      	movs	r2, #1
 8006754:	4053      	eors	r3, r2
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d016      	beq.n	800678a <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800675c:	4b6e      	ldr	r3, [pc, #440]	@ (8006918 <ESP_Upkeep+0x3f4>)
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	4b65      	ldr	r3, [pc, #404]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 8006762:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006764:	4b55      	ldr	r3, [pc, #340]	@ (80068bc <ESP_Upkeep+0x398>)
 8006766:	2204      	movs	r2, #4
 8006768:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800676a:	4b67      	ldr	r3, [pc, #412]	@ (8006908 <ESP_Upkeep+0x3e4>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8006770:	4b55      	ldr	r3, [pc, #340]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 8006772:	2204      	movs	r2, #4
 8006774:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006776:	4b64      	ldr	r3, [pc, #400]	@ (8006908 <ESP_Upkeep+0x3e4>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	001a      	movs	r2, r3
 800677c:	4b5e      	ldr	r3, [pc, #376]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 800677e:	5c9a      	ldrb	r2, [r3, r2]
 8006780:	4b50      	ldr	r3, [pc, #320]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 8006782:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006784:	4b51      	ldr	r3, [pc, #324]	@ (80068cc <ESP_Upkeep+0x3a8>)
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800678a:	4b5c      	ldr	r3, [pc, #368]	@ (80068fc <ESP_Upkeep+0x3d8>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d02c      	beq.n	80067ec <ESP_Upkeep+0x2c8>
 8006792:	4b5e      	ldr	r3, [pc, #376]	@ (800690c <ESP_Upkeep+0x3e8>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d028      	beq.n	80067ec <ESP_Upkeep+0x2c8>
 800679a:	4b5e      	ldr	r3, [pc, #376]	@ (8006914 <ESP_Upkeep+0x3f0>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d024      	beq.n	80067ec <ESP_Upkeep+0x2c8>
 80067a2:	4b5e      	ldr	r3, [pc, #376]	@ (800691c <ESP_Upkeep+0x3f8>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	4053      	eors	r3, r2
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01d      	beq.n	80067ec <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 80067b0:	4b51      	ldr	r3, [pc, #324]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 80067b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006920 <ESP_Upkeep+0x3fc>)
 80067b4:	8811      	ldrh	r1, [r2, #0]
 80067b6:	8019      	strh	r1, [r3, #0]
 80067b8:	7892      	ldrb	r2, [r2, #2]
 80067ba:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80067bc:	4b3f      	ldr	r3, [pc, #252]	@ (80068bc <ESP_Upkeep+0x398>)
 80067be:	2204      	movs	r2, #4
 80067c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80067c2:	4b51      	ldr	r3, [pc, #324]	@ (8006908 <ESP_Upkeep+0x3e4>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80067c8:	4b3f      	ldr	r3, [pc, #252]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80067ce:	f00b fc4d 	bl	801206c <HAL_GetTick>
 80067d2:	0002      	movs	r2, r0
 80067d4:	4b53      	ldr	r3, [pc, #332]	@ (8006924 <ESP_Upkeep+0x400>)
 80067d6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80067d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006908 <ESP_Upkeep+0x3e4>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	001a      	movs	r2, r3
 80067de:	4b46      	ldr	r3, [pc, #280]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 80067e0:	5c9a      	ldrb	r2, [r3, r2]
 80067e2:	4b38      	ldr	r3, [pc, #224]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 80067e4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80067e6:	4b39      	ldr	r3, [pc, #228]	@ (80068cc <ESP_Upkeep+0x3a8>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80067ec:	4b43      	ldr	r3, [pc, #268]	@ (80068fc <ESP_Upkeep+0x3d8>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d027      	beq.n	8006844 <ESP_Upkeep+0x320>
 80067f4:	4b45      	ldr	r3, [pc, #276]	@ (800690c <ESP_Upkeep+0x3e8>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d023      	beq.n	8006844 <ESP_Upkeep+0x320>
 80067fc:	4b45      	ldr	r3, [pc, #276]	@ (8006914 <ESP_Upkeep+0x3f0>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01f      	beq.n	8006844 <ESP_Upkeep+0x320>
 8006804:	4b45      	ldr	r3, [pc, #276]	@ (800691c <ESP_Upkeep+0x3f8>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800680c:	4b46      	ldr	r3, [pc, #280]	@ (8006928 <ESP_Upkeep+0x404>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b39      	ldr	r3, [pc, #228]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 8006812:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006814:	4b29      	ldr	r3, [pc, #164]	@ (80068bc <ESP_Upkeep+0x398>)
 8006816:	2204      	movs	r2, #4
 8006818:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800681a:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <ESP_Upkeep+0x3e4>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8006820:	4b29      	ldr	r3, [pc, #164]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 8006822:	2205      	movs	r2, #5
 8006824:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8006826:	f00b fc21 	bl	801206c <HAL_GetTick>
 800682a:	0002      	movs	r2, r0
 800682c:	4b3d      	ldr	r3, [pc, #244]	@ (8006924 <ESP_Upkeep+0x400>)
 800682e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <ESP_Upkeep+0x3e4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	001a      	movs	r2, r3
 8006836:	4b30      	ldr	r3, [pc, #192]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 8006838:	5c9a      	ldrb	r2, [r3, r2]
 800683a:	4b22      	ldr	r3, [pc, #136]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 800683c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800683e:	4b23      	ldr	r3, [pc, #140]	@ (80068cc <ESP_Upkeep+0x3a8>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8006844:	4b39      	ldr	r3, [pc, #228]	@ (800692c <ESP_Upkeep+0x408>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d100      	bne.n	800684e <ESP_Upkeep+0x32a>
 800684c:	e2e7      	b.n	8006e1e <ESP_Upkeep+0x8fa>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800684e:	4b2a      	ldr	r3, [pc, #168]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 8006850:	4a37      	ldr	r2, [pc, #220]	@ (8006930 <ESP_Upkeep+0x40c>)
 8006852:	6811      	ldr	r1, [r2, #0]
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	7912      	ldrb	r2, [r2, #4]
 8006858:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800685a:	4a36      	ldr	r2, [pc, #216]	@ (8006934 <ESP_Upkeep+0x410>)
 800685c:	4b1d      	ldr	r3, [pc, #116]	@ (80068d4 <ESP_Upkeep+0x3b0>)
 800685e:	0019      	movs	r1, r3
 8006860:	2003      	movs	r0, #3
 8006862:	f00a ffb7 	bl	80117d4 <CreateLine>
        DisableConnectedDevices();
 8006866:	f005 f8ed 	bl	800ba44 <DisableConnectedDevices>
        usblog = false;
 800686a:	4b33      	ldr	r3, [pc, #204]	@ (8006938 <ESP_Upkeep+0x414>)
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006870:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <ESP_Upkeep+0x398>)
 8006872:	2204      	movs	r2, #4
 8006874:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006876:	4b24      	ldr	r3, [pc, #144]	@ (8006908 <ESP_Upkeep+0x3e4>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800687c:	4b12      	ldr	r3, [pc, #72]	@ (80068c8 <ESP_Upkeep+0x3a4>)
 800687e:	2203      	movs	r2, #3
 8006880:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006882:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <ESP_Upkeep+0x3e4>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	001a      	movs	r2, r3
 8006888:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <ESP_Upkeep+0x3d4>)
 800688a:	5c9a      	ldrb	r2, [r3, r2]
 800688c:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 800688e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006890:	4b0e      	ldr	r3, [pc, #56]	@ (80068cc <ESP_Upkeep+0x3a8>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
      }
    break;
 8006896:	e2c2      	b.n	8006e1e <ESP_Upkeep+0x8fa>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8006898:	4b0a      	ldr	r3, [pc, #40]	@ (80068c4 <ESP_Upkeep+0x3a0>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	1dfc      	adds	r4, r7, #7
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff fb46 	bl	8005f30 <AT_Send>
 80068a4:	0003      	movs	r3, r0
 80068a6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80068a8:	1dfb      	adds	r3, r7, #7
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d100      	bne.n	80068b2 <ESP_Upkeep+0x38e>
 80068b0:	e2b7      	b.n	8006e22 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80068b2:	4b02      	ldr	r3, [pc, #8]	@ (80068bc <ESP_Upkeep+0x398>)
 80068b4:	2203      	movs	r2, #3
 80068b6:	701a      	strb	r2, [r3, #0]
        }
    break;
 80068b8:	e2b3      	b.n	8006e22 <ESP_Upkeep+0x8fe>
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	2000002c 	.word	0x2000002c
 80068c0:	20000003 	.word	0x20000003
 80068c4:	2000068a 	.word	0x2000068a
 80068c8:	2000068b 	.word	0x2000068b
 80068cc:	20000689 	.word	0x20000689
 80068d0:	08028760 	.word	0x08028760
 80068d4:	08027b54 	.word	0x08027b54
 80068d8:	0802aed4 	.word	0x0802aed4
 80068dc:	200005b4 	.word	0x200005b4
 80068e0:	50000800 	.word	0x50000800
 80068e4:	50001c00 	.word	0x50001c00
 80068e8:	20000680 	.word	0x20000680
 80068ec:	200004b4 	.word	0x200004b4
 80068f0:	200007e4 	.word	0x200007e4
 80068f4:	2000002f 	.word	0x2000002f
 80068f8:	20000670 	.word	0x20000670
 80068fc:	200005b5 	.word	0x200005b5
 8006900:	200005b6 	.word	0x200005b6
 8006904:	20000004 	.word	0x20000004
 8006908:	2000067a 	.word	0x2000067a
 800690c:	200005b8 	.word	0x200005b8
 8006910:	20000014 	.word	0x20000014
 8006914:	200005b9 	.word	0x200005b9
 8006918:	20000010 	.word	0x20000010
 800691c:	20000002 	.word	0x20000002
 8006920:	2000000c 	.word	0x2000000c
 8006924:	200005cc 	.word	0x200005cc
 8006928:	20000024 	.word	0x20000024
 800692c:	200005b7 	.word	0x200005b7
 8006930:	2000001c 	.word	0x2000001c
 8006934:	0802878c 	.word	0x0802878c
 8006938:	20000207 	.word	0x20000207

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800693c:	4bcb      	ldr	r3, [pc, #812]	@ (8006c6c <ESP_Upkeep+0x748>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <ESP_Upkeep+0x430>
 8006944:	4bca      	ldr	r3, [pc, #808]	@ (8006c70 <ESP_Upkeep+0x74c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d003      	beq.n	8006954 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 800694c:	4bc9      	ldr	r3, [pc, #804]	@ (8006c74 <ESP_Upkeep+0x750>)
 800694e:	220b      	movs	r2, #11
 8006950:	701a      	strb	r2, [r3, #0]
        break;
 8006952:	e26d      	b.n	8006e30 <ESP_Upkeep+0x90c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8006954:	4bc8      	ldr	r3, [pc, #800]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	0018      	movs	r0, r3
 800695a:	f00a fee5 	bl	8011728 <TimestampIsReached>
 800695e:	1e03      	subs	r3, r0, #0
 8006960:	d100      	bne.n	8006964 <ESP_Upkeep+0x440>
 8006962:	e260      	b.n	8006e26 <ESP_Upkeep+0x902>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8006964:	4bc5      	ldr	r3, [pc, #788]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	0018      	movs	r0, r3
 800696a:	f7ff f99f 	bl	8005cac <DMA_ProcessBuffer>
 800696e:	0003      	movs	r3, r0
 8006970:	001a      	movs	r2, r3
 8006972:	4bc3      	ldr	r3, [pc, #780]	@ (8006c80 <ESP_Upkeep+0x75c>)
 8006974:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8006976:	4bc2      	ldr	r3, [pc, #776]	@ (8006c80 <ESP_Upkeep+0x75c>)
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	4bc0      	ldr	r3, [pc, #768]	@ (8006c7c <ESP_Upkeep+0x758>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	1d7c      	adds	r4, r7, #5
 8006980:	0019      	movs	r1, r3
 8006982:	0010      	movs	r0, r2
 8006984:	f7ff fa92 	bl	8005eac <ATCompare>
 8006988:	0003      	movs	r3, r0
 800698a:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800698c:	4bbc      	ldr	r3, [pc, #752]	@ (8006c80 <ESP_Upkeep+0x75c>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d138      	bne.n	8006a06 <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8006994:	4bbb      	ldr	r3, [pc, #748]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b0f      	cmp	r3, #15
 800699a:	d108      	bne.n	80069ae <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 800699c:	4bb9      	ldr	r3, [pc, #740]	@ (8006c84 <ESP_Upkeep+0x760>)
 800699e:	220e      	movs	r2, #14
 80069a0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80069a2:	4bb6      	ldr	r3, [pc, #728]	@ (8006c7c <ESP_Upkeep+0x758>)
 80069a4:	2202      	movs	r2, #2
 80069a6:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80069a8:	4bb7      	ldr	r3, [pc, #732]	@ (8006c88 <ESP_Upkeep+0x764>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80069ae:	4bb1      	ldr	r3, [pc, #708]	@ (8006c74 <ESP_Upkeep+0x750>)
 80069b0:	2204      	movs	r2, #4
 80069b2:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 80069b4:	4bb5      	ldr	r3, [pc, #724]	@ (8006c8c <ESP_Upkeep+0x768>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	4bb3      	ldr	r3, [pc, #716]	@ (8006c8c <ESP_Upkeep+0x768>)
 80069be:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 80069c0:	4bb2      	ldr	r3, [pc, #712]	@ (8006c8c <ESP_Upkeep+0x768>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d91e      	bls.n	8006a06 <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80069c8:	f00b fb50 	bl	801206c <HAL_GetTick>
 80069cc:	0003      	movs	r3, r0
 80069ce:	4ab0      	ldr	r2, [pc, #704]	@ (8006c90 <ESP_Upkeep+0x76c>)
 80069d0:	189a      	adds	r2, r3, r2
 80069d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006c78 <ESP_Upkeep+0x754>)
 80069d4:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80069d6:	4baf      	ldr	r3, [pc, #700]	@ (8006c94 <ESP_Upkeep+0x770>)
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80069dc:	f7ff fa58 	bl	8005e90 <clearDMABuffer>
            stop = HAL_GetTick();
 80069e0:	f00b fb44 	bl	801206c <HAL_GetTick>
 80069e4:	0002      	movs	r2, r0
 80069e6:	4bac      	ldr	r3, [pc, #688]	@ (8006c98 <ESP_Upkeep+0x774>)
 80069e8:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80069ea:	4bab      	ldr	r3, [pc, #684]	@ (8006c98 <ESP_Upkeep+0x774>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4bab      	ldr	r3, [pc, #684]	@ (8006c9c <ESP_Upkeep+0x778>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	4aaa      	ldr	r2, [pc, #680]	@ (8006ca0 <ESP_Upkeep+0x77c>)
 80069f6:	49ab      	ldr	r1, [pc, #684]	@ (8006ca4 <ESP_Upkeep+0x780>)
 80069f8:	2001      	movs	r0, #1
 80069fa:	f00a feeb 	bl	80117d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80069fe:	4b9d      	ldr	r3, [pc, #628]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006a00:	220d      	movs	r2, #13
 8006a02:	701a      	strb	r2, [r3, #0]
            break;
 8006a04:	e214      	b.n	8006e30 <ESP_Upkeep+0x90c>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006a06:	4b9e      	ldr	r3, [pc, #632]	@ (8006c80 <ESP_Upkeep+0x75c>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d106      	bne.n	8006a1c <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a0e:	f00b fb2d 	bl	801206c <HAL_GetTick>
 8006a12:	0003      	movs	r3, r0
 8006a14:	330a      	adds	r3, #10
 8006a16:	001a      	movs	r2, r3
 8006a18:	4b97      	ldr	r3, [pc, #604]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006a1a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8006a1c:	4b98      	ldr	r3, [pc, #608]	@ (8006c80 <ESP_Upkeep+0x75c>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b0a      	cmp	r3, #10
 8006a22:	d106      	bne.n	8006a32 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a24:	f00b fb22 	bl	801206c <HAL_GetTick>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	330a      	adds	r3, #10
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	4b92      	ldr	r3, [pc, #584]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006a30:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8006a32:	4b93      	ldr	r3, [pc, #588]	@ (8006c80 <ESP_Upkeep+0x75c>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d14b      	bne.n	8006ad2 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8006a3a:	4b9b      	ldr	r3, [pc, #620]	@ (8006ca8 <ESP_Upkeep+0x784>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	4b99      	ldr	r3, [pc, #612]	@ (8006ca8 <ESP_Upkeep+0x784>)
 8006a44:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8006a46:	4a99      	ldr	r2, [pc, #612]	@ (8006cac <ESP_Upkeep+0x788>)
 8006a48:	4b96      	ldr	r3, [pc, #600]	@ (8006ca4 <ESP_Upkeep+0x780>)
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f00a fec1 	bl	80117d4 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8006a52:	4b95      	ldr	r3, [pc, #596]	@ (8006ca8 <ESP_Upkeep+0x784>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d924      	bls.n	8006aa4 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8006a5a:	f00b fb07 	bl	801206c <HAL_GetTick>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	4a93      	ldr	r2, [pc, #588]	@ (8006cb0 <ESP_Upkeep+0x78c>)
 8006a62:	189a      	adds	r2, r3, r2
 8006a64:	4b84      	ldr	r3, [pc, #528]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006a66:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8006a68:	4b8a      	ldr	r3, [pc, #552]	@ (8006c94 <ESP_Upkeep+0x770>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8006a6e:	f7ff fa0f 	bl	8005e90 <clearDMABuffer>
            stop = HAL_GetTick();
 8006a72:	f00b fafb 	bl	801206c <HAL_GetTick>
 8006a76:	0002      	movs	r2, r0
 8006a78:	4b87      	ldr	r3, [pc, #540]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006a7a:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8006a7c:	4b86      	ldr	r3, [pc, #536]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4b86      	ldr	r3, [pc, #536]	@ (8006c9c <ESP_Upkeep+0x778>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	4a8b      	ldr	r2, [pc, #556]	@ (8006cb4 <ESP_Upkeep+0x790>)
 8006a88:	4986      	ldr	r1, [pc, #536]	@ (8006ca4 <ESP_Upkeep+0x780>)
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f00a fea2 	bl	80117d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006a90:	4b78      	ldr	r3, [pc, #480]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006a92:	220d      	movs	r2, #13
 8006a94:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8006a96:	4b7b      	ldr	r3, [pc, #492]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006a98:	2214      	movs	r2, #20
 8006a9a:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8006a9c:	4b77      	ldr	r3, [pc, #476]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	701a      	strb	r2, [r3, #0]
            break;
 8006aa2:	e1c5      	b.n	8006e30 <ESP_Upkeep+0x90c>
          }
          if(ATCommand != AT_SENDDATA){
 8006aa4:	4b77      	ldr	r3, [pc, #476]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b0f      	cmp	r3, #15
 8006aaa:	d003      	beq.n	8006ab4 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8006aac:	4b71      	ldr	r3, [pc, #452]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006aae:	2204      	movs	r2, #4
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e00e      	b.n	8006ad2 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8006ab4:	4b73      	ldr	r3, [pc, #460]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006ab6:	220e      	movs	r2, #14
 8006ab8:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8006aba:	4b73      	ldr	r3, [pc, #460]	@ (8006c88 <ESP_Upkeep+0x764>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	4b71      	ldr	r3, [pc, #452]	@ (8006c88 <ESP_Upkeep+0x764>)
 8006ac4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8006ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006ac8:	2202      	movs	r2, #2
 8006aca:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8006acc:	4b69      	ldr	r3, [pc, #420]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006ace:	2204      	movs	r2, #4
 8006ad0:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8006ad2:	1d7b      	adds	r3, r7, #5
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d100      	bne.n	8006adc <ESP_Upkeep+0x5b8>
 8006ada:	e1a4      	b.n	8006e26 <ESP_Upkeep+0x902>
          EspState = ESP_STATE_NEXT_AT;
 8006adc:	4b65      	ldr	r3, [pc, #404]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006ade:	2205      	movs	r2, #5
 8006ae0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006ae2:	e1a0      	b.n	8006e26 <ESP_Upkeep+0x902>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8006ae4:	4b68      	ldr	r3, [pc, #416]	@ (8006c88 <ESP_Upkeep+0x764>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	4b66      	ldr	r3, [pc, #408]	@ (8006c88 <ESP_Upkeep+0x764>)
 8006aee:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8006af0:	4b65      	ldr	r3, [pc, #404]	@ (8006c88 <ESP_Upkeep+0x764>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	001a      	movs	r2, r3
 8006af6:	4b70      	ldr	r3, [pc, #448]	@ (8006cb8 <ESP_Upkeep+0x794>)
 8006af8:	5c9a      	ldrb	r2, [r3, r2]
 8006afa:	4b62      	ldr	r3, [pc, #392]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006afc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8006afe:	4b61      	ldr	r3, [pc, #388]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d102      	bne.n	8006b0c <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8006b06:	4b5d      	ldr	r3, [pc, #372]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8006b0c:	4b5d      	ldr	r3, [pc, #372]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b0e      	cmp	r3, #14
 8006b12:	d102      	bne.n	8006b1a <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8006b14:	4b59      	ldr	r3, [pc, #356]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006b16:	2202      	movs	r2, #2
 8006b18:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8006b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b0e      	cmp	r3, #14
 8006b20:	d006      	beq.n	8006b30 <ESP_Upkeep+0x60c>
 8006b22:	4b58      	ldr	r3, [pc, #352]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d002      	beq.n	8006b30 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006b2a:	4b54      	ldr	r3, [pc, #336]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8006b30:	4b54      	ldr	r3, [pc, #336]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b11      	cmp	r3, #17
 8006b36:	d102      	bne.n	8006b3e <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8006b38:	4b50      	ldr	r3, [pc, #320]	@ (8006c7c <ESP_Upkeep+0x758>)
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8006b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006b40:	2204      	movs	r2, #4
 8006b42:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8006b44:	4b4f      	ldr	r3, [pc, #316]	@ (8006c84 <ESP_Upkeep+0x760>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b14      	cmp	r3, #20
 8006b4a:	d000      	beq.n	8006b4e <ESP_Upkeep+0x62a>
 8006b4c:	e16d      	b.n	8006e2a <ESP_Upkeep+0x906>
        if(Mode == AT_MODE_SEND){
 8006b4e:	4b48      	ldr	r3, [pc, #288]	@ (8006c70 <ESP_Upkeep+0x74c>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d124      	bne.n	8006ba0 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8006b56:	f00b fa89 	bl	801206c <HAL_GetTick>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8006c90 <ESP_Upkeep+0x76c>)
 8006b5e:	189a      	adds	r2, r3, r2
 8006b60:	4b45      	ldr	r3, [pc, #276]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006b62:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8006b64:	f7ff f994 	bl	8005e90 <clearDMABuffer>
          stop = HAL_GetTick();
 8006b68:	f00b fa80 	bl	801206c <HAL_GetTick>
 8006b6c:	0002      	movs	r2, r0
 8006b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006b70:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8006b72:	4b49      	ldr	r3, [pc, #292]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b49      	ldr	r3, [pc, #292]	@ (8006c9c <ESP_Upkeep+0x778>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8006cbc <ESP_Upkeep+0x798>)
 8006b7e:	4950      	ldr	r1, [pc, #320]	@ (8006cc0 <ESP_Upkeep+0x79c>)
 8006b80:	2002      	movs	r0, #2
 8006b82:	f00a fe27 	bl	80117d4 <CreateLine>
          ResetdBAmax();
 8006b86:	f004 ffdf 	bl	800bb48 <ResetdBAmax>
          resetMaxMeasurementValues();
 8006b8a:	f7fd fd9f 	bl	80046cc <resetMaxMeasurementValues>
          showTime();
 8006b8e:	f001 f96f 	bl	8007e70 <showTime>
          ESPTransmitDone = true;
 8006b92:	4b40      	ldr	r3, [pc, #256]	@ (8006c94 <ESP_Upkeep+0x770>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8006b98:	4b36      	ldr	r3, [pc, #216]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006b9a:	220d      	movs	r2, #13
 8006b9c:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8006b9e:	e144      	b.n	8006e2a <ESP_Upkeep+0x906>
        else if (Mode == AT_MODE_GETTIME) {
 8006ba0:	4b33      	ldr	r3, [pc, #204]	@ (8006c70 <ESP_Upkeep+0x74c>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d12f      	bne.n	8006c08 <ESP_Upkeep+0x6e4>
            setTime = false;
 8006ba8:	4b46      	ldr	r3, [pc, #280]	@ (8006cc4 <ESP_Upkeep+0x7a0>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8006bae:	f001 f9b1 	bl	8007f14 <calculateNextNTPTime>
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	4b44      	ldr	r3, [pc, #272]	@ (8006cc8 <ESP_Upkeep+0x7a4>)
 8006bb6:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8006bb8:	4b43      	ldr	r3, [pc, #268]	@ (8006cc8 <ESP_Upkeep+0x7a4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a43      	ldr	r2, [pc, #268]	@ (8006ccc <ESP_Upkeep+0x7a8>)
 8006bbe:	189a      	adds	r2, r3, r2
 8006bc0:	4b41      	ldr	r3, [pc, #260]	@ (8006cc8 <ESP_Upkeep+0x7a4>)
 8006bc2:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8006bc4:	4b41      	ldr	r3, [pc, #260]	@ (8006ccc <ESP_Upkeep+0x7a8>)
 8006bc6:	4a42      	ldr	r2, [pc, #264]	@ (8006cd0 <ESP_Upkeep+0x7ac>)
 8006bc8:	493d      	ldr	r1, [pc, #244]	@ (8006cc0 <ESP_Upkeep+0x79c>)
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f00a fe02 	bl	80117d4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8006bd0:	4b40      	ldr	r3, [pc, #256]	@ (8006cd4 <ESP_Upkeep+0x7b0>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b28      	ldr	r3, [pc, #160]	@ (8006c78 <ESP_Upkeep+0x754>)
 8006bd6:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8006bd8:	f7ff f95a 	bl	8005e90 <clearDMABuffer>
            stop = HAL_GetTick();
 8006bdc:	f00b fa46 	bl	801206c <HAL_GetTick>
 8006be0:	0002      	movs	r2, r0
 8006be2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006be4:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8006be6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c98 <ESP_Upkeep+0x774>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b2c      	ldr	r3, [pc, #176]	@ (8006c9c <ESP_Upkeep+0x778>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	4a39      	ldr	r2, [pc, #228]	@ (8006cd8 <ESP_Upkeep+0x7b4>)
 8006bf2:	4933      	ldr	r1, [pc, #204]	@ (8006cc0 <ESP_Upkeep+0x79c>)
 8006bf4:	2002      	movs	r0, #2
 8006bf6:	f00a fded 	bl	80117d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006bfc:	220d      	movs	r2, #13
 8006bfe:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8006c00:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <ESP_Upkeep+0x74c>)
 8006c02:	2202      	movs	r2, #2
 8006c04:	701a      	strb	r2, [r3, #0]
    break;
 8006c06:	e110      	b.n	8006e2a <ESP_Upkeep+0x906>
          EspState = ESP_STATE_RESET;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006c0a:	2209      	movs	r2, #9
 8006c0c:	701a      	strb	r2, [r3, #0]
    break;
 8006c0e:	e10c      	b.n	8006e2a <ESP_Upkeep+0x906>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8006c10:	4b32      	ldr	r3, [pc, #200]	@ (8006cdc <ESP_Upkeep+0x7b8>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006c16:	4b32      	ldr	r3, [pc, #200]	@ (8006ce0 <ESP_Upkeep+0x7bc>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f00c fcb6 	bl	801358e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c22:	2001      	movs	r0, #1
 8006c24:	f00b fa2c 	bl	8012080 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	482d      	ldr	r0, [pc, #180]	@ (8006ce4 <ESP_Upkeep+0x7c0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	0019      	movs	r1, r3
 8006c32:	f00c fcac 	bl	801358e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c36:	2001      	movs	r0, #1
 8006c38:	f00b fa22 	bl	8012080 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006c3c:	4b28      	ldr	r3, [pc, #160]	@ (8006ce0 <ESP_Upkeep+0x7bc>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2102      	movs	r1, #2
 8006c42:	0018      	movs	r0, r3
 8006c44:	f00c fca3 	bl	801358e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <ESP_Upkeep+0x750>)
 8006c4a:	2209      	movs	r2, #9
 8006c4c:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8006c4e:	f004 febb 	bl	800b9c8 <EnabledConnectedDevices>
      HAL_Delay(1);
 8006c52:	2001      	movs	r0, #1
 8006c54:	f00b fa14 	bl	8012080 <HAL_Delay>
      ResetESPIndicator();
 8006c58:	f009 fcb6 	bl	80105c8 <ResetESPIndicator>
      errorcntr = 0;
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c8c <ESP_Upkeep+0x768>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8006c62:	4b11      	ldr	r3, [pc, #68]	@ (8006ca8 <ESP_Upkeep+0x784>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
      break;
 8006c68:	e0e2      	b.n	8006e30 <ESP_Upkeep+0x90c>
 8006c6a:	46c0      	nop			@ (mov r8, r8)
 8006c6c:	200005b7 	.word	0x200005b7
 8006c70:	2000068b 	.word	0x2000068b
 8006c74:	2000002c 	.word	0x2000002c
 8006c78:	20000680 	.word	0x20000680
 8006c7c:	20000689 	.word	0x20000689
 8006c80:	2000002f 	.word	0x2000002f
 8006c84:	2000068a 	.word	0x2000068a
 8006c88:	2000067a 	.word	0x2000067a
 8006c8c:	2000067b 	.word	0x2000067b
 8006c90:	0003a980 	.word	0x0003a980
 8006c94:	200005bc 	.word	0x200005bc
 8006c98:	200005d0 	.word	0x200005d0
 8006c9c:	200005cc 	.word	0x200005cc
 8006ca0:	080287bc 	.word	0x080287bc
 8006ca4:	08027b78 	.word	0x08027b78
 8006ca8:	2000067c 	.word	0x2000067c
 8006cac:	080287f0 	.word	0x080287f0
 8006cb0:	0000c350 	.word	0x0000c350
 8006cb4:	0802882c 	.word	0x0802882c
 8006cb8:	20000670 	.word	0x20000670
 8006cbc:	0802885c 	.word	0x0802885c
 8006cc0:	08028874 	.word	0x08028874
 8006cc4:	20000002 	.word	0x20000002
 8006cc8:	20000684 	.word	0x20000684
 8006ccc:	00012686 	.word	0x00012686
 8006cd0:	08028878 	.word	0x08028878
 8006cd4:	20000028 	.word	0x20000028
 8006cd8:	080288bc 	.word	0x080288bc
 8006cdc:	200005b4 	.word	0x200005b4
 8006ce0:	50001c00 	.word	0x50001c00
 8006ce4:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8006ce8:	4b54      	ldr	r3, [pc, #336]	@ (8006e3c <ESP_Upkeep+0x918>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f00a fd1b 	bl	8011728 <TimestampIsReached>
 8006cf2:	1e03      	subs	r3, r0, #0
 8006cf4:	d103      	bne.n	8006cfe <ESP_Upkeep+0x7da>
 8006cf6:	4b52      	ldr	r3, [pc, #328]	@ (8006e40 <ESP_Upkeep+0x91c>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d043      	beq.n	8006d86 <ESP_Upkeep+0x862>
        ESPTransmitDone = false;
 8006cfe:	4b51      	ldr	r3, [pc, #324]	@ (8006e44 <ESP_Upkeep+0x920>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8006d04:	4b50      	ldr	r3, [pc, #320]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <ESP_Upkeep+0x7f4>
          InitIsDone = true;
 8006d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e4c <ESP_Upkeep+0x928>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d12:	4b4f      	ldr	r3, [pc, #316]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d14:	220b      	movs	r2, #11
 8006d16:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8006d18:	4b4b      	ldr	r3, [pc, #300]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d108      	bne.n	8006d32 <ESP_Upkeep+0x80e>
          ConnectionMade = true;
 8006d20:	4b4c      	ldr	r3, [pc, #304]	@ (8006e54 <ESP_Upkeep+0x930>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8006d26:	4b4c      	ldr	r3, [pc, #304]	@ (8006e58 <ESP_Upkeep+0x934>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d2c:	4b48      	ldr	r3, [pc, #288]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d2e:	220b      	movs	r2, #11
 8006d30:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8006d32:	4b45      	ldr	r3, [pc, #276]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d102      	bne.n	8006d40 <ESP_Upkeep+0x81c>
          EspState = ESP_STATE_INIT;
 8006d3a:	4b45      	ldr	r3, [pc, #276]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8006d40:	4b41      	ldr	r3, [pc, #260]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d108      	bne.n	8006d5a <ESP_Upkeep+0x836>
          EspState = ESP_STATE_CONFIG;
 8006d48:	4b41      	ldr	r3, [pc, #260]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d4a:	220e      	movs	r2, #14
 8006d4c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8006d4e:	4a43      	ldr	r2, [pc, #268]	@ (8006e5c <ESP_Upkeep+0x938>)
 8006d50:	4b43      	ldr	r3, [pc, #268]	@ (8006e60 <ESP_Upkeep+0x93c>)
 8006d52:	0019      	movs	r1, r3
 8006d54:	2002      	movs	r0, #2
 8006d56:	f00a fd3d 	bl	80117d4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8006d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d105      	bne.n	8006d6e <ESP_Upkeep+0x84a>
          EspState = ESP_STATE_MODE_SELECT;
 8006d62:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d64:	220b      	movs	r2, #11
 8006d66:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8006d68:	4b3e      	ldr	r3, [pc, #248]	@ (8006e64 <ESP_Upkeep+0x940>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006d6e:	4b34      	ldr	r3, [pc, #208]	@ (8006e40 <ESP_Upkeep+0x91c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d020      	beq.n	8006db8 <ESP_Upkeep+0x894>
 8006d76:	4b34      	ldr	r3, [pc, #208]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d01c      	beq.n	8006db8 <ESP_Upkeep+0x894>
          EspState = ESP_STATE_INIT;
 8006d7e:	4b34      	ldr	r3, [pc, #208]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006d80:	2202      	movs	r2, #2
 8006d82:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006d84:	e018      	b.n	8006db8 <ESP_Upkeep+0x894>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8006d86:	f001 f8c5 	bl	8007f14 <calculateNextNTPTime>
 8006d8a:	0002      	movs	r2, r0
 8006d8c:	4b36      	ldr	r3, [pc, #216]	@ (8006e68 <ESP_Upkeep+0x944>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d94c      	bls.n	8006e2e <ESP_Upkeep+0x90a>
        if(Mode == AT_MODE_SEND ) {
 8006d94:	4b2c      	ldr	r3, [pc, #176]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d148      	bne.n	8006e2e <ESP_Upkeep+0x90a>
           Mode = AT_MODE_GETTIME;
 8006d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e48 <ESP_Upkeep+0x924>)
 8006d9e:	2205      	movs	r2, #5
 8006da0:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8006da2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006da4:	2202      	movs	r2, #2
 8006da6:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006da8:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <ESP_Upkeep+0x918>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b2f      	ldr	r3, [pc, #188]	@ (8006e6c <ESP_Upkeep+0x948>)
 8006dae:	601a      	str	r2, [r3, #0]
           setTime = true;
 8006db0:	4b2f      	ldr	r3, [pc, #188]	@ (8006e70 <ESP_Upkeep+0x94c>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006db6:	e03a      	b.n	8006e2e <ESP_Upkeep+0x90a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006db8:	46c0      	nop			@ (mov r8, r8)
      break;
 8006dba:	e038      	b.n	8006e2e <ESP_Upkeep+0x90a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e74 <ESP_Upkeep+0x950>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4053      	eors	r3, r2
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <ESP_Upkeep+0x8b8>
        Info("Do nothing until reset");
 8006dca:	4a24      	ldr	r2, [pc, #144]	@ (8006e5c <ESP_Upkeep+0x938>)
 8006dcc:	4b24      	ldr	r3, [pc, #144]	@ (8006e60 <ESP_Upkeep+0x93c>)
 8006dce:	0019      	movs	r1, r3
 8006dd0:	2002      	movs	r0, #2
 8006dd2:	f00a fcff 	bl	80117d4 <CreateLine>
        msgdone = true;
 8006dd6:	4b27      	ldr	r3, [pc, #156]	@ (8006e74 <ESP_Upkeep+0x950>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8006ddc:	f019 fc1e 	bl	802061c <GetUsbRxPointer>
 8006de0:	0003      	movs	r3, r0
 8006de2:	0018      	movs	r0, r3
 8006de4:	f000 f97e 	bl	80070e4 <Process_PC_Config>
      break;
 8006de8:	e022      	b.n	8006e30 <ESP_Upkeep+0x90c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8006dea:	4a23      	ldr	r2, [pc, #140]	@ (8006e78 <ESP_Upkeep+0x954>)
 8006dec:	4b23      	ldr	r3, [pc, #140]	@ (8006e7c <ESP_Upkeep+0x958>)
 8006dee:	0019      	movs	r1, r3
 8006df0:	2001      	movs	r0, #1
 8006df2:	f00a fcef 	bl	80117d4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8006df6:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006df8:	2202      	movs	r2, #2
 8006dfa:	701a      	strb	r2, [r3, #0]
      break;
 8006dfc:	e018      	b.n	8006e30 <ESP_Upkeep+0x90c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8006dfe:	4a20      	ldr	r2, [pc, #128]	@ (8006e80 <ESP_Upkeep+0x95c>)
 8006e00:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <ESP_Upkeep+0x958>)
 8006e02:	0019      	movs	r1, r3
 8006e04:	2001      	movs	r0, #1
 8006e06:	f00a fce5 	bl	80117d4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8006e0a:	4b11      	ldr	r3, [pc, #68]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	701a      	strb	r2, [r3, #0]
      break;
 8006e10:	e00e      	b.n	8006e30 <ESP_Upkeep+0x90c>
      break;
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	e00c      	b.n	8006e30 <ESP_Upkeep+0x90c>
      break;
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	e00a      	b.n	8006e30 <ESP_Upkeep+0x90c>
        break;
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	e008      	b.n	8006e30 <ESP_Upkeep+0x90c>
    break;
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	e006      	b.n	8006e30 <ESP_Upkeep+0x90c>
    break;
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	e004      	b.n	8006e30 <ESP_Upkeep+0x90c>
      break;
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	e002      	b.n	8006e30 <ESP_Upkeep+0x90c>
    break;
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	e000      	b.n	8006e30 <ESP_Upkeep+0x90c>
      break;
 8006e2e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <ESP_Upkeep+0x92c>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b002      	add	sp, #8
 8006e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3c:	20000680 	.word	0x20000680
 8006e40:	200005b7 	.word	0x200005b7
 8006e44:	200005bc 	.word	0x200005bc
 8006e48:	2000068b 	.word	0x2000068b
 8006e4c:	200005b5 	.word	0x200005b5
 8006e50:	2000002c 	.word	0x2000002c
 8006e54:	200005b8 	.word	0x200005b8
 8006e58:	200005ba 	.word	0x200005ba
 8006e5c:	080288dc 	.word	0x080288dc
 8006e60:	08028874 	.word	0x08028874
 8006e64:	200005b9 	.word	0x200005b9
 8006e68:	20000684 	.word	0x20000684
 8006e6c:	20000028 	.word	0x20000028
 8006e70:	20000002 	.word	0x20000002
 8006e74:	200005bb 	.word	0x200005bb
 8006e78:	080288f4 	.word	0x080288f4
 8006e7c:	08027b78 	.word	0x08027b78
 8006e80:	08028908 	.word	0x08028908

08006e84 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006e8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ed8 <I2CSensors_Init+0x54>)
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8006e92:	4a12      	ldr	r2, [pc, #72]	@ (8006edc <I2CSensors_Init+0x58>)
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <I2CSensors_Init+0x5c>)
 8006e96:	0011      	movs	r1, r2
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f00a fdff 	bl	8011a9c <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8006e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8006edc <I2CSensors_Init+0x58>)
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <I2CSensors_Init+0x5c>)
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f007 fd67 	bl	800e978 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8006eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee4 <I2CSensors_Init+0x60>)
 8006eac:	490b      	ldr	r1, [pc, #44]	@ (8006edc <I2CSensors_Init+0x58>)
 8006eae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <I2CSensors_Init+0x5c>)
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f001 ff6b 	bl	8008d8c <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee8 <I2CSensors_Init+0x64>)
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <I2CSensors_Init+0x68>)
 8006eba:	0011      	movs	r1, r2
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f002 fd21 	bl	8009904 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8006ec2:	4a09      	ldr	r2, [pc, #36]	@ (8006ee8 <I2CSensors_Init+0x64>)
 8006ec4:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <I2CSensors_Init+0x68>)
 8006ec6:	0011      	movs	r1, r2
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7fc fc21 	bl	8003710 <ENS_Init>
}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b002      	add	sp, #8
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	200007e8 	.word	0x200007e8
 8006edc:	08006f9d 	.word	0x08006f9d
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006ef1 	.word	0x08006ef1
 8006ee8:	0800706d 	.word	0x0800706d
 8006eec:	08006ff1 	.word	0x08006ff1

08006ef0 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	6039      	str	r1, [r7, #0]
 8006ef8:	0011      	movs	r1, r2
 8006efa:	1dfb      	adds	r3, r7, #7
 8006efc:	1c02      	adds	r2, r0, #0
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	1dbb      	adds	r3, r7, #6
 8006f02:	1c0a      	adds	r2, r1, #0
 8006f04:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8006f06:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <ReadI2CDirect+0x54>)
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	1dfb      	adds	r3, r7, #7
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	18db      	adds	r3, r3, r3
 8006f12:	b299      	uxth	r1, r3
 8006f14:	1dbb      	adds	r3, r7, #6
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	260f      	movs	r6, #15
 8006f1c:	19bc      	adds	r4, r7, r6
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	25fa      	movs	r5, #250	@ 0xfa
 8006f22:	9500      	str	r5, [sp, #0]
 8006f24:	f00c fd0a 	bl	801393c <HAL_I2C_Master_Receive>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006f2c:	19bb      	adds	r3, r7, r6
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <ReadI2CDirect+0x48>
        return false;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e000      	b.n	8006f3a <ReadI2CDirect+0x4a>
    }
    return true;
 8006f38:	2301      	movs	r3, #1
}
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	b005      	add	sp, #20
 8006f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	200007e8 	.word	0x200007e8

08006f48 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f48:	b5b0      	push	{r4, r5, r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6039      	str	r1, [r7, #0]
 8006f50:	0011      	movs	r1, r2
 8006f52:	1dfb      	adds	r3, r7, #7
 8006f54:	1c02      	adds	r2, r0, #0
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	1dbb      	adds	r3, r7, #6
 8006f5a:	1c0a      	adds	r2, r1, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f98 <ReadI2C+0x50>)
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	1dfb      	adds	r3, r7, #7
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	18db      	adds	r3, r3, r3
 8006f6a:	b299      	uxth	r1, r3
 8006f6c:	1dbb      	adds	r3, r7, #6
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	250f      	movs	r5, #15
 8006f74:	197c      	adds	r4, r7, r5
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	f00c feee 	bl	8013d58 <HAL_I2C_Master_Receive_DMA>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006f80:	197b      	adds	r3, r7, r5
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <ReadI2C+0x44>
        return false;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e000      	b.n	8006f8e <ReadI2C+0x46>
    }
    return true;
 8006f8c:	2301      	movs	r3, #1
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b004      	add	sp, #16
 8006f94:	bdb0      	pop	{r4, r5, r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	200007e8 	.word	0x200007e8

08006f9c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f9c:	b5b0      	push	{r4, r5, r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6039      	str	r1, [r7, #0]
 8006fa4:	0011      	movs	r1, r2
 8006fa6:	1dfb      	adds	r3, r7, #7
 8006fa8:	1c02      	adds	r2, r0, #0
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	1c0a      	adds	r2, r1, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006fec <WriteI2C+0x50>)
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	1dfb      	adds	r3, r7, #7
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	18db      	adds	r3, r3, r3
 8006fbe:	b299      	uxth	r1, r3
 8006fc0:	1dbb      	adds	r3, r7, #6
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	250f      	movs	r5, #15
 8006fc8:	197c      	adds	r4, r7, r5
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	f00c fdbe 	bl	8013b4c <HAL_I2C_Master_Transmit_DMA>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006fd4:	197b      	adds	r3, r7, r5
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <WriteI2C+0x44>
        return false;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <WriteI2C+0x46>
    }
    return true;
 8006fe0:	2301      	movs	r3, #1
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8006fea:	46c0      	nop			@ (mov r8, r8)
 8006fec:	200007e8 	.word	0x200007e8

08006ff0 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	b08b      	sub	sp, #44	@ 0x2c
 8006ff4:	af04      	add	r7, sp, #16
 8006ff6:	0004      	movs	r4, r0
 8006ff8:	0008      	movs	r0, r1
 8006ffa:	0011      	movs	r1, r2
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	250f      	movs	r5, #15
 8007000:	197b      	adds	r3, r7, r5
 8007002:	1c22      	adds	r2, r4, #0
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	260c      	movs	r6, #12
 8007008:	19bb      	adds	r3, r7, r6
 800700a:	1c02      	adds	r2, r0, #0
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	230a      	movs	r3, #10
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	1c0a      	adds	r2, r1, #0
 8007014:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007016:	4b14      	ldr	r3, [pc, #80]	@ (8007068 <ReadI2CMem+0x78>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	197b      	adds	r3, r7, r5
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	18db      	adds	r3, r3, r3
 8007022:	b299      	uxth	r1, r3
 8007024:	2217      	movs	r2, #23
 8007026:	18bc      	adds	r4, r7, r2
 8007028:	230a      	movs	r3, #10
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	881d      	ldrh	r5, [r3, #0]
 800702e:	19bb      	adds	r3, r7, r6
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	2364      	movs	r3, #100	@ 0x64
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	2328      	movs	r3, #40	@ 0x28
 8007038:	2608      	movs	r6, #8
 800703a:	199b      	adds	r3, r3, r6
 800703c:	19db      	adds	r3, r3, r7
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	002b      	movs	r3, r5
 8007048:	f00c ff8c 	bl	8013f64 <HAL_I2C_Mem_Read>
 800704c:	0003      	movs	r3, r0
 800704e:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007050:	2217      	movs	r2, #23
 8007052:	18bb      	adds	r3, r7, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <ReadI2CMem+0x6e>
     return false;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <ReadI2CMem+0x70>
   }
   return true;
 800705e:	2301      	movs	r3, #1
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b007      	add	sp, #28
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007068:	200007e8 	.word	0x200007e8

0800706c <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800706c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af02      	add	r7, sp, #8
 8007072:	0004      	movs	r4, r0
 8007074:	0008      	movs	r0, r1
 8007076:	0011      	movs	r1, r2
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	250f      	movs	r5, #15
 800707c:	197b      	adds	r3, r7, r5
 800707e:	1c22      	adds	r2, r4, #0
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	260c      	movs	r6, #12
 8007084:	19bb      	adds	r3, r7, r6
 8007086:	1c02      	adds	r2, r0, #0
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	230a      	movs	r3, #10
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	1c0a      	adds	r2, r1, #0
 8007090:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007092:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <WriteI2CMem+0x74>)
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	197b      	adds	r3, r7, r5
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	18db      	adds	r3, r3, r3
 800709e:	b299      	uxth	r1, r3
 80070a0:	2217      	movs	r2, #23
 80070a2:	18bc      	adds	r4, r7, r2
 80070a4:	230a      	movs	r3, #10
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	881d      	ldrh	r5, [r3, #0]
 80070aa:	19bb      	adds	r3, r7, r6
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	2328      	movs	r3, #40	@ 0x28
 80070b0:	2608      	movs	r6, #8
 80070b2:	199b      	adds	r3, r3, r6
 80070b4:	19db      	adds	r3, r3, r7
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	002b      	movs	r3, r5
 80070c0:	f00d f884 	bl	80141cc <HAL_I2C_Mem_Write_DMA>
 80070c4:	0003      	movs	r3, r0
 80070c6:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80070c8:	2217      	movs	r2, #23
 80070ca:	18bb      	adds	r3, r7, r2
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <WriteI2CMem+0x6a>
     return false;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <WriteI2CMem+0x6c>
   }
   return true;
 80070d6:	2301      	movs	r3, #1
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b007      	add	sp, #28
 80070de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e0:	200007e8 	.word	0x200007e8

080070e4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b0c3      	sub	sp, #268	@ 0x10c
 80070e8:	af3e      	add	r7, sp, #248	@ 0xf8
 80070ea:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80070ec:	f019 fab6 	bl	802065c <GetUsbRxDataSize>
 80070f0:	0003      	movs	r3, r0
 80070f2:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d971      	bls.n	80071de <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2123      	movs	r1, #35	@ 0x23
 80070fe:	0018      	movs	r0, r3
 8007100:	f01c fcce 	bl	8023aa0 <strchr>
 8007104:	0003      	movs	r3, r0
 8007106:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d065      	beq.n	80071da <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	785a      	ldrb	r2, [r3, #1]
 8007112:	4b34      	ldr	r3, [pc, #208]	@ (80071e4 <Process_PC_Config+0x100>)
 8007114:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	789a      	ldrb	r2, [r3, #2]
 800711a:	4b32      	ldr	r3, [pc, #200]	@ (80071e4 <Process_PC_Config+0x100>)
 800711c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800711e:	4b31      	ldr	r3, [pc, #196]	@ (80071e4 <Process_PC_Config+0x100>)
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	3305      	adds	r3, #5
 8007124:	001a      	movs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4293      	cmp	r3, r2
 800712a:	d351      	bcc.n	80071d0 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	1cd9      	adds	r1, r3, #3
 8007130:	4b2c      	ldr	r3, [pc, #176]	@ (80071e4 <Process_PC_Config+0x100>)
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	001a      	movs	r2, r3
 8007136:	4b2c      	ldr	r3, [pc, #176]	@ (80071e8 <Process_PC_Config+0x104>)
 8007138:	0018      	movs	r0, r3
 800713a:	f01c fd85 	bl	8023c48 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800713e:	4b29      	ldr	r3, [pc, #164]	@ (80071e4 <Process_PC_Config+0x100>)
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	3303      	adds	r3, #3
 8007144:	001a      	movs	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	189b      	adds	r3, r3, r2
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	b21a      	sxth	r2, r3
 8007150:	4b24      	ldr	r3, [pc, #144]	@ (80071e4 <Process_PC_Config+0x100>)
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	3304      	adds	r3, #4
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	18cb      	adds	r3, r1, r3
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b21b      	sxth	r3, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	b21b      	sxth	r3, r3
 8007162:	b299      	uxth	r1, r3
 8007164:	4a1f      	ldr	r2, [pc, #124]	@ (80071e4 <Process_PC_Config+0x100>)
 8007166:	2381      	movs	r3, #129	@ 0x81
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800716c:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <Process_PC_Config+0x100>)
 800716e:	2381      	movs	r3, #129	@ 0x81
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	5ad4      	ldrh	r4, [r2, r3]
 8007174:	4b1b      	ldr	r3, [pc, #108]	@ (80071e4 <Process_PC_Config+0x100>)
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	3303      	adds	r3, #3
 800717a:	b29a      	uxth	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	0011      	movs	r1, r2
 8007180:	0018      	movs	r0, r3
 8007182:	f000 f975 	bl	8007470 <CRC16_ARC>
 8007186:	0003      	movs	r3, r0
 8007188:	429c      	cmp	r4, r3
 800718a:	d007      	beq.n	800719c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 800718c:	4b15      	ldr	r3, [pc, #84]	@ (80071e4 <Process_PC_Config+0x100>)
 800718e:	785a      	ldrb	r2, [r3, #1]
 8007190:	4b15      	ldr	r3, [pc, #84]	@ (80071e8 <Process_PC_Config+0x104>)
 8007192:	0019      	movs	r1, r3
 8007194:	2001      	movs	r0, #1
 8007196:	f000 f919 	bl	80073cc <Create_Message>
 800719a:	e016      	b.n	80071ca <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 800719c:	4c11      	ldr	r4, [pc, #68]	@ (80071e4 <Process_PC_Config+0x100>)
 800719e:	466b      	mov	r3, sp
 80071a0:	0018      	movs	r0, r3
 80071a2:	0023      	movs	r3, r4
 80071a4:	3310      	adds	r3, #16
 80071a6:	22f4      	movs	r2, #244	@ 0xf4
 80071a8:	0019      	movs	r1, r3
 80071aa:	f01c fd4d 	bl	8023c48 <memcpy>
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	68a2      	ldr	r2, [r4, #8]
 80071b4:	68e3      	ldr	r3, [r4, #12]
 80071b6:	f000 f819 	bl	80071ec <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80071ba:	4b0a      	ldr	r3, [pc, #40]	@ (80071e4 <Process_PC_Config+0x100>)
 80071bc:	7818      	ldrb	r0, [r3, #0]
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <Process_PC_Config+0x100>)
 80071c0:	785a      	ldrb	r2, [r3, #1]
 80071c2:	4b09      	ldr	r3, [pc, #36]	@ (80071e8 <Process_PC_Config+0x104>)
 80071c4:	0019      	movs	r1, r3
 80071c6:	f000 f901 	bl	80073cc <Create_Message>
                }
                ResetUsbRxDataSize();
 80071ca:	f019 fa2f 	bl	802062c <ResetUsbRxDataSize>
                return;
 80071ce:	e006      	b.n	80071de <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	0018      	movs	r0, r3
 80071d4:	f019 fa4c 	bl	8020670 <GetUsbRxNextChunk>
 80071d8:	e001      	b.n	80071de <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80071da:	f019 fa27 	bl	802062c <ResetUsbRxDataSize>
        }
    }
}
 80071de:	46bd      	mov	sp, r7
 80071e0:	b005      	add	sp, #20
 80071e2:	bd90      	pop	{r4, r7, pc}
 80071e4:	200007ec 	.word	0x200007ec
 80071e8:	200007ee 	.word	0x200007ee

080071ec <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80071ec:	b084      	sub	sp, #16
 80071ee:	b5b0      	push	{r4, r5, r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	2518      	movs	r5, #24
 80071f6:	197c      	adds	r4, r7, r5
 80071f8:	6020      	str	r0, [r4, #0]
 80071fa:	6061      	str	r1, [r4, #4]
 80071fc:	60a2      	str	r2, [r4, #8]
 80071fe:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8007200:	197b      	adds	r3, r7, r5
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2bfe      	cmp	r3, #254	@ 0xfe
 8007206:	d100      	bne.n	800720a <ProcessCmd+0x1e>
 8007208:	e09c      	b.n	8007344 <ProcessCmd+0x158>
 800720a:	dd00      	ble.n	800720e <ProcessCmd+0x22>
 800720c:	e0bc      	b.n	8007388 <ProcessCmd+0x19c>
 800720e:	2b0c      	cmp	r3, #12
 8007210:	dc0a      	bgt.n	8007228 <ProcessCmd+0x3c>
 8007212:	2b00      	cmp	r3, #0
 8007214:	da00      	bge.n	8007218 <ProcessCmd+0x2c>
 8007216:	e0b7      	b.n	8007388 <ProcessCmd+0x19c>
 8007218:	2b0c      	cmp	r3, #12
 800721a:	d900      	bls.n	800721e <ProcessCmd+0x32>
 800721c:	e0b4      	b.n	8007388 <ProcessCmd+0x19c>
 800721e:	009a      	lsls	r2, r3, #2
 8007220:	4b5d      	ldr	r3, [pc, #372]	@ (8007398 <ProcessCmd+0x1ac>)
 8007222:	18d3      	adds	r3, r2, r3
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	469f      	mov	pc, r3
 8007228:	2bfd      	cmp	r3, #253	@ 0xfd
 800722a:	d100      	bne.n	800722e <ProcessCmd+0x42>
 800722c:	e084      	b.n	8007338 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 800722e:	e0ab      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007230:	2118      	movs	r1, #24
 8007232:	187b      	adds	r3, r7, r1
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	001a      	movs	r2, r3
 8007238:	187b      	adds	r3, r7, r1
 800723a:	1c99      	adds	r1, r3, #2
 800723c:	4857      	ldr	r0, [pc, #348]	@ (800739c <ProcessCmd+0x1b0>)
 800723e:	230c      	movs	r3, #12
 8007240:	f002 ff4e 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 8007244:	e0a0      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007246:	2118      	movs	r1, #24
 8007248:	187b      	adds	r3, r7, r1
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	001a      	movs	r2, r3
 800724e:	187b      	adds	r3, r7, r1
 8007250:	1c99      	adds	r1, r3, #2
 8007252:	4853      	ldr	r0, [pc, #332]	@ (80073a0 <ProcessCmd+0x1b4>)
 8007254:	230c      	movs	r3, #12
 8007256:	f002 ff43 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 800725a:	e095      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800725c:	2118      	movs	r1, #24
 800725e:	187b      	adds	r3, r7, r1
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	001a      	movs	r2, r3
 8007264:	187b      	adds	r3, r7, r1
 8007266:	1c99      	adds	r1, r3, #2
 8007268:	484e      	ldr	r0, [pc, #312]	@ (80073a4 <ProcessCmd+0x1b8>)
 800726a:	230c      	movs	r3, #12
 800726c:	f002 ff38 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 8007270:	e08a      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007272:	2118      	movs	r1, #24
 8007274:	187b      	adds	r3, r7, r1
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	001a      	movs	r2, r3
 800727a:	187b      	adds	r3, r7, r1
 800727c:	1c99      	adds	r1, r3, #2
 800727e:	484a      	ldr	r0, [pc, #296]	@ (80073a8 <ProcessCmd+0x1bc>)
 8007280:	230c      	movs	r3, #12
 8007282:	f002 ff2d 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 8007286:	e07f      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007288:	2118      	movs	r1, #24
 800728a:	187b      	adds	r3, r7, r1
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	001a      	movs	r2, r3
 8007290:	187b      	adds	r3, r7, r1
 8007292:	1c99      	adds	r1, r3, #2
 8007294:	4845      	ldr	r0, [pc, #276]	@ (80073ac <ProcessCmd+0x1c0>)
 8007296:	230c      	movs	r3, #12
 8007298:	f002 ff22 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 800729c:	e074      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800729e:	2118      	movs	r1, #24
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	001a      	movs	r2, r3
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	1c99      	adds	r1, r3, #2
 80072aa:	4841      	ldr	r0, [pc, #260]	@ (80073b0 <ProcessCmd+0x1c4>)
 80072ac:	230c      	movs	r3, #12
 80072ae:	f002 ff17 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 80072b2:	e069      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072b4:	2118      	movs	r1, #24
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	785b      	ldrb	r3, [r3, #1]
 80072ba:	001a      	movs	r2, r3
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	1c99      	adds	r1, r3, #2
 80072c0:	483c      	ldr	r0, [pc, #240]	@ (80073b4 <ProcessCmd+0x1c8>)
 80072c2:	230c      	movs	r3, #12
 80072c4:	f002 ff0c 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 80072c8:	e05e      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80072ca:	2118      	movs	r1, #24
 80072cc:	187b      	adds	r3, r7, r1
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	001a      	movs	r2, r3
 80072d2:	187b      	adds	r3, r7, r1
 80072d4:	1c99      	adds	r1, r3, #2
 80072d6:	4838      	ldr	r0, [pc, #224]	@ (80073b8 <ProcessCmd+0x1cc>)
 80072d8:	2320      	movs	r3, #32
 80072da:	f002 ff01 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 80072de:	e053      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072e0:	2118      	movs	r1, #24
 80072e2:	187b      	adds	r3, r7, r1
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	001a      	movs	r2, r3
 80072e8:	187b      	adds	r3, r7, r1
 80072ea:	1c99      	adds	r1, r3, #2
 80072ec:	4833      	ldr	r0, [pc, #204]	@ (80073bc <ProcessCmd+0x1d0>)
 80072ee:	230c      	movs	r3, #12
 80072f0:	f002 fef6 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 80072f4:	e048      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072f6:	2118      	movs	r1, #24
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	001a      	movs	r2, r3
 80072fe:	187b      	adds	r3, r7, r1
 8007300:	1c99      	adds	r1, r3, #2
 8007302:	482f      	ldr	r0, [pc, #188]	@ (80073c0 <ProcessCmd+0x1d4>)
 8007304:	230c      	movs	r3, #12
 8007306:	f002 feeb 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 800730a:	e03d      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800730c:	2118      	movs	r1, #24
 800730e:	187b      	adds	r3, r7, r1
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	001a      	movs	r2, r3
 8007314:	187b      	adds	r3, r7, r1
 8007316:	1c99      	adds	r1, r3, #2
 8007318:	482a      	ldr	r0, [pc, #168]	@ (80073c4 <ProcessCmd+0x1d8>)
 800731a:	230c      	movs	r3, #12
 800731c:	f002 fee0 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 8007320:	e032      	b.n	8007388 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007322:	2118      	movs	r1, #24
 8007324:	187b      	adds	r3, r7, r1
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	001a      	movs	r2, r3
 800732a:	187b      	adds	r3, r7, r1
 800732c:	1c99      	adds	r1, r3, #2
 800732e:	4826      	ldr	r0, [pc, #152]	@ (80073c8 <ProcessCmd+0x1dc>)
 8007330:	230c      	movs	r3, #12
 8007332:	f002 fed5 	bl	800a0e0 <WriteUint8ArrayEepromSafe>
        break;
 8007336:	e027      	b.n	8007388 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007338:	4b18      	ldr	r3, [pc, #96]	@ (800739c <ProcessCmd+0x1b0>)
 800733a:	21f8      	movs	r1, #248	@ 0xf8
 800733c:	0018      	movs	r0, r3
 800733e:	f002 ff14 	bl	800a16a <ClearEEprom>
        break;
 8007342:	e021      	b.n	8007388 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007344:	2118      	movs	r1, #24
 8007346:	187b      	adds	r3, r7, r1
 8007348:	789b      	ldrb	r3, [r3, #2]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	b21a      	sxth	r2, r3
 800734e:	187b      	adds	r3, r7, r1
 8007350:	78db      	ldrb	r3, [r3, #3]
 8007352:	b21b      	sxth	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b21a      	sxth	r2, r3
 8007358:	1dbb      	adds	r3, r7, #6
 800735a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800735c:	1dbb      	adds	r3, r7, #6
 800735e:	881a      	ldrh	r2, [r3, #0]
 8007360:	23c0      	movs	r3, #192	@ 0xc0
 8007362:	015b      	lsls	r3, r3, #5
 8007364:	429a      	cmp	r2, r3
 8007366:	d207      	bcs.n	8007378 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8007368:	1dbb      	adds	r3, r7, #6
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	4a0b      	ldr	r2, [pc, #44]	@ (800739c <ProcessCmd+0x1b0>)
 800736e:	0019      	movs	r1, r3
 8007370:	0010      	movs	r0, r2
 8007372:	f002 fefa 	bl	800a16a <ClearEEprom>
            break;
 8007376:	e006      	b.n	8007386 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8007378:	23c0      	movs	r3, #192	@ 0xc0
 800737a:	015b      	lsls	r3, r3, #5
 800737c:	4a07      	ldr	r2, [pc, #28]	@ (800739c <ProcessCmd+0x1b0>)
 800737e:	0019      	movs	r1, r3
 8007380:	0010      	movs	r0, r2
 8007382:	f002 fef2 	bl	800a16a <ClearEEprom>
            break;
 8007386:	46c0      	nop			@ (mov r8, r8)
}
 8007388:	46c0      	nop			@ (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b002      	add	sp, #8
 800738e:	bcb0      	pop	{r4, r5, r7}
 8007390:	bc08      	pop	{r3}
 8007392:	b004      	add	sp, #16
 8007394:	4718      	bx	r3
 8007396:	46c0      	nop			@ (mov r8, r8)
 8007398:	0802af14 	.word	0x0802af14
 800739c:	08080000 	.word	0x08080000
 80073a0:	0808000c 	.word	0x0808000c
 80073a4:	08080018 	.word	0x08080018
 80073a8:	08080024 	.word	0x08080024
 80073ac:	08080030 	.word	0x08080030
 80073b0:	0808003c 	.word	0x0808003c
 80073b4:	08080048 	.word	0x08080048
 80073b8:	08080090 	.word	0x08080090
 80073bc:	08080078 	.word	0x08080078
 80073c0:	0808006c 	.word	0x0808006c
 80073c4:	08080060 	.word	0x08080060
 80073c8:	08080054 	.word	0x08080054

080073cc <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80073cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6039      	str	r1, [r7, #0]
 80073d4:	0011      	movs	r1, r2
 80073d6:	1dfb      	adds	r3, r7, #7
 80073d8:	1c02      	adds	r2, r0, #0
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	1dbb      	adds	r3, r7, #6
 80073de:	1c0a      	adds	r2, r1, #0
 80073e0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80073e2:	2223      	movs	r2, #35	@ 0x23
 80073e4:	4b20      	ldr	r3, [pc, #128]	@ (8007468 <Create_Message+0x9c>)
 80073e6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80073e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007468 <Create_Message+0x9c>)
 80073ea:	1dfa      	adds	r2, r7, #7
 80073ec:	7812      	ldrb	r2, [r2, #0]
 80073ee:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80073f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <Create_Message+0x9c>)
 80073f2:	1dba      	adds	r2, r7, #6
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80073f8:	1dbb      	adds	r3, r7, #6
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	4b1b      	ldr	r3, [pc, #108]	@ (800746c <Create_Message+0xa0>)
 8007400:	0018      	movs	r0, r3
 8007402:	f01c fc21 	bl	8023c48 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8007406:	1dbb      	adds	r3, r7, #6
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b29a      	uxth	r2, r3
 800740c:	250e      	movs	r5, #14
 800740e:	197b      	adds	r3, r7, r5
 8007410:	3203      	adds	r2, #3
 8007412:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8007414:	260c      	movs	r6, #12
 8007416:	19bc      	adds	r4, r7, r6
 8007418:	197b      	adds	r3, r7, r5
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <Create_Message+0x9c>)
 800741e:	0011      	movs	r1, r2
 8007420:	0018      	movs	r0, r3
 8007422:	f000 f825 	bl	8007470 <CRC16_ARC>
 8007426:	0003      	movs	r3, r0
 8007428:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800742a:	0030      	movs	r0, r6
 800742c:	183b      	adds	r3, r7, r0
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	0a1b      	lsrs	r3, r3, #8
 8007432:	b29a      	uxth	r2, r3
 8007434:	197b      	adds	r3, r7, r5
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b2d1      	uxtb	r1, r2
 800743a:	4a0b      	ldr	r2, [pc, #44]	@ (8007468 <Create_Message+0x9c>)
 800743c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800743e:	197b      	adds	r3, r7, r5
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	183a      	adds	r2, r7, r0
 8007446:	8812      	ldrh	r2, [r2, #0]
 8007448:	b2d1      	uxtb	r1, r2
 800744a:	4a07      	ldr	r2, [pc, #28]	@ (8007468 <Create_Message+0x9c>)
 800744c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800744e:	197b      	adds	r3, r7, r5
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	3302      	adds	r3, #2
 8007454:	b29a      	uxth	r2, r3
 8007456:	4b04      	ldr	r3, [pc, #16]	@ (8007468 <Create_Message+0x9c>)
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f019 f8a4 	bl	80205a8 <CDC_Transmit_FS>
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b005      	add	sp, #20
 8007466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007468:	200008f8 	.word	0x200008f8
 800746c:	200008fb 	.word	0x200008fb

08007470 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	000a      	movs	r2, r1
 800747a:	1cbb      	adds	r3, r7, #2
 800747c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800747e:	2316      	movs	r3, #22
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2200      	movs	r2, #0
 8007484:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e02e      	b.n	80074ea <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	18d3      	adds	r3, r2, r3
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	0019      	movs	r1, r3
 8007496:	2216      	movs	r2, #22
 8007498:	18bb      	adds	r3, r7, r2
 800749a:	18ba      	adds	r2, r7, r2
 800749c:	8812      	ldrh	r2, [r2, #0]
 800749e:	404a      	eors	r2, r1
 80074a0:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e01a      	b.n	80074de <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80074a8:	2116      	movs	r1, #22
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	2201      	movs	r2, #1
 80074b0:	4013      	ands	r3, r2
 80074b2:	d00b      	beq.n	80074cc <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80074b4:	187b      	adds	r3, r7, r1
 80074b6:	187a      	adds	r2, r7, r1
 80074b8:	8812      	ldrh	r2, [r2, #0]
 80074ba:	0852      	lsrs	r2, r2, #1
 80074bc:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80074be:	187b      	adds	r3, r7, r1
 80074c0:	187a      	adds	r2, r7, r1
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	490f      	ldr	r1, [pc, #60]	@ (8007504 <CRC16_ARC+0x94>)
 80074c6:	404a      	eors	r2, r1
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	e005      	b.n	80074d8 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80074cc:	2216      	movs	r2, #22
 80074ce:	18bb      	adds	r3, r7, r2
 80074d0:	18ba      	adds	r2, r7, r2
 80074d2:	8812      	ldrh	r2, [r2, #0]
 80074d4:	0852      	lsrs	r2, r2, #1
 80074d6:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b07      	cmp	r3, #7
 80074e2:	dde1      	ble.n	80074a8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	3301      	adds	r3, #1
 80074e8:	613b      	str	r3, [r7, #16]
 80074ea:	1cbb      	adds	r3, r7, #2
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	dbcb      	blt.n	800748c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80074f4:	2316      	movs	r3, #22
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	881b      	ldrh	r3, [r3, #0]
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b006      	add	sp, #24
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			@ (mov r8, r8)
 8007504:	ffffa001 	.word	0xffffa001

08007508 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8007508:	b40f      	push	{r0, r1, r2, r3}
 800750a:	b590      	push	{r4, r7, lr}
 800750c:	b0a9      	sub	sp, #164	@ 0xa4
 800750e:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8007510:	23ac      	movs	r3, #172	@ 0xac
 8007512:	2108      	movs	r1, #8
 8007514:	185b      	adds	r3, r3, r1
 8007516:	19db      	adds	r3, r3, r7
 8007518:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	23a8      	movs	r3, #168	@ 0xa8
 800751e:	185b      	adds	r3, r3, r1
 8007520:	19db      	adds	r3, r3, r7
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	2408      	movs	r4, #8
 8007526:	193b      	adds	r3, r7, r4
 8007528:	0018      	movs	r0, r3
 800752a:	f01c fa05 	bl	8023938 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800752e:	193b      	adds	r3, r7, r4
 8007530:	0018      	movs	r0, r3
 8007532:	f7f8 fe1b 	bl	800016c <strlen>
 8007536:	0003      	movs	r3, r0
 8007538:	b29a      	uxth	r2, r3
 800753a:	193b      	adds	r3, r7, r4
 800753c:	0011      	movs	r1, r2
 800753e:	0018      	movs	r0, r3
 8007540:	f019 f832 	bl	80205a8 <CDC_Transmit_FS>
}
 8007544:	46c0      	nop			@ (mov r8, r8)
 8007546:	46bd      	mov	sp, r7
 8007548:	b029      	add	sp, #164	@ 0xa4
 800754a:	bc90      	pop	{r4, r7}
 800754c:	bc08      	pop	{r3}
 800754e:	b004      	add	sp, #16
 8007550:	4718      	bx	r3

08007552 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	000a      	movs	r2, r1
 800755c:	1cfb      	adds	r3, r7, #3
 800755e:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8007560:	1cfb      	adds	r3, r7, #3
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <PC_selectout+0x1e>
    printf_USB(msg);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	0018      	movs	r0, r3
 800756c:	f7ff ffcc 	bl	8007508 <printf_USB>
  }
//  else {
    printf(msg);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	0018      	movs	r0, r3
 8007574:	f01c f8b6 	bl	80236e4 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8007578:	200a      	movs	r0, #10
 800757a:	f00a fd81 	bl	8012080 <HAL_Delay>
}
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	46bd      	mov	sp, r7
 8007582:	b002      	add	sp, #8
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <PC_show_Keys>:

void PC_show_Keys() {
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 800758c:	f000 fc40 	bl	8007e10 <Check_USB_PowerOn>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d003      	beq.n	800759c <PC_show_Keys+0x14>
    usb_out = true;
 8007594:	4bcc      	ldr	r3, [pc, #816]	@ (80078c8 <PC_show_Keys+0x340>)
 8007596:	2201      	movs	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e002      	b.n	80075a2 <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 800759c:	4bca      	ldr	r3, [pc, #808]	@ (80078c8 <PC_show_Keys+0x340>)
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80075a2:	4aca      	ldr	r2, [pc, #808]	@ (80078cc <PC_show_Keys+0x344>)
 80075a4:	4bca      	ldr	r3, [pc, #808]	@ (80078d0 <PC_show_Keys+0x348>)
 80075a6:	0011      	movs	r1, r2
 80075a8:	0018      	movs	r0, r3
 80075aa:	f01c f90b 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80075ae:	4bc6      	ldr	r3, [pc, #792]	@ (80078c8 <PC_show_Keys+0x340>)
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	4bc7      	ldr	r3, [pc, #796]	@ (80078d0 <PC_show_Keys+0x348>)
 80075b4:	0011      	movs	r1, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f7ff ffcb 	bl	8007552 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80075bc:	4bc5      	ldr	r3, [pc, #788]	@ (80078d4 <PC_show_Keys+0x34c>)
 80075be:	48c6      	ldr	r0, [pc, #792]	@ (80078d8 <PC_show_Keys+0x350>)
 80075c0:	220c      	movs	r2, #12
 80075c2:	0019      	movs	r1, r3
 80075c4:	f002 fda8 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80075c8:	4ac2      	ldr	r2, [pc, #776]	@ (80078d4 <PC_show_Keys+0x34c>)
 80075ca:	4bc4      	ldr	r3, [pc, #784]	@ (80078dc <PC_show_Keys+0x354>)
 80075cc:	0011      	movs	r1, r2
 80075ce:	0018      	movs	r0, r3
 80075d0:	f7fd fa84 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80075d4:	4ac1      	ldr	r2, [pc, #772]	@ (80078dc <PC_show_Keys+0x354>)
 80075d6:	49c2      	ldr	r1, [pc, #776]	@ (80078e0 <PC_show_Keys+0x358>)
 80075d8:	4bbd      	ldr	r3, [pc, #756]	@ (80078d0 <PC_show_Keys+0x348>)
 80075da:	0018      	movs	r0, r3
 80075dc:	f01c f8f2 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80075e0:	4bb9      	ldr	r3, [pc, #740]	@ (80078c8 <PC_show_Keys+0x340>)
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	4bba      	ldr	r3, [pc, #744]	@ (80078d0 <PC_show_Keys+0x348>)
 80075e6:	0011      	movs	r1, r2
 80075e8:	0018      	movs	r0, r3
 80075ea:	f7ff ffb2 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80075ee:	4bbd      	ldr	r3, [pc, #756]	@ (80078e4 <PC_show_Keys+0x35c>)
 80075f0:	48bd      	ldr	r0, [pc, #756]	@ (80078e8 <PC_show_Keys+0x360>)
 80075f2:	220c      	movs	r2, #12
 80075f4:	0019      	movs	r1, r3
 80075f6:	f002 fd8f 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 80075fa:	4aba      	ldr	r2, [pc, #744]	@ (80078e4 <PC_show_Keys+0x35c>)
 80075fc:	4bb7      	ldr	r3, [pc, #732]	@ (80078dc <PC_show_Keys+0x354>)
 80075fe:	0011      	movs	r1, r2
 8007600:	0018      	movs	r0, r3
 8007602:	f7fd fa6b 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 8007606:	4ab5      	ldr	r2, [pc, #724]	@ (80078dc <PC_show_Keys+0x354>)
 8007608:	49b8      	ldr	r1, [pc, #736]	@ (80078ec <PC_show_Keys+0x364>)
 800760a:	4bb1      	ldr	r3, [pc, #708]	@ (80078d0 <PC_show_Keys+0x348>)
 800760c:	0018      	movs	r0, r3
 800760e:	f01c f8d9 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007612:	4bad      	ldr	r3, [pc, #692]	@ (80078c8 <PC_show_Keys+0x340>)
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	4bae      	ldr	r3, [pc, #696]	@ (80078d0 <PC_show_Keys+0x348>)
 8007618:	0011      	movs	r1, r2
 800761a:	0018      	movs	r0, r3
 800761c:	f7ff ff99 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8007620:	4bb3      	ldr	r3, [pc, #716]	@ (80078f0 <PC_show_Keys+0x368>)
 8007622:	48b4      	ldr	r0, [pc, #720]	@ (80078f4 <PC_show_Keys+0x36c>)
 8007624:	220c      	movs	r2, #12
 8007626:	0019      	movs	r1, r3
 8007628:	f002 fd76 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 800762c:	4ab0      	ldr	r2, [pc, #704]	@ (80078f0 <PC_show_Keys+0x368>)
 800762e:	4bab      	ldr	r3, [pc, #684]	@ (80078dc <PC_show_Keys+0x354>)
 8007630:	0011      	movs	r1, r2
 8007632:	0018      	movs	r0, r3
 8007634:	f7fd fa52 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8007638:	4aa8      	ldr	r2, [pc, #672]	@ (80078dc <PC_show_Keys+0x354>)
 800763a:	49af      	ldr	r1, [pc, #700]	@ (80078f8 <PC_show_Keys+0x370>)
 800763c:	4ba4      	ldr	r3, [pc, #656]	@ (80078d0 <PC_show_Keys+0x348>)
 800763e:	0018      	movs	r0, r3
 8007640:	f01c f8c0 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007644:	4ba0      	ldr	r3, [pc, #640]	@ (80078c8 <PC_show_Keys+0x340>)
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	4ba1      	ldr	r3, [pc, #644]	@ (80078d0 <PC_show_Keys+0x348>)
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f7ff ff80 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8007652:	4baa      	ldr	r3, [pc, #680]	@ (80078fc <PC_show_Keys+0x374>)
 8007654:	48aa      	ldr	r0, [pc, #680]	@ (8007900 <PC_show_Keys+0x378>)
 8007656:	220c      	movs	r2, #12
 8007658:	0019      	movs	r1, r3
 800765a:	f002 fd5d 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 800765e:	4aa7      	ldr	r2, [pc, #668]	@ (80078fc <PC_show_Keys+0x374>)
 8007660:	4b9e      	ldr	r3, [pc, #632]	@ (80078dc <PC_show_Keys+0x354>)
 8007662:	0011      	movs	r1, r2
 8007664:	0018      	movs	r0, r3
 8007666:	f7fd fa39 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 800766a:	4a9c      	ldr	r2, [pc, #624]	@ (80078dc <PC_show_Keys+0x354>)
 800766c:	49a5      	ldr	r1, [pc, #660]	@ (8007904 <PC_show_Keys+0x37c>)
 800766e:	4b98      	ldr	r3, [pc, #608]	@ (80078d0 <PC_show_Keys+0x348>)
 8007670:	0018      	movs	r0, r3
 8007672:	f01c f8a7 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007676:	4b94      	ldr	r3, [pc, #592]	@ (80078c8 <PC_show_Keys+0x340>)
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	4b95      	ldr	r3, [pc, #596]	@ (80078d0 <PC_show_Keys+0x348>)
 800767c:	0011      	movs	r1, r2
 800767e:	0018      	movs	r0, r3
 8007680:	f7ff ff67 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8007684:	4ba0      	ldr	r3, [pc, #640]	@ (8007908 <PC_show_Keys+0x380>)
 8007686:	48a1      	ldr	r0, [pc, #644]	@ (800790c <PC_show_Keys+0x384>)
 8007688:	220c      	movs	r2, #12
 800768a:	0019      	movs	r1, r3
 800768c:	f002 fd44 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8007690:	4a9d      	ldr	r2, [pc, #628]	@ (8007908 <PC_show_Keys+0x380>)
 8007692:	4b92      	ldr	r3, [pc, #584]	@ (80078dc <PC_show_Keys+0x354>)
 8007694:	0011      	movs	r1, r2
 8007696:	0018      	movs	r0, r3
 8007698:	f7fd fa20 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 800769c:	4a8f      	ldr	r2, [pc, #572]	@ (80078dc <PC_show_Keys+0x354>)
 800769e:	499c      	ldr	r1, [pc, #624]	@ (8007910 <PC_show_Keys+0x388>)
 80076a0:	4b8b      	ldr	r3, [pc, #556]	@ (80078d0 <PC_show_Keys+0x348>)
 80076a2:	0018      	movs	r0, r3
 80076a4:	f01c f88e 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076a8:	4b87      	ldr	r3, [pc, #540]	@ (80078c8 <PC_show_Keys+0x340>)
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	4b88      	ldr	r3, [pc, #544]	@ (80078d0 <PC_show_Keys+0x348>)
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7ff ff4e 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 80076b6:	4b97      	ldr	r3, [pc, #604]	@ (8007914 <PC_show_Keys+0x38c>)
 80076b8:	4897      	ldr	r0, [pc, #604]	@ (8007918 <PC_show_Keys+0x390>)
 80076ba:	220c      	movs	r2, #12
 80076bc:	0019      	movs	r1, r3
 80076be:	f002 fd2b 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80076c2:	4a94      	ldr	r2, [pc, #592]	@ (8007914 <PC_show_Keys+0x38c>)
 80076c4:	4b85      	ldr	r3, [pc, #532]	@ (80078dc <PC_show_Keys+0x354>)
 80076c6:	0011      	movs	r1, r2
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7fd fa07 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80076ce:	4a93      	ldr	r2, [pc, #588]	@ (800791c <PC_show_Keys+0x394>)
 80076d0:	4b7f      	ldr	r3, [pc, #508]	@ (80078d0 <PC_show_Keys+0x348>)
 80076d2:	0011      	movs	r1, r2
 80076d4:	0018      	movs	r0, r3
 80076d6:	f01c f875 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076da:	4b7b      	ldr	r3, [pc, #492]	@ (80078c8 <PC_show_Keys+0x340>)
 80076dc:	781a      	ldrb	r2, [r3, #0]
 80076de:	4b7c      	ldr	r3, [pc, #496]	@ (80078d0 <PC_show_Keys+0x348>)
 80076e0:	0011      	movs	r1, r2
 80076e2:	0018      	movs	r0, r3
 80076e4:	f7ff ff35 	bl	8007552 <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 80076e8:	4a7c      	ldr	r2, [pc, #496]	@ (80078dc <PC_show_Keys+0x354>)
 80076ea:	498d      	ldr	r1, [pc, #564]	@ (8007920 <PC_show_Keys+0x398>)
 80076ec:	4b78      	ldr	r3, [pc, #480]	@ (80078d0 <PC_show_Keys+0x348>)
 80076ee:	0018      	movs	r0, r3
 80076f0:	f01c f868 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076f4:	4b74      	ldr	r3, [pc, #464]	@ (80078c8 <PC_show_Keys+0x340>)
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	4b75      	ldr	r3, [pc, #468]	@ (80078d0 <PC_show_Keys+0x348>)
 80076fa:	0011      	movs	r1, r2
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7ff ff28 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8007702:	4b84      	ldr	r3, [pc, #528]	@ (8007914 <PC_show_Keys+0x38c>)
 8007704:	4887      	ldr	r0, [pc, #540]	@ (8007924 <PC_show_Keys+0x39c>)
 8007706:	220c      	movs	r2, #12
 8007708:	0019      	movs	r1, r3
 800770a:	f002 fd05 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800770e:	4a81      	ldr	r2, [pc, #516]	@ (8007914 <PC_show_Keys+0x38c>)
 8007710:	4b72      	ldr	r3, [pc, #456]	@ (80078dc <PC_show_Keys+0x354>)
 8007712:	0011      	movs	r1, r2
 8007714:	0018      	movs	r0, r3
 8007716:	f7fd f9e1 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 800771a:	4a83      	ldr	r2, [pc, #524]	@ (8007928 <PC_show_Keys+0x3a0>)
 800771c:	4b6c      	ldr	r3, [pc, #432]	@ (80078d0 <PC_show_Keys+0x348>)
 800771e:	0011      	movs	r1, r2
 8007720:	0018      	movs	r0, r3
 8007722:	f01c f84f 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007726:	4b68      	ldr	r3, [pc, #416]	@ (80078c8 <PC_show_Keys+0x340>)
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	4b69      	ldr	r3, [pc, #420]	@ (80078d0 <PC_show_Keys+0x348>)
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f7ff ff0f 	bl	8007552 <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8007734:	4a69      	ldr	r2, [pc, #420]	@ (80078dc <PC_show_Keys+0x354>)
 8007736:	497d      	ldr	r1, [pc, #500]	@ (800792c <PC_show_Keys+0x3a4>)
 8007738:	4b65      	ldr	r3, [pc, #404]	@ (80078d0 <PC_show_Keys+0x348>)
 800773a:	0018      	movs	r0, r3
 800773c:	f01c f842 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007740:	4b61      	ldr	r3, [pc, #388]	@ (80078c8 <PC_show_Keys+0x340>)
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	4b62      	ldr	r3, [pc, #392]	@ (80078d0 <PC_show_Keys+0x348>)
 8007746:	0011      	movs	r1, r2
 8007748:	0018      	movs	r0, r3
 800774a:	f7ff ff02 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800774e:	4b78      	ldr	r3, [pc, #480]	@ (8007930 <PC_show_Keys+0x3a8>)
 8007750:	4878      	ldr	r0, [pc, #480]	@ (8007934 <PC_show_Keys+0x3ac>)
 8007752:	2220      	movs	r2, #32
 8007754:	0019      	movs	r1, r3
 8007756:	f002 fcdf 	bl	800a118 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 800775a:	4a77      	ldr	r2, [pc, #476]	@ (8007938 <PC_show_Keys+0x3b0>)
 800775c:	4b5c      	ldr	r3, [pc, #368]	@ (80078d0 <PC_show_Keys+0x348>)
 800775e:	0011      	movs	r1, r2
 8007760:	0018      	movs	r0, r3
 8007762:	f01c f82f 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007766:	4b58      	ldr	r3, [pc, #352]	@ (80078c8 <PC_show_Keys+0x340>)
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	4b59      	ldr	r3, [pc, #356]	@ (80078d0 <PC_show_Keys+0x348>)
 800776c:	0011      	movs	r1, r2
 800776e:	0018      	movs	r0, r3
 8007770:	f7ff feef 	bl	8007552 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 8007774:	4a6e      	ldr	r2, [pc, #440]	@ (8007930 <PC_show_Keys+0x3a8>)
 8007776:	4971      	ldr	r1, [pc, #452]	@ (800793c <PC_show_Keys+0x3b4>)
 8007778:	4b55      	ldr	r3, [pc, #340]	@ (80078d0 <PC_show_Keys+0x348>)
 800777a:	0018      	movs	r0, r3
 800777c:	f01c f822 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007780:	4b51      	ldr	r3, [pc, #324]	@ (80078c8 <PC_show_Keys+0x340>)
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	4b52      	ldr	r3, [pc, #328]	@ (80078d0 <PC_show_Keys+0x348>)
 8007786:	0011      	movs	r1, r2
 8007788:	0018      	movs	r0, r3
 800778a:	f7ff fee2 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 800778e:	4b6c      	ldr	r3, [pc, #432]	@ (8007940 <PC_show_Keys+0x3b8>)
 8007790:	486c      	ldr	r0, [pc, #432]	@ (8007944 <PC_show_Keys+0x3bc>)
 8007792:	220c      	movs	r2, #12
 8007794:	0019      	movs	r1, r3
 8007796:	f002 fcbf 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 800779a:	4a69      	ldr	r2, [pc, #420]	@ (8007940 <PC_show_Keys+0x3b8>)
 800779c:	4b4f      	ldr	r3, [pc, #316]	@ (80078dc <PC_show_Keys+0x354>)
 800779e:	0011      	movs	r1, r2
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7fd f99b 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80077a6:	4a4d      	ldr	r2, [pc, #308]	@ (80078dc <PC_show_Keys+0x354>)
 80077a8:	4967      	ldr	r1, [pc, #412]	@ (8007948 <PC_show_Keys+0x3c0>)
 80077aa:	4b49      	ldr	r3, [pc, #292]	@ (80078d0 <PC_show_Keys+0x348>)
 80077ac:	0018      	movs	r0, r3
 80077ae:	f01c f809 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077b2:	4b45      	ldr	r3, [pc, #276]	@ (80078c8 <PC_show_Keys+0x340>)
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	4b46      	ldr	r3, [pc, #280]	@ (80078d0 <PC_show_Keys+0x348>)
 80077b8:	0011      	movs	r1, r2
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7ff fec9 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80077c0:	4b62      	ldr	r3, [pc, #392]	@ (800794c <PC_show_Keys+0x3c4>)
 80077c2:	4863      	ldr	r0, [pc, #396]	@ (8007950 <PC_show_Keys+0x3c8>)
 80077c4:	220c      	movs	r2, #12
 80077c6:	0019      	movs	r1, r3
 80077c8:	f002 fca6 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80077cc:	4a5f      	ldr	r2, [pc, #380]	@ (800794c <PC_show_Keys+0x3c4>)
 80077ce:	4b43      	ldr	r3, [pc, #268]	@ (80078dc <PC_show_Keys+0x354>)
 80077d0:	0011      	movs	r1, r2
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7fd f982 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80077d8:	4a40      	ldr	r2, [pc, #256]	@ (80078dc <PC_show_Keys+0x354>)
 80077da:	495e      	ldr	r1, [pc, #376]	@ (8007954 <PC_show_Keys+0x3cc>)
 80077dc:	4b3c      	ldr	r3, [pc, #240]	@ (80078d0 <PC_show_Keys+0x348>)
 80077de:	0018      	movs	r0, r3
 80077e0:	f01b fff0 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077e4:	4b38      	ldr	r3, [pc, #224]	@ (80078c8 <PC_show_Keys+0x340>)
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	4b39      	ldr	r3, [pc, #228]	@ (80078d0 <PC_show_Keys+0x348>)
 80077ea:	0011      	movs	r1, r2
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7ff feb0 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80077f2:	4b59      	ldr	r3, [pc, #356]	@ (8007958 <PC_show_Keys+0x3d0>)
 80077f4:	4859      	ldr	r0, [pc, #356]	@ (800795c <PC_show_Keys+0x3d4>)
 80077f6:	220c      	movs	r2, #12
 80077f8:	0019      	movs	r1, r3
 80077fa:	f002 fc8d 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 80077fe:	4a56      	ldr	r2, [pc, #344]	@ (8007958 <PC_show_Keys+0x3d0>)
 8007800:	4b36      	ldr	r3, [pc, #216]	@ (80078dc <PC_show_Keys+0x354>)
 8007802:	0011      	movs	r1, r2
 8007804:	0018      	movs	r0, r3
 8007806:	f7fd f969 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 800780a:	4a34      	ldr	r2, [pc, #208]	@ (80078dc <PC_show_Keys+0x354>)
 800780c:	4954      	ldr	r1, [pc, #336]	@ (8007960 <PC_show_Keys+0x3d8>)
 800780e:	4b30      	ldr	r3, [pc, #192]	@ (80078d0 <PC_show_Keys+0x348>)
 8007810:	0018      	movs	r0, r3
 8007812:	f01b ffd7 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007816:	4b2c      	ldr	r3, [pc, #176]	@ (80078c8 <PC_show_Keys+0x340>)
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	4b2d      	ldr	r3, [pc, #180]	@ (80078d0 <PC_show_Keys+0x348>)
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f7ff fe97 	bl	8007552 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8007824:	4b4f      	ldr	r3, [pc, #316]	@ (8007964 <PC_show_Keys+0x3dc>)
 8007826:	4850      	ldr	r0, [pc, #320]	@ (8007968 <PC_show_Keys+0x3e0>)
 8007828:	220c      	movs	r2, #12
 800782a:	0019      	movs	r1, r3
 800782c:	f002 fc74 	bl	800a118 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8007830:	4a4c      	ldr	r2, [pc, #304]	@ (8007964 <PC_show_Keys+0x3dc>)
 8007832:	4b2a      	ldr	r3, [pc, #168]	@ (80078dc <PC_show_Keys+0x354>)
 8007834:	0011      	movs	r1, r2
 8007836:	0018      	movs	r0, r3
 8007838:	f7fd f950 	bl	8004adc <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 800783c:	4a27      	ldr	r2, [pc, #156]	@ (80078dc <PC_show_Keys+0x354>)
 800783e:	494b      	ldr	r1, [pc, #300]	@ (800796c <PC_show_Keys+0x3e4>)
 8007840:	4b23      	ldr	r3, [pc, #140]	@ (80078d0 <PC_show_Keys+0x348>)
 8007842:	0018      	movs	r0, r3
 8007844:	f01b ffbe 	bl	80237c4 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007848:	4b1f      	ldr	r3, [pc, #124]	@ (80078c8 <PC_show_Keys+0x340>)
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	4b20      	ldr	r3, [pc, #128]	@ (80078d0 <PC_show_Keys+0x348>)
 800784e:	0011      	movs	r1, r2
 8007850:	0018      	movs	r0, r3
 8007852:	f7ff fe7e 	bl	8007552 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 8007856:	4b46      	ldr	r3, [pc, #280]	@ (8007970 <PC_show_Keys+0x3e8>)
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff fe55 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 800785e:	200a      	movs	r0, #10
 8007860:	f00a fc0e 	bl	8012080 <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 8007864:	4b43      	ldr	r3, [pc, #268]	@ (8007974 <PC_show_Keys+0x3ec>)
 8007866:	0018      	movs	r0, r3
 8007868:	f7ff fe4e 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 800786c:	200a      	movs	r0, #10
 800786e:	f00a fc07 	bl	8012080 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8007872:	4b41      	ldr	r3, [pc, #260]	@ (8007978 <PC_show_Keys+0x3f0>)
 8007874:	0018      	movs	r0, r3
 8007876:	f7ff fe47 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 800787a:	200a      	movs	r0, #10
 800787c:	f00a fc00 	bl	8012080 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8007880:	4b3e      	ldr	r3, [pc, #248]	@ (800797c <PC_show_Keys+0x3f4>)
 8007882:	0018      	movs	r0, r3
 8007884:	f7ff fe40 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 8007888:	200a      	movs	r0, #10
 800788a:	f00a fbf9 	bl	8012080 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 800788e:	4b3c      	ldr	r3, [pc, #240]	@ (8007980 <PC_show_Keys+0x3f8>)
 8007890:	0018      	movs	r0, r3
 8007892:	f7ff fe39 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 8007896:	200a      	movs	r0, #10
 8007898:	f00a fbf2 	bl	8012080 <HAL_Delay>
  printf_USB(" $5,67af09374cdef30007b35055\r\n");
 800789c:	4b39      	ldr	r3, [pc, #228]	@ (8007984 <PC_show_Keys+0x3fc>)
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff fe32 	bl	8007508 <printf_USB>
  HAL_Delay(10);
 80078a4:	200a      	movs	r0, #10
 80078a6:	f00a fbeb 	bl	8012080 <HAL_Delay>
  if (!usb_out) {
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <PC_show_Keys+0x340>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2201      	movs	r2, #1
 80078b0:	4053      	eors	r3, r2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <PC_show_Keys+0x338>
    printf("A key can only be changed by USB input.\r\n");
 80078b8:	4b33      	ldr	r3, [pc, #204]	@ (8007988 <PC_show_Keys+0x400>)
 80078ba:	0018      	movs	r0, r3
 80078bc:	f01b ff78 	bl	80237b0 <puts>
  }
}
 80078c0:	46c0      	nop			@ (mov r8, r8)
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			@ (mov r8, r8)
 80078c8:	200009fd 	.word	0x200009fd
 80078cc:	08028938 	.word	0x08028938
 80078d0:	20000a00 	.word	0x20000a00
 80078d4:	20000a40 	.word	0x20000a40
 80078d8:	08080000 	.word	0x08080000
 80078dc:	20000a4c 	.word	0x20000a4c
 80078e0:	08028954 	.word	0x08028954
 80078e4:	20000a68 	.word	0x20000a68
 80078e8:	0808000c 	.word	0x0808000c
 80078ec:	08028978 	.word	0x08028978
 80078f0:	20000a74 	.word	0x20000a74
 80078f4:	08080018 	.word	0x08080018
 80078f8:	0802899c 	.word	0x0802899c
 80078fc:	20000a80 	.word	0x20000a80
 8007900:	08080024 	.word	0x08080024
 8007904:	080289c0 	.word	0x080289c0
 8007908:	20000a8c 	.word	0x20000a8c
 800790c:	08080030 	.word	0x08080030
 8007910:	080289e4 	.word	0x080289e4
 8007914:	20000a98 	.word	0x20000a98
 8007918:	0808003c 	.word	0x0808003c
 800791c:	08028a08 	.word	0x08028a08
 8007920:	08028a24 	.word	0x08028a24
 8007924:	08080048 	.word	0x08080048
 8007928:	08028a48 	.word	0x08028a48
 800792c:	08028a5c 	.word	0x08028a5c
 8007930:	20000aa4 	.word	0x20000aa4
 8007934:	08080090 	.word	0x08080090
 8007938:	08028a80 	.word	0x08028a80
 800793c:	08028aa0 	.word	0x08028aa0
 8007940:	20000ac4 	.word	0x20000ac4
 8007944:	08080078 	.word	0x08080078
 8007948:	08028aa8 	.word	0x08028aa8
 800794c:	20000ad0 	.word	0x20000ad0
 8007950:	0808006c 	.word	0x0808006c
 8007954:	08028acc 	.word	0x08028acc
 8007958:	20000adc 	.word	0x20000adc
 800795c:	08080060 	.word	0x08080060
 8007960:	08028af0 	.word	0x08028af0
 8007964:	20000ae8 	.word	0x20000ae8
 8007968:	08080054 	.word	0x08080054
 800796c:	08028b14 	.word	0x08028b14
 8007970:	08028b38 	.word	0x08028b38
 8007974:	08028b68 	.word	0x08028b68
 8007978:	08028b94 	.word	0x08028b94
 800797c:	08028bd0 	.word	0x08028bd0
 8007980:	08028c08 	.word	0x08028c08
 8007984:	08028c3c 	.word	0x08028c3c
 8007988:	08028c5c 	.word	0x08028c5c

0800798c <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b0c5      	sub	sp, #276	@ 0x114
 8007990:	af3e      	add	r7, sp, #248	@ 0xf8
 8007992:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 5;
  uint32_t length = GetUsbRxDataSize();
 8007994:	f018 fe62 	bl	802065c <GetUsbRxDataSize>
 8007998:	0003      	movs	r3, r0
 800799a:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2124      	movs	r1, #36	@ 0x24
 80079a0:	0018      	movs	r0, r3
 80079a2:	f01c f87d 	bl	8023aa0 <strchr>
 80079a6:	0003      	movs	r3, r0
 80079a8:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 27)){
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10f      	bne.n	80079d0 <Process_USB_input+0x44>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <Process_USB_input+0x44>
 80079b6:	4bab      	ldr	r3, [pc, #684]	@ (8007c64 <Process_USB_input+0x2d8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b1b      	cmp	r3, #27
 80079bc:	d008      	beq.n	80079d0 <Process_USB_input+0x44>
      Debug("Switching to input length of 27 for full opensensemap keylength");
 80079be:	4aaa      	ldr	r2, [pc, #680]	@ (8007c68 <Process_USB_input+0x2dc>)
 80079c0:	4baa      	ldr	r3, [pc, #680]	@ (8007c6c <Process_USB_input+0x2e0>)
 80079c2:	0019      	movs	r1, r3
 80079c4:	2003      	movs	r0, #3
 80079c6:	f009 ff05 	bl	80117d4 <CreateLine>
      len = 27;
 80079ca:	4ba6      	ldr	r3, [pc, #664]	@ (8007c64 <Process_USB_input+0x2d8>)
 80079cc:	221b      	movs	r2, #27
 80079ce:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 80079d0:	4ba4      	ldr	r3, [pc, #656]	@ (8007c64 <Process_USB_input+0x2d8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d800      	bhi.n	80079dc <Process_USB_input+0x50>
 80079da:	e12c      	b.n	8007c36 <Process_USB_input+0x2aa>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4ba4      	ldr	r3, [pc, #656]	@ (8007c70 <Process_USB_input+0x2e4>)
 80079e0:	0011      	movs	r1, r2
 80079e2:	0018      	movs	r0, r3
 80079e4:	f7ff fd90 	bl	8007508 <printf_USB>
    message = (unsigned char*)data;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b24      	cmp	r3, #36	@ 0x24
 80079f2:	d102      	bne.n	80079fa <Process_USB_input+0x6e>
      len = 27;
 80079f4:	4b9b      	ldr	r3, [pc, #620]	@ (8007c64 <Process_USB_input+0x2d8>)
 80079f6:	221b      	movs	r2, #27
 80079f8:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b23      	cmp	r3, #35	@ 0x23
 8007a00:	d004      	beq.n	8007a0c <Process_USB_input+0x80>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b24      	cmp	r3, #36	@ 0x24
 8007a08:	d000      	beq.n	8007a0c <Process_USB_input+0x80>
 8007a0a:	e0f7      	b.n	8007bfc <Process_USB_input+0x270>
      received.Command = (message[1] & 0x0F);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	220f      	movs	r2, #15
 8007a14:	4013      	ands	r3, r2
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	4b96      	ldr	r3, [pc, #600]	@ (8007c74 <Process_USB_input+0x2e8>)
 8007a1a:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b2c      	cmp	r3, #44	@ 0x2c
 8007a24:	d000      	beq.n	8007a28 <Process_USB_input+0x9c>
 8007a26:	e0e2      	b.n	8007bee <Process_USB_input+0x262>
        for (uint8_t i=3; i < len; i++) {
 8007a28:	2317      	movs	r3, #23
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e084      	b.n	8007b3c <Process_USB_input+0x1b0>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 8007a32:	200a      	movs	r0, #10
 8007a34:	f00a fb24 	bl	8012080 <HAL_Delay>
          if (isxdigit(message[i])) {
 8007a38:	2117      	movs	r1, #23
 8007a3a:	187b      	adds	r3, r7, r1
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	18d3      	adds	r3, r2, r3
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	4b8c      	ldr	r3, [pc, #560]	@ (8007c78 <Process_USB_input+0x2ec>)
 8007a48:	18d3      	adds	r3, r2, r3
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	2344      	movs	r3, #68	@ 0x44
 8007a50:	4013      	ands	r3, r2
 8007a52:	d05c      	beq.n	8007b0e <Process_USB_input+0x182>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8007a54:	4b89      	ldr	r3, [pc, #548]	@ (8007c7c <Process_USB_input+0x2f0>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	b25a      	sxtb	r2, r3
 8007a5c:	0008      	movs	r0, r1
 8007a5e:	187b      	adds	r3, r7, r1
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	18cb      	adds	r3, r1, r3
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	4b83      	ldr	r3, [pc, #524]	@ (8007c78 <Process_USB_input+0x2ec>)
 8007a6c:	18cb      	adds	r3, r1, r3
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	0019      	movs	r1, r3
 8007a72:	2304      	movs	r3, #4
 8007a74:	400b      	ands	r3, r1
 8007a76:	d008      	beq.n	8007a8a <Process_USB_input+0xfe>
 8007a78:	183b      	adds	r3, r7, r0
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	18cb      	adds	r3, r1, r3
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	3b30      	subs	r3, #48	@ 0x30
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	e01e      	b.n	8007ac8 <Process_USB_input+0x13c>
 8007a8a:	2317      	movs	r3, #23
 8007a8c:	18fb      	adds	r3, r7, r3
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	68f9      	ldr	r1, [r7, #12]
 8007a92:	18c9      	adds	r1, r1, r3
 8007a94:	200b      	movs	r0, #11
 8007a96:	183b      	adds	r3, r7, r0
 8007a98:	7809      	ldrb	r1, [r1, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	183b      	adds	r3, r7, r0
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	1c59      	adds	r1, r3, #1
 8007aa2:	4b75      	ldr	r3, [pc, #468]	@ (8007c78 <Process_USB_input+0x2ec>)
 8007aa4:	18cb      	adds	r3, r1, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	0019      	movs	r1, r3
 8007aaa:	2303      	movs	r3, #3
 8007aac:	400b      	ands	r3, r1
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d103      	bne.n	8007aba <Process_USB_input+0x12e>
 8007ab2:	183b      	adds	r3, r7, r0
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	3b20      	subs	r3, #32
 8007ab8:	e002      	b.n	8007ac0 <Process_USB_input+0x134>
 8007aba:	230b      	movs	r3, #11
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	3b37      	subs	r3, #55	@ 0x37
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	b25b      	sxtb	r3, r3
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	b25b      	sxtb	r3, r3
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	4b6b      	ldr	r3, [pc, #428]	@ (8007c7c <Process_USB_input+0x2f0>)
 8007ad0:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8007ad2:	200a      	movs	r0, #10
 8007ad4:	f00a fad4 	bl	8012080 <HAL_Delay>
            if (len == 27) {
 8007ad8:	4b62      	ldr	r3, [pc, #392]	@ (8007c64 <Process_USB_input+0x2d8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b1b      	cmp	r3, #27
 8007ade:	d127      	bne.n	8007b30 <Process_USB_input+0x1a4>
              if ((i % 2) == 0) {
 8007ae0:	2317      	movs	r3, #23
 8007ae2:	18fb      	adds	r3, r7, r3
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4013      	ands	r3, r2
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11f      	bne.n	8007b30 <Process_USB_input+0x1a4>
                message[r] = result;
 8007af0:	4b63      	ldr	r3, [pc, #396]	@ (8007c80 <Process_USB_input+0x2f4>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	001a      	movs	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	189b      	adds	r3, r3, r2
 8007afa:	4a60      	ldr	r2, [pc, #384]	@ (8007c7c <Process_USB_input+0x2f0>)
 8007afc:	7812      	ldrb	r2, [r2, #0]
 8007afe:	701a      	strb	r2, [r3, #0]
                r++;
 8007b00:	4b5f      	ldr	r3, [pc, #380]	@ (8007c80 <Process_USB_input+0x2f4>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b5d      	ldr	r3, [pc, #372]	@ (8007c80 <Process_USB_input+0x2f4>)
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e010      	b.n	8007b30 <Process_USB_input+0x1a4>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8007b0e:	2017      	movs	r0, #23
 8007b10:	183b      	adds	r3, r7, r0
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	18d3      	adds	r3, r2, r3
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	183b      	adds	r3, r7, r0
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	4b58      	ldr	r3, [pc, #352]	@ (8007c84 <Process_USB_input+0x2f8>)
 8007b22:	0018      	movs	r0, r3
 8007b24:	f7ff fcf0 	bl	8007508 <printf_USB>
            ResetUsbRxDataSize();
 8007b28:	f018 fd80 	bl	802062c <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e095      	b.n	8007c5c <Process_USB_input+0x2d0>
        for (uint8_t i=3; i < len; i++) {
 8007b30:	2117      	movs	r1, #23
 8007b32:	187b      	adds	r3, r7, r1
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	187b      	adds	r3, r7, r1
 8007b38:	3201      	adds	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	2317      	movs	r3, #23
 8007b3e:	18fb      	adds	r3, r7, r3
 8007b40:	781a      	ldrb	r2, [r3, #0]
 8007b42:	4b48      	ldr	r3, [pc, #288]	@ (8007c64 <Process_USB_input+0x2d8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d200      	bcs.n	8007b4c <Process_USB_input+0x1c0>
 8007b4a:	e772      	b.n	8007a32 <Process_USB_input+0xa6>
          }
        }
        if (len == 5) {
 8007b4c:	4b45      	ldr	r3, [pc, #276]	@ (8007c64 <Process_USB_input+0x2d8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d112      	bne.n	8007b7a <Process_USB_input+0x1ee>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8007b54:	4b4c      	ldr	r3, [pc, #304]	@ (8007c88 <Process_USB_input+0x2fc>)
 8007b56:	484d      	ldr	r0, [pc, #308]	@ (8007c8c <Process_USB_input+0x300>)
 8007b58:	220c      	movs	r2, #12
 8007b5a:	0019      	movs	r1, r3
 8007b5c:	f002 fadc 	bl	800a118 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8007b60:	4b46      	ldr	r3, [pc, #280]	@ (8007c7c <Process_USB_input+0x2f0>)
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b48      	ldr	r3, [pc, #288]	@ (8007c88 <Process_USB_input+0x2fc>)
 8007b66:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8007b68:	4b42      	ldr	r3, [pc, #264]	@ (8007c74 <Process_USB_input+0x2e8>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	4946      	ldr	r1, [pc, #280]	@ (8007c88 <Process_USB_input+0x2fc>)
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	220c      	movs	r2, #12
 8007b72:	0018      	movs	r0, r3
 8007b74:	f01c f868 	bl	8023c48 <memcpy>
 8007b78:	e005      	b.n	8007b86 <Process_USB_input+0x1fa>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	4b44      	ldr	r3, [pc, #272]	@ (8007c90 <Process_USB_input+0x304>)
 8007b7e:	220c      	movs	r2, #12
 8007b80:	0018      	movs	r0, r3
 8007b82:	f01c f861 	bl	8023c48 <memcpy>
        }
        received.PayloadLength = IdSize;
 8007b86:	4b3b      	ldr	r3, [pc, #236]	@ (8007c74 <Process_USB_input+0x2e8>)
 8007b88:	220c      	movs	r2, #12
 8007b8a:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8007b8c:	4a40      	ldr	r2, [pc, #256]	@ (8007c90 <Process_USB_input+0x304>)
 8007b8e:	4b41      	ldr	r3, [pc, #260]	@ (8007c94 <Process_USB_input+0x308>)
 8007b90:	0011      	movs	r1, r2
 8007b92:	0018      	movs	r0, r3
 8007b94:	f7fc ffa2 	bl	8004adc <uint8ArrayToString>
        ProcessCmd(received);
 8007b98:	4c36      	ldr	r4, [pc, #216]	@ (8007c74 <Process_USB_input+0x2e8>)
 8007b9a:	466b      	mov	r3, sp
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	0023      	movs	r3, r4
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	22f4      	movs	r2, #244	@ 0xf4
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	f01c f84f 	bl	8023c48 <memcpy>
 8007baa:	6820      	ldr	r0, [r4, #0]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	68a2      	ldr	r2, [r4, #8]
 8007bb0:	68e3      	ldr	r3, [r4, #12]
 8007bb2:	f7ff fb1b 	bl	80071ec <ProcessCmd>
        ResetUsbRxDataSize();
 8007bb6:	f018 fd39 	bl	802062c <ResetUsbRxDataSize>
        PC_show_Keys();
 8007bba:	f7ff fce5 	bl	8007588 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8007bbe:	2316      	movs	r3, #22
 8007bc0:	18fb      	adds	r3, r7, r3
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	e00b      	b.n	8007be0 <Process_USB_input+0x254>
          data[i] = '\0';
 8007bc8:	2116      	movs	r1, #22
 8007bca:	187b      	adds	r3, r7, r1
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8007bd6:	187b      	adds	r3, r7, r1
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	3201      	adds	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	2316      	movs	r3, #22
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b1f      	cmp	r3, #31
 8007be8:	d9ee      	bls.n	8007bc8 <Process_USB_input+0x23c>
        }
        return true;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e036      	b.n	8007c5c <Process_USB_input+0x2d0>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8007bee:	4b2a      	ldr	r3, [pc, #168]	@ (8007c98 <Process_USB_input+0x30c>)
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f7ff fc89 	bl	8007508 <printf_USB>
        ResetUsbRxDataSize();
 8007bf6:	f018 fd19 	bl	802062c <ResetUsbRxDataSize>
      if (message[2] == ',') {
 8007bfa:	e006      	b.n	8007c0a <Process_USB_input+0x27e>
      }
    }
    else {
      len = 5;
 8007bfc:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <Process_USB_input+0x2d8>)
 8007bfe:	2205      	movs	r2, #5
 8007c00:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8007c02:	f7ff fcc1 	bl	8007588 <PC_show_Keys>
      ResetUsbRxDataSize();
 8007c06:	f018 fd11 	bl	802062c <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 8007c0a:	2315      	movs	r3, #21
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e00b      	b.n	8007c2c <Process_USB_input+0x2a0>
      data[i] = '\0';
 8007c14:	2115      	movs	r1, #21
 8007c16:	187b      	adds	r3, r7, r1
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	187b      	adds	r3, r7, r1
 8007c28:	3201      	adds	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	2315      	movs	r3, #21
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b1f      	cmp	r3, #31
 8007c34:	d9ee      	bls.n	8007c14 <Process_USB_input+0x288>
    }

  }
  if (formerlength != length) {
 8007c36:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <Process_USB_input+0x310>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d008      	beq.n	8007c52 <Process_USB_input+0x2c6>
    printf_USB("USB input: %s\r", (const char*)data);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4b17      	ldr	r3, [pc, #92]	@ (8007ca0 <Process_USB_input+0x314>)
 8007c44:	0011      	movs	r1, r2
 8007c46:	0018      	movs	r0, r3
 8007c48:	f7ff fc5e 	bl	8007508 <printf_USB>
    formerlength = length;
 8007c4c:	4b13      	ldr	r3, [pc, #76]	@ (8007c9c <Process_USB_input+0x310>)
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f018 fd0b 	bl	8020670 <GetUsbRxNextChunk>

  return false;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b007      	add	sp, #28
 8007c62:	bd90      	pop	{r4, r7, pc}
 8007c64:	20000030 	.word	0x20000030
 8007c68:	08028c88 	.word	0x08028c88
 8007c6c:	08028cc8 	.word	0x08028cc8
 8007c70:	08028ccc 	.word	0x08028ccc
 8007c74:	200007ec 	.word	0x200007ec
 8007c78:	0802b760 	.word	0x0802b760
 8007c7c:	200008f0 	.word	0x200008f0
 8007c80:	20000af4 	.word	0x20000af4
 8007c84:	08028cdc 	.word	0x08028cdc
 8007c88:	20000af8 	.word	0x20000af8
 8007c8c:	08080000 	.word	0x08080000
 8007c90:	200007ee 	.word	0x200007ee
 8007c94:	20000b04 	.word	0x20000b04
 8007c98:	08028d14 	.word	0x08028d14
 8007c9c:	200008f4 	.word	0x200008f4
 8007ca0:	08028d40 	.word	0x08028d40

08007ca4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8007ca8:	4b26      	ldr	r3, [pc, #152]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007caa:	4a27      	ldr	r2, [pc, #156]	@ (8007d48 <ReadBatteryVoltage+0xa4>)
 8007cac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007cae:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007cb0:	2280      	movs	r2, #128	@ 0x80
 8007cb2:	0152      	lsls	r2, r2, #5
 8007cb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007cb6:	4a23      	ldr	r2, [pc, #140]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007cb8:	4b24      	ldr	r3, [pc, #144]	@ (8007d4c <ReadBatteryVoltage+0xa8>)
 8007cba:	0011      	movs	r1, r2
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f00a fcad 	bl	801261c <HAL_ADC_ConfigChannel>
 8007cc2:	1e03      	subs	r3, r0, #0
 8007cc4:	d001      	beq.n	8007cca <ReadBatteryVoltage+0x26>
    Error_Handler();
 8007cc6:	f003 fac7 	bl	800b258 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007cca:	4b20      	ldr	r3, [pc, #128]	@ (8007d4c <ReadBatteryVoltage+0xa8>)
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f00a fba9 	bl	8012424 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d4c <ReadBatteryVoltage+0xa8>)
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f00a fbf8 	bl	80124cc <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8007cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8007d4c <ReadBatteryVoltage+0xa8>)
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f00a fc90 	bl	8012604 <HAL_ADC_GetValue>
 8007ce4:	0002      	movs	r2, r0
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d50 <ReadBatteryVoltage+0xac>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4353      	muls	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	4919      	ldr	r1, [pc, #100]	@ (8007d54 <ReadBatteryVoltage+0xb0>)
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f7f8 fa57 	bl	80001a4 <__udivsi3>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	4b17      	ldr	r3, [pc, #92]	@ (8007d58 <ReadBatteryVoltage+0xb4>)
 8007cfc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8007cfe:	4b16      	ldr	r3, [pc, #88]	@ (8007d58 <ReadBatteryVoltage+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7f9 fcb0 	bl	8001668 <__aeabi_ui2f>
 8007d08:	1c03      	adds	r3, r0, #0
 8007d0a:	4914      	ldr	r1, [pc, #80]	@ (8007d5c <ReadBatteryVoltage+0xb8>)
 8007d0c:	1c18      	adds	r0, r3, #0
 8007d0e:	f7f8 ff61 	bl	8000bd4 <__aeabi_fdiv>
 8007d12:	1c03      	adds	r3, r0, #0
 8007d14:	1c1a      	adds	r2, r3, #0
 8007d16:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <ReadBatteryVoltage+0xbc>)
 8007d18:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d48 <ReadBatteryVoltage+0xa4>)
 8007d1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007d20:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007d22:	4a10      	ldr	r2, [pc, #64]	@ (8007d64 <ReadBatteryVoltage+0xc0>)
 8007d24:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d26:	4a07      	ldr	r2, [pc, #28]	@ (8007d44 <ReadBatteryVoltage+0xa0>)
 8007d28:	4b08      	ldr	r3, [pc, #32]	@ (8007d4c <ReadBatteryVoltage+0xa8>)
 8007d2a:	0011      	movs	r1, r2
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f00a fc75 	bl	801261c <HAL_ADC_ConfigChannel>
 8007d32:	1e03      	subs	r3, r0, #0
 8007d34:	d001      	beq.n	8007d3a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8007d36:	f003 fa8f 	bl	800b258 <Error_Handler>
  }
  return trueValue;
 8007d3a:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <ReadBatteryVoltage+0xbc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 }
 8007d3e:	1c18      	adds	r0, r3, #0
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000b1c 	.word	0x20000b1c
 8007d48:	38004000 	.word	0x38004000
 8007d4c:	20000b58 	.word	0x20000b58
 8007d50:	20000034 	.word	0x20000034
 8007d54:	00000fff 	.word	0x00000fff
 8007d58:	20000b24 	.word	0x20000b24
 8007d5c:	447a0000 	.word	0x447a0000
 8007d60:	20000b28 	.word	0x20000b28
 8007d64:	00001001 	.word	0x00001001

08007d68 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8007d6c:	4b21      	ldr	r3, [pc, #132]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007d6e:	4a22      	ldr	r2, [pc, #136]	@ (8007df8 <ReadSolarVoltage+0x90>)
 8007d70:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007d72:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007d74:	2280      	movs	r2, #128	@ 0x80
 8007d76:	0152      	lsls	r2, r2, #5
 8007d78:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dfc <ReadSolarVoltage+0x94>)
 8007d7e:	0011      	movs	r1, r2
 8007d80:	0018      	movs	r0, r3
 8007d82:	f00a fc4b 	bl	801261c <HAL_ADC_ConfigChannel>
 8007d86:	1e03      	subs	r3, r0, #0
 8007d88:	d001      	beq.n	8007d8e <ReadSolarVoltage+0x26>
    Error_Handler();
 8007d8a:	f003 fa65 	bl	800b258 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dfc <ReadSolarVoltage+0x94>)
 8007d90:	0018      	movs	r0, r3
 8007d92:	f00a fb47 	bl	8012424 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007d96:	4b19      	ldr	r3, [pc, #100]	@ (8007dfc <ReadSolarVoltage+0x94>)
 8007d98:	2101      	movs	r1, #1
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f00a fb96 	bl	80124cc <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8007da0:	4b16      	ldr	r3, [pc, #88]	@ (8007dfc <ReadSolarVoltage+0x94>)
 8007da2:	0018      	movs	r0, r3
 8007da4:	f00a fc2e 	bl	8012604 <HAL_ADC_GetValue>
 8007da8:	0002      	movs	r2, r0
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <ReadSolarVoltage+0x98>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	435a      	muls	r2, r3
 8007db0:	0013      	movs	r3, r2
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	189b      	adds	r3, r3, r2
 8007db6:	4913      	ldr	r1, [pc, #76]	@ (8007e04 <ReadSolarVoltage+0x9c>)
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7f8 f9f3 	bl	80001a4 <__udivsi3>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <ReadSolarVoltage+0xa0>)
 8007dc4:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007df8 <ReadSolarVoltage+0x90>)
 8007dca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007dcc:	4b09      	ldr	r3, [pc, #36]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007dce:	4a0f      	ldr	r2, [pc, #60]	@ (8007e0c <ReadSolarVoltage+0xa4>)
 8007dd0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007dd2:	4a08      	ldr	r2, [pc, #32]	@ (8007df4 <ReadSolarVoltage+0x8c>)
 8007dd4:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <ReadSolarVoltage+0x94>)
 8007dd6:	0011      	movs	r1, r2
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f00a fc1f 	bl	801261c <HAL_ADC_ConfigChannel>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d001      	beq.n	8007de6 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8007de2:	f003 fa39 	bl	800b258 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8007de6:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <ReadSolarVoltage+0xa0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 }
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			@ (mov r8, r8)
 8007df4:	20000b1c 	.word	0x20000b1c
 8007df8:	3c008000 	.word	0x3c008000
 8007dfc:	20000b58 	.word	0x20000b58
 8007e00:	20000034 	.word	0x20000034
 8007e04:	00000fff 	.word	0x00000fff
 8007e08:	20000b2c 	.word	0x20000b2c
 8007e0c:	00001001 	.word	0x00001001

08007e10 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8007e14:	23a0      	movs	r3, #160	@ 0xa0
 8007e16:	05db      	lsls	r3, r3, #23
 8007e18:	2180      	movs	r1, #128	@ 0x80
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f00b fb9a 	bl	8013554 <HAL_GPIO_ReadPin>
 8007e20:	0003      	movs	r3, r0
 8007e22:	1e5a      	subs	r2, r3, #1
 8007e24:	4193      	sbcs	r3, r2
 8007e26:	b2db      	uxtb	r3, r3
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8007e32:	2380      	movs	r3, #128	@ 0x80
 8007e34:	021a      	lsls	r2, r3, #8
 8007e36:	23a0      	movs	r3, #160	@ 0xa0
 8007e38:	05db      	lsls	r3, r3, #23
 8007e3a:	0011      	movs	r1, r2
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f00b fb89 	bl	8013554 <HAL_GPIO_ReadPin>
 8007e42:	0003      	movs	r3, r0
 8007e44:	1e5a      	subs	r2, r3, #1
 8007e46:	4193      	sbcs	r3, r2
 8007e48:	b2db      	uxtb	r3, r3
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8007e54:	4b05      	ldr	r3, [pc, #20]	@ (8007e6c <UserButton_Pressed+0x1c>)
 8007e56:	2104      	movs	r1, #4
 8007e58:	0018      	movs	r0, r3
 8007e5a:	f00b fb7b 	bl	8013554 <HAL_GPIO_ReadPin>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	425a      	negs	r2, r3
 8007e62:	4153      	adcs	r3, r2
 8007e64:	b2db      	uxtb	r3, r3
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	50000c00 	.word	0x50000c00

08007e70 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	46d6      	mov	lr, sl
 8007e74:	464f      	mov	r7, r9
 8007e76:	4646      	mov	r6, r8
 8007e78:	b5c0      	push	{r6, r7, lr}
 8007e7a:	b08e      	sub	sp, #56	@ 0x38
 8007e7c:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007e7e:	4b21      	ldr	r3, [pc, #132]	@ (8007f04 <showTime+0x94>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d036      	beq.n	8007ef4 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007e86:	003a      	movs	r2, r7
 8007e88:	1d3b      	adds	r3, r7, #4
 8007e8a:	0011      	movs	r1, r2
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f000 fa3f 	bl	8008310 <RTC_GetTime>
  UpdateSystemUptime();
 8007e92:	f000 f853 	bl	8007f3c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007e96:	003b      	movs	r3, r7
 8007e98:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007e9a:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007e9c:	003b      	movs	r3, r7
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ea2:	4b19      	ldr	r3, [pc, #100]	@ (8007f08 <showTime+0x98>)
 8007ea4:	0092      	lsls	r2, r2, #2
 8007ea6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ea8:	003b      	movs	r3, r7
 8007eaa:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eac:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007eae:	1d3b      	adds	r3, r7, #4
 8007eb0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eb2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eb8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ebe:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007ec0:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <showTime+0x9c>)
 8007ec2:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ec4:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007ec6:	4b11      	ldr	r3, [pc, #68]	@ (8007f0c <showTime+0x9c>)
 8007ec8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eca:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8007f0c <showTime+0x9c>)
 8007ece:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ed0:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f0c <showTime+0x9c>)
 8007ed4:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ed6:	480e      	ldr	r0, [pc, #56]	@ (8007f10 <showTime+0xa0>)
 8007ed8:	9306      	str	r3, [sp, #24]
 8007eda:	4643      	mov	r3, r8
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	4663      	mov	r3, ip
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	9603      	str	r6, [sp, #12]
 8007ee4:	9502      	str	r5, [sp, #8]
 8007ee6:	9401      	str	r4, [sp, #4]
 8007ee8:	9100      	str	r1, [sp, #0]
 8007eea:	4653      	mov	r3, sl
 8007eec:	4649      	mov	r1, r9
 8007eee:	f01b fbf9 	bl	80236e4 <iprintf>
 8007ef2:	e000      	b.n	8007ef6 <showTime+0x86>
    return;
 8007ef4:	46c0      	nop			@ (mov r8, r8)
}
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b006      	add	sp, #24
 8007efa:	bce0      	pop	{r5, r6, r7}
 8007efc:	46ba      	mov	sl, r7
 8007efe:	46b1      	mov	r9, r6
 8007f00:	46a8      	mov	r8, r5
 8007f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f04:	20000b3c 	.word	0x20000b3c
 8007f08:	20000054 	.word	0x20000054
 8007f0c:	20000b30 	.word	0x20000b30
 8007f10:	08028d9c 	.word	0x08028d9c

08007f14 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007f1a:	003a      	movs	r2, r7
 8007f1c:	1d3b      	adds	r3, r7, #4
 8007f1e:	0011      	movs	r1, r2
 8007f20:	0018      	movs	r0, r3
 8007f22:	f000 f9f5 	bl	8008310 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8007f26:	1d3a      	adds	r2, r7, #4
 8007f28:	003b      	movs	r3, r7
 8007f2a:	0011      	movs	r1, r2
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f000 fbc1 	bl	80086b4 <makeTime>
 8007f32:	0003      	movs	r3, r0
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b006      	add	sp, #24
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8007f42:	003a      	movs	r2, r7
 8007f44:	1d3b      	adds	r3, r7, #4
 8007f46:	0011      	movs	r1, r2
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f000 f9e1 	bl	8008310 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8007f4e:	1d3a      	adds	r2, r7, #4
 8007f50:	003b      	movs	r3, r7
 8007f52:	0011      	movs	r1, r2
 8007f54:	0018      	movs	r0, r3
 8007f56:	f000 fbad 	bl	80086b4 <makeTime>
 8007f5a:	0002      	movs	r2, r0
 8007f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd8 <UpdateSystemUptime+0x9c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	213c      	movs	r1, #60	@ 0x3c
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f7f8 f99f 	bl	80002b0 <__aeabi_uidivmod>
 8007f72:	000b      	movs	r3, r1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4b19      	ldr	r3, [pc, #100]	@ (8007fdc <UpdateSystemUptime+0xa0>)
 8007f78:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	213c      	movs	r1, #60	@ 0x3c
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7f8 f910 	bl	80001a4 <__udivsi3>
 8007f84:	0003      	movs	r3, r0
 8007f86:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	213c      	movs	r1, #60	@ 0x3c
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f7f8 f98f 	bl	80002b0 <__aeabi_uidivmod>
 8007f92:	000b      	movs	r3, r1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <UpdateSystemUptime+0xa0>)
 8007f98:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	213c      	movs	r1, #60	@ 0x3c
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7f8 f900 	bl	80001a4 <__udivsi3>
 8007fa4:	0003      	movs	r3, r0
 8007fa6:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2118      	movs	r1, #24
 8007fac:	0018      	movs	r0, r3
 8007fae:	f7f8 f97f 	bl	80002b0 <__aeabi_uidivmod>
 8007fb2:	000b      	movs	r3, r1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b09      	ldr	r3, [pc, #36]	@ (8007fdc <UpdateSystemUptime+0xa0>)
 8007fb8:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2118      	movs	r1, #24
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7f8 f8f0 	bl	80001a4 <__udivsi3>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	4b03      	ldr	r3, [pc, #12]	@ (8007fdc <UpdateSystemUptime+0xa0>)
 8007fce:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8007fd0:	46c0      	nop			@ (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b008      	add	sp, #32
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000b3c 	.word	0x20000b3c
 8007fdc:	20000b30 	.word	0x20000b30

08007fe0 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	0008      	movs	r0, r1
 8007fea:	0011      	movs	r1, r2
 8007fec:	1cfb      	adds	r3, r7, #3
 8007fee:	1c02      	adds	r2, r0, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	1cbb      	adds	r3, r7, #2
 8007ff4:	1c0a      	adds	r2, r1, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8007ff8:	230e      	movs	r3, #14
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8008000:	230f      	movs	r3, #15
 8008002:	18fb      	adds	r3, r7, r3
 8008004:	1cfa      	adds	r2, r7, #3
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e015      	b.n	8008038 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800800c:	200f      	movs	r0, #15
 800800e:	183b      	adds	r3, r7, r0
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	18d2      	adds	r2, r2, r3
 8008016:	240e      	movs	r4, #14
 8008018:	193b      	adds	r3, r7, r4
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	7811      	ldrb	r1, [r2, #0]
 800801e:	2208      	movs	r2, #8
 8008020:	18ba      	adds	r2, r7, r2
 8008022:	54d1      	strb	r1, [r2, r3]
    pos++;
 8008024:	193b      	adds	r3, r7, r4
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	193b      	adds	r3, r7, r4
 800802a:	3201      	adds	r2, #1
 800802c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800802e:	183b      	adds	r3, r7, r0
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	183b      	adds	r3, r7, r0
 8008034:	3201      	adds	r2, #1
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	200f      	movs	r0, #15
 800803a:	183a      	adds	r2, r7, r0
 800803c:	1cbb      	adds	r3, r7, #2
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d9e2      	bls.n	800800c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8008046:	230e      	movs	r3, #14
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2208      	movs	r2, #8
 800804e:	18ba      	adds	r2, r7, r2
 8008050:	2100      	movs	r1, #0
 8008052:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8008054:	1cfb      	adds	r3, r7, #3
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b13      	cmp	r3, #19
 800805a:	d849      	bhi.n	80080f0 <aBuff2int+0x110>
    if (start == 17) { //month
 800805c:	1cfb      	adds	r3, r7, #3
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b11      	cmp	r3, #17
 8008062:	d122      	bne.n	80080aa <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8008064:	183b      	adds	r3, r7, r0
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e018      	b.n	800809e <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800806c:	240f      	movs	r4, #15
 800806e:	193b      	adds	r3, r7, r4
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	4b25      	ldr	r3, [pc, #148]	@ (8008108 <aBuff2int+0x128>)
 8008074:	0092      	lsls	r2, r2, #2
 8008076:	58d2      	ldr	r2, [r2, r3]
 8008078:	2308      	movs	r3, #8
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	0011      	movs	r1, r2
 800807e:	0018      	movs	r0, r3
 8008080:	f7f8 f86a 	bl	8000158 <strcmp>
 8008084:	1e03      	subs	r3, r0, #0
 8008086:	d104      	bne.n	8008092 <aBuff2int+0xb2>
          return i+1;
 8008088:	193b      	adds	r3, r7, r4
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	e035      	b.n	80080fe <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8008092:	210f      	movs	r1, #15
 8008094:	187b      	adds	r3, r7, r1
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	187b      	adds	r3, r7, r1
 800809a:	3201      	adds	r2, #1
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	230f      	movs	r3, #15
 80080a0:	18fb      	adds	r3, r7, r3
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b0b      	cmp	r3, #11
 80080a6:	d9e1      	bls.n	800806c <aBuff2int+0x8c>
 80080a8:	e022      	b.n	80080f0 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80080aa:	230f      	movs	r3, #15
 80080ac:	18fb      	adds	r3, r7, r3
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	e018      	b.n	80080e6 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80080b4:	240f      	movs	r4, #15
 80080b6:	193b      	adds	r3, r7, r4
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	4b14      	ldr	r3, [pc, #80]	@ (800810c <aBuff2int+0x12c>)
 80080bc:	0092      	lsls	r2, r2, #2
 80080be:	58d2      	ldr	r2, [r2, r3]
 80080c0:	2308      	movs	r3, #8
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f7f8 f846 	bl	8000158 <strcmp>
 80080cc:	1e03      	subs	r3, r0, #0
 80080ce:	d104      	bne.n	80080da <aBuff2int+0xfa>
          return i+1;
 80080d0:	193b      	adds	r3, r7, r4
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	e011      	b.n	80080fe <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80080da:	210f      	movs	r1, #15
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	187b      	adds	r3, r7, r1
 80080e2:	3201      	adds	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	230f      	movs	r3, #15
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d9e1      	bls.n	80080b4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80080f0:	2308      	movs	r3, #8
 80080f2:	18fb      	adds	r3, r7, r3
 80080f4:	0018      	movs	r0, r3
 80080f6:	f019 ff1a 	bl	8021f2e <atoi>
 80080fa:	0003      	movs	r3, r0
 80080fc:	b2db      	uxtb	r3, r3
}
 80080fe:	0018      	movs	r0, r3
 8008100:	46bd      	mov	sp, r7
 8008102:	b005      	add	sp, #20
 8008104:	bd90      	pop	{r4, r7, pc}
 8008106:	46c0      	nop			@ (mov r8, r8)
 8008108:	20000054 	.word	0x20000054
 800810c:	20000038 	.word	0x20000038

08008110 <ParseTime>:

void ParseTime(char* buffer) {
 8008110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008112:	b08b      	sub	sp, #44	@ 0x2c
 8008114:	af02      	add	r7, sp, #8
 8008116:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008118:	2408      	movs	r4, #8
 800811a:	193a      	adds	r2, r7, r4
 800811c:	260c      	movs	r6, #12
 800811e:	19bb      	adds	r3, r7, r6
 8008120:	0011      	movs	r1, r2
 8008122:	0018      	movs	r0, r3
 8008124:	f000 f8f4 	bl	8008310 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2219      	movs	r2, #25
 800812c:	2118      	movs	r1, #24
 800812e:	0018      	movs	r0, r3
 8008130:	f7ff ff56 	bl	8007fe0 <aBuff2int>
 8008134:	0003      	movs	r3, r0
 8008136:	001a      	movs	r2, r3
 8008138:	19bb      	adds	r3, r7, r6
 800813a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	221c      	movs	r2, #28
 8008140:	211b      	movs	r1, #27
 8008142:	0018      	movs	r0, r3
 8008144:	f7ff ff4c 	bl	8007fe0 <aBuff2int>
 8008148:	0003      	movs	r3, r0
 800814a:	001a      	movs	r2, r3
 800814c:	19bb      	adds	r3, r7, r6
 800814e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	221f      	movs	r2, #31
 8008154:	211e      	movs	r1, #30
 8008156:	0018      	movs	r0, r3
 8008158:	f7ff ff42 	bl	8007fe0 <aBuff2int>
 800815c:	0003      	movs	r3, r0
 800815e:	001a      	movs	r2, r3
 8008160:	19bb      	adds	r3, r7, r6
 8008162:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2224      	movs	r2, #36	@ 0x24
 8008168:	2123      	movs	r1, #35	@ 0x23
 800816a:	0018      	movs	r0, r3
 800816c:	f7ff ff38 	bl	8007fe0 <aBuff2int>
 8008170:	0003      	movs	r3, r0
 8008172:	001a      	movs	r2, r3
 8008174:	0025      	movs	r5, r4
 8008176:	197b      	adds	r3, r7, r5
 8008178:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2213      	movs	r2, #19
 800817e:	2111      	movs	r1, #17
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff ff2d 	bl	8007fe0 <aBuff2int>
 8008186:	0003      	movs	r3, r0
 8008188:	001a      	movs	r2, r3
 800818a:	197b      	adds	r3, r7, r5
 800818c:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2216      	movs	r2, #22
 8008192:	2115      	movs	r1, #21
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff ff23 	bl	8007fe0 <aBuff2int>
 800819a:	0003      	movs	r3, r0
 800819c:	001a      	movs	r2, r3
 800819e:	197b      	adds	r3, r7, r5
 80081a0:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	220f      	movs	r2, #15
 80081a6:	210d      	movs	r1, #13
 80081a8:	0018      	movs	r0, r3
 80081aa:	f7ff ff19 	bl	8007fe0 <aBuff2int>
 80081ae:	0003      	movs	r3, r0
 80081b0:	001a      	movs	r2, r3
 80081b2:	197b      	adds	r3, r7, r5
 80081b4:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80081b6:	19bb      	adds	r3, r7, r6
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	001c      	movs	r4, r3
 80081bc:	19bb      	adds	r3, r7, r6
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	0018      	movs	r0, r3
 80081c2:	19bb      	adds	r3, r7, r6
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008238 <ParseTime+0x128>)
 80081c8:	491c      	ldr	r1, [pc, #112]	@ (800823c <ParseTime+0x12c>)
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	9000      	str	r0, [sp, #0]
 80081ce:	0023      	movs	r3, r4
 80081d0:	2003      	movs	r0, #3
 80081d2:	f009 faff 	bl	80117d4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80081d6:	197b      	adds	r3, r7, r5
 80081d8:	789b      	ldrb	r3, [r3, #2]
 80081da:	001c      	movs	r4, r3
 80081dc:	197b      	adds	r3, r7, r5
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	0018      	movs	r0, r3
 80081e2:	197b      	adds	r3, r7, r5
 80081e4:	78db      	ldrb	r3, [r3, #3]
 80081e6:	4a16      	ldr	r2, [pc, #88]	@ (8008240 <ParseTime+0x130>)
 80081e8:	4914      	ldr	r1, [pc, #80]	@ (800823c <ParseTime+0x12c>)
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	9000      	str	r0, [sp, #0]
 80081ee:	0023      	movs	r3, r4
 80081f0:	2003      	movs	r0, #3
 80081f2:	f009 faef 	bl	80117d4 <CreateLine>
  RTC_SetTime(&currentTime);
 80081f6:	19bb      	adds	r3, r7, r6
 80081f8:	0018      	movs	r0, r3
 80081fa:	f000 f825 	bl	8008248 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80081fe:	197b      	adds	r3, r7, r5
 8008200:	0018      	movs	r0, r3
 8008202:	f000 f847 	bl	8008294 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8008206:	197b      	adds	r3, r7, r5
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d101      	bne.n	8008212 <ParseTime+0x102>
    reset_fanCleaningDone();
 800820e:	f004 f8f7 	bl	800c400 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8008212:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <ParseTime+0x134>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800821a:	230c      	movs	r3, #12
 800821c:	18fa      	adds	r2, r7, r3
 800821e:	2308      	movs	r3, #8
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	0011      	movs	r1, r2
 8008224:	0018      	movs	r0, r3
 8008226:	f000 fa45 	bl	80086b4 <makeTime>
 800822a:	0002      	movs	r2, r0
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <ParseTime+0x134>)
 800822e:	601a      	str	r2, [r3, #0]
  }
}
 8008230:	46c0      	nop			@ (mov r8, r8)
 8008232:	46bd      	mov	sp, r7
 8008234:	b009      	add	sp, #36	@ 0x24
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	08028df4 	.word	0x08028df4
 800823c:	08028e2c 	.word	0x08028e2c
 8008240:	08028e30 	.word	0x08028e30
 8008244:	20000b3c 	.word	0x20000b3c

08008248 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8008262:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <RTC_SetTime+0x40>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	0018      	movs	r0, r3
 800826c:	f011 fab6 	bl	80197dc <HAL_RTC_SetTime>
 8008270:	1e03      	subs	r3, r0, #0
 8008272:	d005      	beq.n	8008280 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8008274:	4a05      	ldr	r2, [pc, #20]	@ (800828c <RTC_SetTime+0x44>)
 8008276:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <RTC_SetTime+0x48>)
 8008278:	0019      	movs	r1, r3
 800827a:	2001      	movs	r0, #1
 800827c:	f009 faaa 	bl	80117d4 <CreateLine>
    }
}
 8008280:	46c0      	nop			@ (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b002      	add	sp, #8
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000b38 	.word	0x20000b38
 800828c:	08028e64 	.word	0x08028e64
 8008290:	08028e80 	.word	0x08028e80

08008294 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800829c:	4b16      	ldr	r3, [pc, #88]	@ (80082f8 <RTC_SetDate+0x64>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	0018      	movs	r0, r3
 80082a6:	f011 fba1 	bl	80199ec <HAL_RTC_SetDate>
 80082aa:	1e03      	subs	r3, r0, #0
 80082ac:	d005      	beq.n	80082ba <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80082ae:	4a13      	ldr	r2, [pc, #76]	@ (80082fc <RTC_SetDate+0x68>)
 80082b0:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <RTC_SetDate+0x6c>)
 80082b2:	0019      	movs	r1, r3
 80082b4:	2001      	movs	r0, #1
 80082b6:	f009 fa8d 	bl	80117d4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80082ba:	4b0f      	ldr	r3, [pc, #60]	@ (80082f8 <RTC_SetDate+0x64>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2101      	movs	r1, #1
 80082c0:	0018      	movs	r0, r3
 80082c2:	f011 fed9 	bl	801a078 <HAL_RTCEx_BKUPRead>
 80082c6:	0003      	movs	r3, r0
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <RTC_SetDate+0x70>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d010      	beq.n	80082f0 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80082ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008308 <RTC_SetDate+0x74>)
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <RTC_SetDate+0x78>)
 80082d2:	0019      	movs	r1, r3
 80082d4:	2003      	movs	r0, #3
 80082d6:	f009 fa7d 	bl	80117d4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80082da:	f010 f9ff 	bl	80186dc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80082de:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <RTC_SetDate+0x64>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a08      	ldr	r2, [pc, #32]	@ (8008304 <RTC_SetDate+0x70>)
 80082e4:	2101      	movs	r1, #1
 80082e6:	0018      	movs	r0, r3
 80082e8:	f011 feae 	bl	801a048 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80082ec:	f010 fa04 	bl	80186f8 <HAL_PWR_DisableBkUpAccess>
    }
}
 80082f0:	46c0      	nop			@ (mov r8, r8)
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b002      	add	sp, #8
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000b38 	.word	0x20000b38
 80082fc:	08028e84 	.word	0x08028e84
 8008300:	08028e80 	.word	0x08028e80
 8008304:	0000bebe 	.word	0x0000bebe
 8008308:	08028ea0 	.word	0x08028ea0
 800830c:	08028e2c 	.word	0x08028e2c

08008310 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8008310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800831a:	250f      	movs	r5, #15
 800831c:	197b      	adds	r3, r7, r5
 800831e:	2201      	movs	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8008322:	230e      	movs	r3, #14
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800832a:	260c      	movs	r6, #12
 800832c:	19bc      	adds	r4, r7, r6
 800832e:	f008 fae3 	bl	80108f8 <powerCheck>
 8008332:	0003      	movs	r3, r0
 8008334:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8008336:	19bb      	adds	r3, r7, r6
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d104      	bne.n	8008348 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800833e:	197b      	adds	r3, r7, r5
 8008340:	781a      	ldrb	r2, [r3, #0]
 8008342:	197b      	adds	r3, r7, r5
 8008344:	3201      	adds	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8008348:	230d      	movs	r3, #13
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e039      	b.n	80083c6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8008352:	4b23      	ldr	r3, [pc, #140]	@ (80083e0 <RTC_GetTime+0xd0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	0018      	movs	r0, r3
 800835c:	f011 fae8 	bl	8019930 <HAL_RTC_GetTime>
 8008360:	1e03      	subs	r3, r0, #0
 8008362:	d005      	beq.n	8008370 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8008364:	4a1f      	ldr	r2, [pc, #124]	@ (80083e4 <RTC_GetTime+0xd4>)
 8008366:	4b20      	ldr	r3, [pc, #128]	@ (80083e8 <RTC_GetTime+0xd8>)
 8008368:	0019      	movs	r1, r3
 800836a:	2001      	movs	r0, #1
 800836c:	f009 fa32 	bl	80117d4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8008370:	4b1b      	ldr	r3, [pc, #108]	@ (80083e0 <RTC_GetTime+0xd0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	2200      	movs	r2, #0
 8008378:	0018      	movs	r0, r3
 800837a:	f011 fbcb 	bl	8019b14 <HAL_RTC_GetDate>
 800837e:	1e03      	subs	r3, r0, #0
 8008380:	d005      	beq.n	800838e <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8008382:	4a1a      	ldr	r2, [pc, #104]	@ (80083ec <RTC_GetTime+0xdc>)
 8008384:	4b18      	ldr	r3, [pc, #96]	@ (80083e8 <RTC_GetTime+0xd8>)
 8008386:	0019      	movs	r1, r3
 8008388:	2001      	movs	r0, #1
 800838a:	f009 fa23 	bl	80117d4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800838e:	230c      	movs	r3, #12
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d110      	bne.n	80083ba <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	210e      	movs	r1, #14
 800839e:	187a      	adds	r2, r7, r1
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d018      	beq.n	80083d8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80083a6:	187b      	adds	r3, r7, r1
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	701a      	strb	r2, [r3, #0]
        t++;
 80083ae:	210f      	movs	r1, #15
 80083b0:	187b      	adds	r3, r7, r1
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	187b      	adds	r3, r7, r1
 80083b6:	3201      	adds	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80083ba:	210d      	movs	r1, #13
 80083bc:	187b      	adds	r3, r7, r1
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	187b      	adds	r3, r7, r1
 80083c2:	3201      	adds	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	230d      	movs	r3, #13
 80083c8:	18fa      	adds	r2, r7, r3
 80083ca:	230f      	movs	r3, #15
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d3bd      	bcc.n	8008352 <RTC_GetTime+0x42>
 80083d6:	e000      	b.n	80083da <RTC_GetTime+0xca>
      }
      else {
        return;
 80083d8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80083da:	46bd      	mov	sp, r7
 80083dc:	b005      	add	sp, #20
 80083de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e0:	20000b38 	.word	0x20000b38
 80083e4:	08028eb8 	.word	0x08028eb8
 80083e8:	08028e80 	.word	0x08028e80
 80083ec:	08028ed4 	.word	0x08028ed4

080083f0 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80083f6:	003a      	movs	r2, r7
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	0011      	movs	r1, r2
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff ff87 	bl	8008310 <RTC_GetTime>
  return currentDate.WeekDay;
 8008402:	003b      	movs	r3, r7
 8008404:	781b      	ldrb	r3, [r3, #0]
}
 8008406:	0018      	movs	r0, r3
 8008408:	46bd      	mov	sp, r7
 800840a:	b006      	add	sp, #24
 800840c:	bd80      	pop	{r7, pc}

0800840e <getPosixTime>:

uint32_t getPosixTime(void) {
 800840e:	b580      	push	{r7, lr}
 8008410:	b086      	sub	sp, #24
 8008412:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008414:	003a      	movs	r2, r7
 8008416:	1d3b      	adds	r3, r7, #4
 8008418:	0011      	movs	r1, r2
 800841a:	0018      	movs	r0, r3
 800841c:	f7ff ff78 	bl	8008310 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8008420:	1d3a      	adds	r2, r7, #4
 8008422:	003b      	movs	r3, r7
 8008424:	0011      	movs	r1, r2
 8008426:	0018      	movs	r0, r3
 8008428:	f000 f944 	bl	80086b4 <makeTime>
 800842c:	0003      	movs	r3, r0
}
 800842e:	0018      	movs	r0, r3
 8008430:	46bd      	mov	sp, r7
 8008432:	b006      	add	sp, #24
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8008438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843a:	b08d      	sub	sp, #52	@ 0x34
 800843c:	af04      	add	r7, sp, #16
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8008442:	240c      	movs	r4, #12
 8008444:	193a      	adds	r2, r7, r4
 8008446:	2508      	movs	r5, #8
 8008448:	1979      	adds	r1, r7, r5
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	0018      	movs	r0, r3
 800844e:	f000 f9fb 	bl	8008848 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8008452:	002a      	movs	r2, r5
 8008454:	18bb      	adds	r3, r7, r2
 8008456:	789b      	ldrb	r3, [r3, #2]
 8008458:	001e      	movs	r6, r3
 800845a:	18bb      	adds	r3, r7, r2
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	469c      	mov	ip, r3
 8008460:	18bb      	adds	r3, r7, r2
 8008462:	78db      	ldrb	r3, [r3, #3]
 8008464:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8008466:	0021      	movs	r1, r4
 8008468:	187b      	adds	r3, r7, r1
 800846a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800846c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800846e:	187b      	adds	r3, r7, r1
 8008470:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8008472:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8008474:	187b      	adds	r3, r7, r1
 8008476:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8008478:	4906      	ldr	r1, [pc, #24]	@ (8008494 <getUTCfromPosixTime+0x5c>)
 800847a:	6838      	ldr	r0, [r7, #0]
 800847c:	9303      	str	r3, [sp, #12]
 800847e:	9502      	str	r5, [sp, #8]
 8008480:	9401      	str	r4, [sp, #4]
 8008482:	9200      	str	r2, [sp, #0]
 8008484:	4663      	mov	r3, ip
 8008486:	0032      	movs	r2, r6
 8008488:	f01b f99c 	bl	80237c4 <siprintf>
}
 800848c:	46c0      	nop			@ (mov r8, r8)
 800848e:	46bd      	mov	sp, r7
 8008490:	b009      	add	sp, #36	@ 0x24
 8008492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008494:	08028ef0 	.word	0x08028ef0

08008498 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80084a0:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <RTC_SetWakeUpTimer+0x4c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	0018      	movs	r0, r3
 80084a6:	f011 fd33 	bl	8019f10 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80084aa:	4b0e      	ldr	r3, [pc, #56]	@ (80084e4 <RTC_SetWakeUpTimer+0x4c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	22ff      	movs	r2, #255	@ 0xff
 80084b4:	401a      	ands	r2, r3
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <RTC_SetWakeUpTimer+0x4c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	490a      	ldr	r1, [pc, #40]	@ (80084e8 <RTC_SetWakeUpTimer+0x50>)
 80084be:	430a      	orrs	r2, r1
 80084c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80084c2:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <RTC_SetWakeUpTimer+0x54>)
 80084c4:	2280      	movs	r2, #128	@ 0x80
 80084c6:	0352      	lsls	r2, r2, #13
 80084c8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80084ca:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <RTC_SetWakeUpTimer+0x4c>)
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	2204      	movs	r2, #4
 80084d4:	0019      	movs	r1, r3
 80084d6:	f011 fc43 	bl	8019d60 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80084da:	46c0      	nop			@ (mov r8, r8)
 80084dc:	46bd      	mov	sp, r7
 80084de:	b002      	add	sp, #8
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	46c0      	nop			@ (mov r8, r8)
 80084e4:	20000b38 	.word	0x20000b38
 80084e8:	fffffb7f 	.word	0xfffffb7f
 80084ec:	40010400 	.word	0x40010400

080084f0 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80084f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008524 <Enter_Standby_Mode+0x34>)
 80084f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008528 <Enter_Standby_Mode+0x38>)
 80084f8:	0019      	movs	r1, r3
 80084fa:	2003      	movs	r0, #3
 80084fc:	f009 f96a 	bl	80117d4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8008500:	2064      	movs	r0, #100	@ 0x64
 8008502:	f009 fdbd 	bl	8012080 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8008506:	4b09      	ldr	r3, [pc, #36]	@ (800852c <Enter_Standby_Mode+0x3c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	0018      	movs	r0, r3
 800850c:	f011 fd00 	bl	8019f10 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8008510:	f002 f8dc 	bl	800a6cc <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8008514:	f009 fdd8 	bl	80120c8 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8008518:	f010 f95a 	bl	80187d0 <HAL_PWR_EnterSTANDBYMode>
}
 800851c:	46c0      	nop			@ (mov r8, r8)
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	46c0      	nop			@ (mov r8, r8)
 8008524:	08028f44 	.word	0x08028f44
 8008528:	08028e2c 	.word	0x08028e2c
 800852c:	20000b38 	.word	0x20000b38

08008530 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af02      	add	r7, sp, #8
 8008536:	0002      	movs	r2, r0
 8008538:	1dbb      	adds	r3, r7, #6
 800853a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800853c:	4b4a      	ldr	r3, [pc, #296]	@ (8008668 <Enter_Stop_Mode+0x138>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8008544:	f003 ff30 	bl	800c3a8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8008548:	f7ff fbac 	bl	8007ca4 <ReadBatteryVoltage>
 800854c:	1c03      	adds	r3, r0, #0
 800854e:	1c18      	adds	r0, r3, #0
 8008550:	f7fa ff88 	bl	8003464 <__aeabi_f2d>
 8008554:	0002      	movs	r2, r0
 8008556:	000b      	movs	r3, r1
 8008558:	4844      	ldr	r0, [pc, #272]	@ (800866c <Enter_Stop_Mode+0x13c>)
 800855a:	4945      	ldr	r1, [pc, #276]	@ (8008670 <Enter_Stop_Mode+0x140>)
 800855c:	9200      	str	r2, [sp, #0]
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	0002      	movs	r2, r0
 8008562:	2002      	movs	r0, #2
 8008564:	f009 f936 	bl	80117d4 <CreateLine>
  powerDisplay(powerCheck());
 8008568:	f008 f9c6 	bl	80108f8 <powerCheck>
 800856c:	0003      	movs	r3, r0
 800856e:	0018      	movs	r0, r3
 8008570:	f008 f9de 	bl	8010930 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8008574:	1dbb      	adds	r3, r7, #6
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	4a3e      	ldr	r2, [pc, #248]	@ (8008674 <Enter_Stop_Mode+0x144>)
 800857a:	493f      	ldr	r1, [pc, #252]	@ (8008678 <Enter_Stop_Mode+0x148>)
 800857c:	2003      	movs	r0, #3
 800857e:	f009 f929 	bl	80117d4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8008582:	f7ff ff44 	bl	800840e <getPosixTime>
 8008586:	0002      	movs	r2, r0
 8008588:	1dbb      	adds	r3, r7, #6
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	18d3      	adds	r3, r2, r3
 800858e:	4a3b      	ldr	r2, [pc, #236]	@ (800867c <Enter_Stop_Mode+0x14c>)
 8008590:	0011      	movs	r1, r2
 8008592:	0018      	movs	r0, r3
 8008594:	f7ff ff50 	bl	8008438 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8008598:	4b38      	ldr	r3, [pc, #224]	@ (800867c <Enter_Stop_Mode+0x14c>)
 800859a:	4a39      	ldr	r2, [pc, #228]	@ (8008680 <Enter_Stop_Mode+0x150>)
 800859c:	4934      	ldr	r1, [pc, #208]	@ (8008670 <Enter_Stop_Mode+0x140>)
 800859e:	2002      	movs	r0, #2
 80085a0:	f009 f918 	bl	80117d4 <CreateLine>
  HAL_Delay(100);
 80085a4:	2064      	movs	r0, #100	@ 0x64
 80085a6:	f009 fd6b 	bl	8012080 <HAL_Delay>
  HAL_SuspendTick();
 80085aa:	f009 fd8d 	bl	80120c8 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80085ae:	1dbb      	adds	r3, r7, #6
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	0018      	movs	r0, r3
 80085b4:	f7ff ff70 	bl	8008498 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80085b8:	2101      	movs	r1, #1
 80085ba:	2001      	movs	r0, #1
 80085bc:	f010 f8ac 	bl	8018718 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80085c0:	f002 fcfa 	bl	800afb8 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80085c4:	f009 fd8e 	bl	80120e4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 80085c8:	1dbb      	adds	r3, r7, #6
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	0018      	movs	r0, r3
 80085ce:	f003 fe5f 	bl	800c290 <sen5x_enable>
 80085d2:	1e03      	subs	r3, r0, #0
 80085d4:	d01e      	beq.n	8008614 <Enter_Stop_Mode+0xe4>
    showTime();
 80085d6:	f7ff fc4b 	bl	8007e70 <showTime>
    set_light_on_state();
 80085da:	f004 fb67 	bl	800ccac <set_light_on_state>
    if (!userToggle) {
 80085de:	4b29      	ldr	r3, [pc, #164]	@ (8008684 <Enter_Stop_Mode+0x154>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	4053      	eors	r3, r2
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d013      	beq.n	8008614 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80085ec:	201c      	movs	r0, #28
 80085ee:	f7ff ff53 	bl	8008498 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80085f2:	4a20      	ldr	r2, [pc, #128]	@ (8008674 <Enter_Stop_Mode+0x144>)
 80085f4:	4920      	ldr	r1, [pc, #128]	@ (8008678 <Enter_Stop_Mode+0x148>)
 80085f6:	231c      	movs	r3, #28
 80085f8:	2003      	movs	r0, #3
 80085fa:	f009 f8eb 	bl	80117d4 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80085fe:	2101      	movs	r1, #1
 8008600:	2001      	movs	r0, #1
 8008602:	f010 f889 	bl	8018718 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8008606:	f002 fcd7 	bl	800afb8 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800860a:	f009 fd6b 	bl	80120e4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800860e:	2000      	movs	r0, #0
 8008610:	f003 fe1c 	bl	800c24c <setsen5xReadTimer>
    }
  }
  showTime();
 8008614:	f7ff fc2c 	bl	8007e70 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8008618:	f003 fab2 	bl	800bb80 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800861c:	f006 f9a2 	bl	800e964 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8008620:	2000      	movs	r0, #0
 8008622:	f003 fe25 	bl	800c270 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8008626:	4b18      	ldr	r3, [pc, #96]	@ (8008688 <Enter_Stop_Mode+0x158>)
 8008628:	0018      	movs	r0, r3
 800862a:	f7fb fedf 	bl	80043ec <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800862e:	201e      	movs	r0, #30
 8008630:	f006 f986 	bl	800e940 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8008634:	2000      	movs	r0, #0
 8008636:	f009 fa91 	bl	8011b5c <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800863a:	203c      	movs	r0, #60	@ 0x3c
 800863c:	f000 fb94 	bl	8008d68 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8008640:	205a      	movs	r0, #90	@ 0x5a
 8008642:	f000 ff2d 	bl	80094a0 <setBMP280TimeStamp>
  setMICTimeStamp(0);
 8008646:	2000      	movs	r0, #0
 8008648:	f003 fa88 	bl	800bb5c <setMICTimeStamp>
  ESPTransmitDone = false;
 800864c:	4b0f      	ldr	r3, [pc, #60]	@ (800868c <Enter_Stop_Mode+0x15c>)
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8008652:	f009 fd0b 	bl	801206c <HAL_GetTick>
 8008656:	0003      	movs	r3, r0
 8008658:	4a0d      	ldr	r2, [pc, #52]	@ (8008690 <Enter_Stop_Mode+0x160>)
 800865a:	189a      	adds	r2, r3, r2
 800865c:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <Enter_Stop_Mode+0x164>)
 800865e:	601a      	str	r2, [r3, #0]
}
 8008660:	46c0      	nop			@ (mov r8, r8)
 8008662:	46bd      	mov	sp, r7
 8008664:	b002      	add	sp, #8
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000e9d 	.word	0x20000e9d
 800866c:	08028f68 	.word	0x08028f68
 8008670:	08028f80 	.word	0x08028f80
 8008674:	08028f84 	.word	0x08028f84
 8008678:	08028e2c 	.word	0x08028e2c
 800867c:	20000b40 	.word	0x20000b40
 8008680:	08028fa8 	.word	0x08028fa8
 8008684:	20001e2e 	.word	0x20001e2e
 8008688:	00001194 	.word	0x00001194
 800868c:	200005bc 	.word	0x200005bc
 8008690:	00000bb8 	.word	0x00000bb8
 8008694:	20000df4 	.word	0x20000df4

08008698 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80086a0:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <InitClock+0x18>)
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	46bd      	mov	sp, r7
 80086aa:	b002      	add	sp, #8
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	20000b38 	.word	0x20000b38

080086b4 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	001a      	movs	r2, r3
 80086c4:	0013      	movs	r3, r2
 80086c6:	025b      	lsls	r3, r3, #9
 80086c8:	189b      	adds	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	189b      	adds	r3, r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	189b      	adds	r3, r3, r2
 80086d2:	011a      	lsls	r2, r3, #4
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	01d3      	lsls	r3, r2, #7
 80086d8:	001a      	movs	r2, r3
 80086da:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e028      	b.n	8008734 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a53      	ldr	r2, [pc, #332]	@ (8008834 <makeTime+0x180>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	db21      	blt.n	800872e <makeTime+0x7a>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4a52      	ldr	r2, [pc, #328]	@ (8008838 <makeTime+0x184>)
 80086ee:	4694      	mov	ip, r2
 80086f0:	4463      	add	r3, ip
 80086f2:	001a      	movs	r2, r3
 80086f4:	2303      	movs	r3, #3
 80086f6:	4013      	ands	r3, r2
 80086f8:	d119      	bne.n	800872e <makeTime+0x7a>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4a4e      	ldr	r2, [pc, #312]	@ (8008838 <makeTime+0x184>)
 80086fe:	4694      	mov	ip, r2
 8008700:	4463      	add	r3, ip
 8008702:	2164      	movs	r1, #100	@ 0x64
 8008704:	0018      	movs	r0, r3
 8008706:	f7f7 febd 	bl	8000484 <__aeabi_idivmod>
 800870a:	1e0b      	subs	r3, r1, #0
 800870c:	d10a      	bne.n	8008724 <makeTime+0x70>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a49      	ldr	r2, [pc, #292]	@ (8008838 <makeTime+0x184>)
 8008712:	4694      	mov	ip, r2
 8008714:	4463      	add	r3, ip
 8008716:	22c8      	movs	r2, #200	@ 0xc8
 8008718:	0051      	lsls	r1, r2, #1
 800871a:	0018      	movs	r0, r3
 800871c:	f7f7 feb2 	bl	8000484 <__aeabi_idivmod>
 8008720:	1e0b      	subs	r3, r1, #0
 8008722:	d104      	bne.n	800872e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4a45      	ldr	r2, [pc, #276]	@ (800883c <makeTime+0x188>)
 8008728:	4694      	mov	ip, r2
 800872a:	4463      	add	r3, ip
 800872c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	78db      	ldrb	r3, [r3, #3]
 8008738:	001a      	movs	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4293      	cmp	r3, r2
 800873e:	dbd0      	blt.n	80086e2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8008740:	2301      	movs	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e03c      	b.n	80087c0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d125      	bne.n	8008798 <makeTime+0xe4>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	78db      	ldrb	r3, [r3, #3]
 8008750:	4a39      	ldr	r2, [pc, #228]	@ (8008838 <makeTime+0x184>)
 8008752:	4694      	mov	ip, r2
 8008754:	4463      	add	r3, ip
 8008756:	001a      	movs	r2, r3
 8008758:	2303      	movs	r3, #3
 800875a:	4013      	ands	r3, r2
 800875c:	d11c      	bne.n	8008798 <makeTime+0xe4>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	78db      	ldrb	r3, [r3, #3]
 8008762:	4a35      	ldr	r2, [pc, #212]	@ (8008838 <makeTime+0x184>)
 8008764:	4694      	mov	ip, r2
 8008766:	4463      	add	r3, ip
 8008768:	2164      	movs	r1, #100	@ 0x64
 800876a:	0018      	movs	r0, r3
 800876c:	f7f7 fe8a 	bl	8000484 <__aeabi_idivmod>
 8008770:	1e0b      	subs	r3, r1, #0
 8008772:	d10b      	bne.n	800878c <makeTime+0xd8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	78db      	ldrb	r3, [r3, #3]
 8008778:	4a2f      	ldr	r2, [pc, #188]	@ (8008838 <makeTime+0x184>)
 800877a:	4694      	mov	ip, r2
 800877c:	4463      	add	r3, ip
 800877e:	22c8      	movs	r2, #200	@ 0xc8
 8008780:	0051      	lsls	r1, r2, #1
 8008782:	0018      	movs	r0, r3
 8008784:	f7f7 fe7e 	bl	8000484 <__aeabi_idivmod>
 8008788:	1e0b      	subs	r3, r1, #0
 800878a:	d105      	bne.n	8008798 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4a2c      	ldr	r2, [pc, #176]	@ (8008840 <makeTime+0x18c>)
 8008790:	4694      	mov	ip, r2
 8008792:	4463      	add	r3, ip
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	e010      	b.n	80087ba <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a29      	ldr	r2, [pc, #164]	@ (8008844 <makeTime+0x190>)
 800879e:	5cd3      	ldrb	r3, [r2, r3]
 80087a0:	001a      	movs	r2, r3
 80087a2:	0013      	movs	r3, r2
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	011a      	lsls	r2, r3, #4
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	0113      	lsls	r3, r2, #4
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	01db      	lsls	r3, r3, #7
 80087b2:	001a      	movs	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	189b      	adds	r3, r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3301      	adds	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	001a      	movs	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4293      	cmp	r3, r2
 80087ca:	dbbc      	blt.n	8008746 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	789b      	ldrb	r3, [r3, #2]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	001a      	movs	r2, r3
 80087d4:	0013      	movs	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	189b      	adds	r3, r3, r2
 80087da:	011a      	lsls	r2, r3, #4
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	0113      	lsls	r3, r2, #4
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	01db      	lsls	r3, r3, #7
 80087e4:	001a      	movs	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	189b      	adds	r3, r3, r2
 80087ea:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	001a      	movs	r2, r3
 80087f2:	0013      	movs	r3, r2
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	011a      	lsls	r2, r3, #4
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	0113      	lsls	r3, r2, #4
 80087fe:	001a      	movs	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	189b      	adds	r3, r3, r2
 8008804:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	001a      	movs	r2, r3
 800880c:	0013      	movs	r3, r2
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	001a      	movs	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	189b      	adds	r3, r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	789b      	ldrb	r3, [r3, #2]
 8008820:	001a      	movs	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	189b      	adds	r3, r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
  return seconds;
 8008828:	68bb      	ldr	r3, [r7, #8]
}
 800882a:	0018      	movs	r0, r3
 800882c:	46bd      	mov	sp, r7
 800882e:	b004      	add	sp, #16
 8008830:	bd80      	pop	{r7, pc}
 8008832:	46c0      	nop			@ (mov r8, r8)
 8008834:	fffff84f 	.word	0xfffff84f
 8008838:	000007b2 	.word	0x000007b2
 800883c:	00015180 	.word	0x00015180
 8008840:	00263b80 	.word	0x00263b80
 8008844:	0802af48 	.word	0x0802af48

08008848 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8008848:	b590      	push	{r4, r7, lr}
 800884a:	b089      	sub	sp, #36	@ 0x24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	213c      	movs	r1, #60	@ 0x3c
 800885c:	0018      	movs	r0, r3
 800885e:	f7f7 fd27 	bl	80002b0 <__aeabi_uidivmod>
 8008862:	000b      	movs	r3, r1
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	213c      	movs	r1, #60	@ 0x3c
 800886e:	0018      	movs	r0, r3
 8008870:	f7f7 fc98 	bl	80001a4 <__udivsi3>
 8008874:	0003      	movs	r3, r0
 8008876:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	213c      	movs	r1, #60	@ 0x3c
 800887c:	0018      	movs	r0, r3
 800887e:	f7f7 fd17 	bl	80002b0 <__aeabi_uidivmod>
 8008882:	000b      	movs	r3, r1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	213c      	movs	r1, #60	@ 0x3c
 800888e:	0018      	movs	r0, r3
 8008890:	f7f7 fc88 	bl	80001a4 <__udivsi3>
 8008894:	0003      	movs	r3, r0
 8008896:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2118      	movs	r1, #24
 800889c:	0018      	movs	r0, r3
 800889e:	f7f7 fd07 	bl	80002b0 <__aeabi_uidivmod>
 80088a2:	000b      	movs	r3, r1
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2118      	movs	r1, #24
 80088ae:	0018      	movs	r0, r3
 80088b0:	f7f7 fc78 	bl	80001a4 <__udivsi3>
 80088b4:	0003      	movs	r3, r0
 80088b6:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	2107      	movs	r1, #7
 80088be:	0018      	movs	r0, r3
 80088c0:	f7f7 fcf6 	bl	80002b0 <__aeabi_uidivmod>
 80088c4:	000b      	movs	r3, r1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	3301      	adds	r3, #1
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	701a      	strb	r2, [r3, #0]
  year = 0;
 80088d0:	231f      	movs	r3, #31
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	2200      	movs	r2, #0
 80088d6:	701a      	strb	r2, [r3, #0]
  days = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80088dc:	e005      	b.n	80088ea <breakPosixTime+0xa2>
    year++;
 80088de:	211f      	movs	r1, #31
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	187b      	adds	r3, r7, r1
 80088e6:	3201      	adds	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80088ea:	241f      	movs	r4, #31
 80088ec:	193b      	adds	r3, r7, r4
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	4a64      	ldr	r2, [pc, #400]	@ (8008a84 <breakPosixTime+0x23c>)
 80088f2:	4694      	mov	ip, r2
 80088f4:	4463      	add	r3, ip
 80088f6:	001a      	movs	r2, r3
 80088f8:	2303      	movs	r3, #3
 80088fa:	4013      	ands	r3, r2
 80088fc:	d119      	bne.n	8008932 <breakPosixTime+0xea>
 80088fe:	193b      	adds	r3, r7, r4
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	4a60      	ldr	r2, [pc, #384]	@ (8008a84 <breakPosixTime+0x23c>)
 8008904:	4694      	mov	ip, r2
 8008906:	4463      	add	r3, ip
 8008908:	2164      	movs	r1, #100	@ 0x64
 800890a:	0018      	movs	r0, r3
 800890c:	f7f7 fdba 	bl	8000484 <__aeabi_idivmod>
 8008910:	1e0b      	subs	r3, r1, #0
 8008912:	d10b      	bne.n	800892c <breakPosixTime+0xe4>
 8008914:	193b      	adds	r3, r7, r4
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	4a5a      	ldr	r2, [pc, #360]	@ (8008a84 <breakPosixTime+0x23c>)
 800891a:	4694      	mov	ip, r2
 800891c:	4463      	add	r3, ip
 800891e:	22c8      	movs	r2, #200	@ 0xc8
 8008920:	0051      	lsls	r1, r2, #1
 8008922:	0018      	movs	r0, r3
 8008924:	f7f7 fdae 	bl	8000484 <__aeabi_idivmod>
 8008928:	1e0b      	subs	r3, r1, #0
 800892a:	d102      	bne.n	8008932 <breakPosixTime+0xea>
 800892c:	23b7      	movs	r3, #183	@ 0xb7
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	e001      	b.n	8008936 <breakPosixTime+0xee>
 8008932:	236e      	movs	r3, #110	@ 0x6e
 8008934:	33ff      	adds	r3, #255	@ 0xff
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	18d3      	adds	r3, r2, r3
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	429a      	cmp	r2, r3
 8008942:	d9cc      	bls.n	80088de <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	241f      	movs	r4, #31
 8008948:	193a      	adds	r2, r7, r4
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800894e:	193b      	adds	r3, r7, r4
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	4a4c      	ldr	r2, [pc, #304]	@ (8008a84 <breakPosixTime+0x23c>)
 8008954:	4694      	mov	ip, r2
 8008956:	4463      	add	r3, ip
 8008958:	001a      	movs	r2, r3
 800895a:	2303      	movs	r3, #3
 800895c:	4013      	ands	r3, r2
 800895e:	d119      	bne.n	8008994 <breakPosixTime+0x14c>
 8008960:	193b      	adds	r3, r7, r4
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	4a47      	ldr	r2, [pc, #284]	@ (8008a84 <breakPosixTime+0x23c>)
 8008966:	4694      	mov	ip, r2
 8008968:	4463      	add	r3, ip
 800896a:	2164      	movs	r1, #100	@ 0x64
 800896c:	0018      	movs	r0, r3
 800896e:	f7f7 fd89 	bl	8000484 <__aeabi_idivmod>
 8008972:	1e0b      	subs	r3, r1, #0
 8008974:	d10b      	bne.n	800898e <breakPosixTime+0x146>
 8008976:	193b      	adds	r3, r7, r4
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	4a42      	ldr	r2, [pc, #264]	@ (8008a84 <breakPosixTime+0x23c>)
 800897c:	4694      	mov	ip, r2
 800897e:	4463      	add	r3, ip
 8008980:	22c8      	movs	r2, #200	@ 0xc8
 8008982:	0051      	lsls	r1, r2, #1
 8008984:	0018      	movs	r0, r3
 8008986:	f7f7 fd7d 	bl	8000484 <__aeabi_idivmod>
 800898a:	1e0b      	subs	r3, r1, #0
 800898c:	d102      	bne.n	8008994 <breakPosixTime+0x14c>
 800898e:	23b7      	movs	r3, #183	@ 0xb7
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	e001      	b.n	8008998 <breakPosixTime+0x150>
 8008994:	236e      	movs	r3, #110	@ 0x6e
 8008996:	33ff      	adds	r3, #255	@ 0xff
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	61bb      	str	r3, [r7, #24]

  days=0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	617b      	str	r3, [r7, #20]
  month=0;
 80089aa:	211e      	movs	r1, #30
 80089ac:	187b      	adds	r3, r7, r1
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 80089b2:	231d      	movs	r3, #29
 80089b4:	18fb      	adds	r3, r7, r3
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 80089ba:	187b      	adds	r3, r7, r1
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	e048      	b.n	8008a54 <breakPosixTime+0x20c>
    if (month==1) { // february
 80089c2:	231e      	movs	r3, #30
 80089c4:	18fb      	adds	r3, r7, r3
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d12a      	bne.n	8008a22 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 80089cc:	241f      	movs	r4, #31
 80089ce:	193b      	adds	r3, r7, r4
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008a84 <breakPosixTime+0x23c>)
 80089d4:	4694      	mov	ip, r2
 80089d6:	4463      	add	r3, ip
 80089d8:	001a      	movs	r2, r3
 80089da:	2303      	movs	r3, #3
 80089dc:	4013      	ands	r3, r2
 80089de:	d11b      	bne.n	8008a18 <breakPosixTime+0x1d0>
 80089e0:	193b      	adds	r3, r7, r4
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4a27      	ldr	r2, [pc, #156]	@ (8008a84 <breakPosixTime+0x23c>)
 80089e6:	4694      	mov	ip, r2
 80089e8:	4463      	add	r3, ip
 80089ea:	2164      	movs	r1, #100	@ 0x64
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7f7 fd49 	bl	8000484 <__aeabi_idivmod>
 80089f2:	1e0b      	subs	r3, r1, #0
 80089f4:	d10b      	bne.n	8008a0e <breakPosixTime+0x1c6>
 80089f6:	193b      	adds	r3, r7, r4
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	4a22      	ldr	r2, [pc, #136]	@ (8008a84 <breakPosixTime+0x23c>)
 80089fc:	4694      	mov	ip, r2
 80089fe:	4463      	add	r3, ip
 8008a00:	22c8      	movs	r2, #200	@ 0xc8
 8008a02:	0051      	lsls	r1, r2, #1
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7f7 fd3d 	bl	8000484 <__aeabi_idivmod>
 8008a0a:	1e0b      	subs	r3, r1, #0
 8008a0c:	d104      	bne.n	8008a18 <breakPosixTime+0x1d0>
        monthLength=29;
 8008a0e:	231d      	movs	r3, #29
 8008a10:	18fb      	adds	r3, r7, r3
 8008a12:	221d      	movs	r2, #29
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e00c      	b.n	8008a32 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8008a18:	231d      	movs	r3, #29
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	221c      	movs	r2, #28
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e007      	b.n	8008a32 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8008a22:	231e      	movs	r3, #30
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	231d      	movs	r3, #29
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	4916      	ldr	r1, [pc, #88]	@ (8008a88 <breakPosixTime+0x240>)
 8008a2e:	5c8a      	ldrb	r2, [r1, r2]
 8008a30:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8008a32:	211d      	movs	r1, #29
 8008a34:	187b      	adds	r3, r7, r1
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d310      	bcc.n	8008a60 <breakPosixTime+0x218>
      time -= monthLength;
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8008a48:	211e      	movs	r1, #30
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	3201      	adds	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	231e      	movs	r3, #30
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b0b      	cmp	r3, #11
 8008a5c:	d9b1      	bls.n	80089c2 <breakPosixTime+0x17a>
 8008a5e:	e000      	b.n	8008a62 <breakPosixTime+0x21a>
    } else {
        break;
 8008a60:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8008a62:	231e      	movs	r3, #30
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	3301      	adds	r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	709a      	strb	r2, [r3, #2]
}
 8008a7c:	46c0      	nop			@ (mov r8, r8)
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b009      	add	sp, #36	@ 0x24
 8008a82:	bd90      	pop	{r4, r7, pc}
 8008a84:	000007b2 	.word	0x000007b2
 8008a88:	0802af48 	.word	0x0802af48

08008a8c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008a92:	003b      	movs	r3, r7
 8008a94:	0018      	movs	r0, r3
 8008a96:	2308      	movs	r3, #8
 8008a98:	001a      	movs	r2, r3
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f01a fff8 	bl	8023a90 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8008aa0:	4b30      	ldr	r3, [pc, #192]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008aa2:	4a31      	ldr	r2, [pc, #196]	@ (8008b68 <MX_ADC_Init+0xdc>)
 8008aa4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008aac:	4b2d      	ldr	r3, [pc, #180]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008aae:	22c0      	movs	r2, #192	@ 0xc0
 8008ab0:	0612      	lsls	r2, r2, #24
 8008ab2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008aba:	4b2a      	ldr	r3, [pc, #168]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008ac0:	4b28      	ldr	r3, [pc, #160]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008ac6:	4b27      	ldr	r3, [pc, #156]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8008acc:	4b25      	ldr	r3, [pc, #148]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ace:	2220      	movs	r2, #32
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8008ad4:	4b23      	ldr	r3, [pc, #140]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ad6:	2221      	movs	r2, #33	@ 0x21
 8008ad8:	2101      	movs	r1, #1
 8008ada:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008adc:	4b21      	ldr	r3, [pc, #132]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008ae2:	4b20      	ldr	r3, [pc, #128]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008ae4:	22c2      	movs	r2, #194	@ 0xc2
 8008ae6:	32ff      	adds	r2, #255	@ 0xff
 8008ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8008aea:	4b1e      	ldr	r3, [pc, #120]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008aec:	222c      	movs	r2, #44	@ 0x2c
 8008aee:	2100      	movs	r1, #0
 8008af0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008af4:	2204      	movs	r2, #4
 8008af6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008af8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8008afe:	4b19      	ldr	r3, [pc, #100]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8008b04:	4b17      	ldr	r3, [pc, #92]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b0a:	4b16      	ldr	r3, [pc, #88]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008b10:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b12:	0018      	movs	r0, r3
 8008b14:	f009 fb12 	bl	801213c <HAL_ADC_Init>
 8008b18:	1e03      	subs	r3, r0, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8008b1c:	f002 fb9c 	bl	800b258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008b20:	003b      	movs	r3, r7
 8008b22:	4a12      	ldr	r2, [pc, #72]	@ (8008b6c <MX_ADC_Init+0xe0>)
 8008b24:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b26:	003b      	movs	r3, r7
 8008b28:	2280      	movs	r2, #128	@ 0x80
 8008b2a:	0152      	lsls	r2, r2, #5
 8008b2c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008b2e:	003a      	movs	r2, r7
 8008b30:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f009 fd71 	bl	801261c <HAL_ADC_ConfigChannel>
 8008b3a:	1e03      	subs	r3, r0, #0
 8008b3c:	d001      	beq.n	8008b42 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8008b3e:	f002 fb8b 	bl	800b258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008b42:	003b      	movs	r3, r7
 8008b44:	4a0a      	ldr	r2, [pc, #40]	@ (8008b70 <MX_ADC_Init+0xe4>)
 8008b46:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008b48:	003a      	movs	r2, r7
 8008b4a:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <MX_ADC_Init+0xd8>)
 8008b4c:	0011      	movs	r1, r2
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f009 fd64 	bl	801261c <HAL_ADC_ConfigChannel>
 8008b54:	1e03      	subs	r3, r0, #0
 8008b56:	d001      	beq.n	8008b5c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8008b58:	f002 fb7e 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8008b5c:	46c0      	nop			@ (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b002      	add	sp, #8
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000b58 	.word	0x20000b58
 8008b68:	40012400 	.word	0x40012400
 8008b6c:	38004000 	.word	0x38004000
 8008b70:	3c008000 	.word	0x3c008000

08008b74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b089      	sub	sp, #36	@ 0x24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b7c:	240c      	movs	r4, #12
 8008b7e:	193b      	adds	r3, r7, r4
 8008b80:	0018      	movs	r0, r3
 8008b82:	2314      	movs	r3, #20
 8008b84:	001a      	movs	r2, r3
 8008b86:	2100      	movs	r1, #0
 8008b88:	f01a ff82 	bl	8023a90 <memset>
  if(adcHandle->Instance==ADC1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <HAL_ADC_MspInit+0x70>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d121      	bne.n	8008bda <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008b96:	4b14      	ldr	r3, [pc, #80]	@ (8008be8 <HAL_ADC_MspInit+0x74>)
 8008b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b9a:	4b13      	ldr	r3, [pc, #76]	@ (8008be8 <HAL_ADC_MspInit+0x74>)
 8008b9c:	2180      	movs	r1, #128	@ 0x80
 8008b9e:	0089      	lsls	r1, r1, #2
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ba4:	4b10      	ldr	r3, [pc, #64]	@ (8008be8 <HAL_ADC_MspInit+0x74>)
 8008ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <HAL_ADC_MspInit+0x74>)
 8008baa:	2104      	movs	r1, #4
 8008bac:	430a      	orrs	r2, r1
 8008bae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008be8 <HAL_ADC_MspInit+0x74>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8008bbc:	193b      	adds	r3, r7, r4
 8008bbe:	2230      	movs	r2, #48	@ 0x30
 8008bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008bc2:	193b      	adds	r3, r7, r4
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc8:	193b      	adds	r3, r7, r4
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bce:	193b      	adds	r3, r7, r4
 8008bd0:	4a06      	ldr	r2, [pc, #24]	@ (8008bec <HAL_ADC_MspInit+0x78>)
 8008bd2:	0019      	movs	r1, r3
 8008bd4:	0010      	movs	r0, r2
 8008bd6:	f00a fb3f 	bl	8013258 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	b009      	add	sp, #36	@ 0x24
 8008be0:	bd90      	pop	{r4, r7, pc}
 8008be2:	46c0      	nop			@ (mov r8, r8)
 8008be4:	40012400 	.word	0x40012400
 8008be8:	40021000 	.word	0x40021000
 8008bec:	50000800 	.word	0x50000800

08008bf0 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6039      	str	r1, [r7, #0]
 8008bf8:	0011      	movs	r1, r2
 8008bfa:	1dfb      	adds	r3, r7, #7
 8008bfc:	1c02      	adds	r2, r0, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	1dbb      	adds	r3, r7, #6
 8008c02:	1c0a      	adds	r2, r1, #0
 8008c04:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 8008c06:	4b0a      	ldr	r3, [pc, #40]	@ (8008c30 <ReadDirRegister+0x40>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 8008c0e:	4b08      	ldr	r3, [pc, #32]	@ (8008c30 <ReadDirRegister+0x40>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	1dba      	adds	r2, r7, #6
 8008c14:	7814      	ldrb	r4, [r2, #0]
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	1dfa      	adds	r2, r7, #7
 8008c1a:	7810      	ldrb	r0, [r2, #0]
 8008c1c:	0022      	movs	r2, r4
 8008c1e:	4798      	blx	r3
 8008c20:	0003      	movs	r3, r0
 8008c22:	e000      	b.n	8008c26 <ReadDirRegister+0x36>
  }
  return false;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	0018      	movs	r0, r3
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b003      	add	sp, #12
 8008c2c:	bd90      	pop	{r4, r7, pc}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	20000bc0 	.word	0x20000bc0

08008c34 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6039      	str	r1, [r7, #0]
 8008c3c:	0011      	movs	r1, r2
 8008c3e:	1dfb      	adds	r3, r7, #7
 8008c40:	1c02      	adds	r2, r0, #0
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	1dbb      	adds	r3, r7, #6
 8008c46:	1c0a      	adds	r2, r1, #0
 8008c48:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <ReadRegister+0x40>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8008c52:	4b08      	ldr	r3, [pc, #32]	@ (8008c74 <ReadRegister+0x40>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	1dba      	adds	r2, r7, #6
 8008c58:	7814      	ldrb	r4, [r2, #0]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	1dfa      	adds	r2, r7, #7
 8008c5e:	7810      	ldrb	r0, [r2, #0]
 8008c60:	0022      	movs	r2, r4
 8008c62:	4798      	blx	r3
 8008c64:	0003      	movs	r3, r0
 8008c66:	e000      	b.n	8008c6a <ReadRegister+0x36>
  }
  return false;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	b003      	add	sp, #12
 8008c70:	bd90      	pop	{r4, r7, pc}
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	20000bb8 	.word	0x20000bb8

08008c78 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c78:	b590      	push	{r4, r7, lr}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6039      	str	r1, [r7, #0]
 8008c80:	0011      	movs	r1, r2
 8008c82:	1dfb      	adds	r3, r7, #7
 8008c84:	1c02      	adds	r2, r0, #0
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	1dbb      	adds	r3, r7, #6
 8008c8a:	1c0a      	adds	r2, r1, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb8 <WriteRegister+0x40>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8008c96:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <WriteRegister+0x40>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1dba      	adds	r2, r7, #6
 8008c9c:	7814      	ldrb	r4, [r2, #0]
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	1dfa      	adds	r2, r7, #7
 8008ca2:	7810      	ldrb	r0, [r2, #0]
 8008ca4:	0022      	movs	r2, r4
 8008ca6:	4798      	blx	r3
 8008ca8:	0003      	movs	r3, r0
 8008caa:	e000      	b.n	8008cae <WriteRegister+0x36>
  }
  return false;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	0018      	movs	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	b003      	add	sp, #12
 8008cb4:	bd90      	pop	{r4, r7, pc}
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	20000bbc 	.word	0x20000bbc

08008cbc <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	000a      	movs	r2, r1
 8008cc6:	1cfb      	adds	r3, r7, #3
 8008cc8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8008cca:	230f      	movs	r3, #15
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	22ff      	movs	r2, #255	@ 0xff
 8008cd0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008cd2:	230e      	movs	r3, #14
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	e037      	b.n	8008d4c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008cdc:	230e      	movs	r3, #14
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	18d3      	adds	r3, r2, r3
 8008ce6:	7819      	ldrb	r1, [r3, #0]
 8008ce8:	220f      	movs	r2, #15
 8008cea:	18bb      	adds	r3, r7, r2
 8008cec:	18ba      	adds	r2, r7, r2
 8008cee:	7812      	ldrb	r2, [r2, #0]
 8008cf0:	404a      	eors	r2, r1
 8008cf2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008cf4:	230d      	movs	r3, #13
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	e01b      	b.n	8008d36 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8008cfe:	210f      	movs	r1, #15
 8008d00:	187b      	adds	r3, r7, r1
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	da09      	bge.n	8008d1e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8008d0a:	187b      	adds	r3, r7, r1
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	b25b      	sxtb	r3, r3
 8008d12:	2231      	movs	r2, #49	@ 0x31
 8008d14:	4053      	eors	r3, r2
 8008d16:	b25a      	sxtb	r2, r3
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e005      	b.n	8008d2a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d1e:	230f      	movs	r3, #15
 8008d20:	18fa      	adds	r2, r7, r3
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	18db      	adds	r3, r3, r3
 8008d28:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d2a:	210d      	movs	r1, #13
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	187b      	adds	r3, r7, r1
 8008d32:	3201      	adds	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	230d      	movs	r3, #13
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b07      	cmp	r3, #7
 8008d3e:	d9de      	bls.n	8008cfe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d40:	210e      	movs	r1, #14
 8008d42:	187b      	adds	r3, r7, r1
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	187b      	adds	r3, r7, r1
 8008d48:	3201      	adds	r2, #1
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	230e      	movs	r3, #14
 8008d4e:	18fa      	adds	r2, r7, r3
 8008d50:	1cfb      	adds	r3, r7, #3
 8008d52:	7812      	ldrb	r2, [r2, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3c0      	bcc.n	8008cdc <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008d5a:	230f      	movs	r3, #15
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	781b      	ldrb	r3, [r3, #0]
}
 8008d60:	0018      	movs	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	b004      	add	sp, #16
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8008d70:	f009 f97c 	bl	801206c <HAL_GetTick>
 8008d74:	0002      	movs	r2, r0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	18d2      	adds	r2, r2, r3
 8008d7a:	4b03      	ldr	r3, [pc, #12]	@ (8008d88 <setAHT20TimeStamp+0x20>)
 8008d7c:	601a      	str	r2, [r3, #0]
}
 8008d7e:	46c0      	nop			@ (mov r8, r8)
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b002      	add	sp, #8
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	46c0      	nop			@ (mov r8, r8)
 8008d88:	20000bb4 	.word	0x20000bb4

08008d8c <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8008d98:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <AHT_Init+0x28>)
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8008d9e:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <AHT_Init+0x2c>)
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008da4:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <AHT_Init+0x30>)
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	46c0      	nop			@ (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b004      	add	sp, #16
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	20000bc0 	.word	0x20000bc0
 8008db8:	20000bb8 	.word	0x20000bb8
 8008dbc:	20000bbc 	.word	0x20000bbc

08008dc0 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af02      	add	r7, sp, #8
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	1dfb      	adds	r3, r7, #7
 8008dca:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8008dcc:	4b18      	ldr	r3, [pc, #96]	@ (8008e30 <AHT20_register_reset+0x70>)
 8008dce:	1dfa      	adds	r2, r7, #7
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8008dd4:	4b16      	ldr	r3, [pc, #88]	@ (8008e30 <AHT20_register_reset+0x70>)
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	0019      	movs	r1, r3
 8008dda:	2038      	movs	r0, #56	@ 0x38
 8008ddc:	f7ff ff4c 	bl	8008c78 <WriteRegister>
  HAL_Delay(15);
 8008de0:	200f      	movs	r0, #15
 8008de2:	f009 f94d 	bl	8012080 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008de6:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <AHT20_register_reset+0x74>)
 8008de8:	2203      	movs	r2, #3
 8008dea:	0019      	movs	r1, r3
 8008dec:	2038      	movs	r0, #56	@ 0x38
 8008dee:	f7ff ff21 	bl	8008c34 <ReadRegister>
  HAL_Delay(15);
 8008df2:	200f      	movs	r0, #15
 8008df4:	f009 f944 	bl	8012080 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8008df8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <AHT20_register_reset+0x74>)
 8008dfa:	22b0      	movs	r2, #176	@ 0xb0
 8008dfc:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <AHT20_register_reset+0x74>)
 8008e00:	789b      	ldrb	r3, [r3, #2]
 8008e02:	0018      	movs	r0, r3
 8008e04:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <AHT20_register_reset+0x74>)
 8008e06:	78db      	ldrb	r3, [r3, #3]
 8008e08:	4a0b      	ldr	r2, [pc, #44]	@ (8008e38 <AHT20_register_reset+0x78>)
 8008e0a:	490c      	ldr	r1, [pc, #48]	@ (8008e3c <AHT20_register_reset+0x7c>)
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	0003      	movs	r3, r0
 8008e10:	2003      	movs	r0, #3
 8008e12:	f008 fcdf 	bl	80117d4 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008e16:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <AHT20_register_reset+0x74>)
 8008e18:	2203      	movs	r2, #3
 8008e1a:	0019      	movs	r1, r3
 8008e1c:	2038      	movs	r0, #56	@ 0x38
 8008e1e:	f7ff ff2b 	bl	8008c78 <WriteRegister>
  HAL_Delay(15);
 8008e22:	200f      	movs	r0, #15
 8008e24:	f009 f92c 	bl	8012080 <HAL_Delay>
}
 8008e28:	46c0      	nop			@ (mov r8, r8)
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000090 	.word	0x20000090
 8008e34:	20000bc4 	.word	0x20000bc4
 8008e38:	08028fc8 	.word	0x08028fc8
 8008e3c:	08029018 	.word	0x08029018

08008e40 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8008e44:	201b      	movs	r0, #27
 8008e46:	f7ff ffbb 	bl	8008dc0 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8008e4a:	201c      	movs	r0, #28
 8008e4c:	f7ff ffb8 	bl	8008dc0 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8008e50:	201e      	movs	r0, #30
 8008e52:	f7ff ffb5 	bl	8008dc0 <AHT20_register_reset>
}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008e60:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <AHT20_read_status+0x38>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	0019      	movs	r1, r3
 8008e66:	2038      	movs	r0, #56	@ 0x38
 8008e68:	f7ff ff06 	bl	8008c78 <WriteRegister>
  HAL_Delay(10);
 8008e6c:	200a      	movs	r0, #10
 8008e6e:	f009 f907 	bl	8012080 <HAL_Delay>
  airtemphumraw[0] = 0;
 8008e72:	4b09      	ldr	r3, [pc, #36]	@ (8008e98 <AHT20_read_status+0x3c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8008e78:	4b07      	ldr	r3, [pc, #28]	@ (8008e98 <AHT20_read_status+0x3c>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	2038      	movs	r0, #56	@ 0x38
 8008e80:	f7ff fed8 	bl	8008c34 <ReadRegister>
  HAL_Delay(10);
 8008e84:	200a      	movs	r0, #10
 8008e86:	f009 f8fb 	bl	8012080 <HAL_Delay>
  return airtemphumraw[0];
 8008e8a:	4b03      	ldr	r3, [pc, #12]	@ (8008e98 <AHT20_read_status+0x3c>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
}
 8008e8e:	0018      	movs	r0, r3
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	2000008c 	.word	0x2000008c
 8008e98:	20000bc4 	.word	0x20000bc4

08008e9c <AHT20_init>:

bool AHT20_init(void) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8008ea2:	f009 f8e3 	bl	801206c <HAL_GetTick>
 8008ea6:	0003      	movs	r3, r0
 8008ea8:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b77      	cmp	r3, #119	@ 0x77
 8008eae:	d805      	bhi.n	8008ebc <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2278      	movs	r2, #120	@ 0x78
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	f009 f8e2 	bl	8012080 <HAL_Delay>
  }
  AHT20_read_status();
 8008ebc:	f7ff ffce 	bl	8008e5c <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8008ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8008efc <AHT20_init+0x60>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8008f00 <AHT20_init+0x64>)
 8008ec6:	490f      	ldr	r1, [pc, #60]	@ (8008f04 <AHT20_init+0x68>)
 8008ec8:	2003      	movs	r0, #3
 8008eca:	f008 fc83 	bl	80117d4 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8008ece:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <AHT20_init+0x60>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	001a      	movs	r2, r3
 8008ed4:	2318      	movs	r3, #24
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b18      	cmp	r3, #24
 8008eda:	d00a      	beq.n	8008ef2 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <AHT20_init+0x6c>)
 8008ede:	2203      	movs	r2, #3
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	2038      	movs	r0, #56	@ 0x38
 8008ee4:	f7ff fec8 	bl	8008c78 <WriteRegister>
    HAL_Delay(10);
 8008ee8:	200a      	movs	r0, #10
 8008eea:	f009 f8c9 	bl	8012080 <HAL_Delay>
    AHT20_Start_Init();
 8008eee:	f7ff ffa7 	bl	8008e40 <AHT20_Start_Init>
  }
  return true;
 8008ef2:	2301      	movs	r3, #1
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b002      	add	sp, #8
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000bc4 	.word	0x20000bc4
 8008f00:	0802901c 	.word	0x0802901c
 8008f04:	08029018 	.word	0x08029018
 8008f08:	20000084 	.word	0x20000084

08008f0c <AHT20_calibrate>:


bool AHT20_calibrate() {
 8008f0c:	b590      	push	{r4, r7, lr}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008f12:	1dfc      	adds	r4, r7, #7
 8008f14:	4b10      	ldr	r3, [pc, #64]	@ (8008f58 <AHT20_calibrate+0x4c>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	0019      	movs	r1, r3
 8008f1a:	2038      	movs	r0, #56	@ 0x38
 8008f1c:	f7ff feac 	bl	8008c78 <WriteRegister>
 8008f20:	0003      	movs	r3, r0
 8008f22:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8008f24:	1dfb      	adds	r3, r7, #7
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4053      	eors	r3, r2
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d005      	beq.n	8008f3e <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8008f32:	4a0a      	ldr	r2, [pc, #40]	@ (8008f5c <AHT20_calibrate+0x50>)
 8008f34:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <AHT20_calibrate+0x54>)
 8008f36:	0019      	movs	r1, r3
 8008f38:	2001      	movs	r0, #1
 8008f3a:	f008 fc4b 	bl	80117d4 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008f3e:	f009 f895 	bl	801206c <HAL_GetTick>
 8008f42:	0003      	movs	r3, r0
 8008f44:	3332      	adds	r3, #50	@ 0x32
 8008f46:	001a      	movs	r2, r3
 8008f48:	4b06      	ldr	r3, [pc, #24]	@ (8008f64 <AHT20_calibrate+0x58>)
 8008f4a:	601a      	str	r2, [r3, #0]
  return response;
 8008f4c:	1dfb      	adds	r3, r7, #7
 8008f4e:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b003      	add	sp, #12
 8008f56:	bd90      	pop	{r4, r7, pc}
 8008f58:	2000008c 	.word	0x2000008c
 8008f5c:	08029044 	.word	0x08029044
 8008f60:	0802907c 	.word	0x0802907c
 8008f64:	20000bb4 	.word	0x20000bb4

08008f68 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8008f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f98 <AHT20_DeviceConnected+0x30>)
 8008f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <AHT20_DeviceConnected+0x34>)
 8008f70:	0019      	movs	r1, r3
 8008f72:	2003      	movs	r0, #3
 8008f74:	f008 fc2e 	bl	80117d4 <CreateLine>
   AHT20_init();
 8008f78:	f7ff ff90 	bl	8008e9c <AHT20_init>
   HAL_Delay(10);
 8008f7c:	200a      	movs	r0, #10
 8008f7e:	f009 f87f 	bl	8012080 <HAL_Delay>
   AHT20_calibrate();
 8008f82:	f7ff ffc3 	bl	8008f0c <AHT20_calibrate>
   return (bool)AHT20_read_status();
 8008f86:	f7ff ff69 	bl	8008e5c <AHT20_read_status>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	1e5a      	subs	r2, r3, #1
 8008f8e:	4193      	sbcs	r3, r2
 8008f90:	b2db      	uxtb	r3, r3
 }
 8008f92:	0018      	movs	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	08029080 	.word	0x08029080
 8008f9c:	08029018 	.word	0x08029018

08008fa0 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8008fa6:	1dfc      	adds	r4, r7, #7
 8008fa8:	4b10      	ldr	r3, [pc, #64]	@ (8008fec <AHT20_StartMeasurement+0x4c>)
 8008faa:	2203      	movs	r2, #3
 8008fac:	0019      	movs	r1, r3
 8008fae:	2038      	movs	r0, #56	@ 0x38
 8008fb0:	f7ff fe62 	bl	8008c78 <WriteRegister>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 8008fb8:	1dfb      	adds	r3, r7, #7
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4053      	eors	r3, r2
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <AHT20_StartMeasurement+0x50>)
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <AHT20_StartMeasurement+0x54>)
 8008fca:	0019      	movs	r1, r3
 8008fcc:	2001      	movs	r0, #1
 8008fce:	f008 fc01 	bl	80117d4 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 8008fd2:	f009 f84b 	bl	801206c <HAL_GetTick>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	33fa      	adds	r3, #250	@ 0xfa
 8008fda:	001a      	movs	r2, r3
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <AHT20_StartMeasurement+0x58>)
 8008fde:	601a      	str	r2, [r3, #0]
  return response;
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
}
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b003      	add	sp, #12
 8008fea:	bd90      	pop	{r4, r7, pc}
 8008fec:	20000088 	.word	0x20000088
 8008ff0:	08029098 	.word	0x08029098
 8008ff4:	0802907c 	.word	0x0802907c
 8008ff8:	20000bb4 	.word	0x20000bb4

08008ffc <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 8009002:	f009 f833 	bl	801206c <HAL_GetTick>
 8009006:	0003      	movs	r3, r0
 8009008:	22fa      	movs	r2, #250	@ 0xfa
 800900a:	0092      	lsls	r2, r2, #2
 800900c:	189a      	adds	r2, r3, r2
 800900e:	4b2c      	ldr	r3, [pc, #176]	@ (80090c0 <AHT20_GetMeasurementValues+0xc4>)
 8009010:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 8009012:	e01f      	b.n	8009054 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 8009014:	4a2b      	ldr	r2, [pc, #172]	@ (80090c4 <AHT20_GetMeasurementValues+0xc8>)
 8009016:	4b2c      	ldr	r3, [pc, #176]	@ (80090c8 <AHT20_GetMeasurementValues+0xcc>)
 8009018:	0019      	movs	r1, r3
 800901a:	2002      	movs	r0, #2
 800901c:	f008 fbda 	bl	80117d4 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 8009020:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <AHT20_GetMeasurementValues+0xc4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	0018      	movs	r0, r3
 8009026:	f008 fb7f 	bl	8011728 <TimestampIsReached>
 800902a:	1e03      	subs	r3, r0, #0
 800902c:	d00f      	beq.n	800904e <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800902e:	4a27      	ldr	r2, [pc, #156]	@ (80090cc <AHT20_GetMeasurementValues+0xd0>)
 8009030:	4b27      	ldr	r3, [pc, #156]	@ (80090d0 <AHT20_GetMeasurementValues+0xd4>)
 8009032:	0019      	movs	r1, r3
 8009034:	2001      	movs	r0, #1
 8009036:	f008 fbcd 	bl	80117d4 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800903a:	f009 f817 	bl	801206c <HAL_GetTick>
 800903e:	0003      	movs	r3, r0
 8009040:	22fa      	movs	r2, #250	@ 0xfa
 8009042:	00d2      	lsls	r2, r2, #3
 8009044:	189a      	adds	r2, r3, r2
 8009046:	4b1e      	ldr	r3, [pc, #120]	@ (80090c0 <AHT20_GetMeasurementValues+0xc4>)
 8009048:	601a      	str	r2, [r3, #0]
      return false;
 800904a:	2300      	movs	r3, #0
 800904c:	e034      	b.n	80090b8 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800904e:	200a      	movs	r0, #10
 8009050:	f009 f816 	bl	8012080 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 8009054:	f7ff ff02 	bl	8008e5c <AHT20_read_status>
 8009058:	0003      	movs	r3, r0
 800905a:	001a      	movs	r2, r3
 800905c:	2380      	movs	r3, #128	@ 0x80
 800905e:	4013      	ands	r3, r2
 8009060:	2b80      	cmp	r3, #128	@ 0x80
 8009062:	d0d7      	beq.n	8009014 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 8009064:	200a      	movs	r0, #10
 8009066:	f009 f80b 	bl	8012080 <HAL_Delay>
  for (uint8_t g = 0; g < 8; g++){
 800906a:	1dfb      	adds	r3, r7, #7
 800906c:	2200      	movs	r2, #0
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	e009      	b.n	8009086 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	4a17      	ldr	r2, [pc, #92]	@ (80090d4 <AHT20_GetMeasurementValues+0xd8>)
 8009078:	2100      	movs	r1, #0
 800907a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 8; g++){
 800907c:	1dfb      	adds	r3, r7, #7
 800907e:	781a      	ldrb	r2, [r3, #0]
 8009080:	1dfb      	adds	r3, r7, #7
 8009082:	3201      	adds	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	1dfb      	adds	r3, r7, #7
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2b07      	cmp	r3, #7
 800908c:	d9f1      	bls.n	8009072 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800908e:	1dbc      	adds	r4, r7, #6
 8009090:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <AHT20_GetMeasurementValues+0xd8>)
 8009092:	2207      	movs	r2, #7
 8009094:	0019      	movs	r1, r3
 8009096:	2038      	movs	r0, #56	@ 0x38
 8009098:	f7ff fdaa 	bl	8008bf0 <ReadDirRegister>
 800909c:	0003      	movs	r3, r0
 800909e:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 80090a0:	200a      	movs	r0, #10
 80090a2:	f008 ffed 	bl	8012080 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 80090a6:	f008 ffe1 	bl	801206c <HAL_GetTick>
 80090aa:	0003      	movs	r3, r0
 80090ac:	3364      	adds	r3, #100	@ 0x64
 80090ae:	001a      	movs	r2, r3
 80090b0:	4b03      	ldr	r3, [pc, #12]	@ (80090c0 <AHT20_GetMeasurementValues+0xc4>)
 80090b2:	601a      	str	r2, [r3, #0]
  return response;
 80090b4:	1dbb      	adds	r3, r7, #6
 80090b6:	781b      	ldrb	r3, [r3, #0]
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b003      	add	sp, #12
 80090be:	bd90      	pop	{r4, r7, pc}
 80090c0:	20000bb4 	.word	0x20000bb4
 80090c4:	080290c4 	.word	0x080290c4
 80090c8:	080290ec 	.word	0x080290ec
 80090cc:	080290f0 	.word	0x080290f0
 80090d0:	0802907c 	.word	0x0802907c
 80090d4:	20000bc4 	.word	0x20000bc4

080090d8 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 80090d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090da:	46c6      	mov	lr, r8
 80090dc:	b500      	push	{lr}
 80090de:	b08a      	sub	sp, #40	@ 0x28
 80090e0:	af06      	add	r7, sp, #24
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 80090e6:	4b5a      	ldr	r3, [pc, #360]	@ (8009250 <AHT20_Calculate+0x178>)
 80090e8:	799c      	ldrb	r4, [r3, #6]
 80090ea:	4b59      	ldr	r3, [pc, #356]	@ (8009250 <AHT20_Calculate+0x178>)
 80090ec:	2106      	movs	r1, #6
 80090ee:	0018      	movs	r0, r3
 80090f0:	f7ff fde4 	bl	8008cbc <CalculateCRC>
 80090f4:	0003      	movs	r3, r0
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d044      	beq.n	8009184 <AHT20_Calculate+0xac>
 80090fa:	4b55      	ldr	r3, [pc, #340]	@ (8009250 <AHT20_Calculate+0x178>)
 80090fc:	799b      	ldrb	r3, [r3, #6]
 80090fe:	2bff      	cmp	r3, #255	@ 0xff
 8009100:	d040      	beq.n	8009184 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 8009102:	4b53      	ldr	r3, [pc, #332]	@ (8009250 <AHT20_Calculate+0x178>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	4698      	mov	r8, r3
 8009108:	4b51      	ldr	r3, [pc, #324]	@ (8009250 <AHT20_Calculate+0x178>)
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	0018      	movs	r0, r3
 800910e:	4b50      	ldr	r3, [pc, #320]	@ (8009250 <AHT20_Calculate+0x178>)
 8009110:	789b      	ldrb	r3, [r3, #2]
 8009112:	001c      	movs	r4, r3
 8009114:	4b4e      	ldr	r3, [pc, #312]	@ (8009250 <AHT20_Calculate+0x178>)
 8009116:	78db      	ldrb	r3, [r3, #3]
 8009118:	001d      	movs	r5, r3
 800911a:	4b4d      	ldr	r3, [pc, #308]	@ (8009250 <AHT20_Calculate+0x178>)
 800911c:	791b      	ldrb	r3, [r3, #4]
 800911e:	001e      	movs	r6, r3
 8009120:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <AHT20_Calculate+0x178>)
 8009122:	795b      	ldrb	r3, [r3, #5]
 8009124:	469c      	mov	ip, r3
 8009126:	4b4a      	ldr	r3, [pc, #296]	@ (8009250 <AHT20_Calculate+0x178>)
 8009128:	799b      	ldrb	r3, [r3, #6]
 800912a:	4a4a      	ldr	r2, [pc, #296]	@ (8009254 <AHT20_Calculate+0x17c>)
 800912c:	494a      	ldr	r1, [pc, #296]	@ (8009258 <AHT20_Calculate+0x180>)
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	4663      	mov	r3, ip
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	9603      	str	r6, [sp, #12]
 8009136:	9502      	str	r5, [sp, #8]
 8009138:	9401      	str	r4, [sp, #4]
 800913a:	9000      	str	r0, [sp, #0]
 800913c:	4643      	mov	r3, r8
 800913e:	2003      	movs	r0, #3
 8009140:	f008 fb48 	bl	80117d4 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 8009144:	4b42      	ldr	r3, [pc, #264]	@ (8009250 <AHT20_Calculate+0x178>)
 8009146:	799b      	ldrb	r3, [r3, #6]
 8009148:	001c      	movs	r4, r3
 800914a:	4b41      	ldr	r3, [pc, #260]	@ (8009250 <AHT20_Calculate+0x178>)
 800914c:	2106      	movs	r1, #6
 800914e:	0018      	movs	r0, r3
 8009150:	f7ff fdb4 	bl	8008cbc <CalculateCRC>
 8009154:	0003      	movs	r3, r0
 8009156:	4a41      	ldr	r2, [pc, #260]	@ (800925c <AHT20_Calculate+0x184>)
 8009158:	4941      	ldr	r1, [pc, #260]	@ (8009260 <AHT20_Calculate+0x188>)
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	0023      	movs	r3, r4
 800915e:	2001      	movs	r0, #1
 8009160:	f008 fb38 	bl	80117d4 <CreateLine>
    *airtemp = 0.0;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 8009170:	f008 ff7c 	bl	801206c <HAL_GetTick>
 8009174:	0003      	movs	r3, r0
 8009176:	22fa      	movs	r2, #250	@ 0xfa
 8009178:	00d2      	lsls	r2, r2, #3
 800917a:	189a      	adds	r2, r3, r2
 800917c:	4b39      	ldr	r3, [pc, #228]	@ (8009264 <AHT20_Calculate+0x18c>)
 800917e:	601a      	str	r2, [r3, #0]
    return false;
 8009180:	2300      	movs	r3, #0
 8009182:	e05f      	b.n	8009244 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 8009184:	4b38      	ldr	r3, [pc, #224]	@ (8009268 <AHT20_Calculate+0x190>)
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800918a:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <AHT20_Calculate+0x178>)
 800918c:	78db      	ldrb	r3, [r3, #3]
 800918e:	041a      	lsls	r2, r3, #16
 8009190:	23f0      	movs	r3, #240	@ 0xf0
 8009192:	031b      	lsls	r3, r3, #12
 8009194:	401a      	ands	r2, r3
 8009196:	4b2e      	ldr	r3, [pc, #184]	@ (8009250 <AHT20_Calculate+0x178>)
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	18d3      	adds	r3, r2, r3
 800919e:	4a2c      	ldr	r2, [pc, #176]	@ (8009250 <AHT20_Calculate+0x178>)
 80091a0:	7952      	ldrb	r2, [r2, #5]
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7f8 fa5e 	bl	8001668 <__aeabi_ui2f>
 80091ac:	1c03      	adds	r3, r0, #0
 80091ae:	2193      	movs	r1, #147	@ 0x93
 80091b0:	05c9      	lsls	r1, r1, #23
 80091b2:	1c18      	adds	r0, r3, #0
 80091b4:	f7f7 fd0e 	bl	8000bd4 <__aeabi_fdiv>
 80091b8:	1c03      	adds	r3, r0, #0
 80091ba:	492c      	ldr	r1, [pc, #176]	@ (800926c <AHT20_Calculate+0x194>)
 80091bc:	1c18      	adds	r0, r3, #0
 80091be:	f7f7 feef 	bl	8000fa0 <__aeabi_fmul>
 80091c2:	1c03      	adds	r3, r0, #0
 80091c4:	492a      	ldr	r1, [pc, #168]	@ (8009270 <AHT20_Calculate+0x198>)
 80091c6:	1c18      	adds	r0, r3, #0
 80091c8:	f7f8 f828 	bl	800121c <__aeabi_fsub>
 80091cc:	1c03      	adds	r3, r0, #0
 80091ce:	1c1a      	adds	r2, r3, #0
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 80091d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009250 <AHT20_Calculate+0x178>)
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	031a      	lsls	r2, r3, #12
 80091da:	4b1d      	ldr	r3, [pc, #116]	@ (8009250 <AHT20_Calculate+0x178>)
 80091dc:	789b      	ldrb	r3, [r3, #2]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	18d3      	adds	r3, r2, r3
 80091e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009250 <AHT20_Calculate+0x178>)
 80091e4:	78d2      	ldrb	r2, [r2, #3]
 80091e6:	0912      	lsrs	r2, r2, #4
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	189b      	adds	r3, r3, r2
 80091ec:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 80091ee:	68b8      	ldr	r0, [r7, #8]
 80091f0:	f7f8 fa3a 	bl	8001668 <__aeabi_ui2f>
 80091f4:	1c03      	adds	r3, r0, #0
 80091f6:	2193      	movs	r1, #147	@ 0x93
 80091f8:	05c9      	lsls	r1, r1, #23
 80091fa:	1c18      	adds	r0, r3, #0
 80091fc:	f7f7 fcea 	bl	8000bd4 <__aeabi_fdiv>
 8009200:	1c03      	adds	r3, r0, #0
 8009202:	491c      	ldr	r1, [pc, #112]	@ (8009274 <AHT20_Calculate+0x19c>)
 8009204:	1c18      	adds	r0, r3, #0
 8009206:	f7f7 fecb 	bl	8000fa0 <__aeabi_fmul>
 800920a:	1c03      	adds	r3, r0, #0
 800920c:	1c1a      	adds	r2, r3, #0
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	1c18      	adds	r0, r3, #0
 8009218:	f7fa f924 	bl	8003464 <__aeabi_f2d>
 800921c:	0004      	movs	r4, r0
 800921e:	000d      	movs	r5, r1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	1c18      	adds	r0, r3, #0
 8009226:	f7fa f91d 	bl	8003464 <__aeabi_f2d>
 800922a:	0002      	movs	r2, r0
 800922c:	000b      	movs	r3, r1
 800922e:	4812      	ldr	r0, [pc, #72]	@ (8009278 <AHT20_Calculate+0x1a0>)
 8009230:	4909      	ldr	r1, [pc, #36]	@ (8009258 <AHT20_Calculate+0x180>)
 8009232:	9202      	str	r2, [sp, #8]
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	9400      	str	r4, [sp, #0]
 8009238:	9501      	str	r5, [sp, #4]
 800923a:	0002      	movs	r2, r0
 800923c:	2003      	movs	r0, #3
 800923e:	f008 fac9 	bl	80117d4 <CreateLine>
  return true;
 8009242:	2301      	movs	r3, #1
}
 8009244:	0018      	movs	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	b004      	add	sp, #16
 800924a:	bc80      	pop	{r7}
 800924c:	46b8      	mov	r8, r7
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	20000bc4 	.word	0x20000bc4
 8009254:	08029114 	.word	0x08029114
 8009258:	08029018 	.word	0x08029018
 800925c:	08029194 	.word	0x08029194
 8009260:	0802907c 	.word	0x0802907c
 8009264:	20000bb4 	.word	0x20000bb4
 8009268:	20000bcb 	.word	0x20000bcb
 800926c:	43480000 	.word	0x43480000
 8009270:	42480000 	.word	0x42480000
 8009274:	42c80000 	.word	0x42c80000
 8009278:	080291bc 	.word	0x080291bc

0800927c <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 8009282:	4b4d      	ldr	r3, [pc, #308]	@ (80093b8 <AHT_Upkeep+0x13c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	0018      	movs	r0, r3
 8009288:	f008 fa4e 	bl	8011728 <TimestampIsReached>
 800928c:	0003      	movs	r3, r0
 800928e:	001a      	movs	r2, r3
 8009290:	2301      	movs	r3, #1
 8009292:	4053      	eors	r3, r2
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <AHT_Upkeep+0x24>
    return AHTState;
 800929a:	4b48      	ldr	r3, [pc, #288]	@ (80093bc <AHT_Upkeep+0x140>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	e087      	b.n	80093b0 <AHT_Upkeep+0x134>
  }
  switch(AHTState) {
 80092a0:	4b46      	ldr	r3, [pc, #280]	@ (80093bc <AHT_Upkeep+0x140>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b05      	cmp	r3, #5
 80092a6:	d85d      	bhi.n	8009364 <AHT_Upkeep+0xe8>
 80092a8:	009a      	lsls	r2, r3, #2
 80092aa:	4b45      	ldr	r3, [pc, #276]	@ (80093c0 <AHT_Upkeep+0x144>)
 80092ac:	18d3      	adds	r3, r2, r3
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 80092b2:	4a44      	ldr	r2, [pc, #272]	@ (80093c4 <AHT_Upkeep+0x148>)
 80092b4:	4b44      	ldr	r3, [pc, #272]	@ (80093c8 <AHT_Upkeep+0x14c>)
 80092b6:	0019      	movs	r1, r3
 80092b8:	2003      	movs	r0, #3
 80092ba:	f008 fa8b 	bl	80117d4 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 80092be:	f008 fed5 	bl	801206c <HAL_GetTick>
 80092c2:	0003      	movs	r3, r0
 80092c4:	4a41      	ldr	r2, [pc, #260]	@ (80093cc <AHT_Upkeep+0x150>)
 80092c6:	189a      	adds	r2, r3, r2
 80092c8:	4b3b      	ldr	r3, [pc, #236]	@ (80093b8 <AHT_Upkeep+0x13c>)
 80092ca:	601a      	str	r2, [r3, #0]
    break;
 80092cc:	e06e      	b.n	80093ac <AHT_Upkeep+0x130>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80092ce:	f002 fbef 	bl	800bab0 <getSensorLock>
 80092d2:	1e03      	subs	r3, r0, #0
 80092d4:	d165      	bne.n	80093a2 <AHT_Upkeep+0x126>
      break;
    }
    setSensorLock(AHT20);
 80092d6:	2003      	movs	r0, #3
 80092d8:	f002 fbda 	bl	800ba90 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 80092dc:	f7ff fe60 	bl	8008fa0 <AHT20_StartMeasurement>
 80092e0:	0003      	movs	r3, r0
 80092e2:	001a      	movs	r2, r3
 80092e4:	2301      	movs	r3, #1
 80092e6:	4053      	eors	r3, r2
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <AHT_Upkeep+0x7a>
      AHTState = AHT20_ERROR;
 80092ee:	4b33      	ldr	r3, [pc, #204]	@ (80093bc <AHT_Upkeep+0x140>)
 80092f0:	22ff      	movs	r2, #255	@ 0xff
 80092f2:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 80092f4:	e05a      	b.n	80093ac <AHT_Upkeep+0x130>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 80092f6:	4b31      	ldr	r3, [pc, #196]	@ (80093bc <AHT_Upkeep+0x140>)
 80092f8:	2202      	movs	r2, #2
 80092fa:	701a      	strb	r2, [r3, #0]
    break;
 80092fc:	e056      	b.n	80093ac <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 80092fe:	f7ff fe7d 	bl	8008ffc <AHT20_GetMeasurementValues>
 8009302:	1e03      	subs	r3, r0, #0
 8009304:	d04f      	beq.n	80093a6 <AHT_Upkeep+0x12a>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 8009306:	2000      	movs	r0, #0
 8009308:	f002 fbc2 	bl	800ba90 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800930c:	4b2b      	ldr	r3, [pc, #172]	@ (80093bc <AHT_Upkeep+0x140>)
 800930e:	2203      	movs	r2, #3
 8009310:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 8009312:	e048      	b.n	80093a6 <AHT_Upkeep+0x12a>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 8009314:	003a      	movs	r2, r7
 8009316:	1d3b      	adds	r3, r7, #4
 8009318:	0011      	movs	r1, r2
 800931a:	0018      	movs	r0, r3
 800931c:	f7ff fedc 	bl	80090d8 <AHT20_Calculate>
 8009320:	0003      	movs	r3, r0
 8009322:	001a      	movs	r2, r3
 8009324:	2301      	movs	r3, #1
 8009326:	4053      	eors	r3, r2
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <AHT_Upkeep+0xbe>
      AHTState = AHT20_ERROR;
 800932e:	4b23      	ldr	r3, [pc, #140]	@ (80093bc <AHT_Upkeep+0x140>)
 8009330:	22ff      	movs	r2, #255	@ 0xff
 8009332:	701a      	strb	r2, [r3, #0]
      return AHTState;
 8009334:	4b21      	ldr	r3, [pc, #132]	@ (80093bc <AHT_Upkeep+0x140>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	e03a      	b.n	80093b0 <AHT_Upkeep+0x134>
    }
//    setHIDS(airtemp, airhum);
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	1c11      	adds	r1, r2, #0
 8009340:	1c18      	adds	r0, r3, #0
 8009342:	f7fa fdfd 	bl	8003f40 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 8009346:	4b1d      	ldr	r3, [pc, #116]	@ (80093bc <AHT_Upkeep+0x140>)
 8009348:	2205      	movs	r2, #5
 800934a:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800934c:	f008 fe8e 	bl	801206c <HAL_GetTick>
 8009350:	0003      	movs	r3, r0
 8009352:	4a1f      	ldr	r2, [pc, #124]	@ (80093d0 <AHT_Upkeep+0x154>)
 8009354:	189a      	adds	r2, r3, r2
 8009356:	4b18      	ldr	r3, [pc, #96]	@ (80093b8 <AHT_Upkeep+0x13c>)
 8009358:	601a      	str	r2, [r3, #0]
    break;
 800935a:	e027      	b.n	80093ac <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800935c:	4b17      	ldr	r3, [pc, #92]	@ (80093bc <AHT_Upkeep+0x140>)
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
  break;
 8009362:	e023      	b.n	80093ac <AHT_Upkeep+0x130>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 8009364:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <AHT_Upkeep+0x140>)
 8009366:	2201      	movs	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800936a:	f002 fba1 	bl	800bab0 <getSensorLock>
 800936e:	0003      	movs	r3, r0
 8009370:	2b03      	cmp	r3, #3
 8009372:	d102      	bne.n	800937a <AHT_Upkeep+0xfe>
      setSensorLock(FREE);
 8009374:	2000      	movs	r0, #0
 8009376:	f002 fb8b 	bl	800ba90 <setSensorLock>
    }
    AHTerrors++;
 800937a:	4b16      	ldr	r3, [pc, #88]	@ (80093d4 <AHT_Upkeep+0x158>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	3301      	adds	r3, #1
 8009380:	b2da      	uxtb	r2, r3
 8009382:	4b14      	ldr	r3, [pc, #80]	@ (80093d4 <AHT_Upkeep+0x158>)
 8009384:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 8009386:	4b13      	ldr	r3, [pc, #76]	@ (80093d4 <AHT_Upkeep+0x158>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b19      	cmp	r3, #25
 800938c:	d90d      	bls.n	80093aa <AHT_Upkeep+0x12e>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800938e:	4a12      	ldr	r2, [pc, #72]	@ (80093d8 <AHT_Upkeep+0x15c>)
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <AHT_Upkeep+0x160>)
 8009392:	0019      	movs	r1, r3
 8009394:	2001      	movs	r0, #1
 8009396:	f008 fa1d 	bl	80117d4 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800939a:	4b08      	ldr	r3, [pc, #32]	@ (80093bc <AHT_Upkeep+0x140>)
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
    }
    break;
 80093a0:	e003      	b.n	80093aa <AHT_Upkeep+0x12e>
      break;
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	e002      	b.n	80093ac <AHT_Upkeep+0x130>
    break;
 80093a6:	46c0      	nop			@ (mov r8, r8)
 80093a8:	e000      	b.n	80093ac <AHT_Upkeep+0x130>
    break;
 80093aa:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 80093ac:	4b03      	ldr	r3, [pc, #12]	@ (80093bc <AHT_Upkeep+0x140>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000bb4 	.word	0x20000bb4
 80093bc:	20000093 	.word	0x20000093
 80093c0:	0802af54 	.word	0x0802af54
 80093c4:	080291f0 	.word	0x080291f0
 80093c8:	08029018 	.word	0x08029018
 80093cc:	000dbba0 	.word	0x000dbba0
 80093d0:	0000ea60 	.word	0x0000ea60
 80093d4:	20000bcb 	.word	0x20000bcb
 80093d8:	08029218 	.word	0x08029218
 80093dc:	0802907c 	.word	0x0802907c

080093e0 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80093e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	0004      	movs	r4, r0
 80093e8:	0008      	movs	r0, r1
 80093ea:	60ba      	str	r2, [r7, #8]
 80093ec:	0019      	movs	r1, r3
 80093ee:	260e      	movs	r6, #14
 80093f0:	19bb      	adds	r3, r7, r6
 80093f2:	1c22      	adds	r2, r4, #0
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	230c      	movs	r3, #12
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	1c02      	adds	r2, r0, #0
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	1dbb      	adds	r3, r7, #6
 8009400:	1c0a      	adds	r2, r1, #0
 8009402:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8009404:	4b0c      	ldr	r3, [pc, #48]	@ (8009438 <WriteMemRegister+0x58>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d010      	beq.n	800942e <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <WriteMemRegister+0x58>)
 800940e:	681c      	ldr	r4, [r3, #0]
 8009410:	4b0a      	ldr	r3, [pc, #40]	@ (800943c <WriteMemRegister+0x5c>)
 8009412:	7818      	ldrb	r0, [r3, #0]
 8009414:	68bd      	ldr	r5, [r7, #8]
 8009416:	230c      	movs	r3, #12
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	881a      	ldrh	r2, [r3, #0]
 800941c:	19bb      	adds	r3, r7, r6
 800941e:	8819      	ldrh	r1, [r3, #0]
 8009420:	1dbb      	adds	r3, r7, #6
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	002b      	movs	r3, r5
 8009428:	47a0      	blx	r4
 800942a:	0003      	movs	r3, r0
 800942c:	e000      	b.n	8009430 <WriteMemRegister+0x50>
  }
  return false;
 800942e:	2300      	movs	r3, #0
}
 8009430:	0018      	movs	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	b005      	add	sp, #20
 8009436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009438:	20000bcc 	.word	0x20000bcc
 800943c:	20000094 	.word	0x20000094

08009440 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8009440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af02      	add	r7, sp, #8
 8009446:	0004      	movs	r4, r0
 8009448:	0008      	movs	r0, r1
 800944a:	60ba      	str	r2, [r7, #8]
 800944c:	0019      	movs	r1, r3
 800944e:	260e      	movs	r6, #14
 8009450:	19bb      	adds	r3, r7, r6
 8009452:	1c22      	adds	r2, r4, #0
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	230c      	movs	r3, #12
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	1c02      	adds	r2, r0, #0
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	1dbb      	adds	r3, r7, #6
 8009460:	1c0a      	adds	r2, r1, #0
 8009462:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <ReadMemRegister+0x58>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d010      	beq.n	800948e <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <ReadMemRegister+0x58>)
 800946e:	681c      	ldr	r4, [r3, #0]
 8009470:	4b0a      	ldr	r3, [pc, #40]	@ (800949c <ReadMemRegister+0x5c>)
 8009472:	7818      	ldrb	r0, [r3, #0]
 8009474:	68bd      	ldr	r5, [r7, #8]
 8009476:	230c      	movs	r3, #12
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	881a      	ldrh	r2, [r3, #0]
 800947c:	19bb      	adds	r3, r7, r6
 800947e:	8819      	ldrh	r1, [r3, #0]
 8009480:	1dbb      	adds	r3, r7, #6
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	002b      	movs	r3, r5
 8009488:	47a0      	blx	r4
 800948a:	0003      	movs	r3, r0
 800948c:	e000      	b.n	8009490 <ReadMemRegister+0x50>
  }
  return false;
 800948e:	2300      	movs	r3, #0
}
 8009490:	0018      	movs	r0, r3
 8009492:	46bd      	mov	sp, r7
 8009494:	b005      	add	sp, #20
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009498:	20000bd0 	.word	0x20000bd0
 800949c:	20000094 	.word	0x20000094

080094a0 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 80094a8:	f008 fde0 	bl	801206c <HAL_GetTick>
 80094ac:	0002      	movs	r2, r0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	18d2      	adds	r2, r2, r3
 80094b2:	4b03      	ldr	r3, [pc, #12]	@ (80094c0 <setBMP280TimeStamp+0x20>)
 80094b4:	601a      	str	r2, [r3, #0]
}
 80094b6:	46c0      	nop			@ (mov r8, r8)
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b002      	add	sp, #8
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	46c0      	nop			@ (mov r8, r8)
 80094c0:	20000bf8 	.word	0x20000bf8

080094c4 <BMP280_reset>:

static void BMP280_reset() {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 80094ca:	1dfb      	adds	r3, r7, #7
 80094cc:	22b6      	movs	r2, #182	@ 0xb6
 80094ce:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 80094d0:	1dfa      	adds	r2, r7, #7
 80094d2:	2301      	movs	r3, #1
 80094d4:	2101      	movs	r1, #1
 80094d6:	20e0      	movs	r0, #224	@ 0xe0
 80094d8:	f7ff ff82 	bl	80093e0 <WriteMemRegister>
  Info("BMP280 has been reset");
 80094dc:	4a06      	ldr	r2, [pc, #24]	@ (80094f8 <BMP280_reset+0x34>)
 80094de:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <BMP280_reset+0x38>)
 80094e0:	0019      	movs	r1, r3
 80094e2:	2002      	movs	r0, #2
 80094e4:	f008 f976 	bl	80117d4 <CreateLine>
  HAL_Delay(100);
 80094e8:	2064      	movs	r0, #100	@ 0x64
 80094ea:	f008 fdc9 	bl	8012080 <HAL_Delay>
}
 80094ee:	46c0      	nop			@ (mov r8, r8)
 80094f0:	46bd      	mov	sp, r7
 80094f2:	b002      	add	sp, #8
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	0802925c 	.word	0x0802925c
 80094fc:	08029274 	.word	0x08029274

08009500 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b083      	sub	sp, #12
 8009504:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 8009506:	4aae      	ldr	r2, [pc, #696]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009508:	231a      	movs	r3, #26
 800950a:	2101      	movs	r1, #1
 800950c:	2088      	movs	r0, #136	@ 0x88
 800950e:	f7ff ff97 	bl	8009440 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 8009512:	4bab      	ldr	r3, [pc, #684]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	b29b      	uxth	r3, r3
 800951a:	4aa9      	ldr	r2, [pc, #676]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800951c:	7812      	ldrb	r2, [r2, #0]
 800951e:	189b      	adds	r3, r3, r2
 8009520:	b29a      	uxth	r2, r3
 8009522:	4ba8      	ldr	r3, [pc, #672]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009524:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 8009526:	4ba6      	ldr	r3, [pc, #664]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009528:	78db      	ldrb	r3, [r3, #3]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	b29b      	uxth	r3, r3
 800952e:	4aa4      	ldr	r2, [pc, #656]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009530:	7892      	ldrb	r2, [r2, #2]
 8009532:	189b      	adds	r3, r3, r2
 8009534:	b29b      	uxth	r3, r3
 8009536:	b21a      	sxth	r2, r3
 8009538:	4ba2      	ldr	r3, [pc, #648]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 800953a:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800953c:	4ba0      	ldr	r3, [pc, #640]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800953e:	795b      	ldrb	r3, [r3, #5]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	b29b      	uxth	r3, r3
 8009544:	4a9e      	ldr	r2, [pc, #632]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009546:	7912      	ldrb	r2, [r2, #4]
 8009548:	189b      	adds	r3, r3, r2
 800954a:	b29b      	uxth	r3, r3
 800954c:	b21a      	sxth	r2, r3
 800954e:	4b9d      	ldr	r3, [pc, #628]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009550:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 8009552:	4b9b      	ldr	r3, [pc, #620]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009554:	79db      	ldrb	r3, [r3, #7]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	4a99      	ldr	r2, [pc, #612]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800955c:	7992      	ldrb	r2, [r2, #6]
 800955e:	189b      	adds	r3, r3, r2
 8009560:	b29a      	uxth	r2, r3
 8009562:	4b98      	ldr	r3, [pc, #608]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009564:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 8009566:	4b96      	ldr	r3, [pc, #600]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009568:	7a5b      	ldrb	r3, [r3, #9]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	4a94      	ldr	r2, [pc, #592]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009570:	7a12      	ldrb	r2, [r2, #8]
 8009572:	189b      	adds	r3, r3, r2
 8009574:	b29b      	uxth	r3, r3
 8009576:	b21a      	sxth	r2, r3
 8009578:	4b92      	ldr	r3, [pc, #584]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 800957a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800957c:	4b90      	ldr	r3, [pc, #576]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800957e:	7adb      	ldrb	r3, [r3, #11]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	b29b      	uxth	r3, r3
 8009584:	4a8e      	ldr	r2, [pc, #568]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009586:	7a92      	ldrb	r2, [r2, #10]
 8009588:	189b      	adds	r3, r3, r2
 800958a:	b29b      	uxth	r3, r3
 800958c:	b21a      	sxth	r2, r3
 800958e:	4b8d      	ldr	r3, [pc, #564]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009590:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 8009592:	4b8b      	ldr	r3, [pc, #556]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009594:	7b5b      	ldrb	r3, [r3, #13]
 8009596:	021b      	lsls	r3, r3, #8
 8009598:	b29b      	uxth	r3, r3
 800959a:	4a89      	ldr	r2, [pc, #548]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800959c:	7b12      	ldrb	r2, [r2, #12]
 800959e:	189b      	adds	r3, r3, r2
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	b21a      	sxth	r2, r3
 80095a4:	4b87      	ldr	r3, [pc, #540]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80095a6:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 80095a8:	4b85      	ldr	r3, [pc, #532]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095aa:	7bdb      	ldrb	r3, [r3, #15]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4a83      	ldr	r2, [pc, #524]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095b2:	7b92      	ldrb	r2, [r2, #14]
 80095b4:	189b      	adds	r3, r3, r2
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	b21a      	sxth	r2, r3
 80095ba:	4b82      	ldr	r3, [pc, #520]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80095bc:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 80095be:	4b80      	ldr	r3, [pc, #512]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095c0:	7c5b      	ldrb	r3, [r3, #17]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4a7e      	ldr	r2, [pc, #504]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095c8:	7c12      	ldrb	r2, [r2, #16]
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	b21a      	sxth	r2, r3
 80095d0:	4b7c      	ldr	r3, [pc, #496]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80095d2:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 80095d4:	4b7a      	ldr	r3, [pc, #488]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095d6:	7cdb      	ldrb	r3, [r3, #19]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	b29b      	uxth	r3, r3
 80095dc:	4a78      	ldr	r2, [pc, #480]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095de:	7c92      	ldrb	r2, [r2, #18]
 80095e0:	189b      	adds	r3, r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	b21a      	sxth	r2, r3
 80095e6:	4b77      	ldr	r3, [pc, #476]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80095e8:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 80095ea:	4b75      	ldr	r3, [pc, #468]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095ec:	7d5b      	ldrb	r3, [r3, #21]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	4a73      	ldr	r2, [pc, #460]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80095f4:	7d12      	ldrb	r2, [r2, #20]
 80095f6:	189b      	adds	r3, r3, r2
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	b21a      	sxth	r2, r3
 80095fc:	4b71      	ldr	r3, [pc, #452]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80095fe:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8009600:	4b6f      	ldr	r3, [pc, #444]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009602:	7ddb      	ldrb	r3, [r3, #23]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	b29b      	uxth	r3, r3
 8009608:	4a6d      	ldr	r2, [pc, #436]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800960a:	7d92      	ldrb	r2, [r2, #22]
 800960c:	189b      	adds	r3, r3, r2
 800960e:	b29b      	uxth	r3, r3
 8009610:	b21a      	sxth	r2, r3
 8009612:	4b6c      	ldr	r3, [pc, #432]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009614:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 8009616:	4a6c      	ldr	r2, [pc, #432]	@ (80097c8 <BMP280_get_calibration+0x2c8>)
 8009618:	4b6c      	ldr	r3, [pc, #432]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 800961a:	0019      	movs	r1, r3
 800961c:	2003      	movs	r0, #3
 800961e:	f008 f8d9 	bl	80117d4 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 8009622:	4b67      	ldr	r3, [pc, #412]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	001c      	movs	r4, r3
 8009628:	4b65      	ldr	r3, [pc, #404]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	0018      	movs	r0, r3
 800962e:	4b65      	ldr	r3, [pc, #404]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	4a67      	ldr	r2, [pc, #412]	@ (80097d0 <BMP280_get_calibration+0x2d0>)
 8009634:	4965      	ldr	r1, [pc, #404]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	9000      	str	r0, [sp, #0]
 800963a:	0023      	movs	r3, r4
 800963c:	2003      	movs	r0, #3
 800963e:	f008 f8c9 	bl	80117d4 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 8009642:	4b5f      	ldr	r3, [pc, #380]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009644:	78db      	ldrb	r3, [r3, #3]
 8009646:	001c      	movs	r4, r3
 8009648:	4b5d      	ldr	r3, [pc, #372]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800964a:	789b      	ldrb	r3, [r3, #2]
 800964c:	0018      	movs	r0, r3
 800964e:	4b5d      	ldr	r3, [pc, #372]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009650:	2202      	movs	r2, #2
 8009652:	5e9b      	ldrsh	r3, [r3, r2]
 8009654:	4a5f      	ldr	r2, [pc, #380]	@ (80097d4 <BMP280_get_calibration+0x2d4>)
 8009656:	495d      	ldr	r1, [pc, #372]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	9000      	str	r0, [sp, #0]
 800965c:	0023      	movs	r3, r4
 800965e:	2003      	movs	r0, #3
 8009660:	f008 f8b8 	bl	80117d4 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 8009664:	4b56      	ldr	r3, [pc, #344]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009666:	795b      	ldrb	r3, [r3, #5]
 8009668:	001c      	movs	r4, r3
 800966a:	4b55      	ldr	r3, [pc, #340]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800966c:	791b      	ldrb	r3, [r3, #4]
 800966e:	0018      	movs	r0, r3
 8009670:	4b54      	ldr	r3, [pc, #336]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009672:	2204      	movs	r2, #4
 8009674:	5e9b      	ldrsh	r3, [r3, r2]
 8009676:	4a58      	ldr	r2, [pc, #352]	@ (80097d8 <BMP280_get_calibration+0x2d8>)
 8009678:	4954      	ldr	r1, [pc, #336]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	9000      	str	r0, [sp, #0]
 800967e:	0023      	movs	r3, r4
 8009680:	2003      	movs	r0, #3
 8009682:	f008 f8a7 	bl	80117d4 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 8009686:	4b4e      	ldr	r3, [pc, #312]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009688:	79db      	ldrb	r3, [r3, #7]
 800968a:	001c      	movs	r4, r3
 800968c:	4b4c      	ldr	r3, [pc, #304]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800968e:	799b      	ldrb	r3, [r3, #6]
 8009690:	0018      	movs	r0, r3
 8009692:	4b4c      	ldr	r3, [pc, #304]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009694:	88db      	ldrh	r3, [r3, #6]
 8009696:	4a51      	ldr	r2, [pc, #324]	@ (80097dc <BMP280_get_calibration+0x2dc>)
 8009698:	494c      	ldr	r1, [pc, #304]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	9000      	str	r0, [sp, #0]
 800969e:	0023      	movs	r3, r4
 80096a0:	2003      	movs	r0, #3
 80096a2:	f008 f897 	bl	80117d4 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 80096a6:	4b46      	ldr	r3, [pc, #280]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096a8:	7a5b      	ldrb	r3, [r3, #9]
 80096aa:	001c      	movs	r4, r3
 80096ac:	4b44      	ldr	r3, [pc, #272]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096ae:	7a1b      	ldrb	r3, [r3, #8]
 80096b0:	0018      	movs	r0, r3
 80096b2:	4b44      	ldr	r3, [pc, #272]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80096b4:	2208      	movs	r2, #8
 80096b6:	5e9b      	ldrsh	r3, [r3, r2]
 80096b8:	4a49      	ldr	r2, [pc, #292]	@ (80097e0 <BMP280_get_calibration+0x2e0>)
 80096ba:	4944      	ldr	r1, [pc, #272]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	9000      	str	r0, [sp, #0]
 80096c0:	0023      	movs	r3, r4
 80096c2:	2003      	movs	r0, #3
 80096c4:	f008 f886 	bl	80117d4 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 80096c8:	4b3d      	ldr	r3, [pc, #244]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096ca:	7adb      	ldrb	r3, [r3, #11]
 80096cc:	001c      	movs	r4, r3
 80096ce:	4b3c      	ldr	r3, [pc, #240]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096d0:	7a9b      	ldrb	r3, [r3, #10]
 80096d2:	0018      	movs	r0, r3
 80096d4:	4b3b      	ldr	r3, [pc, #236]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80096d6:	220a      	movs	r2, #10
 80096d8:	5e9b      	ldrsh	r3, [r3, r2]
 80096da:	4a42      	ldr	r2, [pc, #264]	@ (80097e4 <BMP280_get_calibration+0x2e4>)
 80096dc:	493b      	ldr	r1, [pc, #236]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 80096de:	9301      	str	r3, [sp, #4]
 80096e0:	9000      	str	r0, [sp, #0]
 80096e2:	0023      	movs	r3, r4
 80096e4:	2003      	movs	r0, #3
 80096e6:	f008 f875 	bl	80117d4 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 80096ea:	4b35      	ldr	r3, [pc, #212]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096ec:	7b5b      	ldrb	r3, [r3, #13]
 80096ee:	001c      	movs	r4, r3
 80096f0:	4b33      	ldr	r3, [pc, #204]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 80096f2:	7b1b      	ldrb	r3, [r3, #12]
 80096f4:	0018      	movs	r0, r3
 80096f6:	4b33      	ldr	r3, [pc, #204]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80096f8:	220c      	movs	r2, #12
 80096fa:	5e9b      	ldrsh	r3, [r3, r2]
 80096fc:	4a3a      	ldr	r2, [pc, #232]	@ (80097e8 <BMP280_get_calibration+0x2e8>)
 80096fe:	4933      	ldr	r1, [pc, #204]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	9000      	str	r0, [sp, #0]
 8009704:	0023      	movs	r3, r4
 8009706:	2003      	movs	r0, #3
 8009708:	f008 f864 	bl	80117d4 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800970c:	4b2c      	ldr	r3, [pc, #176]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800970e:	7bdb      	ldrb	r3, [r3, #15]
 8009710:	001c      	movs	r4, r3
 8009712:	4b2b      	ldr	r3, [pc, #172]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009714:	7b9b      	ldrb	r3, [r3, #14]
 8009716:	0018      	movs	r0, r3
 8009718:	4b2a      	ldr	r3, [pc, #168]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 800971a:	220e      	movs	r2, #14
 800971c:	5e9b      	ldrsh	r3, [r3, r2]
 800971e:	4a33      	ldr	r2, [pc, #204]	@ (80097ec <BMP280_get_calibration+0x2ec>)
 8009720:	492a      	ldr	r1, [pc, #168]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	9000      	str	r0, [sp, #0]
 8009726:	0023      	movs	r3, r4
 8009728:	2003      	movs	r0, #3
 800972a:	f008 f853 	bl	80117d4 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800972e:	4b24      	ldr	r3, [pc, #144]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009730:	7c5b      	ldrb	r3, [r3, #17]
 8009732:	001c      	movs	r4, r3
 8009734:	4b22      	ldr	r3, [pc, #136]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009736:	7c1b      	ldrb	r3, [r3, #16]
 8009738:	0018      	movs	r0, r3
 800973a:	4b22      	ldr	r3, [pc, #136]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 800973c:	2210      	movs	r2, #16
 800973e:	5e9b      	ldrsh	r3, [r3, r2]
 8009740:	4a2b      	ldr	r2, [pc, #172]	@ (80097f0 <BMP280_get_calibration+0x2f0>)
 8009742:	4922      	ldr	r1, [pc, #136]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	9000      	str	r0, [sp, #0]
 8009748:	0023      	movs	r3, r4
 800974a:	2003      	movs	r0, #3
 800974c:	f008 f842 	bl	80117d4 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 8009750:	4b1b      	ldr	r3, [pc, #108]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009752:	7cdb      	ldrb	r3, [r3, #19]
 8009754:	001c      	movs	r4, r3
 8009756:	4b1a      	ldr	r3, [pc, #104]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009758:	7c9b      	ldrb	r3, [r3, #18]
 800975a:	0018      	movs	r0, r3
 800975c:	4b19      	ldr	r3, [pc, #100]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 800975e:	2212      	movs	r2, #18
 8009760:	5e9b      	ldrsh	r3, [r3, r2]
 8009762:	4a24      	ldr	r2, [pc, #144]	@ (80097f4 <BMP280_get_calibration+0x2f4>)
 8009764:	4919      	ldr	r1, [pc, #100]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	9000      	str	r0, [sp, #0]
 800976a:	0023      	movs	r3, r4
 800976c:	2003      	movs	r0, #3
 800976e:	f008 f831 	bl	80117d4 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 8009772:	4b13      	ldr	r3, [pc, #76]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009774:	7d5b      	ldrb	r3, [r3, #21]
 8009776:	001c      	movs	r4, r3
 8009778:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	0018      	movs	r0, r3
 800977e:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 8009780:	2214      	movs	r2, #20
 8009782:	5e9b      	ldrsh	r3, [r3, r2]
 8009784:	4a1c      	ldr	r2, [pc, #112]	@ (80097f8 <BMP280_get_calibration+0x2f8>)
 8009786:	4911      	ldr	r1, [pc, #68]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	9000      	str	r0, [sp, #0]
 800978c:	0023      	movs	r3, r4
 800978e:	2003      	movs	r0, #3
 8009790:	f008 f820 	bl	80117d4 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 8009794:	4b0a      	ldr	r3, [pc, #40]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 8009796:	7ddb      	ldrb	r3, [r3, #23]
 8009798:	001c      	movs	r4, r3
 800979a:	4b09      	ldr	r3, [pc, #36]	@ (80097c0 <BMP280_get_calibration+0x2c0>)
 800979c:	7d9b      	ldrb	r3, [r3, #22]
 800979e:	0018      	movs	r0, r3
 80097a0:	4b08      	ldr	r3, [pc, #32]	@ (80097c4 <BMP280_get_calibration+0x2c4>)
 80097a2:	2216      	movs	r2, #22
 80097a4:	5e9b      	ldrsh	r3, [r3, r2]
 80097a6:	4a15      	ldr	r2, [pc, #84]	@ (80097fc <BMP280_get_calibration+0x2fc>)
 80097a8:	4908      	ldr	r1, [pc, #32]	@ (80097cc <BMP280_get_calibration+0x2cc>)
 80097aa:	9301      	str	r3, [sp, #4]
 80097ac:	9000      	str	r0, [sp, #0]
 80097ae:	0023      	movs	r3, r4
 80097b0:	2003      	movs	r0, #3
 80097b2:	f008 f80f 	bl	80117d4 <CreateLine>
}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	46bd      	mov	sp, r7
 80097ba:	b001      	add	sp, #4
 80097bc:	bd90      	pop	{r4, r7, pc}
 80097be:	46c0      	nop			@ (mov r8, r8)
 80097c0:	20000bfc 	.word	0x20000bfc
 80097c4:	20000bd4 	.word	0x20000bd4
 80097c8:	08029278 	.word	0x08029278
 80097cc:	08029294 	.word	0x08029294
 80097d0:	08029298 	.word	0x08029298
 80097d4:	080292cc 	.word	0x080292cc
 80097d8:	08029300 	.word	0x08029300
 80097dc:	08029334 	.word	0x08029334
 80097e0:	08029368 	.word	0x08029368
 80097e4:	0802939c 	.word	0x0802939c
 80097e8:	080293d0 	.word	0x080293d0
 80097ec:	08029404 	.word	0x08029404
 80097f0:	08029438 	.word	0x08029438
 80097f4:	0802946c 	.word	0x0802946c
 80097f8:	080294a0 	.word	0x080294a0
 80097fc:	080294d4 	.word	0x080294d4

08009800 <BMP280_probe>:

static bool BMP280_probe() {
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 8009806:	4b34      	ldr	r3, [pc, #208]	@ (80098d8 <BMP280_probe+0xd8>)
 8009808:	2276      	movs	r2, #118	@ 0x76
 800980a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800980c:	1dba      	adds	r2, r7, #6
 800980e:	2301      	movs	r3, #1
 8009810:	2101      	movs	r1, #1
 8009812:	20d0      	movs	r0, #208	@ 0xd0
 8009814:	f7ff fe14 	bl	8009440 <ReadMemRegister>
 8009818:	0003      	movs	r3, r0
 800981a:	001a      	movs	r2, r3
 800981c:	1dfb      	adds	r3, r7, #7
 800981e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 8009820:	1dfb      	adds	r3, r7, #7
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	b25b      	sxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <BMP280_probe+0x40>
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d006      	beq.n	8009840 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8009832:	1dbb      	adds	r3, r7, #6
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	4a29      	ldr	r2, [pc, #164]	@ (80098dc <BMP280_probe+0xdc>)
 8009838:	4929      	ldr	r1, [pc, #164]	@ (80098e0 <BMP280_probe+0xe0>)
 800983a:	2003      	movs	r0, #3
 800983c:	f007 ffca 	bl	80117d4 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 8009840:	1dbb      	adds	r3, r7, #6
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b58      	cmp	r3, #88	@ 0x58
 8009846:	d01f      	beq.n	8009888 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 8009848:	4b23      	ldr	r3, [pc, #140]	@ (80098d8 <BMP280_probe+0xd8>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	b2da      	uxtb	r2, r3
 8009850:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <BMP280_probe+0xd8>)
 8009852:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8009854:	1dba      	adds	r2, r7, #6
 8009856:	2301      	movs	r3, #1
 8009858:	2101      	movs	r1, #1
 800985a:	20d0      	movs	r0, #208	@ 0xd0
 800985c:	f7ff fdf0 	bl	8009440 <ReadMemRegister>
 8009860:	0003      	movs	r3, r0
 8009862:	001a      	movs	r2, r3
 8009864:	1dfb      	adds	r3, r7, #7
 8009866:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 8009868:	1dfb      	adds	r3, r7, #7
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	b25b      	sxtb	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <BMP280_probe+0x88>
 8009872:	1dbb      	adds	r3, r7, #6
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d006      	beq.n	8009888 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800987a:	1dbb      	adds	r3, r7, #6
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	4a17      	ldr	r2, [pc, #92]	@ (80098dc <BMP280_probe+0xdc>)
 8009880:	4917      	ldr	r1, [pc, #92]	@ (80098e0 <BMP280_probe+0xe0>)
 8009882:	2003      	movs	r0, #3
 8009884:	f007 ffa6 	bl	80117d4 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 8009888:	1dbb      	adds	r3, r7, #6
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b58      	cmp	r3, #88	@ 0x58
 800988e:	d110      	bne.n	80098b2 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 8009890:	1dbb      	adds	r3, r7, #6
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	0018      	movs	r0, r3
 8009896:	4b10      	ldr	r3, [pc, #64]	@ (80098d8 <BMP280_probe+0xd8>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	4a12      	ldr	r2, [pc, #72]	@ (80098e4 <BMP280_probe+0xe4>)
 800989c:	4912      	ldr	r1, [pc, #72]	@ (80098e8 <BMP280_probe+0xe8>)
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	0003      	movs	r3, r0
 80098a2:	2002      	movs	r0, #2
 80098a4:	f007 ff96 	bl	80117d4 <CreateLine>
      BMP280_reset(); // get an initial state
 80098a8:	f7ff fe0c 	bl	80094c4 <BMP280_reset>
      BMP280_get_calibration();
 80098ac:	f7ff fe28 	bl	8009500 <BMP280_get_calibration>
 80098b0:	e008      	b.n	80098c4 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 80098b2:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <BMP280_probe+0xd8>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 80098b8:	4a0c      	ldr	r2, [pc, #48]	@ (80098ec <BMP280_probe+0xec>)
 80098ba:	4b0d      	ldr	r3, [pc, #52]	@ (80098f0 <BMP280_probe+0xf0>)
 80098bc:	0019      	movs	r1, r3
 80098be:	2001      	movs	r0, #1
 80098c0:	f007 ff88 	bl	80117d4 <CreateLine>
    }
    return bmp280I2Caddr;
 80098c4:	4b04      	ldr	r3, [pc, #16]	@ (80098d8 <BMP280_probe+0xd8>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	1e5a      	subs	r2, r3, #1
 80098ca:	4193      	sbcs	r3, r2
 80098cc:	b2db      	uxtb	r3, r3
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b002      	add	sp, #8
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	46c0      	nop			@ (mov r8, r8)
 80098d8:	20000094 	.word	0x20000094
 80098dc:	08029508 	.word	0x08029508
 80098e0:	08029294 	.word	0x08029294
 80098e4:	08029538 	.word	0x08029538
 80098e8:	08029274 	.word	0x08029274
 80098ec:	08029570 	.word	0x08029570
 80098f0:	08029584 	.word	0x08029584

080098f4 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  return BMP280_probe();
 80098f8:	f7ff ff82 	bl	8009800 <BMP280_probe>
 80098fc:	0003      	movs	r3, r0
}
 80098fe:	0018      	movs	r0, r3
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800990e:	4b05      	ldr	r3, [pc, #20]	@ (8009924 <BMP_Init+0x20>)
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8009914:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <BMP_Init+0x24>)
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	601a      	str	r2, [r3, #0]
}
 800991a:	46c0      	nop			@ (mov r8, r8)
 800991c:	46bd      	mov	sp, r7
 800991e:	b002      	add	sp, #8
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			@ (mov r8, r8)
 8009924:	20000bd0 	.word	0x20000bd0
 8009928:	20000bcc 	.word	0x20000bcc

0800992c <BMP280_set_config>:


static bool BMP280_set_config() {
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 8009932:	1dbb      	adds	r3, r7, #6
 8009934:	228c      	movs	r2, #140	@ 0x8c
 8009936:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 8009938:	1dba      	adds	r2, r7, #6
 800993a:	2301      	movs	r3, #1
 800993c:	2101      	movs	r1, #1
 800993e:	20f5      	movs	r0, #245	@ 0xf5
 8009940:	f7ff fd4e 	bl	80093e0 <WriteMemRegister>
 8009944:	0003      	movs	r3, r0
 8009946:	001a      	movs	r2, r3
 8009948:	1dfb      	adds	r3, r7, #7
 800994a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800994c:	f008 fb8e 	bl	801206c <HAL_GetTick>
 8009950:	0003      	movs	r3, r0
 8009952:	330a      	adds	r3, #10
 8009954:	001a      	movs	r2, r3
 8009956:	4b06      	ldr	r3, [pc, #24]	@ (8009970 <BMP280_set_config+0x44>)
 8009958:	601a      	str	r2, [r3, #0]
  return rslt;
 800995a:	1dfb      	adds	r3, r7, #7
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b25b      	sxtb	r3, r3
 8009960:	1e5a      	subs	r2, r3, #1
 8009962:	4193      	sbcs	r3, r2
 8009964:	b2db      	uxtb	r3, r3
}
 8009966:	0018      	movs	r0, r3
 8009968:	46bd      	mov	sp, r7
 800996a:	b002      	add	sp, #8
 800996c:	bd80      	pop	{r7, pc}
 800996e:	46c0      	nop			@ (mov r8, r8)
 8009970:	20000bf8 	.word	0x20000bf8

08009974 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800997a:	1dbb      	adds	r3, r7, #6
 800997c:	2208      	movs	r2, #8
 800997e:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 8009980:	4b22      	ldr	r3, [pc, #136]	@ (8009a0c <BMP280_set_mode+0x98>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	224c      	movs	r2, #76	@ 0x4c
 8009986:	4313      	orrs	r3, r2
 8009988:	b2da      	uxtb	r2, r3
 800998a:	1d7b      	adds	r3, r7, #5
 800998c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800998e:	1d7a      	adds	r2, r7, #5
 8009990:	2301      	movs	r3, #1
 8009992:	2101      	movs	r1, #1
 8009994:	20f4      	movs	r0, #244	@ 0xf4
 8009996:	f7ff fd23 	bl	80093e0 <WriteMemRegister>
 800999a:	0003      	movs	r3, r0
 800999c:	001a      	movs	r2, r3
 800999e:	1dfb      	adds	r3, r7, #7
 80099a0:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 80099a2:	f008 fb63 	bl	801206c <HAL_GetTick>
 80099a6:	0003      	movs	r3, r0
 80099a8:	22fa      	movs	r2, #250	@ 0xfa
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	189a      	adds	r2, r3, r2
 80099ae:	4b18      	ldr	r3, [pc, #96]	@ (8009a10 <BMP280_set_mode+0x9c>)
 80099b0:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 80099b2:	e016      	b.n	80099e2 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 80099b4:	1dba      	adds	r2, r7, #6
 80099b6:	2301      	movs	r3, #1
 80099b8:	2101      	movs	r1, #1
 80099ba:	20f3      	movs	r0, #243	@ 0xf3
 80099bc:	f7ff fd40 	bl	8009440 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 80099c0:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <BMP280_set_mode+0x9c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	0018      	movs	r0, r3
 80099c6:	f007 feaf 	bl	8011728 <TimestampIsReached>
 80099ca:	1e03      	subs	r3, r0, #0
 80099cc:	d006      	beq.n	80099dc <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 80099ce:	4a11      	ldr	r2, [pc, #68]	@ (8009a14 <BMP280_set_mode+0xa0>)
 80099d0:	4b11      	ldr	r3, [pc, #68]	@ (8009a18 <BMP280_set_mode+0xa4>)
 80099d2:	0019      	movs	r1, r3
 80099d4:	2001      	movs	r0, #1
 80099d6:	f007 fefd 	bl	80117d4 <CreateLine>
      break;
 80099da:	e008      	b.n	80099ee <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 80099dc:	2001      	movs	r0, #1
 80099de:	f008 fb4f 	bl	8012080 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 80099e2:	1dbb      	adds	r3, r7, #6
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	001a      	movs	r2, r3
 80099e8:	2308      	movs	r3, #8
 80099ea:	4013      	ands	r3, r2
 80099ec:	d1e2      	bne.n	80099b4 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 80099ee:	f008 fb3d 	bl	801206c <HAL_GetTick>
 80099f2:	0002      	movs	r2, r0
 80099f4:	4b06      	ldr	r3, [pc, #24]	@ (8009a10 <BMP280_set_mode+0x9c>)
 80099f6:	601a      	str	r2, [r3, #0]
  return rslt;
 80099f8:	1dfb      	adds	r3, r7, #7
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	b25b      	sxtb	r3, r3
 80099fe:	1e5a      	subs	r2, r3, #1
 8009a00:	4193      	sbcs	r3, r2
 8009a02:	b2db      	uxtb	r3, r3
}
 8009a04:	0018      	movs	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	b002      	add	sp, #8
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000095 	.word	0x20000095
 8009a10:	20000bf8 	.word	0x20000bf8
 8009a14:	08029588 	.word	0x08029588
 8009a18:	08029584 	.word	0x08029584

08009a1c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8009a22:	1dba      	adds	r2, r7, #6
 8009a24:	2301      	movs	r3, #1
 8009a26:	2101      	movs	r1, #1
 8009a28:	20f4      	movs	r0, #244	@ 0xf4
 8009a2a:	f7ff fd09 	bl	8009440 <ReadMemRegister>
 8009a2e:	0003      	movs	r3, r0
 8009a30:	001a      	movs	r2, r3
 8009a32:	1dfb      	adds	r3, r7, #7
 8009a34:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8009a36:	1dbb      	adds	r3, r7, #6
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	1dbb      	adds	r3, r7, #6
 8009a42:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8009a44:	f008 fb12 	bl	801206c <HAL_GetTick>
 8009a48:	0003      	movs	r3, r0
 8009a4a:	330a      	adds	r3, #10
 8009a4c:	001a      	movs	r2, r3
 8009a4e:	4b08      	ldr	r3, [pc, #32]	@ (8009a70 <BMP280_get_mode+0x54>)
 8009a50:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8009a52:	1dfb      	adds	r3, r7, #7
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <BMP280_get_mode+0x46>
    bmpData = 255;
 8009a5c:	1dbb      	adds	r3, r7, #6
 8009a5e:	22ff      	movs	r2, #255	@ 0xff
 8009a60:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8009a62:	1dbb      	adds	r3, r7, #6
 8009a64:	781b      	ldrb	r3, [r3, #0]
}
 8009a66:	0018      	movs	r0, r3
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	b002      	add	sp, #8
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	46c0      	nop			@ (mov r8, r8)
 8009a70:	20000bf8 	.word	0x20000bf8

08009a74 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8009a74:	b5b0      	push	{r4, r5, r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8009a7a:	1d3a      	adds	r2, r7, #4
 8009a7c:	2306      	movs	r3, #6
 8009a7e:	2101      	movs	r1, #1
 8009a80:	20f7      	movs	r0, #247	@ 0xf7
 8009a82:	f7ff fcdd 	bl	8009440 <ReadMemRegister>
 8009a86:	0003      	movs	r3, r0
 8009a88:	001a      	movs	r2, r3
 8009a8a:	230f      	movs	r3, #15
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b80      	cmp	r3, #128	@ 0x80
 8009a96:	d00f      	beq.n	8009ab8 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8009a98:	1d3b      	adds	r3, r7, #4
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	031a      	lsls	r2, r3, #12
 8009a9e:	1d3b      	adds	r3, r7, #4
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	18d3      	adds	r3, r2, r3
 8009aa6:	1d3a      	adds	r2, r7, #4
 8009aa8:	7892      	ldrb	r2, [r2, #2]
 8009aaa:	0912      	lsrs	r2, r2, #4
 8009aac:	b2d2      	uxtb	r2, r2
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	001a      	movs	r2, r3
 8009ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8009b60 <BMP280_get_measurement_values+0xec>)
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e019      	b.n	8009aec <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8009ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8009b64 <BMP280_get_measurement_values+0xf0>)
 8009aba:	4b2b      	ldr	r3, [pc, #172]	@ (8009b68 <BMP280_get_measurement_values+0xf4>)
 8009abc:	0019      	movs	r1, r3
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f007 fe88 	bl	80117d4 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8009ac4:	1d3b      	adds	r3, r7, #4
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	001d      	movs	r5, r3
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	0018      	movs	r0, r3
 8009ad0:	1d3b      	adds	r3, r7, #4
 8009ad2:	789b      	ldrb	r3, [r3, #2]
 8009ad4:	001c      	movs	r4, r3
 8009ad6:	4b22      	ldr	r3, [pc, #136]	@ (8009b60 <BMP280_get_measurement_values+0xec>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a24      	ldr	r2, [pc, #144]	@ (8009b6c <BMP280_get_measurement_values+0xf8>)
 8009adc:	4924      	ldr	r1, [pc, #144]	@ (8009b70 <BMP280_get_measurement_values+0xfc>)
 8009ade:	9302      	str	r3, [sp, #8]
 8009ae0:	9401      	str	r4, [sp, #4]
 8009ae2:	9000      	str	r0, [sp, #0]
 8009ae4:	002b      	movs	r3, r5
 8009ae6:	2003      	movs	r0, #3
 8009ae8:	f007 fe74 	bl	80117d4 <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8009aec:	1d3b      	adds	r3, r7, #4
 8009aee:	78db      	ldrb	r3, [r3, #3]
 8009af0:	2b80      	cmp	r3, #128	@ 0x80
 8009af2:	d00f      	beq.n	8009b14 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8009af4:	1d3b      	adds	r3, r7, #4
 8009af6:	78db      	ldrb	r3, [r3, #3]
 8009af8:	031a      	lsls	r2, r3, #12
 8009afa:	1d3b      	adds	r3, r7, #4
 8009afc:	791b      	ldrb	r3, [r3, #4]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	18d3      	adds	r3, r2, r3
 8009b02:	1d3a      	adds	r2, r7, #4
 8009b04:	7952      	ldrb	r2, [r2, #5]
 8009b06:	0912      	lsrs	r2, r2, #4
 8009b08:	b2d2      	uxtb	r2, r2
 8009b0a:	189b      	adds	r3, r3, r2
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <BMP280_get_measurement_values+0x100>)
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e019      	b.n	8009b48 <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8009b14:	4a18      	ldr	r2, [pc, #96]	@ (8009b78 <BMP280_get_measurement_values+0x104>)
 8009b16:	4b14      	ldr	r3, [pc, #80]	@ (8009b68 <BMP280_get_measurement_values+0xf4>)
 8009b18:	0019      	movs	r1, r3
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	f007 fe5a 	bl	80117d4 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8009b20:	1d3b      	adds	r3, r7, #4
 8009b22:	78db      	ldrb	r3, [r3, #3]
 8009b24:	001d      	movs	r5, r3
 8009b26:	1d3b      	adds	r3, r7, #4
 8009b28:	791b      	ldrb	r3, [r3, #4]
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	1d3b      	adds	r3, r7, #4
 8009b2e:	795b      	ldrb	r3, [r3, #5]
 8009b30:	001c      	movs	r4, r3
 8009b32:	4b10      	ldr	r3, [pc, #64]	@ (8009b74 <BMP280_get_measurement_values+0x100>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a11      	ldr	r2, [pc, #68]	@ (8009b7c <BMP280_get_measurement_values+0x108>)
 8009b38:	490d      	ldr	r1, [pc, #52]	@ (8009b70 <BMP280_get_measurement_values+0xfc>)
 8009b3a:	9302      	str	r3, [sp, #8]
 8009b3c:	9401      	str	r4, [sp, #4]
 8009b3e:	9000      	str	r0, [sp, #0]
 8009b40:	002b      	movs	r3, r5
 8009b42:	2003      	movs	r0, #3
 8009b44:	f007 fe46 	bl	80117d4 <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8009b48:	230f      	movs	r3, #15
 8009b4a:	18fb      	adds	r3, r7, r3
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b25b      	sxtb	r3, r3
 8009b50:	1e5a      	subs	r2, r3, #1
 8009b52:	4193      	sbcs	r3, r2
 8009b54:	b2db      	uxtb	r3, r3
}
 8009b56:	0018      	movs	r0, r3
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b004      	add	sp, #16
 8009b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	20000bf4 	.word	0x20000bf4
 8009b64:	080295b4 	.word	0x080295b4
 8009b68:	08029584 	.word	0x08029584
 8009b6c:	080295f8 	.word	0x080295f8
 8009b70:	08029294 	.word	0x08029294
 8009b74:	20000bf0 	.word	0x20000bf0
 8009b78:	08029640 	.word	0x08029640
 8009b7c:	0802967c 	.word	0x0802967c

08009b80 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8009b86:	4b1e      	ldr	r3, [pc, #120]	@ (8009c00 <BMP280_calc_temperature+0x80>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	10da      	asrs	r2, r3, #3
 8009b90:	4b1c      	ldr	r3, [pc, #112]	@ (8009c04 <BMP280_calc_temperature+0x84>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	4a1a      	ldr	r2, [pc, #104]	@ (8009c04 <BMP280_calc_temperature+0x84>)
 8009b9a:	2102      	movs	r1, #2
 8009b9c:	5e52      	ldrsh	r2, [r2, r1]
 8009b9e:	4353      	muls	r3, r2
 8009ba0:	12db      	asrs	r3, r3, #11
 8009ba2:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	111b      	asrs	r3, r3, #4
 8009ba8:	4a16      	ldr	r2, [pc, #88]	@ (8009c04 <BMP280_calc_temperature+0x84>)
 8009baa:	8812      	ldrh	r2, [r2, #0]
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	1112      	asrs	r2, r2, #4
 8009bb2:	4914      	ldr	r1, [pc, #80]	@ (8009c04 <BMP280_calc_temperature+0x84>)
 8009bb4:	8809      	ldrh	r1, [r1, #0]
 8009bb6:	1a52      	subs	r2, r2, r1
 8009bb8:	4353      	muls	r3, r2
 8009bba:	131b      	asrs	r3, r3, #12
 8009bbc:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <BMP280_calc_temperature+0x84>)
 8009bbe:	2104      	movs	r1, #4
 8009bc0:	5e52      	ldrsh	r2, [r2, r1]
 8009bc2:	4353      	muls	r3, r2
 8009bc4:	139b      	asrs	r3, r3, #14
 8009bc6:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	18d2      	adds	r2, r2, r3
 8009bce:	4b0e      	ldr	r3, [pc, #56]	@ (8009c08 <BMP280_calc_temperature+0x88>)
 8009bd0:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c08 <BMP280_calc_temperature+0x88>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	0013      	movs	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	189b      	adds	r3, r3, r2
 8009bdc:	3380      	adds	r3, #128	@ 0x80
 8009bde:	121b      	asrs	r3, r3, #8
 8009be0:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8009be2:	68b8      	ldr	r0, [r7, #8]
 8009be4:	f7f7 fcf4 	bl	80015d0 <__aeabi_i2f>
 8009be8:	1c03      	adds	r3, r0, #0
 8009bea:	4908      	ldr	r1, [pc, #32]	@ (8009c0c <BMP280_calc_temperature+0x8c>)
 8009bec:	1c18      	adds	r0, r3, #0
 8009bee:	f7f6 fff1 	bl	8000bd4 <__aeabi_fdiv>
 8009bf2:	1c03      	adds	r3, r0, #0
 8009bf4:	607b      	str	r3, [r7, #4]
  return airTemp;
 8009bf6:	687b      	ldr	r3, [r7, #4]
}
 8009bf8:	1c18      	adds	r0, r3, #0
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b006      	add	sp, #24
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000bf0 	.word	0x20000bf0
 8009c04:	20000bd4 	.word	0x20000bd4
 8009c08:	20000bec 	.word	0x20000bec
 8009c0c:	42c80000 	.word	0x42c80000

08009c10 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8009c16:	4b4e      	ldr	r3, [pc, #312]	@ (8009d50 <BMP280_calc_pressure+0x140>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8009c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8009d54 <BMP280_calc_pressure+0x144>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	105b      	asrs	r3, r3, #1
 8009c22:	4a4d      	ldr	r2, [pc, #308]	@ (8009d58 <BMP280_calc_pressure+0x148>)
 8009c24:	4694      	mov	ip, r2
 8009c26:	4463      	add	r3, ip
 8009c28:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	109b      	asrs	r3, r3, #2
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	1092      	asrs	r2, r2, #2
 8009c32:	4353      	muls	r3, r2
 8009c34:	12db      	asrs	r3, r3, #11
 8009c36:	4a49      	ldr	r2, [pc, #292]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c38:	2110      	movs	r1, #16
 8009c3a:	5e52      	ldrsh	r2, [r2, r1]
 8009c3c:	4353      	muls	r3, r2
 8009c3e:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8009c40:	4b46      	ldr	r3, [pc, #280]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c42:	220e      	movs	r2, #14
 8009c44:	5e9b      	ldrsh	r3, [r3, r2]
 8009c46:	001a      	movs	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4353      	muls	r3, r2
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	18d3      	adds	r3, r2, r3
 8009c52:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	109a      	asrs	r2, r3, #2
 8009c58:	4b40      	ldr	r3, [pc, #256]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c5a:	210c      	movs	r1, #12
 8009c5c:	5e5b      	ldrsh	r3, [r3, r1]
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	18d3      	adds	r3, r2, r3
 8009c62:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8009c64:	4b3d      	ldr	r3, [pc, #244]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c66:	220a      	movs	r2, #10
 8009c68:	5e9b      	ldrsh	r3, [r3, r2]
 8009c6a:	0019      	movs	r1, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	109b      	asrs	r3, r3, #2
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	1092      	asrs	r2, r2, #2
 8009c74:	4353      	muls	r3, r2
 8009c76:	135b      	asrs	r3, r3, #13
 8009c78:	434b      	muls	r3, r1
 8009c7a:	10da      	asrs	r2, r3, #3
 8009c7c:	4b37      	ldr	r3, [pc, #220]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c7e:	2108      	movs	r1, #8
 8009c80:	5e5b      	ldrsh	r3, [r3, r1]
 8009c82:	0019      	movs	r1, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	434b      	muls	r3, r1
 8009c88:	105b      	asrs	r3, r3, #1
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	149b      	asrs	r3, r3, #18
 8009c8e:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2280      	movs	r2, #128	@ 0x80
 8009c94:	0212      	lsls	r2, r2, #8
 8009c96:	4694      	mov	ip, r2
 8009c98:	4463      	add	r3, ip
 8009c9a:	4a30      	ldr	r2, [pc, #192]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009c9c:	88d2      	ldrh	r2, [r2, #6]
 8009c9e:	4353      	muls	r3, r2
 8009ca0:	13db      	asrs	r3, r3, #15
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <BMP280_calc_pressure+0x9e>
    return 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e04b      	b.n	8009d46 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2280      	movs	r2, #128	@ 0x80
 8009cb2:	0352      	lsls	r2, r2, #13
 8009cb4:	1ad2      	subs	r2, r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	131b      	asrs	r3, r3, #12
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	4b28      	ldr	r3, [pc, #160]	@ (8009d60 <BMP280_calc_pressure+0x150>)
 8009cc0:	4353      	muls	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	db09      	blt.n	8009cde <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f7f6 fa66 	bl	80001a4 <__udivsi3>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	e007      	b.n	8009cee <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	6978      	ldr	r0, [r7, #20]
 8009ce4:	f7f6 fa5e 	bl	80001a4 <__udivsi3>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8009cee:	4b1b      	ldr	r3, [pc, #108]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009cf0:	2216      	movs	r2, #22
 8009cf2:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	08db      	lsrs	r3, r3, #3
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	08d2      	lsrs	r2, r2, #3
 8009cfe:	4353      	muls	r3, r2
 8009d00:	0b5b      	lsrs	r3, r3, #13
 8009d02:	434b      	muls	r3, r1
 8009d04:	131b      	asrs	r3, r3, #12
 8009d06:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	089b      	lsrs	r3, r3, #2
 8009d0c:	001a      	movs	r2, r3
 8009d0e:	4b13      	ldr	r3, [pc, #76]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009d10:	2114      	movs	r1, #20
 8009d12:	5e5b      	ldrsh	r3, [r3, r1]
 8009d14:	4353      	muls	r3, r2
 8009d16:	135b      	asrs	r3, r3, #13
 8009d18:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	18d3      	adds	r3, r2, r3
 8009d20:	4a0e      	ldr	r2, [pc, #56]	@ (8009d5c <BMP280_calc_pressure+0x14c>)
 8009d22:	2112      	movs	r1, #18
 8009d24:	5e52      	ldrsh	r2, [r2, r1]
 8009d26:	189b      	adds	r3, r3, r2
 8009d28:	111a      	asrs	r2, r3, #4
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	18d3      	adds	r3, r2, r3
 8009d2e:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8009d30:	6978      	ldr	r0, [r7, #20]
 8009d32:	f7f7 fc99 	bl	8001668 <__aeabi_ui2f>
 8009d36:	1c03      	adds	r3, r0, #0
 8009d38:	490a      	ldr	r1, [pc, #40]	@ (8009d64 <BMP280_calc_pressure+0x154>)
 8009d3a:	1c18      	adds	r0, r3, #0
 8009d3c:	f7f6 ff4a 	bl	8000bd4 <__aeabi_fdiv>
 8009d40:	1c03      	adds	r3, r0, #0
 8009d42:	607b      	str	r3, [r7, #4]
  return airhPa;
 8009d44:	687b      	ldr	r3, [r7, #4]
}
 8009d46:	1c18      	adds	r0, r3, #0
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b006      	add	sp, #24
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	46c0      	nop			@ (mov r8, r8)
 8009d50:	20000bf4 	.word	0x20000bf4
 8009d54:	20000bec 	.word	0x20000bec
 8009d58:	ffff0600 	.word	0xffff0600
 8009d5c:	20000bd4 	.word	0x20000bd4
 8009d60:	00000c35 	.word	0x00000c35
 8009d64:	42c80000 	.word	0x42c80000

08009d68 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8009d68:	b5b0      	push	{r4, r5, r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8009d6e:	4b97      	ldr	r3, [pc, #604]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	0018      	movs	r0, r3
 8009d74:	f007 fcd8 	bl	8011728 <TimestampIsReached>
 8009d78:	0003      	movs	r3, r0
 8009d7a:	001a      	movs	r2, r3
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4053      	eors	r3, r2
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <BMP_Upkeep+0x24>
    return BMPState;
 8009d86:	4b92      	ldr	r3, [pc, #584]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	e11b      	b.n	8009fc4 <BMP_Upkeep+0x25c>
  }
  switch(BMPState) {
 8009d8c:	4b90      	ldr	r3, [pc, #576]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b09      	cmp	r3, #9
 8009d92:	d900      	bls.n	8009d96 <BMP_Upkeep+0x2e>
 8009d94:	e101      	b.n	8009f9a <BMP_Upkeep+0x232>
 8009d96:	009a      	lsls	r2, r3, #2
 8009d98:	4b8e      	ldr	r3, [pc, #568]	@ (8009fd4 <BMP_Upkeep+0x26c>)
 8009d9a:	18d3      	adds	r3, r2, r3
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8009da0:	4a8d      	ldr	r2, [pc, #564]	@ (8009fd8 <BMP_Upkeep+0x270>)
 8009da2:	4b8e      	ldr	r3, [pc, #568]	@ (8009fdc <BMP_Upkeep+0x274>)
 8009da4:	0019      	movs	r1, r3
 8009da6:	2003      	movs	r0, #3
 8009da8:	f007 fd14 	bl	80117d4 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8009dac:	f008 f95e 	bl	801206c <HAL_GetTick>
 8009db0:	0003      	movs	r3, r0
 8009db2:	4a8b      	ldr	r2, [pc, #556]	@ (8009fe0 <BMP_Upkeep+0x278>)
 8009db4:	189a      	adds	r2, r3, r2
 8009db6:	4b85      	ldr	r3, [pc, #532]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009db8:	601a      	str	r2, [r3, #0]
    break;
 8009dba:	e101      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8009dbc:	f001 fe78 	bl	800bab0 <getSensorLock>
 8009dc0:	1e03      	subs	r3, r0, #0
 8009dc2:	d000      	beq.n	8009dc6 <BMP_Upkeep+0x5e>
 8009dc4:	e0f5      	b.n	8009fb2 <BMP_Upkeep+0x24a>
      break;
    }
    BMP280_reset();
 8009dc6:	f7ff fb7d 	bl	80094c4 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8009dca:	4b81      	ldr	r3, [pc, #516]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]
    break;
 8009dd0:	e0f6      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8009dd2:	f001 fe6d 	bl	800bab0 <getSensorLock>
 8009dd6:	1e03      	subs	r3, r0, #0
 8009dd8:	d000      	beq.n	8009ddc <BMP_Upkeep+0x74>
 8009dda:	e0ec      	b.n	8009fb6 <BMP_Upkeep+0x24e>
      break;
    }
    setSensorLock(BMP280);
 8009ddc:	2004      	movs	r0, #4
 8009dde:	f001 fe57 	bl	800ba90 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8009de2:	200a      	movs	r0, #10
 8009de4:	f008 f94c 	bl	8012080 <HAL_Delay>
    if (BMP280_set_config()) {
 8009de8:	f7ff fda0 	bl	800992c <BMP280_set_config>
 8009dec:	1e03      	subs	r3, r0, #0
 8009dee:	d003      	beq.n	8009df8 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009df0:	4b77      	ldr	r3, [pc, #476]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009df2:	2202      	movs	r2, #2
 8009df4:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8009df6:	e0e3      	b.n	8009fc0 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009df8:	4b75      	ldr	r3, [pc, #468]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
  break;
 8009dfe:	e0df      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8009e00:	f001 fe56 	bl	800bab0 <getSensorLock>
 8009e04:	1e03      	subs	r3, r0, #0
 8009e06:	d035      	beq.n	8009e74 <BMP_Upkeep+0x10c>
 8009e08:	f001 fe52 	bl	800bab0 <getSensorLock>
 8009e0c:	0003      	movs	r3, r0
 8009e0e:	2b04      	cmp	r3, #4
 8009e10:	d030      	beq.n	8009e74 <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 8009e12:	1dfc      	adds	r4, r7, #7
 8009e14:	f001 fe4c 	bl	800bab0 <getSensorLock>
 8009e18:	0003      	movs	r3, r0
 8009e1a:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8009e1c:	1dfb      	adds	r3, r7, #7
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d019      	beq.n	8009e58 <BMP_Upkeep+0xf0>
 8009e24:	1dfb      	adds	r3, r7, #7
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d013      	beq.n	8009e54 <BMP_Upkeep+0xec>
 8009e2c:	1dfb      	adds	r3, r7, #7
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d00d      	beq.n	8009e50 <BMP_Upkeep+0xe8>
 8009e34:	1dfb      	adds	r3, r7, #7
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d007      	beq.n	8009e4c <BMP_Upkeep+0xe4>
 8009e3c:	1dfb      	adds	r3, r7, #7
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d101      	bne.n	8009e48 <BMP_Upkeep+0xe0>
 8009e44:	4b67      	ldr	r3, [pc, #412]	@ (8009fe4 <BMP_Upkeep+0x27c>)
 8009e46:	e008      	b.n	8009e5a <BMP_Upkeep+0xf2>
 8009e48:	4b67      	ldr	r3, [pc, #412]	@ (8009fe8 <BMP_Upkeep+0x280>)
 8009e4a:	e006      	b.n	8009e5a <BMP_Upkeep+0xf2>
 8009e4c:	4b67      	ldr	r3, [pc, #412]	@ (8009fec <BMP_Upkeep+0x284>)
 8009e4e:	e004      	b.n	8009e5a <BMP_Upkeep+0xf2>
 8009e50:	4b67      	ldr	r3, [pc, #412]	@ (8009ff0 <BMP_Upkeep+0x288>)
 8009e52:	e002      	b.n	8009e5a <BMP_Upkeep+0xf2>
 8009e54:	4b67      	ldr	r3, [pc, #412]	@ (8009ff4 <BMP_Upkeep+0x28c>)
 8009e56:	e000      	b.n	8009e5a <BMP_Upkeep+0xf2>
 8009e58:	4b67      	ldr	r3, [pc, #412]	@ (8009ff8 <BMP_Upkeep+0x290>)
 8009e5a:	4a68      	ldr	r2, [pc, #416]	@ (8009ffc <BMP_Upkeep+0x294>)
 8009e5c:	495f      	ldr	r1, [pc, #380]	@ (8009fdc <BMP_Upkeep+0x274>)
 8009e5e:	2003      	movs	r0, #3
 8009e60:	f007 fcb8 	bl	80117d4 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 8009e64:	f008 f902 	bl	801206c <HAL_GetTick>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	3361      	adds	r3, #97	@ 0x61
 8009e6c:	001a      	movs	r2, r3
 8009e6e:	4b57      	ldr	r3, [pc, #348]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009e70:	601a      	str	r2, [r3, #0]
      break;
 8009e72:	e0a5      	b.n	8009fc0 <BMP_Upkeep+0x258>
    }
    if (getSensorLock() == FREE) {
 8009e74:	f001 fe1c 	bl	800bab0 <getSensorLock>
 8009e78:	1e03      	subs	r3, r0, #0
 8009e7a:	d105      	bne.n	8009e88 <BMP_Upkeep+0x120>
      HAL_Delay(10);
 8009e7c:	200a      	movs	r0, #10
 8009e7e:	f008 f8ff 	bl	8012080 <HAL_Delay>
      setSensorLock(BMP280);
 8009e82:	2004      	movs	r0, #4
 8009e84:	f001 fe04 	bl	800ba90 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8009e88:	f7ff fd74 	bl	8009974 <BMP280_set_mode>
 8009e8c:	1e03      	subs	r3, r0, #0
 8009e8e:	d003      	beq.n	8009e98 <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009e90:	4b4f      	ldr	r3, [pc, #316]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009e92:	2205      	movs	r2, #5
 8009e94:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8009e96:	e093      	b.n	8009fc0 <BMP_Upkeep+0x258>
      Error("Error while setting BMP280 to forced mode");
 8009e98:	4a59      	ldr	r2, [pc, #356]	@ (800a000 <BMP_Upkeep+0x298>)
 8009e9a:	4b5a      	ldr	r3, [pc, #360]	@ (800a004 <BMP_Upkeep+0x29c>)
 8009e9c:	0019      	movs	r1, r3
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	f007 fc98 	bl	80117d4 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8009ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
    break;
 8009eaa:	e089      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8009eac:	f7ff fde2 	bl	8009a74 <BMP280_get_measurement_values>
 8009eb0:	1e03      	subs	r3, r0, #0
 8009eb2:	d006      	beq.n	8009ec2 <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f001 fdeb 	bl	800ba90 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8009eba:	4b45      	ldr	r3, [pc, #276]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8009ec0:	e07e      	b.n	8009fc0 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009ec2:	4b43      	ldr	r3, [pc, #268]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8009ec8:	4a4f      	ldr	r2, [pc, #316]	@ (800a008 <BMP_Upkeep+0x2a0>)
 8009eca:	4b4e      	ldr	r3, [pc, #312]	@ (800a004 <BMP_Upkeep+0x29c>)
 8009ecc:	0019      	movs	r1, r3
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f007 fc80 	bl	80117d4 <CreateLine>
  break;
 8009ed4:	e074      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8009ed6:	f7ff fe53 	bl	8009b80 <BMP280_calc_temperature>
 8009eda:	1c03      	adds	r3, r0, #0
 8009edc:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8009ede:	f7ff fe97 	bl	8009c10 <BMP280_calc_pressure>
 8009ee2:	1c03      	adds	r3, r0, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 8009ee6:	4949      	ldr	r1, [pc, #292]	@ (800a00c <BMP_Upkeep+0x2a4>)
 8009ee8:	68b8      	ldr	r0, [r7, #8]
 8009eea:	f7f6 fb35 	bl	8000558 <__aeabi_fcmpgt>
 8009eee:	1e03      	subs	r3, r0, #0
 8009ef0:	d025      	beq.n	8009f3e <BMP_Upkeep+0x1d6>
 8009ef2:	4947      	ldr	r1, [pc, #284]	@ (800a010 <BMP_Upkeep+0x2a8>)
 8009ef4:	68b8      	ldr	r0, [r7, #8]
 8009ef6:	f7f6 fb1b 	bl	8000530 <__aeabi_fcmplt>
 8009efa:	1e03      	subs	r3, r0, #0
 8009efc:	d01f      	beq.n	8009f3e <BMP_Upkeep+0x1d6>
      sethPa(airhpa);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	1c18      	adds	r0, r3, #0
 8009f02:	f7fa fb41 	bl	8004588 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7f9 faac 	bl	8003464 <__aeabi_f2d>
 8009f0c:	0004      	movs	r4, r0
 8009f0e:	000d      	movs	r5, r1
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	f7f9 faa7 	bl	8003464 <__aeabi_f2d>
 8009f16:	0002      	movs	r2, r0
 8009f18:	000b      	movs	r3, r1
 8009f1a:	483e      	ldr	r0, [pc, #248]	@ (800a014 <BMP_Upkeep+0x2ac>)
 8009f1c:	493e      	ldr	r1, [pc, #248]	@ (800a018 <BMP_Upkeep+0x2b0>)
 8009f1e:	9202      	str	r2, [sp, #8]
 8009f20:	9303      	str	r3, [sp, #12]
 8009f22:	9400      	str	r4, [sp, #0]
 8009f24:	9501      	str	r5, [sp, #4]
 8009f26:	0002      	movs	r2, r0
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f007 fc53 	bl	80117d4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 8009f2e:	f008 f89d 	bl	801206c <HAL_GetTick>
 8009f32:	0003      	movs	r3, r0
 8009f34:	4a39      	ldr	r2, [pc, #228]	@ (800a01c <BMP_Upkeep+0x2b4>)
 8009f36:	189a      	adds	r2, r3, r2
 8009f38:	4b24      	ldr	r3, [pc, #144]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	e00d      	b.n	8009f5a <BMP_Upkeep+0x1f2>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 8009f3e:	4a38      	ldr	r2, [pc, #224]	@ (800a020 <BMP_Upkeep+0x2b8>)
 8009f40:	4b30      	ldr	r3, [pc, #192]	@ (800a004 <BMP_Upkeep+0x29c>)
 8009f42:	0019      	movs	r1, r3
 8009f44:	2001      	movs	r0, #1
 8009f46:	f007 fc45 	bl	80117d4 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 2000;
 8009f4a:	f008 f88f 	bl	801206c <HAL_GetTick>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	22fa      	movs	r2, #250	@ 0xfa
 8009f52:	00d2      	lsls	r2, r2, #3
 8009f54:	189a      	adds	r2, r3, r2
 8009f56:	4b1d      	ldr	r3, [pc, #116]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009f58:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	701a      	strb	r2, [r3, #0]
    break;
 8009f60:	e02e      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 8009f62:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009f64:	2209      	movs	r2, #9
 8009f66:	701a      	strb	r2, [r3, #0]
    break;
 8009f68:	e02a      	b.n	8009fc0 <BMP_Upkeep+0x258>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8009f6a:	f001 fda1 	bl	800bab0 <getSensorLock>
 8009f6e:	1e03      	subs	r3, r0, #0
 8009f70:	d123      	bne.n	8009fba <BMP_Upkeep+0x252>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 8009f72:	f7ff fd53 	bl	8009a1c <BMP280_get_mode>
 8009f76:	0003      	movs	r3, r0
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d103      	bne.n	8009f84 <BMP_Upkeep+0x21c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009f7c:	4b14      	ldr	r3, [pc, #80]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009f7e:	2205      	movs	r2, #5
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	e002      	b.n	8009f8a <BMP_Upkeep+0x222>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009f84:	4b12      	ldr	r3, [pc, #72]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009f86:	2202      	movs	r2, #2
 8009f88:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 8009f8a:	f008 f86f 	bl	801206c <HAL_GetTick>
 8009f8e:	0003      	movs	r3, r0
 8009f90:	3317      	adds	r3, #23
 8009f92:	001a      	movs	r2, r3
 8009f94:	4b0d      	ldr	r3, [pc, #52]	@ (8009fcc <BMP_Upkeep+0x264>)
 8009f96:	601a      	str	r2, [r3, #0]
    break;
 8009f98:	e012      	b.n	8009fc0 <BMP_Upkeep+0x258>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8009fa0:	f001 fd86 	bl	800bab0 <getSensorLock>
 8009fa4:	0003      	movs	r3, r0
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	d009      	beq.n	8009fbe <BMP_Upkeep+0x256>
      setSensorLock(FREE);
 8009faa:	2000      	movs	r0, #0
 8009fac:	f001 fd70 	bl	800ba90 <setSensorLock>
    }
    break;
 8009fb0:	e005      	b.n	8009fbe <BMP_Upkeep+0x256>
      break;
 8009fb2:	46c0      	nop			@ (mov r8, r8)
 8009fb4:	e004      	b.n	8009fc0 <BMP_Upkeep+0x258>
      break;
 8009fb6:	46c0      	nop			@ (mov r8, r8)
 8009fb8:	e002      	b.n	8009fc0 <BMP_Upkeep+0x258>
      break;
 8009fba:	46c0      	nop			@ (mov r8, r8)
 8009fbc:	e000      	b.n	8009fc0 <BMP_Upkeep+0x258>
    break;
 8009fbe:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 8009fc0:	4b03      	ldr	r3, [pc, #12]	@ (8009fd0 <BMP_Upkeep+0x268>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
}
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b004      	add	sp, #16
 8009fca:	bdb0      	pop	{r4, r5, r7, pc}
 8009fcc:	20000bf8 	.word	0x20000bf8
 8009fd0:	20000096 	.word	0x20000096
 8009fd4:	0802af6c 	.word	0x0802af6c
 8009fd8:	080296c4 	.word	0x080296c4
 8009fdc:	08029294 	.word	0x08029294
 8009fe0:	002f9b80 	.word	0x002f9b80
 8009fe4:	08029700 	.word	0x08029700
 8009fe8:	08029708 	.word	0x08029708
 8009fec:	08029710 	.word	0x08029710
 8009ff0:	08029718 	.word	0x08029718
 8009ff4:	08029720 	.word	0x08029720
 8009ff8:	08029728 	.word	0x08029728
 8009ffc:	08029730 	.word	0x08029730
 800a000:	08029758 	.word	0x08029758
 800a004:	08029584 	.word	0x08029584
 800a008:	08029784 	.word	0x08029784
 800a00c:	44548000 	.word	0x44548000
 800a010:	44898000 	.word	0x44898000
 800a014:	080297bc 	.word	0x080297bc
 800a018:	08029274 	.word	0x08029274
 800a01c:	0000ea60 	.word	0x0000ea60
 800a020:	080297f4 	.word	0x080297f4

0800a024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a02a:	4b10      	ldr	r3, [pc, #64]	@ (800a06c <MX_DMA_Init+0x48>)
 800a02c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a02e:	4b0f      	ldr	r3, [pc, #60]	@ (800a06c <MX_DMA_Init+0x48>)
 800a030:	2101      	movs	r1, #1
 800a032:	430a      	orrs	r2, r1
 800a034:	631a      	str	r2, [r3, #48]	@ 0x30
 800a036:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <MX_DMA_Init+0x48>)
 800a038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03a:	2201      	movs	r2, #1
 800a03c:	4013      	ands	r3, r2
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	200a      	movs	r0, #10
 800a048:	f008 fcb4 	bl	80129b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a04c:	200a      	movs	r0, #10
 800a04e:	f008 fcc6 	bl	80129de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800a052:	2200      	movs	r2, #0
 800a054:	2103      	movs	r1, #3
 800a056:	200b      	movs	r0, #11
 800a058:	f008 fcac 	bl	80129b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800a05c:	200b      	movs	r0, #11
 800a05e:	f008 fcbe 	bl	80129de <HAL_NVIC_EnableIRQ>

}
 800a062:	46c0      	nop			@ (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	b002      	add	sp, #8
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	46c0      	nop			@ (mov r8, r8)
 800a06c:	40021000 	.word	0x40021000

0800a070 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	1dbb      	adds	r3, r7, #6
 800a07c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800a07e:	4b17      	ldr	r3, [pc, #92]	@ (800a0dc <WriteUint8ArrayEeprom+0x6c>)
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a084:	f009 f828 	bl	80130d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800a088:	2316      	movs	r3, #22
 800a08a:	18fb      	adds	r3, r7, r3
 800a08c:	2200      	movs	r2, #0
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	e015      	b.n	800a0be <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <WriteUint8ArrayEeprom+0x6c>)
 800a094:	6819      	ldr	r1, [r3, #0]
 800a096:	2416      	movs	r4, #22
 800a098:	193b      	adds	r3, r7, r4
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	18d3      	adds	r3, r2, r3
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	001a      	movs	r2, r3
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	f009 f87f 	bl	80131a8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800a0aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a0dc <WriteUint8ArrayEeprom+0x6c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <WriteUint8ArrayEeprom+0x6c>)
 800a0b2:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	881a      	ldrh	r2, [r3, #0]
 800a0b8:	193b      	adds	r3, r7, r4
 800a0ba:	3201      	adds	r2, #1
 800a0bc:	801a      	strh	r2, [r3, #0]
 800a0be:	2316      	movs	r3, #22
 800a0c0:	18fa      	adds	r2, r7, r3
 800a0c2:	1dbb      	adds	r3, r7, #6
 800a0c4:	8812      	ldrh	r2, [r2, #0]
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3e2      	bcc.n	800a092 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a0cc:	f009 f832 	bl	8013134 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800a0d0:	4b02      	ldr	r3, [pc, #8]	@ (800a0dc <WriteUint8ArrayEeprom+0x6c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
}
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	b007      	add	sp, #28
 800a0da:	bd90      	pop	{r4, r7, pc}
 800a0dc:	20000c1c 	.word	0x20000c1c

0800a0e0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	0019      	movs	r1, r3
 800a0ec:	1dbb      	adds	r3, r7, #6
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	1d3b      	adds	r3, r7, #4
 800a0f2:	1c0a      	adds	r2, r1, #0
 800a0f4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800a0f6:	1dba      	adds	r2, r7, #6
 800a0f8:	1d3b      	adds	r3, r7, #4
 800a0fa:	8812      	ldrh	r2, [r2, #0]
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d806      	bhi.n	800a110 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800a102:	1dbb      	adds	r3, r7, #6
 800a104:	881a      	ldrh	r2, [r3, #0]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	0018      	movs	r0, r3
 800a10c:	f7ff ffb0 	bl	800a070 <WriteUint8ArrayEeprom>
    }
}
 800a110:	46c0      	nop			@ (mov r8, r8)
 800a112:	46bd      	mov	sp, r7
 800a114:	b004      	add	sp, #16
 800a116:	bd80      	pop	{r7, pc}

0800a118 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	1dbb      	adds	r3, r7, #6
 800a124:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a126:	2316      	movs	r3, #22
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	2200      	movs	r2, #0
 800a12c:	801a      	strh	r2, [r3, #0]
 800a12e:	e010      	b.n	800a152 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800a130:	2016      	movs	r0, #22
 800a132:	183b      	adds	r3, r7, r0
 800a134:	881a      	ldrh	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	18d3      	adds	r3, r2, r3
 800a13a:	0019      	movs	r1, r3
 800a13c:	183b      	adds	r3, r7, r0
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	18d3      	adds	r3, r2, r3
 800a144:	780a      	ldrb	r2, [r1, #0]
 800a146:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a148:	183b      	adds	r3, r7, r0
 800a14a:	881a      	ldrh	r2, [r3, #0]
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	3201      	adds	r2, #1
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	2316      	movs	r3, #22
 800a154:	18fa      	adds	r2, r7, r3
 800a156:	1dbb      	adds	r3, r7, #6
 800a158:	8812      	ldrh	r2, [r2, #0]
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d3e7      	bcc.n	800a130 <ReadUint8ArrayEEprom+0x18>
    }
}
 800a160:	46c0      	nop			@ (mov r8, r8)
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	46bd      	mov	sp, r7
 800a166:	b006      	add	sp, #24
 800a168:	bd80      	pop	{r7, pc}

0800a16a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800a16a:	b590      	push	{r4, r7, lr}
 800a16c:	b085      	sub	sp, #20
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	000a      	movs	r2, r1
 800a174:	1cbb      	adds	r3, r7, #2
 800a176:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a178:	f008 ffae 	bl	80130d8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800a17c:	230e      	movs	r3, #14
 800a17e:	18fb      	adds	r3, r7, r3
 800a180:	2200      	movs	r2, #0
 800a182:	801a      	strh	r2, [r3, #0]
 800a184:	e00c      	b.n	800a1a0 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800a186:	240e      	movs	r4, #14
 800a188:	193b      	adds	r3, r7, r4
 800a18a:	881a      	ldrh	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	18d3      	adds	r3, r2, r3
 800a190:	0018      	movs	r0, r3
 800a192:	f008 ffdd 	bl	8013150 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800a196:	193b      	adds	r3, r7, r4
 800a198:	193a      	adds	r2, r7, r4
 800a19a:	8812      	ldrh	r2, [r2, #0]
 800a19c:	3204      	adds	r2, #4
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	230e      	movs	r3, #14
 800a1a2:	18fa      	adds	r2, r7, r3
 800a1a4:	1cbb      	adds	r3, r7, #2
 800a1a6:	8812      	ldrh	r2, [r2, #0]
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d3eb      	bcc.n	800a186 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a1ae:	f008 ffc1 	bl	8013134 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800a1b2:	46c0      	nop			@ (mov r8, r8)
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	b005      	add	sp, #20
 800a1b8:	bd90      	pop	{r4, r7, pc}
	...

0800a1bc <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1cc:	d901      	bls.n	800a1d2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800a1ce:	237f      	movs	r3, #127	@ 0x7f
 800a1d0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800a1d2:	2017      	movs	r0, #23
 800a1d4:	183b      	adds	r3, r7, r0
 800a1d6:	490d      	ldr	r1, [pc, #52]	@ (800a20c <accessLUT10log10+0x50>)
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	188a      	adds	r2, r1, r2
 800a1dc:	7812      	ldrb	r2, [r2, #0]
 800a1de:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800a1e0:	0001      	movs	r1, r0
 800a1e2:	187b      	adds	r3, r7, r1
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2206      	movs	r2, #6
 800a1e8:	4113      	asrs	r3, r2
 800a1ea:	001a      	movs	r2, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800a1f0:	187b      	adds	r3, r7, r1
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2106      	movs	r1, #6
 800a1fa:	408b      	lsls	r3, r1
 800a1fc:	1ad2      	subs	r2, r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	601a      	str	r2, [r3, #0]
}
 800a202:	46c0      	nop			@ (mov r8, r8)
 800a204:	46bd      	mov	sp, r7
 800a206:	b006      	add	sp, #24
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	46c0      	nop			@ (mov r8, r8)
 800a20c:	0802af94 	.word	0x0802af94

0800a210 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800a210:	b5b0      	push	{r4, r5, r7, lr}
 800a212:	b090      	sub	sp, #64	@ 0x40
 800a214:	af00      	add	r7, sp, #0
 800a216:	6138      	str	r0, [r7, #16]
 800a218:	6179      	str	r1, [r7, #20]
 800a21a:	60fa      	str	r2, [r7, #12]
 800a21c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800a21e:	2308      	movs	r3, #8
 800a220:	001a      	movs	r2, r3
 800a222:	3a20      	subs	r2, #32
 800a224:	2a00      	cmp	r2, #0
 800a226:	db03      	blt.n	800a230 <efficient10log10+0x20>
 800a228:	2101      	movs	r1, #1
 800a22a:	4091      	lsls	r1, r2
 800a22c:	000d      	movs	r5, r1
 800a22e:	e008      	b.n	800a242 <efficient10log10+0x32>
 800a230:	2220      	movs	r2, #32
 800a232:	1ad2      	subs	r2, r2, r3
 800a234:	2101      	movs	r1, #1
 800a236:	40d1      	lsrs	r1, r2
 800a238:	000a      	movs	r2, r1
 800a23a:	2100      	movs	r1, #0
 800a23c:	4099      	lsls	r1, r3
 800a23e:	000d      	movs	r5, r1
 800a240:	4315      	orrs	r5, r2
 800a242:	2201      	movs	r2, #1
 800a244:	409a      	lsls	r2, r3
 800a246:	0014      	movs	r4, r2
 800a248:	2201      	movs	r2, #1
 800a24a:	4252      	negs	r2, r2
 800a24c:	17d3      	asrs	r3, r2, #31
 800a24e:	1912      	adds	r2, r2, r4
 800a250:	416b      	adcs	r3, r5
 800a252:	633a      	str	r2, [r7, #48]	@ 0x30
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800a256:	2336      	movs	r3, #54	@ 0x36
 800a258:	2208      	movs	r2, #8
 800a25a:	189b      	adds	r3, r3, r2
 800a25c:	19db      	adds	r3, r3, r7
 800a25e:	2200      	movs	r2, #0
 800a260:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a262:	e017      	b.n	800a294 <efficient10log10+0x84>
    {
        P = P >> 1;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	07db      	lsls	r3, r3, #31
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	0852      	lsrs	r2, r2, #1
 800a26c:	603a      	str	r2, [r7, #0]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	431a      	orrs	r2, r3
 800a272:	603a      	str	r2, [r7, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	687c      	ldr	r4, [r7, #4]
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	617c      	str	r4, [r7, #20]
        bShift++;
 800a282:	2136      	movs	r1, #54	@ 0x36
 800a284:	2008      	movs	r0, #8
 800a286:	180b      	adds	r3, r1, r0
 800a288:	19db      	adds	r3, r3, r7
 800a28a:	881a      	ldrh	r2, [r3, #0]
 800a28c:	180b      	adds	r3, r1, r0
 800a28e:	19db      	adds	r3, r3, r7
 800a290:	3201      	adds	r2, #1
 800a292:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a298:	429a      	cmp	r2, r3
 800a29a:	d8e3      	bhi.n	800a264 <efficient10log10+0x54>
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d103      	bne.n	800a2ac <efficient10log10+0x9c>
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d8db      	bhi.n	800a264 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	2308      	movs	r3, #8
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	4099      	lsls	r1, r3
 800a2b6:	000b      	movs	r3, r1
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800a2c4:	231c      	movs	r3, #28
 800a2c6:	2408      	movs	r4, #8
 800a2c8:	191b      	adds	r3, r3, r4
 800a2ca:	19da      	adds	r2, r3, r7
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	191b      	adds	r3, r3, r4
 800a2d0:	19d9      	adds	r1, r3, r7
 800a2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f7ff ff71 	bl	800a1bc <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a2da:	2215      	movs	r2, #21
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800a2e0:	2036      	movs	r0, #54	@ 0x36
 800a2e2:	1902      	adds	r2, r0, r4
 800a2e4:	19d2      	adds	r2, r2, r7
 800a2e6:	8812      	ldrh	r2, [r2, #0]
 800a2e8:	2103      	movs	r1, #3
 800a2ea:	434a      	muls	r2, r1
 800a2ec:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a2ee:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800a2f0:	0021      	movs	r1, r4
 800a2f2:	1843      	adds	r3, r0, r1
 800a2f4:	19db      	adds	r3, r3, r7
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	4353      	muls	r3, r2
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	4113      	asrs	r3, r2
 800a300:	001a      	movs	r2, r3
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800a306:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800a308:	2314      	movs	r3, #20
 800a30a:	185b      	adds	r3, r3, r1
 800a30c:	19da      	adds	r2, r3, r7
 800a30e:	2318      	movs	r3, #24
 800a310:	185b      	adds	r3, r3, r1
 800a312:	19db      	adds	r3, r3, r7
 800a314:	0011      	movs	r1, r2
 800a316:	0018      	movs	r0, r3
 800a318:	f000 f80a 	bl	800a330 <correctIntFracNumber>
    integerPart[0] = intPart;
 800a31c:	6a3a      	ldr	r2, [r7, #32]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	601a      	str	r2, [r3, #0]
}
 800a328:	46c0      	nop			@ (mov r8, r8)
 800a32a:	46bd      	mov	sp, r7
 800a32c:	b010      	add	sp, #64	@ 0x40
 800a32e:	bdb0      	pop	{r4, r5, r7, pc}

0800a330 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800a33a:	e00a      	b.n	800a352 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b0a      	subs	r3, #10
 800a34c:	001a      	movs	r2, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b09      	cmp	r3, #9
 800a358:	dcf0      	bgt.n	800a33c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800a35a:	e00a      	b.n	800a372 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	330a      	adds	r3, #10
 800a36c:	001a      	movs	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3309      	adds	r3, #9
 800a378:	dbf0      	blt.n	800a35c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	da0f      	bge.n	800a3a2 <correctIntFracNumber+0x72>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	dd0b      	ble.n	800a3a2 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3b0a      	subs	r3, #10
 800a39a:	001a      	movs	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800a3a0:	e012      	b.n	800a3c8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd0e      	ble.n	800a3c8 <correctIntFracNumber+0x98>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da0a      	bge.n	800a3c8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	1e5a      	subs	r2, r3, #1
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330a      	adds	r3, #10
 800a3c2:	001a      	movs	r2, r3
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	601a      	str	r2, [r3, #0]
}
 800a3c8:	46c0      	nop			@ (mov r8, r8)
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	b002      	add	sp, #8
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b08b      	sub	sp, #44	@ 0x2c
 800a3d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3d6:	2414      	movs	r4, #20
 800a3d8:	193b      	adds	r3, r7, r4
 800a3da:	0018      	movs	r0, r3
 800a3dc:	2314      	movs	r3, #20
 800a3de:	001a      	movs	r2, r3
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	f019 fb55 	bl	8023a90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3e6:	4b8a      	ldr	r3, [pc, #552]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ea:	4b89      	ldr	r3, [pc, #548]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a3ec:	2104      	movs	r1, #4
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a3f2:	4b87      	ldr	r3, [pc, #540]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f6:	2204      	movs	r2, #4
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
 800a3fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3fe:	4b84      	ldr	r3, [pc, #528]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	4b83      	ldr	r3, [pc, #524]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a404:	2180      	movs	r1, #128	@ 0x80
 800a406:	430a      	orrs	r2, r1
 800a408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a40a:	4b81      	ldr	r3, [pc, #516]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40e:	2280      	movs	r2, #128	@ 0x80
 800a410:	4013      	ands	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a416:	4b7e      	ldr	r3, [pc, #504]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a41a:	4b7d      	ldr	r3, [pc, #500]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a41c:	2101      	movs	r1, #1
 800a41e:	430a      	orrs	r2, r1
 800a420:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a422:	4b7b      	ldr	r3, [pc, #492]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	2201      	movs	r2, #1
 800a428:	4013      	ands	r3, r2
 800a42a:	60bb      	str	r3, [r7, #8]
 800a42c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a42e:	4b78      	ldr	r3, [pc, #480]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a432:	4b77      	ldr	r3, [pc, #476]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a434:	2102      	movs	r1, #2
 800a436:	430a      	orrs	r2, r1
 800a438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a43a:	4b75      	ldr	r3, [pc, #468]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	2202      	movs	r2, #2
 800a440:	4013      	ands	r3, r2
 800a442:	607b      	str	r3, [r7, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a446:	4b72      	ldr	r3, [pc, #456]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44a:	4b71      	ldr	r3, [pc, #452]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a44c:	2108      	movs	r1, #8
 800a44e:	430a      	orrs	r2, r1
 800a450:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a452:	4b6f      	ldr	r3, [pc, #444]	@ (800a610 <MX_GPIO_Init+0x240>)
 800a454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a456:	2208      	movs	r2, #8
 800a458:	4013      	ands	r3, r2
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800a45e:	4b6d      	ldr	r3, [pc, #436]	@ (800a614 <MX_GPIO_Init+0x244>)
 800a460:	2201      	movs	r2, #1
 800a462:	2101      	movs	r1, #1
 800a464:	0018      	movs	r0, r3
 800a466:	f009 f892 	bl	801358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800a46a:	4b6a      	ldr	r3, [pc, #424]	@ (800a614 <MX_GPIO_Init+0x244>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	2102      	movs	r1, #2
 800a470:	0018      	movs	r0, r3
 800a472:	f009 f88c 	bl	801358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800a476:	4968      	ldr	r1, [pc, #416]	@ (800a618 <MX_GPIO_Init+0x248>)
 800a478:	4b68      	ldr	r3, [pc, #416]	@ (800a61c <MX_GPIO_Init+0x24c>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	0018      	movs	r0, r3
 800a47e:	f009 f886 	bl	801358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800a482:	2380      	movs	r3, #128	@ 0x80
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	4866      	ldr	r0, [pc, #408]	@ (800a620 <MX_GPIO_Init+0x250>)
 800a488:	2201      	movs	r2, #1
 800a48a:	0019      	movs	r1, r3
 800a48c:	f009 f87f 	bl	801358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800a490:	2380      	movs	r3, #128	@ 0x80
 800a492:	015b      	lsls	r3, r3, #5
 800a494:	4862      	ldr	r0, [pc, #392]	@ (800a620 <MX_GPIO_Init+0x250>)
 800a496:	2200      	movs	r2, #0
 800a498:	0019      	movs	r1, r3
 800a49a:	f009 f878 	bl	801358e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800a49e:	193b      	adds	r3, r7, r4
 800a4a0:	4a60      	ldr	r2, [pc, #384]	@ (800a624 <MX_GPIO_Init+0x254>)
 800a4a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4a4:	193b      	adds	r3, r7, r4
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	193b      	adds	r3, r7, r4
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4b0:	193b      	adds	r3, r7, r4
 800a4b2:	4a5b      	ldr	r2, [pc, #364]	@ (800a620 <MX_GPIO_Init+0x250>)
 800a4b4:	0019      	movs	r1, r3
 800a4b6:	0010      	movs	r0, r2
 800a4b8:	f008 fece 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800a4bc:	193b      	adds	r3, r7, r4
 800a4be:	2203      	movs	r2, #3
 800a4c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4c2:	193b      	adds	r3, r7, r4
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c8:	193b      	adds	r3, r7, r4
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ce:	193b      	adds	r3, r7, r4
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a4d4:	193b      	adds	r3, r7, r4
 800a4d6:	4a4f      	ldr	r2, [pc, #316]	@ (800a614 <MX_GPIO_Init+0x244>)
 800a4d8:	0019      	movs	r1, r3
 800a4da:	0010      	movs	r0, r2
 800a4dc:	f008 febc 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a4e0:	193b      	adds	r3, r7, r4
 800a4e2:	2270      	movs	r2, #112	@ 0x70
 800a4e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4e6:	193b      	adds	r3, r7, r4
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ec:	193b      	adds	r3, r7, r4
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4f2:	193a      	adds	r2, r7, r4
 800a4f4:	23a0      	movs	r3, #160	@ 0xa0
 800a4f6:	05db      	lsls	r3, r3, #23
 800a4f8:	0011      	movs	r1, r2
 800a4fa:	0018      	movs	r0, r3
 800a4fc:	f008 feac 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800a500:	193b      	adds	r3, r7, r4
 800a502:	22c0      	movs	r2, #192	@ 0xc0
 800a504:	0052      	lsls	r2, r2, #1
 800a506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a508:	193b      	adds	r3, r7, r4
 800a50a:	2200      	movs	r2, #0
 800a50c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50e:	193b      	adds	r3, r7, r4
 800a510:	2200      	movs	r2, #0
 800a512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a514:	193a      	adds	r2, r7, r4
 800a516:	23a0      	movs	r3, #160	@ 0xa0
 800a518:	05db      	lsls	r3, r3, #23
 800a51a:	0011      	movs	r1, r2
 800a51c:	0018      	movs	r0, r3
 800a51e:	f008 fe9b 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800a522:	193b      	adds	r3, r7, r4
 800a524:	4a3c      	ldr	r2, [pc, #240]	@ (800a618 <MX_GPIO_Init+0x248>)
 800a526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a528:	193b      	adds	r3, r7, r4
 800a52a:	2201      	movs	r2, #1
 800a52c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52e:	193b      	adds	r3, r7, r4
 800a530:	2200      	movs	r2, #0
 800a532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a534:	193b      	adds	r3, r7, r4
 800a536:	2200      	movs	r2, #0
 800a538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a53a:	193b      	adds	r3, r7, r4
 800a53c:	4a37      	ldr	r2, [pc, #220]	@ (800a61c <MX_GPIO_Init+0x24c>)
 800a53e:	0019      	movs	r1, r3
 800a540:	0010      	movs	r0, r2
 800a542:	f008 fe89 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800a546:	193b      	adds	r3, r7, r4
 800a548:	4a37      	ldr	r2, [pc, #220]	@ (800a628 <MX_GPIO_Init+0x258>)
 800a54a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a54c:	193b      	adds	r3, r7, r4
 800a54e:	2203      	movs	r2, #3
 800a550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a552:	193b      	adds	r3, r7, r4
 800a554:	2200      	movs	r2, #0
 800a556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a558:	193b      	adds	r3, r7, r4
 800a55a:	4a30      	ldr	r2, [pc, #192]	@ (800a61c <MX_GPIO_Init+0x24c>)
 800a55c:	0019      	movs	r1, r3
 800a55e:	0010      	movs	r0, r2
 800a560:	f008 fe7a 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800a564:	0021      	movs	r1, r4
 800a566:	187b      	adds	r3, r7, r1
 800a568:	2280      	movs	r2, #128	@ 0x80
 800a56a:	0092      	lsls	r2, r2, #2
 800a56c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a56e:	000c      	movs	r4, r1
 800a570:	193b      	adds	r3, r7, r4
 800a572:	2200      	movs	r2, #0
 800a574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a576:	193b      	adds	r3, r7, r4
 800a578:	2200      	movs	r2, #0
 800a57a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800a57c:	193b      	adds	r3, r7, r4
 800a57e:	4a28      	ldr	r2, [pc, #160]	@ (800a620 <MX_GPIO_Init+0x250>)
 800a580:	0019      	movs	r1, r3
 800a582:	0010      	movs	r0, r2
 800a584:	f008 fe68 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800a588:	193b      	adds	r3, r7, r4
 800a58a:	2280      	movs	r2, #128	@ 0x80
 800a58c:	0212      	lsls	r2, r2, #8
 800a58e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a590:	193b      	adds	r3, r7, r4
 800a592:	2288      	movs	r2, #136	@ 0x88
 800a594:	0352      	lsls	r2, r2, #13
 800a596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a598:	193b      	adds	r3, r7, r4
 800a59a:	2200      	movs	r2, #0
 800a59c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800a59e:	193a      	adds	r2, r7, r4
 800a5a0:	23a0      	movs	r3, #160	@ 0xa0
 800a5a2:	05db      	lsls	r3, r3, #23
 800a5a4:	0011      	movs	r1, r2
 800a5a6:	0018      	movs	r0, r3
 800a5a8:	f008 fe56 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800a5ac:	0021      	movs	r1, r4
 800a5ae:	187b      	adds	r3, r7, r1
 800a5b0:	22c0      	movs	r2, #192	@ 0xc0
 800a5b2:	0152      	lsls	r2, r2, #5
 800a5b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b6:	000c      	movs	r4, r1
 800a5b8:	193b      	adds	r3, r7, r4
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5be:	193b      	adds	r3, r7, r4
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c4:	193b      	adds	r3, r7, r4
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5ca:	193b      	adds	r3, r7, r4
 800a5cc:	4a14      	ldr	r2, [pc, #80]	@ (800a620 <MX_GPIO_Init+0x250>)
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	0010      	movs	r0, r2
 800a5d2:	f008 fe41 	bl	8013258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800a5d6:	0021      	movs	r1, r4
 800a5d8:	187b      	adds	r3, r7, r1
 800a5da:	2204      	movs	r2, #4
 800a5dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5de:	187b      	adds	r3, r7, r1
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a5e4:	187b      	adds	r3, r7, r1
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800a5ea:	187b      	adds	r3, r7, r1
 800a5ec:	4a0f      	ldr	r2, [pc, #60]	@ (800a62c <MX_GPIO_Init+0x25c>)
 800a5ee:	0019      	movs	r1, r3
 800a5f0:	0010      	movs	r0, r2
 800a5f2:	f008 fe31 	bl	8013258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	2007      	movs	r0, #7
 800a5fc:	f008 f9da 	bl	80129b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a600:	2007      	movs	r0, #7
 800a602:	f008 f9ec 	bl	80129de <HAL_NVIC_EnableIRQ>

}
 800a606:	46c0      	nop			@ (mov r8, r8)
 800a608:	46bd      	mov	sp, r7
 800a60a:	b00b      	add	sp, #44	@ 0x2c
 800a60c:	bd90      	pop	{r4, r7, pc}
 800a60e:	46c0      	nop			@ (mov r8, r8)
 800a610:	40021000 	.word	0x40021000
 800a614:	50001c00 	.word	0x50001c00
 800a618:	00000301 	.word	0x00000301
 800a61c:	50000400 	.word	0x50000400
 800a620:	50000800 	.word	0x50000800
 800a624:	0000200c 	.word	0x0000200c
 800a628:	0000403e 	.word	0x0000403e
 800a62c:	50000c00 	.word	0x50000c00

0800a630 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2100      	movs	r1, #0
 800a63e:	0018      	movs	r0, r3
 800a640:	f00f fe18 	bl	801a274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2108      	movs	r1, #8
 800a648:	0018      	movs	r0, r3
 800a64a:	f00f fe13 	bl	801a274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	210c      	movs	r1, #12
 800a652:	0018      	movs	r0, r3
 800a654:	f00f fe0e 	bl	801a274 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800a658:	2380      	movs	r3, #128	@ 0x80
 800a65a:	05db      	lsls	r3, r3, #23
 800a65c:	22fa      	movs	r2, #250	@ 0xfa
 800a65e:	0112      	lsls	r2, r2, #4
 800a660:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800a662:	2380      	movs	r3, #128	@ 0x80
 800a664:	05db      	lsls	r3, r3, #23
 800a666:	22fa      	movs	r2, #250	@ 0xfa
 800a668:	0112      	lsls	r2, r2, #4
 800a66a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	05db      	lsls	r3, r3, #23
 800a670:	22fa      	movs	r2, #250	@ 0xfa
 800a672:	0112      	lsls	r2, r2, #4
 800a674:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800a676:	2380      	movs	r3, #128	@ 0x80
 800a678:	05db      	lsls	r3, r3, #23
 800a67a:	22fa      	movs	r2, #250	@ 0xfa
 800a67c:	0112      	lsls	r2, r2, #4
 800a67e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2100      	movs	r1, #0
 800a684:	0018      	movs	r0, r3
 800a686:	f00f fdf5 	bl	801a274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2104      	movs	r1, #4
 800a68e:	0018      	movs	r0, r3
 800a690:	f00f fdf0 	bl	801a274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2108      	movs	r1, #8
 800a698:	0018      	movs	r0, r3
 800a69a:	f00f fdeb 	bl	801a274 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800a69e:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c8 <GPIO_InitPWMLEDs+0x98>)
 800a6a0:	22fa      	movs	r2, #250	@ 0xfa
 800a6a2:	0112      	lsls	r2, r2, #4
 800a6a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800a6a6:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <GPIO_InitPWMLEDs+0x98>)
 800a6a8:	22fa      	movs	r2, #250	@ 0xfa
 800a6aa:	0112      	lsls	r2, r2, #4
 800a6ac:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800a6ae:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <GPIO_InitPWMLEDs+0x98>)
 800a6b0:	22fa      	movs	r2, #250	@ 0xfa
 800a6b2:	0112      	lsls	r2, r2, #4
 800a6b4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800a6b6:	4b04      	ldr	r3, [pc, #16]	@ (800a6c8 <GPIO_InitPWMLEDs+0x98>)
 800a6b8:	22fa      	movs	r2, #250	@ 0xfa
 800a6ba:	0112      	lsls	r2, r2, #4
 800a6bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	b002      	add	sp, #8
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	46c0      	nop			@ (mov r8, r8)
 800a6c8:	40000400 	.word	0x40000400

0800a6cc <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6d2:	1d3b      	adds	r3, r7, #4
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	2314      	movs	r3, #20
 800a6d8:	001a      	movs	r2, r3
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f019 f9d8 	bl	8023a90 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a6e0:	1d3b      	adds	r3, r7, #4
 800a6e2:	2205      	movs	r2, #5
 800a6e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ec:	1d3b      	adds	r3, r7, #4
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6f2:	1d3a      	adds	r2, r7, #4
 800a6f4:	23a0      	movs	r3, #160	@ 0xa0
 800a6f6:	05db      	lsls	r3, r3, #23
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f008 fdac 	bl	8013258 <HAL_GPIO_Init>
}
 800a700:	46c0      	nop			@ (mov r8, r8)
 800a702:	46bd      	mov	sp, r7
 800a704:	b006      	add	sp, #24
 800a706:	bd80      	pop	{r7, pc}

0800a708 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a70c:	4b1b      	ldr	r3, [pc, #108]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a70e:	4a1c      	ldr	r2, [pc, #112]	@ (800a780 <MX_I2C1_Init+0x78>)
 800a710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a712:	4b1a      	ldr	r3, [pc, #104]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a714:	4a1b      	ldr	r2, [pc, #108]	@ (800a784 <MX_I2C1_Init+0x7c>)
 800a716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a718:	4b18      	ldr	r3, [pc, #96]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a71e:	4b17      	ldr	r3, [pc, #92]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a720:	2201      	movs	r2, #1
 800a722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a724:	4b15      	ldr	r3, [pc, #84]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a726:	2200      	movs	r2, #0
 800a728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a72a:	4b14      	ldr	r3, [pc, #80]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a730:	4b12      	ldr	r3, [pc, #72]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a732:	2200      	movs	r2, #0
 800a734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a736:	4b11      	ldr	r3, [pc, #68]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a738:	2200      	movs	r2, #0
 800a73a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a73c:	4b0f      	ldr	r3, [pc, #60]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a73e:	2200      	movs	r2, #0
 800a740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a742:	4b0e      	ldr	r3, [pc, #56]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a744:	0018      	movs	r0, r3
 800a746:	f008 ff5b 	bl	8013600 <HAL_I2C_Init>
 800a74a:	1e03      	subs	r3, r0, #0
 800a74c:	d001      	beq.n	800a752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a74e:	f000 fd83 	bl	800b258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a752:	4b0a      	ldr	r3, [pc, #40]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a754:	2100      	movs	r1, #0
 800a756:	0018      	movs	r0, r3
 800a758:	f00b fdc4 	bl	80162e4 <HAL_I2CEx_ConfigAnalogFilter>
 800a75c:	1e03      	subs	r3, r0, #0
 800a75e:	d001      	beq.n	800a764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a760:	f000 fd7a 	bl	800b258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <MX_I2C1_Init+0x74>)
 800a766:	2100      	movs	r1, #0
 800a768:	0018      	movs	r0, r3
 800a76a:	f00b fe07 	bl	801637c <HAL_I2CEx_ConfigDigitalFilter>
 800a76e:	1e03      	subs	r3, r0, #0
 800a770:	d001      	beq.n	800a776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a772:	f000 fd71 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000c20 	.word	0x20000c20
 800a780:	40005400 	.word	0x40005400
 800a784:	00503d58 	.word	0x00503d58

0800a788 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a78c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a78e:	4a1c      	ldr	r2, [pc, #112]	@ (800a800 <MX_I2C2_Init+0x78>)
 800a790:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800a792:	4b1a      	ldr	r3, [pc, #104]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a794:	4a1b      	ldr	r2, [pc, #108]	@ (800a804 <MX_I2C2_Init+0x7c>)
 800a796:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a798:	4b18      	ldr	r3, [pc, #96]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a79e:	4b17      	ldr	r3, [pc, #92]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a7a4:	4b15      	ldr	r3, [pc, #84]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a7aa:	4b14      	ldr	r3, [pc, #80]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a7b0:	4b12      	ldr	r3, [pc, #72]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a7b6:	4b11      	ldr	r3, [pc, #68]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a7c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f008 ff1b 	bl	8013600 <HAL_I2C_Init>
 800a7ca:	1e03      	subs	r3, r0, #0
 800a7cc:	d001      	beq.n	800a7d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a7ce:	f000 fd43 	bl	800b258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	f00b fd84 	bl	80162e4 <HAL_I2CEx_ConfigAnalogFilter>
 800a7dc:	1e03      	subs	r3, r0, #0
 800a7de:	d001      	beq.n	800a7e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a7e0:	f000 fd3a 	bl	800b258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a7e4:	4b05      	ldr	r3, [pc, #20]	@ (800a7fc <MX_I2C2_Init+0x74>)
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	f00b fdc7 	bl	801637c <HAL_I2CEx_ConfigDigitalFilter>
 800a7ee:	1e03      	subs	r3, r0, #0
 800a7f0:	d001      	beq.n	800a7f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a7f2:	f000 fd31 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000c74 	.word	0x20000c74
 800a800:	40005800 	.word	0x40005800
 800a804:	00503d58 	.word	0x00503d58

0800a808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a808:	b590      	push	{r4, r7, lr}
 800a80a:	b08b      	sub	sp, #44	@ 0x2c
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a810:	2414      	movs	r4, #20
 800a812:	193b      	adds	r3, r7, r4
 800a814:	0018      	movs	r0, r3
 800a816:	2314      	movs	r3, #20
 800a818:	001a      	movs	r2, r3
 800a81a:	2100      	movs	r1, #0
 800a81c:	f019 f938 	bl	8023a90 <memset>
  if(i2cHandle->Instance==I2C1)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a5d      	ldr	r2, [pc, #372]	@ (800a99c <HAL_I2C_MspInit+0x194>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d000      	beq.n	800a82c <HAL_I2C_MspInit+0x24>
 800a82a:	e083      	b.n	800a934 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a82c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a830:	4b5b      	ldr	r3, [pc, #364]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a832:	2102      	movs	r1, #2
 800a834:	430a      	orrs	r2, r1
 800a836:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a838:	4b59      	ldr	r3, [pc, #356]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83c:	2202      	movs	r2, #2
 800a83e:	4013      	ands	r3, r2
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a844:	0021      	movs	r1, r4
 800a846:	187b      	adds	r3, r7, r1
 800a848:	22c0      	movs	r2, #192	@ 0xc0
 800a84a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	2212      	movs	r2, #18
 800a850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a852:	187b      	adds	r3, r7, r1
 800a854:	2200      	movs	r2, #0
 800a856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a858:	187b      	adds	r3, r7, r1
 800a85a:	2203      	movs	r2, #3
 800a85c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800a85e:	187b      	adds	r3, r7, r1
 800a860:	2201      	movs	r2, #1
 800a862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a864:	187b      	adds	r3, r7, r1
 800a866:	4a4f      	ldr	r2, [pc, #316]	@ (800a9a4 <HAL_I2C_MspInit+0x19c>)
 800a868:	0019      	movs	r1, r3
 800a86a:	0010      	movs	r0, r2
 800a86c:	f008 fcf4 	bl	8013258 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a870:	4b4b      	ldr	r3, [pc, #300]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a874:	4b4a      	ldr	r3, [pc, #296]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a876:	2180      	movs	r1, #128	@ 0x80
 800a878:	0389      	lsls	r1, r1, #14
 800a87a:	430a      	orrs	r2, r1
 800a87c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800a87e:	4b4a      	ldr	r3, [pc, #296]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a880:	4a4a      	ldr	r2, [pc, #296]	@ (800a9ac <HAL_I2C_MspInit+0x1a4>)
 800a882:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800a884:	4b48      	ldr	r3, [pc, #288]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a886:	2206      	movs	r2, #6
 800a888:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a88a:	4b47      	ldr	r3, [pc, #284]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a890:	4b45      	ldr	r3, [pc, #276]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a892:	2200      	movs	r2, #0
 800a894:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a896:	4b44      	ldr	r3, [pc, #272]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a898:	2280      	movs	r2, #128	@ 0x80
 800a89a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a89c:	4b42      	ldr	r3, [pc, #264]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8a2:	4b41      	ldr	r3, [pc, #260]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800a8a8:	4b3f      	ldr	r3, [pc, #252]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a8ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800a8b4:	4b3c      	ldr	r3, [pc, #240]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f008 f8b2 	bl	8012a20 <HAL_DMA_Init>
 800a8bc:	1e03      	subs	r3, r0, #0
 800a8be:	d001      	beq.n	800a8c4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800a8c0:	f000 fcca 	bl	800b258 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a38      	ldr	r2, [pc, #224]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a8ca:	4b37      	ldr	r3, [pc, #220]	@ (800a9a8 <HAL_I2C_MspInit+0x1a0>)
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800a8d0:	4b37      	ldr	r3, [pc, #220]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8d2:	4a38      	ldr	r2, [pc, #224]	@ (800a9b4 <HAL_I2C_MspInit+0x1ac>)
 800a8d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800a8d6:	4b36      	ldr	r3, [pc, #216]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8d8:	2206      	movs	r2, #6
 800a8da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8dc:	4b34      	ldr	r3, [pc, #208]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8de:	2210      	movs	r2, #16
 800a8e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8e2:	4b33      	ldr	r3, [pc, #204]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a8e8:	4b31      	ldr	r3, [pc, #196]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8ea:	2280      	movs	r2, #128	@ 0x80
 800a8ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8ee:	4b30      	ldr	r3, [pc, #192]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a900:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a902:	2200      	movs	r2, #0
 800a904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a906:	4b2a      	ldr	r3, [pc, #168]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a908:	0018      	movs	r0, r3
 800a90a:	f008 f889 	bl	8012a20 <HAL_DMA_Init>
 800a90e:	1e03      	subs	r3, r0, #0
 800a910:	d001      	beq.n	800a916 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800a912:	f000 fca1 	bl	800b258 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a25      	ldr	r2, [pc, #148]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a91c:	4b24      	ldr	r3, [pc, #144]	@ (800a9b0 <HAL_I2C_MspInit+0x1a8>)
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	2017      	movs	r0, #23
 800a928:	f008 f844 	bl	80129b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800a92c:	2017      	movs	r0, #23
 800a92e:	f008 f856 	bl	80129de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a932:	e02e      	b.n	800a992 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a1f      	ldr	r2, [pc, #124]	@ (800a9b8 <HAL_I2C_MspInit+0x1b0>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d129      	bne.n	800a992 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a93e:	4b18      	ldr	r3, [pc, #96]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a942:	4b17      	ldr	r3, [pc, #92]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a944:	2102      	movs	r1, #2
 800a946:	430a      	orrs	r2, r1
 800a948:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a94a:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94e:	2202      	movs	r2, #2
 800a950:	4013      	ands	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a956:	2114      	movs	r1, #20
 800a958:	187b      	adds	r3, r7, r1
 800a95a:	22c0      	movs	r2, #192	@ 0xc0
 800a95c:	0112      	lsls	r2, r2, #4
 800a95e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a960:	187b      	adds	r3, r7, r1
 800a962:	2212      	movs	r2, #18
 800a964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a966:	187b      	adds	r3, r7, r1
 800a968:	2200      	movs	r2, #0
 800a96a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a96c:	187b      	adds	r3, r7, r1
 800a96e:	2203      	movs	r2, #3
 800a970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800a972:	187b      	adds	r3, r7, r1
 800a974:	2206      	movs	r2, #6
 800a976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a978:	187b      	adds	r3, r7, r1
 800a97a:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a4 <HAL_I2C_MspInit+0x19c>)
 800a97c:	0019      	movs	r1, r3
 800a97e:	0010      	movs	r0, r2
 800a980:	f008 fc6a 	bl	8013258 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a984:	4b06      	ldr	r3, [pc, #24]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a988:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <HAL_I2C_MspInit+0x198>)
 800a98a:	2180      	movs	r1, #128	@ 0x80
 800a98c:	03c9      	lsls	r1, r1, #15
 800a98e:	430a      	orrs	r2, r1
 800a990:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	46bd      	mov	sp, r7
 800a996:	b00b      	add	sp, #44	@ 0x2c
 800a998:	bd90      	pop	{r4, r7, pc}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	40005400 	.word	0x40005400
 800a9a0:	40021000 	.word	0x40021000
 800a9a4:	50000400 	.word	0x50000400
 800a9a8:	20000cc8 	.word	0x20000cc8
 800a9ac:	40020030 	.word	0x40020030
 800a9b0:	20000d10 	.word	0x20000d10
 800a9b4:	4002001c 	.word	0x4002001c
 800a9b8:	40005800 	.word	0x40005800

0800a9bc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800a9c0:	4b10      	ldr	r3, [pc, #64]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9c2:	4a11      	ldr	r2, [pc, #68]	@ (800aa08 <MX_I2S2_Init+0x4c>)
 800a9c4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9c8:	22c0      	movs	r2, #192	@ 0xc0
 800a9ca:	0092      	lsls	r2, r2, #2
 800a9cc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800a9da:	4b0a      	ldr	r3, [pc, #40]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800a9e0:	4b08      	ldr	r3, [pc, #32]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9e2:	22fa      	movs	r2, #250	@ 0xfa
 800a9e4:	0192      	lsls	r2, r2, #6
 800a9e6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800a9e8:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800a9ee:	4b05      	ldr	r3, [pc, #20]	@ (800aa04 <MX_I2S2_Init+0x48>)
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f00b fd0f 	bl	8016414 <HAL_I2S_Init>
 800a9f6:	1e03      	subs	r3, r0, #0
 800a9f8:	d001      	beq.n	800a9fe <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800a9fa:	f000 fc2d 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800a9fe:	46c0      	nop			@ (mov r8, r8)
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20000d58 	.word	0x20000d58
 800aa08:	40003800 	.word	0x40003800

0800aa0c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800aa0c:	b590      	push	{r4, r7, lr}
 800aa0e:	b089      	sub	sp, #36	@ 0x24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa14:	240c      	movs	r4, #12
 800aa16:	193b      	adds	r3, r7, r4
 800aa18:	0018      	movs	r0, r3
 800aa1a:	2314      	movs	r3, #20
 800aa1c:	001a      	movs	r2, r3
 800aa1e:	2100      	movs	r1, #0
 800aa20:	f019 f836 	bl	8023a90 <memset>
  if(i2sHandle->Instance==SPI2)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a2d      	ldr	r2, [pc, #180]	@ (800aae0 <HAL_I2S_MspInit+0xd4>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d154      	bne.n	800aad8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800aa2e:	4b2d      	ldr	r3, [pc, #180]	@ (800aae4 <HAL_I2S_MspInit+0xd8>)
 800aa30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa32:	4b2c      	ldr	r3, [pc, #176]	@ (800aae4 <HAL_I2S_MspInit+0xd8>)
 800aa34:	2180      	movs	r1, #128	@ 0x80
 800aa36:	01c9      	lsls	r1, r1, #7
 800aa38:	430a      	orrs	r2, r1
 800aa3a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa3c:	4b29      	ldr	r3, [pc, #164]	@ (800aae4 <HAL_I2S_MspInit+0xd8>)
 800aa3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa40:	4b28      	ldr	r3, [pc, #160]	@ (800aae4 <HAL_I2S_MspInit+0xd8>)
 800aa42:	2102      	movs	r1, #2
 800aa44:	430a      	orrs	r2, r1
 800aa46:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aa48:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <HAL_I2S_MspInit+0xd8>)
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	4013      	ands	r3, r2
 800aa50:	60bb      	str	r3, [r7, #8]
 800aa52:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800aa54:	193b      	adds	r3, r7, r4
 800aa56:	22b0      	movs	r2, #176	@ 0xb0
 800aa58:	0212      	lsls	r2, r2, #8
 800aa5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa5c:	0021      	movs	r1, r4
 800aa5e:	187b      	adds	r3, r7, r1
 800aa60:	2202      	movs	r2, #2
 800aa62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa64:	187b      	adds	r3, r7, r1
 800aa66:	2200      	movs	r2, #0
 800aa68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa6a:	187b      	adds	r3, r7, r1
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800aa70:	187b      	adds	r3, r7, r1
 800aa72:	2200      	movs	r2, #0
 800aa74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa76:	187b      	adds	r3, r7, r1
 800aa78:	4a1b      	ldr	r2, [pc, #108]	@ (800aae8 <HAL_I2S_MspInit+0xdc>)
 800aa7a:	0019      	movs	r1, r3
 800aa7c:	0010      	movs	r0, r2
 800aa7e:	f008 fbeb 	bl	8013258 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800aa82:	4b1a      	ldr	r3, [pc, #104]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aa84:	4a1a      	ldr	r2, [pc, #104]	@ (800aaf0 <HAL_I2S_MspInit+0xe4>)
 800aa86:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800aa88:	4b18      	ldr	r3, [pc, #96]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa8e:	4b17      	ldr	r3, [pc, #92]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa94:	4b15      	ldr	r3, [pc, #84]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aa9a:	4b14      	ldr	r3, [pc, #80]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aa9c:	2280      	movs	r2, #128	@ 0x80
 800aa9e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aaa0:	4b12      	ldr	r3, [pc, #72]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aaa2:	2280      	movs	r2, #128	@ 0x80
 800aaa4:	0052      	lsls	r2, r2, #1
 800aaa6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aaa8:	4b10      	ldr	r3, [pc, #64]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aaaa:	2280      	movs	r2, #128	@ 0x80
 800aaac:	00d2      	lsls	r2, r2, #3
 800aaae:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800aab0:	4b0e      	ldr	r3, [pc, #56]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aab2:	2220      	movs	r2, #32
 800aab4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aab6:	4b0d      	ldr	r3, [pc, #52]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800aabc:	4b0b      	ldr	r3, [pc, #44]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aabe:	0018      	movs	r0, r3
 800aac0:	f007 ffae 	bl	8012a20 <HAL_DMA_Init>
 800aac4:	1e03      	subs	r3, r0, #0
 800aac6:	d001      	beq.n	800aacc <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800aac8:	f000 fbc6 	bl	800b258 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a07      	ldr	r2, [pc, #28]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aad0:	631a      	str	r2, [r3, #48]	@ 0x30
 800aad2:	4b06      	ldr	r3, [pc, #24]	@ (800aaec <HAL_I2S_MspInit+0xe0>)
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800aad8:	46c0      	nop			@ (mov r8, r8)
 800aada:	46bd      	mov	sp, r7
 800aadc:	b009      	add	sp, #36	@ 0x24
 800aade:	bd90      	pop	{r4, r7, pc}
 800aae0:	40003800 	.word	0x40003800
 800aae4:	40021000 	.word	0x40021000
 800aae8:	50000400 	.word	0x50000400
 800aaec:	20000d94 	.word	0x20000d94
 800aaf0:	40020044 	.word	0x40020044

0800aaf4 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	af00      	add	r7, sp, #0
  testDone = true;
 800aaf8:	4b14      	ldr	r3, [pc, #80]	@ (800ab4c <SetTestDone+0x58>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800aafe:	23fa      	movs	r3, #250	@ 0xfa
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	0018      	movs	r0, r3
 800ab04:	f007 fabc 	bl	8012080 <HAL_Delay>
  SetDBLED(false, false, true);
 800ab08:	2201      	movs	r2, #1
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f005 fc2d 	bl	801036c <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800ab12:	4a0f      	ldr	r2, [pc, #60]	@ (800ab50 <SetTestDone+0x5c>)
 800ab14:	23fa      	movs	r3, #250	@ 0xfa
 800ab16:	0119      	lsls	r1, r3, #4
 800ab18:	23fa      	movs	r3, #250	@ 0xfa
 800ab1a:	011b      	lsls	r3, r3, #4
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	f005 fbf1 	bl	8010304 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800ab22:	4a0b      	ldr	r2, [pc, #44]	@ (800ab50 <SetTestDone+0x5c>)
 800ab24:	23fa      	movs	r3, #250	@ 0xfa
 800ab26:	0119      	lsls	r1, r3, #4
 800ab28:	23fa      	movs	r3, #250	@ 0xfa
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f005 fc67 	bl	8010400 <SetVocLED>
  HAL_Delay(500);
 800ab32:	23fa      	movs	r3, #250	@ 0xfa
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	0018      	movs	r0, r3
 800ab38:	f007 faa2 	bl	8012080 <HAL_Delay>
  SetLEDsOff();
 800ab3c:	f005 fda0 	bl	8010680 <SetLEDsOff>
  InitDone();
 800ab40:	f005 fb34 	bl	80101ac <InitDone>
}
 800ab44:	46c0      	nop			@ (mov r8, r8)
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	46c0      	nop			@ (mov r8, r8)
 800ab4c:	20000ddc 	.word	0x20000ddc
 800ab50:	00000bb8 	.word	0x00000bb8

0800ab54 <FlashLEDs>:

void FlashLEDs(){
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800ab5a:	1dfb      	adds	r3, r7, #7
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e021      	b.n	800aba6 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800ab62:	2201      	movs	r2, #1
 800ab64:	2101      	movs	r1, #1
 800ab66:	2001      	movs	r0, #1
 800ab68:	f005 fc00 	bl	801036c <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800ab6c:	4a12      	ldr	r2, [pc, #72]	@ (800abb8 <FlashLEDs+0x64>)
 800ab6e:	23fa      	movs	r3, #250	@ 0xfa
 800ab70:	0119      	lsls	r1, r3, #4
 800ab72:	23fa      	movs	r3, #250	@ 0xfa
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	0018      	movs	r0, r3
 800ab78:	f005 fbc4 	bl	8010304 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800ab7c:	4a0e      	ldr	r2, [pc, #56]	@ (800abb8 <FlashLEDs+0x64>)
 800ab7e:	23fa      	movs	r3, #250	@ 0xfa
 800ab80:	0119      	lsls	r1, r3, #4
 800ab82:	23fa      	movs	r3, #250	@ 0xfa
 800ab84:	011b      	lsls	r3, r3, #4
 800ab86:	0018      	movs	r0, r3
 800ab88:	f005 fc3a 	bl	8010400 <SetVocLED>
    HAL_Delay(250);
 800ab8c:	20fa      	movs	r0, #250	@ 0xfa
 800ab8e:	f007 fa77 	bl	8012080 <HAL_Delay>
    SetLEDsOff();
 800ab92:	f005 fd75 	bl	8010680 <SetLEDsOff>
    HAL_Delay(250);
 800ab96:	20fa      	movs	r0, #250	@ 0xfa
 800ab98:	f007 fa72 	bl	8012080 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800ab9c:	1dfb      	adds	r3, r7, #7
 800ab9e:	781a      	ldrb	r2, [r3, #0]
 800aba0:	1dfb      	adds	r3, r7, #7
 800aba2:	3201      	adds	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	1dfb      	adds	r3, r7, #7
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b04      	cmp	r3, #4
 800abac:	d9d9      	bls.n	800ab62 <FlashLEDs+0xe>
  }
}
 800abae:	46c0      	nop			@ (mov r8, r8)
 800abb0:	46c0      	nop			@ (mov r8, r8)
 800abb2:	46bd      	mov	sp, r7
 800abb4:	b002      	add	sp, #8
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	00000bb8 	.word	0x00000bb8

0800abbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800abc2:	f007 f9ed 	bl	8011fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800abc6:	f000 f9f7 	bl	800afb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800abca:	f7ff fc01 	bl	800a3d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800abce:	f7ff fa29 	bl	800a024 <MX_DMA_Init>
  MX_I2C1_Init();
 800abd2:	f7ff fd99 	bl	800a708 <MX_I2C1_Init>
  MX_I2S2_Init();
 800abd6:	f7ff fef1 	bl	800a9bc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800abda:	f006 fc0d 	bl	80113f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800abde:	f7ff fdd3 	bl	800a788 <MX_I2C2_Init>
  MX_TIM2_Init();
 800abe2:	f006 fa01 	bl	8010fe8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800abe6:	f006 fa73 	bl	80110d0 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800abea:	f006 fc35 	bl	8011458 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800abee:	f7fd ff4d 	bl	8008a8c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800abf2:	f015 fc39 	bl	8020468 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800abf6:	f001 fa81 	bl	800c0fc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800abfa:	f006 fbc7 	bl	801138c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800abfe:	f006 fae5 	bl	80111cc <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800ac02:	4ac7      	ldr	r2, [pc, #796]	@ (800af20 <main+0x364>)
 800ac04:	4bc7      	ldr	r3, [pc, #796]	@ (800af24 <main+0x368>)
 800ac06:	0011      	movs	r1, r2
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7ff fd11 	bl	800a630 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800ac0e:	f006 fe65 	bl	80118dc <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800ac12:	f006 f871 	bl	8010cf8 <Battery_Upkeep>
 800ac16:	0003      	movs	r3, r0
 800ac18:	001a      	movs	r2, r3
 800ac1a:	4bc3      	ldr	r3, [pc, #780]	@ (800af28 <main+0x36c>)
 800ac1c:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800ac1e:	4bc2      	ldr	r3, [pc, #776]	@ (800af28 <main+0x36c>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d113      	bne.n	800ac4e <main+0x92>
    SetAllREDLED();
 800ac26:	f005 fd47 	bl	80106b8 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800ac2a:	f7fd f83b 	bl	8007ca4 <ReadBatteryVoltage>
 800ac2e:	1c03      	adds	r3, r0, #0
 800ac30:	1c18      	adds	r0, r3, #0
 800ac32:	f7f8 fc17 	bl	8003464 <__aeabi_f2d>
 800ac36:	0002      	movs	r2, r0
 800ac38:	000b      	movs	r3, r1
 800ac3a:	48bc      	ldr	r0, [pc, #752]	@ (800af2c <main+0x370>)
 800ac3c:	49bc      	ldr	r1, [pc, #752]	@ (800af30 <main+0x374>)
 800ac3e:	9200      	str	r2, [sp, #0]
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	0002      	movs	r2, r0
 800ac44:	2002      	movs	r0, #2
 800ac46:	f006 fdc5 	bl	80117d4 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800ac4a:	f7fd fc51 	bl	80084f0 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800ac4e:	f7fd f8ff 	bl	8007e50 <UserButton_Pressed>
 800ac52:	1e03      	subs	r3, r0, #0
 800ac54:	d004      	beq.n	800ac60 <main+0xa4>
    EnableESPProg();
 800ac56:	f015 fcd7 	bl	8020608 <EnableESPProg>
    ESP_Programming = true;
 800ac5a:	4bb6      	ldr	r3, [pc, #728]	@ (800af34 <main+0x378>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800ac60:	2003      	movs	r0, #3
 800ac62:	f006 fe21 	bl	80118a8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800ac66:	49b4      	ldr	r1, [pc, #720]	@ (800af38 <main+0x37c>)
 800ac68:	4bb4      	ldr	r3, [pc, #720]	@ (800af3c <main+0x380>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	f00f ff61 	bl	801ab34 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800ac72:	4bb3      	ldr	r3, [pc, #716]	@ (800af40 <main+0x384>)
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7fd fd0f 	bl	8008698 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800ac7a:	4ab2      	ldr	r2, [pc, #712]	@ (800af44 <main+0x388>)
 800ac7c:	49b2      	ldr	r1, [pc, #712]	@ (800af48 <main+0x38c>)
 800ac7e:	48b3      	ldr	r0, [pc, #716]	@ (800af4c <main+0x390>)
 800ac80:	230b      	movs	r3, #11
 800ac82:	f004 fc09 	bl	800f498 <soundInit>
 800ac86:	0003      	movs	r3, r0
 800ac88:	001a      	movs	r2, r3
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4053      	eors	r3, r2
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800ac94:	4aae      	ldr	r2, [pc, #696]	@ (800af50 <main+0x394>)
 800ac96:	4baf      	ldr	r3, [pc, #700]	@ (800af54 <main+0x398>)
 800ac98:	21f9      	movs	r1, #249	@ 0xf9
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f006 fe52 	bl	8011944 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800aca0:	4bad      	ldr	r3, [pc, #692]	@ (800af58 <main+0x39c>)
 800aca2:	4aae      	ldr	r2, [pc, #696]	@ (800af5c <main+0x3a0>)
 800aca4:	49a8      	ldr	r1, [pc, #672]	@ (800af48 <main+0x38c>)
 800aca6:	48ae      	ldr	r0, [pc, #696]	@ (800af60 <main+0x3a4>)
 800aca8:	f000 fbb4 	bl	800b414 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800acac:	f007 f9de 	bl	801206c <HAL_GetTick>
 800acb0:	0003      	movs	r3, r0
 800acb2:	4aac      	ldr	r2, [pc, #688]	@ (800af64 <main+0x3a8>)
 800acb4:	189a      	adds	r2, r3, r2
 800acb6:	4bac      	ldr	r3, [pc, #688]	@ (800af68 <main+0x3ac>)
 800acb8:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800acba:	f7fd f8a9 	bl	8007e10 <Check_USB_PowerOn>
 800acbe:	0003      	movs	r3, r0
 800acc0:	1e5a      	subs	r2, r3, #1
 800acc2:	4193      	sbcs	r3, r2
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2201      	movs	r2, #1
 800acc8:	4053      	eors	r3, r2
 800acca:	b2db      	uxtb	r3, r3
 800accc:	1c1a      	adds	r2, r3, #0
 800acce:	2301      	movs	r3, #1
 800acd0:	4013      	ands	r3, r2
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	4ba5      	ldr	r3, [pc, #660]	@ (800af6c <main+0x3b0>)
 800acd6:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800acd8:	f7fd f89a 	bl	8007e10 <Check_USB_PowerOn>
 800acdc:	1e03      	subs	r3, r0, #0
 800acde:	d003      	beq.n	800ace8 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800ace0:	4ba3      	ldr	r3, [pc, #652]	@ (800af70 <main+0x3b4>)
 800ace2:	0018      	movs	r0, r3
 800ace4:	f7fc fc10 	bl	8007508 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800ace8:	4ba2      	ldr	r3, [pc, #648]	@ (800af74 <main+0x3b8>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	0018      	movs	r0, r3
 800acee:	f006 fd1b 	bl	8011728 <TimestampIsReached>
 800acf2:	1e03      	subs	r3, r0, #0
 800acf4:	d00e      	beq.n	800ad14 <main+0x158>
      charge = Battery_Upkeep();
 800acf6:	f005 ffff 	bl	8010cf8 <Battery_Upkeep>
 800acfa:	0003      	movs	r3, r0
 800acfc:	001a      	movs	r2, r3
 800acfe:	4b8a      	ldr	r3, [pc, #552]	@ (800af28 <main+0x36c>)
 800ad00:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ad02:	f007 f9b3 	bl	801206c <HAL_GetTick>
 800ad06:	0003      	movs	r3, r0
 800ad08:	4a9b      	ldr	r2, [pc, #620]	@ (800af78 <main+0x3bc>)
 800ad0a:	189a      	adds	r2, r3, r2
 800ad0c:	4b99      	ldr	r3, [pc, #612]	@ (800af74 <main+0x3b8>)
 800ad0e:	601a      	str	r2, [r3, #0]
      showTime();
 800ad10:	f7fd f8ae 	bl	8007e70 <showTime>

    }
    configCheck();
 800ad14:	f005 fe54 	bl	80109c0 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 800ad18:	4b98      	ldr	r3, [pc, #608]	@ (800af7c <main+0x3c0>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800ad1e:	4b82      	ldr	r3, [pc, #520]	@ (800af28 <main+0x36c>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d003      	beq.n	800ad2e <main+0x172>
 800ad26:	4b80      	ldr	r3, [pc, #512]	@ (800af28 <main+0x36c>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <main+0x17c>
          FlashLEDs();
 800ad2e:	f7ff ff11 	bl	800ab54 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 800ad32:	4b93      	ldr	r3, [pc, #588]	@ (800af80 <main+0x3c4>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ad38:	4b7b      	ldr	r3, [pc, #492]	@ (800af28 <main+0x36c>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d109      	bne.n	800ad54 <main+0x198>
 800ad40:	4b90      	ldr	r3, [pc, #576]	@ (800af84 <main+0x3c8>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d105      	bne.n	800ad54 <main+0x198>
          batteryEmpty = true;
 800ad48:	4b8f      	ldr	r3, [pc, #572]	@ (800af88 <main+0x3cc>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800ad4e:	f7fd fbcf 	bl	80084f0 <Enter_Standby_Mode>
 800ad52:	e002      	b.n	800ad5a <main+0x19e>
        }
        else{
          batteryEmpty = false;
 800ad54:	4b8c      	ldr	r3, [pc, #560]	@ (800af88 <main+0x3cc>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800ad5a:	4b8c      	ldr	r3, [pc, #560]	@ (800af8c <main+0x3d0>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d100      	bne.n	800ad64 <main+0x1a8>
 800ad62:	e088      	b.n	800ae76 <main+0x2ba>
 800ad64:	4b73      	ldr	r3, [pc, #460]	@ (800af34 <main+0x378>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	4053      	eors	r3, r2
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d100      	bne.n	800ad74 <main+0x1b8>
 800ad72:	e080      	b.n	800ae76 <main+0x2ba>
 800ad74:	4b84      	ldr	r3, [pc, #528]	@ (800af88 <main+0x3cc>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4053      	eors	r3, r2
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d100      	bne.n	800ad84 <main+0x1c8>
 800ad82:	e078      	b.n	800ae76 <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800ad84:	4b79      	ldr	r3, [pc, #484]	@ (800af6c <main+0x3b0>)
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	4b81      	ldr	r3, [pc, #516]	@ (800af90 <main+0x3d4>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d020      	beq.n	800add2 <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ad90:	f000 fad2 	bl	800b338 <IsSGPPresent>
 800ad94:	1e03      	subs	r3, r0, #0
 800ad96:	d009      	beq.n	800adac <main+0x1f0>
 800ad98:	4b7d      	ldr	r3, [pc, #500]	@ (800af90 <main+0x3d4>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	4053      	eors	r3, r2
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800ada6:	2001      	movs	r0, #1
 800ada8:	f000 fad0 	bl	800b34c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800adac:	4b79      	ldr	r3, [pc, #484]	@ (800af94 <main+0x3d8>)
 800adae:	791b      	ldrb	r3, [r3, #4]
 800adb0:	2b34      	cmp	r3, #52	@ 0x34
 800adb2:	d003      	beq.n	800adbc <main+0x200>
 800adb4:	4b77      	ldr	r3, [pc, #476]	@ (800af94 <main+0x3d8>)
 800adb6:	791b      	ldrb	r3, [r3, #4]
 800adb8:	2b35      	cmp	r3, #53	@ 0x35
 800adba:	d106      	bne.n	800adca <main+0x20e>
 800adbc:	4b74      	ldr	r3, [pc, #464]	@ (800af90 <main+0x3d4>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800adc4:	2000      	movs	r0, #0
 800adc6:	f000 fac1 	bl	800b34c <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 800adca:	4b71      	ldr	r3, [pc, #452]	@ (800af90 <main+0x3d4>)
 800adcc:	781a      	ldrb	r2, [r3, #0]
 800adce:	4b67      	ldr	r3, [pc, #412]	@ (800af6c <main+0x3b0>)
 800add0:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800add2:	f000 fe77 	bl	800bac4 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800add6:	4b6a      	ldr	r3, [pc, #424]	@ (800af80 <main+0x3c4>)
 800add8:	78db      	ldrb	r3, [r3, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <main+0x22e>
        MICstate = Mic_Upkeep();
 800adde:	f001 f879 	bl	800bed4 <Mic_Upkeep>
 800ade2:	0003      	movs	r3, r0
 800ade4:	001a      	movs	r2, r3
 800ade6:	4b6c      	ldr	r3, [pc, #432]	@ (800af98 <main+0x3dc>)
 800ade8:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800adea:	4b4f      	ldr	r3, [pc, #316]	@ (800af28 <main+0x36c>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d803      	bhi.n	800adfa <main+0x23e>
 800adf2:	4b62      	ldr	r3, [pc, #392]	@ (800af7c <main+0x3c0>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d016      	beq.n	800ae28 <main+0x26c>
 800adfa:	4b61      	ldr	r3, [pc, #388]	@ (800af80 <main+0x3c4>)
 800adfc:	789b      	ldrb	r3, [r3, #2]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d012      	beq.n	800ae28 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ae02:	f001 fa09 	bl	800c218 <sen5x_Get_sen5x_enable_state>
 800ae06:	0003      	movs	r3, r0
 800ae08:	001a      	movs	r2, r3
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4053      	eors	r3, r2
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <main+0x266>
 800ae14:	4b5e      	ldr	r3, [pc, #376]	@ (800af90 <main+0x3d4>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f001 fa37 	bl	800c290 <sen5x_enable>
        }
        sen5x_statemachine();
 800ae22:	f001 ff81 	bl	800cd28 <sen5x_statemachine>
 800ae26:	e020      	b.n	800ae6a <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800ae28:	4b3f      	ldr	r3, [pc, #252]	@ (800af28 <main+0x36c>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d81c      	bhi.n	800ae6a <main+0x2ae>
 800ae30:	4b52      	ldr	r3, [pc, #328]	@ (800af7c <main+0x3c0>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2201      	movs	r2, #1
 800ae36:	4053      	eors	r3, r2
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d015      	beq.n	800ae6a <main+0x2ae>
 800ae3e:	4b50      	ldr	r3, [pc, #320]	@ (800af80 <main+0x3c4>)
 800ae40:	789b      	ldrb	r3, [r3, #2]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d011      	beq.n	800ae6a <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 800ae46:	4a55      	ldr	r2, [pc, #340]	@ (800af9c <main+0x3e0>)
 800ae48:	4b39      	ldr	r3, [pc, #228]	@ (800af30 <main+0x374>)
 800ae4a:	0019      	movs	r1, r3
 800ae4c:	2002      	movs	r0, #2
 800ae4e:	f006 fcc1 	bl	80117d4 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800ae52:	4b4b      	ldr	r3, [pc, #300]	@ (800af80 <main+0x3c4>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800ae58:	4b51      	ldr	r3, [pc, #324]	@ (800afa0 <main+0x3e4>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800ae5e:	4b51      	ldr	r3, [pc, #324]	@ (800afa4 <main+0x3e8>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <main+0x2ae>
          sen5x_Power_Off();
 800ae66:	f001 fa9f 	bl	800c3a8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800ae6a:	f7fb fb5b 	bl	8006524 <ESP_Upkeep>
 800ae6e:	0003      	movs	r3, r0
 800ae70:	001a      	movs	r2, r3
 800ae72:	4b44      	ldr	r3, [pc, #272]	@ (800af84 <main+0x3c8>)
 800ae74:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800ae76:	4b45      	ldr	r3, [pc, #276]	@ (800af8c <main+0x3d0>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4053      	eors	r3, r2
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00f      	beq.n	800aea4 <main+0x2e8>
 800ae84:	4b2b      	ldr	r3, [pc, #172]	@ (800af34 <main+0x378>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	4053      	eors	r3, r2
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d008      	beq.n	800aea4 <main+0x2e8>
 800ae92:	4b3d      	ldr	r3, [pc, #244]	@ (800af88 <main+0x3cc>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2201      	movs	r2, #1
 800ae98:	4053      	eors	r3, r2
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <main+0x2e8>
      Device_Test();  // for device with startup time
 800aea0:	f000 fc90 	bl	800b7c4 <Device_Test>
    }
    if (!usbPluggedIn) {
 800aea4:	4b3a      	ldr	r3, [pc, #232]	@ (800af90 <main+0x3d4>)
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4053      	eors	r3, r2
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d01c      	beq.n	800aeec <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800aeb2:	4b3d      	ldr	r3, [pc, #244]	@ (800afa8 <main+0x3ec>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	4053      	eors	r3, r2
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d015      	beq.n	800aeec <main+0x330>
 800aec0:	f000 fcfe 	bl	800b8c0 <AllDevicesReady>
 800aec4:	1e03      	subs	r3, r0, #0
 800aec6:	d011      	beq.n	800aeec <main+0x330>
 800aec8:	4b38      	ldr	r3, [pc, #224]	@ (800afac <main+0x3f0>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00d      	beq.n	800aeec <main+0x330>
        EnabledConnectedDevices();
 800aed0:	f000 fd7a 	bl	800b9c8 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800aed4:	4b36      	ldr	r3, [pc, #216]	@ (800afb0 <main+0x3f4>)
 800aed6:	795b      	ldrb	r3, [r3, #5]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <main+0x326>
 800aedc:	23d7      	movs	r3, #215	@ 0xd7
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	e001      	b.n	800aee6 <main+0x32a>
 800aee2:	23dc      	movs	r3, #220	@ 0xdc
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	0018      	movs	r0, r3
 800aee8:	f7fd fb22 	bl	8008530 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800aeec:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <main+0x37c>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <main+0x33c>
      check_cli_command();
 800aef4:	f000 f8ea 	bl	800b0cc <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800aef8:	f7fc ff8a 	bl	8007e10 <Check_USB_PowerOn>
 800aefc:	1e03      	subs	r3, r0, #0
 800aefe:	d100      	bne.n	800af02 <main+0x346>
 800af00:	e6f2      	b.n	800ace8 <main+0x12c>
 800af02:	4b2c      	ldr	r3, [pc, #176]	@ (800afb4 <main+0x3f8>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2201      	movs	r2, #1
 800af08:	4053      	eors	r3, r2
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d100      	bne.n	800af12 <main+0x356>
 800af10:	e6ea      	b.n	800ace8 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800af12:	f015 fb83 	bl	802061c <GetUsbRxPointer>
 800af16:	0003      	movs	r3, r0
 800af18:	0018      	movs	r0, r3
 800af1a:	f7fc fd37 	bl	800798c <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800af1e:	e6e3      	b.n	800ace8 <main+0x12c>
 800af20:	20001e8c 	.word	0x20001e8c
 800af24:	20001e4c 	.word	0x20001e4c
 800af28:	20000df8 	.word	0x20000df8
 800af2c:	08029828 	.word	0x08029828
 800af30:	0802984c 	.word	0x0802984c
 800af34:	20000ddd 	.word	0x20000ddd
 800af38:	20000de4 	.word	0x20000de4
 800af3c:	20001fc4 	.word	0x20001fc4
 800af40:	20000e78 	.word	0x20000e78
 800af44:	20001ecc 	.word	0x20001ecc
 800af48:	20000d58 	.word	0x20000d58
 800af4c:	20000d94 	.word	0x20000d94
 800af50:	08029850 	.word	0x08029850
 800af54:	0802b064 	.word	0x0802b064
 800af58:	2000207c 	.word	0x2000207c
 800af5c:	20000b58 	.word	0x20000b58
 800af60:	20000c20 	.word	0x20000c20
 800af64:	000061a8 	.word	0x000061a8
 800af68:	20000df4 	.word	0x20000df4
 800af6c:	20000ddf 	.word	0x20000ddf
 800af70:	08029864 	.word	0x08029864
 800af74:	20000098 	.word	0x20000098
 800af78:	0000c350 	.word	0x0000c350
 800af7c:	20000097 	.word	0x20000097
 800af80:	20000dfc 	.word	0x20000dfc
 800af84:	20000de1 	.word	0x20000de1
 800af88:	20000dde 	.word	0x20000dde
 800af8c:	20000ddc 	.word	0x20000ddc
 800af90:	20001e2d 	.word	0x20001e2d
 800af94:	20000ea0 	.word	0x20000ea0
 800af98:	20000de0 	.word	0x20000de0
 800af9c:	08029898 	.word	0x08029898
 800afa0:	20000e9e 	.word	0x20000e9e
 800afa4:	20000e9d 	.word	0x20000e9d
 800afa8:	20001e2e 	.word	0x20001e2e
 800afac:	200005bc 	.word	0x200005bc
 800afb0:	20000e04 	.word	0x20000e04
 800afb4:	200005b7 	.word	0x200005b7

0800afb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b09d      	sub	sp, #116	@ 0x74
 800afbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800afbe:	2438      	movs	r4, #56	@ 0x38
 800afc0:	193b      	adds	r3, r7, r4
 800afc2:	0018      	movs	r0, r3
 800afc4:	2338      	movs	r3, #56	@ 0x38
 800afc6:	001a      	movs	r2, r3
 800afc8:	2100      	movs	r1, #0
 800afca:	f018 fd61 	bl	8023a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800afce:	2324      	movs	r3, #36	@ 0x24
 800afd0:	18fb      	adds	r3, r7, r3
 800afd2:	0018      	movs	r0, r3
 800afd4:	2314      	movs	r3, #20
 800afd6:	001a      	movs	r2, r3
 800afd8:	2100      	movs	r1, #0
 800afda:	f018 fd59 	bl	8023a90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800afde:	003b      	movs	r3, r7
 800afe0:	0018      	movs	r0, r3
 800afe2:	2324      	movs	r3, #36	@ 0x24
 800afe4:	001a      	movs	r2, r3
 800afe6:	2100      	movs	r1, #0
 800afe8:	f018 fd52 	bl	8023a90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800afec:	4b34      	ldr	r3, [pc, #208]	@ (800b0c0 <SystemClock_Config+0x108>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a34      	ldr	r2, [pc, #208]	@ (800b0c4 <SystemClock_Config+0x10c>)
 800aff2:	401a      	ands	r2, r3
 800aff4:	4b32      	ldr	r3, [pc, #200]	@ (800b0c0 <SystemClock_Config+0x108>)
 800aff6:	2180      	movs	r1, #128	@ 0x80
 800aff8:	0109      	lsls	r1, r1, #4
 800affa:	430a      	orrs	r2, r1
 800affc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800affe:	f00d fb6d 	bl	80186dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800b002:	4b31      	ldr	r3, [pc, #196]	@ (800b0c8 <SystemClock_Config+0x110>)
 800b004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b006:	4a2f      	ldr	r2, [pc, #188]	@ (800b0c4 <SystemClock_Config+0x10c>)
 800b008:	401a      	ands	r2, r3
 800b00a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0c8 <SystemClock_Config+0x110>)
 800b00c:	2180      	movs	r1, #128	@ 0x80
 800b00e:	0149      	lsls	r1, r1, #5
 800b010:	430a      	orrs	r2, r1
 800b012:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800b014:	193b      	adds	r3, r7, r4
 800b016:	2226      	movs	r2, #38	@ 0x26
 800b018:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b01a:	193b      	adds	r3, r7, r4
 800b01c:	2280      	movs	r2, #128	@ 0x80
 800b01e:	0052      	lsls	r2, r2, #1
 800b020:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b022:	0021      	movs	r1, r4
 800b024:	187b      	adds	r3, r7, r1
 800b026:	2201      	movs	r2, #1
 800b028:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b02a:	187b      	adds	r3, r7, r1
 800b02c:	2210      	movs	r2, #16
 800b02e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b030:	187b      	adds	r3, r7, r1
 800b032:	2201      	movs	r2, #1
 800b034:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b036:	187b      	adds	r3, r7, r1
 800b038:	2200      	movs	r2, #0
 800b03a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b03c:	187b      	adds	r3, r7, r1
 800b03e:	0018      	movs	r0, r3
 800b040:	f00d fbdc 	bl	80187fc <HAL_RCC_OscConfig>
 800b044:	1e03      	subs	r3, r0, #0
 800b046:	d001      	beq.n	800b04c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b048:	f000 f906 	bl	800b258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b04c:	2124      	movs	r1, #36	@ 0x24
 800b04e:	187b      	adds	r3, r7, r1
 800b050:	220f      	movs	r2, #15
 800b052:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b054:	187b      	adds	r3, r7, r1
 800b056:	2201      	movs	r2, #1
 800b058:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b05a:	187b      	adds	r3, r7, r1
 800b05c:	2200      	movs	r2, #0
 800b05e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b060:	187b      	adds	r3, r7, r1
 800b062:	2200      	movs	r2, #0
 800b064:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b066:	187b      	adds	r3, r7, r1
 800b068:	2200      	movs	r2, #0
 800b06a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b06c:	187b      	adds	r3, r7, r1
 800b06e:	2100      	movs	r1, #0
 800b070:	0018      	movs	r0, r3
 800b072:	f00d ff97 	bl	8018fa4 <HAL_RCC_ClockConfig>
 800b076:	1e03      	subs	r3, r0, #0
 800b078:	d001      	beq.n	800b07e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800b07a:	f000 f8ed 	bl	800b258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800b07e:	003b      	movs	r3, r7
 800b080:	226d      	movs	r2, #109	@ 0x6d
 800b082:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b084:	003b      	movs	r3, r7
 800b086:	2200      	movs	r2, #0
 800b088:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b08a:	003b      	movs	r3, r7
 800b08c:	2200      	movs	r2, #0
 800b08e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b090:	003b      	movs	r3, r7
 800b092:	2200      	movs	r2, #0
 800b094:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b096:	003b      	movs	r3, r7
 800b098:	2280      	movs	r2, #128	@ 0x80
 800b09a:	0252      	lsls	r2, r2, #9
 800b09c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b09e:	003b      	movs	r3, r7
 800b0a0:	2280      	movs	r2, #128	@ 0x80
 800b0a2:	04d2      	lsls	r2, r2, #19
 800b0a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0a6:	003b      	movs	r3, r7
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	f00e f99f 	bl	80193ec <HAL_RCCEx_PeriphCLKConfig>
 800b0ae:	1e03      	subs	r3, r0, #0
 800b0b0:	d001      	beq.n	800b0b6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800b0b2:	f000 f8d1 	bl	800b258 <Error_Handler>
  }
}
 800b0b6:	46c0      	nop			@ (mov r8, r8)
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b01d      	add	sp, #116	@ 0x74
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	46c0      	nop			@ (mov r8, r8)
 800b0c0:	40007000 	.word	0x40007000
 800b0c4:	ffffe7ff 	.word	0xffffe7ff
 800b0c8:	40021000 	.word	0x40021000

0800b0cc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800b0d0:	4b34      	ldr	r3, [pc, #208]	@ (800b1a4 <check_cli_command+0xd8>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	3b61      	subs	r3, #97	@ 0x61
 800b0d6:	2b13      	cmp	r3, #19
 800b0d8:	d833      	bhi.n	800b142 <check_cli_command+0x76>
 800b0da:	009a      	lsls	r2, r3, #2
 800b0dc:	4b32      	ldr	r3, [pc, #200]	@ (800b1a8 <check_cli_command+0xdc>)
 800b0de:	18d3      	adds	r3, r2, r3
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800b0e4:	4b31      	ldr	r3, [pc, #196]	@ (800b1ac <check_cli_command+0xe0>)
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	f018 fb62 	bl	80237b0 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800b0ec:	2003      	movs	r0, #3
 800b0ee:	f006 fbdb 	bl	80118a8 <SetVerboseLevel>
      break;
 800b0f2:	e051      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800b0f4:	f7fc fa48 	bl	8007588 <PC_show_Keys>
    break;
 800b0f8:	e04e      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800b0fa:	f7f9 f96d 	bl	80043d8 <forceNTPupdate>
    break;
 800b0fe:	e04b      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800b100:	4b2b      	ldr	r3, [pc, #172]	@ (800b1b0 <check_cli_command+0xe4>)
 800b102:	0018      	movs	r0, r3
 800b104:	f018 fb54 	bl	80237b0 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800b108:	2002      	movs	r0, #2
 800b10a:	f006 fbcd 	bl	80118a8 <SetVerboseLevel>
      break;
 800b10e:	e043      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800b110:	4b28      	ldr	r3, [pc, #160]	@ (800b1b4 <check_cli_command+0xe8>)
 800b112:	0018      	movs	r0, r3
 800b114:	f018 fb4c 	bl	80237b0 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800b118:	2001      	movs	r0, #1
 800b11a:	f006 fbc5 	bl	80118a8 <SetVerboseLevel>
      break;
 800b11e:	e03b      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800b120:	4b25      	ldr	r3, [pc, #148]	@ (800b1b8 <check_cli_command+0xec>)
 800b122:	0018      	movs	r0, r3
 800b124:	f018 fb44 	bl	80237b0 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800b128:	2000      	movs	r0, #0
 800b12a:	f006 fbbd 	bl	80118a8 <SetVerboseLevel>
      break;
 800b12e:	e033      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800b130:	f006 ff9c 	bl	801206c <HAL_GetTick>
 800b134:	0002      	movs	r2, r0
 800b136:	4b21      	ldr	r3, [pc, #132]	@ (800b1bc <check_cli_command+0xf0>)
 800b138:	601a      	str	r2, [r3, #0]
      break;
 800b13a:	e02d      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800b13c:	f7fc fe98 	bl	8007e70 <showTime>
      break;
 800b140:	e02a      	b.n	800b198 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800b142:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c0 <check_cli_command+0xf4>)
 800b144:	4b1f      	ldr	r3, [pc, #124]	@ (800b1c4 <check_cli_command+0xf8>)
 800b146:	0019      	movs	r1, r3
 800b148:	2001      	movs	r0, #1
 800b14a:	f006 fb43 	bl	80117d4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800b14e:	4b1e      	ldr	r3, [pc, #120]	@ (800b1c8 <check_cli_command+0xfc>)
 800b150:	0018      	movs	r0, r3
 800b152:	f018 fb2d 	bl	80237b0 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800b156:	4b1d      	ldr	r3, [pc, #116]	@ (800b1cc <check_cli_command+0x100>)
 800b158:	0018      	movs	r0, r3
 800b15a:	f018 fb29 	bl	80237b0 <puts>
      printf("e - show EEPROM\r\n");
 800b15e:	4b1c      	ldr	r3, [pc, #112]	@ (800b1d0 <check_cli_command+0x104>)
 800b160:	0018      	movs	r0, r3
 800b162:	f018 fb25 	bl	80237b0 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800b166:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d4 <check_cli_command+0x108>)
 800b168:	0018      	movs	r0, r3
 800b16a:	f018 fb21 	bl	80237b0 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800b16e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1d8 <check_cli_command+0x10c>)
 800b170:	0018      	movs	r0, r3
 800b172:	f018 fb1d 	bl	80237b0 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800b176:	4b19      	ldr	r3, [pc, #100]	@ (800b1dc <check_cli_command+0x110>)
 800b178:	0018      	movs	r0, r3
 800b17a:	f018 fb19 	bl	80237b0 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800b17e:	4b18      	ldr	r3, [pc, #96]	@ (800b1e0 <check_cli_command+0x114>)
 800b180:	0018      	movs	r0, r3
 800b182:	f018 fb15 	bl	80237b0 <puts>
      printf("s - Start particle measurement\r\n");
 800b186:	4b17      	ldr	r3, [pc, #92]	@ (800b1e4 <check_cli_command+0x118>)
 800b188:	0018      	movs	r0, r3
 800b18a:	f018 fb11 	bl	80237b0 <puts>
      printf("t - Show actual systemtime\r\n");
 800b18e:	4b16      	ldr	r3, [pc, #88]	@ (800b1e8 <check_cli_command+0x11c>)
 800b190:	0018      	movs	r0, r3
 800b192:	f018 fb0d 	bl	80237b0 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800b196:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800b198:	4b02      	ldr	r3, [pc, #8]	@ (800b1a4 <check_cli_command+0xd8>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
}
 800b19e:	46c0      	nop			@ (mov r8, r8)
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20000de4 	.word	0x20000de4
 800b1a8:	0802b014 	.word	0x0802b014
 800b1ac:	080298c8 	.word	0x080298c8
 800b1b0:	080298e4 	.word	0x080298e4
 800b1b4:	08029900 	.word	0x08029900
 800b1b8:	08029920 	.word	0x08029920
 800b1bc:	20000eac 	.word	0x20000eac
 800b1c0:	0802993c 	.word	0x0802993c
 800b1c4:	0802996c 	.word	0x0802996c
 800b1c8:	08029970 	.word	0x08029970
 800b1cc:	08029988 	.word	0x08029988
 800b1d0:	080299a8 	.word	0x080299a8
 800b1d4:	080299bc 	.word	0x080299bc
 800b1d8:	080299e0 	.word	0x080299e0
 800b1dc:	08029a00 	.word	0x08029a00
 800b1e0:	08029a24 	.word	0x08029a24
 800b1e4:	08029a44 	.word	0x08029a44
 800b1e8:	08029a64 	.word	0x08029a64

0800b1ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800b1f4:	4907      	ldr	r1, [pc, #28]	@ (800b214 <HAL_UART_RxCpltCallback+0x28>)
 800b1f6:	4b08      	ldr	r3, [pc, #32]	@ (800b218 <HAL_UART_RxCpltCallback+0x2c>)
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f00f fc9a 	bl	801ab34 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800b200:	4904      	ldr	r1, [pc, #16]	@ (800b214 <HAL_UART_RxCpltCallback+0x28>)
 800b202:	4b05      	ldr	r3, [pc, #20]	@ (800b218 <HAL_UART_RxCpltCallback+0x2c>)
 800b204:	2201      	movs	r2, #1
 800b206:	0018      	movs	r0, r3
 800b208:	f00f fc94 	bl	801ab34 <HAL_UART_Receive_IT>
}
 800b20c:	46c0      	nop			@ (mov r8, r8)
 800b20e:	46bd      	mov	sp, r7
 800b210:	b002      	add	sp, #8
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000de4 	.word	0x20000de4
 800b218:	20001fc4 	.word	0x20001fc4

0800b21c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	0002      	movs	r2, r0
 800b224:	1dbb      	adds	r3, r7, #6
 800b226:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800b228:	1dbb      	adds	r3, r7, #6
 800b22a:	881a      	ldrh	r2, [r3, #0]
 800b22c:	2380      	movs	r3, #128	@ 0x80
 800b22e:	021b      	lsls	r3, r3, #8
 800b230:	429a      	cmp	r2, r3
 800b232:	d10b      	bne.n	800b24c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800b234:	f005 fd74 	bl	8010d20 <setuserToggle>
    if (GetPMSensorPresence()) {
 800b238:	f000 f860 	bl	800b2fc <GetPMSensorPresence>
 800b23c:	1e03      	subs	r3, r0, #0
 800b23e:	d005      	beq.n	800b24c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800b240:	4b04      	ldr	r3, [pc, #16]	@ (800b254 <HAL_GPIO_EXTI_Callback+0x38>)
 800b242:	2201      	movs	r2, #1
 800b244:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800b246:	2000      	movs	r0, #0
 800b248:	f000 fff0 	bl	800c22c <sen5x_Set_sen5x_state>
    }
  }
}
 800b24c:	46c0      	nop			@ (mov r8, r8)
 800b24e:	46bd      	mov	sp, r7
 800b250:	b002      	add	sp, #8
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000dfc 	.word	0x20000dfc

0800b258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800b25c:	f005 fa2c 	bl	80106b8 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b260:	b672      	cpsid	i
}
 800b262:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800b264:	4a05      	ldr	r2, [pc, #20]	@ (800b27c <Error_Handler+0x24>)
 800b266:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <Error_Handler+0x28>)
 800b268:	0019      	movs	r1, r3
 800b26a:	2001      	movs	r0, #1
 800b26c:	f006 fab2 	bl	80117d4 <CreateLine>

    HAL_Delay(2500);
 800b270:	4b04      	ldr	r3, [pc, #16]	@ (800b284 <Error_Handler+0x2c>)
 800b272:	0018      	movs	r0, r3
 800b274:	f006 ff04 	bl	8012080 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800b278:	46c0      	nop			@ (mov r8, r8)
 800b27a:	e7f3      	b.n	800b264 <Error_Handler+0xc>
 800b27c:	08029a80 	.word	0x08029a80
 800b280:	0802996c 	.word	0x0802996c
 800b284:	000009c4 	.word	0x000009c4

0800b288 <testInit>:
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;

void testInit(){
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800b28c:	4b19      	ldr	r3, [pc, #100]	@ (800b2f4 <testInit+0x6c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800b292:	4b18      	ldr	r3, [pc, #96]	@ (800b2f4 <testInit+0x6c>)
 800b294:	2200      	movs	r2, #0
 800b296:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800b298:	4b16      	ldr	r3, [pc, #88]	@ (800b2f4 <testInit+0x6c>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800b29e:	4b15      	ldr	r3, [pc, #84]	@ (800b2f4 <testInit+0x6c>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800b2a4:	4b13      	ldr	r3, [pc, #76]	@ (800b2f4 <testInit+0x6c>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800b2aa:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <testInit+0x6c>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800b2b0:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <testInit+0x6c>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800b2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f4 <testInit+0x6c>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f4 <testInit+0x6c>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <testInit+0x70>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f8 <testInit+0x70>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <testInit+0x70>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800b2d4:	4b08      	ldr	r3, [pc, #32]	@ (800b2f8 <testInit+0x70>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800b2da:	4b07      	ldr	r3, [pc, #28]	@ (800b2f8 <testInit+0x70>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <testInit+0x70>)
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800b2e6:	4b04      	ldr	r3, [pc, #16]	@ (800b2f8 <testInit+0x70>)
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	719a      	strb	r2, [r3, #6]
}
 800b2ec:	46c0      	nop			@ (mov r8, r8)
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	20000e04 	.word	0x20000e04
 800b2f8:	20000dfc 	.word	0x20000dfc

0800b2fc <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800b300:	4b02      	ldr	r3, [pc, #8]	@ (800b30c <GetPMSensorPresence+0x10>)
 800b302:	795b      	ldrb	r3, [r3, #5]
}
 800b304:	0018      	movs	r0, r3
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	46c0      	nop			@ (mov r8, r8)
 800b30c:	20000e04 	.word	0x20000e04

0800b310 <DisablePMSensor>:

void DisablePMSensor() {
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800b314:	4b02      	ldr	r3, [pc, #8]	@ (800b320 <DisablePMSensor+0x10>)
 800b316:	2200      	movs	r2, #0
 800b318:	715a      	strb	r2, [r3, #5]
}
 800b31a:	46c0      	nop			@ (mov r8, r8)
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000e04 	.word	0x20000e04

0800b324 <IsBMP280SensorPresent>:

bool IsAHT20SensorPresent() {
  return SensorProbe.AHT20_Present;
}

bool IsBMP280SensorPresent() {
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800b328:	4b02      	ldr	r3, [pc, #8]	@ (800b334 <IsBMP280SensorPresent+0x10>)
 800b32a:	791b      	ldrb	r3, [r3, #4]
}
 800b32c:	0018      	movs	r0, r3
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	20000e04 	.word	0x20000e04

0800b338 <IsSGPPresent>:

bool IsENS160SensorPresent() {
  return SensorProbe.ENS160_Present;
}

bool IsSGPPresent() {
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800b33c:	4b02      	ldr	r3, [pc, #8]	@ (800b348 <IsSGPPresent+0x10>)
 800b33e:	785b      	ldrb	r3, [r3, #1]
}
 800b340:	0018      	movs	r0, r3
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	46c0      	nop			@ (mov r8, r8)
 800b348:	20000e04 	.word	0x20000e04

0800b34c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	0002      	movs	r2, r0
 800b354:	1dfb      	adds	r3, r7, #7
 800b356:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800b358:	4b0b      	ldr	r3, [pc, #44]	@ (800b388 <SetVOCSensorDIS_ENA+0x3c>)
 800b35a:	1dfa      	adds	r2, r7, #7
 800b35c:	7812      	ldrb	r2, [r2, #0]
 800b35e:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800b360:	4b0a      	ldr	r3, [pc, #40]	@ (800b38c <SetVOCSensorDIS_ENA+0x40>)
 800b362:	1dfa      	adds	r2, r7, #7
 800b364:	7812      	ldrb	r2, [r2, #0]
 800b366:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800b368:	1dfb      	adds	r3, r7, #7
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <SetVOCSensorDIS_ENA+0x28>
 800b370:	4b07      	ldr	r3, [pc, #28]	@ (800b390 <SetVOCSensorDIS_ENA+0x44>)
 800b372:	e000      	b.n	800b376 <SetVOCSensorDIS_ENA+0x2a>
 800b374:	4b07      	ldr	r3, [pc, #28]	@ (800b394 <SetVOCSensorDIS_ENA+0x48>)
 800b376:	4a08      	ldr	r2, [pc, #32]	@ (800b398 <SetVOCSensorDIS_ENA+0x4c>)
 800b378:	4908      	ldr	r1, [pc, #32]	@ (800b39c <SetVOCSensorDIS_ENA+0x50>)
 800b37a:	2003      	movs	r0, #3
 800b37c:	f006 fa2a 	bl	80117d4 <CreateLine>
}
 800b380:	46c0      	nop			@ (mov r8, r8)
 800b382:	46bd      	mov	sp, r7
 800b384:	b002      	add	sp, #8
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000e04 	.word	0x20000e04
 800b38c:	20000dfc 	.word	0x20000dfc
 800b390:	08029aac 	.word	0x08029aac
 800b394:	08029ab4 	.word	0x08029ab4
 800b398:	08029ac0 	.word	0x08029ac0
 800b39c:	08029ad4 	.word	0x08029ad4

0800b3a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800b3a4:	4b02      	ldr	r3, [pc, #8]	@ (800b3b0 <IsPMSensorEnabled+0x10>)
 800b3a6:	789b      	ldrb	r3, [r3, #2]
}
 800b3a8:	0018      	movs	r0, r3
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	46c0      	nop			@ (mov r8, r8)
 800b3b0:	20000dfc 	.word	0x20000dfc

0800b3b4 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	0002      	movs	r2, r0
 800b3bc:	1dfb      	adds	r3, r7, #7
 800b3be:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800b3c0:	4b05      	ldr	r3, [pc, #20]	@ (800b3d8 <SetVOCSensorStatus+0x24>)
 800b3c2:	7a1b      	ldrb	r3, [r3, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d003      	beq.n	800b3d0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800b3c8:	4b04      	ldr	r3, [pc, #16]	@ (800b3dc <SetVOCSensorStatus+0x28>)
 800b3ca:	1dfa      	adds	r2, r7, #7
 800b3cc:	7812      	ldrb	r2, [r2, #0]
 800b3ce:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800b3d0:	46c0      	nop			@ (mov r8, r8)
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	b002      	add	sp, #8
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20000e04 	.word	0x20000e04
 800b3dc:	20000dfc 	.word	0x20000dfc

0800b3e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	1dfb      	adds	r3, r7, #7
 800b3ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800b3ec:	4b03      	ldr	r3, [pc, #12]	@ (800b3fc <SetPMSensorStatus+0x1c>)
 800b3ee:	1dfa      	adds	r2, r7, #7
 800b3f0:	7812      	ldrb	r2, [r2, #0]
 800b3f2:	709a      	strb	r2, [r3, #2]
}
 800b3f4:	46c0      	nop			@ (mov r8, r8)
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20000dfc 	.word	0x20000dfc

0800b400 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800b404:	4b02      	ldr	r3, [pc, #8]	@ (800b410 <SetESPMeasurementDone+0x10>)
 800b406:	2201      	movs	r2, #1
 800b408:	71da      	strb	r2, [r3, #7]
}
 800b40a:	46c0      	nop			@ (mov r8, r8)
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20000e04 	.word	0x20000e04

0800b414 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
  testInit();
 800b422:	f7ff ff31 	bl	800b288 <testInit>
  I2CSensors_Init(sensorI2C);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	0018      	movs	r0, r3
 800b42a:	f7fb fd2b 	bl	8006e84 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800b42e:	f006 fc03 	bl	8011c38 <HIDS_DeviceConnected>
 800b432:	0003      	movs	r3, r0
 800b434:	001a      	movs	r2, r3
 800b436:	2301      	movs	r3, #1
 800b438:	4053      	eors	r3, r2
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00c      	beq.n	800b45a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800b440:	4abf      	ldr	r2, [pc, #764]	@ (800b740 <Device_Init+0x32c>)
 800b442:	4bc0      	ldr	r3, [pc, #768]	@ (800b744 <Device_Init+0x330>)
 800b444:	0019      	movs	r1, r3
 800b446:	2001      	movs	r0, #1
 800b448:	f006 f9c4 	bl	80117d4 <CreateLine>
     SensorProbe.HT_Present = false;
 800b44c:	4bbe      	ldr	r3, [pc, #760]	@ (800b748 <Device_Init+0x334>)
 800b44e:	2200      	movs	r2, #0
 800b450:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800b452:	4bbe      	ldr	r3, [pc, #760]	@ (800b74c <Device_Init+0x338>)
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e008      	b.n	800b46c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800b45a:	4bbb      	ldr	r3, [pc, #748]	@ (800b748 <Device_Init+0x334>)
 800b45c:	2201      	movs	r2, #1
 800b45e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800b460:	4abb      	ldr	r2, [pc, #748]	@ (800b750 <Device_Init+0x33c>)
 800b462:	4bbc      	ldr	r3, [pc, #752]	@ (800b754 <Device_Init+0x340>)
 800b464:	0019      	movs	r1, r3
 800b466:	2003      	movs	r0, #3
 800b468:	f006 f9b4 	bl	80117d4 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800b46c:	f7fe fa42 	bl	80098f4 <BMP280_DeviceConnected>
 800b470:	0003      	movs	r3, r0
 800b472:	001a      	movs	r2, r3
 800b474:	2301      	movs	r3, #1
 800b476:	4053      	eors	r3, r2
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00c      	beq.n	800b498 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800b47e:	4ab6      	ldr	r2, [pc, #728]	@ (800b758 <Device_Init+0x344>)
 800b480:	4bb0      	ldr	r3, [pc, #704]	@ (800b744 <Device_Init+0x330>)
 800b482:	0019      	movs	r1, r3
 800b484:	2001      	movs	r0, #1
 800b486:	f006 f9a5 	bl	80117d4 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800b48a:	4baf      	ldr	r3, [pc, #700]	@ (800b748 <Device_Init+0x334>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800b490:	4bae      	ldr	r3, [pc, #696]	@ (800b74c <Device_Init+0x338>)
 800b492:	2200      	movs	r2, #0
 800b494:	715a      	strb	r2, [r3, #5]
 800b496:	e008      	b.n	800b4aa <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800b498:	4bab      	ldr	r3, [pc, #684]	@ (800b748 <Device_Init+0x334>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800b49e:	4aaf      	ldr	r2, [pc, #700]	@ (800b75c <Device_Init+0x348>)
 800b4a0:	4bac      	ldr	r3, [pc, #688]	@ (800b754 <Device_Init+0x340>)
 800b4a2:	0019      	movs	r1, r3
 800b4a4:	2003      	movs	r0, #3
 800b4a6:	f006 f995 	bl	80117d4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800b4aa:	f003 fc3b 	bl	800ed24 <SGP_DeviceConnected>
 800b4ae:	0003      	movs	r3, r0
 800b4b0:	001a      	movs	r2, r3
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4053      	eors	r3, r2
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00c      	beq.n	800b4d6 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800b4bc:	4ba2      	ldr	r3, [pc, #648]	@ (800b748 <Device_Init+0x334>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800b4c2:	4aa7      	ldr	r2, [pc, #668]	@ (800b760 <Device_Init+0x34c>)
 800b4c4:	4b9f      	ldr	r3, [pc, #636]	@ (800b744 <Device_Init+0x330>)
 800b4c6:	0019      	movs	r1, r3
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	f006 f983 	bl	80117d4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800b4ce:	4b9f      	ldr	r3, [pc, #636]	@ (800b74c <Device_Init+0x338>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	705a      	strb	r2, [r3, #1]
 800b4d4:	e00b      	b.n	800b4ee <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800b4d6:	4b9c      	ldr	r3, [pc, #624]	@ (800b748 <Device_Init+0x334>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800b4dc:	4b9a      	ldr	r3, [pc, #616]	@ (800b748 <Device_Init+0x334>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800b4e2:	4aa0      	ldr	r2, [pc, #640]	@ (800b764 <Device_Init+0x350>)
 800b4e4:	4b9b      	ldr	r3, [pc, #620]	@ (800b754 <Device_Init+0x340>)
 800b4e6:	0019      	movs	r1, r3
 800b4e8:	2003      	movs	r0, #3
 800b4ea:	f006 f973 	bl	80117d4 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800b4ee:	f7f8 fa89 	bl	8003a04 <ENS_DeviceConnected>
 800b4f2:	0003      	movs	r3, r0
 800b4f4:	001a      	movs	r2, r3
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4053      	eors	r3, r2
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00c      	beq.n	800b51a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800b500:	4b91      	ldr	r3, [pc, #580]	@ (800b748 <Device_Init+0x334>)
 800b502:	2200      	movs	r2, #0
 800b504:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800b506:	4a98      	ldr	r2, [pc, #608]	@ (800b768 <Device_Init+0x354>)
 800b508:	4b8e      	ldr	r3, [pc, #568]	@ (800b744 <Device_Init+0x330>)
 800b50a:	0019      	movs	r1, r3
 800b50c:	2001      	movs	r0, #1
 800b50e:	f006 f961 	bl	80117d4 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800b512:	4b8e      	ldr	r3, [pc, #568]	@ (800b74c <Device_Init+0x338>)
 800b514:	2200      	movs	r2, #0
 800b516:	719a      	strb	r2, [r3, #6]
 800b518:	e008      	b.n	800b52c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800b51a:	4b8b      	ldr	r3, [pc, #556]	@ (800b748 <Device_Init+0x334>)
 800b51c:	2201      	movs	r2, #1
 800b51e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800b520:	4a92      	ldr	r2, [pc, #584]	@ (800b76c <Device_Init+0x358>)
 800b522:	4b8c      	ldr	r3, [pc, #560]	@ (800b754 <Device_Init+0x340>)
 800b524:	0019      	movs	r1, r3
 800b526:	2003      	movs	r0, #3
 800b528:	f006 f954 	bl	80117d4 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800b52c:	f7fd fd1c 	bl	8008f68 <AHT20_DeviceConnected>
 800b530:	0003      	movs	r3, r0
 800b532:	001a      	movs	r2, r3
 800b534:	2301      	movs	r3, #1
 800b536:	4053      	eors	r3, r2
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00c      	beq.n	800b558 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800b53e:	4a8c      	ldr	r2, [pc, #560]	@ (800b770 <Device_Init+0x35c>)
 800b540:	4b80      	ldr	r3, [pc, #512]	@ (800b744 <Device_Init+0x330>)
 800b542:	0019      	movs	r1, r3
 800b544:	2001      	movs	r0, #1
 800b546:	f006 f945 	bl	80117d4 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800b54a:	4b7f      	ldr	r3, [pc, #508]	@ (800b748 <Device_Init+0x334>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800b550:	4b7e      	ldr	r3, [pc, #504]	@ (800b74c <Device_Init+0x338>)
 800b552:	2200      	movs	r2, #0
 800b554:	711a      	strb	r2, [r3, #4]
 800b556:	e008      	b.n	800b56a <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800b558:	4b7b      	ldr	r3, [pc, #492]	@ (800b748 <Device_Init+0x334>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800b55e:	4a85      	ldr	r2, [pc, #532]	@ (800b774 <Device_Init+0x360>)
 800b560:	4b7c      	ldr	r3, [pc, #496]	@ (800b754 <Device_Init+0x340>)
 800b562:	0019      	movs	r1, r3
 800b564:	2003      	movs	r0, #3
 800b566:	f006 f935 	bl	80117d4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800b56a:	4b77      	ldr	r3, [pc, #476]	@ (800b748 <Device_Init+0x334>)
 800b56c:	785b      	ldrb	r3, [r3, #1]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <Device_Init+0x172>
 800b572:	4b75      	ldr	r3, [pc, #468]	@ (800b748 <Device_Init+0x334>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800b57a:	2200      	movs	r2, #0
 800b57c:	2101      	movs	r1, #1
 800b57e:	2000      	movs	r0, #0
 800b580:	f004 fef4 	bl	801036c <SetDBLED>
 800b584:	e018      	b.n	800b5b8 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800b586:	2200      	movs	r2, #0
 800b588:	2100      	movs	r1, #0
 800b58a:	2001      	movs	r0, #1
 800b58c:	f004 feee 	bl	801036c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800b590:	4b79      	ldr	r3, [pc, #484]	@ (800b778 <Device_Init+0x364>)
 800b592:	2200      	movs	r2, #0
 800b594:	2101      	movs	r1, #1
 800b596:	0018      	movs	r0, r3
 800b598:	f007 fff9 	bl	801358e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800b59c:	2380      	movs	r3, #128	@ 0x80
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	4875      	ldr	r0, [pc, #468]	@ (800b778 <Device_Init+0x364>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	0019      	movs	r1, r3
 800b5a6:	f007 fff2 	bl	801358e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800b5aa:	2380      	movs	r3, #128	@ 0x80
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4872      	ldr	r0, [pc, #456]	@ (800b778 <Device_Init+0x364>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	0019      	movs	r1, r3
 800b5b4:	f007 ffeb 	bl	801358e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800b5b8:	4b64      	ldr	r3, [pc, #400]	@ (800b74c <Device_Init+0x338>)
 800b5ba:	78db      	ldrb	r3, [r3, #3]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d028      	beq.n	800b612 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800b5c0:	4a6e      	ldr	r2, [pc, #440]	@ (800b77c <Device_Init+0x368>)
 800b5c2:	4b6f      	ldr	r3, [pc, #444]	@ (800b780 <Device_Init+0x36c>)
 800b5c4:	0019      	movs	r1, r3
 800b5c6:	2002      	movs	r0, #2
 800b5c8:	f006 f904 	bl	80117d4 <CreateLine>
    if (!enableMicrophone(true)) {
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f003 ffcb 	bl	800f568 <enableMicrophone>
 800b5d2:	0003      	movs	r3, r0
 800b5d4:	001a      	movs	r2, r3
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4053      	eors	r3, r2
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00c      	beq.n	800b5fa <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800b5e0:	4a68      	ldr	r2, [pc, #416]	@ (800b784 <Device_Init+0x370>)
 800b5e2:	4b58      	ldr	r3, [pc, #352]	@ (800b744 <Device_Init+0x330>)
 800b5e4:	0019      	movs	r1, r3
 800b5e6:	2001      	movs	r0, #1
 800b5e8:	f006 f8f4 	bl	80117d4 <CreateLine>
      SensorProbe.MIC_Present = false;
 800b5ec:	4b56      	ldr	r3, [pc, #344]	@ (800b748 <Device_Init+0x334>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800b5f2:	4b56      	ldr	r3, [pc, #344]	@ (800b74c <Device_Init+0x338>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	70da      	strb	r2, [r3, #3]
 800b5f8:	e00b      	b.n	800b612 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800b5fa:	4b53      	ldr	r3, [pc, #332]	@ (800b748 <Device_Init+0x334>)
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b600:	4b52      	ldr	r3, [pc, #328]	@ (800b74c <Device_Init+0x338>)
 800b602:	2201      	movs	r2, #1
 800b604:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800b606:	4a60      	ldr	r2, [pc, #384]	@ (800b788 <Device_Init+0x374>)
 800b608:	4b52      	ldr	r3, [pc, #328]	@ (800b754 <Device_Init+0x340>)
 800b60a:	0019      	movs	r1, r3
 800b60c:	2003      	movs	r0, #3
 800b60e:	f006 f8e1 	bl	80117d4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800b612:	f000 feff 	bl	800c414 <probe_sen5x>
 800b616:	1e03      	subs	r3, r0, #0
 800b618:	d122      	bne.n	800b660 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800b61a:	4a5c      	ldr	r2, [pc, #368]	@ (800b78c <Device_Init+0x378>)
 800b61c:	4b4d      	ldr	r3, [pc, #308]	@ (800b754 <Device_Init+0x340>)
 800b61e:	0019      	movs	r1, r3
 800b620:	2003      	movs	r0, #3
 800b622:	f006 f8d7 	bl	80117d4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800b626:	4b48      	ldr	r3, [pc, #288]	@ (800b748 <Device_Init+0x334>)
 800b628:	2201      	movs	r2, #1
 800b62a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800b62c:	4b47      	ldr	r3, [pc, #284]	@ (800b74c <Device_Init+0x338>)
 800b62e:	2201      	movs	r2, #1
 800b630:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800b632:	4b57      	ldr	r3, [pc, #348]	@ (800b790 <Device_Init+0x37c>)
 800b634:	791b      	ldrb	r3, [r3, #4]
 800b636:	2b34      	cmp	r3, #52	@ 0x34
 800b638:	d003      	beq.n	800b642 <Device_Init+0x22e>
 800b63a:	4b55      	ldr	r3, [pc, #340]	@ (800b790 <Device_Init+0x37c>)
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	2b35      	cmp	r3, #53	@ 0x35
 800b640:	d11c      	bne.n	800b67c <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800b642:	4a54      	ldr	r2, [pc, #336]	@ (800b794 <Device_Init+0x380>)
 800b644:	4b4e      	ldr	r3, [pc, #312]	@ (800b780 <Device_Init+0x36c>)
 800b646:	0019      	movs	r1, r3
 800b648:	2002      	movs	r0, #2
 800b64a:	f006 f8c3 	bl	80117d4 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800b64e:	4b3f      	ldr	r3, [pc, #252]	@ (800b74c <Device_Init+0x338>)
 800b650:	2200      	movs	r2, #0
 800b652:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800b654:	4b3c      	ldr	r3, [pc, #240]	@ (800b748 <Device_Init+0x334>)
 800b656:	2200      	movs	r2, #0
 800b658:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800b65a:	f003 fd47 	bl	800f0ec <SGP_SoftReset>
 800b65e:	e00d      	b.n	800b67c <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800b660:	f000 fea2 	bl	800c3a8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800b664:	4a4c      	ldr	r2, [pc, #304]	@ (800b798 <Device_Init+0x384>)
 800b666:	4b3b      	ldr	r3, [pc, #236]	@ (800b754 <Device_Init+0x340>)
 800b668:	0019      	movs	r1, r3
 800b66a:	2003      	movs	r0, #3
 800b66c:	f006 f8b2 	bl	80117d4 <CreateLine>
    SensorProbe.PM_Present = false;
 800b670:	4b35      	ldr	r3, [pc, #212]	@ (800b748 <Device_Init+0x334>)
 800b672:	2200      	movs	r2, #0
 800b674:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800b676:	4b35      	ldr	r3, [pc, #212]	@ (800b74c <Device_Init+0x338>)
 800b678:	2200      	movs	r2, #0
 800b67a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800b67c:	4b32      	ldr	r3, [pc, #200]	@ (800b748 <Device_Init+0x334>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <Device_Init+0x274>
 800b684:	4b45      	ldr	r3, [pc, #276]	@ (800b79c <Device_Init+0x388>)
 800b686:	e000      	b.n	800b68a <Device_Init+0x276>
 800b688:	4b45      	ldr	r3, [pc, #276]	@ (800b7a0 <Device_Init+0x38c>)
 800b68a:	4a46      	ldr	r2, [pc, #280]	@ (800b7a4 <Device_Init+0x390>)
 800b68c:	493c      	ldr	r1, [pc, #240]	@ (800b780 <Device_Init+0x36c>)
 800b68e:	2002      	movs	r0, #2
 800b690:	f006 f8a0 	bl	80117d4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800b694:	4b2c      	ldr	r3, [pc, #176]	@ (800b748 <Device_Init+0x334>)
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <Device_Init+0x28c>
 800b69c:	4b3f      	ldr	r3, [pc, #252]	@ (800b79c <Device_Init+0x388>)
 800b69e:	e000      	b.n	800b6a2 <Device_Init+0x28e>
 800b6a0:	4b3f      	ldr	r3, [pc, #252]	@ (800b7a0 <Device_Init+0x38c>)
 800b6a2:	4a41      	ldr	r2, [pc, #260]	@ (800b7a8 <Device_Init+0x394>)
 800b6a4:	4936      	ldr	r1, [pc, #216]	@ (800b780 <Device_Init+0x36c>)
 800b6a6:	2002      	movs	r0, #2
 800b6a8:	f006 f894 	bl	80117d4 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800b6ac:	4b26      	ldr	r3, [pc, #152]	@ (800b748 <Device_Init+0x334>)
 800b6ae:	789b      	ldrb	r3, [r3, #2]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <Device_Init+0x2a4>
 800b6b4:	4b39      	ldr	r3, [pc, #228]	@ (800b79c <Device_Init+0x388>)
 800b6b6:	e000      	b.n	800b6ba <Device_Init+0x2a6>
 800b6b8:	4b39      	ldr	r3, [pc, #228]	@ (800b7a0 <Device_Init+0x38c>)
 800b6ba:	4a3c      	ldr	r2, [pc, #240]	@ (800b7ac <Device_Init+0x398>)
 800b6bc:	4930      	ldr	r1, [pc, #192]	@ (800b780 <Device_Init+0x36c>)
 800b6be:	2002      	movs	r0, #2
 800b6c0:	f006 f888 	bl	80117d4 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800b6c4:	4b20      	ldr	r3, [pc, #128]	@ (800b748 <Device_Init+0x334>)
 800b6c6:	791b      	ldrb	r3, [r3, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <Device_Init+0x2bc>
 800b6cc:	4b33      	ldr	r3, [pc, #204]	@ (800b79c <Device_Init+0x388>)
 800b6ce:	e000      	b.n	800b6d2 <Device_Init+0x2be>
 800b6d0:	4b33      	ldr	r3, [pc, #204]	@ (800b7a0 <Device_Init+0x38c>)
 800b6d2:	4a37      	ldr	r2, [pc, #220]	@ (800b7b0 <Device_Init+0x39c>)
 800b6d4:	492a      	ldr	r1, [pc, #168]	@ (800b780 <Device_Init+0x36c>)
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	f006 f87c 	bl	80117d4 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800b6dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b748 <Device_Init+0x334>)
 800b6de:	78db      	ldrb	r3, [r3, #3]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d001      	beq.n	800b6e8 <Device_Init+0x2d4>
 800b6e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b79c <Device_Init+0x388>)
 800b6e6:	e000      	b.n	800b6ea <Device_Init+0x2d6>
 800b6e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b7a0 <Device_Init+0x38c>)
 800b6ea:	4a32      	ldr	r2, [pc, #200]	@ (800b7b4 <Device_Init+0x3a0>)
 800b6ec:	4924      	ldr	r1, [pc, #144]	@ (800b780 <Device_Init+0x36c>)
 800b6ee:	2002      	movs	r0, #2
 800b6f0:	f006 f870 	bl	80117d4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800b6f4:	4b14      	ldr	r3, [pc, #80]	@ (800b748 <Device_Init+0x334>)
 800b6f6:	795b      	ldrb	r3, [r3, #5]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <Device_Init+0x2ec>
 800b6fc:	4b27      	ldr	r3, [pc, #156]	@ (800b79c <Device_Init+0x388>)
 800b6fe:	e000      	b.n	800b702 <Device_Init+0x2ee>
 800b700:	4b27      	ldr	r3, [pc, #156]	@ (800b7a0 <Device_Init+0x38c>)
 800b702:	4a2d      	ldr	r2, [pc, #180]	@ (800b7b8 <Device_Init+0x3a4>)
 800b704:	491e      	ldr	r1, [pc, #120]	@ (800b780 <Device_Init+0x36c>)
 800b706:	2002      	movs	r0, #2
 800b708:	f006 f864 	bl	80117d4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800b70c:	4b0e      	ldr	r3, [pc, #56]	@ (800b748 <Device_Init+0x334>)
 800b70e:	799b      	ldrb	r3, [r3, #6]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <Device_Init+0x304>
 800b714:	4b21      	ldr	r3, [pc, #132]	@ (800b79c <Device_Init+0x388>)
 800b716:	e000      	b.n	800b71a <Device_Init+0x306>
 800b718:	4b21      	ldr	r3, [pc, #132]	@ (800b7a0 <Device_Init+0x38c>)
 800b71a:	4a28      	ldr	r2, [pc, #160]	@ (800b7bc <Device_Init+0x3a8>)
 800b71c:	4918      	ldr	r1, [pc, #96]	@ (800b780 <Device_Init+0x36c>)
 800b71e:	2002      	movs	r0, #2
 800b720:	f006 f858 	bl	80117d4 <CreateLine>
  ESP_Init(espUart);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	0018      	movs	r0, r3
 800b728:	f7f9 f82a 	bl	8004780 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800b72c:	4a24      	ldr	r2, [pc, #144]	@ (800b7c0 <Device_Init+0x3ac>)
 800b72e:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <Device_Init+0x340>)
 800b730:	0019      	movs	r1, r3
 800b732:	2003      	movs	r0, #3
 800b734:	f006 f84e 	bl	80117d4 <CreateLine>
}
 800b738:	46c0      	nop			@ (mov r8, r8)
 800b73a:	46bd      	mov	sp, r7
 800b73c:	b004      	add	sp, #16
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08029ad8 	.word	0x08029ad8
 800b744:	08029b08 	.word	0x08029b08
 800b748:	20000e04 	.word	0x20000e04
 800b74c:	20000dfc 	.word	0x20000dfc
 800b750:	08029b0c 	.word	0x08029b0c
 800b754:	08029ad4 	.word	0x08029ad4
 800b758:	08029b38 	.word	0x08029b38
 800b75c:	08029b6c 	.word	0x08029b6c
 800b760:	08029b9c 	.word	0x08029b9c
 800b764:	08029bb8 	.word	0x08029bb8
 800b768:	08029bd0 	.word	0x08029bd0
 800b76c:	08029bec 	.word	0x08029bec
 800b770:	08029c04 	.word	0x08029c04
 800b774:	08029c38 	.word	0x08029c38
 800b778:	50000400 	.word	0x50000400
 800b77c:	08029c6c 	.word	0x08029c6c
 800b780:	08029c90 	.word	0x08029c90
 800b784:	08029c94 	.word	0x08029c94
 800b788:	08029cc0 	.word	0x08029cc0
 800b78c:	08029cec 	.word	0x08029cec
 800b790:	20000ea0 	.word	0x20000ea0
 800b794:	08029d04 	.word	0x08029d04
 800b798:	08029d54 	.word	0x08029d54
 800b79c:	08029d78 	.word	0x08029d78
 800b7a0:	08029d7c 	.word	0x08029d7c
 800b7a4:	08029d80 	.word	0x08029d80
 800b7a8:	08029d9c 	.word	0x08029d9c
 800b7ac:	08029db8 	.word	0x08029db8
 800b7b0:	08029dd8 	.word	0x08029dd8
 800b7b4:	08029df8 	.word	0x08029df8
 800b7b8:	08029e18 	.word	0x08029e18
 800b7bc:	08029e34 	.word	0x08029e34
 800b7c0:	08029e50 	.word	0x08029e50

0800b7c4 <Device_Test>:

void Device_Test(){
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800b7c8:	4b34      	ldr	r3, [pc, #208]	@ (800b89c <Device_Test+0xd8>)
 800b7ca:	799b      	ldrb	r3, [r3, #6]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	4053      	eors	r3, r2
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d027      	beq.n	800b826 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800b7d6:	f000 fb4d 	bl	800be74 <MIC_TestMeasurementDone>
 800b7da:	1e03      	subs	r3, r0, #0
 800b7dc:	d011      	beq.n	800b802 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800b7de:	4b2f      	ldr	r3, [pc, #188]	@ (800b89c <Device_Test+0xd8>)
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b7e4:	4b2e      	ldr	r3, [pc, #184]	@ (800b8a0 <Device_Test+0xdc>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800b7ea:	f004 fd43 	bl	8010274 <Calculate_LED_ON>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	0019      	movs	r1, r3
 800b7f2:	23fa      	movs	r3, #250	@ 0xfa
 800b7f4:	011a      	lsls	r2, r3, #4
 800b7f6:	23fa      	movs	r3, #250	@ 0xfa
 800b7f8:	011b      	lsls	r3, r3, #4
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f004 fd82 	bl	8010304 <SetStatusLED>
 800b800:	e011      	b.n	800b826 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800b802:	f003 fe8d 	bl	800f520 <micSettlingComplete>
 800b806:	1e03      	subs	r3, r0, #0
 800b808:	d00d      	beq.n	800b826 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800b80a:	4b25      	ldr	r3, [pc, #148]	@ (800b8a0 <Device_Test+0xdc>)
 800b80c:	2201      	movs	r2, #1
 800b80e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800b810:	f004 fd30 	bl	8010274 <Calculate_LED_ON>
 800b814:	0003      	movs	r3, r0
 800b816:	0018      	movs	r0, r3
 800b818:	23fa      	movs	r3, #250	@ 0xfa
 800b81a:	011a      	lsls	r2, r3, #4
 800b81c:	23fa      	movs	r3, #250	@ 0xfa
 800b81e:	011b      	lsls	r3, r3, #4
 800b820:	0019      	movs	r1, r3
 800b822:	f004 fd6f 	bl	8010304 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800b826:	4b1d      	ldr	r3, [pc, #116]	@ (800b89c <Device_Test+0xd8>)
 800b828:	79db      	ldrb	r3, [r3, #7]
 800b82a:	2201      	movs	r2, #1
 800b82c:	4053      	eors	r3, r2
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800b834:	f7fa fd5c 	bl	80062f0 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800b838:	4b18      	ldr	r3, [pc, #96]	@ (800b89c <Device_Test+0xd8>)
 800b83a:	79db      	ldrb	r3, [r3, #7]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <Device_Test+0x84>
 800b840:	4b16      	ldr	r3, [pc, #88]	@ (800b89c <Device_Test+0xd8>)
 800b842:	799b      	ldrb	r3, [r3, #6]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <Device_Test+0x92>
 800b848:	4b16      	ldr	r3, [pc, #88]	@ (800b8a4 <Device_Test+0xe0>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	0018      	movs	r0, r3
 800b84e:	f005 ff6b 	bl	8011728 <TimestampIsReached>
 800b852:	1e03      	subs	r3, r0, #0
 800b854:	d01f      	beq.n	800b896 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800b856:	4b11      	ldr	r3, [pc, #68]	@ (800b89c <Device_Test+0xd8>)
 800b858:	79db      	ldrb	r3, [r3, #7]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <Device_Test+0x9e>
 800b85e:	4b12      	ldr	r3, [pc, #72]	@ (800b8a8 <Device_Test+0xe4>)
 800b860:	e000      	b.n	800b864 <Device_Test+0xa0>
 800b862:	4b12      	ldr	r3, [pc, #72]	@ (800b8ac <Device_Test+0xe8>)
 800b864:	4a12      	ldr	r2, [pc, #72]	@ (800b8b0 <Device_Test+0xec>)
 800b866:	4913      	ldr	r1, [pc, #76]	@ (800b8b4 <Device_Test+0xf0>)
 800b868:	2002      	movs	r0, #2
 800b86a:	f005 ffb3 	bl	80117d4 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800b86e:	4b0b      	ldr	r3, [pc, #44]	@ (800b89c <Device_Test+0xd8>)
 800b870:	799b      	ldrb	r3, [r3, #6]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <Device_Test+0xb6>
 800b876:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a8 <Device_Test+0xe4>)
 800b878:	e000      	b.n	800b87c <Device_Test+0xb8>
 800b87a:	4b0c      	ldr	r3, [pc, #48]	@ (800b8ac <Device_Test+0xe8>)
 800b87c:	4a0e      	ldr	r2, [pc, #56]	@ (800b8b8 <Device_Test+0xf4>)
 800b87e:	490d      	ldr	r1, [pc, #52]	@ (800b8b4 <Device_Test+0xf0>)
 800b880:	2002      	movs	r0, #2
 800b882:	f005 ffa7 	bl	80117d4 <CreateLine>
    Info("Test completed");
 800b886:	4a0d      	ldr	r2, [pc, #52]	@ (800b8bc <Device_Test+0xf8>)
 800b888:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b4 <Device_Test+0xf0>)
 800b88a:	0019      	movs	r1, r3
 800b88c:	2002      	movs	r0, #2
 800b88e:	f005 ffa1 	bl	80117d4 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800b892:	f7ff f92f 	bl	800aaf4 <SetTestDone>
  }
}
 800b896:	46c0      	nop			@ (mov r8, r8)
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000e04 	.word	0x20000e04
 800b8a0:	20000dfc 	.word	0x20000dfc
 800b8a4:	20000df4 	.word	0x20000df4
 800b8a8:	08029e74 	.word	0x08029e74
 800b8ac:	08029e7c 	.word	0x08029e7c
 800b8b0:	08029e84 	.word	0x08029e84
 800b8b4:	08029c90 	.word	0x08029c90
 800b8b8:	08029e98 	.word	0x08029e98
 800b8bc:	08029eac 	.word	0x08029eac

0800b8c0 <AllDevicesReady>:

bool AllDevicesReady() {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800b8c4:	4b35      	ldr	r3, [pc, #212]	@ (800b99c <AllDevicesReady+0xdc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f005 ff2d 	bl	8011728 <TimestampIsReached>
 800b8ce:	1e03      	subs	r3, r0, #0
 800b8d0:	d05f      	beq.n	800b992 <AllDevicesReady+0xd2>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800b8d2:	4b33      	ldr	r3, [pc, #204]	@ (800b9a0 <AllDevicesReady+0xe0>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d102      	bne.n	800b8e0 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800b8da:	4b32      	ldr	r3, [pc, #200]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	701a      	strb	r2, [r3, #0]
    }
    if (AHTstate == AHT_STATE_WAIT) {
 800b8e0:	4b31      	ldr	r3, [pc, #196]	@ (800b9a8 <AllDevicesReady+0xe8>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b05      	cmp	r3, #5
 800b8e6:	d102      	bne.n	800b8ee <AllDevicesReady+0x2e>
      Sensor.AHT_measurementEnabled = false;
 800b8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	711a      	strb	r2, [r3, #4]
    }
    if (BMPstate == BMP_STATE_WAIT) {
 800b8ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b9ac <AllDevicesReady+0xec>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d102      	bne.n	800b8fc <AllDevicesReady+0x3c>
      Sensor.BMP_measurementEnabled = false;
 800b8f6:	4b2b      	ldr	r3, [pc, #172]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	715a      	strb	r2, [r3, #5]
    }
    if (ENSstate == ENS_STATE_WAIT) {
 800b8fc:	4b2c      	ldr	r3, [pc, #176]	@ (800b9b0 <AllDevicesReady+0xf0>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b08      	cmp	r3, #8
 800b902:	d102      	bne.n	800b90a <AllDevicesReady+0x4a>
      Sensor.ENS_measurementEnabled = false;
 800b904:	4b27      	ldr	r3, [pc, #156]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b906:	2200      	movs	r2, #0
 800b908:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800b90a:	4b2a      	ldr	r3, [pc, #168]	@ (800b9b4 <AllDevicesReady+0xf4>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b07      	cmp	r3, #7
 800b910:	d006      	beq.n	800b920 <AllDevicesReady+0x60>
 800b912:	4b29      	ldr	r3, [pc, #164]	@ (800b9b8 <AllDevicesReady+0xf8>)
 800b914:	7a1b      	ldrb	r3, [r3, #8]
 800b916:	2201      	movs	r2, #1
 800b918:	4053      	eors	r3, r2
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <AllDevicesReady+0x66>
      Sensor.VOC_measurementEnabled = false;
 800b920:	4b20      	ldr	r3, [pc, #128]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b922:	2200      	movs	r2, #0
 800b924:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800b926:	4b25      	ldr	r3, [pc, #148]	@ (800b9bc <AllDevicesReady+0xfc>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d102      	bne.n	800b934 <AllDevicesReady+0x74>
      Sensor.PM_measurementEnabled = false;
 800b92e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b930:	2200      	movs	r2, #0
 800b932:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800b934:	4b22      	ldr	r3, [pc, #136]	@ (800b9c0 <AllDevicesReady+0x100>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d102      	bne.n	800b942 <AllDevicesReady+0x82>
      Sensor.MIC_measurementEnabled = false;
 800b93c:	4b19      	ldr	r3, [pc, #100]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b93e:	2200      	movs	r2, #0
 800b940:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800b942:	4b20      	ldr	r3, [pc, #128]	@ (800b9c4 <AllDevicesReady+0x104>)
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b09      	cmp	r3, #9
 800b948:	d123      	bne.n	800b992 <AllDevicesReady+0xd2>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800b94a:	4b16      	ldr	r3, [pc, #88]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2201      	movs	r2, #1
 800b950:	4053      	eors	r3, r2
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d016      	beq.n	800b986 <AllDevicesReady+0xc6>
 800b958:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	2201      	movs	r2, #1
 800b95e:	4053      	eors	r3, r2
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00f      	beq.n	800b986 <AllDevicesReady+0xc6>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800b966:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b968:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800b96a:	2201      	movs	r2, #1
 800b96c:	4053      	eors	r3, r2
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d008      	beq.n	800b986 <AllDevicesReady+0xc6>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800b974:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a4 <AllDevicesReady+0xe4>)
 800b976:	78db      	ldrb	r3, [r3, #3]
 800b978:	2201      	movs	r2, #1
 800b97a:	4053      	eors	r3, r2
 800b97c:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <AllDevicesReady+0xc6>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <AllDevicesReady+0xc8>
 800b986:	2300      	movs	r3, #0
 800b988:	1c1a      	adds	r2, r3, #0
 800b98a:	2301      	movs	r3, #1
 800b98c:	4013      	ands	r3, r2
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	e000      	b.n	800b994 <AllDevicesReady+0xd4>
    }
  }
  return false;
 800b992:	2300      	movs	r3, #0
}
 800b994:	0018      	movs	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	46c0      	nop			@ (mov r8, r8)
 800b99c:	20000df4 	.word	0x20000df4
 800b9a0:	20000e0f 	.word	0x20000e0f
 800b9a4:	20000dfc 	.word	0x20000dfc
 800b9a8:	20000e10 	.word	0x20000e10
 800b9ac:	20000e11 	.word	0x20000e11
 800b9b0:	20000e12 	.word	0x20000e12
 800b9b4:	20000e0e 	.word	0x20000e0e
 800b9b8:	20000e04 	.word	0x20000e04
 800b9bc:	2000009d 	.word	0x2000009d
 800b9c0:	20000de0 	.word	0x20000de0
 800b9c4:	20000de1 	.word	0x20000de1

0800b9c8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800b9d4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800b9da:	4b18      	ldr	r3, [pc, #96]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800b9dc:	789b      	ldrb	r3, [r3, #2]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800b9e2:	4b17      	ldr	r3, [pc, #92]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800b9e8:	4b14      	ldr	r3, [pc, #80]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800b9ea:	791b      	ldrb	r3, [r3, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800b9f0:	4b13      	ldr	r3, [pc, #76]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800b9f6:	4b11      	ldr	r3, [pc, #68]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800b9f8:	78db      	ldrb	r3, [r3, #3]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800b9fe:	4b10      	ldr	r3, [pc, #64]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800ba04:	4b0d      	ldr	r3, [pc, #52]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800ba06:	785b      	ldrb	r3, [r3, #1]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d006      	beq.n	800ba1a <EnabledConnectedDevices+0x52>
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800ba0e:	7a1b      	ldrb	r3, [r3, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800ba14:	4b0a      	ldr	r3, [pc, #40]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800ba1a:	4b08      	ldr	r3, [pc, #32]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800ba1c:	795b      	ldrb	r3, [r3, #5]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d002      	beq.n	800ba28 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800ba22:	4b07      	ldr	r3, [pc, #28]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800ba28:	4b04      	ldr	r3, [pc, #16]	@ (800ba3c <EnabledConnectedDevices+0x74>)
 800ba2a:	799b      	ldrb	r3, [r3, #6]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800ba30:	4b03      	ldr	r3, [pc, #12]	@ (800ba40 <EnabledConnectedDevices+0x78>)
 800ba32:	2201      	movs	r2, #1
 800ba34:	70da      	strb	r2, [r3, #3]
  }
}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	20000e04 	.word	0x20000e04
 800ba40:	20000dfc 	.word	0x20000dfc

0800ba44 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800ba48:	4a0e      	ldr	r2, [pc, #56]	@ (800ba84 <DisableConnectedDevices+0x40>)
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba88 <DisableConnectedDevices+0x44>)
 800ba4c:	0019      	movs	r1, r3
 800ba4e:	2003      	movs	r0, #3
 800ba50:	f005 fec0 	bl	80117d4 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800ba54:	4b0d      	ldr	r3, [pc, #52]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800ba5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800ba66:	4b09      	ldr	r3, [pc, #36]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800ba6c:	4b07      	ldr	r3, [pc, #28]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800ba72:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800ba78:	4b04      	ldr	r3, [pc, #16]	@ (800ba8c <DisableConnectedDevices+0x48>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	70da      	strb	r2, [r3, #3]
}
 800ba7e:	46c0      	nop			@ (mov r8, r8)
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	08029ebc 	.word	0x08029ebc
 800ba88:	08029ad4 	.word	0x08029ad4
 800ba8c:	20000dfc 	.word	0x20000dfc

0800ba90 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	0002      	movs	r2, r0
 800ba98:	1dfb      	adds	r3, r7, #7
 800ba9a:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800ba9c:	4b03      	ldr	r3, [pc, #12]	@ (800baac <setSensorLock+0x1c>)
 800ba9e:	1dfa      	adds	r2, r7, #7
 800baa0:	7812      	ldrb	r2, [r2, #0]
 800baa2:	701a      	strb	r2, [r3, #0]
}
 800baa4:	46c0      	nop			@ (mov r8, r8)
 800baa6:	46bd      	mov	sp, r7
 800baa8:	b002      	add	sp, #8
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20000e0d 	.word	0x20000e0d

0800bab0 <getSensorLock>:

uint8_t getSensorLock() {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800bab4:	4b02      	ldr	r3, [pc, #8]	@ (800bac0 <getSensorLock+0x10>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
}
 800bab8:	0018      	movs	r0, r3
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	46c0      	nop			@ (mov r8, r8)
 800bac0:	20000e0d 	.word	0x20000e0d

0800bac4 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800bac8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb34 <UpkeepI2Csensors+0x70>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800bad0:	f006 f9a4 	bl	8011e1c <HIDS_Upkeep>
 800bad4:	0003      	movs	r3, r0
 800bad6:	001a      	movs	r2, r3
 800bad8:	4b17      	ldr	r3, [pc, #92]	@ (800bb38 <UpkeepI2Csensors+0x74>)
 800bada:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800badc:	4b15      	ldr	r3, [pc, #84]	@ (800bb34 <UpkeepI2Csensors+0x70>)
 800bade:	785b      	ldrb	r3, [r3, #1]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d005      	beq.n	800baf0 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800bae4:	f003 fb28 	bl	800f138 <SGP_Upkeep>
 800bae8:	0003      	movs	r3, r0
 800baea:	001a      	movs	r2, r3
 800baec:	4b13      	ldr	r3, [pc, #76]	@ (800bb3c <UpkeepI2Csensors+0x78>)
 800baee:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800baf0:	4b10      	ldr	r3, [pc, #64]	@ (800bb34 <UpkeepI2Csensors+0x70>)
 800baf2:	791b      	ldrb	r3, [r3, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800baf8:	f7fd fbc0 	bl	800927c <AHT_Upkeep>
 800bafc:	0003      	movs	r3, r0
 800bafe:	001a      	movs	r2, r3
 800bb00:	4b0f      	ldr	r3, [pc, #60]	@ (800bb40 <UpkeepI2Csensors+0x7c>)
 800bb02:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800bb04:	4b0b      	ldr	r3, [pc, #44]	@ (800bb34 <UpkeepI2Csensors+0x70>)
 800bb06:	795b      	ldrb	r3, [r3, #5]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d005      	beq.n	800bb18 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800bb0c:	f7fe f92c 	bl	8009d68 <BMP_Upkeep>
 800bb10:	0003      	movs	r3, r0
 800bb12:	001a      	movs	r2, r3
 800bb14:	4b0b      	ldr	r3, [pc, #44]	@ (800bb44 <UpkeepI2Csensors+0x80>)
 800bb16:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800bb18:	4b06      	ldr	r3, [pc, #24]	@ (800bb34 <UpkeepI2Csensors+0x70>)
 800bb1a:	799b      	ldrb	r3, [r3, #6]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <UpkeepI2Csensors+0x68>
    BMPstate = ENS_Upkeep();
 800bb20:	f7f8 fa42 	bl	8003fa8 <ENS_Upkeep>
 800bb24:	0003      	movs	r3, r0
 800bb26:	001a      	movs	r2, r3
 800bb28:	4b06      	ldr	r3, [pc, #24]	@ (800bb44 <UpkeepI2Csensors+0x80>)
 800bb2a:	701a      	strb	r2, [r3, #0]
  }
}
 800bb2c:	46c0      	nop			@ (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	46c0      	nop			@ (mov r8, r8)
 800bb34:	20000dfc 	.word	0x20000dfc
 800bb38:	20000e0f 	.word	0x20000e0f
 800bb3c:	20000e0e 	.word	0x20000e0e
 800bb40:	20000e10 	.word	0x20000e10
 800bb44:	20000e11 	.word	0x20000e11

0800bb48 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800bb4c:	4b02      	ldr	r3, [pc, #8]	@ (800bb58 <ResetdBAmax+0x10>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
}
 800bb52:	46c0      	nop			@ (mov r8, r8)
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20000e58 	.word	0x20000e58

0800bb5c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800bb64:	f006 fa82 	bl	801206c <HAL_GetTick>
 800bb68:	0002      	movs	r2, r0
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	18d2      	adds	r2, r2, r3
 800bb6e:	4b03      	ldr	r3, [pc, #12]	@ (800bb7c <setMICTimeStamp+0x20>)
 800bb70:	601a      	str	r2, [r3, #0]
}
 800bb72:	46c0      	nop			@ (mov r8, r8)
 800bb74:	46bd      	mov	sp, r7
 800bb76:	b002      	add	sp, #8
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	46c0      	nop			@ (mov r8, r8)
 800bb7c:	20000e60 	.word	0x20000e60

0800bb80 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  counter = 0;
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <ResetDBACalculator+0x1c>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800bb8a:	4b05      	ldr	r3, [pc, #20]	@ (800bba0 <ResetDBACalculator+0x20>)
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800bb90:	4b04      	ldr	r3, [pc, #16]	@ (800bba4 <ResetDBACalculator+0x24>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
}
 800bb96:	46c0      	nop			@ (mov r8, r8)
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000e5c 	.word	0x20000e5c
 800bba0:	2000009c 	.word	0x2000009c
 800bba4:	20000e5d 	.word	0x20000e5d

0800bba8 <MIC_Print>:

void MIC_Print(void) {
 800bba8:	b5b0      	push	{r4, r5, r7, lr}
 800bbaa:	b08a      	sub	sp, #40	@ 0x28
 800bbac:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800bbae:	4b9f      	ldr	r3, [pc, #636]	@ (800be2c <MIC_Print+0x284>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b9f      	ldr	r3, [pc, #636]	@ (800be30 <MIC_Print+0x288>)
 800bbb4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800bbb6:	4b9f      	ldr	r3, [pc, #636]	@ (800be34 <MIC_Print+0x28c>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	001a      	movs	r2, r3
 800bbbc:	4b9c      	ldr	r3, [pc, #624]	@ (800be30 <MIC_Print+0x288>)
 800bbbe:	6819      	ldr	r1, [r3, #0]
 800bbc0:	4b9d      	ldr	r3, [pc, #628]	@ (800be38 <MIC_Print+0x290>)
 800bbc2:	0092      	lsls	r2, r2, #2
 800bbc4:	50d1      	str	r1, [r2, r3]
  counter++;
 800bbc6:	4b9b      	ldr	r3, [pc, #620]	@ (800be34 <MIC_Print+0x28c>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4b99      	ldr	r3, [pc, #612]	@ (800be34 <MIC_Print+0x28c>)
 800bbd0:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800bbd2:	4b98      	ldr	r3, [pc, #608]	@ (800be34 <MIC_Print+0x28c>)
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b09      	cmp	r3, #9
 800bbd8:	d80b      	bhi.n	800bbf2 <MIC_Print+0x4a>
 800bbda:	4b98      	ldr	r3, [pc, #608]	@ (800be3c <MIC_Print+0x294>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	4053      	eors	r3, r2
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d004      	beq.n	800bbf2 <MIC_Print+0x4a>
    denominator = counter;
 800bbe8:	4b92      	ldr	r3, [pc, #584]	@ (800be34 <MIC_Print+0x28c>)
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	4b94      	ldr	r3, [pc, #592]	@ (800be40 <MIC_Print+0x298>)
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	e005      	b.n	800bbfe <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800bbf2:	4b93      	ldr	r3, [pc, #588]	@ (800be40 <MIC_Print+0x298>)
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800bbf8:	4b90      	ldr	r3, [pc, #576]	@ (800be3c <MIC_Print+0x294>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800bbfe:	4b91      	ldr	r3, [pc, #580]	@ (800be44 <MIC_Print+0x29c>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800bc04:	230f      	movs	r3, #15
 800bc06:	18fb      	adds	r3, r7, r3
 800bc08:	2200      	movs	r2, #0
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e042      	b.n	800bc94 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800bc0e:	240f      	movs	r4, #15
 800bc10:	193b      	adds	r3, r7, r4
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	4b88      	ldr	r3, [pc, #544]	@ (800be38 <MIC_Print+0x290>)
 800bc16:	0092      	lsls	r2, r2, #2
 800bc18:	58d2      	ldr	r2, [r2, r3]
 800bc1a:	4b8a      	ldr	r3, [pc, #552]	@ (800be44 <MIC_Print+0x29c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	1c19      	adds	r1, r3, #0
 800bc20:	1c10      	adds	r0, r2, #0
 800bc22:	f7f4 fe4d 	bl	80008c0 <__aeabi_fadd>
 800bc26:	1c03      	adds	r3, r0, #0
 800bc28:	1c1a      	adds	r2, r3, #0
 800bc2a:	4b86      	ldr	r3, [pc, #536]	@ (800be44 <MIC_Print+0x29c>)
 800bc2c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800bc2e:	193b      	adds	r3, r7, r4
 800bc30:	781a      	ldrb	r2, [r3, #0]
 800bc32:	4b81      	ldr	r3, [pc, #516]	@ (800be38 <MIC_Print+0x290>)
 800bc34:	0092      	lsls	r2, r2, #2
 800bc36:	58d2      	ldr	r2, [r2, r3]
 800bc38:	4b83      	ldr	r3, [pc, #524]	@ (800be48 <MIC_Print+0x2a0>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	1c19      	adds	r1, r3, #0
 800bc3e:	1c10      	adds	r0, r2, #0
 800bc40:	f7f4 fc8a 	bl	8000558 <__aeabi_fcmpgt>
 800bc44:	1e03      	subs	r3, r0, #0
 800bc46:	d006      	beq.n	800bc56 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800bc48:	193b      	adds	r3, r7, r4
 800bc4a:	781a      	ldrb	r2, [r3, #0]
 800bc4c:	4b7a      	ldr	r3, [pc, #488]	@ (800be38 <MIC_Print+0x290>)
 800bc4e:	0092      	lsls	r2, r2, #2
 800bc50:	58d2      	ldr	r2, [r2, r3]
 800bc52:	4b7d      	ldr	r3, [pc, #500]	@ (800be48 <MIC_Print+0x2a0>)
 800bc54:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800bc56:	4b7b      	ldr	r3, [pc, #492]	@ (800be44 <MIC_Print+0x29c>)
 800bc58:	681c      	ldr	r4, [r3, #0]
 800bc5a:	4b79      	ldr	r3, [pc, #484]	@ (800be40 <MIC_Print+0x298>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f7f5 fd02 	bl	8001668 <__aeabi_ui2f>
 800bc64:	1c03      	adds	r3, r0, #0
 800bc66:	1c19      	adds	r1, r3, #0
 800bc68:	1c20      	adds	r0, r4, #0
 800bc6a:	f7f4 ffb3 	bl	8000bd4 <__aeabi_fdiv>
 800bc6e:	1c03      	adds	r3, r0, #0
 800bc70:	1c1a      	adds	r2, r3, #0
 800bc72:	4b76      	ldr	r3, [pc, #472]	@ (800be4c <MIC_Print+0x2a4>)
 800bc74:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800bc76:	4b6e      	ldr	r3, [pc, #440]	@ (800be30 <MIC_Print+0x288>)
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	4b73      	ldr	r3, [pc, #460]	@ (800be48 <MIC_Print+0x2a0>)
 800bc7c:	6819      	ldr	r1, [r3, #0]
 800bc7e:	4b73      	ldr	r3, [pc, #460]	@ (800be4c <MIC_Print+0x2a4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	1c1a      	adds	r2, r3, #0
 800bc84:	f7f8 fc9a 	bl	80045bc <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800bc88:	210f      	movs	r1, #15
 800bc8a:	187b      	adds	r3, r7, r1
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	187b      	adds	r3, r7, r1
 800bc90:	3201      	adds	r2, #1
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	4b6a      	ldr	r3, [pc, #424]	@ (800be40 <MIC_Print+0x298>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	220f      	movs	r2, #15
 800bc9a:	18ba      	adds	r2, r7, r2
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d3b5      	bcc.n	800bc0e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800bca2:	4b63      	ldr	r3, [pc, #396]	@ (800be30 <MIC_Print+0x288>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1c18      	adds	r0, r3, #0
 800bca8:	f7f7 fbdc 	bl	8003464 <__aeabi_f2d>
 800bcac:	6038      	str	r0, [r7, #0]
 800bcae:	6079      	str	r1, [r7, #4]
 800bcb0:	4b65      	ldr	r3, [pc, #404]	@ (800be48 <MIC_Print+0x2a0>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	1c18      	adds	r0, r3, #0
 800bcb6:	f7f7 fbd5 	bl	8003464 <__aeabi_f2d>
 800bcba:	0004      	movs	r4, r0
 800bcbc:	000d      	movs	r5, r1
 800bcbe:	4b63      	ldr	r3, [pc, #396]	@ (800be4c <MIC_Print+0x2a4>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	1c18      	adds	r0, r3, #0
 800bcc4:	f7f7 fbce 	bl	8003464 <__aeabi_f2d>
 800bcc8:	0002      	movs	r2, r0
 800bcca:	000b      	movs	r3, r1
 800bccc:	4960      	ldr	r1, [pc, #384]	@ (800be50 <MIC_Print+0x2a8>)
 800bcce:	9204      	str	r2, [sp, #16]
 800bcd0:	9305      	str	r3, [sp, #20]
 800bcd2:	9402      	str	r4, [sp, #8]
 800bcd4:	9503      	str	r5, [sp, #12]
 800bcd6:	4b5f      	ldr	r3, [pc, #380]	@ (800be54 <MIC_Print+0x2ac>)
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	0008      	movs	r0, r1
 800bce0:	f017 fd00 	bl	80236e4 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800bce4:	4b53      	ldr	r3, [pc, #332]	@ (800be34 <MIC_Print+0x28c>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b0a      	cmp	r3, #10
 800bcea:	d902      	bls.n	800bcf2 <MIC_Print+0x14a>
    counter = 0;
 800bcec:	4b51      	ldr	r3, [pc, #324]	@ (800be34 <MIC_Print+0x28c>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800bcf2:	4b4f      	ldr	r3, [pc, #316]	@ (800be30 <MIC_Print+0x288>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4958      	ldr	r1, [pc, #352]	@ (800be58 <MIC_Print+0x2b0>)
 800bcf8:	1c18      	adds	r0, r3, #0
 800bcfa:	f7f4 fc37 	bl	800056c <__aeabi_fcmpge>
 800bcfe:	1e03      	subs	r3, r0, #0
 800bd00:	d004      	beq.n	800bd0c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800bd02:	2201      	movs	r2, #1
 800bd04:	2101      	movs	r1, #1
 800bd06:	2001      	movs	r0, #1
 800bd08:	f004 fb30 	bl	801036c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800bd0c:	4b48      	ldr	r3, [pc, #288]	@ (800be30 <MIC_Print+0x288>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4952      	ldr	r1, [pc, #328]	@ (800be5c <MIC_Print+0x2b4>)
 800bd12:	1c18      	adds	r0, r3, #0
 800bd14:	f7f4 fc2a 	bl	800056c <__aeabi_fcmpge>
 800bd18:	1e03      	subs	r3, r0, #0
 800bd1a:	d00c      	beq.n	800bd36 <MIC_Print+0x18e>
 800bd1c:	4b44      	ldr	r3, [pc, #272]	@ (800be30 <MIC_Print+0x288>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	494d      	ldr	r1, [pc, #308]	@ (800be58 <MIC_Print+0x2b0>)
 800bd22:	1c18      	adds	r0, r3, #0
 800bd24:	f7f4 fc04 	bl	8000530 <__aeabi_fcmplt>
 800bd28:	1e03      	subs	r3, r0, #0
 800bd2a:	d004      	beq.n	800bd36 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2001      	movs	r0, #1
 800bd32:	f004 fb1b 	bl	801036c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800bd36:	4b3e      	ldr	r3, [pc, #248]	@ (800be30 <MIC_Print+0x288>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4949      	ldr	r1, [pc, #292]	@ (800be60 <MIC_Print+0x2b8>)
 800bd3c:	1c18      	adds	r0, r3, #0
 800bd3e:	f7f4 fc15 	bl	800056c <__aeabi_fcmpge>
 800bd42:	1e03      	subs	r3, r0, #0
 800bd44:	d00c      	beq.n	800bd60 <MIC_Print+0x1b8>
 800bd46:	4b3a      	ldr	r3, [pc, #232]	@ (800be30 <MIC_Print+0x288>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4944      	ldr	r1, [pc, #272]	@ (800be5c <MIC_Print+0x2b4>)
 800bd4c:	1c18      	adds	r0, r3, #0
 800bd4e:	f7f4 fbef 	bl	8000530 <__aeabi_fcmplt>
 800bd52:	1e03      	subs	r3, r0, #0
 800bd54:	d004      	beq.n	800bd60 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800bd56:	2200      	movs	r2, #0
 800bd58:	2101      	movs	r1, #1
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	f004 fb06 	bl	801036c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800bd60:	4b33      	ldr	r3, [pc, #204]	@ (800be30 <MIC_Print+0x288>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	493f      	ldr	r1, [pc, #252]	@ (800be64 <MIC_Print+0x2bc>)
 800bd66:	1c18      	adds	r0, r3, #0
 800bd68:	f7f4 fc00 	bl	800056c <__aeabi_fcmpge>
 800bd6c:	1e03      	subs	r3, r0, #0
 800bd6e:	d00c      	beq.n	800bd8a <MIC_Print+0x1e2>
 800bd70:	4b2f      	ldr	r3, [pc, #188]	@ (800be30 <MIC_Print+0x288>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	493a      	ldr	r1, [pc, #232]	@ (800be60 <MIC_Print+0x2b8>)
 800bd76:	1c18      	adds	r0, r3, #0
 800bd78:	f7f4 fbda 	bl	8000530 <__aeabi_fcmplt>
 800bd7c:	1e03      	subs	r3, r0, #0
 800bd7e:	d004      	beq.n	800bd8a <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800bd80:	2200      	movs	r2, #0
 800bd82:	2101      	movs	r1, #1
 800bd84:	2000      	movs	r0, #0
 800bd86:	f004 faf1 	bl	801036c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800bd8a:	4b29      	ldr	r3, [pc, #164]	@ (800be30 <MIC_Print+0x288>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4936      	ldr	r1, [pc, #216]	@ (800be68 <MIC_Print+0x2c0>)
 800bd90:	1c18      	adds	r0, r3, #0
 800bd92:	f7f4 fbeb 	bl	800056c <__aeabi_fcmpge>
 800bd96:	1e03      	subs	r3, r0, #0
 800bd98:	d00c      	beq.n	800bdb4 <MIC_Print+0x20c>
 800bd9a:	4b25      	ldr	r3, [pc, #148]	@ (800be30 <MIC_Print+0x288>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4931      	ldr	r1, [pc, #196]	@ (800be64 <MIC_Print+0x2bc>)
 800bda0:	1c18      	adds	r0, r3, #0
 800bda2:	f7f4 fbc5 	bl	8000530 <__aeabi_fcmplt>
 800bda6:	1e03      	subs	r3, r0, #0
 800bda8:	d004      	beq.n	800bdb4 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800bdaa:	2201      	movs	r2, #1
 800bdac:	2101      	movs	r1, #1
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f004 fadc 	bl	801036c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800bdb4:	4b1e      	ldr	r3, [pc, #120]	@ (800be30 <MIC_Print+0x288>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	492c      	ldr	r1, [pc, #176]	@ (800be6c <MIC_Print+0x2c4>)
 800bdba:	1c18      	adds	r0, r3, #0
 800bdbc:	f7f4 fbd6 	bl	800056c <__aeabi_fcmpge>
 800bdc0:	1e03      	subs	r3, r0, #0
 800bdc2:	d00c      	beq.n	800bdde <MIC_Print+0x236>
 800bdc4:	4b1a      	ldr	r3, [pc, #104]	@ (800be30 <MIC_Print+0x288>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4927      	ldr	r1, [pc, #156]	@ (800be68 <MIC_Print+0x2c0>)
 800bdca:	1c18      	adds	r0, r3, #0
 800bdcc:	f7f4 fbb0 	bl	8000530 <__aeabi_fcmplt>
 800bdd0:	1e03      	subs	r3, r0, #0
 800bdd2:	d004      	beq.n	800bdde <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f004 fac7 	bl	801036c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800bdde:	4b14      	ldr	r3, [pc, #80]	@ (800be30 <MIC_Print+0x288>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4923      	ldr	r1, [pc, #140]	@ (800be70 <MIC_Print+0x2c8>)
 800bde4:	1c18      	adds	r0, r3, #0
 800bde6:	f7f4 fbc1 	bl	800056c <__aeabi_fcmpge>
 800bdea:	1e03      	subs	r3, r0, #0
 800bdec:	d00c      	beq.n	800be08 <MIC_Print+0x260>
 800bdee:	4b10      	ldr	r3, [pc, #64]	@ (800be30 <MIC_Print+0x288>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	491e      	ldr	r1, [pc, #120]	@ (800be6c <MIC_Print+0x2c4>)
 800bdf4:	1c18      	adds	r0, r3, #0
 800bdf6:	f7f4 fb9b 	bl	8000530 <__aeabi_fcmplt>
 800bdfa:	1e03      	subs	r3, r0, #0
 800bdfc:	d004      	beq.n	800be08 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800bdfe:	2201      	movs	r2, #1
 800be00:	2100      	movs	r1, #0
 800be02:	2001      	movs	r0, #1
 800be04:	f004 fab2 	bl	801036c <SetDBLED>
  }
  if(dBA < 35){//off
 800be08:	4b09      	ldr	r3, [pc, #36]	@ (800be30 <MIC_Print+0x288>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4918      	ldr	r1, [pc, #96]	@ (800be70 <MIC_Print+0x2c8>)
 800be0e:	1c18      	adds	r0, r3, #0
 800be10:	f7f4 fb8e 	bl	8000530 <__aeabi_fcmplt>
 800be14:	1e03      	subs	r3, r0, #0
 800be16:	d100      	bne.n	800be1a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800be18:	e004      	b.n	800be24 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800be1a:	2200      	movs	r2, #0
 800be1c:	2100      	movs	r1, #0
 800be1e:	2000      	movs	r0, #0
 800be20:	f004 faa4 	bl	801036c <SetDBLED>
}
 800be24:	46c0      	nop			@ (mov r8, r8)
 800be26:	46bd      	mov	sp, r7
 800be28:	b004      	add	sp, #16
 800be2a:	bdb0      	pop	{r4, r5, r7, pc}
 800be2c:	20000e54 	.word	0x20000e54
 800be30:	20000e20 	.word	0x20000e20
 800be34:	20000e5c 	.word	0x20000e5c
 800be38:	20000e24 	.word	0x20000e24
 800be3c:	20000e5d 	.word	0x20000e5d
 800be40:	2000009c 	.word	0x2000009c
 800be44:	20000e50 	.word	0x20000e50
 800be48:	20000e58 	.word	0x20000e58
 800be4c:	20000e4c 	.word	0x20000e4c
 800be50:	08029ed0 	.word	0x08029ed0
 800be54:	20000e14 	.word	0x20000e14
 800be58:	42b40000 	.word	0x42b40000
 800be5c:	42a00000 	.word	0x42a00000
 800be60:	428c0000 	.word	0x428c0000
 800be64:	42700000 	.word	0x42700000
 800be68:	42480000 	.word	0x42480000
 800be6c:	42200000 	.word	0x42200000
 800be70:	420c0000 	.word	0x420c0000

0800be74 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800be7a:	4b11      	ldr	r3, [pc, #68]	@ (800bec0 <MIC_TestMeasurementDone+0x4c>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	4a10      	ldr	r2, [pc, #64]	@ (800bec4 <MIC_TestMeasurementDone+0x50>)
 800be82:	4911      	ldr	r1, [pc, #68]	@ (800bec8 <MIC_TestMeasurementDone+0x54>)
 800be84:	2002      	movs	r0, #2
 800be86:	f005 fca5 	bl	80117d4 <CreateLine>
  if(DataReady) {
 800be8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bec0 <MIC_TestMeasurementDone+0x4c>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d010      	beq.n	800beb6 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800be94:	1dfb      	adds	r3, r7, #7
 800be96:	4a0d      	ldr	r2, [pc, #52]	@ (800becc <MIC_TestMeasurementDone+0x58>)
 800be98:	7812      	ldrb	r2, [r2, #0]
 800be9a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800be9c:	4b0b      	ldr	r3, [pc, #44]	@ (800becc <MIC_TestMeasurementDone+0x58>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	4a0b      	ldr	r2, [pc, #44]	@ (800bed0 <MIC_TestMeasurementDone+0x5c>)
 800bea4:	4908      	ldr	r1, [pc, #32]	@ (800bec8 <MIC_TestMeasurementDone+0x54>)
 800bea6:	2002      	movs	r0, #2
 800bea8:	f005 fc94 	bl	80117d4 <CreateLine>
    ResetMICIndicator();
 800beac:	f004 fb4c 	bl	8010548 <ResetMICIndicator>
    return Check;
 800beb0:	1dfb      	adds	r3, r7, #7
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	e000      	b.n	800beb8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20000f91 	.word	0x20000f91
 800bec4:	08029f18 	.word	0x08029f18
 800bec8:	08029f44 	.word	0x08029f44
 800becc:	20000f92 	.word	0x20000f92
 800bed0:	08029f48 	.word	0x08029f48

0800bed4 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800beda:	4b78      	ldr	r3, [pc, #480]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d100      	bne.n	800bee4 <Mic_Upkeep+0x10>
 800bee2:	e0b8      	b.n	800c056 <Mic_Upkeep+0x182>
 800bee4:	dd00      	ble.n	800bee8 <Mic_Upkeep+0x14>
 800bee6:	e0d3      	b.n	800c090 <Mic_Upkeep+0x1bc>
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d037      	beq.n	800bf5c <Mic_Upkeep+0x88>
 800beec:	dd00      	ble.n	800bef0 <Mic_Upkeep+0x1c>
 800beee:	e0cf      	b.n	800c090 <Mic_Upkeep+0x1bc>
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <Mic_Upkeep+0x26>
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d014      	beq.n	800bf22 <Mic_Upkeep+0x4e>
 800bef8:	e0ca      	b.n	800c090 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800befa:	2001      	movs	r0, #1
 800befc:	f003 fb34 	bl	800f568 <enableMicrophone>
 800bf00:	0003      	movs	r3, r0
 800bf02:	001a      	movs	r2, r3
 800bf04:	2301      	movs	r3, #1
 800bf06:	4053      	eors	r3, r2
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800bf0e:	4a6c      	ldr	r2, [pc, #432]	@ (800c0c0 <Mic_Upkeep+0x1ec>)
 800bf10:	4b6c      	ldr	r3, [pc, #432]	@ (800c0c4 <Mic_Upkeep+0x1f0>)
 800bf12:	217f      	movs	r1, #127	@ 0x7f
 800bf14:	0018      	movs	r0, r3
 800bf16:	f005 fd15 	bl	8011944 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800bf1a:	4b68      	ldr	r3, [pc, #416]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
    break;
 800bf20:	e0c5      	b.n	800c0ae <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800bf22:	f003 fafd 	bl	800f520 <micSettlingComplete>
 800bf26:	1e03      	subs	r3, r0, #0
 800bf28:	d105      	bne.n	800bf36 <Mic_Upkeep+0x62>
 800bf2a:	4b67      	ldr	r3, [pc, #412]	@ (800c0c8 <Mic_Upkeep+0x1f4>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d100      	bne.n	800bf36 <Mic_Upkeep+0x62>
 800bf34:	e0b6      	b.n	800c0a4 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800bf36:	f003 fb81 	bl	800f63c <startSPLcalculation>
 800bf3a:	0003      	movs	r3, r0
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4053      	eors	r3, r2
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d005      	beq.n	800bf54 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800bf48:	4a5d      	ldr	r2, [pc, #372]	@ (800c0c0 <Mic_Upkeep+0x1ec>)
 800bf4a:	4b5e      	ldr	r3, [pc, #376]	@ (800c0c4 <Mic_Upkeep+0x1f0>)
 800bf4c:	2188      	movs	r1, #136	@ 0x88
 800bf4e:	0018      	movs	r0, r3
 800bf50:	f005 fcf8 	bl	8011944 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800bf54:	4b59      	ldr	r3, [pc, #356]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800bf56:	2202      	movs	r2, #2
 800bf58:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bf5a:	e0a3      	b.n	800c0a4 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800bf5c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0cc <Mic_Upkeep+0x1f8>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	2101      	movs	r1, #1
 800bf62:	0018      	movs	r0, r3
 800bf64:	f003 f9be 	bl	800f2e4 <getSoundData>
 800bf68:	1e03      	subs	r3, r0, #0
 800bf6a:	d100      	bne.n	800bf6e <Mic_Upkeep+0x9a>
 800bf6c:	e09c      	b.n	800c0a8 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800bf6e:	f003 fab7 	bl	800f4e0 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800bf72:	4b56      	ldr	r3, [pc, #344]	@ (800c0cc <Mic_Upkeep+0x1f8>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	001a      	movs	r2, r3
 800bf78:	4b54      	ldr	r3, [pc, #336]	@ (800c0cc <Mic_Upkeep+0x1f8>)
 800bf7a:	785b      	ldrb	r3, [r3, #1]
 800bf7c:	4954      	ldr	r1, [pc, #336]	@ (800c0d0 <Mic_Upkeep+0x1fc>)
 800bf7e:	0038      	movs	r0, r7
 800bf80:	f017 fc20 	bl	80237c4 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800bf84:	4b51      	ldr	r3, [pc, #324]	@ (800c0cc <Mic_Upkeep+0x1f8>)
 800bf86:	89db      	ldrh	r3, [r3, #14]
 800bf88:	001a      	movs	r2, r3
 800bf8a:	4b50      	ldr	r3, [pc, #320]	@ (800c0cc <Mic_Upkeep+0x1f8>)
 800bf8c:	7c1b      	ldrb	r3, [r3, #16]
 800bf8e:	4951      	ldr	r1, [pc, #324]	@ (800c0d4 <Mic_Upkeep+0x200>)
 800bf90:	4851      	ldr	r0, [pc, #324]	@ (800c0d8 <Mic_Upkeep+0x204>)
 800bf92:	f017 fc17 	bl	80237c4 <siprintf>
      dBValue = atof(dBbuffer);
 800bf96:	003b      	movs	r3, r7
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f015 ffc3 	bl	8021f24 <atof>
 800bf9e:	0002      	movs	r2, r0
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	0010      	movs	r0, r2
 800bfa4:	0019      	movs	r1, r3
 800bfa6:	f7f7 faa5 	bl	80034f4 <__aeabi_d2f>
 800bfaa:	1c02      	adds	r2, r0, #0
 800bfac:	4b4b      	ldr	r3, [pc, #300]	@ (800c0dc <Mic_Upkeep+0x208>)
 800bfae:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800bfb0:	4b4a      	ldr	r3, [pc, #296]	@ (800c0dc <Mic_Upkeep+0x208>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	494a      	ldr	r1, [pc, #296]	@ (800c0e0 <Mic_Upkeep+0x20c>)
 800bfb6:	1c18      	adds	r0, r3, #0
 800bfb8:	f7f4 fff2 	bl	8000fa0 <__aeabi_fmul>
 800bfbc:	1c03      	adds	r3, r0, #0
 800bfbe:	1c18      	adds	r0, r3, #0
 800bfc0:	f7f7 fa50 	bl	8003464 <__aeabi_f2d>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4b47      	ldr	r3, [pc, #284]	@ (800c0e4 <Mic_Upkeep+0x210>)
 800bfc8:	f7f5 fb90 	bl	80016ec <__aeabi_dadd>
 800bfcc:	0002      	movs	r2, r0
 800bfce:	000b      	movs	r3, r1
 800bfd0:	0010      	movs	r0, r2
 800bfd2:	0019      	movs	r1, r3
 800bfd4:	f7f7 f9b8 	bl	8003348 <__aeabi_d2iz>
 800bfd8:	0003      	movs	r3, r0
 800bfda:	0018      	movs	r0, r3
 800bfdc:	f7f7 f9f0 	bl	80033c0 <__aeabi_i2d>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4b41      	ldr	r3, [pc, #260]	@ (800c0e8 <Mic_Upkeep+0x214>)
 800bfe4:	f7f5 fee6 	bl	8001db4 <__aeabi_ddiv>
 800bfe8:	0002      	movs	r2, r0
 800bfea:	000b      	movs	r3, r1
 800bfec:	0010      	movs	r0, r2
 800bfee:	0019      	movs	r1, r3
 800bff0:	f7f7 fa80 	bl	80034f4 <__aeabi_d2f>
 800bff4:	1c02      	adds	r2, r0, #0
 800bff6:	4b39      	ldr	r3, [pc, #228]	@ (800c0dc <Mic_Upkeep+0x208>)
 800bff8:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800bffa:	f7ff fdd5 	bl	800bba8 <MIC_Print>
      if (!startSPLcalculation()) {
 800bffe:	f003 fb1d 	bl	800f63c <startSPLcalculation>
 800c002:	0003      	movs	r3, r0
 800c004:	001a      	movs	r2, r3
 800c006:	2301      	movs	r3, #1
 800c008:	4053      	eors	r3, r2
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800c010:	4a2b      	ldr	r2, [pc, #172]	@ (800c0c0 <Mic_Upkeep+0x1ec>)
 800c012:	4b2c      	ldr	r3, [pc, #176]	@ (800c0c4 <Mic_Upkeep+0x1f0>)
 800c014:	2198      	movs	r1, #152	@ 0x98
 800c016:	0018      	movs	r0, r3
 800c018:	f005 fc94 	bl	8011944 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800c01c:	2000      	movs	r0, #0
 800c01e:	f003 faa3 	bl	800f568 <enableMicrophone>
 800c022:	0003      	movs	r3, r0
 800c024:	001a      	movs	r2, r3
 800c026:	2301      	movs	r3, #1
 800c028:	4053      	eors	r3, r2
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800c030:	4a23      	ldr	r2, [pc, #140]	@ (800c0c0 <Mic_Upkeep+0x1ec>)
 800c032:	4b24      	ldr	r3, [pc, #144]	@ (800c0c4 <Mic_Upkeep+0x1f0>)
 800c034:	219b      	movs	r1, #155	@ 0x9b
 800c036:	0018      	movs	r0, r3
 800c038:	f005 fc84 	bl	8011944 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800c03c:	f006 f816 	bl	801206c <HAL_GetTick>
 800c040:	0003      	movs	r3, r0
 800c042:	4a2a      	ldr	r2, [pc, #168]	@ (800c0ec <Mic_Upkeep+0x218>)
 800c044:	189a      	adds	r2, r3, r2
 800c046:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f0 <Mic_Upkeep+0x21c>)
 800c048:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800c04a:	4b1c      	ldr	r3, [pc, #112]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800c04c:	2203      	movs	r2, #3
 800c04e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800c050:	f004 fa7a 	bl	8010548 <ResetMICIndicator>
    }
    break;
 800c054:	e028      	b.n	800c0a8 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800c056:	4b26      	ldr	r3, [pc, #152]	@ (800c0f0 <Mic_Upkeep+0x21c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	0018      	movs	r0, r3
 800c05c:	f005 fb64 	bl	8011728 <TimestampIsReached>
 800c060:	1e03      	subs	r3, r0, #0
 800c062:	d023      	beq.n	800c0ac <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800c064:	2001      	movs	r0, #1
 800c066:	f003 fa7f 	bl	800f568 <enableMicrophone>
 800c06a:	0003      	movs	r3, r0
 800c06c:	001a      	movs	r2, r3
 800c06e:	2301      	movs	r3, #1
 800c070:	4053      	eors	r3, r2
 800c072:	b2db      	uxtb	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800c078:	4a11      	ldr	r2, [pc, #68]	@ (800c0c0 <Mic_Upkeep+0x1ec>)
 800c07a:	4b12      	ldr	r3, [pc, #72]	@ (800c0c4 <Mic_Upkeep+0x1f0>)
 800c07c:	21a6      	movs	r1, #166	@ 0xa6
 800c07e:	0018      	movs	r0, r3
 800c080:	f005 fc60 	bl	8011944 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800c084:	4b0d      	ldr	r3, [pc, #52]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800c086:	2201      	movs	r2, #1
 800c088:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800c08a:	f004 fa1b 	bl	80104c4 <SetMICIndicator>
    }
    break;
 800c08e:	e00d      	b.n	800c0ac <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800c090:	4a18      	ldr	r2, [pc, #96]	@ (800c0f4 <Mic_Upkeep+0x220>)
 800c092:	4b19      	ldr	r3, [pc, #100]	@ (800c0f8 <Mic_Upkeep+0x224>)
 800c094:	0019      	movs	r1, r3
 800c096:	2003      	movs	r0, #3
 800c098:	f005 fb9c 	bl	80117d4 <CreateLine>
    MicState = MIC_STATE_INIT;
 800c09c:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	701a      	strb	r2, [r3, #0]
    break;
 800c0a2:	e004      	b.n	800c0ae <Mic_Upkeep+0x1da>
    break;
 800c0a4:	46c0      	nop			@ (mov r8, r8)
 800c0a6:	e002      	b.n	800c0ae <Mic_Upkeep+0x1da>
    break;
 800c0a8:	46c0      	nop			@ (mov r8, r8)
 800c0aa:	e000      	b.n	800c0ae <Mic_Upkeep+0x1da>
    break;
 800c0ac:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800c0ae:	4b03      	ldr	r3, [pc, #12]	@ (800c0bc <Mic_Upkeep+0x1e8>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
}
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	b002      	add	sp, #8
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	46c0      	nop			@ (mov r8, r8)
 800c0bc:	20000e76 	.word	0x20000e76
 800c0c0:	08029f60 	.word	0x08029f60
 800c0c4:	0802b06c 	.word	0x0802b06c
 800c0c8:	20000f91 	.word	0x20000f91
 800c0cc:	20000e64 	.word	0x20000e64
 800c0d0:	08029f7c 	.word	0x08029f7c
 800c0d4:	08029f84 	.word	0x08029f84
 800c0d8:	20000e14 	.word	0x20000e14
 800c0dc:	20000e54 	.word	0x20000e54
 800c0e0:	42c80000 	.word	0x42c80000
 800c0e4:	3fe00000 	.word	0x3fe00000
 800c0e8:	40590000 	.word	0x40590000
 800c0ec:	000002f3 	.word	0x000002f3
 800c0f0:	20000e60 	.word	0x20000e60
 800c0f4:	08029f8c 	.word	0x08029f8c
 800c0f8:	08029fac 	.word	0x08029fac

0800c0fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c102:	1d3b      	adds	r3, r7, #4
 800c104:	0018      	movs	r0, r3
 800c106:	2314      	movs	r3, #20
 800c108:	001a      	movs	r2, r3
 800c10a:	2100      	movs	r1, #0
 800c10c:	f017 fcc0 	bl	8023a90 <memset>
  RTC_DateTypeDef sDate = {0};
 800c110:	003b      	movs	r3, r7
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c116:	4b2e      	ldr	r3, [pc, #184]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c118:	4a2e      	ldr	r2, [pc, #184]	@ (800c1d4 <MX_RTC_Init+0xd8>)
 800c11a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c11c:	4b2c      	ldr	r3, [pc, #176]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c11e:	2200      	movs	r2, #0
 800c120:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c122:	4b2b      	ldr	r3, [pc, #172]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c124:	227f      	movs	r2, #127	@ 0x7f
 800c126:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c128:	4b29      	ldr	r3, [pc, #164]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c12a:	22ff      	movs	r2, #255	@ 0xff
 800c12c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c12e:	4b28      	ldr	r3, [pc, #160]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c130:	2200      	movs	r2, #0
 800c132:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c134:	4b26      	ldr	r3, [pc, #152]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c136:	2200      	movs	r2, #0
 800c138:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c13a:	4b25      	ldr	r3, [pc, #148]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c140:	4b23      	ldr	r3, [pc, #140]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c142:	2200      	movs	r2, #0
 800c144:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c146:	4b22      	ldr	r3, [pc, #136]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c148:	0018      	movs	r0, r3
 800c14a:	f00d faab 	bl	80196a4 <HAL_RTC_Init>
 800c14e:	1e03      	subs	r3, r0, #0
 800c150:	d001      	beq.n	800c156 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800c152:	f7ff f881 	bl	800b258 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800c156:	1d3b      	adds	r3, r7, #4
 800c158:	220d      	movs	r2, #13
 800c15a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800c15c:	1d3b      	adds	r3, r7, #4
 800c15e:	2200      	movs	r2, #0
 800c160:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800c162:	1d3b      	adds	r3, r7, #4
 800c164:	2200      	movs	r2, #0
 800c166:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c168:	1d3b      	adds	r3, r7, #4
 800c16a:	2200      	movs	r2, #0
 800c16c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c16e:	1d3b      	adds	r3, r7, #4
 800c170:	2200      	movs	r2, #0
 800c172:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c174:	1d39      	adds	r1, r7, #4
 800c176:	4b16      	ldr	r3, [pc, #88]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c178:	2200      	movs	r2, #0
 800c17a:	0018      	movs	r0, r3
 800c17c:	f00d fb2e 	bl	80197dc <HAL_RTC_SetTime>
 800c180:	1e03      	subs	r3, r0, #0
 800c182:	d001      	beq.n	800c188 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800c184:	f7ff f868 	bl	800b258 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800c188:	003b      	movs	r3, r7
 800c18a:	2206      	movs	r2, #6
 800c18c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800c18e:	003b      	movs	r3, r7
 800c190:	2211      	movs	r2, #17
 800c192:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800c194:	003b      	movs	r3, r7
 800c196:	2217      	movs	r2, #23
 800c198:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800c19a:	003b      	movs	r3, r7
 800c19c:	2218      	movs	r2, #24
 800c19e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c1a0:	0039      	movs	r1, r7
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	0018      	movs	r0, r3
 800c1a8:	f00d fc20 	bl	80199ec <HAL_RTC_SetDate>
 800c1ac:	1e03      	subs	r3, r0, #0
 800c1ae:	d001      	beq.n	800c1b4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800c1b0:	f7ff f852 	bl	800b258 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800c1b4:	4b06      	ldr	r3, [pc, #24]	@ (800c1d0 <MX_RTC_Init+0xd4>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	0018      	movs	r0, r3
 800c1bc:	f00d fdd0 	bl	8019d60 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c1c0:	1e03      	subs	r3, r0, #0
 800c1c2:	d001      	beq.n	800c1c8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800c1c4:	f7ff f848 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c1c8:	46c0      	nop			@ (mov r8, r8)
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	b006      	add	sp, #24
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20000e78 	.word	0x20000e78
 800c1d4:	40002800 	.word	0x40002800

0800c1d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c210 <HAL_RTC_MspInit+0x38>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d10e      	bne.n	800c208 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c214 <HAL_RTC_MspInit+0x3c>)
 800c1ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1ee:	4b09      	ldr	r3, [pc, #36]	@ (800c214 <HAL_RTC_MspInit+0x3c>)
 800c1f0:	2180      	movs	r1, #128	@ 0x80
 800c1f2:	02c9      	lsls	r1, r1, #11
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	2002      	movs	r0, #2
 800c1fe:	f006 fbd9 	bl	80129b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800c202:	2002      	movs	r0, #2
 800c204:	f006 fbeb 	bl	80129de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800c208:	46c0      	nop			@ (mov r8, r8)
 800c20a:	46bd      	mov	sp, r7
 800c20c:	b002      	add	sp, #8
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	40002800 	.word	0x40002800
 800c214:	40021000 	.word	0x40021000

0800c218 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800c218:	b580      	push	{r7, lr}
 800c21a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800c21c:	4b02      	ldr	r3, [pc, #8]	@ (800c228 <sen5x_Get_sen5x_enable_state+0x10>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
}
 800c220:	0018      	movs	r0, r3
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	20000e9f 	.word	0x20000e9f

0800c22c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	0002      	movs	r2, r0
 800c234:	1dfb      	adds	r3, r7, #7
 800c236:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800c238:	4b03      	ldr	r3, [pc, #12]	@ (800c248 <sen5x_Set_sen5x_state+0x1c>)
 800c23a:	1dfa      	adds	r2, r7, #7
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	701a      	strb	r2, [r3, #0]
}
 800c240:	46c0      	nop			@ (mov r8, r8)
 800c242:	46bd      	mov	sp, r7
 800c244:	b002      	add	sp, #8
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000e9f 	.word	0x20000e9f

0800c24c <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800c254:	f005 ff0a 	bl	801206c <HAL_GetTick>
 800c258:	0002      	movs	r2, r0
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	18d2      	adds	r2, r2, r3
 800c25e:	4b03      	ldr	r3, [pc, #12]	@ (800c26c <setsen5xReadTimer+0x20>)
 800c260:	601a      	str	r2, [r3, #0]
}
 800c262:	46c0      	nop			@ (mov r8, r8)
 800c264:	46bd      	mov	sp, r7
 800c266:	b002      	add	sp, #8
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	46c0      	nop			@ (mov r8, r8)
 800c26c:	20000eac 	.word	0x20000eac

0800c270 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	0002      	movs	r2, r0
 800c278:	1dfb      	adds	r3, r7, #7
 800c27a:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800c27c:	4b03      	ldr	r3, [pc, #12]	@ (800c28c <setsen5xSamplecounter+0x1c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
}
 800c282:	46c0      	nop			@ (mov r8, r8)
 800c284:	46bd      	mov	sp, r7
 800c286:	b002      	add	sp, #8
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	46c0      	nop			@ (mov r8, r8)
 800c28c:	20000ea8 	.word	0x20000ea8

0800c290 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800c298:	f7ff f882 	bl	800b3a0 <IsPMSensorEnabled>
 800c29c:	1e03      	subs	r3, r0, #0
 800c29e:	d035      	beq.n	800c30c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800c2a0:	f003 ff8e 	bl	80101c0 <batteryChargeCheck>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d103      	bne.n	800c2b2 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800c2aa:	4b20      	ldr	r3, [pc, #128]	@ (800c32c <sen5x_enable+0x9c>)
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	701a      	strb	r2, [r3, #0]
 800c2b0:	e00d      	b.n	800c2ce <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800c2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c32c <sen5x_enable+0x9c>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	1e5a      	subs	r2, r3, #1
 800c2b8:	4193      	sbcs	r3, r2
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2201      	movs	r2, #1
 800c2be:	4053      	eors	r3, r2
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	1c1a      	adds	r2, r3, #0
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	4b18      	ldr	r3, [pc, #96]	@ (800c32c <sen5x_enable+0x9c>)
 800c2cc:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800c2ce:	4b17      	ldr	r3, [pc, #92]	@ (800c32c <sen5x_enable+0x9c>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7ff ffb8 	bl	800c24c <setsen5xReadTimer>
 800c2dc:	e009      	b.n	800c2f2 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800c2de:	f005 fec5 	bl	801206c <HAL_GetTick>
 800c2e2:	0002      	movs	r2, r0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2164      	movs	r1, #100	@ 0x64
 800c2e8:	434b      	muls	r3, r1
 800c2ea:	18d3      	adds	r3, r2, r3
 800c2ec:	0018      	movs	r0, r3
 800c2ee:	f7ff ffad 	bl	800c24c <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800c2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c32c <sen5x_enable+0x9c>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <sen5x_enable+0x6e>
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c330 <sen5x_enable+0xa0>)
 800c2fc:	e000      	b.n	800c300 <sen5x_enable+0x70>
 800c2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c334 <sen5x_enable+0xa4>)
 800c300:	4a0d      	ldr	r2, [pc, #52]	@ (800c338 <sen5x_enable+0xa8>)
 800c302:	490e      	ldr	r1, [pc, #56]	@ (800c33c <sen5x_enable+0xac>)
 800c304:	2002      	movs	r0, #2
 800c306:	f005 fa65 	bl	80117d4 <CreateLine>
 800c30a:	e005      	b.n	800c318 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800c30c:	4a0c      	ldr	r2, [pc, #48]	@ (800c340 <sen5x_enable+0xb0>)
 800c30e:	4b0b      	ldr	r3, [pc, #44]	@ (800c33c <sen5x_enable+0xac>)
 800c310:	0019      	movs	r1, r3
 800c312:	2002      	movs	r0, #2
 800c314:	f005 fa5e 	bl	80117d4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800c318:	4b0a      	ldr	r3, [pc, #40]	@ (800c344 <sen5x_enable+0xb4>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800c31e:	4b03      	ldr	r3, [pc, #12]	@ (800c32c <sen5x_enable+0x9c>)
 800c320:	781b      	ldrb	r3, [r3, #0]
}
 800c322:	0018      	movs	r0, r3
 800c324:	46bd      	mov	sp, r7
 800c326:	b002      	add	sp, #8
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	46c0      	nop			@ (mov r8, r8)
 800c32c:	20000e9f 	.word	0x20000e9f
 800c330:	08029fb0 	.word	0x08029fb0
 800c334:	08029fb8 	.word	0x08029fb8
 800c338:	08029fc4 	.word	0x08029fc4
 800c33c:	08029fe0 	.word	0x08029fe0
 800c340:	08029fe4 	.word	0x08029fe4
 800c344:	2000009d 	.word	0x2000009d

0800c348 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800c34c:	2380      	movs	r3, #128	@ 0x80
 800c34e:	015b      	lsls	r3, r3, #5
 800c350:	480f      	ldr	r0, [pc, #60]	@ (800c390 <sen5x_Power_On+0x48>)
 800c352:	2201      	movs	r2, #1
 800c354:	0019      	movs	r1, r3
 800c356:	f007 f91a 	bl	801358e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800c35a:	4a0e      	ldr	r2, [pc, #56]	@ (800c394 <sen5x_Power_On+0x4c>)
 800c35c:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <sen5x_Power_On+0x50>)
 800c35e:	0019      	movs	r1, r3
 800c360:	2003      	movs	r0, #3
 800c362:	f005 fa37 	bl	80117d4 <CreateLine>
  HAL_Delay(150);
 800c366:	2096      	movs	r0, #150	@ 0x96
 800c368:	f005 fe8a 	bl	8012080 <HAL_Delay>
  if (sen5x_device_reset()) {
 800c36c:	f001 f98c 	bl	800d688 <sen5x_device_reset>
 800c370:	1e03      	subs	r3, r0, #0
 800c372:	d006      	beq.n	800c382 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800c374:	4a09      	ldr	r2, [pc, #36]	@ (800c39c <sen5x_Power_On+0x54>)
 800c376:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a0 <sen5x_Power_On+0x58>)
 800c378:	0019      	movs	r1, r3
 800c37a:	2001      	movs	r0, #1
 800c37c:	f005 fa2a 	bl	80117d4 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800c380:	e002      	b.n	800c388 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800c382:	4b08      	ldr	r3, [pc, #32]	@ (800c3a4 <sen5x_Power_On+0x5c>)
 800c384:	2201      	movs	r2, #1
 800c386:	701a      	strb	r2, [r3, #0]
}
 800c388:	46c0      	nop			@ (mov r8, r8)
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	46c0      	nop			@ (mov r8, r8)
 800c390:	50000800 	.word	0x50000800
 800c394:	0802a004 	.word	0x0802a004
 800c398:	0802a020 	.word	0x0802a020
 800c39c:	0802a024 	.word	0x0802a024
 800c3a0:	0802a04c 	.word	0x0802a04c
 800c3a4:	20000e9d 	.word	0x20000e9d

0800c3a8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e8 <sen5x_Power_Off+0x40>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800c3b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c3ec <sen5x_Power_Off+0x44>)
 800c3b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f0 <sen5x_Power_Off+0x48>)
 800c3b8:	0019      	movs	r1, r3
 800c3ba:	2003      	movs	r0, #3
 800c3bc:	f005 fa0a 	bl	80117d4 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800c3c0:	e00f      	b.n	800c3e2 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800c3c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c3f4 <sen5x_Power_Off+0x4c>)
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <sen5x_Power_Off+0x48>)
 800c3c6:	0019      	movs	r1, r3
 800c3c8:	2003      	movs	r0, #3
 800c3ca:	f005 fa03 	bl	80117d4 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c3ce:	2380      	movs	r3, #128	@ 0x80
 800c3d0:	015b      	lsls	r3, r3, #5
 800c3d2:	4809      	ldr	r0, [pc, #36]	@ (800c3f8 <sen5x_Power_Off+0x50>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	0019      	movs	r1, r3
 800c3d8:	f007 f8d9 	bl	801358e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800c3dc:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <sen5x_Power_Off+0x54>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
}
 800c3e2:	46c0      	nop			@ (mov r8, r8)
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20000e9e 	.word	0x20000e9e
 800c3ec:	0802a050 	.word	0x0802a050
 800c3f0:	0802a020 	.word	0x0802a020
 800c3f4:	0802a080 	.word	0x0802a080
 800c3f8:	50000800 	.word	0x50000800
 800c3fc:	20000e9d 	.word	0x20000e9d

0800c400 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800c400:	b580      	push	{r7, lr}
 800c402:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800c404:	4b02      	ldr	r3, [pc, #8]	@ (800c410 <reset_fanCleaningDone+0x10>)
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
}
 800c40a:	46c0      	nop			@ (mov r8, r8)
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	20000e9c 	.word	0x20000e9c

0800c414 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c416:	b093      	sub	sp, #76	@ 0x4c
 800c418:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800c41a:	2436      	movs	r4, #54	@ 0x36
 800c41c:	193b      	adds	r3, r7, r4
 800c41e:	2200      	movs	r2, #0
 800c420:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800c422:	2335      	movs	r3, #53	@ 0x35
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	2220      	movs	r2, #32
 800c428:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800c42a:	2334      	movs	r3, #52	@ 0x34
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	2220      	movs	r2, #32
 800c430:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800c432:	f7ff ff89 	bl	800c348 <sen5x_Power_On>
  error = sen5x_device_reset();
 800c436:	0025      	movs	r5, r4
 800c438:	193c      	adds	r4, r7, r4
 800c43a:	f001 f925 	bl	800d688 <sen5x_device_reset>
 800c43e:	0003      	movs	r3, r0
 800c440:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c442:	002c      	movs	r4, r5
 800c444:	193b      	adds	r3, r7, r4
 800c446:	2200      	movs	r2, #0
 800c448:	5e9b      	ldrsh	r3, [r3, r2]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800c44e:	193b      	adds	r3, r7, r4
 800c450:	2200      	movs	r2, #0
 800c452:	5e9b      	ldrsh	r3, [r3, r2]
 800c454:	4a75      	ldr	r2, [pc, #468]	@ (800c62c <probe_sen5x+0x218>)
 800c456:	4976      	ldr	r1, [pc, #472]	@ (800c630 <probe_sen5x+0x21c>)
 800c458:	2001      	movs	r0, #1
 800c45a:	f005 f9bb 	bl	80117d4 <CreateLine>
      return error;
 800c45e:	193b      	adds	r3, r7, r4
 800c460:	2200      	movs	r2, #0
 800c462:	5e9b      	ldrsh	r3, [r3, r2]
 800c464:	e0de      	b.n	800c624 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800c466:	2536      	movs	r5, #54	@ 0x36
 800c468:	197c      	adds	r4, r7, r5
 800c46a:	2335      	movs	r3, #53	@ 0x35
 800c46c:	18fb      	adds	r3, r7, r3
 800c46e:	781a      	ldrb	r2, [r3, #0]
 800c470:	230c      	movs	r3, #12
 800c472:	18fb      	adds	r3, r7, r3
 800c474:	0011      	movs	r1, r2
 800c476:	0018      	movs	r0, r3
 800c478:	f000 fff2 	bl	800d460 <sen5x_get_serial_number>
 800c47c:	0003      	movs	r3, r0
 800c47e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c480:	197b      	adds	r3, r7, r5
 800c482:	2200      	movs	r2, #0
 800c484:	5e9b      	ldrsh	r3, [r3, r2]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00b      	beq.n	800c4a2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800c48a:	197b      	adds	r3, r7, r5
 800c48c:	2200      	movs	r2, #0
 800c48e:	5e9a      	ldrsh	r2, [r3, r2]
 800c490:	4b68      	ldr	r3, [pc, #416]	@ (800c634 <probe_sen5x+0x220>)
 800c492:	0011      	movs	r1, r2
 800c494:	0018      	movs	r0, r3
 800c496:	f017 f925 	bl	80236e4 <iprintf>
      return error;
 800c49a:	197b      	adds	r3, r7, r5
 800c49c:	2200      	movs	r2, #0
 800c49e:	5e9b      	ldrsh	r3, [r3, r2]
 800c4a0:	e0c0      	b.n	800c624 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800c4a2:	230c      	movs	r3, #12
 800c4a4:	18fa      	adds	r2, r7, r3
 800c4a6:	4b64      	ldr	r3, [pc, #400]	@ (800c638 <probe_sen5x+0x224>)
 800c4a8:	0011      	movs	r1, r2
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	f017 f91a 	bl	80236e4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800c4b0:	2536      	movs	r5, #54	@ 0x36
 800c4b2:	197c      	adds	r4, r7, r5
 800c4b4:	2334      	movs	r3, #52	@ 0x34
 800c4b6:	18fb      	adds	r3, r7, r3
 800c4b8:	781a      	ldrb	r2, [r3, #0]
 800c4ba:	4b60      	ldr	r3, [pc, #384]	@ (800c63c <probe_sen5x+0x228>)
 800c4bc:	0011      	movs	r1, r2
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f000 ff78 	bl	800d3b4 <sen5x_get_product_name>
 800c4c4:	0003      	movs	r3, r0
 800c4c6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c4c8:	197b      	adds	r3, r7, r5
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	5e9b      	ldrsh	r3, [r3, r2]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00b      	beq.n	800c4ea <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800c4d2:	197b      	adds	r3, r7, r5
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	5e9a      	ldrsh	r2, [r3, r2]
 800c4d8:	4b59      	ldr	r3, [pc, #356]	@ (800c640 <probe_sen5x+0x22c>)
 800c4da:	0011      	movs	r1, r2
 800c4dc:	0018      	movs	r0, r3
 800c4de:	f017 f901 	bl	80236e4 <iprintf>
      return error;
 800c4e2:	197b      	adds	r3, r7, r5
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	5e9b      	ldrsh	r3, [r3, r2]
 800c4e8:	e09c      	b.n	800c624 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800c4ea:	4a54      	ldr	r2, [pc, #336]	@ (800c63c <probe_sen5x+0x228>)
 800c4ec:	4b55      	ldr	r3, [pc, #340]	@ (800c644 <probe_sen5x+0x230>)
 800c4ee:	0011      	movs	r1, r2
 800c4f0:	0018      	movs	r0, r3
 800c4f2:	f017 f8f7 	bl	80236e4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800c4f6:	2636      	movs	r6, #54	@ 0x36
 800c4f8:	19bc      	adds	r4, r7, r6
 800c4fa:	2308      	movs	r3, #8
 800c4fc:	18fd      	adds	r5, r7, r3
 800c4fe:	2309      	movs	r3, #9
 800c500:	18fa      	adds	r2, r7, r3
 800c502:	230a      	movs	r3, #10
 800c504:	18f9      	adds	r1, r7, r3
 800c506:	230b      	movs	r3, #11
 800c508:	18f8      	adds	r0, r7, r3
 800c50a:	1d7b      	adds	r3, r7, #5
 800c50c:	9302      	str	r3, [sp, #8]
 800c50e:	1dbb      	adds	r3, r7, #6
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	1dfb      	adds	r3, r7, #7
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	002b      	movs	r3, r5
 800c518:	f000 fff8 	bl	800d50c <sen5x_get_version>
 800c51c:	0003      	movs	r3, r0
 800c51e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800c520:	19bb      	adds	r3, r7, r6
 800c522:	2200      	movs	r2, #0
 800c524:	5e9b      	ldrsh	r3, [r3, r2]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800c52a:	19bb      	adds	r3, r7, r6
 800c52c:	2200      	movs	r2, #0
 800c52e:	5e9a      	ldrsh	r2, [r3, r2]
 800c530:	4b45      	ldr	r3, [pc, #276]	@ (800c648 <probe_sen5x+0x234>)
 800c532:	0011      	movs	r1, r2
 800c534:	0018      	movs	r0, r3
 800c536:	f017 f8d5 	bl	80236e4 <iprintf>
      return error;
 800c53a:	19bb      	adds	r3, r7, r6
 800c53c:	2200      	movs	r2, #0
 800c53e:	5e9b      	ldrsh	r3, [r3, r2]
 800c540:	e070      	b.n	800c624 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800c542:	230b      	movs	r3, #11
 800c544:	18fb      	adds	r3, r7, r3
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	0019      	movs	r1, r3
 800c54a:	230a      	movs	r3, #10
 800c54c:	18fb      	adds	r3, r7, r3
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	001a      	movs	r2, r3
 800c552:	2308      	movs	r3, #8
 800c554:	18fb      	adds	r3, r7, r3
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	001c      	movs	r4, r3
 800c55a:	1dfb      	adds	r3, r7, #7
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	483b      	ldr	r0, [pc, #236]	@ (800c64c <probe_sen5x+0x238>)
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	0023      	movs	r3, r4
 800c564:	f017 f8be 	bl	80236e4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800c568:	2300      	movs	r3, #0
 800c56a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800c56c:	262e      	movs	r6, #46	@ 0x2e
 800c56e:	19bb      	adds	r3, r7, r6
 800c570:	2200      	movs	r2, #0
 800c572:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800c574:	232c      	movs	r3, #44	@ 0x2c
 800c576:	18fb      	adds	r3, r7, r3
 800c578:	2200      	movs	r2, #0
 800c57a:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800c57c:	4934      	ldr	r1, [pc, #208]	@ (800c650 <probe_sen5x+0x23c>)
 800c57e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c580:	f7f4 fd0e 	bl	8000fa0 <__aeabi_fmul>
 800c584:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800c586:	1c18      	adds	r0, r3, #0
 800c588:	f7f5 f802 	bl	8001590 <__aeabi_f2iz>
 800c58c:	0003      	movs	r3, r0
 800c58e:	b218      	sxth	r0, r3
 800c590:	2536      	movs	r5, #54	@ 0x36
 800c592:	197c      	adds	r4, r7, r5
 800c594:	232c      	movs	r3, #44	@ 0x2c
 800c596:	18fb      	adds	r3, r7, r3
 800c598:	881a      	ldrh	r2, [r3, #0]
 800c59a:	19bb      	adds	r3, r7, r6
 800c59c:	2100      	movs	r1, #0
 800c59e:	5e5b      	ldrsh	r3, [r3, r1]
 800c5a0:	0019      	movs	r1, r3
 800c5a2:	f000 fea3 	bl	800d2ec <sen5x_set_temperature_offset_parameters>
 800c5a6:	0003      	movs	r3, r0
 800c5a8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c5aa:	197b      	adds	r3, r7, r5
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	5e9b      	ldrsh	r3, [r3, r2]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00b      	beq.n	800c5cc <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800c5b4:	197b      	adds	r3, r7, r5
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ba:	4a26      	ldr	r2, [pc, #152]	@ (800c654 <probe_sen5x+0x240>)
 800c5bc:	491c      	ldr	r1, [pc, #112]	@ (800c630 <probe_sen5x+0x21c>)
 800c5be:	2001      	movs	r0, #1
 800c5c0:	f005 f908 	bl	80117d4 <CreateLine>
      return error;
 800c5c4:	197b      	adds	r3, r7, r5
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ca:	e02b      	b.n	800c624 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800c5cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ce:	f7f6 ff49 	bl	8003464 <__aeabi_f2d>
 800c5d2:	0002      	movs	r2, r0
 800c5d4:	000b      	movs	r3, r1
 800c5d6:	4820      	ldr	r0, [pc, #128]	@ (800c658 <probe_sen5x+0x244>)
 800c5d8:	4920      	ldr	r1, [pc, #128]	@ (800c65c <probe_sen5x+0x248>)
 800c5da:	9200      	str	r2, [sp, #0]
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	0002      	movs	r2, r0
 800c5e0:	2002      	movs	r0, #2
 800c5e2:	f005 f8f7 	bl	80117d4 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800c5e6:	f7fb fc13 	bl	8007e10 <Check_USB_PowerOn>
 800c5ea:	0003      	movs	r3, r0
 800c5ec:	001a      	movs	r2, r3
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	4053      	eors	r3, r2
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00a      	beq.n	800c60e <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800c5f8:	f7ff fed6 	bl	800c3a8 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800c5fc:	f005 fd36 	bl	801206c <HAL_GetTick>
 800c600:	0003      	movs	r3, r0
 800c602:	22fa      	movs	r2, #250	@ 0xfa
 800c604:	00d2      	lsls	r2, r2, #3
 800c606:	189a      	adds	r2, r3, r2
 800c608:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <probe_sen5x+0x24c>)
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	e006      	b.n	800c61c <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800c60e:	f005 fd2d 	bl	801206c <HAL_GetTick>
 800c612:	0003      	movs	r3, r0
 800c614:	4a13      	ldr	r2, [pc, #76]	@ (800c664 <probe_sen5x+0x250>)
 800c616:	189a      	adds	r2, r3, r2
 800c618:	4b11      	ldr	r3, [pc, #68]	@ (800c660 <probe_sen5x+0x24c>)
 800c61a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800c61c:	2336      	movs	r3, #54	@ 0x36
 800c61e:	18fb      	adds	r3, r7, r3
 800c620:	2200      	movs	r2, #0
 800c622:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c624:	0018      	movs	r0, r3
 800c626:	46bd      	mov	sp, r7
 800c628:	b00f      	add	sp, #60	@ 0x3c
 800c62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62c:	0802a09c 	.word	0x0802a09c
 800c630:	0802a04c 	.word	0x0802a04c
 800c634:	0802a0c8 	.word	0x0802a0c8
 800c638:	0802a0f8 	.word	0x0802a0f8
 800c63c:	20000ea0 	.word	0x20000ea0
 800c640:	0802a10c 	.word	0x0802a10c
 800c644:	0802a13c 	.word	0x0802a13c
 800c648:	0802a150 	.word	0x0802a150
 800c64c:	0802a17c 	.word	0x0802a17c
 800c650:	43480000 	.word	0x43480000
 800c654:	0802a1a0 	.word	0x0802a1a0
 800c658:	0802a1e0 	.word	0x0802a1e0
 800c65c:	08029fe0 	.word	0x08029fe0
 800c660:	20000eac 	.word	0x20000eac
 800c664:	00006d60 	.word	0x00006d60

0800c668 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800c66e:	1dbb      	adds	r3, r7, #6
 800c670:	2200      	movs	r2, #0
 800c672:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800c674:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e4 <sen5x_lightup_measurement+0x7c>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800c67c:	4a1a      	ldr	r2, [pc, #104]	@ (800c6e8 <sen5x_lightup_measurement+0x80>)
 800c67e:	4b1b      	ldr	r3, [pc, #108]	@ (800c6ec <sen5x_lightup_measurement+0x84>)
 800c680:	0019      	movs	r1, r3
 800c682:	2002      	movs	r0, #2
 800c684:	f005 f8a6 	bl	80117d4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c688:	1dbc      	adds	r4, r7, #6
 800c68a:	f000 fcbb 	bl	800d004 <sen5x_start_measurement_without_pm>
 800c68e:	0003      	movs	r3, r0
 800c690:	8023      	strh	r3, [r4, #0]
 800c692:	e00a      	b.n	800c6aa <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800c694:	4a16      	ldr	r2, [pc, #88]	@ (800c6f0 <sen5x_lightup_measurement+0x88>)
 800c696:	4b15      	ldr	r3, [pc, #84]	@ (800c6ec <sen5x_lightup_measurement+0x84>)
 800c698:	0019      	movs	r1, r3
 800c69a:	2002      	movs	r0, #2
 800c69c:	f005 f89a 	bl	80117d4 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800c6a0:	1dbc      	adds	r4, r7, #6
 800c6a2:	f000 fc81 	bl	800cfa8 <sen5x_start_measurement>
 800c6a6:	0003      	movs	r3, r0
 800c6a8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800c6aa:	1dbb      	adds	r3, r7, #6
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	5e9b      	ldrsh	r3, [r3, r2]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d008      	beq.n	800c6c6 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800c6b4:	1dbb      	adds	r3, r7, #6
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	5e9b      	ldrsh	r3, [r3, r2]
 800c6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f4 <sen5x_lightup_measurement+0x8c>)
 800c6bc:	490e      	ldr	r1, [pc, #56]	@ (800c6f8 <sen5x_lightup_measurement+0x90>)
 800c6be:	2001      	movs	r0, #1
 800c6c0:	f005 f888 	bl	80117d4 <CreateLine>
 800c6c4:	e007      	b.n	800c6d6 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800c6c6:	f7fb fbd3 	bl	8007e70 <showTime>
    Info("sen5x_start_measurement executed");
 800c6ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c6fc <sen5x_lightup_measurement+0x94>)
 800c6cc:	4b07      	ldr	r3, [pc, #28]	@ (800c6ec <sen5x_lightup_measurement+0x84>)
 800c6ce:	0019      	movs	r1, r3
 800c6d0:	2002      	movs	r0, #2
 800c6d2:	f005 f87f 	bl	80117d4 <CreateLine>
  }
  return error;
 800c6d6:	1dbb      	adds	r3, r7, #6
 800c6d8:	2200      	movs	r2, #0
 800c6da:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c6dc:	0018      	movs	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	b003      	add	sp, #12
 800c6e2:	bd90      	pop	{r4, r7, pc}
 800c6e4:	20000e9e 	.word	0x20000e9e
 800c6e8:	0802a218 	.word	0x0802a218
 800c6ec:	08029fe0 	.word	0x08029fe0
 800c6f0:	0802a244 	.word	0x0802a244
 800c6f4:	0802a264 	.word	0x0802a264
 800c6f8:	0802a04c 	.word	0x0802a04c
 800c6fc:	0802a294 	.word	0x0802a294

0800c700 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800c700:	b590      	push	{r4, r7, lr}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800c706:	1dbb      	adds	r3, r7, #6
 800c708:	2200      	movs	r2, #0
 800c70a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800c70c:	4b21      	ldr	r3, [pc, #132]	@ (800c794 <sen5x_extinguish_measurement+0x94>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d01e      	beq.n	800c752 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800c714:	4a20      	ldr	r2, [pc, #128]	@ (800c798 <sen5x_extinguish_measurement+0x98>)
 800c716:	4b21      	ldr	r3, [pc, #132]	@ (800c79c <sen5x_extinguish_measurement+0x9c>)
 800c718:	0019      	movs	r1, r3
 800c71a:	2002      	movs	r0, #2
 800c71c:	f005 f85a 	bl	80117d4 <CreateLine>
    Info("PM measurement is disabled");
 800c720:	4a1f      	ldr	r2, [pc, #124]	@ (800c7a0 <sen5x_extinguish_measurement+0xa0>)
 800c722:	4b1e      	ldr	r3, [pc, #120]	@ (800c79c <sen5x_extinguish_measurement+0x9c>)
 800c724:	0019      	movs	r1, r3
 800c726:	2002      	movs	r0, #2
 800c728:	f005 f854 	bl	80117d4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c72c:	1dbc      	adds	r4, r7, #6
 800c72e:	f000 fc69 	bl	800d004 <sen5x_start_measurement_without_pm>
 800c732:	0003      	movs	r3, r0
 800c734:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c736:	1dbb      	adds	r3, r7, #6
 800c738:	2200      	movs	r2, #0
 800c73a:	5e9b      	ldrsh	r3, [r3, r2]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d022      	beq.n	800c786 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800c740:	1dbb      	adds	r3, r7, #6
 800c742:	2200      	movs	r2, #0
 800c744:	5e9b      	ldrsh	r3, [r3, r2]
 800c746:	4a17      	ldr	r2, [pc, #92]	@ (800c7a4 <sen5x_extinguish_measurement+0xa4>)
 800c748:	4917      	ldr	r1, [pc, #92]	@ (800c7a8 <sen5x_extinguish_measurement+0xa8>)
 800c74a:	2001      	movs	r0, #1
 800c74c:	f005 f842 	bl	80117d4 <CreateLine>
 800c750:	e019      	b.n	800c786 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800c752:	1dbc      	adds	r4, r7, #6
 800c754:	f000 fc84 	bl	800d060 <sen5x_stop_measurement>
 800c758:	0003      	movs	r3, r0
 800c75a:	8023      	strh	r3, [r4, #0]
    showTime();
 800c75c:	f7fb fb88 	bl	8007e70 <showTime>
    Info("sen5x_stop_measurement executed");
 800c760:	4a12      	ldr	r2, [pc, #72]	@ (800c7ac <sen5x_extinguish_measurement+0xac>)
 800c762:	4b0e      	ldr	r3, [pc, #56]	@ (800c79c <sen5x_extinguish_measurement+0x9c>)
 800c764:	0019      	movs	r1, r3
 800c766:	2002      	movs	r0, #2
 800c768:	f005 f834 	bl	80117d4 <CreateLine>
    if (error) {
 800c76c:	1dbb      	adds	r3, r7, #6
 800c76e:	2200      	movs	r2, #0
 800c770:	5e9b      	ldrsh	r3, [r3, r2]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d007      	beq.n	800c786 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800c776:	1dbb      	adds	r3, r7, #6
 800c778:	2200      	movs	r2, #0
 800c77a:	5e9b      	ldrsh	r3, [r3, r2]
 800c77c:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b0 <sen5x_extinguish_measurement+0xb0>)
 800c77e:	490a      	ldr	r1, [pc, #40]	@ (800c7a8 <sen5x_extinguish_measurement+0xa8>)
 800c780:	2001      	movs	r0, #1
 800c782:	f005 f827 	bl	80117d4 <CreateLine>
    }
  }
  return error;
 800c786:	1dbb      	adds	r3, r7, #6
 800c788:	2200      	movs	r2, #0
 800c78a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c78c:	0018      	movs	r0, r3
 800c78e:	46bd      	mov	sp, r7
 800c790:	b003      	add	sp, #12
 800c792:	bd90      	pop	{r4, r7, pc}
 800c794:	20000e9e 	.word	0x20000e9e
 800c798:	0802a2b8 	.word	0x0802a2b8
 800c79c:	08029fe0 	.word	0x08029fe0
 800c7a0:	0802a2f0 	.word	0x0802a2f0
 800c7a4:	0802a30c 	.word	0x0802a30c
 800c7a8:	0802a04c 	.word	0x0802a04c
 800c7ac:	0802a34c 	.word	0x0802a34c
 800c7b0:	0802a36c 	.word	0x0802a36c

0800c7b4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7b6:	b08d      	sub	sp, #52	@ 0x34
 800c7b8:	af04      	add	r7, sp, #16
 800c7ba:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800c7bc:	261e      	movs	r6, #30
 800c7be:	19bb      	adds	r3, r7, r6
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800c7c4:	19bc      	adds	r4, r7, r6
 800c7c6:	2316      	movs	r3, #22
 800c7c8:	18fd      	adds	r5, r7, r3
 800c7ca:	2318      	movs	r3, #24
 800c7cc:	18fa      	adds	r2, r7, r3
 800c7ce:	231a      	movs	r3, #26
 800c7d0:	18f9      	adds	r1, r7, r3
 800c7d2:	231c      	movs	r3, #28
 800c7d4:	18f8      	adds	r0, r7, r3
 800c7d6:	230e      	movs	r3, #14
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	9303      	str	r3, [sp, #12]
 800c7dc:	2310      	movs	r3, #16
 800c7de:	18fb      	adds	r3, r7, r3
 800c7e0:	9302      	str	r3, [sp, #8]
 800c7e2:	2312      	movs	r3, #18
 800c7e4:	18fb      	adds	r3, r7, r3
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	2314      	movs	r3, #20
 800c7ea:	18fb      	adds	r3, r7, r3
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	002b      	movs	r3, r5
 800c7f0:	f000 fcb8 	bl	800d164 <sen5x_read_measured_values>
 800c7f4:	0003      	movs	r3, r0
 800c7f6:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800c7f8:	19bb      	adds	r3, r7, r6
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	5e9b      	ldrsh	r3, [r3, r2]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <sen5x_read_measurement+0x56>
    return error;
 800c802:	19bb      	adds	r3, r7, r6
 800c804:	2200      	movs	r2, #0
 800c806:	5e9b      	ldrsh	r3, [r3, r2]
 800c808:	e02c      	b.n	800c864 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800c80a:	231c      	movs	r3, #28
 800c80c:	18fb      	adds	r3, r7, r3
 800c80e:	881a      	ldrh	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800c814:	231a      	movs	r3, #26
 800c816:	18fb      	adds	r3, r7, r3
 800c818:	881a      	ldrh	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800c81e:	2318      	movs	r3, #24
 800c820:	18fb      	adds	r3, r7, r3
 800c822:	881a      	ldrh	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800c828:	2316      	movs	r3, #22
 800c82a:	18fb      	adds	r3, r7, r3
 800c82c:	881a      	ldrh	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800c832:	2314      	movs	r3, #20
 800c834:	18fb      	adds	r3, r7, r3
 800c836:	2200      	movs	r2, #0
 800c838:	5e9a      	ldrsh	r2, [r3, r2]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800c83e:	2312      	movs	r3, #18
 800c840:	18fb      	adds	r3, r7, r3
 800c842:	2200      	movs	r2, #0
 800c844:	5e9a      	ldrsh	r2, [r3, r2]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800c84a:	2310      	movs	r3, #16
 800c84c:	18fb      	adds	r3, r7, r3
 800c84e:	2200      	movs	r2, #0
 800c850:	5e9a      	ldrsh	r2, [r3, r2]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800c856:	230e      	movs	r3, #14
 800c858:	18fb      	adds	r3, r7, r3
 800c85a:	2200      	movs	r2, #0
 800c85c:	5e9a      	ldrsh	r2, [r3, r2]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	81da      	strh	r2, [r3, #14]
  return 0;
 800c862:	2300      	movs	r3, #0
}
 800c864:	0018      	movs	r0, r3
 800c866:	46bd      	mov	sp, r7
 800c868:	b009      	add	sp, #36	@ 0x24
 800c86a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c86c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800c870:	4b63      	ldr	r3, [pc, #396]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	4a63      	ldr	r2, [pc, #396]	@ (800ca04 <sen5x_printvalues+0x198>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d013      	beq.n	800c8a2 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800c87a:	4b61      	ldr	r3, [pc, #388]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	0018      	movs	r0, r3
 800c880:	f7f4 fea6 	bl	80015d0 <__aeabi_i2f>
 800c884:	1c03      	adds	r3, r0, #0
 800c886:	4960      	ldr	r1, [pc, #384]	@ (800ca08 <sen5x_printvalues+0x19c>)
 800c888:	1c18      	adds	r0, r3, #0
 800c88a:	f7f4 f9a3 	bl	8000bd4 <__aeabi_fdiv>
 800c88e:	1c03      	adds	r3, r0, #0
 800c890:	1c18      	adds	r0, r3, #0
 800c892:	f7f6 fde7 	bl	8003464 <__aeabi_f2d>
 800c896:	0002      	movs	r2, r0
 800c898:	000b      	movs	r3, r1
 800c89a:	495c      	ldr	r1, [pc, #368]	@ (800ca0c <sen5x_printvalues+0x1a0>)
 800c89c:	0008      	movs	r0, r1
 800c89e:	f016 ff21 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800c8a2:	4b57      	ldr	r3, [pc, #348]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c8a4:	885b      	ldrh	r3, [r3, #2]
 800c8a6:	4a57      	ldr	r2, [pc, #348]	@ (800ca04 <sen5x_printvalues+0x198>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d013      	beq.n	800c8d4 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800c8ac:	4b54      	ldr	r3, [pc, #336]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c8ae:	885b      	ldrh	r3, [r3, #2]
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f7f4 fe8d 	bl	80015d0 <__aeabi_i2f>
 800c8b6:	1c03      	adds	r3, r0, #0
 800c8b8:	4953      	ldr	r1, [pc, #332]	@ (800ca08 <sen5x_printvalues+0x19c>)
 800c8ba:	1c18      	adds	r0, r3, #0
 800c8bc:	f7f4 f98a 	bl	8000bd4 <__aeabi_fdiv>
 800c8c0:	1c03      	adds	r3, r0, #0
 800c8c2:	1c18      	adds	r0, r3, #0
 800c8c4:	f7f6 fdce 	bl	8003464 <__aeabi_f2d>
 800c8c8:	0002      	movs	r2, r0
 800c8ca:	000b      	movs	r3, r1
 800c8cc:	4950      	ldr	r1, [pc, #320]	@ (800ca10 <sen5x_printvalues+0x1a4>)
 800c8ce:	0008      	movs	r0, r1
 800c8d0:	f016 ff08 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800c8d4:	4b4a      	ldr	r3, [pc, #296]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c8d6:	889b      	ldrh	r3, [r3, #4]
 800c8d8:	4a4a      	ldr	r2, [pc, #296]	@ (800ca04 <sen5x_printvalues+0x198>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d013      	beq.n	800c906 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800c8de:	4b48      	ldr	r3, [pc, #288]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c8e0:	889b      	ldrh	r3, [r3, #4]
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	f7f4 fe74 	bl	80015d0 <__aeabi_i2f>
 800c8e8:	1c03      	adds	r3, r0, #0
 800c8ea:	4947      	ldr	r1, [pc, #284]	@ (800ca08 <sen5x_printvalues+0x19c>)
 800c8ec:	1c18      	adds	r0, r3, #0
 800c8ee:	f7f4 f971 	bl	8000bd4 <__aeabi_fdiv>
 800c8f2:	1c03      	adds	r3, r0, #0
 800c8f4:	1c18      	adds	r0, r3, #0
 800c8f6:	f7f6 fdb5 	bl	8003464 <__aeabi_f2d>
 800c8fa:	0002      	movs	r2, r0
 800c8fc:	000b      	movs	r3, r1
 800c8fe:	4945      	ldr	r1, [pc, #276]	@ (800ca14 <sen5x_printvalues+0x1a8>)
 800c900:	0008      	movs	r0, r1
 800c902:	f016 feef 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800c906:	4b3e      	ldr	r3, [pc, #248]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c908:	88db      	ldrh	r3, [r3, #6]
 800c90a:	4a3e      	ldr	r2, [pc, #248]	@ (800ca04 <sen5x_printvalues+0x198>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d013      	beq.n	800c938 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800c910:	4b3b      	ldr	r3, [pc, #236]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c912:	88db      	ldrh	r3, [r3, #6]
 800c914:	0018      	movs	r0, r3
 800c916:	f7f4 fe5b 	bl	80015d0 <__aeabi_i2f>
 800c91a:	1c03      	adds	r3, r0, #0
 800c91c:	493a      	ldr	r1, [pc, #232]	@ (800ca08 <sen5x_printvalues+0x19c>)
 800c91e:	1c18      	adds	r0, r3, #0
 800c920:	f7f4 f958 	bl	8000bd4 <__aeabi_fdiv>
 800c924:	1c03      	adds	r3, r0, #0
 800c926:	1c18      	adds	r0, r3, #0
 800c928:	f7f6 fd9c 	bl	8003464 <__aeabi_f2d>
 800c92c:	0002      	movs	r2, r0
 800c92e:	000b      	movs	r3, r1
 800c930:	4939      	ldr	r1, [pc, #228]	@ (800ca18 <sen5x_printvalues+0x1ac>)
 800c932:	0008      	movs	r0, r1
 800c934:	f016 fed6 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800c938:	4b31      	ldr	r3, [pc, #196]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c93a:	2208      	movs	r2, #8
 800c93c:	5e9b      	ldrsh	r3, [r3, r2]
 800c93e:	4a37      	ldr	r2, [pc, #220]	@ (800ca1c <sen5x_printvalues+0x1b0>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d014      	beq.n	800c96e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800c944:	4b2e      	ldr	r3, [pc, #184]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c946:	2208      	movs	r2, #8
 800c948:	5e9b      	ldrsh	r3, [r3, r2]
 800c94a:	0018      	movs	r0, r3
 800c94c:	f7f4 fe40 	bl	80015d0 <__aeabi_i2f>
 800c950:	1c03      	adds	r3, r0, #0
 800c952:	4933      	ldr	r1, [pc, #204]	@ (800ca20 <sen5x_printvalues+0x1b4>)
 800c954:	1c18      	adds	r0, r3, #0
 800c956:	f7f4 f93d 	bl	8000bd4 <__aeabi_fdiv>
 800c95a:	1c03      	adds	r3, r0, #0
 800c95c:	1c18      	adds	r0, r3, #0
 800c95e:	f7f6 fd81 	bl	8003464 <__aeabi_f2d>
 800c962:	0002      	movs	r2, r0
 800c964:	000b      	movs	r3, r1
 800c966:	492f      	ldr	r1, [pc, #188]	@ (800ca24 <sen5x_printvalues+0x1b8>)
 800c968:	0008      	movs	r0, r1
 800c96a:	f016 febb 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800c96e:	4b24      	ldr	r3, [pc, #144]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c970:	220a      	movs	r2, #10
 800c972:	5e9b      	ldrsh	r3, [r3, r2]
 800c974:	4a29      	ldr	r2, [pc, #164]	@ (800ca1c <sen5x_printvalues+0x1b0>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d014      	beq.n	800c9a4 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800c97a:	4b21      	ldr	r3, [pc, #132]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c97c:	220a      	movs	r2, #10
 800c97e:	5e9b      	ldrsh	r3, [r3, r2]
 800c980:	0018      	movs	r0, r3
 800c982:	f7f4 fe25 	bl	80015d0 <__aeabi_i2f>
 800c986:	1c03      	adds	r3, r0, #0
 800c988:	4927      	ldr	r1, [pc, #156]	@ (800ca28 <sen5x_printvalues+0x1bc>)
 800c98a:	1c18      	adds	r0, r3, #0
 800c98c:	f7f4 f922 	bl	8000bd4 <__aeabi_fdiv>
 800c990:	1c03      	adds	r3, r0, #0
 800c992:	1c18      	adds	r0, r3, #0
 800c994:	f7f6 fd66 	bl	8003464 <__aeabi_f2d>
 800c998:	0002      	movs	r2, r0
 800c99a:	000b      	movs	r3, r1
 800c99c:	4923      	ldr	r1, [pc, #140]	@ (800ca2c <sen5x_printvalues+0x1c0>)
 800c99e:	0008      	movs	r0, r1
 800c9a0:	f016 fea0 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800c9a4:	4b16      	ldr	r3, [pc, #88]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c9a6:	220c      	movs	r2, #12
 800c9a8:	5e9b      	ldrsh	r3, [r3, r2]
 800c9aa:	4a1c      	ldr	r2, [pc, #112]	@ (800ca1c <sen5x_printvalues+0x1b0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00e      	beq.n	800c9ce <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800c9b0:	4b13      	ldr	r3, [pc, #76]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c9b2:	220c      	movs	r2, #12
 800c9b4:	5e9b      	ldrsh	r3, [r3, r2]
 800c9b6:	210a      	movs	r1, #10
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	f7f3 fc7d 	bl	80002b8 <__divsi3>
 800c9be:	0003      	movs	r3, r0
 800c9c0:	b21b      	sxth	r3, r3
 800c9c2:	001a      	movs	r2, r3
 800c9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <sen5x_printvalues+0x1c4>)
 800c9c6:	0011      	movs	r1, r2
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f016 fe8b 	bl	80236e4 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800c9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c9d0:	220e      	movs	r2, #14
 800c9d2:	5e9b      	ldrsh	r3, [r3, r2]
 800c9d4:	4a11      	ldr	r2, [pc, #68]	@ (800ca1c <sen5x_printvalues+0x1b0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d00e      	beq.n	800c9f8 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800c9da:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <sen5x_printvalues+0x194>)
 800c9dc:	220e      	movs	r2, #14
 800c9de:	5e9b      	ldrsh	r3, [r3, r2]
 800c9e0:	210a      	movs	r1, #10
 800c9e2:	0018      	movs	r0, r3
 800c9e4:	f7f3 fc68 	bl	80002b8 <__divsi3>
 800c9e8:	0003      	movs	r3, r0
 800c9ea:	b21b      	sxth	r3, r3
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	4b11      	ldr	r3, [pc, #68]	@ (800ca34 <sen5x_printvalues+0x1c8>)
 800c9f0:	0011      	movs	r1, r2
 800c9f2:	0018      	movs	r0, r3
 800c9f4:	f016 fe76 	bl	80236e4 <iprintf>
  }
}
 800c9f8:	46c0      	nop			@ (mov r8, r8)
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	46c0      	nop			@ (mov r8, r8)
 800ca00:	20000eb0 	.word	0x20000eb0
 800ca04:	0000ffff 	.word	0x0000ffff
 800ca08:	41200000 	.word	0x41200000
 800ca0c:	0802a39c 	.word	0x0802a39c
 800ca10:	0802a3c8 	.word	0x0802a3c8
 800ca14:	0802a3f4 	.word	0x0802a3f4
 800ca18:	0802a420 	.word	0x0802a420
 800ca1c:	00007fff 	.word	0x00007fff
 800ca20:	42c80000 	.word	0x42c80000
 800ca24:	0802a44c 	.word	0x0802a44c
 800ca28:	43480000 	.word	0x43480000
 800ca2c:	0802a470 	.word	0x0802a470
 800ca30:	0802a498 	.word	0x0802a498
 800ca34:	0802a4b0 	.word	0x0802a4b0

0800ca38 <sen5xStore>:

void sen5xStore() {
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ca3c:	4b2e      	ldr	r3, [pc, #184]	@ (800caf8 <sen5xStore+0xc0>)
 800ca3e:	885b      	ldrh	r3, [r3, #2]
 800ca40:	4a2e      	ldr	r2, [pc, #184]	@ (800cafc <sen5xStore+0xc4>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d004      	beq.n	800ca50 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800ca46:	4b2c      	ldr	r3, [pc, #176]	@ (800caf8 <sen5xStore+0xc0>)
 800ca48:	885b      	ldrh	r3, [r3, #2]
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f7f7 fdcc 	bl	80045e8 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800ca50:	4b29      	ldr	r3, [pc, #164]	@ (800caf8 <sen5xStore+0xc0>)
 800ca52:	88db      	ldrh	r3, [r3, #6]
 800ca54:	4a29      	ldr	r2, [pc, #164]	@ (800cafc <sen5xStore+0xc4>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d004      	beq.n	800ca64 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ca5a:	4b27      	ldr	r3, [pc, #156]	@ (800caf8 <sen5xStore+0xc0>)
 800ca5c:	88db      	ldrh	r3, [r3, #6]
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f7f7 fdee 	bl	8004640 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ca64:	4b26      	ldr	r3, [pc, #152]	@ (800cb00 <sen5xStore+0xc8>)
 800ca66:	791b      	ldrb	r3, [r3, #4]
 800ca68:	2b34      	cmp	r3, #52	@ 0x34
 800ca6a:	d003      	beq.n	800ca74 <sen5xStore+0x3c>
 800ca6c:	4b24      	ldr	r3, [pc, #144]	@ (800cb00 <sen5xStore+0xc8>)
 800ca6e:	791b      	ldrb	r3, [r3, #4]
 800ca70:	2b35      	cmp	r3, #53	@ 0x35
 800ca72:	d13d      	bne.n	800caf0 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800ca74:	4b23      	ldr	r3, [pc, #140]	@ (800cb04 <sen5xStore+0xcc>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	4053      	eors	r3, r2
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <sen5xStore+0x52>
 800ca82:	4b21      	ldr	r3, [pc, #132]	@ (800cb08 <sen5xStore+0xd0>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d032      	beq.n	800caf0 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800ca8a:	4b1b      	ldr	r3, [pc, #108]	@ (800caf8 <sen5xStore+0xc0>)
 800ca8c:	220c      	movs	r2, #12
 800ca8e:	5e9b      	ldrsh	r3, [r3, r2]
 800ca90:	4a1e      	ldr	r2, [pc, #120]	@ (800cb0c <sen5xStore+0xd4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d019      	beq.n	800caca <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800ca96:	4b18      	ldr	r3, [pc, #96]	@ (800caf8 <sen5xStore+0xc0>)
 800ca98:	220c      	movs	r2, #12
 800ca9a:	5e9b      	ldrsh	r3, [r3, r2]
 800ca9c:	210a      	movs	r1, #10
 800ca9e:	0018      	movs	r0, r3
 800caa0:	f7f3 fc0a 	bl	80002b8 <__divsi3>
 800caa4:	0003      	movs	r3, r0
 800caa6:	b21b      	sxth	r3, r3
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	0018      	movs	r0, r3
 800caac:	f003 fe42 	bl	8010734 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800cab0:	4b11      	ldr	r3, [pc, #68]	@ (800caf8 <sen5xStore+0xc0>)
 800cab2:	220c      	movs	r2, #12
 800cab4:	5e9b      	ldrsh	r3, [r3, r2]
 800cab6:	210a      	movs	r1, #10
 800cab8:	0018      	movs	r0, r3
 800caba:	f7f3 fbfd 	bl	80002b8 <__divsi3>
 800cabe:	0003      	movs	r3, r0
 800cac0:	b21b      	sxth	r3, r3
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	0018      	movs	r0, r3
 800cac6:	f7f7 fd45 	bl	8004554 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800caca:	4b0b      	ldr	r3, [pc, #44]	@ (800caf8 <sen5xStore+0xc0>)
 800cacc:	220e      	movs	r2, #14
 800cace:	5e9b      	ldrsh	r3, [r3, r2]
 800cad0:	4a0e      	ldr	r2, [pc, #56]	@ (800cb0c <sen5xStore+0xd4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d00c      	beq.n	800caf0 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800cad6:	4b08      	ldr	r3, [pc, #32]	@ (800caf8 <sen5xStore+0xc0>)
 800cad8:	220e      	movs	r2, #14
 800cada:	5e9b      	ldrsh	r3, [r3, r2]
 800cadc:	210a      	movs	r1, #10
 800cade:	0018      	movs	r0, r3
 800cae0:	f7f3 fbea 	bl	80002b8 <__divsi3>
 800cae4:	0003      	movs	r3, r0
 800cae6:	b21b      	sxth	r3, r3
 800cae8:	b29b      	uxth	r3, r3
 800caea:	0018      	movs	r0, r3
 800caec:	f7f7 fdd4 	bl	8004698 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800caf0:	46c0      	nop			@ (mov r8, r8)
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	46c0      	nop			@ (mov r8, r8)
 800caf8:	20000eb0 	.word	0x20000eb0
 800cafc:	0000ffff 	.word	0x0000ffff
 800cb00:	20000ea0 	.word	0x20000ea0
 800cb04:	20000e9e 	.word	0x20000e9e
 800cb08:	20001e2d 	.word	0x20001e2d
 800cb0c:	00007fff 	.word	0x00007fff

0800cb10 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	6039      	str	r1, [r7, #0]
 800cb18:	0011      	movs	r1, r2
 800cb1a:	1dfb      	adds	r3, r7, #7
 800cb1c:	1c02      	adds	r2, r0, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
 800cb20:	1d3b      	adds	r3, r7, #4
 800cb22:	1c0a      	adds	r2, r1, #0
 800cb24:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800cb26:	1dfb      	adds	r3, r7, #7
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	18db      	adds	r3, r3, r3
 800cb2e:	b299      	uxth	r1, r3
 800cb30:	1d3b      	adds	r3, r7, #4
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	4805      	ldr	r0, [pc, #20]	@ (800cb4c <sensirion_i2c_hal_read+0x3c>)
 800cb38:	2464      	movs	r4, #100	@ 0x64
 800cb3a:	9400      	str	r4, [sp, #0]
 800cb3c:	f006 fefe 	bl	801393c <HAL_I2C_Master_Receive>
 800cb40:	0003      	movs	r3, r0
 800cb42:	b25b      	sxtb	r3, r3
}
 800cb44:	0018      	movs	r0, r3
 800cb46:	46bd      	mov	sp, r7
 800cb48:	b003      	add	sp, #12
 800cb4a:	bd90      	pop	{r4, r7, pc}
 800cb4c:	20000c74 	.word	0x20000c74

0800cb50 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800cb50:	b590      	push	{r4, r7, lr}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	6039      	str	r1, [r7, #0]
 800cb58:	0011      	movs	r1, r2
 800cb5a:	1dfb      	adds	r3, r7, #7
 800cb5c:	1c02      	adds	r2, r0, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	1d3b      	adds	r3, r7, #4
 800cb62:	1c0a      	adds	r2, r1, #0
 800cb64:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800cb66:	1dfb      	adds	r3, r7, #7
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	18db      	adds	r3, r3, r3
 800cb6e:	b299      	uxth	r1, r3
 800cb70:	1d3b      	adds	r3, r7, #4
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	4805      	ldr	r0, [pc, #20]	@ (800cb8c <sensirion_i2c_hal_write+0x3c>)
 800cb78:	2464      	movs	r4, #100	@ 0x64
 800cb7a:	9400      	str	r4, [sp, #0]
 800cb7c:	f006 fdd6 	bl	801372c <HAL_I2C_Master_Transmit>
 800cb80:	0003      	movs	r3, r0
 800cb82:	b25b      	sxtb	r3, r3
}
 800cb84:	0018      	movs	r0, r3
 800cb86:	46bd      	mov	sp, r7
 800cb88:	b003      	add	sp, #12
 800cb8a:	bd90      	pop	{r4, r7, pc}
 800cb8c:	20000c74 	.word	0x20000c74

0800cb90 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	22fa      	movs	r2, #250	@ 0xfa
 800cb9c:	0091      	lsls	r1, r2, #2
 800cb9e:	0018      	movs	r0, r3
 800cba0:	f7f3 fb00 	bl	80001a4 <__udivsi3>
 800cba4:	0003      	movs	r3, r0
 800cba6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	22fa      	movs	r2, #250	@ 0xfa
 800cbac:	0091      	lsls	r1, r2, #2
 800cbae:	0018      	movs	r0, r3
 800cbb0:	f7f3 fb7e 	bl	80002b0 <__aeabi_uidivmod>
 800cbb4:	1e0b      	subs	r3, r1, #0
 800cbb6:	d002      	beq.n	800cbbe <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f005 fa5d 	bl	8012080 <HAL_Delay>
}
 800cbc6:	46c0      	nop			@ (mov r8, r8)
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	b004      	add	sp, #16
 800cbcc:	bd80      	pop	{r7, pc}
	...

0800cbd0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800cbda:	1d3b      	adds	r3, r7, #4
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f000 fd01 	bl	800d5e4 <sen5x_read_device_status>
 800cbe2:	1e03      	subs	r3, r0, #0
 800cbe4:	d007      	beq.n	800cbf6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800cbe6:	4a28      	ldr	r2, [pc, #160]	@ (800cc88 <sen5x_check_for_errors+0xb8>)
 800cbe8:	4b28      	ldr	r3, [pc, #160]	@ (800cc8c <sen5x_check_for_errors+0xbc>)
 800cbea:	0019      	movs	r1, r3
 800cbec:	2001      	movs	r0, #1
 800cbee:	f004 fdf1 	bl	80117d4 <CreateLine>
    return true;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e043      	b.n	800cc7e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <sen5x_check_for_errors+0x30>
    return false;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e03e      	b.n	800cc7e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	2380      	movs	r3, #128	@ 0x80
 800cc04:	039b      	lsls	r3, r3, #14
 800cc06:	4013      	ands	r3, r2
 800cc08:	d005      	beq.n	800cc16 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800cc0a:	4a21      	ldr	r2, [pc, #132]	@ (800cc90 <sen5x_check_for_errors+0xc0>)
 800cc0c:	4b21      	ldr	r3, [pc, #132]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc0e:	0019      	movs	r1, r3
 800cc10:	2003      	movs	r0, #3
 800cc12:	f004 fddf 	bl	80117d4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	031b      	lsls	r3, r3, #12
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	d005      	beq.n	800cc2c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800cc20:	4a1d      	ldr	r2, [pc, #116]	@ (800cc98 <sen5x_check_for_errors+0xc8>)
 800cc22:	4b1c      	ldr	r3, [pc, #112]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc24:	0019      	movs	r1, r3
 800cc26:	2003      	movs	r0, #3
 800cc28:	f004 fdd4 	bl	80117d4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2280      	movs	r2, #128	@ 0x80
 800cc30:	4013      	ands	r3, r2
 800cc32:	d005      	beq.n	800cc40 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800cc34:	4a19      	ldr	r2, [pc, #100]	@ (800cc9c <sen5x_check_for_errors+0xcc>)
 800cc36:	4b17      	ldr	r3, [pc, #92]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc38:	0019      	movs	r1, r3
 800cc3a:	2003      	movs	r0, #3
 800cc3c:	f004 fdca 	bl	80117d4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2240      	movs	r2, #64	@ 0x40
 800cc44:	4013      	ands	r3, r2
 800cc46:	d005      	beq.n	800cc54 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800cc48:	4a15      	ldr	r2, [pc, #84]	@ (800cca0 <sen5x_check_for_errors+0xd0>)
 800cc4a:	4b12      	ldr	r3, [pc, #72]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	2003      	movs	r0, #3
 800cc50:	f004 fdc0 	bl	80117d4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2220      	movs	r2, #32
 800cc58:	4013      	ands	r3, r2
 800cc5a:	d005      	beq.n	800cc68 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800cc5c:	4a11      	ldr	r2, [pc, #68]	@ (800cca4 <sen5x_check_for_errors+0xd4>)
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc60:	0019      	movs	r1, r3
 800cc62:	2003      	movs	r0, #3
 800cc64:	f004 fdb6 	bl	80117d4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	d005      	beq.n	800cc7c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800cc70:	4a0d      	ldr	r2, [pc, #52]	@ (800cca8 <sen5x_check_for_errors+0xd8>)
 800cc72:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <sen5x_check_for_errors+0xc4>)
 800cc74:	0019      	movs	r1, r3
 800cc76:	2003      	movs	r0, #3
 800cc78:	f004 fdac 	bl	80117d4 <CreateLine>
  }
  return 1;
 800cc7c:	2301      	movs	r3, #1
}
 800cc7e:	0018      	movs	r0, r3
 800cc80:	46bd      	mov	sp, r7
 800cc82:	b002      	add	sp, #8
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	46c0      	nop			@ (mov r8, r8)
 800cc88:	0802a4c8 	.word	0x0802a4c8
 800cc8c:	0802a04c 	.word	0x0802a04c
 800cc90:	0802a4f4 	.word	0x0802a4f4
 800cc94:	0802a020 	.word	0x0802a020
 800cc98:	0802a514 	.word	0x0802a514
 800cc9c:	0802a530 	.word	0x0802a530
 800cca0:	0802a554 	.word	0x0802a554
 800cca4:	0802a574 	.word	0x0802a574
 800cca8:	0802a588 	.word	0x0802a588

0800ccac <set_light_on_state>:

void set_light_on_state(void) {
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800ccb0:	4b15      	ldr	r3, [pc, #84]	@ (800cd08 <set_light_on_state+0x5c>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	4053      	eors	r3, r2
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d008      	beq.n	800ccd0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800ccbe:	f7ff fb43 	bl	800c348 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800ccc2:	4a12      	ldr	r2, [pc, #72]	@ (800cd0c <set_light_on_state+0x60>)
 800ccc4:	4b12      	ldr	r3, [pc, #72]	@ (800cd10 <set_light_on_state+0x64>)
 800ccc6:	0019      	movs	r1, r3
 800ccc8:	2003      	movs	r0, #3
 800ccca:	f004 fd83 	bl	80117d4 <CreateLine>
 800ccce:	e00a      	b.n	800cce6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800ccd0:	f005 f9cc 	bl	801206c <HAL_GetTick>
 800ccd4:	0002      	movs	r2, r0
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd14 <set_light_on_state+0x68>)
 800ccd8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800ccda:	4a0f      	ldr	r2, [pc, #60]	@ (800cd18 <set_light_on_state+0x6c>)
 800ccdc:	4b0c      	ldr	r3, [pc, #48]	@ (800cd10 <set_light_on_state+0x64>)
 800ccde:	0019      	movs	r1, r3
 800cce0:	2003      	movs	r0, #3
 800cce2:	f004 fd77 	bl	80117d4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800cce6:	f7ff fcbf 	bl	800c668 <sen5x_lightup_measurement>
 800ccea:	1e03      	subs	r3, r0, #0
 800ccec:	d005      	beq.n	800ccfa <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800ccee:	4a0b      	ldr	r2, [pc, #44]	@ (800cd1c <set_light_on_state+0x70>)
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd20 <set_light_on_state+0x74>)
 800ccf2:	0019      	movs	r1, r3
 800ccf4:	2001      	movs	r0, #1
 800ccf6:	f004 fd6d 	bl	80117d4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	@ (800cd24 <set_light_on_state+0x78>)
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	701a      	strb	r2, [r3, #0]
}
 800cd00:	46c0      	nop			@ (mov r8, r8)
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	46c0      	nop			@ (mov r8, r8)
 800cd08:	20000e9d 	.word	0x20000e9d
 800cd0c:	0802a5c4 	.word	0x0802a5c4
 800cd10:	0802a020 	.word	0x0802a020
 800cd14:	20000eac 	.word	0x20000eac
 800cd18:	0802a5f0 	.word	0x0802a5f0
 800cd1c:	0802a608 	.word	0x0802a608
 800cd20:	0802a04c 	.word	0x0802a04c
 800cd24:	2000009d 	.word	0x2000009d

0800cd28 <sen5x_statemachine>:

void sen5x_statemachine() {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800cd2e:	1dfb      	adds	r3, r7, #7
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800cd34:	4b86      	ldr	r3, [pc, #536]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	0018      	movs	r0, r3
 800cd3a:	f004 fcf5 	bl	8011728 <TimestampIsReached>
 800cd3e:	1e03      	subs	r3, r0, #0
 800cd40:	d100      	bne.n	800cd44 <sen5x_statemachine+0x1c>
 800cd42:	e100      	b.n	800cf46 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800cd44:	4b83      	ldr	r3, [pc, #524]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b05      	cmp	r3, #5
 800cd4a:	d900      	bls.n	800cd4e <sen5x_statemachine+0x26>
 800cd4c:	e0fb      	b.n	800cf46 <sen5x_statemachine+0x21e>
 800cd4e:	009a      	lsls	r2, r3, #2
 800cd50:	4b81      	ldr	r3, [pc, #516]	@ (800cf58 <sen5x_statemachine+0x230>)
 800cd52:	18d3      	adds	r3, r2, r3
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800cd58:	4a80      	ldr	r2, [pc, #512]	@ (800cf5c <sen5x_statemachine+0x234>)
 800cd5a:	4b81      	ldr	r3, [pc, #516]	@ (800cf60 <sen5x_statemachine+0x238>)
 800cd5c:	0019      	movs	r1, r3
 800cd5e:	2001      	movs	r0, #1
 800cd60:	f004 fd38 	bl	80117d4 <CreateLine>
      SetPMSensorStatus(false);
 800cd64:	2000      	movs	r0, #0
 800cd66:	f7fe fb3b 	bl	800b3e0 <SetPMSensorStatus>
      DisablePMSensor();
 800cd6a:	f7fe fad1 	bl	800b310 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800cd6e:	f005 f97d 	bl	801206c <HAL_GetTick>
 800cd72:	0003      	movs	r3, r0
 800cd74:	4a7b      	ldr	r2, [pc, #492]	@ (800cf64 <sen5x_statemachine+0x23c>)
 800cd76:	189a      	adds	r2, r3, r2
 800cd78:	4b75      	ldr	r3, [pc, #468]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cd7a:	601a      	str	r2, [r3, #0]
      break;
 800cd7c:	e0e3      	b.n	800cf46 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800cd7e:	f005 f975 	bl	801206c <HAL_GetTick>
 800cd82:	0003      	movs	r3, r0
 800cd84:	4a78      	ldr	r2, [pc, #480]	@ (800cf68 <sen5x_statemachine+0x240>)
 800cd86:	189a      	adds	r2, r3, r2
 800cd88:	4b71      	ldr	r3, [pc, #452]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cd8a:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800cd8c:	f7ff ff8e 	bl	800ccac <set_light_on_state>
      break;
 800cd90:	e0d9      	b.n	800cf46 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800cd92:	4b70      	ldr	r3, [pc, #448]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cd94:	2202      	movs	r2, #2
 800cd96:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800cd98:	4b74      	ldr	r3, [pc, #464]	@ (800cf6c <sen5x_statemachine+0x244>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b05      	cmp	r3, #5
 800cd9e:	d905      	bls.n	800cdac <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800cda0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800cda6:	f7ff faff 	bl	800c3a8 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800cdaa:	e0c9      	b.n	800cf40 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800cdac:	f7ff ff10 	bl	800cbd0 <sen5x_check_for_errors>
 800cdb0:	1e03      	subs	r3, r0, #0
 800cdb2:	d01f      	beq.n	800cdf4 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800cdb4:	f000 fc68 	bl	800d688 <sen5x_device_reset>
 800cdb8:	1e03      	subs	r3, r0, #0
 800cdba:	d00f      	beq.n	800cddc <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800cdbc:	4a6c      	ldr	r2, [pc, #432]	@ (800cf70 <sen5x_statemachine+0x248>)
 800cdbe:	4b68      	ldr	r3, [pc, #416]	@ (800cf60 <sen5x_statemachine+0x238>)
 800cdc0:	0019      	movs	r1, r3
 800cdc2:	2001      	movs	r0, #1
 800cdc4:	f004 fd06 	bl	80117d4 <CreateLine>
            sen5xErrors++;
 800cdc8:	4b68      	ldr	r3, [pc, #416]	@ (800cf6c <sen5x_statemachine+0x244>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	4b66      	ldr	r3, [pc, #408]	@ (800cf6c <sen5x_statemachine+0x244>)
 800cdd2:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800cdd4:	4b5f      	ldr	r3, [pc, #380]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	701a      	strb	r2, [r3, #0]
 800cdda:	e005      	b.n	800cde8 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800cddc:	4a65      	ldr	r2, [pc, #404]	@ (800cf74 <sen5x_statemachine+0x24c>)
 800cdde:	4b66      	ldr	r3, [pc, #408]	@ (800cf78 <sen5x_statemachine+0x250>)
 800cde0:	0019      	movs	r1, r3
 800cde2:	2002      	movs	r0, #2
 800cde4:	f004 fcf6 	bl	80117d4 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800cde8:	f005 f940 	bl	801206c <HAL_GetTick>
 800cdec:	0002      	movs	r2, r0
 800cdee:	4b58      	ldr	r3, [pc, #352]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cdf0:	601a      	str	r2, [r3, #0]
      break;
 800cdf2:	e0a5      	b.n	800cf40 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800cdf4:	4b5d      	ldr	r3, [pc, #372]	@ (800cf6c <sen5x_statemachine+0x244>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d100      	bne.n	800cdfe <sen5x_statemachine+0xd6>
 800cdfc:	e0a0      	b.n	800cf40 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800cdfe:	4b5b      	ldr	r3, [pc, #364]	@ (800cf6c <sen5x_statemachine+0x244>)
 800ce00:	2200      	movs	r2, #0
 800ce02:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800ce04:	4a5d      	ldr	r2, [pc, #372]	@ (800cf7c <sen5x_statemachine+0x254>)
 800ce06:	4b5e      	ldr	r3, [pc, #376]	@ (800cf80 <sen5x_statemachine+0x258>)
 800ce08:	0019      	movs	r1, r3
 800ce0a:	2003      	movs	r0, #3
 800ce0c:	f004 fce2 	bl	80117d4 <CreateLine>
      break;
 800ce10:	e096      	b.n	800cf40 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800ce12:	1dfb      	adds	r3, r7, #7
 800ce14:	0018      	movs	r0, r3
 800ce16:	f000 f953 	bl	800d0c0 <sen5x_read_data_ready>
      if (data_ready) {
 800ce1a:	1dfb      	adds	r3, r7, #7
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d02c      	beq.n	800ce7c <sen5x_statemachine+0x154>
        SetPMIndicator();
 800ce22:	f003 fbe7 	bl	80105f4 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800ce26:	4b57      	ldr	r3, [pc, #348]	@ (800cf84 <sen5x_statemachine+0x25c>)
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f7ff fcc3 	bl	800c7b4 <sen5x_read_measurement>
 800ce2e:	1e03      	subs	r3, r0, #0
 800ce30:	d00b      	beq.n	800ce4a <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800ce32:	4a55      	ldr	r2, [pc, #340]	@ (800cf88 <sen5x_statemachine+0x260>)
 800ce34:	4b4a      	ldr	r3, [pc, #296]	@ (800cf60 <sen5x_statemachine+0x238>)
 800ce36:	0019      	movs	r1, r3
 800ce38:	2001      	movs	r0, #1
 800ce3a:	f004 fccb 	bl	80117d4 <CreateLine>
          sen5xErrors++;
 800ce3e:	4b4b      	ldr	r3, [pc, #300]	@ (800cf6c <sen5x_statemachine+0x244>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	3301      	adds	r3, #1
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	4b49      	ldr	r3, [pc, #292]	@ (800cf6c <sen5x_statemachine+0x244>)
 800ce48:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800ce4a:	4b50      	ldr	r3, [pc, #320]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	4b4e      	ldr	r3, [pc, #312]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce54:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800ce56:	4b4d      	ldr	r3, [pc, #308]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b1f      	cmp	r3, #31
 800ce5c:	d102      	bne.n	800ce64 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800ce5e:	4b4b      	ldr	r3, [pc, #300]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800ce64:	4b49      	ldr	r3, [pc, #292]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d901      	bls.n	800ce70 <sen5x_statemachine+0x148>
          sen5xStore();
 800ce6c:	f7ff fde4 	bl	800ca38 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800ce70:	4b46      	ldr	r3, [pc, #280]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d101      	bne.n	800ce7c <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800ce78:	f7ff fcf8 	bl	800c86c <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800ce7c:	4b44      	ldr	r3, [pc, #272]	@ (800cf90 <sen5x_statemachine+0x268>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d103      	bne.n	800ce8c <sen5x_statemachine+0x164>
 800ce84:	4b41      	ldr	r3, [pc, #260]	@ (800cf8c <sen5x_statemachine+0x264>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d95b      	bls.n	800cf44 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800ce8c:	4b31      	ldr	r3, [pc, #196]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800ce8e:	2204      	movs	r2, #4
 800ce90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ce92:	e057      	b.n	800cf44 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800ce94:	f7fb faac 	bl	80083f0 <RTC_GetWeekday>
 800ce98:	0003      	movs	r3, r0
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d11a      	bne.n	800ced4 <sen5x_statemachine+0x1ac>
 800ce9e:	4b3d      	ldr	r3, [pc, #244]	@ (800cf94 <sen5x_statemachine+0x26c>)
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2201      	movs	r2, #1
 800cea4:	4053      	eors	r3, r2
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d013      	beq.n	800ced4 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800ceac:	f000 f9ee 	bl	800d28c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800ceb0:	4a39      	ldr	r2, [pc, #228]	@ (800cf98 <sen5x_statemachine+0x270>)
 800ceb2:	4b31      	ldr	r3, [pc, #196]	@ (800cf78 <sen5x_statemachine+0x250>)
 800ceb4:	0019      	movs	r1, r3
 800ceb6:	2002      	movs	r0, #2
 800ceb8:	f004 fc8c 	bl	80117d4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800cebc:	f005 f8d6 	bl	801206c <HAL_GetTick>
 800cec0:	0003      	movs	r3, r0
 800cec2:	4a36      	ldr	r2, [pc, #216]	@ (800cf9c <sen5x_statemachine+0x274>)
 800cec4:	189a      	adds	r2, r3, r2
 800cec6:	4b22      	ldr	r3, [pc, #136]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cec8:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800ceca:	4b32      	ldr	r3, [pc, #200]	@ (800cf94 <sen5x_statemachine+0x26c>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800ced0:	f7ff fbca 	bl	800c668 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800ced4:	4b1f      	ldr	r3, [pc, #124]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800ced6:	2205      	movs	r2, #5
 800ced8:	701a      	strb	r2, [r3, #0]
      break;
 800ceda:	e034      	b.n	800cf46 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800cedc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf90 <sen5x_statemachine+0x268>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2201      	movs	r2, #1
 800cee2:	4053      	eors	r3, r2
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01c      	beq.n	800cf24 <sen5x_statemachine+0x1fc>
 800ceea:	4b2d      	ldr	r3, [pc, #180]	@ (800cfa0 <sen5x_statemachine+0x278>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	2201      	movs	r2, #1
 800cef0:	4053      	eors	r3, r2
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d015      	beq.n	800cf24 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800cef8:	f7ff fc02 	bl	800c700 <sen5x_extinguish_measurement>
 800cefc:	1e03      	subs	r3, r0, #0
 800cefe:	d005      	beq.n	800cf0c <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800cf00:	4a28      	ldr	r2, [pc, #160]	@ (800cfa4 <sen5x_statemachine+0x27c>)
 800cf02:	4b17      	ldr	r3, [pc, #92]	@ (800cf60 <sen5x_statemachine+0x238>)
 800cf04:	0019      	movs	r1, r3
 800cf06:	2001      	movs	r0, #1
 800cf08:	f004 fc64 	bl	80117d4 <CreateLine>
        }
        sen5xSamples = 0;
 800cf0c:	4b1f      	ldr	r3, [pc, #124]	@ (800cf8c <sen5x_statemachine+0x264>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800cf12:	f7ff fa49 	bl	800c3a8 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800cf16:	2000      	movs	r0, #0
 800cf18:	f7fe fa62 	bl	800b3e0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cf1e:	2201      	movs	r2, #1
 800cf20:	701a      	strb	r2, [r3, #0]
 800cf22:	e002      	b.n	800cf2a <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800cf24:	4b0b      	ldr	r3, [pc, #44]	@ (800cf54 <sen5x_statemachine+0x22c>)
 800cf26:	2203      	movs	r2, #3
 800cf28:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800cf2a:	f003 fb89 	bl	8010640 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800cf2e:	f005 f89d 	bl	801206c <HAL_GetTick>
 800cf32:	0003      	movs	r3, r0
 800cf34:	22fa      	movs	r2, #250	@ 0xfa
 800cf36:	0092      	lsls	r2, r2, #2
 800cf38:	189a      	adds	r2, r3, r2
 800cf3a:	4b05      	ldr	r3, [pc, #20]	@ (800cf50 <sen5x_statemachine+0x228>)
 800cf3c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800cf3e:	e002      	b.n	800cf46 <sen5x_statemachine+0x21e>
      break;
 800cf40:	46c0      	nop			@ (mov r8, r8)
 800cf42:	e000      	b.n	800cf46 <sen5x_statemachine+0x21e>
      break;
 800cf44:	46c0      	nop			@ (mov r8, r8)
}
 800cf46:	46c0      	nop			@ (mov r8, r8)
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	b002      	add	sp, #8
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	46c0      	nop			@ (mov r8, r8)
 800cf50:	20000eac 	.word	0x20000eac
 800cf54:	2000009d 	.word	0x2000009d
 800cf58:	0802b078 	.word	0x0802b078
 800cf5c:	0802a634 	.word	0x0802a634
 800cf60:	0802a04c 	.word	0x0802a04c
 800cf64:	002fefd8 	.word	0x002fefd8
 800cf68:	00005910 	.word	0x00005910
 800cf6c:	20000ea9 	.word	0x20000ea9
 800cf70:	0802a664 	.word	0x0802a664
 800cf74:	0802a67c 	.word	0x0802a67c
 800cf78:	08029fe0 	.word	0x08029fe0
 800cf7c:	0802a694 	.word	0x0802a694
 800cf80:	0802a020 	.word	0x0802a020
 800cf84:	20000eb0 	.word	0x20000eb0
 800cf88:	0802a6a8 	.word	0x0802a6a8
 800cf8c:	20000ea8 	.word	0x20000ea8
 800cf90:	20001e2d 	.word	0x20001e2d
 800cf94:	20000e9c 	.word	0x20000e9c
 800cf98:	0802a6d8 	.word	0x0802a6d8
 800cf9c:	00002710 	.word	0x00002710
 800cfa0:	20001e2e 	.word	0x20001e2e
 800cfa4:	0802a6f0 	.word	0x0802a6f0

0800cfa8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800cfae:	1dbb      	adds	r3, r7, #6
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800cfb4:	1dbc      	adds	r4, r7, #6
 800cfb6:	1dbb      	adds	r3, r7, #6
 800cfb8:	8819      	ldrh	r1, [r3, #0]
 800cfba:	003b      	movs	r3, r7
 800cfbc:	2221      	movs	r2, #33	@ 0x21
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	f001 fb56 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800cfc8:	1d3c      	adds	r4, r7, #4
 800cfca:	1dbb      	adds	r3, r7, #6
 800cfcc:	881a      	ldrh	r2, [r3, #0]
 800cfce:	003b      	movs	r3, r7
 800cfd0:	0019      	movs	r1, r3
 800cfd2:	2069      	movs	r0, #105	@ 0x69
 800cfd4:	f001 fbd0 	bl	800e778 <sensirion_i2c_write_data>
 800cfd8:	0003      	movs	r3, r0
 800cfda:	8023      	strh	r3, [r4, #0]
    if (error) {
 800cfdc:	1d3b      	adds	r3, r7, #4
 800cfde:	2200      	movs	r2, #0
 800cfe0:	5e9b      	ldrsh	r3, [r3, r2]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d003      	beq.n	800cfee <sen5x_start_measurement+0x46>
        return error;
 800cfe6:	1d3b      	adds	r3, r7, #4
 800cfe8:	2200      	movs	r2, #0
 800cfea:	5e9b      	ldrsh	r3, [r3, r2]
 800cfec:	e004      	b.n	800cff8 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800cfee:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <sen5x_start_measurement+0x58>)
 800cff0:	0018      	movs	r0, r3
 800cff2:	f7ff fdcd 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	0018      	movs	r0, r3
 800cffa:	46bd      	mov	sp, r7
 800cffc:	b003      	add	sp, #12
 800cffe:	bd90      	pop	{r4, r7, pc}
 800d000:	0000c350 	.word	0x0000c350

0800d004 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800d004:	b590      	push	{r4, r7, lr}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d00a:	1dbb      	adds	r3, r7, #6
 800d00c:	2200      	movs	r2, #0
 800d00e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800d010:	1dbc      	adds	r4, r7, #6
 800d012:	1dbb      	adds	r3, r7, #6
 800d014:	8819      	ldrh	r1, [r3, #0]
 800d016:	003b      	movs	r3, r7
 800d018:	2237      	movs	r2, #55	@ 0x37
 800d01a:	0018      	movs	r0, r3
 800d01c:	f001 fb28 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d020:	0003      	movs	r3, r0
 800d022:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d024:	1d3c      	adds	r4, r7, #4
 800d026:	1dbb      	adds	r3, r7, #6
 800d028:	881a      	ldrh	r2, [r3, #0]
 800d02a:	003b      	movs	r3, r7
 800d02c:	0019      	movs	r1, r3
 800d02e:	2069      	movs	r0, #105	@ 0x69
 800d030:	f001 fba2 	bl	800e778 <sensirion_i2c_write_data>
 800d034:	0003      	movs	r3, r0
 800d036:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d038:	1d3b      	adds	r3, r7, #4
 800d03a:	2200      	movs	r2, #0
 800d03c:	5e9b      	ldrsh	r3, [r3, r2]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d003      	beq.n	800d04a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800d042:	1d3b      	adds	r3, r7, #4
 800d044:	2200      	movs	r2, #0
 800d046:	5e9b      	ldrsh	r3, [r3, r2]
 800d048:	e004      	b.n	800d054 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800d04a:	4b04      	ldr	r3, [pc, #16]	@ (800d05c <sen5x_start_measurement_without_pm+0x58>)
 800d04c:	0018      	movs	r0, r3
 800d04e:	f7ff fd9f 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d052:	2300      	movs	r3, #0
}
 800d054:	0018      	movs	r0, r3
 800d056:	46bd      	mov	sp, r7
 800d058:	b003      	add	sp, #12
 800d05a:	bd90      	pop	{r4, r7, pc}
 800d05c:	0000c350 	.word	0x0000c350

0800d060 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800d060:	b590      	push	{r4, r7, lr}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d066:	1dbb      	adds	r3, r7, #6
 800d068:	2200      	movs	r2, #0
 800d06a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800d06c:	1dbc      	adds	r4, r7, #6
 800d06e:	2382      	movs	r3, #130	@ 0x82
 800d070:	005a      	lsls	r2, r3, #1
 800d072:	1dbb      	adds	r3, r7, #6
 800d074:	8819      	ldrh	r1, [r3, #0]
 800d076:	003b      	movs	r3, r7
 800d078:	0018      	movs	r0, r3
 800d07a:	f001 faf9 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d07e:	0003      	movs	r3, r0
 800d080:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d082:	1d3c      	adds	r4, r7, #4
 800d084:	1dbb      	adds	r3, r7, #6
 800d086:	881a      	ldrh	r2, [r3, #0]
 800d088:	003b      	movs	r3, r7
 800d08a:	0019      	movs	r1, r3
 800d08c:	2069      	movs	r0, #105	@ 0x69
 800d08e:	f001 fb73 	bl	800e778 <sensirion_i2c_write_data>
 800d092:	0003      	movs	r3, r0
 800d094:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d096:	1d3b      	adds	r3, r7, #4
 800d098:	2200      	movs	r2, #0
 800d09a:	5e9b      	ldrsh	r3, [r3, r2]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d003      	beq.n	800d0a8 <sen5x_stop_measurement+0x48>
        return error;
 800d0a0:	1d3b      	adds	r3, r7, #4
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	5e9b      	ldrsh	r3, [r3, r2]
 800d0a6:	e004      	b.n	800d0b2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d0a8:	4b04      	ldr	r3, [pc, #16]	@ (800d0bc <sen5x_stop_measurement+0x5c>)
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	f7ff fd70 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b003      	add	sp, #12
 800d0b8:	bd90      	pop	{r4, r7, pc}
 800d0ba:	46c0      	nop			@ (mov r8, r8)
 800d0bc:	00030d40 	.word	0x00030d40

0800d0c0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800d0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800d0c8:	250e      	movs	r5, #14
 800d0ca:	197b      	adds	r3, r7, r5
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800d0d0:	197c      	adds	r4, r7, r5
 800d0d2:	4a22      	ldr	r2, [pc, #136]	@ (800d15c <sen5x_read_data_ready+0x9c>)
 800d0d4:	197b      	adds	r3, r7, r5
 800d0d6:	8819      	ldrh	r1, [r3, #0]
 800d0d8:	2308      	movs	r3, #8
 800d0da:	18fb      	adds	r3, r7, r3
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f001 fac7 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d0e2:	0003      	movs	r3, r0
 800d0e4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d0e6:	260c      	movs	r6, #12
 800d0e8:	19bc      	adds	r4, r7, r6
 800d0ea:	197b      	adds	r3, r7, r5
 800d0ec:	881a      	ldrh	r2, [r3, #0]
 800d0ee:	2308      	movs	r3, #8
 800d0f0:	18fb      	adds	r3, r7, r3
 800d0f2:	0019      	movs	r1, r3
 800d0f4:	2069      	movs	r0, #105	@ 0x69
 800d0f6:	f001 fb3f 	bl	800e778 <sensirion_i2c_write_data>
 800d0fa:	0003      	movs	r3, r0
 800d0fc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d0fe:	19bb      	adds	r3, r7, r6
 800d100:	2200      	movs	r2, #0
 800d102:	5e9b      	ldrsh	r3, [r3, r2]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <sen5x_read_data_ready+0x50>
        return error;
 800d108:	19bb      	adds	r3, r7, r6
 800d10a:	2200      	movs	r2, #0
 800d10c:	5e9b      	ldrsh	r3, [r3, r2]
 800d10e:	e020      	b.n	800d152 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d110:	4b13      	ldr	r3, [pc, #76]	@ (800d160 <sen5x_read_data_ready+0xa0>)
 800d112:	0018      	movs	r0, r3
 800d114:	f7ff fd3c 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800d118:	250c      	movs	r5, #12
 800d11a:	197c      	adds	r4, r7, r5
 800d11c:	2308      	movs	r3, #8
 800d11e:	18fb      	adds	r3, r7, r3
 800d120:	2202      	movs	r2, #2
 800d122:	0019      	movs	r1, r3
 800d124:	2069      	movs	r0, #105	@ 0x69
 800d126:	f001 fb3f 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d12a:	0003      	movs	r3, r0
 800d12c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d12e:	197b      	adds	r3, r7, r5
 800d130:	2200      	movs	r2, #0
 800d132:	5e9b      	ldrsh	r3, [r3, r2]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <sen5x_read_data_ready+0x80>
        return error;
 800d138:	197b      	adds	r3, r7, r5
 800d13a:	2200      	movs	r2, #0
 800d13c:	5e9b      	ldrsh	r3, [r3, r2]
 800d13e:	e008      	b.n	800d152 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800d140:	2308      	movs	r3, #8
 800d142:	18fb      	adds	r3, r7, r3
 800d144:	785b      	ldrb	r3, [r3, #1]
 800d146:	1e5a      	subs	r2, r3, #1
 800d148:	4193      	sbcs	r3, r2
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d150:	2300      	movs	r3, #0
}
 800d152:	0018      	movs	r0, r3
 800d154:	46bd      	mov	sp, r7
 800d156:	b005      	add	sp, #20
 800d158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	00000202 	.word	0x00000202
 800d160:	00004e20 	.word	0x00004e20

0800d164 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800d164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d166:	b08d      	sub	sp, #52	@ 0x34
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800d172:	252e      	movs	r5, #46	@ 0x2e
 800d174:	197b      	adds	r3, r7, r5
 800d176:	2200      	movs	r2, #0
 800d178:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800d17a:	197c      	adds	r4, r7, r5
 800d17c:	23f1      	movs	r3, #241	@ 0xf1
 800d17e:	009a      	lsls	r2, r3, #2
 800d180:	197b      	adds	r3, r7, r5
 800d182:	8819      	ldrh	r1, [r3, #0]
 800d184:	2314      	movs	r3, #20
 800d186:	18fb      	adds	r3, r7, r3
 800d188:	0018      	movs	r0, r3
 800d18a:	f001 fa71 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d18e:	0003      	movs	r3, r0
 800d190:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d192:	262c      	movs	r6, #44	@ 0x2c
 800d194:	19bc      	adds	r4, r7, r6
 800d196:	197b      	adds	r3, r7, r5
 800d198:	881a      	ldrh	r2, [r3, #0]
 800d19a:	2314      	movs	r3, #20
 800d19c:	18fb      	adds	r3, r7, r3
 800d19e:	0019      	movs	r1, r3
 800d1a0:	2069      	movs	r0, #105	@ 0x69
 800d1a2:	f001 fae9 	bl	800e778 <sensirion_i2c_write_data>
 800d1a6:	0003      	movs	r3, r0
 800d1a8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d1aa:	19bb      	adds	r3, r7, r6
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	5e9b      	ldrsh	r3, [r3, r2]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <sen5x_read_measured_values+0x58>
        return error;
 800d1b4:	19bb      	adds	r3, r7, r6
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	5e9b      	ldrsh	r3, [r3, r2]
 800d1ba:	e060      	b.n	800d27e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d1bc:	4b32      	ldr	r3, [pc, #200]	@ (800d288 <sen5x_read_measured_values+0x124>)
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f7ff fce6 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800d1c4:	252c      	movs	r5, #44	@ 0x2c
 800d1c6:	197c      	adds	r4, r7, r5
 800d1c8:	2314      	movs	r3, #20
 800d1ca:	18fb      	adds	r3, r7, r3
 800d1cc:	2210      	movs	r2, #16
 800d1ce:	0019      	movs	r1, r3
 800d1d0:	2069      	movs	r0, #105	@ 0x69
 800d1d2:	f001 fae9 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d1d6:	0003      	movs	r3, r0
 800d1d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d1da:	197b      	adds	r3, r7, r5
 800d1dc:	2200      	movs	r2, #0
 800d1de:	5e9b      	ldrsh	r3, [r3, r2]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <sen5x_read_measured_values+0x88>
        return error;
 800d1e4:	197b      	adds	r3, r7, r5
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d1ea:	e048      	b.n	800d27e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800d1ec:	2414      	movs	r4, #20
 800d1ee:	193b      	adds	r3, r7, r4
 800d1f0:	0018      	movs	r0, r3
 800d1f2:	f000 fa79 	bl	800d6e8 <sensirion_common_bytes_to_uint16_t>
 800d1f6:	0003      	movs	r3, r0
 800d1f8:	001a      	movs	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800d1fe:	193b      	adds	r3, r7, r4
 800d200:	3302      	adds	r3, #2
 800d202:	0018      	movs	r0, r3
 800d204:	f000 fa70 	bl	800d6e8 <sensirion_common_bytes_to_uint16_t>
 800d208:	0003      	movs	r3, r0
 800d20a:	001a      	movs	r2, r3
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800d210:	193b      	adds	r3, r7, r4
 800d212:	3304      	adds	r3, #4
 800d214:	0018      	movs	r0, r3
 800d216:	f000 fa67 	bl	800d6e8 <sensirion_common_bytes_to_uint16_t>
 800d21a:	0003      	movs	r3, r0
 800d21c:	001a      	movs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800d222:	193b      	adds	r3, r7, r4
 800d224:	3306      	adds	r3, #6
 800d226:	0018      	movs	r0, r3
 800d228:	f000 fa5e 	bl	800d6e8 <sensirion_common_bytes_to_uint16_t>
 800d22c:	0003      	movs	r3, r0
 800d22e:	001a      	movs	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800d234:	193b      	adds	r3, r7, r4
 800d236:	3308      	adds	r3, #8
 800d238:	0018      	movs	r0, r3
 800d23a:	f000 fa81 	bl	800d740 <sensirion_common_bytes_to_int16_t>
 800d23e:	0003      	movs	r3, r0
 800d240:	001a      	movs	r2, r3
 800d242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d244:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800d246:	193b      	adds	r3, r7, r4
 800d248:	330a      	adds	r3, #10
 800d24a:	0018      	movs	r0, r3
 800d24c:	f000 fa78 	bl	800d740 <sensirion_common_bytes_to_int16_t>
 800d250:	0003      	movs	r3, r0
 800d252:	001a      	movs	r2, r3
 800d254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d256:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800d258:	193b      	adds	r3, r7, r4
 800d25a:	330c      	adds	r3, #12
 800d25c:	0018      	movs	r0, r3
 800d25e:	f000 fa6f 	bl	800d740 <sensirion_common_bytes_to_int16_t>
 800d262:	0003      	movs	r3, r0
 800d264:	001a      	movs	r2, r3
 800d266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d268:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800d26a:	193b      	adds	r3, r7, r4
 800d26c:	330e      	adds	r3, #14
 800d26e:	0018      	movs	r0, r3
 800d270:	f000 fa66 	bl	800d740 <sensirion_common_bytes_to_int16_t>
 800d274:	0003      	movs	r3, r0
 800d276:	001a      	movs	r2, r3
 800d278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d27a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800d27c:	2300      	movs	r3, #0
}
 800d27e:	0018      	movs	r0, r3
 800d280:	46bd      	mov	sp, r7
 800d282:	b00d      	add	sp, #52	@ 0x34
 800d284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d286:	46c0      	nop			@ (mov r8, r8)
 800d288:	00004e20 	.word	0x00004e20

0800d28c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800d28c:	b590      	push	{r4, r7, lr}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d292:	1dbb      	adds	r3, r7, #6
 800d294:	2200      	movs	r2, #0
 800d296:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800d298:	1dbc      	adds	r4, r7, #6
 800d29a:	4a12      	ldr	r2, [pc, #72]	@ (800d2e4 <sen5x_start_fan_cleaning+0x58>)
 800d29c:	1dbb      	adds	r3, r7, #6
 800d29e:	8819      	ldrh	r1, [r3, #0]
 800d2a0:	003b      	movs	r3, r7
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	f001 f9e4 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d2a8:	0003      	movs	r3, r0
 800d2aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d2ac:	1d3c      	adds	r4, r7, #4
 800d2ae:	1dbb      	adds	r3, r7, #6
 800d2b0:	881a      	ldrh	r2, [r3, #0]
 800d2b2:	003b      	movs	r3, r7
 800d2b4:	0019      	movs	r1, r3
 800d2b6:	2069      	movs	r0, #105	@ 0x69
 800d2b8:	f001 fa5e 	bl	800e778 <sensirion_i2c_write_data>
 800d2bc:	0003      	movs	r3, r0
 800d2be:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d2c0:	1d3b      	adds	r3, r7, #4
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	5e9b      	ldrsh	r3, [r3, r2]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d003      	beq.n	800d2d2 <sen5x_start_fan_cleaning+0x46>
        return error;
 800d2ca:	1d3b      	adds	r3, r7, #4
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	5e9b      	ldrsh	r3, [r3, r2]
 800d2d0:	e004      	b.n	800d2dc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d2d2:	4b05      	ldr	r3, [pc, #20]	@ (800d2e8 <sen5x_start_fan_cleaning+0x5c>)
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f7ff fc5b 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	0018      	movs	r0, r3
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	b003      	add	sp, #12
 800d2e2:	bd90      	pop	{r4, r7, pc}
 800d2e4:	00005607 	.word	0x00005607
 800d2e8:	00004e20 	.word	0x00004e20

0800d2ec <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	0004      	movs	r4, r0
 800d2f4:	0008      	movs	r0, r1
 800d2f6:	0011      	movs	r1, r2
 800d2f8:	1dbb      	adds	r3, r7, #6
 800d2fa:	1c22      	adds	r2, r4, #0
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	1d3b      	adds	r3, r7, #4
 800d300:	1c02      	adds	r2, r0, #0
 800d302:	801a      	strh	r2, [r3, #0]
 800d304:	1cbb      	adds	r3, r7, #2
 800d306:	1c0a      	adds	r2, r1, #0
 800d308:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800d30a:	2516      	movs	r5, #22
 800d30c:	197b      	adds	r3, r7, r5
 800d30e:	2200      	movs	r2, #0
 800d310:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800d312:	197c      	adds	r4, r7, r5
 800d314:	4a25      	ldr	r2, [pc, #148]	@ (800d3ac <sen5x_set_temperature_offset_parameters+0xc0>)
 800d316:	197b      	adds	r3, r7, r5
 800d318:	8819      	ldrh	r1, [r3, #0]
 800d31a:	2608      	movs	r6, #8
 800d31c:	19bb      	adds	r3, r7, r6
 800d31e:	0018      	movs	r0, r3
 800d320:	f001 f9a6 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d324:	0003      	movs	r3, r0
 800d326:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800d328:	197c      	adds	r4, r7, r5
 800d32a:	1dbb      	adds	r3, r7, #6
 800d32c:	2200      	movs	r2, #0
 800d32e:	5e9a      	ldrsh	r2, [r3, r2]
 800d330:	197b      	adds	r3, r7, r5
 800d332:	8819      	ldrh	r1, [r3, #0]
 800d334:	19bb      	adds	r3, r7, r6
 800d336:	0018      	movs	r0, r3
 800d338:	f001 fa05 	bl	800e746 <sensirion_i2c_add_int16_t_to_buffer>
 800d33c:	0003      	movs	r3, r0
 800d33e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800d340:	197c      	adds	r4, r7, r5
 800d342:	1d3b      	adds	r3, r7, #4
 800d344:	2200      	movs	r2, #0
 800d346:	5e9a      	ldrsh	r2, [r3, r2]
 800d348:	197b      	adds	r3, r7, r5
 800d34a:	8819      	ldrh	r1, [r3, #0]
 800d34c:	19bb      	adds	r3, r7, r6
 800d34e:	0018      	movs	r0, r3
 800d350:	f001 f9f9 	bl	800e746 <sensirion_i2c_add_int16_t_to_buffer>
 800d354:	0003      	movs	r3, r0
 800d356:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800d358:	197c      	adds	r4, r7, r5
 800d35a:	1cbb      	adds	r3, r7, #2
 800d35c:	881a      	ldrh	r2, [r3, #0]
 800d35e:	197b      	adds	r3, r7, r5
 800d360:	8819      	ldrh	r1, [r3, #0]
 800d362:	19bb      	adds	r3, r7, r6
 800d364:	0018      	movs	r0, r3
 800d366:	f001 f9af 	bl	800e6c8 <sensirion_i2c_add_uint16_t_to_buffer>
 800d36a:	0003      	movs	r3, r0
 800d36c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d36e:	2214      	movs	r2, #20
 800d370:	18bc      	adds	r4, r7, r2
 800d372:	197b      	adds	r3, r7, r5
 800d374:	881a      	ldrh	r2, [r3, #0]
 800d376:	19bb      	adds	r3, r7, r6
 800d378:	0019      	movs	r1, r3
 800d37a:	2069      	movs	r0, #105	@ 0x69
 800d37c:	f001 f9fc 	bl	800e778 <sensirion_i2c_write_data>
 800d380:	0003      	movs	r3, r0
 800d382:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d384:	2214      	movs	r2, #20
 800d386:	18bb      	adds	r3, r7, r2
 800d388:	2100      	movs	r1, #0
 800d38a:	5e5b      	ldrsh	r3, [r3, r1]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800d390:	18bb      	adds	r3, r7, r2
 800d392:	2200      	movs	r2, #0
 800d394:	5e9b      	ldrsh	r3, [r3, r2]
 800d396:	e004      	b.n	800d3a2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d398:	4b05      	ldr	r3, [pc, #20]	@ (800d3b0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800d39a:	0018      	movs	r0, r3
 800d39c:	f7ff fbf8 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	b007      	add	sp, #28
 800d3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3aa:	46c0      	nop			@ (mov r8, r8)
 800d3ac:	000060b2 	.word	0x000060b2
 800d3b0:	00004e20 	.word	0x00004e20

0800d3b4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	b091      	sub	sp, #68	@ 0x44
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	000a      	movs	r2, r1
 800d3be:	1cfb      	adds	r3, r7, #3
 800d3c0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d3c2:	253e      	movs	r5, #62	@ 0x3e
 800d3c4:	197b      	adds	r3, r7, r5
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800d3ca:	197c      	adds	r4, r7, r5
 800d3cc:	4a22      	ldr	r2, [pc, #136]	@ (800d458 <sen5x_get_product_name+0xa4>)
 800d3ce:	197b      	adds	r3, r7, r5
 800d3d0:	8819      	ldrh	r1, [r3, #0]
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	18fb      	adds	r3, r7, r3
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	f001 f94a 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d3dc:	0003      	movs	r3, r0
 800d3de:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d3e0:	263c      	movs	r6, #60	@ 0x3c
 800d3e2:	19bc      	adds	r4, r7, r6
 800d3e4:	197b      	adds	r3, r7, r5
 800d3e6:	881a      	ldrh	r2, [r3, #0]
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	18fb      	adds	r3, r7, r3
 800d3ec:	0019      	movs	r1, r3
 800d3ee:	2069      	movs	r0, #105	@ 0x69
 800d3f0:	f001 f9c2 	bl	800e778 <sensirion_i2c_write_data>
 800d3f4:	0003      	movs	r3, r0
 800d3f6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d3f8:	19bb      	adds	r3, r7, r6
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	5e9b      	ldrsh	r3, [r3, r2]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <sen5x_get_product_name+0x56>
        return error;
 800d402:	19bb      	adds	r3, r7, r6
 800d404:	2200      	movs	r2, #0
 800d406:	5e9b      	ldrsh	r3, [r3, r2]
 800d408:	e021      	b.n	800d44e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d40a:	4b14      	ldr	r3, [pc, #80]	@ (800d45c <sen5x_get_product_name+0xa8>)
 800d40c:	0018      	movs	r0, r3
 800d40e:	f7ff fbbf 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d412:	253c      	movs	r5, #60	@ 0x3c
 800d414:	197c      	adds	r4, r7, r5
 800d416:	230c      	movs	r3, #12
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	2220      	movs	r2, #32
 800d41c:	0019      	movs	r1, r3
 800d41e:	2069      	movs	r0, #105	@ 0x69
 800d420:	f001 f9c2 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d424:	0003      	movs	r3, r0
 800d426:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d428:	197b      	adds	r3, r7, r5
 800d42a:	2200      	movs	r2, #0
 800d42c:	5e9b      	ldrsh	r3, [r3, r2]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <sen5x_get_product_name+0x86>
        return error;
 800d432:	197b      	adds	r3, r7, r5
 800d434:	2200      	movs	r2, #0
 800d436:	5e9b      	ldrsh	r3, [r3, r2]
 800d438:	e009      	b.n	800d44e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800d43a:	1cfb      	adds	r3, r7, #3
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	b29a      	uxth	r2, r3
 800d440:	6879      	ldr	r1, [r7, #4]
 800d442:	230c      	movs	r3, #12
 800d444:	18fb      	adds	r3, r7, r3
 800d446:	0018      	movs	r0, r3
 800d448:	f000 f988 	bl	800d75c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	0018      	movs	r0, r3
 800d450:	46bd      	mov	sp, r7
 800d452:	b011      	add	sp, #68	@ 0x44
 800d454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	0000d014 	.word	0x0000d014
 800d45c:	0000c350 	.word	0x0000c350

0800d460 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800d460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d462:	b091      	sub	sp, #68	@ 0x44
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	000a      	movs	r2, r1
 800d46a:	1cfb      	adds	r3, r7, #3
 800d46c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d46e:	253e      	movs	r5, #62	@ 0x3e
 800d470:	197b      	adds	r3, r7, r5
 800d472:	2200      	movs	r2, #0
 800d474:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800d476:	197c      	adds	r4, r7, r5
 800d478:	4a22      	ldr	r2, [pc, #136]	@ (800d504 <sen5x_get_serial_number+0xa4>)
 800d47a:	197b      	adds	r3, r7, r5
 800d47c:	8819      	ldrh	r1, [r3, #0]
 800d47e:	230c      	movs	r3, #12
 800d480:	18fb      	adds	r3, r7, r3
 800d482:	0018      	movs	r0, r3
 800d484:	f001 f8f4 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d488:	0003      	movs	r3, r0
 800d48a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d48c:	263c      	movs	r6, #60	@ 0x3c
 800d48e:	19bc      	adds	r4, r7, r6
 800d490:	197b      	adds	r3, r7, r5
 800d492:	881a      	ldrh	r2, [r3, #0]
 800d494:	230c      	movs	r3, #12
 800d496:	18fb      	adds	r3, r7, r3
 800d498:	0019      	movs	r1, r3
 800d49a:	2069      	movs	r0, #105	@ 0x69
 800d49c:	f001 f96c 	bl	800e778 <sensirion_i2c_write_data>
 800d4a0:	0003      	movs	r3, r0
 800d4a2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d4a4:	19bb      	adds	r3, r7, r6
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	5e9b      	ldrsh	r3, [r3, r2]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <sen5x_get_serial_number+0x56>
        return error;
 800d4ae:	19bb      	adds	r3, r7, r6
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	5e9b      	ldrsh	r3, [r3, r2]
 800d4b4:	e021      	b.n	800d4fa <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d4b6:	4b14      	ldr	r3, [pc, #80]	@ (800d508 <sen5x_get_serial_number+0xa8>)
 800d4b8:	0018      	movs	r0, r3
 800d4ba:	f7ff fb69 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d4be:	253c      	movs	r5, #60	@ 0x3c
 800d4c0:	197c      	adds	r4, r7, r5
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	18fb      	adds	r3, r7, r3
 800d4c6:	2220      	movs	r2, #32
 800d4c8:	0019      	movs	r1, r3
 800d4ca:	2069      	movs	r0, #105	@ 0x69
 800d4cc:	f001 f96c 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d4d0:	0003      	movs	r3, r0
 800d4d2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d4d4:	197b      	adds	r3, r7, r5
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	5e9b      	ldrsh	r3, [r3, r2]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <sen5x_get_serial_number+0x86>
        return error;
 800d4de:	197b      	adds	r3, r7, r5
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	5e9b      	ldrsh	r3, [r3, r2]
 800d4e4:	e009      	b.n	800d4fa <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800d4e6:	1cfb      	adds	r3, r7, #3
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	6879      	ldr	r1, [r7, #4]
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	18fb      	adds	r3, r7, r3
 800d4f2:	0018      	movs	r0, r3
 800d4f4:	f000 f932 	bl	800d75c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	0018      	movs	r0, r3
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	b011      	add	sp, #68	@ 0x44
 800d500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	0000d033 	.word	0x0000d033
 800d508:	0000c350 	.word	0x0000c350

0800d50c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800d50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50e:	b089      	sub	sp, #36	@ 0x24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
 800d518:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800d51a:	251e      	movs	r5, #30
 800d51c:	197b      	adds	r3, r7, r5
 800d51e:	2200      	movs	r2, #0
 800d520:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800d522:	197c      	adds	r4, r7, r5
 800d524:	23d1      	movs	r3, #209	@ 0xd1
 800d526:	021a      	lsls	r2, r3, #8
 800d528:	197b      	adds	r3, r7, r5
 800d52a:	8819      	ldrh	r1, [r3, #0]
 800d52c:	2310      	movs	r3, #16
 800d52e:	18fb      	adds	r3, r7, r3
 800d530:	0018      	movs	r0, r3
 800d532:	f001 f89d 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d536:	0003      	movs	r3, r0
 800d538:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d53a:	261c      	movs	r6, #28
 800d53c:	19bc      	adds	r4, r7, r6
 800d53e:	197b      	adds	r3, r7, r5
 800d540:	881a      	ldrh	r2, [r3, #0]
 800d542:	2310      	movs	r3, #16
 800d544:	18fb      	adds	r3, r7, r3
 800d546:	0019      	movs	r1, r3
 800d548:	2069      	movs	r0, #105	@ 0x69
 800d54a:	f001 f915 	bl	800e778 <sensirion_i2c_write_data>
 800d54e:	0003      	movs	r3, r0
 800d550:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d552:	19bb      	adds	r3, r7, r6
 800d554:	2200      	movs	r2, #0
 800d556:	5e9b      	ldrsh	r3, [r3, r2]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <sen5x_get_version+0x58>
        return error;
 800d55c:	19bb      	adds	r3, r7, r6
 800d55e:	2200      	movs	r2, #0
 800d560:	5e9b      	ldrsh	r3, [r3, r2]
 800d562:	e038      	b.n	800d5d6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d564:	4b1e      	ldr	r3, [pc, #120]	@ (800d5e0 <sen5x_get_version+0xd4>)
 800d566:	0018      	movs	r0, r3
 800d568:	f7ff fb12 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800d56c:	251c      	movs	r5, #28
 800d56e:	197c      	adds	r4, r7, r5
 800d570:	2310      	movs	r3, #16
 800d572:	18fb      	adds	r3, r7, r3
 800d574:	2208      	movs	r2, #8
 800d576:	0019      	movs	r1, r3
 800d578:	2069      	movs	r0, #105	@ 0x69
 800d57a:	f001 f915 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d57e:	0003      	movs	r3, r0
 800d580:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d582:	197b      	adds	r3, r7, r5
 800d584:	2200      	movs	r2, #0
 800d586:	5e9b      	ldrsh	r3, [r3, r2]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <sen5x_get_version+0x88>
        return error;
 800d58c:	197b      	adds	r3, r7, r5
 800d58e:	2200      	movs	r2, #0
 800d590:	5e9b      	ldrsh	r3, [r3, r2]
 800d592:	e020      	b.n	800d5d6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800d594:	2110      	movs	r1, #16
 800d596:	187b      	adds	r3, r7, r1
 800d598:	781a      	ldrb	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800d59e:	187b      	adds	r3, r7, r1
 800d5a0:	785a      	ldrb	r2, [r3, #1]
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800d5a6:	187b      	adds	r3, r7, r1
 800d5a8:	789b      	ldrb	r3, [r3, #2]
 800d5aa:	1e5a      	subs	r2, r3, #1
 800d5ac:	4193      	sbcs	r3, r2
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800d5b4:	187b      	adds	r3, r7, r1
 800d5b6:	78da      	ldrb	r2, [r3, #3]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800d5bc:	187b      	adds	r3, r7, r1
 800d5be:	791a      	ldrb	r2, [r3, #4]
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800d5c4:	187b      	adds	r3, r7, r1
 800d5c6:	795a      	ldrb	r2, [r3, #5]
 800d5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ca:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800d5cc:	187b      	adds	r3, r7, r1
 800d5ce:	799a      	ldrb	r2, [r3, #6]
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	0018      	movs	r0, r3
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	b009      	add	sp, #36	@ 0x24
 800d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5de:	46c0      	nop			@ (mov r8, r8)
 800d5e0:	00004e20 	.word	0x00004e20

0800d5e4 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800d5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800d5ec:	2516      	movs	r5, #22
 800d5ee:	197b      	adds	r3, r7, r5
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800d5f4:	197c      	adds	r4, r7, r5
 800d5f6:	4a22      	ldr	r2, [pc, #136]	@ (800d680 <sen5x_read_device_status+0x9c>)
 800d5f8:	197b      	adds	r3, r7, r5
 800d5fa:	8819      	ldrh	r1, [r3, #0]
 800d5fc:	230c      	movs	r3, #12
 800d5fe:	18fb      	adds	r3, r7, r3
 800d600:	0018      	movs	r0, r3
 800d602:	f001 f835 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d606:	0003      	movs	r3, r0
 800d608:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d60a:	2614      	movs	r6, #20
 800d60c:	19bc      	adds	r4, r7, r6
 800d60e:	197b      	adds	r3, r7, r5
 800d610:	881a      	ldrh	r2, [r3, #0]
 800d612:	230c      	movs	r3, #12
 800d614:	18fb      	adds	r3, r7, r3
 800d616:	0019      	movs	r1, r3
 800d618:	2069      	movs	r0, #105	@ 0x69
 800d61a:	f001 f8ad 	bl	800e778 <sensirion_i2c_write_data>
 800d61e:	0003      	movs	r3, r0
 800d620:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d622:	19bb      	adds	r3, r7, r6
 800d624:	2200      	movs	r2, #0
 800d626:	5e9b      	ldrsh	r3, [r3, r2]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <sen5x_read_device_status+0x50>
        return error;
 800d62c:	19bb      	adds	r3, r7, r6
 800d62e:	2200      	movs	r2, #0
 800d630:	5e9b      	ldrsh	r3, [r3, r2]
 800d632:	e020      	b.n	800d676 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d634:	4b13      	ldr	r3, [pc, #76]	@ (800d684 <sen5x_read_device_status+0xa0>)
 800d636:	0018      	movs	r0, r3
 800d638:	f7ff faaa 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800d63c:	2514      	movs	r5, #20
 800d63e:	197c      	adds	r4, r7, r5
 800d640:	230c      	movs	r3, #12
 800d642:	18fb      	adds	r3, r7, r3
 800d644:	2204      	movs	r2, #4
 800d646:	0019      	movs	r1, r3
 800d648:	2069      	movs	r0, #105	@ 0x69
 800d64a:	f001 f8ad 	bl	800e7a8 <sensirion_i2c_read_data_inplace>
 800d64e:	0003      	movs	r3, r0
 800d650:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d652:	197b      	adds	r3, r7, r5
 800d654:	2200      	movs	r2, #0
 800d656:	5e9b      	ldrsh	r3, [r3, r2]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <sen5x_read_device_status+0x80>
        return error;
 800d65c:	197b      	adds	r3, r7, r5
 800d65e:	2200      	movs	r2, #0
 800d660:	5e9b      	ldrsh	r3, [r3, r2]
 800d662:	e008      	b.n	800d676 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800d664:	230c      	movs	r3, #12
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	0018      	movs	r0, r3
 800d66a:	f000 f850 	bl	800d70e <sensirion_common_bytes_to_uint32_t>
 800d66e:	0002      	movs	r2, r0
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800d674:	2300      	movs	r3, #0
}
 800d676:	0018      	movs	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	b007      	add	sp, #28
 800d67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67e:	46c0      	nop			@ (mov r8, r8)
 800d680:	0000d206 	.word	0x0000d206
 800d684:	00004e20 	.word	0x00004e20

0800d688 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d68e:	1dbb      	adds	r3, r7, #6
 800d690:	2200      	movs	r2, #0
 800d692:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800d694:	1dbc      	adds	r4, r7, #6
 800d696:	4a12      	ldr	r2, [pc, #72]	@ (800d6e0 <sen5x_device_reset+0x58>)
 800d698:	1dbb      	adds	r3, r7, #6
 800d69a:	8819      	ldrh	r1, [r3, #0]
 800d69c:	003b      	movs	r3, r7
 800d69e:	0018      	movs	r0, r3
 800d6a0:	f000 ffe6 	bl	800e670 <sensirion_i2c_add_command_to_buffer>
 800d6a4:	0003      	movs	r3, r0
 800d6a6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d6a8:	1d3c      	adds	r4, r7, #4
 800d6aa:	1dbb      	adds	r3, r7, #6
 800d6ac:	881a      	ldrh	r2, [r3, #0]
 800d6ae:	003b      	movs	r3, r7
 800d6b0:	0019      	movs	r1, r3
 800d6b2:	2069      	movs	r0, #105	@ 0x69
 800d6b4:	f001 f860 	bl	800e778 <sensirion_i2c_write_data>
 800d6b8:	0003      	movs	r3, r0
 800d6ba:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d6bc:	1d3b      	adds	r3, r7, #4
 800d6be:	2200      	movs	r2, #0
 800d6c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d003      	beq.n	800d6ce <sen5x_device_reset+0x46>
        return error;
 800d6c6:	1d3b      	adds	r3, r7, #4
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	5e9b      	ldrsh	r3, [r3, r2]
 800d6cc:	e004      	b.n	800d6d8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d6ce:	4b05      	ldr	r3, [pc, #20]	@ (800d6e4 <sen5x_device_reset+0x5c>)
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f7ff fa5d 	bl	800cb90 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	0018      	movs	r0, r3
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	b003      	add	sp, #12
 800d6de:	bd90      	pop	{r4, r7, pc}
 800d6e0:	0000d304 	.word	0x0000d304
 800d6e4:	00030d40 	.word	0x00030d40

0800d6e8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	b21a      	sxth	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	b21b      	sxth	r3, r3
 800d700:	4313      	orrs	r3, r2
 800d702:	b21b      	sxth	r3, r3
 800d704:	b29b      	uxth	r3, r3
}
 800d706:	0018      	movs	r0, r3
 800d708:	46bd      	mov	sp, r7
 800d70a:	b002      	add	sp, #8
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	061a      	lsls	r2, r3, #24
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	3301      	adds	r3, #1
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	041b      	lsls	r3, r3, #16
 800d724:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	3302      	adds	r3, #2
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d72e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	3203      	adds	r2, #3
 800d734:	7812      	ldrb	r2, [r2, #0]
 800d736:	4313      	orrs	r3, r2
}
 800d738:	0018      	movs	r0, r3
 800d73a:	46bd      	mov	sp, r7
 800d73c:	b002      	add	sp, #8
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	0018      	movs	r0, r3
 800d74c:	f7ff ffcc 	bl	800d6e8 <sensirion_common_bytes_to_uint16_t>
 800d750:	0003      	movs	r3, r0
 800d752:	b21b      	sxth	r3, r3
}
 800d754:	0018      	movs	r0, r3
 800d756:	46bd      	mov	sp, r7
 800d758:	b002      	add	sp, #8
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	1dbb      	adds	r3, r7, #6
 800d768:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800d76a:	2316      	movs	r3, #22
 800d76c:	18fb      	adds	r3, r7, r3
 800d76e:	2200      	movs	r2, #0
 800d770:	801a      	strh	r2, [r3, #0]
 800d772:	e00f      	b.n	800d794 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800d774:	2016      	movs	r0, #22
 800d776:	183b      	adds	r3, r7, r0
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	18d2      	adds	r2, r2, r3
 800d77e:	183b      	adds	r3, r7, r0
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	68b9      	ldr	r1, [r7, #8]
 800d784:	18cb      	adds	r3, r1, r3
 800d786:	7812      	ldrb	r2, [r2, #0]
 800d788:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800d78a:	183b      	adds	r3, r7, r0
 800d78c:	881a      	ldrh	r2, [r3, #0]
 800d78e:	183b      	adds	r3, r7, r0
 800d790:	3201      	adds	r2, #1
 800d792:	801a      	strh	r2, [r3, #0]
 800d794:	2316      	movs	r3, #22
 800d796:	18fa      	adds	r2, r7, r3
 800d798:	1dbb      	adds	r3, r7, #6
 800d79a:	8812      	ldrh	r2, [r2, #0]
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d3e8      	bcc.n	800d774 <sensirion_common_copy_bytes+0x18>
    }
}
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	46c0      	nop			@ (mov r8, r8)
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	b006      	add	sp, #24
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d113      	bne.n	800d7f2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	22fe      	movs	r2, #254	@ 0xfe
 800d7ce:	0592      	lsls	r2, r2, #22
 800d7d0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d840 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800d7d6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	4a1a      	ldr	r2, [pc, #104]	@ (800d844 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800d7dc:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	4a19      	ldr	r2, [pc, #100]	@ (800d848 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800d7e2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	4a19      	ldr	r2, [pc, #100]	@ (800d84c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800d7e8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	4a18      	ldr	r2, [pc, #96]	@ (800d850 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800d7ee:	61da      	str	r2, [r3, #28]
 800d7f0:	e011      	b.n	800d816 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	4a17      	ldr	r2, [pc, #92]	@ (800d854 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800d7f6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	4a17      	ldr	r2, [pc, #92]	@ (800d858 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800d7fc:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	4a16      	ldr	r2, [pc, #88]	@ (800d85c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800d802:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	4a16      	ldr	r2, [pc, #88]	@ (800d860 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800d808:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	4a15      	ldr	r2, [pc, #84]	@ (800d864 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800d80e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4a15      	ldr	r2, [pc, #84]	@ (800d868 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800d814:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	4a14      	ldr	r2, [pc, #80]	@ (800d86c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800d81a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4a14      	ldr	r2, [pc, #80]	@ (800d870 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d820:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	4a12      	ldr	r2, [pc, #72]	@ (800d870 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d826:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4a12      	ldr	r2, [pc, #72]	@ (800d874 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800d82c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	0018      	movs	r0, r3
 800d832:	f000 f833 	bl	800d89c <GasIndexAlgorithm_reset>
}
 800d836:	46c0      	nop			@ (mov r8, r8)
 800d838:	46bd      	mov	sp, r7
 800d83a:	b004      	add	sp, #16
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	00002710 	.word	0x00002710
 800d844:	44340000 	.word	0x44340000
 800d848:	46859800 	.word	0x46859800
 800d84c:	46a05000 	.word	0x46a05000
 800d850:	41f00000 	.word	0x41f00000
 800d854:	42c80000 	.word	0x42c80000
 800d858:	00004e20 	.word	0x00004e20
 800d85c:	43340000 	.word	0x43340000
 800d860:	4528c000 	.word	0x4528c000
 800d864:	45a32000 	.word	0x45a32000
 800d868:	43aa0000 	.word	0x43aa0000
 800d86c:	43660000 	.word	0x43660000
 800d870:	41400000 	.word	0x41400000
 800d874:	42480000 	.word	0x42480000

0800d878 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800d882:	4a05      	ldr	r2, [pc, #20]	@ (800d898 <GasIndexAlgorithm_init+0x20>)
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	0018      	movs	r0, r3
 800d88a:	f7ff ff8f 	bl	800d7ac <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800d88e:	46c0      	nop			@ (mov r8, r8)
 800d890:	46bd      	mov	sp, r7
 800d892:	b002      	add	sp, #8
 800d894:	bd80      	pop	{r7, pc}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	44610000 	.word	0x44610000

0800d89c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f000 f805 	bl	800d8c8 <GasIndexAlgorithm__init_instances>
}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b002      	add	sp, #8
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800d8c8:	b590      	push	{r4, r7, lr}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	f000 f8e8 	bl	800daa8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	0018      	movs	r0, r3
 800d8dc:	f000 f9a6 	bl	800dc2c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800d8e0:	1c04      	adds	r4, r0, #0
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f000 f9ab 	bl	800dc40 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800d8ea:	1c02      	adds	r2, r0, #0
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	1c21      	adds	r1, r4, #0
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	f000 fc3b 	bl	800e16c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d107      	bne.n	800d90e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d8fe:	23fe      	movs	r3, #254	@ 0xfe
 800d900:	059b      	lsls	r3, r3, #22
 800d902:	4a0a      	ldr	r2, [pc, #40]	@ (800d92c <GasIndexAlgorithm__init_instances+0x64>)
 800d904:	490a      	ldr	r1, [pc, #40]	@ (800d930 <GasIndexAlgorithm__init_instances+0x68>)
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fc86 	bl	800e218 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800d90c:	e005      	b.n	800d91a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d90e:	4b09      	ldr	r3, [pc, #36]	@ (800d934 <GasIndexAlgorithm__init_instances+0x6c>)
 800d910:	4a09      	ldr	r2, [pc, #36]	@ (800d938 <GasIndexAlgorithm__init_instances+0x70>)
 800d912:	490a      	ldr	r1, [pc, #40]	@ (800d93c <GasIndexAlgorithm__init_instances+0x74>)
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fc7f 	bl	800e218 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	0018      	movs	r0, r3
 800d91e:	f000 fd35 	bl	800e38c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800d922:	46c0      	nop			@ (mov r8, r8)
 800d924:	46bd      	mov	sp, r7
 800d926:	b003      	add	sp, #12
 800d928:	bd90      	pop	{r4, r7, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	bc257a78 	.word	0xbc257a78
 800d930:	44198000 	.word	0x44198000
 800d934:	42c80000 	.word	0x42c80000
 800d938:	bbd4fdf4 	.word	0xbbd4fdf4
 800d93c:	43550000 	.word	0x43550000

0800d940 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800d940:	b590      	push	{r4, r7, lr}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d950:	4952      	ldr	r1, [pc, #328]	@ (800da9c <GasIndexAlgorithm_process+0x15c>)
 800d952:	1c18      	adds	r0, r3, #0
 800d954:	f7f2 fdf6 	bl	8000544 <__aeabi_fcmple>
 800d958:	1e03      	subs	r3, r0, #0
 800d95a:	d00c      	beq.n	800d976 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	1c19      	adds	r1, r3, #0
 800d966:	1c10      	adds	r0, r2, #0
 800d968:	f7f2 ffaa 	bl	80008c0 <__aeabi_fadd>
 800d96c:	1c03      	adds	r3, r0, #0
 800d96e:	1c1a      	adds	r2, r3, #0
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	631a      	str	r2, [r3, #48]	@ 0x30
 800d974:	e080      	b.n	800da78 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dd25      	ble.n	800d9c8 <GasIndexAlgorithm_process+0x88>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	4a48      	ldr	r2, [pc, #288]	@ (800daa0 <GasIndexAlgorithm_process+0x160>)
 800d980:	4293      	cmp	r3, r2
 800d982:	dc21      	bgt.n	800d9c8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	dc04      	bgt.n	800d998 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	3301      	adds	r3, #1
 800d994:	60bb      	str	r3, [r7, #8]
 800d996:	e00d      	b.n	800d9b4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	4a41      	ldr	r2, [pc, #260]	@ (800daa4 <GasIndexAlgorithm_process+0x164>)
 800d99e:	4694      	mov	ip, r2
 800d9a0:	4463      	add	r3, ip
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	dd05      	ble.n	800d9b4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	4a3d      	ldr	r2, [pc, #244]	@ (800daa4 <GasIndexAlgorithm_process+0x164>)
 800d9ae:	4694      	mov	ip, r2
 800d9b0:	4463      	add	r3, ip
 800d9b2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	0018      	movs	r0, r3
 800d9be:	f7f3 fe07 	bl	80015d0 <__aeabi_i2f>
 800d9c2:	1c02      	adds	r2, r0, #0
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	0018      	movs	r0, r3
 800d9d4:	f000 f945 	bl	800dc62 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800d9d8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800d9da:	d014      	beq.n	800da06 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	1c11      	adds	r1, r2, #0
 800d9e4:	0018      	movs	r0, r3
 800d9e6:	f000 fbd1 	bl	800e18c <GasIndexAlgorithm__mox_model__process>
 800d9ea:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	1c11      	adds	r1, r2, #0
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f000 fc25 	bl	800e248 <GasIndexAlgorithm__sigmoid_scaled__process>
 800d9fe:	1c02      	adds	r2, r0, #0
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	639a      	str	r2, [r3, #56]	@ 0x38
 800da04:	e003      	b.n	800da0e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	1c11      	adds	r1, r2, #0
 800da16:	0018      	movs	r0, r3
 800da18:	f000 fcec 	bl	800e3f4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800da1c:	1c02      	adds	r2, r0, #0
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da26:	21fc      	movs	r1, #252	@ 0xfc
 800da28:	0589      	lsls	r1, r1, #22
 800da2a:	1c18      	adds	r0, r3, #0
 800da2c:	f7f2 fd80 	bl	8000530 <__aeabi_fcmplt>
 800da30:	1e03      	subs	r3, r0, #0
 800da32:	d003      	beq.n	800da3c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	22fc      	movs	r2, #252	@ 0xfc
 800da38:	0592      	lsls	r2, r2, #22
 800da3a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da40:	2100      	movs	r1, #0
 800da42:	1c18      	adds	r0, r3, #0
 800da44:	f7f2 fd88 	bl	8000558 <__aeabi_fcmpgt>
 800da48:	1e03      	subs	r3, r0, #0
 800da4a:	d015      	beq.n	800da78 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	1c11      	adds	r1, r2, #0
 800da54:	0018      	movs	r0, r3
 800da56:	f000 fa4f 	bl	800def8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	0018      	movs	r0, r3
 800da5e:	f000 f8e5 	bl	800dc2c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800da62:	1c04      	adds	r4, r0, #0
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	0018      	movs	r0, r3
 800da68:	f000 f8ea 	bl	800dc40 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800da6c:	1c02      	adds	r2, r0, #0
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	1c21      	adds	r1, r4, #0
 800da72:	0018      	movs	r0, r3
 800da74:	f000 fb7a 	bl	800e16c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7c:	21fc      	movs	r1, #252	@ 0xfc
 800da7e:	0589      	lsls	r1, r1, #22
 800da80:	1c18      	adds	r0, r3, #0
 800da82:	f7f2 ff1d 	bl	80008c0 <__aeabi_fadd>
 800da86:	1c03      	adds	r3, r0, #0
 800da88:	1c18      	adds	r0, r3, #0
 800da8a:	f7f3 fd81 	bl	8001590 <__aeabi_f2iz>
 800da8e:	0002      	movs	r2, r0
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	601a      	str	r2, [r3, #0]
    return;
 800da94:	46c0      	nop			@ (mov r8, r8)
}
 800da96:	46bd      	mov	sp, r7
 800da98:	b005      	add	sp, #20
 800da9a:	bd90      	pop	{r4, r7, pc}
 800da9c:	42340000 	.word	0x42340000
 800daa0:	0000fde7 	.word	0x0000fde7
 800daa4:	00007fff 	.word	0x00007fff

0800daa8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800daa8:	b5b0      	push	{r4, r5, r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	223c      	movs	r2, #60	@ 0x3c
 800dab4:	2100      	movs	r1, #0
 800dab6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4952      	ldr	r1, [pc, #328]	@ (800dc1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800dad2:	1c18      	adds	r0, r3, #0
 800dad4:	f7f3 f87e 	bl	8000bd4 <__aeabi_fdiv>
 800dad8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800dada:	2188      	movs	r1, #136	@ 0x88
 800dadc:	05c9      	lsls	r1, r1, #23
 800dade:	1c18      	adds	r0, r3, #0
 800dae0:	f7f3 fa5e 	bl	8000fa0 <__aeabi_fmul>
 800dae4:	1c03      	adds	r3, r0, #0
 800dae6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	494a      	ldr	r1, [pc, #296]	@ (800dc1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800daf2:	1c18      	adds	r0, r3, #0
 800daf4:	f7f3 f86e 	bl	8000bd4 <__aeabi_fdiv>
 800daf8:	1c03      	adds	r3, r0, #0
 800dafa:	1c19      	adds	r1, r3, #0
 800dafc:	1c20      	adds	r0, r4, #0
 800dafe:	f7f2 fedf 	bl	80008c0 <__aeabi_fadd>
 800db02:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800db04:	1c19      	adds	r1, r3, #0
 800db06:	1c28      	adds	r0, r5, #0
 800db08:	f7f3 f864 	bl	8000bd4 <__aeabi_fdiv>
 800db0c:	1c03      	adds	r3, r0, #0
 800db0e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	4940      	ldr	r1, [pc, #256]	@ (800dc1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db1a:	1c18      	adds	r0, r3, #0
 800db1c:	f7f3 f85a 	bl	8000bd4 <__aeabi_fdiv>
 800db20:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800db22:	2185      	movs	r1, #133	@ 0x85
 800db24:	05c9      	lsls	r1, r1, #23
 800db26:	1c18      	adds	r0, r3, #0
 800db28:	f7f3 fa3a 	bl	8000fa0 <__aeabi_fmul>
 800db2c:	1c03      	adds	r3, r0, #0
 800db2e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	4938      	ldr	r1, [pc, #224]	@ (800dc1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db3a:	1c18      	adds	r0, r3, #0
 800db3c:	f7f3 f84a 	bl	8000bd4 <__aeabi_fdiv>
 800db40:	1c03      	adds	r3, r0, #0
 800db42:	1c19      	adds	r1, r3, #0
 800db44:	1c20      	adds	r0, r4, #0
 800db46:	f7f2 febb 	bl	80008c0 <__aeabi_fadd>
 800db4a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800db4c:	1c19      	adds	r1, r3, #0
 800db4e:	1c28      	adds	r0, r5, #0
 800db50:	f7f3 f840 	bl	8000bd4 <__aeabi_fdiv>
 800db54:	1c03      	adds	r3, r0, #0
 800db56:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d118      	bne.n	800db96 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800db68:	2188      	movs	r1, #136	@ 0x88
 800db6a:	05c9      	lsls	r1, r1, #23
 800db6c:	1c18      	adds	r0, r3, #0
 800db6e:	f7f3 fa17 	bl	8000fa0 <__aeabi_fmul>
 800db72:	1c03      	adds	r3, r0, #0
 800db74:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800db7a:	4929      	ldr	r1, [pc, #164]	@ (800dc20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800db7c:	1c18      	adds	r0, r3, #0
 800db7e:	f7f2 fe9f 	bl	80008c0 <__aeabi_fadd>
 800db82:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800db84:	1c19      	adds	r1, r3, #0
 800db86:	1c20      	adds	r0, r4, #0
 800db88:	f7f3 f824 	bl	8000bd4 <__aeabi_fdiv>
 800db8c:	1c03      	adds	r3, r0, #0
 800db8e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	655a      	str	r2, [r3, #84]	@ 0x54
 800db94:	e017      	b.n	800dbc6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800db9a:	2188      	movs	r1, #136	@ 0x88
 800db9c:	05c9      	lsls	r1, r1, #23
 800db9e:	1c18      	adds	r0, r3, #0
 800dba0:	f7f3 f9fe 	bl	8000fa0 <__aeabi_fmul>
 800dba4:	1c03      	adds	r3, r0, #0
 800dba6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800dbac:	491d      	ldr	r1, [pc, #116]	@ (800dc24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800dbae:	1c18      	adds	r0, r3, #0
 800dbb0:	f7f2 fe86 	bl	80008c0 <__aeabi_fadd>
 800dbb4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800dbb6:	1c19      	adds	r1, r3, #0
 800dbb8:	1c20      	adds	r0, r4, #0
 800dbba:	f7f3 f80b 	bl	8000bd4 <__aeabi_fdiv>
 800dbbe:	1c03      	adds	r3, r0, #0
 800dbc0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800dbca:	2185      	movs	r1, #133	@ 0x85
 800dbcc:	05c9      	lsls	r1, r1, #23
 800dbce:	1c18      	adds	r0, r3, #0
 800dbd0:	f7f3 f9e6 	bl	8000fa0 <__aeabi_fmul>
 800dbd4:	1c03      	adds	r3, r0, #0
 800dbd6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	4912      	ldr	r1, [pc, #72]	@ (800dc28 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800dbde:	1c18      	adds	r0, r3, #0
 800dbe0:	f7f2 fe6e 	bl	80008c0 <__aeabi_fadd>
 800dbe4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800dbe6:	1c19      	adds	r1, r3, #0
 800dbe8:	1c20      	adds	r0, r4, #0
 800dbea:	f7f2 fff3 	bl	8000bd4 <__aeabi_fdiv>
 800dbee:	1c03      	adds	r3, r0, #0
 800dbf0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800dc14:	46c0      	nop			@ (mov r8, r8)
 800dc16:	46bd      	mov	sp, r7
 800dc18:	b002      	add	sp, #8
 800dc1a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc1c:	45610000 	.word	0x45610000
 800dc20:	44960000 	.word	0x44960000
 800dc24:	41a00000 	.word	0x41a00000
 800dc28:	451c4000 	.word	0x451c4000

0800dc2c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800dc38:	1c18      	adds	r0, r3, #0
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	b002      	add	sp, #8
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800dc50:	1c19      	adds	r1, r3, #0
 800dc52:	1c10      	adds	r0, r2, #0
 800dc54:	f7f2 fe34 	bl	80008c0 <__aeabi_fadd>
 800dc58:	1c03      	adds	r3, r0, #0
}
 800dc5a:	1c18      	adds	r0, r3, #0
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	b002      	add	sp, #8
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	223c      	movs	r2, #60	@ 0x3c
 800dc6e:	5c9b      	ldrb	r3, [r3, r2]
}
 800dc70:	0018      	movs	r0, r3
 800dc72:	46bd      	mov	sp, r7
 800dc74:	b002      	add	sp, #8
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800dc78:	b5b0      	push	{r4, r5, r7, lr}
 800dc7a:	b08c      	sub	sp, #48	@ 0x30
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800dc84:	1c19      	adds	r1, r3, #0
 800dc86:	4895      	ldr	r0, [pc, #596]	@ (800dedc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800dc88:	f7f3 fac8 	bl	800121c <__aeabi_fsub>
 800dc8c:	1c03      	adds	r3, r0, #0
 800dc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc94:	1c19      	adds	r1, r3, #0
 800dc96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc98:	f7f2 fc5e 	bl	8000558 <__aeabi_fcmpgt>
 800dc9c:	1e03      	subs	r3, r0, #0
 800dc9e:	d00b      	beq.n	800dcb8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dca8:	1c19      	adds	r1, r3, #0
 800dcaa:	1c10      	adds	r0, r2, #0
 800dcac:	f7f2 fe08 	bl	80008c0 <__aeabi_fadd>
 800dcb0:	1c03      	adds	r3, r0, #0
 800dcb2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcbc:	1c19      	adds	r1, r3, #0
 800dcbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcc0:	f7f2 fc4a 	bl	8000558 <__aeabi_fcmpgt>
 800dcc4:	1e03      	subs	r3, r0, #0
 800dcc6:	d00b      	beq.n	800dce0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dcd0:	1c19      	adds	r1, r3, #0
 800dcd2:	1c10      	adds	r0, r2, #0
 800dcd4:	f7f2 fdf4 	bl	80008c0 <__aeabi_fadd>
 800dcd8:	1c03      	adds	r3, r0, #0
 800dcda:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6959      	ldr	r1, [r3, #20]
 800dce4:	4a7e      	ldr	r2, [pc, #504]	@ (800dee0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	0018      	movs	r0, r3
 800dcea:	f000 f9f1 	bl	800e0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	1c11      	adds	r1, r2, #0
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	f000 f9fa 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dcfc:	1c03      	adds	r3, r0, #0
 800dcfe:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd0c:	1c19      	adds	r1, r3, #0
 800dd0e:	1c10      	adds	r0, r2, #0
 800dd10:	f7f3 fa84 	bl	800121c <__aeabi_fsub>
 800dd14:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd18:	1c18      	adds	r0, r3, #0
 800dd1a:	f7f3 f941 	bl	8000fa0 <__aeabi_fmul>
 800dd1e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dd20:	1c19      	adds	r1, r3, #0
 800dd22:	1c20      	adds	r0, r4, #0
 800dd24:	f7f2 fdcc 	bl	80008c0 <__aeabi_fadd>
 800dd28:	1c03      	adds	r3, r0, #0
 800dd2a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800dd34:	1c19      	adds	r1, r3, #0
 800dd36:	486b      	ldr	r0, [pc, #428]	@ (800dee4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800dd38:	f7f3 fa70 	bl	800121c <__aeabi_fsub>
 800dd3c:	1c03      	adds	r3, r0, #0
 800dd3e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	1c11      	adds	r1, r2, #0
 800dd48:	0018      	movs	r0, r3
 800dd4a:	f000 f9d1 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dd4e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800dd50:	1c19      	adds	r1, r3, #0
 800dd52:	1c28      	adds	r0, r5, #0
 800dd54:	f7f3 f924 	bl	8000fa0 <__aeabi_fmul>
 800dd58:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800dd5a:	1c19      	adds	r1, r3, #0
 800dd5c:	1c20      	adds	r0, r4, #0
 800dd5e:	f7f2 fdaf 	bl	80008c0 <__aeabi_fadd>
 800dd62:	1c03      	adds	r3, r0, #0
 800dd64:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800dd66:	4a60      	ldr	r2, [pc, #384]	@ (800dee8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800dd68:	6a39      	ldr	r1, [r7, #32]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f000 f9af 	bl	800e0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	1c11      	adds	r1, r2, #0
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f000 f9b8 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dd80:	1c03      	adds	r3, r0, #0
 800dd82:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800dd84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd86:	69f8      	ldr	r0, [r7, #28]
 800dd88:	f7f3 f90a 	bl	8000fa0 <__aeabi_fmul>
 800dd8c:	1c03      	adds	r3, r0, #0
 800dd8e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6999      	ldr	r1, [r3, #24]
 800dd98:	4a51      	ldr	r2, [pc, #324]	@ (800dee0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f000 f997 	bl	800e0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	1c11      	adds	r1, r2, #0
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f000 f9a0 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ddb0:	1c03      	adds	r3, r0, #0
 800ddb2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ddc0:	1c19      	adds	r1, r3, #0
 800ddc2:	1c10      	adds	r0, r2, #0
 800ddc4:	f7f3 fa2a 	bl	800121c <__aeabi_fsub>
 800ddc8:	1c03      	adds	r3, r0, #0
 800ddca:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ddcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ddce:	69b8      	ldr	r0, [r7, #24]
 800ddd0:	f7f3 fa24 	bl	800121c <__aeabi_fsub>
 800ddd4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ddd6:	1c19      	adds	r1, r3, #0
 800ddd8:	1c28      	adds	r0, r5, #0
 800ddda:	f7f3 f8e1 	bl	8000fa0 <__aeabi_fmul>
 800ddde:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800dde0:	1c19      	adds	r1, r3, #0
 800dde2:	1c20      	adds	r0, r4, #0
 800dde4:	f7f2 fd6c 	bl	80008c0 <__aeabi_fadd>
 800dde8:	1c03      	adds	r3, r0, #0
 800ddea:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ddf4:	1c19      	adds	r1, r3, #0
 800ddf6:	483b      	ldr	r0, [pc, #236]	@ (800dee4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ddf8:	f7f3 fa10 	bl	800121c <__aeabi_fsub>
 800ddfc:	1c03      	adds	r3, r0, #0
 800ddfe:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	1c11      	adds	r1, r2, #0
 800de08:	0018      	movs	r0, r3
 800de0a:	f000 f971 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de0e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800de10:	1c19      	adds	r1, r3, #0
 800de12:	1c28      	adds	r0, r5, #0
 800de14:	f7f3 f8c4 	bl	8000fa0 <__aeabi_fmul>
 800de18:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800de1a:	1c19      	adds	r1, r3, #0
 800de1c:	1c20      	adds	r0, r4, #0
 800de1e:	f7f2 fd4f 	bl	80008c0 <__aeabi_fadd>
 800de22:	1c03      	adds	r3, r0, #0
 800de24:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800de26:	4a30      	ldr	r2, [pc, #192]	@ (800dee8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800de28:	6939      	ldr	r1, [r7, #16]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	0018      	movs	r0, r3
 800de2e:	f000 f94f 	bl	800e0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	1c11      	adds	r1, r2, #0
 800de3a:	0018      	movs	r0, r3
 800de3c:	f000 f958 	bl	800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de40:	1c03      	adds	r3, r0, #0
 800de42:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800de44:	6979      	ldr	r1, [r7, #20]
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7f3 f8aa 	bl	8000fa0 <__aeabi_fmul>
 800de4c:	1c03      	adds	r3, r0, #0
 800de4e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	4923      	ldr	r1, [pc, #140]	@ (800deec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800de5e:	1c18      	adds	r0, r3, #0
 800de60:	f7f2 feb8 	bl	8000bd4 <__aeabi_fdiv>
 800de64:	1c03      	adds	r3, r0, #0
 800de66:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800de68:	69f9      	ldr	r1, [r7, #28]
 800de6a:	20fe      	movs	r0, #254	@ 0xfe
 800de6c:	0580      	lsls	r0, r0, #22
 800de6e:	f7f3 f9d5 	bl	800121c <__aeabi_fsub>
 800de72:	1c03      	adds	r3, r0, #0
 800de74:	491e      	ldr	r1, [pc, #120]	@ (800def0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800de76:	1c18      	adds	r0, r3, #0
 800de78:	f7f3 f892 	bl	8000fa0 <__aeabi_fmul>
 800de7c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800de7e:	491d      	ldr	r1, [pc, #116]	@ (800def4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800de80:	1c18      	adds	r0, r3, #0
 800de82:	f7f3 f9cb 	bl	800121c <__aeabi_fsub>
 800de86:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800de88:	1c19      	adds	r1, r3, #0
 800de8a:	1c28      	adds	r0, r5, #0
 800de8c:	f7f3 f888 	bl	8000fa0 <__aeabi_fmul>
 800de90:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800de92:	1c19      	adds	r1, r3, #0
 800de94:	1c20      	adds	r0, r4, #0
 800de96:	f7f2 fd13 	bl	80008c0 <__aeabi_fadd>
 800de9a:	1c03      	adds	r3, r0, #0
 800de9c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dea6:	2100      	movs	r1, #0
 800dea8:	1c18      	adds	r0, r3, #0
 800deaa:	f7f2 fb41 	bl	8000530 <__aeabi_fcmplt>
 800deae:	1e03      	subs	r3, r0, #0
 800deb0:	d002      	beq.n	800deb8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800dec0:	1c19      	adds	r1, r3, #0
 800dec2:	1c10      	adds	r0, r2, #0
 800dec4:	f7f2 fb48 	bl	8000558 <__aeabi_fcmpgt>
 800dec8:	1e03      	subs	r3, r0, #0
 800deca:	d100      	bne.n	800dece <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800decc:	e002      	b.n	800ded4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ded4:	46c0      	nop			@ (mov r8, r8)
 800ded6:	46bd      	mov	sp, r7
 800ded8:	b00c      	add	sp, #48	@ 0x30
 800deda:	bdb0      	pop	{r4, r5, r7, pc}
 800dedc:	46fffe00 	.word	0x46fffe00
 800dee0:	3c23d70a 	.word	0x3c23d70a
 800dee4:	43ff0000 	.word	0x43ff0000
 800dee8:	3db851ec 	.word	0x3db851ec
 800deec:	42700000 	.word	0x42700000
 800def0:	3fa66666 	.word	0x3fa66666
 800def4:	3e99999a 	.word	0x3e99999a

0800def8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800def8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defa:	b087      	sub	sp, #28
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	223c      	movs	r2, #60	@ 0x3c
 800df06:	5c9b      	ldrb	r3, [r3, r2]
 800df08:	2201      	movs	r2, #1
 800df0a:	4053      	eors	r3, r2
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00a      	beq.n	800df28 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	223c      	movs	r2, #60	@ 0x3c
 800df16:	2101      	movs	r1, #1
 800df18:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800df26:	e0c8      	b.n	800e0ba <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df2c:	4965      	ldr	r1, [pc, #404]	@ (800e0c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800df2e:	1c18      	adds	r0, r3, #0
 800df30:	f7f2 fb1c 	bl	800056c <__aeabi_fcmpge>
 800df34:	1e03      	subs	r3, r0, #0
 800df36:	d107      	bne.n	800df48 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800df3c:	4962      	ldr	r1, [pc, #392]	@ (800e0c8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800df3e:	1c18      	adds	r0, r3, #0
 800df40:	f7f2 fb00 	bl	8000544 <__aeabi_fcmple>
 800df44:	1e03      	subs	r3, r0, #0
 800df46:	d00e      	beq.n	800df66 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800df50:	1c19      	adds	r1, r3, #0
 800df52:	1c10      	adds	r0, r2, #0
 800df54:	f7f2 fcb4 	bl	80008c0 <__aeabi_fadd>
 800df58:	1c03      	adds	r3, r0, #0
 800df5a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df6a:	1c19      	adds	r1, r3, #0
 800df6c:	6838      	ldr	r0, [r7, #0]
 800df6e:	f7f3 f955 	bl	800121c <__aeabi_fsub>
 800df72:	1c03      	adds	r3, r0, #0
 800df74:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	0018      	movs	r0, r3
 800df7a:	f7ff fe7d 	bl	800dc78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df82:	1c19      	adds	r1, r3, #0
 800df84:	6838      	ldr	r0, [r7, #0]
 800df86:	f7f3 f949 	bl	800121c <__aeabi_fsub>
 800df8a:	1c03      	adds	r3, r0, #0
 800df8c:	2185      	movs	r1, #133	@ 0x85
 800df8e:	05c9      	lsls	r1, r1, #23
 800df90:	1c18      	adds	r0, r3, #0
 800df92:	f7f2 fe1f 	bl	8000bd4 <__aeabi_fdiv>
 800df96:	1c03      	adds	r3, r0, #0
 800df98:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800df9a:	2100      	movs	r1, #0
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7f2 fac7 	bl	8000530 <__aeabi_fcmplt>
 800dfa2:	1e03      	subs	r3, r0, #0
 800dfa4:	d008      	beq.n	800dfb8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfaa:	68f9      	ldr	r1, [r7, #12]
 800dfac:	1c18      	adds	r0, r3, #0
 800dfae:	f7f3 f935 	bl	800121c <__aeabi_fsub>
 800dfb2:	1c03      	adds	r3, r0, #0
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	e007      	b.n	800dfc8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfbc:	1c19      	adds	r1, r3, #0
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7f2 fc7e 	bl	80008c0 <__aeabi_fadd>
 800dfc4:	1c03      	adds	r3, r0, #0
 800dfc6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800dfc8:	23fe      	movs	r3, #254	@ 0xfe
 800dfca:	059b      	lsls	r3, r3, #22
 800dfcc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800dfce:	493f      	ldr	r1, [pc, #252]	@ (800e0cc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800dfd0:	6978      	ldr	r0, [r7, #20]
 800dfd2:	f7f2 fac1 	bl	8000558 <__aeabi_fcmpgt>
 800dfd6:	1e03      	subs	r3, r0, #0
 800dfd8:	d010      	beq.n	800dffc <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800dfda:	493c      	ldr	r1, [pc, #240]	@ (800e0cc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800dfdc:	6978      	ldr	r0, [r7, #20]
 800dfde:	f7f2 fdf9 	bl	8000bd4 <__aeabi_fdiv>
 800dfe2:	1c03      	adds	r3, r0, #0
 800dfe4:	1c1c      	adds	r4, r3, #0
 800dfe6:	4939      	ldr	r1, [pc, #228]	@ (800e0cc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800dfe8:	6978      	ldr	r0, [r7, #20]
 800dfea:	f7f2 fdf3 	bl	8000bd4 <__aeabi_fdiv>
 800dfee:	1c03      	adds	r3, r0, #0
 800dff0:	1c19      	adds	r1, r3, #0
 800dff2:	1c20      	adds	r0, r4, #0
 800dff4:	f7f2 ffd4 	bl	8000fa0 <__aeabi_fmul>
 800dff8:	1c03      	adds	r3, r0, #0
 800dffa:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800e000:	1c19      	adds	r1, r3, #0
 800e002:	2085      	movs	r0, #133	@ 0x85
 800e004:	05c0      	lsls	r0, r0, #23
 800e006:	f7f3 f909 	bl	800121c <__aeabi_fsub>
 800e00a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800e00c:	6939      	ldr	r1, [r7, #16]
 800e00e:	1c18      	adds	r0, r3, #0
 800e010:	f7f2 ffc6 	bl	8000fa0 <__aeabi_fmul>
 800e014:	1c03      	adds	r3, r0, #0
 800e016:	1c18      	adds	r0, r3, #0
 800e018:	f018 fb72 	bl	8026700 <sqrtf>
 800e01c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800e026:	2185      	movs	r1, #133	@ 0x85
 800e028:	05c9      	lsls	r1, r1, #23
 800e02a:	6938      	ldr	r0, [r7, #16]
 800e02c:	f7f2 ffb8 	bl	8000fa0 <__aeabi_fmul>
 800e030:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800e032:	1c19      	adds	r1, r3, #0
 800e034:	1c28      	adds	r0, r5, #0
 800e036:	f7f2 fdcd 	bl	8000bd4 <__aeabi_fdiv>
 800e03a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e03c:	1c19      	adds	r1, r3, #0
 800e03e:	1c20      	adds	r0, r4, #0
 800e040:	f7f2 ffae 	bl	8000fa0 <__aeabi_fmul>
 800e044:	1c03      	adds	r3, r0, #0
 800e046:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e04c:	68f9      	ldr	r1, [r7, #12]
 800e04e:	1c18      	adds	r0, r3, #0
 800e050:	f7f2 ffa6 	bl	8000fa0 <__aeabi_fmul>
 800e054:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800e056:	6939      	ldr	r1, [r7, #16]
 800e058:	1c18      	adds	r0, r3, #0
 800e05a:	f7f2 fdbb 	bl	8000bd4 <__aeabi_fdiv>
 800e05e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800e060:	68f9      	ldr	r1, [r7, #12]
 800e062:	1c18      	adds	r0, r3, #0
 800e064:	f7f2 ff9c 	bl	8000fa0 <__aeabi_fmul>
 800e068:	1c03      	adds	r3, r0, #0
             sqrtf(
 800e06a:	1c19      	adds	r1, r3, #0
 800e06c:	1c20      	adds	r0, r4, #0
 800e06e:	f7f2 fc27 	bl	80008c0 <__aeabi_fadd>
 800e072:	1c03      	adds	r3, r0, #0
 800e074:	1c18      	adds	r0, r3, #0
 800e076:	f018 fb43 	bl	8026700 <sqrtf>
 800e07a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800e07c:	1c19      	adds	r1, r3, #0
 800e07e:	1c30      	adds	r0, r6, #0
 800e080:	f7f2 ff8e 	bl	8000fa0 <__aeabi_fmul>
 800e084:	1c03      	adds	r3, r0, #0
 800e086:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e094:	68f9      	ldr	r1, [r7, #12]
 800e096:	1c18      	adds	r0, r3, #0
 800e098:	f7f2 ff82 	bl	8000fa0 <__aeabi_fmul>
 800e09c:	1c03      	adds	r3, r0, #0
 800e09e:	2182      	movs	r1, #130	@ 0x82
 800e0a0:	05c9      	lsls	r1, r1, #23
 800e0a2:	1c18      	adds	r0, r3, #0
 800e0a4:	f7f2 fd96 	bl	8000bd4 <__aeabi_fdiv>
 800e0a8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800e0aa:	1c19      	adds	r1, r3, #0
 800e0ac:	1c20      	adds	r0, r4, #0
 800e0ae:	f7f2 fc07 	bl	80008c0 <__aeabi_fadd>
 800e0b2:	1c03      	adds	r3, r0, #0
 800e0b4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e0ba:	46c0      	nop			@ (mov r8, r8)
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	b007      	add	sp, #28
 800e0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0c2:	46c0      	nop			@ (mov r8, r8)
 800e0c4:	42c80000 	.word	0x42c80000
 800e0c8:	c2c80000 	.word	0xc2c80000
 800e0cc:	44b40000 	.word	0x44b40000

0800e0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e0e8:	46c0      	nop			@ (mov r8, r8)
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	b004      	add	sp, #16
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800e0f0:	b590      	push	{r4, r7, lr}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e102:	1c19      	adds	r1, r3, #0
 800e104:	6838      	ldr	r0, [r7, #0]
 800e106:	f7f3 f889 	bl	800121c <__aeabi_fsub>
 800e10a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e10c:	1c19      	adds	r1, r3, #0
 800e10e:	1c20      	adds	r0, r4, #0
 800e110:	f7f2 ff46 	bl	8000fa0 <__aeabi_fmul>
 800e114:	1c03      	adds	r3, r0, #0
 800e116:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800e118:	4912      	ldr	r1, [pc, #72]	@ (800e164 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7f2 fa08 	bl	8000530 <__aeabi_fcmplt>
 800e120:	1e03      	subs	r3, r0, #0
 800e122:	d002      	beq.n	800e12a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800e124:	23fe      	movs	r3, #254	@ 0xfe
 800e126:	059b      	lsls	r3, r3, #22
 800e128:	e018      	b.n	800e15c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800e12a:	490f      	ldr	r1, [pc, #60]	@ (800e168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7f2 fa13 	bl	8000558 <__aeabi_fcmpgt>
 800e132:	1e03      	subs	r3, r0, #0
 800e134:	d001      	beq.n	800e13a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800e136:	2300      	movs	r3, #0
 800e138:	e010      	b.n	800e15c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1c18      	adds	r0, r3, #0
 800e13e:	f018 fab7 	bl	80266b0 <expf>
 800e142:	1c03      	adds	r3, r0, #0
 800e144:	21fe      	movs	r1, #254	@ 0xfe
 800e146:	0589      	lsls	r1, r1, #22
 800e148:	1c18      	adds	r0, r3, #0
 800e14a:	f7f2 fbb9 	bl	80008c0 <__aeabi_fadd>
 800e14e:	1c03      	adds	r3, r0, #0
 800e150:	1c19      	adds	r1, r3, #0
 800e152:	20fe      	movs	r0, #254	@ 0xfe
 800e154:	0580      	lsls	r0, r0, #22
 800e156:	f7f2 fd3d 	bl	8000bd4 <__aeabi_fdiv>
 800e15a:	1c03      	adds	r3, r0, #0
    }
}
 800e15c:	1c18      	adds	r0, r3, #0
 800e15e:	46bd      	mov	sp, r7
 800e160:	b005      	add	sp, #20
 800e162:	bd90      	pop	{r4, r7, pc}
 800e164:	c2480000 	.word	0xc2480000
 800e168:	42480000 	.word	0x42480000

0800e16c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	68ba      	ldr	r2, [r7, #8]
 800e17c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800e184:	46c0      	nop			@ (mov r8, r8)
 800e186:	46bd      	mov	sp, r7
 800e188:	b004      	add	sp, #16
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d114      	bne.n	800e1c8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1a2:	1c19      	adds	r1, r3, #0
 800e1a4:	6838      	ldr	r0, [r7, #0]
 800e1a6:	f7f3 f839 	bl	800121c <__aeabi_fsub>
 800e1aa:	1c03      	adds	r3, r0, #0
 800e1ac:	4918      	ldr	r1, [pc, #96]	@ (800e210 <GasIndexAlgorithm__mox_model__process+0x84>)
 800e1ae:	1c18      	adds	r0, r3, #0
 800e1b0:	f7f2 fd10 	bl	8000bd4 <__aeabi_fdiv>
 800e1b4:	1c03      	adds	r3, r0, #0
 800e1b6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800e1bc:	1c19      	adds	r1, r3, #0
 800e1be:	1c10      	adds	r0, r2, #0
 800e1c0:	f7f2 feee 	bl	8000fa0 <__aeabi_fmul>
 800e1c4:	1c03      	adds	r3, r0, #0
 800e1c6:	e01f      	b.n	800e208 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1cc:	1c19      	adds	r1, r3, #0
 800e1ce:	6838      	ldr	r0, [r7, #0]
 800e1d0:	f7f3 f824 	bl	800121c <__aeabi_fsub>
 800e1d4:	1c03      	adds	r3, r0, #0
 800e1d6:	1c1a      	adds	r2, r3, #0
 800e1d8:	2380      	movs	r3, #128	@ 0x80
 800e1da:	061b      	lsls	r3, r3, #24
 800e1dc:	4053      	eors	r3, r2
 800e1de:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e1e4:	490b      	ldr	r1, [pc, #44]	@ (800e214 <GasIndexAlgorithm__mox_model__process+0x88>)
 800e1e6:	1c18      	adds	r0, r3, #0
 800e1e8:	f7f2 fb6a 	bl	80008c0 <__aeabi_fadd>
 800e1ec:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e1ee:	1c19      	adds	r1, r3, #0
 800e1f0:	1c20      	adds	r0, r4, #0
 800e1f2:	f7f2 fcef 	bl	8000bd4 <__aeabi_fdiv>
 800e1f6:	1c03      	adds	r3, r0, #0
 800e1f8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800e1fe:	1c19      	adds	r1, r3, #0
 800e200:	1c10      	adds	r0, r2, #0
 800e202:	f7f2 fecd 	bl	8000fa0 <__aeabi_fmul>
 800e206:	1c03      	adds	r3, r0, #0
    }
}
 800e208:	1c18      	adds	r0, r3, #0
 800e20a:	46bd      	mov	sp, r7
 800e20c:	b003      	add	sp, #12
 800e20e:	bd90      	pop	{r4, r7, pc}
 800e210:	44fa0000 	.word	0x44fa0000
 800e214:	435c0000 	.word	0x435c0000

0800e218 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2180      	movs	r1, #128	@ 0x80
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2184      	movs	r1, #132	@ 0x84
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2188      	movs	r1, #136	@ 0x88
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	505a      	str	r2, [r3, r1]
}
 800e23e:	46c0      	nop			@ (mov r8, r8)
 800e240:	46bd      	mov	sp, r7
 800e242:	b004      	add	sp, #16
 800e244:	bd80      	pop	{r7, pc}
	...

0800e248 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800e248:	b590      	push	{r4, r7, lr}
 800e24a:	b085      	sub	sp, #20
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2280      	movs	r2, #128	@ 0x80
 800e256:	589c      	ldr	r4, [r3, r2]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2284      	movs	r2, #132	@ 0x84
 800e25c:	589b      	ldr	r3, [r3, r2]
 800e25e:	1c19      	adds	r1, r3, #0
 800e260:	6838      	ldr	r0, [r7, #0]
 800e262:	f7f2 ffdb 	bl	800121c <__aeabi_fsub>
 800e266:	1c03      	adds	r3, r0, #0
 800e268:	1c19      	adds	r1, r3, #0
 800e26a:	1c20      	adds	r0, r4, #0
 800e26c:	f7f2 fe98 	bl	8000fa0 <__aeabi_fmul>
 800e270:	1c03      	adds	r3, r0, #0
 800e272:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800e274:	4940      	ldr	r1, [pc, #256]	@ (800e378 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800e276:	68b8      	ldr	r0, [r7, #8]
 800e278:	f7f2 f95a 	bl	8000530 <__aeabi_fcmplt>
 800e27c:	1e03      	subs	r3, r0, #0
 800e27e:	d001      	beq.n	800e284 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800e280:	4b3e      	ldr	r3, [pc, #248]	@ (800e37c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e282:	e075      	b.n	800e370 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800e284:	493e      	ldr	r1, [pc, #248]	@ (800e380 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800e286:	68b8      	ldr	r0, [r7, #8]
 800e288:	f7f2 f966 	bl	8000558 <__aeabi_fcmpgt>
 800e28c:	1e03      	subs	r3, r0, #0
 800e28e:	d001      	beq.n	800e294 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800e290:	2300      	movs	r3, #0
 800e292:	e06d      	b.n	800e370 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800e294:	2100      	movs	r1, #0
 800e296:	6838      	ldr	r0, [r7, #0]
 800e298:	f7f2 f968 	bl	800056c <__aeabi_fcmpge>
 800e29c:	1e03      	subs	r3, r0, #0
 800e29e:	d047      	beq.n	800e330 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2288      	movs	r2, #136	@ 0x88
 800e2a4:	589b      	ldr	r3, [r3, r2]
 800e2a6:	21fe      	movs	r1, #254	@ 0xfe
 800e2a8:	0589      	lsls	r1, r1, #22
 800e2aa:	1c18      	adds	r0, r3, #0
 800e2ac:	f7f2 f93a 	bl	8000524 <__aeabi_fcmpeq>
 800e2b0:	1e03      	subs	r3, r0, #0
 800e2b2:	d00e      	beq.n	800e2d2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	1c19      	adds	r1, r3, #0
 800e2ba:	20fe      	movs	r0, #254	@ 0xfe
 800e2bc:	0580      	lsls	r0, r0, #22
 800e2be:	f7f2 ffad 	bl	800121c <__aeabi_fsub>
 800e2c2:	1c03      	adds	r3, r0, #0
 800e2c4:	492f      	ldr	r1, [pc, #188]	@ (800e384 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800e2c6:	1c18      	adds	r0, r3, #0
 800e2c8:	f7f2 fe6a 	bl	8000fa0 <__aeabi_fmul>
 800e2cc:	1c03      	adds	r3, r0, #0
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e012      	b.n	800e2f8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	492c      	ldr	r1, [pc, #176]	@ (800e388 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800e2d8:	1c18      	adds	r0, r3, #0
 800e2da:	f7f2 fe61 	bl	8000fa0 <__aeabi_fmul>
 800e2de:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800e2e0:	1c19      	adds	r1, r3, #0
 800e2e2:	4826      	ldr	r0, [pc, #152]	@ (800e37c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e2e4:	f7f2 ff9a 	bl	800121c <__aeabi_fsub>
 800e2e8:	1c03      	adds	r3, r0, #0
 800e2ea:	2181      	movs	r1, #129	@ 0x81
 800e2ec:	05c9      	lsls	r1, r1, #23
 800e2ee:	1c18      	adds	r0, r3, #0
 800e2f0:	f7f2 fc70 	bl	8000bd4 <__aeabi_fdiv>
 800e2f4:	1c03      	adds	r3, r0, #0
 800e2f6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800e2f8:	4920      	ldr	r1, [pc, #128]	@ (800e37c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7f2 fae0 	bl	80008c0 <__aeabi_fadd>
 800e300:	1c03      	adds	r3, r0, #0
 800e302:	1c1c      	adds	r4, r3, #0
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	1c18      	adds	r0, r3, #0
 800e308:	f018 f9d2 	bl	80266b0 <expf>
 800e30c:	1c03      	adds	r3, r0, #0
 800e30e:	21fe      	movs	r1, #254	@ 0xfe
 800e310:	0589      	lsls	r1, r1, #22
 800e312:	1c18      	adds	r0, r3, #0
 800e314:	f7f2 fad4 	bl	80008c0 <__aeabi_fadd>
 800e318:	1c03      	adds	r3, r0, #0
 800e31a:	1c19      	adds	r1, r3, #0
 800e31c:	1c20      	adds	r0, r4, #0
 800e31e:	f7f2 fc59 	bl	8000bd4 <__aeabi_fdiv>
 800e322:	1c03      	adds	r3, r0, #0
 800e324:	68f9      	ldr	r1, [r7, #12]
 800e326:	1c18      	adds	r0, r3, #0
 800e328:	f7f2 ff78 	bl	800121c <__aeabi_fsub>
 800e32c:	1c03      	adds	r3, r0, #0
 800e32e:	e01f      	b.n	800e370 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2188      	movs	r1, #136	@ 0x88
 800e338:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800e33a:	1c19      	adds	r1, r3, #0
 800e33c:	1c10      	adds	r0, r2, #0
 800e33e:	f7f2 fc49 	bl	8000bd4 <__aeabi_fdiv>
 800e342:	1c03      	adds	r3, r0, #0
 800e344:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	1c18      	adds	r0, r3, #0
 800e34a:	f018 f9b1 	bl	80266b0 <expf>
 800e34e:	1c03      	adds	r3, r0, #0
 800e350:	21fe      	movs	r1, #254	@ 0xfe
 800e352:	0589      	lsls	r1, r1, #22
 800e354:	1c18      	adds	r0, r3, #0
 800e356:	f7f2 fab3 	bl	80008c0 <__aeabi_fadd>
 800e35a:	1c03      	adds	r3, r0, #0
 800e35c:	1c19      	adds	r1, r3, #0
 800e35e:	4807      	ldr	r0, [pc, #28]	@ (800e37c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e360:	f7f2 fc38 	bl	8000bd4 <__aeabi_fdiv>
 800e364:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e366:	1c19      	adds	r1, r3, #0
 800e368:	1c20      	adds	r0, r4, #0
 800e36a:	f7f2 fe19 	bl	8000fa0 <__aeabi_fmul>
 800e36e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800e370:	1c18      	adds	r0, r3, #0
 800e372:	46bd      	mov	sp, r7
 800e374:	b005      	add	sp, #20
 800e376:	bd90      	pop	{r4, r7, pc}
 800e378:	c2480000 	.word	0xc2480000
 800e37c:	43fa0000 	.word	0x43fa0000
 800e380:	42480000 	.word	0x42480000
 800e384:	3f8041ab 	.word	0x3f8041ab
 800e388:	40a00000 	.word	0x40a00000

0800e38c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	4913      	ldr	r1, [pc, #76]	@ (800e3ec <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800e39e:	1c18      	adds	r0, r3, #0
 800e3a0:	f7f2 fa8e 	bl	80008c0 <__aeabi_fadd>
 800e3a4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e3a6:	1c19      	adds	r1, r3, #0
 800e3a8:	1c20      	adds	r0, r4, #0
 800e3aa:	f7f2 fc13 	bl	8000bd4 <__aeabi_fdiv>
 800e3ae:	1c03      	adds	r3, r0, #0
 800e3b0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	228c      	movs	r2, #140	@ 0x8c
 800e3b6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	490b      	ldr	r1, [pc, #44]	@ (800e3f0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800e3c2:	1c18      	adds	r0, r3, #0
 800e3c4:	f7f2 fa7c 	bl	80008c0 <__aeabi_fadd>
 800e3c8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e3ca:	1c19      	adds	r1, r3, #0
 800e3cc:	1c20      	adds	r0, r4, #0
 800e3ce:	f7f2 fc01 	bl	8000bd4 <__aeabi_fdiv>
 800e3d2:	1c03      	adds	r3, r0, #0
 800e3d4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2290      	movs	r2, #144	@ 0x90
 800e3da:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2294      	movs	r2, #148	@ 0x94
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	5499      	strb	r1, [r3, r2]
}
 800e3e4:	46c0      	nop			@ (mov r8, r8)
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	b003      	add	sp, #12
 800e3ea:	bd90      	pop	{r4, r7, pc}
 800e3ec:	41a00000 	.word	0x41a00000
 800e3f0:	43fa0000 	.word	0x43fa0000

0800e3f4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800e3f4:	b590      	push	{r4, r7, lr}
 800e3f6:	b087      	sub	sp, #28
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2294      	movs	r2, #148	@ 0x94
 800e402:	5c9b      	ldrb	r3, [r3, r2]
 800e404:	2201      	movs	r2, #1
 800e406:	4053      	eors	r3, r2
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00f      	beq.n	800e42e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2198      	movs	r1, #152	@ 0x98
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	219c      	movs	r1, #156	@ 0x9c
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	21a0      	movs	r1, #160	@ 0xa0
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2294      	movs	r2, #148	@ 0x94
 800e42a:	2101      	movs	r1, #1
 800e42c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	228c      	movs	r2, #140	@ 0x8c
 800e432:	589b      	ldr	r3, [r3, r2]
 800e434:	1c19      	adds	r1, r3, #0
 800e436:	20fe      	movs	r0, #254	@ 0xfe
 800e438:	0580      	lsls	r0, r0, #22
 800e43a:	f7f2 feef 	bl	800121c <__aeabi_fsub>
 800e43e:	1c03      	adds	r3, r0, #0
 800e440:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2298      	movs	r2, #152	@ 0x98
 800e446:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e448:	1c19      	adds	r1, r3, #0
 800e44a:	f7f2 fda9 	bl	8000fa0 <__aeabi_fmul>
 800e44e:	1c03      	adds	r3, r0, #0
 800e450:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	228c      	movs	r2, #140	@ 0x8c
 800e456:	589b      	ldr	r3, [r3, r2]
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	1c18      	adds	r0, r3, #0
 800e45c:	f7f2 fda0 	bl	8000fa0 <__aeabi_fmul>
 800e460:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800e462:	1c19      	adds	r1, r3, #0
 800e464:	1c20      	adds	r0, r4, #0
 800e466:	f7f2 fa2b 	bl	80008c0 <__aeabi_fadd>
 800e46a:	1c03      	adds	r3, r0, #0
 800e46c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2298      	movs	r2, #152	@ 0x98
 800e472:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2290      	movs	r2, #144	@ 0x90
 800e478:	589b      	ldr	r3, [r3, r2]
 800e47a:	1c19      	adds	r1, r3, #0
 800e47c:	20fe      	movs	r0, #254	@ 0xfe
 800e47e:	0580      	lsls	r0, r0, #22
 800e480:	f7f2 fecc 	bl	800121c <__aeabi_fsub>
 800e484:	1c03      	adds	r3, r0, #0
 800e486:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	229c      	movs	r2, #156	@ 0x9c
 800e48c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e48e:	1c19      	adds	r1, r3, #0
 800e490:	f7f2 fd86 	bl	8000fa0 <__aeabi_fmul>
 800e494:	1c03      	adds	r3, r0, #0
 800e496:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2290      	movs	r2, #144	@ 0x90
 800e49c:	589b      	ldr	r3, [r3, r2]
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	1c18      	adds	r0, r3, #0
 800e4a2:	f7f2 fd7d 	bl	8000fa0 <__aeabi_fmul>
 800e4a6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800e4a8:	1c19      	adds	r1, r3, #0
 800e4aa:	1c20      	adds	r0, r4, #0
 800e4ac:	f7f2 fa08 	bl	80008c0 <__aeabi_fadd>
 800e4b0:	1c03      	adds	r3, r0, #0
 800e4b2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	229c      	movs	r2, #156	@ 0x9c
 800e4b8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2298      	movs	r2, #152	@ 0x98
 800e4be:	589a      	ldr	r2, [r3, r2]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	219c      	movs	r1, #156	@ 0x9c
 800e4c4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800e4c6:	1c19      	adds	r1, r3, #0
 800e4c8:	1c10      	adds	r0, r2, #0
 800e4ca:	f7f2 fea7 	bl	800121c <__aeabi_fsub>
 800e4ce:	1c03      	adds	r3, r0, #0
 800e4d0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	f7f2 f82b 	bl	8000530 <__aeabi_fcmplt>
 800e4da:	1e03      	subs	r3, r0, #0
 800e4dc:	d004      	beq.n	800e4e8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2280      	movs	r2, #128	@ 0x80
 800e4e2:	0612      	lsls	r2, r2, #24
 800e4e4:	4053      	eors	r3, r2
 800e4e6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800e4e8:	4923      	ldr	r1, [pc, #140]	@ (800e578 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800e4ea:	6978      	ldr	r0, [r7, #20]
 800e4ec:	f7f2 fd58 	bl	8000fa0 <__aeabi_fmul>
 800e4f0:	1c03      	adds	r3, r0, #0
 800e4f2:	1c18      	adds	r0, r3, #0
 800e4f4:	f018 f8dc 	bl	80266b0 <expf>
 800e4f8:	1c03      	adds	r3, r0, #0
 800e4fa:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800e4fc:	491f      	ldr	r1, [pc, #124]	@ (800e57c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800e4fe:	6938      	ldr	r0, [r7, #16]
 800e500:	f7f2 fd4e 	bl	8000fa0 <__aeabi_fmul>
 800e504:	1c03      	adds	r3, r0, #0
 800e506:	491e      	ldr	r1, [pc, #120]	@ (800e580 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800e508:	1c18      	adds	r0, r3, #0
 800e50a:	f7f2 f9d9 	bl	80008c0 <__aeabi_fadd>
 800e50e:	1c03      	adds	r3, r0, #0
 800e510:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	685c      	ldr	r4, [r3, #4]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	68f9      	ldr	r1, [r7, #12]
 800e51c:	1c18      	adds	r0, r3, #0
 800e51e:	f7f2 f9cf 	bl	80008c0 <__aeabi_fadd>
 800e522:	1c03      	adds	r3, r0, #0
 800e524:	1c19      	adds	r1, r3, #0
 800e526:	1c20      	adds	r0, r4, #0
 800e528:	f7f2 fb54 	bl	8000bd4 <__aeabi_fdiv>
 800e52c:	1c03      	adds	r3, r0, #0
 800e52e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800e530:	68b9      	ldr	r1, [r7, #8]
 800e532:	20fe      	movs	r0, #254	@ 0xfe
 800e534:	0580      	lsls	r0, r0, #22
 800e536:	f7f2 fe71 	bl	800121c <__aeabi_fsub>
 800e53a:	1c03      	adds	r3, r0, #0
 800e53c:	1c18      	adds	r0, r3, #0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	22a0      	movs	r2, #160	@ 0xa0
 800e542:	589b      	ldr	r3, [r3, r2]
 800e544:	1c19      	adds	r1, r3, #0
 800e546:	f7f2 fd2b 	bl	8000fa0 <__aeabi_fmul>
 800e54a:	1c03      	adds	r3, r0, #0
 800e54c:	1c1c      	adds	r4, r3, #0
 800e54e:	6839      	ldr	r1, [r7, #0]
 800e550:	68b8      	ldr	r0, [r7, #8]
 800e552:	f7f2 fd25 	bl	8000fa0 <__aeabi_fmul>
 800e556:	1c03      	adds	r3, r0, #0
 800e558:	1c19      	adds	r1, r3, #0
 800e55a:	1c20      	adds	r0, r4, #0
 800e55c:	f7f2 f9b0 	bl	80008c0 <__aeabi_fadd>
 800e560:	1c03      	adds	r3, r0, #0
 800e562:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	22a0      	movs	r2, #160	@ 0xa0
 800e568:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	22a0      	movs	r2, #160	@ 0xa0
 800e56e:	589b      	ldr	r3, [r3, r2]
}
 800e570:	1c18      	adds	r0, r3, #0
 800e572:	46bd      	mov	sp, r7
 800e574:	b007      	add	sp, #28
 800e576:	bd90      	pop	{r4, r7, pc}
 800e578:	be4ccccd 	.word	0xbe4ccccd
 800e57c:	43f00000 	.word	0x43f00000
 800e580:	41a00000 	.word	0x41a00000

0800e584 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	000a      	movs	r2, r1
 800e58e:	1cbb      	adds	r3, r7, #2
 800e590:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800e592:	230d      	movs	r3, #13
 800e594:	18fb      	adds	r3, r7, r3
 800e596:	22ff      	movs	r2, #255	@ 0xff
 800e598:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e59a:	230e      	movs	r3, #14
 800e59c:	18fb      	adds	r3, r7, r3
 800e59e:	2200      	movs	r2, #0
 800e5a0:	801a      	strh	r2, [r3, #0]
 800e5a2:	e037      	b.n	800e614 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800e5a4:	230e      	movs	r3, #14
 800e5a6:	18fb      	adds	r3, r7, r3
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	18d3      	adds	r3, r2, r3
 800e5ae:	7819      	ldrb	r1, [r3, #0]
 800e5b0:	220d      	movs	r2, #13
 800e5b2:	18bb      	adds	r3, r7, r2
 800e5b4:	18ba      	adds	r2, r7, r2
 800e5b6:	7812      	ldrb	r2, [r2, #0]
 800e5b8:	404a      	eors	r2, r1
 800e5ba:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e5bc:	230c      	movs	r3, #12
 800e5be:	18fb      	adds	r3, r7, r3
 800e5c0:	2208      	movs	r2, #8
 800e5c2:	701a      	strb	r2, [r3, #0]
 800e5c4:	e01b      	b.n	800e5fe <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800e5c6:	210d      	movs	r1, #13
 800e5c8:	187b      	adds	r3, r7, r1
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	da09      	bge.n	800e5e6 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800e5d2:	187b      	adds	r3, r7, r1
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	b25b      	sxtb	r3, r3
 800e5da:	2231      	movs	r2, #49	@ 0x31
 800e5dc:	4053      	eors	r3, r2
 800e5de:	b25a      	sxtb	r2, r3
 800e5e0:	187b      	adds	r3, r7, r1
 800e5e2:	701a      	strb	r2, [r3, #0]
 800e5e4:	e005      	b.n	800e5f2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800e5e6:	230d      	movs	r3, #13
 800e5e8:	18fa      	adds	r2, r7, r3
 800e5ea:	18fb      	adds	r3, r7, r3
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	18db      	adds	r3, r3, r3
 800e5f0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e5f2:	220c      	movs	r2, #12
 800e5f4:	18bb      	adds	r3, r7, r2
 800e5f6:	18ba      	adds	r2, r7, r2
 800e5f8:	7812      	ldrb	r2, [r2, #0]
 800e5fa:	3a01      	subs	r2, #1
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	230c      	movs	r3, #12
 800e600:	18fb      	adds	r3, r7, r3
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1de      	bne.n	800e5c6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e608:	220e      	movs	r2, #14
 800e60a:	18bb      	adds	r3, r7, r2
 800e60c:	18ba      	adds	r2, r7, r2
 800e60e:	8812      	ldrh	r2, [r2, #0]
 800e610:	3201      	adds	r2, #1
 800e612:	801a      	strh	r2, [r3, #0]
 800e614:	230e      	movs	r3, #14
 800e616:	18fa      	adds	r2, r7, r3
 800e618:	1cbb      	adds	r3, r7, #2
 800e61a:	8812      	ldrh	r2, [r2, #0]
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d3c0      	bcc.n	800e5a4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800e622:	230d      	movs	r3, #13
 800e624:	18fb      	adds	r3, r7, r3
 800e626:	781b      	ldrb	r3, [r3, #0]
}
 800e628:	0018      	movs	r0, r3
 800e62a:	46bd      	mov	sp, r7
 800e62c:	b004      	add	sp, #16
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	0008      	movs	r0, r1
 800e63a:	0011      	movs	r1, r2
 800e63c:	1cbb      	adds	r3, r7, #2
 800e63e:	1c02      	adds	r2, r0, #0
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	1c7b      	adds	r3, r7, #1
 800e644:	1c0a      	adds	r2, r1, #0
 800e646:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800e648:	1cbb      	adds	r3, r7, #2
 800e64a:	881a      	ldrh	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	0011      	movs	r1, r2
 800e650:	0018      	movs	r0, r3
 800e652:	f7ff ff97 	bl	800e584 <sensirion_i2c_generate_crc>
 800e656:	0003      	movs	r3, r0
 800e658:	001a      	movs	r2, r3
 800e65a:	1c7b      	adds	r3, r7, #1
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d001      	beq.n	800e666 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800e666:	2300      	movs	r3, #0
}
 800e668:	0018      	movs	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	b002      	add	sp, #8
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	0008      	movs	r0, r1
 800e67a:	0011      	movs	r1, r2
 800e67c:	1cbb      	adds	r3, r7, #2
 800e67e:	1c02      	adds	r2, r0, #0
 800e680:	801a      	strh	r2, [r3, #0]
 800e682:	003b      	movs	r3, r7
 800e684:	1c0a      	adds	r2, r1, #0
 800e686:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800e688:	003b      	movs	r3, r7
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	0a1b      	lsrs	r3, r3, #8
 800e68e:	b299      	uxth	r1, r3
 800e690:	1cbb      	adds	r3, r7, #2
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	1cba      	adds	r2, r7, #2
 800e696:	1c58      	adds	r0, r3, #1
 800e698:	8010      	strh	r0, [r2, #0]
 800e69a:	001a      	movs	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	189b      	adds	r3, r3, r2
 800e6a0:	b2ca      	uxtb	r2, r1
 800e6a2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800e6a4:	1cbb      	adds	r3, r7, #2
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	1cba      	adds	r2, r7, #2
 800e6aa:	1c59      	adds	r1, r3, #1
 800e6ac:	8011      	strh	r1, [r2, #0]
 800e6ae:	001a      	movs	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	189b      	adds	r3, r3, r2
 800e6b4:	003a      	movs	r2, r7
 800e6b6:	8812      	ldrh	r2, [r2, #0]
 800e6b8:	b2d2      	uxtb	r2, r2
 800e6ba:	701a      	strb	r2, [r3, #0]
    return offset;
 800e6bc:	1cbb      	adds	r3, r7, #2
 800e6be:	881b      	ldrh	r3, [r3, #0]
}
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	b002      	add	sp, #8
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800e6c8:	b590      	push	{r4, r7, lr}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	0008      	movs	r0, r1
 800e6d2:	0011      	movs	r1, r2
 800e6d4:	1cbb      	adds	r3, r7, #2
 800e6d6:	1c02      	adds	r2, r0, #0
 800e6d8:	801a      	strh	r2, [r3, #0]
 800e6da:	003b      	movs	r3, r7
 800e6dc:	1c0a      	adds	r2, r1, #0
 800e6de:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800e6e0:	003b      	movs	r3, r7
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	0a1b      	lsrs	r3, r3, #8
 800e6e6:	b299      	uxth	r1, r3
 800e6e8:	1cbb      	adds	r3, r7, #2
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	1cba      	adds	r2, r7, #2
 800e6ee:	1c58      	adds	r0, r3, #1
 800e6f0:	8010      	strh	r0, [r2, #0]
 800e6f2:	001a      	movs	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	189b      	adds	r3, r3, r2
 800e6f8:	b2ca      	uxtb	r2, r1
 800e6fa:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800e6fc:	1cbb      	adds	r3, r7, #2
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	1cba      	adds	r2, r7, #2
 800e702:	1c59      	adds	r1, r3, #1
 800e704:	8011      	strh	r1, [r2, #0]
 800e706:	001a      	movs	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	189b      	adds	r3, r3, r2
 800e70c:	003a      	movs	r2, r7
 800e70e:	8812      	ldrh	r2, [r2, #0]
 800e710:	b2d2      	uxtb	r2, r2
 800e712:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800e714:	1cbb      	adds	r3, r7, #2
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	3b02      	subs	r3, #2
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800e71e:	1cbb      	adds	r3, r7, #2
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	18d4      	adds	r4, r2, r3
 800e726:	2102      	movs	r1, #2
 800e728:	f7ff ff2c 	bl	800e584 <sensirion_i2c_generate_crc>
 800e72c:	0003      	movs	r3, r0
 800e72e:	7023      	strb	r3, [r4, #0]
    offset++;
 800e730:	1cbb      	adds	r3, r7, #2
 800e732:	881a      	ldrh	r2, [r3, #0]
 800e734:	1cbb      	adds	r3, r7, #2
 800e736:	3201      	adds	r2, #1
 800e738:	801a      	strh	r2, [r3, #0]

    return offset;
 800e73a:	1cbb      	adds	r3, r7, #2
 800e73c:	881b      	ldrh	r3, [r3, #0]
}
 800e73e:	0018      	movs	r0, r3
 800e740:	46bd      	mov	sp, r7
 800e742:	b003      	add	sp, #12
 800e744:	bd90      	pop	{r4, r7, pc}

0800e746 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800e746:	b580      	push	{r7, lr}
 800e748:	b082      	sub	sp, #8
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	0008      	movs	r0, r1
 800e750:	0011      	movs	r1, r2
 800e752:	1cbb      	adds	r3, r7, #2
 800e754:	1c02      	adds	r2, r0, #0
 800e756:	801a      	strh	r2, [r3, #0]
 800e758:	003b      	movs	r3, r7
 800e75a:	1c0a      	adds	r2, r1, #0
 800e75c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800e75e:	003b      	movs	r3, r7
 800e760:	881a      	ldrh	r2, [r3, #0]
 800e762:	1cbb      	adds	r3, r7, #2
 800e764:	8819      	ldrh	r1, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	0018      	movs	r0, r3
 800e76a:	f7ff ffad 	bl	800e6c8 <sensirion_i2c_add_uint16_t_to_buffer>
 800e76e:	0003      	movs	r3, r0
}
 800e770:	0018      	movs	r0, r3
 800e772:	46bd      	mov	sp, r7
 800e774:	b002      	add	sp, #8
 800e776:	bd80      	pop	{r7, pc}

0800e778 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6039      	str	r1, [r7, #0]
 800e780:	0011      	movs	r1, r2
 800e782:	1dfb      	adds	r3, r7, #7
 800e784:	1c02      	adds	r2, r0, #0
 800e786:	701a      	strb	r2, [r3, #0]
 800e788:	1d3b      	adds	r3, r7, #4
 800e78a:	1c0a      	adds	r2, r1, #0
 800e78c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800e78e:	1d3b      	adds	r3, r7, #4
 800e790:	881a      	ldrh	r2, [r3, #0]
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	1dfb      	adds	r3, r7, #7
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	0018      	movs	r0, r3
 800e79a:	f7fe f9d9 	bl	800cb50 <sensirion_i2c_hal_write>
 800e79e:	0003      	movs	r3, r0
}
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	b002      	add	sp, #8
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800e7a8:	b5b0      	push	{r4, r5, r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6039      	str	r1, [r7, #0]
 800e7b0:	0011      	movs	r1, r2
 800e7b2:	1dfb      	adds	r3, r7, #7
 800e7b4:	1c02      	adds	r2, r0, #0
 800e7b6:	701a      	strb	r2, [r3, #0]
 800e7b8:	1d3b      	adds	r3, r7, #4
 800e7ba:	1c0a      	adds	r2, r1, #0
 800e7bc:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800e7be:	1d3b      	adds	r3, r7, #4
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	085b      	lsrs	r3, r3, #1
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	220a      	movs	r2, #10
 800e7c8:	18ba      	adds	r2, r7, r2
 800e7ca:	1c19      	adds	r1, r3, #0
 800e7cc:	1c0b      	adds	r3, r1, #0
 800e7ce:	18db      	adds	r3, r3, r3
 800e7d0:	185b      	adds	r3, r3, r1
 800e7d2:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800e7d4:	1d3b      	adds	r3, r7, #4
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	4013      	ands	r3, r2
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d001      	beq.n	800e7e6 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800e7e2:	2304      	movs	r3, #4
 800e7e4:	e06b      	b.n	800e8be <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800e7e6:	230a      	movs	r3, #10
 800e7e8:	18fb      	adds	r3, r7, r3
 800e7ea:	881a      	ldrh	r2, [r3, #0]
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	1dfb      	adds	r3, r7, #7
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	0018      	movs	r0, r3
 800e7f4:	f7fe f98c 	bl	800cb10 <sensirion_i2c_hal_read>
 800e7f8:	0003      	movs	r3, r0
 800e7fa:	001a      	movs	r2, r3
 800e7fc:	2108      	movs	r1, #8
 800e7fe:	187b      	adds	r3, r7, r1
 800e800:	801a      	strh	r2, [r3, #0]
    if (error) {
 800e802:	000a      	movs	r2, r1
 800e804:	18bb      	adds	r3, r7, r2
 800e806:	2100      	movs	r1, #0
 800e808:	5e5b      	ldrsh	r3, [r3, r1]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800e80e:	18bb      	adds	r3, r7, r2
 800e810:	2200      	movs	r2, #0
 800e812:	5e9b      	ldrsh	r3, [r3, r2]
 800e814:	e053      	b.n	800e8be <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e816:	230e      	movs	r3, #14
 800e818:	18fb      	adds	r3, r7, r3
 800e81a:	2200      	movs	r2, #0
 800e81c:	801a      	strh	r2, [r3, #0]
 800e81e:	230c      	movs	r3, #12
 800e820:	18fb      	adds	r3, r7, r3
 800e822:	2200      	movs	r2, #0
 800e824:	801a      	strh	r2, [r3, #0]
 800e826:	e041      	b.n	800e8ac <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e828:	210e      	movs	r1, #14
 800e82a:	187b      	adds	r3, r7, r1
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800e832:	187b      	adds	r3, r7, r1
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	3302      	adds	r3, #2
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	001a      	movs	r2, r3
 800e840:	2102      	movs	r1, #2
 800e842:	f7ff fef5 	bl	800e630 <sensirion_i2c_check_crc>
 800e846:	0003      	movs	r3, r0
 800e848:	001a      	movs	r2, r3
 800e84a:	2108      	movs	r1, #8
 800e84c:	187b      	adds	r3, r7, r1
 800e84e:	801a      	strh	r2, [r3, #0]
        if (error) {
 800e850:	000a      	movs	r2, r1
 800e852:	18bb      	adds	r3, r7, r2
 800e854:	2100      	movs	r1, #0
 800e856:	5e5b      	ldrsh	r3, [r3, r1]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d003      	beq.n	800e864 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800e85c:	18bb      	adds	r3, r7, r2
 800e85e:	2200      	movs	r2, #0
 800e860:	5e9b      	ldrsh	r3, [r3, r2]
 800e862:	e02c      	b.n	800e8be <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800e864:	240e      	movs	r4, #14
 800e866:	193b      	adds	r3, r7, r4
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	18d2      	adds	r2, r2, r3
 800e86e:	250c      	movs	r5, #12
 800e870:	197b      	adds	r3, r7, r5
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	1979      	adds	r1, r7, r5
 800e876:	1c58      	adds	r0, r3, #1
 800e878:	8008      	strh	r0, [r1, #0]
 800e87a:	0019      	movs	r1, r3
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	185b      	adds	r3, r3, r1
 800e880:	7812      	ldrb	r2, [r2, #0]
 800e882:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800e884:	193b      	adds	r3, r7, r4
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	3301      	adds	r3, #1
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	18d2      	adds	r2, r2, r3
 800e88e:	197b      	adds	r3, r7, r5
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	1979      	adds	r1, r7, r5
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	8008      	strh	r0, [r1, #0]
 800e898:	0019      	movs	r1, r3
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	185b      	adds	r3, r3, r1
 800e89e:	7812      	ldrb	r2, [r2, #0]
 800e8a0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e8a2:	193b      	adds	r3, r7, r4
 800e8a4:	193a      	adds	r2, r7, r4
 800e8a6:	8812      	ldrh	r2, [r2, #0]
 800e8a8:	3203      	adds	r2, #3
 800e8aa:	801a      	strh	r2, [r3, #0]
 800e8ac:	230e      	movs	r3, #14
 800e8ae:	18fa      	adds	r2, r7, r3
 800e8b0:	230a      	movs	r3, #10
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	8812      	ldrh	r2, [r2, #0]
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d3b5      	bcc.n	800e828 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	0018      	movs	r0, r3
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	b004      	add	sp, #16
 800e8c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e8c8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e8c8:	b590      	push	{r4, r7, lr}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6039      	str	r1, [r7, #0]
 800e8d0:	0011      	movs	r1, r2
 800e8d2:	1dfb      	adds	r3, r7, #7
 800e8d4:	1c02      	adds	r2, r0, #0
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	1dbb      	adds	r3, r7, #6
 800e8da:	1c0a      	adds	r2, r1, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800e8de:	4b08      	ldr	r3, [pc, #32]	@ (800e900 <ReadRegister+0x38>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d008      	beq.n	800e8f8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800e8e6:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <ReadRegister+0x38>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	1dba      	adds	r2, r7, #6
 800e8ec:	7814      	ldrb	r4, [r2, #0]
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	1dfa      	adds	r2, r7, #7
 800e8f2:	7810      	ldrb	r0, [r2, #0]
 800e8f4:	0022      	movs	r2, r4
 800e8f6:	4798      	blx	r3
  }
}
 800e8f8:	46c0      	nop			@ (mov r8, r8)
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	b003      	add	sp, #12
 800e8fe:	bd90      	pop	{r4, r7, pc}
 800e900:	20000ec4 	.word	0x20000ec4

0800e904 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6039      	str	r1, [r7, #0]
 800e90c:	0011      	movs	r1, r2
 800e90e:	1dfb      	adds	r3, r7, #7
 800e910:	1c02      	adds	r2, r0, #0
 800e912:	701a      	strb	r2, [r3, #0]
 800e914:	1dbb      	adds	r3, r7, #6
 800e916:	1c0a      	adds	r2, r1, #0
 800e918:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e91a:	4b08      	ldr	r3, [pc, #32]	@ (800e93c <WriteRegister+0x38>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d008      	beq.n	800e934 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800e922:	4b06      	ldr	r3, [pc, #24]	@ (800e93c <WriteRegister+0x38>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	1dba      	adds	r2, r7, #6
 800e928:	7814      	ldrb	r4, [r2, #0]
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	1dfa      	adds	r2, r7, #7
 800e92e:	7810      	ldrb	r0, [r2, #0]
 800e930:	0022      	movs	r2, r4
 800e932:	4798      	blx	r3
  }
}
 800e934:	46c0      	nop			@ (mov r8, r8)
 800e936:	46bd      	mov	sp, r7
 800e938:	b003      	add	sp, #12
 800e93a:	bd90      	pop	{r4, r7, pc}
 800e93c:	20000ec8 	.word	0x20000ec8

0800e940 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800e948:	f003 fb90 	bl	801206c <HAL_GetTick>
 800e94c:	0002      	movs	r2, r0
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	18d2      	adds	r2, r2, r3
 800e952:	4b03      	ldr	r3, [pc, #12]	@ (800e960 <setSGP40TimeStamp+0x20>)
 800e954:	601a      	str	r2, [r3, #0]
}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	46bd      	mov	sp, r7
 800e95a:	b002      	add	sp, #8
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	46c0      	nop			@ (mov r8, r8)
 800e960:	20000ed8 	.word	0x20000ed8

0800e964 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800e968:	4b02      	ldr	r3, [pc, #8]	@ (800e974 <ResetSGP40samplecounter+0x10>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	701a      	strb	r2, [r3, #0]
}
 800e96e:	46c0      	nop			@ (mov r8, r8)
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20000ed6 	.word	0x20000ed6

0800e978 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800e982:	4b07      	ldr	r3, [pc, #28]	@ (800e9a0 <SGP_Init+0x28>)
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800e988:	4b06      	ldr	r3, [pc, #24]	@ (800e9a4 <SGP_Init+0x2c>)
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800e98e:	4b06      	ldr	r3, [pc, #24]	@ (800e9a8 <SGP_Init+0x30>)
 800e990:	2100      	movs	r1, #0
 800e992:	0018      	movs	r0, r3
 800e994:	f7fe ff70 	bl	800d878 <GasIndexAlgorithm_init>
}
 800e998:	46c0      	nop			@ (mov r8, r8)
 800e99a:	46bd      	mov	sp, r7
 800e99c:	b002      	add	sp, #8
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	20000ec4 	.word	0x20000ec4
 800e9a4:	20000ec8 	.word	0x20000ec8
 800e9a8:	20000ee0 	.word	0x20000ee0

0800e9ac <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800e9b0:	4b07      	ldr	r3, [pc, #28]	@ (800e9d0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d004      	beq.n	800e9c2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800e9b8:	4b06      	ldr	r3, [pc, #24]	@ (800e9d4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800e9ba:	22fe      	movs	r2, #254	@ 0xfe
 800e9bc:	0592      	lsls	r2, r2, #22
 800e9be:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800e9c0:	e002      	b.n	800e9c8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800e9c2:	4b04      	ldr	r3, [pc, #16]	@ (800e9d4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800e9c4:	4a04      	ldr	r2, [pc, #16]	@ (800e9d8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800e9c6:	605a      	str	r2, [r3, #4]
}
 800e9c8:	46c0      	nop			@ (mov r8, r8)
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	46c0      	nop			@ (mov r8, r8)
 800e9d0:	20001e2d 	.word	0x20001e2d
 800e9d4:	20000ee0 	.word	0x20000ee0
 800e9d8:	44610000 	.word	0x44610000

0800e9dc <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800e9e0:	4b13      	ldr	r3, [pc, #76]	@ (800ea30 <SGP_StartMeasurement+0x54>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00d      	beq.n	800ea04 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800e9e8:	4b12      	ldr	r3, [pc, #72]	@ (800ea34 <SGP_StartMeasurement+0x58>)
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	0019      	movs	r1, r3
 800e9ee:	2059      	movs	r0, #89	@ 0x59
 800e9f0:	f7ff ff88 	bl	800e904 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800e9f4:	f003 fb3a 	bl	801206c <HAL_GetTick>
 800e9f8:	0003      	movs	r3, r0
 800e9fa:	331e      	adds	r3, #30
 800e9fc:	001a      	movs	r2, r3
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800ea38 <SGP_StartMeasurement+0x5c>)
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e00c      	b.n	800ea1e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ea04:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <SGP_StartMeasurement+0x60>)
 800ea06:	2208      	movs	r2, #8
 800ea08:	0019      	movs	r1, r3
 800ea0a:	2059      	movs	r0, #89	@ 0x59
 800ea0c:	f7ff ff7a 	bl	800e904 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800ea10:	f003 fb2c 	bl	801206c <HAL_GetTick>
 800ea14:	0003      	movs	r3, r0
 800ea16:	33aa      	adds	r3, #170	@ 0xaa
 800ea18:	001a      	movs	r2, r3
 800ea1a:	4b09      	ldr	r3, [pc, #36]	@ (800ea40 <SGP_StartMeasurement+0x64>)
 800ea1c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800ea1e:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <SGP_StartMeasurement+0x68>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800ea24:	4b08      	ldr	r3, [pc, #32]	@ (800ea48 <SGP_StartMeasurement+0x6c>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	701a      	strb	r2, [r3, #0]
}
 800ea2a:	46c0      	nop			@ (mov r8, r8)
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20000f88 	.word	0x20000f88
 800ea34:	200000b0 	.word	0x200000b0
 800ea38:	200000c4 	.word	0x200000c4
 800ea3c:	200000a8 	.word	0x200000a8
 800ea40:	200000bc 	.word	0x200000bc
 800ea44:	20000edc 	.word	0x20000edc
 800ea48:	20000edd 	.word	0x20000edd

0800ea4c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800ea50:	4b04      	ldr	r3, [pc, #16]	@ (800ea64 <SGP_HeatedUp+0x18>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	0018      	movs	r0, r3
 800ea56:	f002 fe67 	bl	8011728 <TimestampIsReached>
 800ea5a:	0003      	movs	r3, r0
}
 800ea5c:	0018      	movs	r0, r3
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	46c0      	nop			@ (mov r8, r8)
 800ea64:	200000bc 	.word	0x200000bc

0800ea68 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800ea6c:	4b04      	ldr	r3, [pc, #16]	@ (800ea80 <SGP_MeasurementReady+0x18>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	0018      	movs	r0, r3
 800ea72:	f002 fe59 	bl	8011728 <TimestampIsReached>
 800ea76:	0003      	movs	r3, r0
}
 800ea78:	0018      	movs	r0, r3
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	46c0      	nop			@ (mov r8, r8)
 800ea80:	200000c4 	.word	0x200000c4

0800ea84 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800ea84:	b580      	push	{r7, lr}
 800ea86:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800ea88:	4b04      	ldr	r3, [pc, #16]	@ (800ea9c <SGP_MeasurementDone+0x18>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	0018      	movs	r0, r3
 800ea8e:	f002 fe4b 	bl	8011728 <TimestampIsReached>
 800ea92:	0003      	movs	r3, r0
}
 800ea94:	0018      	movs	r0, r3
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	46c0      	nop			@ (mov r8, r8)
 800ea9c:	200000c0 	.word	0x200000c0

0800eaa0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800eaa4:	4b04      	ldr	r3, [pc, #16]	@ (800eab8 <SGP_TurnHeaterOff+0x18>)
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	0019      	movs	r1, r3
 800eaaa:	2059      	movs	r0, #89	@ 0x59
 800eaac:	f7ff ff2a 	bl	800e904 <WriteRegister>
}
 800eab0:	46c0      	nop			@ (mov r8, r8)
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	46c0      	nop			@ (mov r8, r8)
 800eab8:	200000a0 	.word	0x200000a0

0800eabc <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b087      	sub	sp, #28
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800eac4:	f7ff ffc2 	bl	800ea4c <SGP_HeatedUp>
 800eac8:	1e03      	subs	r3, r0, #0
 800eaca:	d032      	beq.n	800eb32 <SGP_GetMeasurementValues+0x76>
 800eacc:	4b7f      	ldr	r3, [pc, #508]	@ (800eccc <SGP_GetMeasurementValues+0x210>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2201      	movs	r2, #1
 800ead2:	4053      	eors	r3, r2
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d02b      	beq.n	800eb32 <SGP_GetMeasurementValues+0x76>
 800eada:	4b7d      	ldr	r3, [pc, #500]	@ (800ecd0 <SGP_GetMeasurementValues+0x214>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2201      	movs	r2, #1
 800eae0:	4053      	eors	r3, r2
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d024      	beq.n	800eb32 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800eae8:	4b78      	ldr	r3, [pc, #480]	@ (800eccc <SGP_GetMeasurementValues+0x210>)
 800eaea:	2201      	movs	r2, #1
 800eaec:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800eaee:	4b79      	ldr	r3, [pc, #484]	@ (800ecd4 <SGP_GetMeasurementValues+0x218>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00d      	beq.n	800eb12 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eaf6:	4b78      	ldr	r3, [pc, #480]	@ (800ecd8 <SGP_GetMeasurementValues+0x21c>)
 800eaf8:	2208      	movs	r2, #8
 800eafa:	0019      	movs	r1, r3
 800eafc:	2059      	movs	r0, #89	@ 0x59
 800eafe:	f7ff ff01 	bl	800e904 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eb02:	f003 fab3 	bl	801206c <HAL_GetTick>
 800eb06:	0003      	movs	r3, r0
 800eb08:	331e      	adds	r3, #30
 800eb0a:	001a      	movs	r2, r3
 800eb0c:	4b73      	ldr	r3, [pc, #460]	@ (800ecdc <SGP_GetMeasurementValues+0x220>)
 800eb0e:	601a      	str	r2, [r3, #0]
 800eb10:	e00c      	b.n	800eb2c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eb12:	4b73      	ldr	r3, [pc, #460]	@ (800ece0 <SGP_GetMeasurementValues+0x224>)
 800eb14:	2208      	movs	r2, #8
 800eb16:	0019      	movs	r1, r3
 800eb18:	2059      	movs	r0, #89	@ 0x59
 800eb1a:	f7ff fef3 	bl	800e904 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eb1e:	f003 faa5 	bl	801206c <HAL_GetTick>
 800eb22:	0003      	movs	r3, r0
 800eb24:	331e      	adds	r3, #30
 800eb26:	001a      	movs	r2, r3
 800eb28:	4b6c      	ldr	r3, [pc, #432]	@ (800ecdc <SGP_GetMeasurementValues+0x220>)
 800eb2a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800eb2c:	4b68      	ldr	r3, [pc, #416]	@ (800ecd0 <SGP_GetMeasurementValues+0x214>)
 800eb2e:	2201      	movs	r2, #1
 800eb30:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800eb32:	4b66      	ldr	r3, [pc, #408]	@ (800eccc <SGP_GetMeasurementValues+0x210>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d100      	bne.n	800eb3c <SGP_GetMeasurementValues+0x80>
 800eb3a:	e0ab      	b.n	800ec94 <SGP_GetMeasurementValues+0x1d8>
 800eb3c:	f7ff ff94 	bl	800ea68 <SGP_MeasurementReady>
 800eb40:	1e03      	subs	r3, r0, #0
 800eb42:	d100      	bne.n	800eb46 <SGP_GetMeasurementValues+0x8a>
 800eb44:	e0a6      	b.n	800ec94 <SGP_GetMeasurementValues+0x1d8>
 800eb46:	4b67      	ldr	r3, [pc, #412]	@ (800ece4 <SGP_GetMeasurementValues+0x228>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	4053      	eors	r3, r2
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d100      	bne.n	800eb56 <SGP_GetMeasurementValues+0x9a>
 800eb54:	e09e      	b.n	800ec94 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800eb56:	4b63      	ldr	r3, [pc, #396]	@ (800ece4 <SGP_GetMeasurementValues+0x228>)
 800eb58:	2201      	movs	r2, #1
 800eb5a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800eb5c:	4b62      	ldr	r3, [pc, #392]	@ (800ece8 <SGP_GetMeasurementValues+0x22c>)
 800eb5e:	2203      	movs	r2, #3
 800eb60:	0019      	movs	r1, r3
 800eb62:	2059      	movs	r0, #89	@ 0x59
 800eb64:	f7ff feb0 	bl	800e8c8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800eb68:	4b5f      	ldr	r3, [pc, #380]	@ (800ece8 <SGP_GetMeasurementValues+0x22c>)
 800eb6a:	2203      	movs	r2, #3
 800eb6c:	2103      	movs	r1, #3
 800eb6e:	0018      	movs	r0, r3
 800eb70:	f000 f918 	bl	800eda4 <CheckCRC>
 800eb74:	0003      	movs	r3, r0
 800eb76:	001a      	movs	r2, r3
 800eb78:	2301      	movs	r3, #1
 800eb7a:	4053      	eors	r3, r2
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d02a      	beq.n	800ebd8 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800eb82:	4a5a      	ldr	r2, [pc, #360]	@ (800ecec <SGP_GetMeasurementValues+0x230>)
 800eb84:	4b5a      	ldr	r3, [pc, #360]	@ (800ecf0 <SGP_GetMeasurementValues+0x234>)
 800eb86:	0019      	movs	r1, r3
 800eb88:	2001      	movs	r0, #1
 800eb8a:	f002 fe23 	bl	80117d4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800eb8e:	4a59      	ldr	r2, [pc, #356]	@ (800ecf4 <SGP_GetMeasurementValues+0x238>)
 800eb90:	4b59      	ldr	r3, [pc, #356]	@ (800ecf8 <SGP_GetMeasurementValues+0x23c>)
 800eb92:	0019      	movs	r1, r3
 800eb94:	2002      	movs	r0, #2
 800eb96:	f002 fe1d 	bl	80117d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800eb9a:	230f      	movs	r3, #15
 800eb9c:	18fb      	adds	r3, r7, r3
 800eb9e:	2200      	movs	r2, #0
 800eba0:	701a      	strb	r2, [r3, #0]
 800eba2:	e012      	b.n	800ebca <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800eba4:	240f      	movs	r4, #15
 800eba6:	193b      	adds	r3, r7, r4
 800eba8:	7818      	ldrb	r0, [r3, #0]
 800ebaa:	193b      	adds	r3, r7, r4
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	4a4e      	ldr	r2, [pc, #312]	@ (800ece8 <SGP_GetMeasurementValues+0x22c>)
 800ebb0:	5cd3      	ldrb	r3, [r2, r3]
 800ebb2:	4a52      	ldr	r2, [pc, #328]	@ (800ecfc <SGP_GetMeasurementValues+0x240>)
 800ebb4:	4952      	ldr	r1, [pc, #328]	@ (800ed00 <SGP_GetMeasurementValues+0x244>)
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	0003      	movs	r3, r0
 800ebba:	2003      	movs	r0, #3
 800ebbc:	f002 fe0a 	bl	80117d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ebc0:	193b      	adds	r3, r7, r4
 800ebc2:	781a      	ldrb	r2, [r3, #0]
 800ebc4:	193b      	adds	r3, r7, r4
 800ebc6:	3201      	adds	r2, #1
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	230f      	movs	r3, #15
 800ebcc:	18fb      	adds	r3, r7, r3
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	d9e7      	bls.n	800eba4 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e075      	b.n	800ecc4 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800ebd8:	f003 fa48 	bl	801206c <HAL_GetTick>
 800ebdc:	0003      	movs	r3, r0
 800ebde:	22fa      	movs	r2, #250	@ 0xfa
 800ebe0:	0092      	lsls	r2, r2, #2
 800ebe2:	189a      	adds	r2, r3, r2
 800ebe4:	4b47      	ldr	r3, [pc, #284]	@ (800ed04 <SGP_GetMeasurementValues+0x248>)
 800ebe6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800ebe8:	f7ff ff5a 	bl	800eaa0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800ebec:	4b46      	ldr	r3, [pc, #280]	@ (800ed08 <SGP_GetMeasurementValues+0x24c>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	4b44      	ldr	r3, [pc, #272]	@ (800ed08 <SGP_GetMeasurementValues+0x24c>)
 800ebf6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ebf8:	4b43      	ldr	r3, [pc, #268]	@ (800ed08 <SGP_GetMeasurementValues+0x24c>)
 800ebfa:	781a      	ldrb	r2, [r3, #0]
 800ebfc:	4b43      	ldr	r3, [pc, #268]	@ (800ed0c <SGP_GetMeasurementValues+0x250>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d347      	bcc.n	800ec94 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ec04:	4b38      	ldr	r3, [pc, #224]	@ (800ece8 <SGP_GetMeasurementValues+0x22c>)
 800ec06:	785b      	ldrb	r3, [r3, #1]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	4b36      	ldr	r3, [pc, #216]	@ (800ece8 <SGP_GetMeasurementValues+0x22c>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	b21b      	sxth	r3, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	b21a      	sxth	r2, r3
 800ec16:	240c      	movs	r4, #12
 800ec18:	193b      	adds	r3, r7, r4
 800ec1a:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800ec20:	193b      	adds	r3, r7, r4
 800ec22:	8819      	ldrh	r1, [r3, #0]
 800ec24:	2308      	movs	r3, #8
 800ec26:	18fa      	adds	r2, r7, r3
 800ec28:	4b39      	ldr	r3, [pc, #228]	@ (800ed10 <SGP_GetMeasurementValues+0x254>)
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f7fe fe88 	bl	800d940 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800ec36:	4b37      	ldr	r3, [pc, #220]	@ (800ed14 <SGP_GetMeasurementValues+0x258>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	4b35      	ldr	r3, [pc, #212]	@ (800ed14 <SGP_GetMeasurementValues+0x258>)
 800ec40:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800ec42:	4b34      	ldr	r3, [pc, #208]	@ (800ed14 <SGP_GetMeasurementValues+0x258>)
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d10d      	bne.n	800ec66 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800ec4a:	193b      	adds	r3, r7, r4
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	4a32      	ldr	r2, [pc, #200]	@ (800ed18 <SGP_GetMeasurementValues+0x25c>)
 800ec50:	492b      	ldr	r1, [pc, #172]	@ (800ed00 <SGP_GetMeasurementValues+0x244>)
 800ec52:	2003      	movs	r0, #3
 800ec54:	f002 fdbe 	bl	80117d4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	4a30      	ldr	r2, [pc, #192]	@ (800ed1c <SGP_GetMeasurementValues+0x260>)
 800ec5c:	4928      	ldr	r1, [pc, #160]	@ (800ed00 <SGP_GetMeasurementValues+0x244>)
 800ec5e:	2003      	movs	r0, #3
 800ec60:	f002 fdb8 	bl	80117d4 <CreateLine>
 800ec64:	e006      	b.n	800ec74 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800ec66:	4b2b      	ldr	r3, [pc, #172]	@ (800ed14 <SGP_GetMeasurementValues+0x258>)
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	2b0b      	cmp	r3, #11
 800ec6c:	d102      	bne.n	800ec74 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800ec6e:	4b29      	ldr	r3, [pc, #164]	@ (800ed14 <SGP_GetMeasurementValues+0x258>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f001 fd5b 	bl	8010734 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800ec7e:	4b22      	ldr	r3, [pc, #136]	@ (800ed08 <SGP_GetMeasurementValues+0x24c>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800ec84:	4b13      	ldr	r3, [pc, #76]	@ (800ecd4 <SGP_GetMeasurementValues+0x218>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800ec8a:	4b11      	ldr	r3, [pc, #68]	@ (800ecd0 <SGP_GetMeasurementValues+0x214>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	701a      	strb	r2, [r3, #0]
      return true;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e017      	b.n	800ecc4 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800ec94:	f7ff fef6 	bl	800ea84 <SGP_MeasurementDone>
 800ec98:	1e03      	subs	r3, r0, #0
 800ec9a:	d012      	beq.n	800ecc2 <SGP_GetMeasurementValues+0x206>
 800ec9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eccc <SGP_GetMeasurementValues+0x210>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00e      	beq.n	800ecc2 <SGP_GetMeasurementValues+0x206>
 800eca4:	4b0f      	ldr	r3, [pc, #60]	@ (800ece4 <SGP_GetMeasurementValues+0x228>)
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00a      	beq.n	800ecc2 <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800ecac:	4a1c      	ldr	r2, [pc, #112]	@ (800ed20 <SGP_GetMeasurementValues+0x264>)
 800ecae:	4b14      	ldr	r3, [pc, #80]	@ (800ed00 <SGP_GetMeasurementValues+0x244>)
 800ecb0:	0019      	movs	r1, r3
 800ecb2:	2003      	movs	r0, #3
 800ecb4:	f002 fd8e 	bl	80117d4 <CreateLine>
    SGP_StartMeasurement();
 800ecb8:	f7ff fe90 	bl	800e9dc <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800ecbc:	4b04      	ldr	r3, [pc, #16]	@ (800ecd0 <SGP_GetMeasurementValues+0x214>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	b005      	add	sp, #20
 800ecca:	bd90      	pop	{r4, r7, pc}
 800eccc:	20000edc 	.word	0x20000edc
 800ecd0:	20000f89 	.word	0x20000f89
 800ecd4:	20000f88 	.word	0x20000f88
 800ecd8:	200000b0 	.word	0x200000b0
 800ecdc:	200000c4 	.word	0x200000c4
 800ece0:	200000a8 	.word	0x200000a8
 800ece4:	20000edd 	.word	0x20000edd
 800ece8:	20000ecc 	.word	0x20000ecc
 800ecec:	0802a720 	.word	0x0802a720
 800ecf0:	0802a748 	.word	0x0802a748
 800ecf4:	0802a74c 	.word	0x0802a74c
 800ecf8:	0802a76c 	.word	0x0802a76c
 800ecfc:	0802a770 	.word	0x0802a770
 800ed00:	0802a790 	.word	0x0802a790
 800ed04:	200000c0 	.word	0x200000c0
 800ed08:	20000ed5 	.word	0x20000ed5
 800ed0c:	200000ba 	.word	0x200000ba
 800ed10:	20000ee0 	.word	0x20000ee0
 800ed14:	20000ed6 	.word	0x20000ed6
 800ed18:	0802a794 	.word	0x0802a794
 800ed1c:	0802a7b0 	.word	0x0802a7b0
 800ed20:	0802a7cc 	.word	0x0802a7cc

0800ed24 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ed2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ed94 <SGP_DeviceConnected+0x70>)
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	0019      	movs	r1, r3
 800ed30:	2059      	movs	r0, #89	@ 0x59
 800ed32:	f7ff fde7 	bl	800e904 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800ed36:	2001      	movs	r0, #1
 800ed38:	f003 f9a2 	bl	8012080 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800ed3c:	4b16      	ldr	r3, [pc, #88]	@ (800ed98 <SGP_DeviceConnected+0x74>)
 800ed3e:	2209      	movs	r2, #9
 800ed40:	0019      	movs	r1, r3
 800ed42:	2059      	movs	r0, #89	@ 0x59
 800ed44:	f7ff fdc0 	bl	800e8c8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ed48:	1dfb      	adds	r3, r7, #7
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	701a      	strb	r2, [r3, #0]
 800ed4e:	e011      	b.n	800ed74 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800ed50:	1dfb      	adds	r3, r7, #7
 800ed52:	7818      	ldrb	r0, [r3, #0]
 800ed54:	1dfb      	adds	r3, r7, #7
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	4a0f      	ldr	r2, [pc, #60]	@ (800ed98 <SGP_DeviceConnected+0x74>)
 800ed5a:	5cd3      	ldrb	r3, [r2, r3]
 800ed5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ed9c <SGP_DeviceConnected+0x78>)
 800ed5e:	4910      	ldr	r1, [pc, #64]	@ (800eda0 <SGP_DeviceConnected+0x7c>)
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	0003      	movs	r3, r0
 800ed64:	2002      	movs	r0, #2
 800ed66:	f002 fd35 	bl	80117d4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ed6a:	1dfb      	adds	r3, r7, #7
 800ed6c:	781a      	ldrb	r2, [r3, #0]
 800ed6e:	1dfb      	adds	r3, r7, #7
 800ed70:	3201      	adds	r2, #1
 800ed72:	701a      	strb	r2, [r3, #0]
 800ed74:	1dfb      	adds	r3, r7, #7
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b08      	cmp	r3, #8
 800ed7a:	d9e9      	bls.n	800ed50 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ed7c:	4b06      	ldr	r3, [pc, #24]	@ (800ed98 <SGP_DeviceConnected+0x74>)
 800ed7e:	2203      	movs	r2, #3
 800ed80:	2109      	movs	r1, #9
 800ed82:	0018      	movs	r0, r3
 800ed84:	f000 f80e 	bl	800eda4 <CheckCRC>
 800ed88:	0003      	movs	r3, r0
}
 800ed8a:	0018      	movs	r0, r3
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	b002      	add	sp, #8
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	46c0      	nop			@ (mov r8, r8)
 800ed94:	200000a4 	.word	0x200000a4
 800ed98:	20000ecc 	.word	0x20000ecc
 800ed9c:	0802a7ec 	.word	0x0802a7ec
 800eda0:	0802a76c 	.word	0x0802a76c

0800eda4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda6:	b08f      	sub	sp, #60	@ 0x3c
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6278      	str	r0, [r7, #36]	@ 0x24
 800edac:	0008      	movs	r0, r1
 800edae:	0011      	movs	r1, r2
 800edb0:	2323      	movs	r3, #35	@ 0x23
 800edb2:	18fb      	adds	r3, r7, r3
 800edb4:	1c02      	adds	r2, r0, #0
 800edb6:	701a      	strb	r2, [r3, #0]
 800edb8:	2322      	movs	r3, #34	@ 0x22
 800edba:	18fb      	adds	r3, r7, r3
 800edbc:	1c0a      	adds	r2, r1, #0
 800edbe:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800edc0:	2317      	movs	r3, #23
 800edc2:	2220      	movs	r2, #32
 800edc4:	189b      	adds	r3, r3, r2
 800edc6:	19db      	adds	r3, r3, r7
 800edc8:	2200      	movs	r2, #0
 800edca:	701a      	strb	r2, [r3, #0]
 800edcc:	e09f      	b.n	800ef0e <CheckCRC+0x16a>
 800edce:	466b      	mov	r3, sp
 800edd0:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800edd2:	2322      	movs	r3, #34	@ 0x22
 800edd4:	18fb      	adds	r3, r7, r3
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	001a      	movs	r2, r3
 800edda:	3a01      	subs	r2, #1
 800eddc:	633a      	str	r2, [r7, #48]	@ 0x30
 800edde:	60bb      	str	r3, [r7, #8]
 800ede0:	2200      	movs	r2, #0
 800ede2:	60fa      	str	r2, [r7, #12]
 800ede4:	68b8      	ldr	r0, [r7, #8]
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	0002      	movs	r2, r0
 800edea:	0f52      	lsrs	r2, r2, #29
 800edec:	000c      	movs	r4, r1
 800edee:	00e4      	lsls	r4, r4, #3
 800edf0:	61fc      	str	r4, [r7, #28]
 800edf2:	69fc      	ldr	r4, [r7, #28]
 800edf4:	4314      	orrs	r4, r2
 800edf6:	61fc      	str	r4, [r7, #28]
 800edf8:	0002      	movs	r2, r0
 800edfa:	00d2      	lsls	r2, r2, #3
 800edfc:	61ba      	str	r2, [r7, #24]
 800edfe:	603b      	str	r3, [r7, #0]
 800ee00:	2200      	movs	r2, #0
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	6838      	ldr	r0, [r7, #0]
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	0002      	movs	r2, r0
 800ee0a:	0f52      	lsrs	r2, r2, #29
 800ee0c:	000c      	movs	r4, r1
 800ee0e:	00e4      	lsls	r4, r4, #3
 800ee10:	617c      	str	r4, [r7, #20]
 800ee12:	697c      	ldr	r4, [r7, #20]
 800ee14:	4314      	orrs	r4, r2
 800ee16:	617c      	str	r4, [r7, #20]
 800ee18:	0002      	movs	r2, r0
 800ee1a:	00d2      	lsls	r2, r2, #3
 800ee1c:	613a      	str	r2, [r7, #16]
 800ee1e:	3307      	adds	r3, #7
 800ee20:	08db      	lsrs	r3, r3, #3
 800ee22:	00db      	lsls	r3, r3, #3
 800ee24:	466a      	mov	r2, sp
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	469d      	mov	sp, r3
 800ee2a:	466b      	mov	r3, sp
 800ee2c:	3300      	adds	r3, #0
 800ee2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800ee30:	2316      	movs	r3, #22
 800ee32:	2220      	movs	r2, #32
 800ee34:	189b      	adds	r3, r3, r2
 800ee36:	19db      	adds	r3, r3, r7
 800ee38:	2200      	movs	r2, #0
 800ee3a:	701a      	strb	r2, [r3, #0]
 800ee3c:	e01e      	b.n	800ee7c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800ee3e:	2317      	movs	r3, #23
 800ee40:	2220      	movs	r2, #32
 800ee42:	189b      	adds	r3, r3, r2
 800ee44:	19db      	adds	r3, r3, r7
 800ee46:	781a      	ldrb	r2, [r3, #0]
 800ee48:	2116      	movs	r1, #22
 800ee4a:	2320      	movs	r3, #32
 800ee4c:	18cb      	adds	r3, r1, r3
 800ee4e:	19db      	adds	r3, r3, r7
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	18d3      	adds	r3, r2, r3
 800ee54:	001a      	movs	r2, r3
 800ee56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee58:	189a      	adds	r2, r3, r2
 800ee5a:	0008      	movs	r0, r1
 800ee5c:	2320      	movs	r3, #32
 800ee5e:	18cb      	adds	r3, r1, r3
 800ee60:	19db      	adds	r3, r3, r7
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	7811      	ldrb	r1, [r2, #0]
 800ee66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee68:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800ee6a:	2320      	movs	r3, #32
 800ee6c:	18c3      	adds	r3, r0, r3
 800ee6e:	19db      	adds	r3, r3, r7
 800ee70:	781a      	ldrb	r2, [r3, #0]
 800ee72:	2320      	movs	r3, #32
 800ee74:	18c3      	adds	r3, r0, r3
 800ee76:	19db      	adds	r3, r3, r7
 800ee78:	3201      	adds	r2, #1
 800ee7a:	701a      	strb	r2, [r3, #0]
 800ee7c:	2316      	movs	r3, #22
 800ee7e:	2220      	movs	r2, #32
 800ee80:	189b      	adds	r3, r3, r2
 800ee82:	19da      	adds	r2, r3, r7
 800ee84:	2322      	movs	r3, #34	@ 0x22
 800ee86:	18fb      	adds	r3, r7, r3
 800ee88:	7812      	ldrb	r2, [r2, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d3d6      	bcc.n	800ee3e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800ee90:	2417      	movs	r4, #23
 800ee92:	2320      	movs	r3, #32
 800ee94:	18e3      	adds	r3, r4, r3
 800ee96:	19db      	adds	r3, r3, r7
 800ee98:	781a      	ldrb	r2, [r3, #0]
 800ee9a:	2322      	movs	r3, #34	@ 0x22
 800ee9c:	18fb      	adds	r3, r7, r3
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	18d3      	adds	r3, r2, r3
 800eea2:	3b01      	subs	r3, #1
 800eea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eea6:	18d2      	adds	r2, r2, r3
 800eea8:	250b      	movs	r5, #11
 800eeaa:	2320      	movs	r3, #32
 800eeac:	18eb      	adds	r3, r5, r3
 800eeae:	19db      	adds	r3, r3, r7
 800eeb0:	7812      	ldrb	r2, [r2, #0]
 800eeb2:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800eeb4:	2322      	movs	r3, #34	@ 0x22
 800eeb6:	18fb      	adds	r3, r7, r3
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	3b01      	subs	r3, #1
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	0011      	movs	r1, r2
 800eec2:	0018      	movs	r0, r3
 800eec4:	f000 f838 	bl	800ef38 <CalculateCRC>
 800eec8:	0003      	movs	r3, r0
 800eeca:	001a      	movs	r2, r3
 800eecc:	2320      	movs	r3, #32
 800eece:	18eb      	adds	r3, r5, r3
 800eed0:	19db      	adds	r3, r3, r7
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d00c      	beq.n	800eef2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800eed8:	2320      	movs	r3, #32
 800eeda:	18e3      	adds	r3, r4, r3
 800eedc:	19db      	adds	r3, r3, r7
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	3301      	adds	r3, #1
 800eee2:	4a13      	ldr	r2, [pc, #76]	@ (800ef30 <CheckCRC+0x18c>)
 800eee4:	4913      	ldr	r1, [pc, #76]	@ (800ef34 <CheckCRC+0x190>)
 800eee6:	2001      	movs	r0, #1
 800eee8:	f002 fc74 	bl	80117d4 <CreateLine>
      return false;
 800eeec:	2300      	movs	r3, #0
 800eeee:	46b5      	mov	sp, r6
 800eef0:	e019      	b.n	800ef26 <CheckCRC+0x182>
 800eef2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800eef4:	2217      	movs	r2, #23
 800eef6:	2320      	movs	r3, #32
 800eef8:	18d3      	adds	r3, r2, r3
 800eefa:	19db      	adds	r3, r3, r7
 800eefc:	2120      	movs	r1, #32
 800eefe:	1852      	adds	r2, r2, r1
 800ef00:	19d1      	adds	r1, r2, r7
 800ef02:	2222      	movs	r2, #34	@ 0x22
 800ef04:	18ba      	adds	r2, r7, r2
 800ef06:	7809      	ldrb	r1, [r1, #0]
 800ef08:	7812      	ldrb	r2, [r2, #0]
 800ef0a:	188a      	adds	r2, r1, r2
 800ef0c:	701a      	strb	r2, [r3, #0]
 800ef0e:	2317      	movs	r3, #23
 800ef10:	2220      	movs	r2, #32
 800ef12:	189b      	adds	r3, r3, r2
 800ef14:	19da      	adds	r2, r3, r7
 800ef16:	2323      	movs	r3, #35	@ 0x23
 800ef18:	18fb      	adds	r3, r7, r3
 800ef1a:	7812      	ldrb	r2, [r2, #0]
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d200      	bcs.n	800ef24 <CheckCRC+0x180>
 800ef22:	e754      	b.n	800edce <CheckCRC+0x2a>
    }
  }
  return true;
 800ef24:	2301      	movs	r3, #1
}
 800ef26:	0018      	movs	r0, r3
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	b00f      	add	sp, #60	@ 0x3c
 800ef2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef2e:	46c0      	nop			@ (mov r8, r8)
 800ef30:	0802a80c 	.word	0x0802a80c
 800ef34:	0802a748 	.word	0x0802a748

0800ef38 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	000a      	movs	r2, r1
 800ef42:	1cfb      	adds	r3, r7, #3
 800ef44:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800ef46:	230f      	movs	r3, #15
 800ef48:	18fb      	adds	r3, r7, r3
 800ef4a:	22ff      	movs	r2, #255	@ 0xff
 800ef4c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ef4e:	230e      	movs	r3, #14
 800ef50:	18fb      	adds	r3, r7, r3
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
 800ef56:	e037      	b.n	800efc8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ef58:	230e      	movs	r3, #14
 800ef5a:	18fb      	adds	r3, r7, r3
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	18d3      	adds	r3, r2, r3
 800ef62:	7819      	ldrb	r1, [r3, #0]
 800ef64:	220f      	movs	r2, #15
 800ef66:	18bb      	adds	r3, r7, r2
 800ef68:	18ba      	adds	r2, r7, r2
 800ef6a:	7812      	ldrb	r2, [r2, #0]
 800ef6c:	404a      	eors	r2, r1
 800ef6e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ef70:	230d      	movs	r3, #13
 800ef72:	18fb      	adds	r3, r7, r3
 800ef74:	2200      	movs	r2, #0
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	e01b      	b.n	800efb2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800ef7a:	210f      	movs	r1, #15
 800ef7c:	187b      	adds	r3, r7, r1
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	da09      	bge.n	800ef9a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800ef86:	187b      	adds	r3, r7, r1
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	005b      	lsls	r3, r3, #1
 800ef8c:	b25b      	sxtb	r3, r3
 800ef8e:	2231      	movs	r2, #49	@ 0x31
 800ef90:	4053      	eors	r3, r2
 800ef92:	b25a      	sxtb	r2, r3
 800ef94:	187b      	adds	r3, r7, r1
 800ef96:	701a      	strb	r2, [r3, #0]
 800ef98:	e005      	b.n	800efa6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800ef9a:	230f      	movs	r3, #15
 800ef9c:	18fa      	adds	r2, r7, r3
 800ef9e:	18fb      	adds	r3, r7, r3
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	18db      	adds	r3, r3, r3
 800efa4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800efa6:	210d      	movs	r1, #13
 800efa8:	187b      	adds	r3, r7, r1
 800efaa:	781a      	ldrb	r2, [r3, #0]
 800efac:	187b      	adds	r3, r7, r1
 800efae:	3201      	adds	r2, #1
 800efb0:	701a      	strb	r2, [r3, #0]
 800efb2:	230d      	movs	r3, #13
 800efb4:	18fb      	adds	r3, r7, r3
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b07      	cmp	r3, #7
 800efba:	d9de      	bls.n	800ef7a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800efbc:	210e      	movs	r1, #14
 800efbe:	187b      	adds	r3, r7, r1
 800efc0:	781a      	ldrb	r2, [r3, #0]
 800efc2:	187b      	adds	r3, r7, r1
 800efc4:	3201      	adds	r2, #1
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	230e      	movs	r3, #14
 800efca:	18fa      	adds	r2, r7, r3
 800efcc:	1cfb      	adds	r3, r7, #3
 800efce:	7812      	ldrb	r2, [r2, #0]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d3c0      	bcc.n	800ef58 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800efd6:	230f      	movs	r3, #15
 800efd8:	18fb      	adds	r3, r7, r3
 800efda:	781b      	ldrb	r3, [r3, #0]
}
 800efdc:	0018      	movs	r0, r3
 800efde:	46bd      	mov	sp, r7
 800efe0:	b004      	add	sp, #16
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4936      	ldr	r1, [pc, #216]	@ (800f0cc <SGP_SetHT+0xe8>)
 800eff4:	1c18      	adds	r0, r3, #0
 800eff6:	f7f1 fc63 	bl	80008c0 <__aeabi_fadd>
 800effa:	1c03      	adds	r3, r0, #0
 800effc:	4934      	ldr	r1, [pc, #208]	@ (800f0d0 <SGP_SetHT+0xec>)
 800effe:	1c18      	adds	r0, r3, #0
 800f000:	f7f1 fde8 	bl	8000bd4 <__aeabi_fdiv>
 800f004:	1c03      	adds	r3, r0, #0
 800f006:	4933      	ldr	r1, [pc, #204]	@ (800f0d4 <SGP_SetHT+0xf0>)
 800f008:	1c18      	adds	r0, r3, #0
 800f00a:	f7f1 ffc9 	bl	8000fa0 <__aeabi_fmul>
 800f00e:	1c03      	adds	r3, r0, #0
 800f010:	1c18      	adds	r0, r3, #0
 800f012:	f7f1 fb03 	bl	800061c <__aeabi_f2uiz>
 800f016:	0003      	movs	r3, r0
 800f018:	b29a      	uxth	r2, r3
 800f01a:	4b2f      	ldr	r3, [pc, #188]	@ (800f0d8 <SGP_SetHT+0xf4>)
 800f01c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	492e      	ldr	r1, [pc, #184]	@ (800f0dc <SGP_SetHT+0xf8>)
 800f024:	1c18      	adds	r0, r3, #0
 800f026:	f7f1 fdd5 	bl	8000bd4 <__aeabi_fdiv>
 800f02a:	1c03      	adds	r3, r0, #0
 800f02c:	4929      	ldr	r1, [pc, #164]	@ (800f0d4 <SGP_SetHT+0xf0>)
 800f02e:	1c18      	adds	r0, r3, #0
 800f030:	f7f1 ffb6 	bl	8000fa0 <__aeabi_fmul>
 800f034:	1c03      	adds	r3, r0, #0
 800f036:	1c18      	adds	r0, r3, #0
 800f038:	f7f1 faf0 	bl	800061c <__aeabi_f2uiz>
 800f03c:	0003      	movs	r3, r0
 800f03e:	b29a      	uxth	r2, r3
 800f040:	4b27      	ldr	r3, [pc, #156]	@ (800f0e0 <SGP_SetHT+0xfc>)
 800f042:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800f044:	4b26      	ldr	r3, [pc, #152]	@ (800f0e0 <SGP_SetHT+0xfc>)
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	0a1b      	lsrs	r3, r3, #8
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	4b25      	ldr	r3, [pc, #148]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f050:	709a      	strb	r2, [r3, #2]
 800f052:	4b24      	ldr	r3, [pc, #144]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f054:	789a      	ldrb	r2, [r3, #2]
 800f056:	210c      	movs	r1, #12
 800f058:	187b      	adds	r3, r7, r1
 800f05a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800f05c:	4b20      	ldr	r3, [pc, #128]	@ (800f0e0 <SGP_SetHT+0xfc>)
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	b2da      	uxtb	r2, r3
 800f062:	4b20      	ldr	r3, [pc, #128]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f064:	70da      	strb	r2, [r3, #3]
 800f066:	4b1f      	ldr	r3, [pc, #124]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f068:	78da      	ldrb	r2, [r3, #3]
 800f06a:	187b      	adds	r3, r7, r1
 800f06c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800f06e:	187b      	adds	r3, r7, r1
 800f070:	2102      	movs	r1, #2
 800f072:	0018      	movs	r0, r3
 800f074:	f7ff ff60 	bl	800ef38 <CalculateCRC>
 800f078:	0003      	movs	r3, r0
 800f07a:	001a      	movs	r2, r3
 800f07c:	4b19      	ldr	r3, [pc, #100]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f07e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800f080:	4b15      	ldr	r3, [pc, #84]	@ (800f0d8 <SGP_SetHT+0xf4>)
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	0a1b      	lsrs	r3, r3, #8
 800f086:	b29b      	uxth	r3, r3
 800f088:	b2da      	uxtb	r2, r3
 800f08a:	4b16      	ldr	r3, [pc, #88]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f08c:	715a      	strb	r2, [r3, #5]
 800f08e:	4b15      	ldr	r3, [pc, #84]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f090:	795a      	ldrb	r2, [r3, #5]
 800f092:	2108      	movs	r1, #8
 800f094:	187b      	adds	r3, r7, r1
 800f096:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800f098:	4b0f      	ldr	r3, [pc, #60]	@ (800f0d8 <SGP_SetHT+0xf4>)
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	4b11      	ldr	r3, [pc, #68]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f0a0:	719a      	strb	r2, [r3, #6]
 800f0a2:	4b10      	ldr	r3, [pc, #64]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f0a4:	799a      	ldrb	r2, [r3, #6]
 800f0a6:	187b      	adds	r3, r7, r1
 800f0a8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800f0aa:	187b      	adds	r3, r7, r1
 800f0ac:	2102      	movs	r1, #2
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f7ff ff42 	bl	800ef38 <CalculateCRC>
 800f0b4:	0003      	movs	r3, r0
 800f0b6:	001a      	movs	r2, r3
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e4 <SGP_SetHT+0x100>)
 800f0ba:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800f0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e8 <SGP_SetHT+0x104>)
 800f0be:	2201      	movs	r2, #1
 800f0c0:	701a      	strb	r2, [r3, #0]
}
 800f0c2:	46c0      	nop			@ (mov r8, r8)
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	b004      	add	sp, #16
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	46c0      	nop			@ (mov r8, r8)
 800f0cc:	42340000 	.word	0x42340000
 800f0d0:	432f0000 	.word	0x432f0000
 800f0d4:	477fff00 	.word	0x477fff00
 800f0d8:	20000f86 	.word	0x20000f86
 800f0dc:	42c80000 	.word	0x42c80000
 800f0e0:	20000f84 	.word	0x20000f84
 800f0e4:	200000b0 	.word	0x200000b0
 800f0e8:	20000f88 	.word	0x20000f88

0800f0ec <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800f0f0:	4a09      	ldr	r2, [pc, #36]	@ (800f118 <SGP_SoftReset+0x2c>)
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f11c <SGP_SoftReset+0x30>)
 800f0f4:	0019      	movs	r1, r3
 800f0f6:	2003      	movs	r0, #3
 800f0f8:	f002 fb6c 	bl	80117d4 <CreateLine>
  SGP_TurnHeaterOff();
 800f0fc:	f7ff fcd0 	bl	800eaa0 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800f100:	200a      	movs	r0, #10
 800f102:	f002 ffbd 	bl	8012080 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800f106:	4b06      	ldr	r3, [pc, #24]	@ (800f120 <SGP_SoftReset+0x34>)
 800f108:	2202      	movs	r2, #2
 800f10a:	0019      	movs	r1, r3
 800f10c:	2059      	movs	r0, #89	@ 0x59
 800f10e:	f7ff fbf9 	bl	800e904 <WriteRegister>
}
 800f112:	46c0      	nop			@ (mov r8, r8)
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	0802a8b4 	.word	0x0802a8b4
 800f11c:	0802a790 	.word	0x0802a790
 800f120:	200000b8 	.word	0x200000b8

0800f124 <ResetVOCresult>:

void ResetVOCresult(void) {
 800f124:	b580      	push	{r7, lr}
 800f126:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800f128:	4b02      	ldr	r3, [pc, #8]	@ (800f134 <ResetVOCresult+0x10>)
 800f12a:	2200      	movs	r2, #0
 800f12c:	601a      	str	r2, [r3, #0]
}
 800f12e:	46c0      	nop			@ (mov r8, r8)
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20000f8c 	.word	0x20000f8c

0800f138 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800f138:	b580      	push	{r7, lr}
 800f13a:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800f13c:	4b42      	ldr	r3, [pc, #264]	@ (800f248 <SGP_Upkeep+0x110>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b07      	cmp	r3, #7
 800f142:	d869      	bhi.n	800f218 <SGP_Upkeep+0xe0>
 800f144:	009a      	lsls	r2, r3, #2
 800f146:	4b41      	ldr	r3, [pc, #260]	@ (800f24c <SGP_Upkeep+0x114>)
 800f148:	18d3      	adds	r3, r2, r3
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800f14e:	4a40      	ldr	r2, [pc, #256]	@ (800f250 <SGP_Upkeep+0x118>)
 800f150:	4b40      	ldr	r3, [pc, #256]	@ (800f254 <SGP_Upkeep+0x11c>)
 800f152:	0019      	movs	r1, r3
 800f154:	2003      	movs	r0, #3
 800f156:	f002 fb3d 	bl	80117d4 <CreateLine>
    break;
 800f15a:	e070      	b.n	800f23e <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800f15c:	f7ff ffe2 	bl	800f124 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800f160:	4b39      	ldr	r3, [pc, #228]	@ (800f248 <SGP_Upkeep+0x110>)
 800f162:	2201      	movs	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]
    break;
 800f166:	e06a      	b.n	800f23e <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800f168:	f7fc fca2 	bl	800bab0 <getSensorLock>
 800f16c:	1e03      	subs	r3, r0, #0
 800f16e:	d15f      	bne.n	800f230 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800f170:	2002      	movs	r0, #2
 800f172:	f7fc fc8d 	bl	800ba90 <setSensorLock>
    SetMeasurementIndicator();
 800f176:	f001 f977 	bl	8010468 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800f17a:	f7ff fc2f 	bl	800e9dc <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800f17e:	4b32      	ldr	r3, [pc, #200]	@ (800f248 <SGP_Upkeep+0x110>)
 800f180:	2202      	movs	r2, #2
 800f182:	701a      	strb	r2, [r3, #0]
    break;
 800f184:	e05b      	b.n	800f23e <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800f186:	4b34      	ldr	r3, [pc, #208]	@ (800f258 <SGP_Upkeep+0x120>)
 800f188:	0018      	movs	r0, r3
 800f18a:	f7ff fc97 	bl	800eabc <SGP_GetMeasurementValues>
 800f18e:	1e03      	subs	r3, r0, #0
 800f190:	d050      	beq.n	800f234 <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800f192:	4b2d      	ldr	r3, [pc, #180]	@ (800f248 <SGP_Upkeep+0x110>)
 800f194:	2203      	movs	r2, #3
 800f196:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800f198:	2000      	movs	r0, #0
 800f19a:	f7fc fc79 	bl	800ba90 <setSensorLock>
    }
    break;
 800f19e:	e049      	b.n	800f234 <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800f1a0:	4b2d      	ldr	r3, [pc, #180]	@ (800f258 <SGP_Upkeep+0x120>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f7f5 f9d4 	bl	8004554 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800f1ac:	4b26      	ldr	r3, [pc, #152]	@ (800f248 <SGP_Upkeep+0x110>)
 800f1ae:	2206      	movs	r2, #6
 800f1b0:	701a      	strb	r2, [r3, #0]
    break;
 800f1b2:	e044      	b.n	800f23e <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800f1b4:	4b24      	ldr	r3, [pc, #144]	@ (800f248 <SGP_Upkeep+0x110>)
 800f1b6:	2207      	movs	r2, #7
 800f1b8:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800f1ba:	4b28      	ldr	r3, [pc, #160]	@ (800f25c <SGP_Upkeep+0x124>)
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d112      	bne.n	800f1e8 <SGP_Upkeep+0xb0>
 800f1c2:	4b27      	ldr	r3, [pc, #156]	@ (800f260 <SGP_Upkeep+0x128>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	4053      	eors	r3, r2
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00b      	beq.n	800f1e8 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800f1d0:	4b24      	ldr	r3, [pc, #144]	@ (800f264 <SGP_Upkeep+0x12c>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d004      	beq.n	800f1e2 <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800f1d8:	f7ff ff88 	bl	800f0ec <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800f1dc:	2000      	movs	r0, #0
 800f1de:	f7fc f8e9 	bl	800b3b4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800f1e2:	4b20      	ldr	r3, [pc, #128]	@ (800f264 <SGP_Upkeep+0x12c>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800f1e8:	f002 ff40 	bl	801206c <HAL_GetTick>
 800f1ec:	0003      	movs	r3, r0
 800f1ee:	22c8      	movs	r2, #200	@ 0xc8
 800f1f0:	0092      	lsls	r2, r2, #2
 800f1f2:	189a      	adds	r2, r3, r2
 800f1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800f268 <SGP_Upkeep+0x130>)
 800f1f6:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800f1f8:	f001 f94e 	bl	8010498 <ResetMeasurementIndicator>
  break;
 800f1fc:	e01f      	b.n	800f23e <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800f1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f268 <SGP_Upkeep+0x130>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	0018      	movs	r0, r3
 800f204:	f002 fa90 	bl	8011728 <TimestampIsReached>
 800f208:	1e03      	subs	r3, r0, #0
 800f20a:	d015      	beq.n	800f238 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800f20c:	f7ff fbce 	bl	800e9ac <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800f210:	4b0d      	ldr	r3, [pc, #52]	@ (800f248 <SGP_Upkeep+0x110>)
 800f212:	2200      	movs	r2, #0
 800f214:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f216:	e00f      	b.n	800f238 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800f218:	4b0b      	ldr	r3, [pc, #44]	@ (800f248 <SGP_Upkeep+0x110>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800f21e:	f7fc fc47 	bl	800bab0 <getSensorLock>
 800f222:	0003      	movs	r3, r0
 800f224:	2b02      	cmp	r3, #2
 800f226:	d109      	bne.n	800f23c <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800f228:	2000      	movs	r0, #0
 800f22a:	f7fc fc31 	bl	800ba90 <setSensorLock>
    }
    break;
 800f22e:	e005      	b.n	800f23c <SGP_Upkeep+0x104>
      break;
 800f230:	46c0      	nop			@ (mov r8, r8)
 800f232:	e004      	b.n	800f23e <SGP_Upkeep+0x106>
    break;
 800f234:	46c0      	nop			@ (mov r8, r8)
 800f236:	e002      	b.n	800f23e <SGP_Upkeep+0x106>
    break;
 800f238:	46c0      	nop			@ (mov r8, r8)
 800f23a:	e000      	b.n	800f23e <SGP_Upkeep+0x106>
    break;
 800f23c:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800f23e:	4b02      	ldr	r3, [pc, #8]	@ (800f248 <SGP_Upkeep+0x110>)
 800f240:	781b      	ldrb	r3, [r3, #0]
}
 800f242:	0018      	movs	r0, r3
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20000f90 	.word	0x20000f90
 800f24c:	0802b090 	.word	0x0802b090
 800f250:	0802a8cc 	.word	0x0802a8cc
 800f254:	0802a790 	.word	0x0802a790
 800f258:	20000f8c 	.word	0x20000f8c
 800f25c:	20000ed6 	.word	0x20000ed6
 800f260:	20001e2d 	.word	0x20001e2d
 800f264:	20000ec0 	.word	0x20000ec0
 800f268:	20000ed8 	.word	0x20000ed8

0800f26c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	0002      	movs	r2, r0
 800f274:	1dfb      	adds	r3, r7, #7
 800f276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f278:	1dfb      	adds	r3, r7, #7
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f27e:	d809      	bhi.n	800f294 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f280:	1dfb      	adds	r3, r7, #7
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	001a      	movs	r2, r3
 800f286:	231f      	movs	r3, #31
 800f288:	401a      	ands	r2, r3
 800f28a:	4b04      	ldr	r3, [pc, #16]	@ (800f29c <__NVIC_EnableIRQ+0x30>)
 800f28c:	2101      	movs	r1, #1
 800f28e:	4091      	lsls	r1, r2
 800f290:	000a      	movs	r2, r1
 800f292:	601a      	str	r2, [r3, #0]
  }
}
 800f294:	46c0      	nop			@ (mov r8, r8)
 800f296:	46bd      	mov	sp, r7
 800f298:	b002      	add	sp, #8
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	e000e100 	.word	0xe000e100

0800f2a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	0002      	movs	r2, r0
 800f2a8:	1dfb      	adds	r3, r7, #7
 800f2aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f2ac:	1dfb      	adds	r3, r7, #7
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2b2:	d810      	bhi.n	800f2d6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f2b4:	1dfb      	adds	r3, r7, #7
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	001a      	movs	r2, r3
 800f2ba:	231f      	movs	r3, #31
 800f2bc:	4013      	ands	r3, r2
 800f2be:	4908      	ldr	r1, [pc, #32]	@ (800f2e0 <__NVIC_DisableIRQ+0x40>)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	409a      	lsls	r2, r3
 800f2c4:	0013      	movs	r3, r2
 800f2c6:	2280      	movs	r2, #128	@ 0x80
 800f2c8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f2ca:	f3bf 8f4f 	dsb	sy
}
 800f2ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f2d0:	f3bf 8f6f 	isb	sy
}
 800f2d4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800f2d6:	46c0      	nop			@ (mov r8, r8)
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	b002      	add	sp, #8
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	46c0      	nop			@ (mov r8, r8)
 800f2e0:	e000e100 	.word	0xe000e100

0800f2e4 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800f2e4:	b5b0      	push	{r4, r5, r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af02      	add	r7, sp, #8
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	0008      	movs	r0, r1
 800f2ee:	0011      	movs	r1, r2
 800f2f0:	1cfb      	adds	r3, r7, #3
 800f2f2:	1c02      	adds	r2, r0, #0
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	1cbb      	adds	r3, r7, #2
 800f2f8:	1c0a      	adds	r2, r1, #0
 800f2fa:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800f2fc:	4b5b      	ldr	r3, [pc, #364]	@ (800f46c <getSoundData+0x188>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2201      	movs	r2, #1
 800f304:	4053      	eors	r3, r2
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d107      	bne.n	800f31c <getSoundData+0x38>
 800f30c:	4b58      	ldr	r3, [pc, #352]	@ (800f470 <getSoundData+0x18c>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2201      	movs	r2, #1
 800f314:	4053      	eors	r3, r2
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <getSoundData+0x3c>
    {
        return false;
 800f31c:	2300      	movs	r3, #0
 800f31e:	e0a0      	b.n	800f462 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800f320:	4b54      	ldr	r3, [pc, #336]	@ (800f474 <getSoundData+0x190>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d005      	beq.n	800f336 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f32a:	4b53      	ldr	r3, [pc, #332]	@ (800f478 <getSoundData+0x194>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	b25b      	sxtb	r3, r3
 800f330:	0018      	movs	r0, r3
 800f332:	f7ff ffb5 	bl	800f2a0 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800f336:	f3bf 8f4f 	dsb	sy
}
 800f33a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f33c:	f3bf 8f6f 	isb	sy
}
 800f340:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800f342:	1cfb      	adds	r3, r7, #3
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d04c      	beq.n	800f3e4 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800f34a:	4b4c      	ldr	r3, [pc, #304]	@ (800f47c <getSoundData+0x198>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d11b      	bne.n	800f38a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2200      	movs	r2, #0
 800f356:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]
 800f362:	e00e      	b.n	800f382 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	18d3      	adds	r3, r2, r3
 800f36a:	3302      	adds	r3, #2
 800f36c:	2200      	movs	r2, #0
 800f36e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	18d3      	adds	r3, r2, r3
 800f376:	3308      	adds	r3, #8
 800f378:	2200      	movs	r2, #0
 800f37a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	3301      	adds	r3, #1
 800f380:	617b      	str	r3, [r7, #20]
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2b05      	cmp	r3, #5
 800f386:	d9ed      	bls.n	800f364 <getSoundData+0x80>
 800f388:	e02c      	b.n	800f3e4 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	1c59      	adds	r1, r3, #1
 800f390:	4b3b      	ldr	r3, [pc, #236]	@ (800f480 <getSoundData+0x19c>)
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	4b3b      	ldr	r3, [pc, #236]	@ (800f484 <getSoundData+0x1a0>)
 800f396:	681c      	ldr	r4, [r3, #0]
 800f398:	4b38      	ldr	r3, [pc, #224]	@ (800f47c <getSoundData+0x198>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	0023      	movs	r3, r4
 800f3a0:	f000 fde8 	bl	800ff74 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	613b      	str	r3, [r7, #16]
 800f3a8:	e019      	b.n	800f3de <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	18d3      	adds	r3, r2, r3
 800f3b0:	1c98      	adds	r0, r3, #2
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800f3ba:	4b33      	ldr	r3, [pc, #204]	@ (800f488 <getSoundData+0x1a4>)
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	0092      	lsls	r2, r2, #2
 800f3c0:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800f3c2:	4b32      	ldr	r3, [pc, #200]	@ (800f48c <getSoundData+0x1a8>)
 800f3c4:	693a      	ldr	r2, [r7, #16]
 800f3c6:	0092      	lsls	r2, r2, #2
 800f3c8:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f3ca:	4b2c      	ldr	r3, [pc, #176]	@ (800f47c <getSoundData+0x198>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	0013      	movs	r3, r2
 800f3d2:	0022      	movs	r2, r4
 800f3d4:	f000 fdce 	bl	800ff74 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	613b      	str	r3, [r7, #16]
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	2b05      	cmp	r3, #5
 800f3e2:	d9e2      	bls.n	800f3aa <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800f3e4:	1cbb      	adds	r3, r7, #2
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d028      	beq.n	800f43e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800f3ec:	240e      	movs	r4, #14
 800f3ee:	193b      	adds	r3, r7, r4
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800f3f4:	250d      	movs	r5, #13
 800f3f6:	197b      	adds	r3, r7, r5
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800f3fc:	4b24      	ldr	r3, [pc, #144]	@ (800f490 <getSoundData+0x1ac>)
 800f3fe:	6818      	ldr	r0, [r3, #0]
 800f400:	4924      	ldr	r1, [pc, #144]	@ (800f494 <getSoundData+0x1b0>)
 800f402:	197b      	adds	r3, r7, r5
 800f404:	193a      	adds	r2, r7, r4
 800f406:	f000 fe59 	bl	80100bc <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800f40a:	193b      	adds	r3, r7, r4
 800f40c:	881a      	ldrh	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	21ff      	movs	r1, #255	@ 0xff
 800f412:	4011      	ands	r1, r2
 800f414:	000c      	movs	r4, r1
 800f416:	7b99      	ldrb	r1, [r3, #14]
 800f418:	2000      	movs	r0, #0
 800f41a:	4001      	ands	r1, r0
 800f41c:	1c08      	adds	r0, r1, #0
 800f41e:	1c21      	adds	r1, r4, #0
 800f420:	4301      	orrs	r1, r0
 800f422:	7399      	strb	r1, [r3, #14]
 800f424:	0a12      	lsrs	r2, r2, #8
 800f426:	b290      	uxth	r0, r2
 800f428:	7bda      	ldrb	r2, [r3, #15]
 800f42a:	2100      	movs	r1, #0
 800f42c:	400a      	ands	r2, r1
 800f42e:	1c11      	adds	r1, r2, #0
 800f430:	1c02      	adds	r2, r0, #0
 800f432:	430a      	orrs	r2, r1
 800f434:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800f436:	197b      	adds	r3, r7, r5
 800f438:	781a      	ldrb	r2, [r3, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800f43e:	f000 f86f 	bl	800f520 <micSettlingComplete>
 800f442:	0003      	movs	r3, r0
 800f444:	001a      	movs	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800f44a:	4b0a      	ldr	r3, [pc, #40]	@ (800f474 <getSoundData+0x190>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f454:	4b08      	ldr	r3, [pc, #32]	@ (800f478 <getSoundData+0x194>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	b25b      	sxtb	r3, r3
 800f45a:	0018      	movs	r0, r3
 800f45c:	f7ff ff06 	bl	800f26c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800f460:	2301      	movs	r3, #1
}
 800f462:	0018      	movs	r0, r3
 800f464:	46bd      	mov	sp, r7
 800f466:	b006      	add	sp, #24
 800f468:	bdb0      	pop	{r4, r5, r7, pc}
 800f46a:	46c0      	nop			@ (mov r8, r8)
 800f46c:	20000f92 	.word	0x20000f92
 800f470:	20000f95 	.word	0x20000f95
 800f474:	20000f94 	.word	0x20000f94
 800f478:	200019e4 	.word	0x200019e4
 800f47c:	20001a20 	.word	0x20001a20
 800f480:	200019e8 	.word	0x200019e8
 800f484:	200019ec 	.word	0x200019ec
 800f488:	200019f0 	.word	0x200019f0
 800f48c:	20001a08 	.word	0x20001a08
 800f490:	20000f9c 	.word	0x20000f9c
 800f494:	3b5c7333 	.word	0x3b5c7333

0800f498 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	001a      	movs	r2, r3
 800f4a6:	1cfb      	adds	r3, r7, #3
 800f4a8:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800f4aa:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <soundInit+0x38>)
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800f4b0:	4b08      	ldr	r3, [pc, #32]	@ (800f4d4 <soundInit+0x3c>)
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800f4b6:	4b08      	ldr	r3, [pc, #32]	@ (800f4d8 <soundInit+0x40>)
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800f4bc:	4b07      	ldr	r3, [pc, #28]	@ (800f4dc <soundInit+0x44>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	569a      	ldrsb	r2, [r3, r2]
 800f4c2:	4b06      	ldr	r3, [pc, #24]	@ (800f4dc <soundInit+0x44>)
 800f4c4:	701a      	strb	r2, [r3, #0]

    return true;
 800f4c6:	2301      	movs	r3, #1
}
 800f4c8:	0018      	movs	r0, r3
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	b004      	add	sp, #16
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	200019dc 	.word	0x200019dc
 800f4d4:	200019d8 	.word	0x200019d8
 800f4d8:	200019e0 	.word	0x200019e0
 800f4dc:	200019e4 	.word	0x200019e4

0800f4e0 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800f4e4:	4b02      	ldr	r3, [pc, #8]	@ (800f4f0 <clearMaximumAmplitude+0x10>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	601a      	str	r2, [r3, #0]
}
 800f4ea:	46c0      	nop			@ (mov r8, r8)
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	20000f9c 	.word	0x20000f9c

0800f4f4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800f4f8:	4b08      	ldr	r3, [pc, #32]	@ (800f51c <startMicSettlingPeriod+0x28>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800f502:	4b06      	ldr	r3, [pc, #24]	@ (800f51c <startMicSettlingPeriod+0x28>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	0018      	movs	r0, r3
 800f508:	f00a fe0c 	bl	801a124 <HAL_TIM_Base_Start>
 800f50c:	1e03      	subs	r3, r0, #0
 800f50e:	d001      	beq.n	800f514 <startMicSettlingPeriod+0x20>
    {
        return false;
 800f510:	2300      	movs	r3, #0
 800f512:	e000      	b.n	800f516 <startMicSettlingPeriod+0x22>
    }
    return true;
 800f514:	2301      	movs	r3, #1
}
 800f516:	0018      	movs	r0, r3
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	200019d8 	.word	0x200019d8

0800f520 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800f526:	4b0e      	ldr	r3, [pc, #56]	@ (800f560 <micSettlingComplete+0x40>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	2201      	movs	r2, #1
 800f530:	401a      	ands	r2, r3
 800f532:	1dfb      	adds	r3, r7, #7
 800f534:	3a01      	subs	r2, #1
 800f536:	4251      	negs	r1, r2
 800f538:	414a      	adcs	r2, r1
 800f53a:	701a      	strb	r2, [r3, #0]
    if (complete)
 800f53c:	1dfb      	adds	r3, r7, #7
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d007      	beq.n	800f554 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800f544:	4b06      	ldr	r3, [pc, #24]	@ (800f560 <micSettlingComplete+0x40>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	0018      	movs	r0, r3
 800f54a:	f00a fe35 	bl	801a1b8 <HAL_TIM_Base_Stop>
      DataReady = true;
 800f54e:	4b05      	ldr	r3, [pc, #20]	@ (800f564 <micSettlingComplete+0x44>)
 800f550:	2201      	movs	r2, #1
 800f552:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800f554:	1dfb      	adds	r3, r7, #7
 800f556:	781b      	ldrb	r3, [r3, #0]
}
 800f558:	0018      	movs	r0, r3
 800f55a:	46bd      	mov	sp, r7
 800f55c:	b002      	add	sp, #8
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	200019d8 	.word	0x200019d8
 800f564:	20000f91 	.word	0x20000f91

0800f568 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	0002      	movs	r2, r0
 800f570:	1dfb      	adds	r3, r7, #7
 800f572:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800f574:	4b29      	ldr	r3, [pc, #164]	@ (800f61c <enableMicrophone+0xb4>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	1dfa      	adds	r2, r7, #7
 800f57c:	7812      	ldrb	r2, [r2, #0]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d101      	bne.n	800f586 <enableMicrophone+0x1e>
    {
        return true;
 800f582:	2301      	movs	r3, #1
 800f584:	e045      	b.n	800f612 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800f586:	1dfb      	adds	r3, r7, #7
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d025      	beq.n	800f5da <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800f58e:	f7ff ffb1 	bl	800f4f4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800f592:	4b23      	ldr	r3, [pc, #140]	@ (800f620 <enableMicrophone+0xb8>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2280      	movs	r2, #128	@ 0x80
 800f598:	0092      	lsls	r2, r2, #2
 800f59a:	4922      	ldr	r1, [pc, #136]	@ (800f624 <enableMicrophone+0xbc>)
 800f59c:	0018      	movs	r0, r3
 800f59e:	f007 f82b 	bl	80165f8 <HAL_I2S_Receive_DMA>
 800f5a2:	1e03      	subs	r3, r0, #0
 800f5a4:	d001      	beq.n	800f5aa <enableMicrophone+0x42>
        {
            return false;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e033      	b.n	800f612 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800f5aa:	f7ff ff99 	bl	800f4e0 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800f5ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f628 <enableMicrophone+0xc0>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f62c <enableMicrophone+0xc4>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	b25b      	sxtb	r3, r3
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	f7ff fe56 	bl	800f26c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800f5c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f630 <enableMicrophone+0xc8>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800f5c6:	4b15      	ldr	r3, [pc, #84]	@ (800f61c <enableMicrophone+0xb4>)
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f5cc:	4b19      	ldr	r3, [pc, #100]	@ (800f634 <enableMicrophone+0xcc>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f5d2:	4b19      	ldr	r3, [pc, #100]	@ (800f638 <enableMicrophone+0xd0>)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	701a      	strb	r2, [r3, #0]
 800f5d8:	e01a      	b.n	800f610 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f5da:	4b14      	ldr	r3, [pc, #80]	@ (800f62c <enableMicrophone+0xc4>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	b25b      	sxtb	r3, r3
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	f7ff fe5d 	bl	800f2a0 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800f5e6:	4b12      	ldr	r3, [pc, #72]	@ (800f630 <enableMicrophone+0xc8>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f5ec:	4b11      	ldr	r3, [pc, #68]	@ (800f634 <enableMicrophone+0xcc>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f5f2:	4b11      	ldr	r3, [pc, #68]	@ (800f638 <enableMicrophone+0xd0>)
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800f5f8:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <enableMicrophone+0xb8>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	f007 f8bd 	bl	801677c <HAL_I2S_DMAStop>
 800f602:	1e03      	subs	r3, r0, #0
 800f604:	d001      	beq.n	800f60a <enableMicrophone+0xa2>
        {
            return false;
 800f606:	2300      	movs	r3, #0
 800f608:	e003      	b.n	800f612 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800f60a:	4b04      	ldr	r3, [pc, #16]	@ (800f61c <enableMicrophone+0xb4>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800f610:	2301      	movs	r3, #1
}
 800f612:	0018      	movs	r0, r3
 800f614:	46bd      	mov	sp, r7
 800f616:	b002      	add	sp, #8
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	46c0      	nop			@ (mov r8, r8)
 800f61c:	20000f92 	.word	0x20000f92
 800f620:	200019dc 	.word	0x200019dc
 800f624:	20000fd8 	.word	0x20000fd8
 800f628:	20000f98 	.word	0x20000f98
 800f62c:	200019e4 	.word	0x200019e4
 800f630:	20000f94 	.word	0x20000f94
 800f634:	20000f93 	.word	0x20000f93
 800f638:	20000f95 	.word	0x20000f95

0800f63c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800f640:	4b0c      	ldr	r3, [pc, #48]	@ (800f674 <startSPLcalculation+0x38>)
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2201      	movs	r2, #1
 800f648:	4053      	eors	r3, r2
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <startSPLcalculation+0x18>
    {
        return false;
 800f650:	2300      	movs	r3, #0
 800f652:	e00c      	b.n	800f66e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800f654:	4b08      	ldr	r3, [pc, #32]	@ (800f678 <startSPLcalculation+0x3c>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <startSPLcalculation+0x26>
    {
        return true;
 800f65e:	2301      	movs	r3, #1
 800f660:	e005      	b.n	800f66e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800f662:	f000 fb63 	bl	800fd2c <resetSPLstate>
    SPLcalcEnabled = true;
 800f666:	4b04      	ldr	r3, [pc, #16]	@ (800f678 <startSPLcalculation+0x3c>)
 800f668:	2201      	movs	r2, #1
 800f66a:	701a      	strb	r2, [r3, #0]
    return true;
 800f66c:	2301      	movs	r3, #1
}
 800f66e:	0018      	movs	r0, r3
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	20000f92 	.word	0x20000f92
 800f678:	20000f93 	.word	0x20000f93

0800f67c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f684:	4b05      	ldr	r3, [pc, #20]	@ (800f69c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d102      	bne.n	800f694 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800f68e:	2000      	movs	r0, #0
 800f690:	f000 f81a 	bl	800f6c8 <processHalfDMAbuffer>
  }
}
 800f694:	46c0      	nop			@ (mov r8, r8)
 800f696:	46bd      	mov	sp, r7
 800f698:	b002      	add	sp, #8
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	200019dc 	.word	0x200019dc

0800f6a0 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f6a8:	4b06      	ldr	r3, [pc, #24]	@ (800f6c4 <HAL_I2S_RxCpltCallback+0x24>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d104      	bne.n	800f6bc <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800f6b2:	2380      	movs	r3, #128	@ 0x80
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f000 f806 	bl	800f6c8 <processHalfDMAbuffer>
  }
}
 800f6bc:	46c0      	nop			@ (mov r8, r8)
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	b002      	add	sp, #8
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	200019dc 	.word	0x200019dc

0800f6c8 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	005a      	lsls	r2, r3, #1
 800f6d4:	4b15      	ldr	r3, [pc, #84]	@ (800f72c <processHalfDMAbuffer+0x64>)
 800f6d6:	18d3      	adds	r3, r2, r3
 800f6d8:	4a15      	ldr	r2, [pc, #84]	@ (800f730 <processHalfDMAbuffer+0x68>)
 800f6da:	2180      	movs	r1, #128	@ 0x80
 800f6dc:	0089      	lsls	r1, r1, #2
 800f6de:	0018      	movs	r0, r3
 800f6e0:	f000 fd35 	bl	801014e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800f6e4:	4b13      	ldr	r3, [pc, #76]	@ (800f734 <processHalfDMAbuffer+0x6c>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	425a      	negs	r2, r3
 800f6ea:	4153      	adcs	r3, r2
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	4b11      	ldr	r3, [pc, #68]	@ (800f734 <processHalfDMAbuffer+0x6c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2109      	movs	r1, #9
 800f6f4:	4299      	cmp	r1, r3
 800f6f6:	419b      	sbcs	r3, r3
 800f6f8:	425b      	negs	r3, r3
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	480c      	ldr	r0, [pc, #48]	@ (800f730 <processHalfDMAbuffer+0x68>)
 800f6fe:	2180      	movs	r1, #128	@ 0x80
 800f700:	f000 fb46 	bl	800fd90 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800f704:	4b0b      	ldr	r3, [pc, #44]	@ (800f734 <processHalfDMAbuffer+0x6c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b09      	cmp	r3, #9
 800f70a:	d804      	bhi.n	800f716 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800f70c:	4b09      	ldr	r3, [pc, #36]	@ (800f734 <processHalfDMAbuffer+0x6c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	4b08      	ldr	r3, [pc, #32]	@ (800f734 <processHalfDMAbuffer+0x6c>)
 800f714:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800f716:	4b08      	ldr	r3, [pc, #32]	@ (800f738 <processHalfDMAbuffer+0x70>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d001      	beq.n	800f724 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800f720:	f000 f826 	bl	800f770 <calculateSPLQ31>
    }
}
 800f724:	46c0      	nop			@ (mov r8, r8)
 800f726:	46bd      	mov	sp, r7
 800f728:	b002      	add	sp, #8
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20000fd8 	.word	0x20000fd8
 800f730:	200017d8 	.word	0x200017d8
 800f734:	20000f98 	.word	0x20000f98
 800f738:	20000f93 	.word	0x20000f93

0800f73c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f744:	4b07      	ldr	r3, [pc, #28]	@ (800f764 <HAL_I2S_ErrorCallback+0x28>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d106      	bne.n	800f75c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800f74e:	4a06      	ldr	r2, [pc, #24]	@ (800f768 <HAL_I2S_ErrorCallback+0x2c>)
 800f750:	239e      	movs	r3, #158	@ 0x9e
 800f752:	0059      	lsls	r1, r3, #1
 800f754:	4b05      	ldr	r3, [pc, #20]	@ (800f76c <HAL_I2S_ErrorCallback+0x30>)
 800f756:	0018      	movs	r0, r3
 800f758:	f002 f8f4 	bl	8011944 <errorHandler>
  }
}
 800f75c:	46c0      	nop			@ (mov r8, r8)
 800f75e:	46bd      	mov	sp, r7
 800f760:	b002      	add	sp, #8
 800f762:	bd80      	pop	{r7, pc}
 800f764:	200019dc 	.word	0x200019dc
 800f768:	0802a8f4 	.word	0x0802a8f4
 800f76c:	0802b180 	.word	0x0802b180

0800f770 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800f770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f772:	b0b3      	sub	sp, #204	@ 0xcc
 800f774:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800f776:	4ae2      	ldr	r2, [pc, #904]	@ (800fb00 <calculateSPLQ31+0x390>)
 800f778:	2338      	movs	r3, #56	@ 0x38
 800f77a:	2030      	movs	r0, #48	@ 0x30
 800f77c:	181b      	adds	r3, r3, r0
 800f77e:	19d9      	adds	r1, r3, r7
 800f780:	2334      	movs	r3, #52	@ 0x34
 800f782:	181b      	adds	r3, r3, r0
 800f784:	19d8      	adds	r0, r3, r7
 800f786:	2380      	movs	r3, #128	@ 0x80
 800f788:	f000 fc36 	bl	800fff8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800f78c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f78e:	2b00      	cmp	r3, #0
 800f790:	da00      	bge.n	800f794 <calculateSPLQ31+0x24>
 800f792:	3301      	adds	r3, #1
 800f794:	105b      	asrs	r3, r3, #1
 800f796:	001a      	movs	r2, r3
 800f798:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	da00      	bge.n	800f7a0 <calculateSPLQ31+0x30>
 800f79e:	3301      	adds	r3, #1
 800f7a0:	105b      	asrs	r3, r3, #1
 800f7a2:	18d3      	adds	r3, r2, r3
 800f7a4:	2188      	movs	r1, #136	@ 0x88
 800f7a6:	187a      	adds	r2, r7, r1
 800f7a8:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800f7aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f7ac:	187b      	adds	r3, r7, r1
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	2284      	movs	r2, #132	@ 0x84
 800f7b6:	18b9      	adds	r1, r7, r2
 800f7b8:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800f7ba:	18bb      	adds	r3, r7, r2
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4ad1      	ldr	r2, [pc, #836]	@ (800fb04 <calculateSPLQ31+0x394>)
 800f7c0:	0019      	movs	r1, r3
 800f7c2:	0010      	movs	r0, r2
 800f7c4:	f000 fc58 	bl	8010078 <getPo2factor>
 800f7c8:	0003      	movs	r3, r0
 800f7ca:	2280      	movs	r2, #128	@ 0x80
 800f7cc:	18ba      	adds	r2, r7, r2
 800f7ce:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	2284      	movs	r2, #132	@ 0x84
 800f7d4:	2130      	movs	r1, #48	@ 0x30
 800f7d6:	1852      	adds	r2, r2, r1
 800f7d8:	19d2      	adds	r2, r2, r7
 800f7da:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f7dc:	2300      	movs	r3, #0
 800f7de:	2280      	movs	r2, #128	@ 0x80
 800f7e0:	1852      	adds	r2, r2, r1
 800f7e2:	19d2      	adds	r2, r2, r7
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	e032      	b.n	800f84e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800f7e8:	4ac5      	ldr	r2, [pc, #788]	@ (800fb00 <calculateSPLQ31+0x390>)
 800f7ea:	2680      	movs	r6, #128	@ 0x80
 800f7ec:	2330      	movs	r3, #48	@ 0x30
 800f7ee:	18f1      	adds	r1, r6, r3
 800f7f0:	19cb      	adds	r3, r1, r7
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	589a      	ldr	r2, [r3, r2]
 800f7f8:	2188      	movs	r1, #136	@ 0x88
 800f7fa:	1879      	adds	r1, r7, r1
 800f7fc:	680b      	ldr	r3, [r1, #0]
 800f7fe:	1ad2      	subs	r2, r2, r3
 800f800:	2180      	movs	r1, #128	@ 0x80
 800f802:	1879      	adds	r1, r7, r1
 800f804:	680b      	ldr	r3, [r1, #0]
 800f806:	409a      	lsls	r2, r3
 800f808:	0011      	movs	r1, r2
 800f80a:	4abf      	ldr	r2, [pc, #764]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f80c:	2084      	movs	r0, #132	@ 0x84
 800f80e:	2330      	movs	r3, #48	@ 0x30
 800f810:	18c3      	adds	r3, r0, r3
 800f812:	19db      	adds	r3, r3, r7
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800f81a:	2230      	movs	r2, #48	@ 0x30
 800f81c:	1883      	adds	r3, r0, r2
 800f81e:	19db      	adds	r3, r3, r7
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	3301      	adds	r3, #1
 800f824:	49b8      	ldr	r1, [pc, #736]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f826:	009a      	lsls	r2, r3, #2
 800f828:	2300      	movs	r3, #0
 800f82a:	5053      	str	r3, [r2, r1]
        count += 2;
 800f82c:	2230      	movs	r2, #48	@ 0x30
 800f82e:	1883      	adds	r3, r0, r2
 800f830:	19db      	adds	r3, r3, r7
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3302      	adds	r3, #2
 800f836:	0011      	movs	r1, r2
 800f838:	1882      	adds	r2, r0, r2
 800f83a:	19d2      	adds	r2, r2, r7
 800f83c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f83e:	000a      	movs	r2, r1
 800f840:	18b3      	adds	r3, r6, r2
 800f842:	19db      	adds	r3, r3, r7
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	18b2      	adds	r2, r6, r2
 800f84a:	19d2      	adds	r2, r2, r7
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	2380      	movs	r3, #128	@ 0x80
 800f850:	2630      	movs	r6, #48	@ 0x30
 800f852:	199b      	adds	r3, r3, r6
 800f854:	19db      	adds	r3, r3, r7
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b7f      	cmp	r3, #127	@ 0x7f
 800f85a:	d9c5      	bls.n	800f7e8 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800f85c:	4bab      	ldr	r3, [pc, #684]	@ (800fb0c <calculateSPLQ31+0x39c>)
 800f85e:	6818      	ldr	r0, [r3, #0]
 800f860:	49a9      	ldr	r1, [pc, #676]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f862:	2301      	movs	r3, #1
 800f864:	2200      	movs	r2, #0
 800f866:	f011 fd23 	bl	80212b0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800f86a:	4aa9      	ldr	r2, [pc, #676]	@ (800fb10 <calculateSPLQ31+0x3a0>)
 800f86c:	2338      	movs	r3, #56	@ 0x38
 800f86e:	199b      	adds	r3, r3, r6
 800f870:	19d9      	adds	r1, r3, r7
 800f872:	2334      	movs	r3, #52	@ 0x34
 800f874:	199b      	adds	r3, r3, r6
 800f876:	19d8      	adds	r0, r3, r7
 800f878:	237e      	movs	r3, #126	@ 0x7e
 800f87a:	f000 fbbd 	bl	800fff8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800f87e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f880:	2380      	movs	r3, #128	@ 0x80
 800f882:	061b      	lsls	r3, r3, #24
 800f884:	429a      	cmp	r2, r3
 800f886:	d101      	bne.n	800f88c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800f888:	4b9e      	ldr	r3, [pc, #632]	@ (800fb04 <calculateSPLQ31+0x394>)
 800f88a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800f88c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f88e:	2380      	movs	r3, #128	@ 0x80
 800f890:	061b      	lsls	r3, r3, #24
 800f892:	429a      	cmp	r2, r3
 800f894:	d101      	bne.n	800f89a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800f896:	4b9b      	ldr	r3, [pc, #620]	@ (800fb04 <calculateSPLQ31+0x394>)
 800f898:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800f89a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f89c:	17da      	asrs	r2, r3, #31
 800f89e:	189b      	adds	r3, r3, r2
 800f8a0:	4053      	eors	r3, r2
 800f8a2:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800f8a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8a6:	17da      	asrs	r2, r3, #31
 800f8a8:	189b      	adds	r3, r3, r2
 800f8aa:	4053      	eors	r3, r2
 800f8ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800f8ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f8b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	dd01      	ble.n	800f8ba <calculateSPLQ31+0x14a>
    {
        max = min;
 800f8b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800f8ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8bc:	3304      	adds	r3, #4
 800f8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800f8c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f8c2:	4a90      	ldr	r2, [pc, #576]	@ (800fb04 <calculateSPLQ31+0x394>)
 800f8c4:	0019      	movs	r1, r3
 800f8c6:	0010      	movs	r0, r2
 800f8c8:	f000 fbd6 	bl	8010078 <getPo2factor>
 800f8cc:	0003      	movs	r3, r0
 800f8ce:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	22ac      	movs	r2, #172	@ 0xac
 800f8d4:	18ba      	adds	r2, r7, r2
 800f8d6:	6013      	str	r3, [r2, #0]
 800f8d8:	e012      	b.n	800f900 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800f8da:	4a8b      	ldr	r2, [pc, #556]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f8dc:	20ac      	movs	r0, #172	@ 0xac
 800f8de:	183b      	adds	r3, r7, r0
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	589a      	ldr	r2, [r3, r2]
 800f8e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8e8:	409a      	lsls	r2, r3
 800f8ea:	0011      	movs	r1, r2
 800f8ec:	4a86      	ldr	r2, [pc, #536]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f8ee:	183b      	adds	r3, r7, r0
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800f8f6:	183b      	adds	r3, r7, r0
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	183a      	adds	r2, r7, r0
 800f8fe:	6013      	str	r3, [r2, #0]
 800f900:	23ac      	movs	r3, #172	@ 0xac
 800f902:	18fb      	adds	r3, r7, r3
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2b7f      	cmp	r3, #127	@ 0x7f
 800f908:	d9e7      	bls.n	800f8da <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800f90a:	4b7d      	ldr	r3, [pc, #500]	@ (800fb00 <calculateSPLQ31+0x390>)
 800f90c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800f90e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800f910:	4b7d      	ldr	r3, [pc, #500]	@ (800fb08 <calculateSPLQ31+0x398>)
 800f912:	2240      	movs	r2, #64	@ 0x40
 800f914:	0018      	movs	r0, r3
 800f916:	f012 fa75 	bl	8021e04 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800f91a:	2330      	movs	r3, #48	@ 0x30
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	0018      	movs	r0, r3
 800f920:	2330      	movs	r3, #48	@ 0x30
 800f922:	001a      	movs	r2, r3
 800f924:	2100      	movs	r1, #0
 800f926:	f014 f8b3 	bl	8023a90 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800f92a:	2200      	movs	r2, #0
 800f92c:	2300      	movs	r3, #0
 800f92e:	21a0      	movs	r1, #160	@ 0xa0
 800f930:	1879      	adds	r1, r7, r1
 800f932:	600a      	str	r2, [r1, #0]
 800f934:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800f936:	2301      	movs	r3, #1
 800f938:	229c      	movs	r2, #156	@ 0x9c
 800f93a:	18ba      	adds	r2, r7, r2
 800f93c:	6013      	str	r3, [r2, #0]
 800f93e:	e05b      	b.n	800f9f8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800f940:	269c      	movs	r6, #156	@ 0x9c
 800f942:	19bb      	adds	r3, r7, r6
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	009a      	lsls	r2, r3, #2
 800f948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f94a:	189b      	adds	r3, r3, r2
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	613b      	str	r3, [r7, #16]
 800f950:	17db      	asrs	r3, r3, #31
 800f952:	617b      	str	r3, [r7, #20]
 800f954:	4b6f      	ldr	r3, [pc, #444]	@ (800fb14 <calculateSPLQ31+0x3a4>)
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	19bb      	adds	r3, r7, r6
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	005b      	lsls	r3, r3, #1
 800f95e:	18d3      	adds	r3, r2, r3
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	60bb      	str	r3, [r7, #8]
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	68ba      	ldr	r2, [r7, #8]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6938      	ldr	r0, [r7, #16]
 800f96e:	6979      	ldr	r1, [r7, #20]
 800f970:	f7f0 fe26 	bl	80005c0 <__aeabi_lmul>
 800f974:	0002      	movs	r2, r0
 800f976:	000b      	movs	r3, r1
 800f978:	0010      	movs	r0, r2
 800f97a:	0019      	movs	r1, r3
 800f97c:	23a0      	movs	r3, #160	@ 0xa0
 800f97e:	18fa      	adds	r2, r7, r3
 800f980:	6853      	ldr	r3, [r2, #4]
 800f982:	6812      	ldr	r2, [r2, #0]
 800f984:	1812      	adds	r2, r2, r0
 800f986:	414b      	adcs	r3, r1
 800f988:	21a0      	movs	r1, #160	@ 0xa0
 800f98a:	1879      	adds	r1, r7, r1
 800f98c:	600a      	str	r2, [r1, #0]
 800f98e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800f990:	4b61      	ldr	r3, [pc, #388]	@ (800fb18 <calculateSPLQ31+0x3a8>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	19bb      	adds	r3, r7, r6
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	18d3      	adds	r3, r2, r3
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b06      	cmp	r3, #6
 800f99e:	d025      	beq.n	800f9ec <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800f9a0:	4b5d      	ldr	r3, [pc, #372]	@ (800fb18 <calculateSPLQ31+0x3a8>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	19bb      	adds	r3, r7, r6
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	18d3      	adds	r3, r2, r3
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2230      	movs	r2, #48	@ 0x30
 800f9ae:	18ba      	adds	r2, r7, r2
 800f9b0:	00db      	lsls	r3, r3, #3
 800f9b2:	18d3      	adds	r3, r2, r3
 800f9b4:	6818      	ldr	r0, [r3, #0]
 800f9b6:	6859      	ldr	r1, [r3, #4]
 800f9b8:	19bb      	adds	r3, r7, r6
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	009a      	lsls	r2, r3, #2
 800f9be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9c0:	189b      	adds	r3, r3, r2
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	603b      	str	r3, [r7, #0]
 800f9c6:	17db      	asrs	r3, r3, #31
 800f9c8:	607b      	str	r3, [r7, #4]
 800f9ca:	4b53      	ldr	r3, [pc, #332]	@ (800fb18 <calculateSPLQ31+0x3a8>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	19be      	adds	r6, r7, r6
 800f9d0:	6833      	ldr	r3, [r6, #0]
 800f9d2:	18d3      	adds	r3, r2, r3
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	001e      	movs	r6, r3
 800f9d8:	683a      	ldr	r2, [r7, #0]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	1880      	adds	r0, r0, r2
 800f9de:	4159      	adcs	r1, r3
 800f9e0:	2330      	movs	r3, #48	@ 0x30
 800f9e2:	18fa      	adds	r2, r7, r3
 800f9e4:	00f3      	lsls	r3, r6, #3
 800f9e6:	18d3      	adds	r3, r2, r3
 800f9e8:	6018      	str	r0, [r3, #0]
 800f9ea:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800f9ec:	229c      	movs	r2, #156	@ 0x9c
 800f9ee:	18bb      	adds	r3, r7, r2
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	18ba      	adds	r2, r7, r2
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	239c      	movs	r3, #156	@ 0x9c
 800f9fa:	18fb      	adds	r3, r7, r3
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa00:	d99e      	bls.n	800f940 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800fa02:	2380      	movs	r3, #128	@ 0x80
 800fa04:	18fb      	adds	r3, r7, r3
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	001a      	movs	r2, r3
 800fa0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	18d3      	adds	r3, r2, r3
 800fa12:	3b22      	subs	r3, #34	@ 0x22
 800fa14:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800fa16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa18:	17da      	asrs	r2, r3, #31
 800fa1a:	189b      	adds	r3, r3, r2
 800fa1c:	4053      	eors	r3, r2
 800fa1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800fa20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	da62      	bge.n	800faec <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800fa26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa28:	3b20      	subs	r3, #32
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	db05      	blt.n	800fa3a <calculateSPLQ31+0x2ca>
 800fa2e:	22a0      	movs	r2, #160	@ 0xa0
 800fa30:	18ba      	adds	r2, r7, r2
 800fa32:	6812      	ldr	r2, [r2, #0]
 800fa34:	409a      	lsls	r2, r3
 800fa36:	627a      	str	r2, [r7, #36]	@ 0x24
 800fa38:	e010      	b.n	800fa5c <calculateSPLQ31+0x2ec>
 800fa3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa3c:	2220      	movs	r2, #32
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	22a0      	movs	r2, #160	@ 0xa0
 800fa42:	18ba      	adds	r2, r7, r2
 800fa44:	6812      	ldr	r2, [r2, #0]
 800fa46:	40da      	lsrs	r2, r3
 800fa48:	0013      	movs	r3, r2
 800fa4a:	22a4      	movs	r2, #164	@ 0xa4
 800fa4c:	18ba      	adds	r2, r7, r2
 800fa4e:	6811      	ldr	r1, [r2, #0]
 800fa50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa52:	4091      	lsls	r1, r2
 800fa54:	6279      	str	r1, [r7, #36]	@ 0x24
 800fa56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa58:	431a      	orrs	r2, r3
 800fa5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800fa5c:	21a0      	movs	r1, #160	@ 0xa0
 800fa5e:	187b      	adds	r3, r7, r1
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa64:	409a      	lsls	r2, r3
 800fa66:	623a      	str	r2, [r7, #32]
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800fa6c:	187a      	adds	r2, r7, r1
 800fa6e:	6013      	str	r3, [r2, #0]
 800fa70:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fa72:	2300      	movs	r3, #0
 800fa74:	2298      	movs	r2, #152	@ 0x98
 800fa76:	18ba      	adds	r2, r7, r2
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	e031      	b.n	800fae0 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800fa7c:	2330      	movs	r3, #48	@ 0x30
 800fa7e:	18fa      	adds	r2, r7, r3
 800fa80:	2398      	movs	r3, #152	@ 0x98
 800fa82:	18fb      	adds	r3, r7, r3
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	00db      	lsls	r3, r3, #3
 800fa88:	18d3      	adds	r3, r2, r3
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fa90:	3920      	subs	r1, #32
 800fa92:	2900      	cmp	r1, #0
 800fa94:	db03      	blt.n	800fa9e <calculateSPLQ31+0x32e>
 800fa96:	0010      	movs	r0, r2
 800fa98:	4088      	lsls	r0, r1
 800fa9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fa9c:	e00c      	b.n	800fab8 <calculateSPLQ31+0x348>
 800fa9e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800faa0:	2020      	movs	r0, #32
 800faa2:	1a41      	subs	r1, r0, r1
 800faa4:	0010      	movs	r0, r2
 800faa6:	40c8      	lsrs	r0, r1
 800faa8:	0001      	movs	r1, r0
 800faaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800faac:	001c      	movs	r4, r3
 800faae:	4084      	lsls	r4, r0
 800fab0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800fab2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fab4:	4308      	orrs	r0, r1
 800fab6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fab8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800faba:	0013      	movs	r3, r2
 800fabc:	408b      	lsls	r3, r1
 800fabe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fac0:	2330      	movs	r3, #48	@ 0x30
 800fac2:	18fa      	adds	r2, r7, r3
 800fac4:	2098      	movs	r0, #152	@ 0x98
 800fac6:	183b      	adds	r3, r7, r0
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	00db      	lsls	r3, r3, #3
 800facc:	18d3      	adds	r3, r2, r3
 800face:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fad2:	6019      	str	r1, [r3, #0]
 800fad4:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fad6:	183b      	adds	r3, r7, r0
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3301      	adds	r3, #1
 800fadc:	183a      	adds	r2, r7, r0
 800fade:	6013      	str	r3, [r2, #0]
 800fae0:	2398      	movs	r3, #152	@ 0x98
 800fae2:	18fb      	adds	r3, r7, r3
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b05      	cmp	r3, #5
 800fae8:	d9c8      	bls.n	800fa7c <calculateSPLQ31+0x30c>
 800faea:	e06b      	b.n	800fbc4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800faec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faee:	3b20      	subs	r3, #32
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	db13      	blt.n	800fb1c <calculateSPLQ31+0x3ac>
 800faf4:	22a4      	movs	r2, #164	@ 0xa4
 800faf6:	18ba      	adds	r2, r7, r2
 800faf8:	6812      	ldr	r2, [r2, #0]
 800fafa:	40da      	lsrs	r2, r3
 800fafc:	61ba      	str	r2, [r7, #24]
 800fafe:	e01e      	b.n	800fb3e <calculateSPLQ31+0x3ce>
 800fb00:	200017d8 	.word	0x200017d8
 800fb04:	7fffffff 	.word	0x7fffffff
 800fb08:	20001a24 	.word	0x20001a24
 800fb0c:	200000c8 	.word	0x200000c8
 800fb10:	20001a2c 	.word	0x20001a2c
 800fb14:	200000cc 	.word	0x200000cc
 800fb18:	200000d8 	.word	0x200000d8
 800fb1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb1e:	2220      	movs	r2, #32
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	22a4      	movs	r2, #164	@ 0xa4
 800fb24:	18ba      	adds	r2, r7, r2
 800fb26:	6812      	ldr	r2, [r2, #0]
 800fb28:	409a      	lsls	r2, r3
 800fb2a:	0013      	movs	r3, r2
 800fb2c:	22a0      	movs	r2, #160	@ 0xa0
 800fb2e:	18ba      	adds	r2, r7, r2
 800fb30:	6811      	ldr	r1, [r2, #0]
 800fb32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb34:	40d1      	lsrs	r1, r2
 800fb36:	61b9      	str	r1, [r7, #24]
 800fb38:	69ba      	ldr	r2, [r7, #24]
 800fb3a:	431a      	orrs	r2, r3
 800fb3c:	61ba      	str	r2, [r7, #24]
 800fb3e:	23a4      	movs	r3, #164	@ 0xa4
 800fb40:	18fb      	adds	r3, r7, r3
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb46:	40da      	lsrs	r2, r3
 800fb48:	61fa      	str	r2, [r7, #28]
 800fb4a:	69ba      	ldr	r2, [r7, #24]
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	21a0      	movs	r1, #160	@ 0xa0
 800fb50:	1879      	adds	r1, r7, r1
 800fb52:	600a      	str	r2, [r1, #0]
 800fb54:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fb56:	2300      	movs	r3, #0
 800fb58:	2294      	movs	r2, #148	@ 0x94
 800fb5a:	18ba      	adds	r2, r7, r2
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	e02c      	b.n	800fbba <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800fb60:	2330      	movs	r3, #48	@ 0x30
 800fb62:	18fa      	adds	r2, r7, r3
 800fb64:	2394      	movs	r3, #148	@ 0x94
 800fb66:	18fb      	adds	r3, r7, r3
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	00db      	lsls	r3, r3, #3
 800fb6c:	18d3      	adds	r3, r2, r3
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb74:	3920      	subs	r1, #32
 800fb76:	2900      	cmp	r1, #0
 800fb78:	db03      	blt.n	800fb82 <calculateSPLQ31+0x412>
 800fb7a:	0018      	movs	r0, r3
 800fb7c:	40c8      	lsrs	r0, r1
 800fb7e:	0004      	movs	r4, r0
 800fb80:	e00a      	b.n	800fb98 <calculateSPLQ31+0x428>
 800fb82:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb84:	2020      	movs	r0, #32
 800fb86:	1a41      	subs	r1, r0, r1
 800fb88:	0018      	movs	r0, r3
 800fb8a:	4088      	lsls	r0, r1
 800fb8c:	0001      	movs	r1, r0
 800fb8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb90:	0016      	movs	r6, r2
 800fb92:	40c6      	lsrs	r6, r0
 800fb94:	0034      	movs	r4, r6
 800fb96:	430c      	orrs	r4, r1
 800fb98:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb9a:	40cb      	lsrs	r3, r1
 800fb9c:	001d      	movs	r5, r3
 800fb9e:	2330      	movs	r3, #48	@ 0x30
 800fba0:	18fa      	adds	r2, r7, r3
 800fba2:	2194      	movs	r1, #148	@ 0x94
 800fba4:	187b      	adds	r3, r7, r1
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	18d3      	adds	r3, r2, r3
 800fbac:	601c      	str	r4, [r3, #0]
 800fbae:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fbb0:	187b      	adds	r3, r7, r1
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	187a      	adds	r2, r7, r1
 800fbb8:	6013      	str	r3, [r2, #0]
 800fbba:	2394      	movs	r3, #148	@ 0x94
 800fbbc:	18fb      	adds	r3, r7, r3
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b05      	cmp	r3, #5
 800fbc2:	d9cd      	bls.n	800fb60 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800fbc4:	230f      	movs	r3, #15
 800fbc6:	425d      	negs	r5, r3
 800fbc8:	2305      	movs	r3, #5
 800fbca:	425e      	negs	r6, r3
 800fbcc:	4b4a      	ldr	r3, [pc, #296]	@ (800fcf8 <calculateSPLQ31+0x588>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	4b4a      	ldr	r3, [pc, #296]	@ (800fcfc <calculateSPLQ31+0x58c>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	21a0      	movs	r1, #160	@ 0xa0
 800fbda:	1879      	adds	r1, r7, r1
 800fbdc:	6808      	ldr	r0, [r1, #0]
 800fbde:	6849      	ldr	r1, [r1, #4]
 800fbe0:	4c47      	ldr	r4, [pc, #284]	@ (800fd00 <calculateSPLQ31+0x590>)
 800fbe2:	9403      	str	r4, [sp, #12]
 800fbe4:	4c47      	ldr	r4, [pc, #284]	@ (800fd04 <calculateSPLQ31+0x594>)
 800fbe6:	9402      	str	r4, [sp, #8]
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	9200      	str	r2, [sp, #0]
 800fbec:	0033      	movs	r3, r6
 800fbee:	002a      	movs	r2, r5
 800fbf0:	f000 fa86 	bl	8010100 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	2290      	movs	r2, #144	@ 0x90
 800fbf8:	18ba      	adds	r2, r7, r2
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	e026      	b.n	800fc4c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fbfe:	2330      	movs	r3, #48	@ 0x30
 800fc00:	18fa      	adds	r2, r7, r3
 800fc02:	2490      	movs	r4, #144	@ 0x90
 800fc04:	193b      	adds	r3, r7, r4
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	00db      	lsls	r3, r3, #3
 800fc0a:	18d3      	adds	r3, r2, r3
 800fc0c:	6818      	ldr	r0, [r3, #0]
 800fc0e:	6859      	ldr	r1, [r3, #4]
 800fc10:	230f      	movs	r3, #15
 800fc12:	425d      	negs	r5, r3
 800fc14:	2305      	movs	r3, #5
 800fc16:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800fc18:	193b      	adds	r3, r7, r4
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	009a      	lsls	r2, r3, #2
 800fc1e:	4b3a      	ldr	r3, [pc, #232]	@ (800fd08 <calculateSPLQ31+0x598>)
 800fc20:	18d3      	adds	r3, r2, r3
 800fc22:	193a      	adds	r2, r7, r4
 800fc24:	6812      	ldr	r2, [r2, #0]
 800fc26:	0094      	lsls	r4, r2, #2
 800fc28:	4a38      	ldr	r2, [pc, #224]	@ (800fd0c <calculateSPLQ31+0x59c>)
 800fc2a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fc2c:	9203      	str	r2, [sp, #12]
 800fc2e:	9302      	str	r3, [sp, #8]
 800fc30:	2300      	movs	r3, #0
 800fc32:	9301      	str	r3, [sp, #4]
 800fc34:	2300      	movs	r3, #0
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	0033      	movs	r3, r6
 800fc3a:	002a      	movs	r2, r5
 800fc3c:	f000 fa60 	bl	8010100 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fc40:	2490      	movs	r4, #144	@ 0x90
 800fc42:	193b      	adds	r3, r7, r4
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	3301      	adds	r3, #1
 800fc48:	193a      	adds	r2, r7, r4
 800fc4a:	6013      	str	r3, [r2, #0]
 800fc4c:	2390      	movs	r3, #144	@ 0x90
 800fc4e:	18fb      	adds	r3, r7, r3
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b05      	cmp	r3, #5
 800fc54:	d9d3      	bls.n	800fbfe <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800fc56:	4b2b      	ldr	r3, [pc, #172]	@ (800fd04 <calculateSPLQ31+0x594>)
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	4b2d      	ldr	r3, [pc, #180]	@ (800fd10 <calculateSPLQ31+0x5a0>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	18d2      	adds	r2, r2, r3
 800fc60:	4b2b      	ldr	r3, [pc, #172]	@ (800fd10 <calculateSPLQ31+0x5a0>)
 800fc62:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800fc64:	4b26      	ldr	r3, [pc, #152]	@ (800fd00 <calculateSPLQ31+0x590>)
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	4b2a      	ldr	r3, [pc, #168]	@ (800fd14 <calculateSPLQ31+0x5a4>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	18d2      	adds	r2, r2, r3
 800fc6e:	4b29      	ldr	r3, [pc, #164]	@ (800fd14 <calculateSPLQ31+0x5a4>)
 800fc70:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fc72:	2300      	movs	r3, #0
 800fc74:	228c      	movs	r2, #140	@ 0x8c
 800fc76:	18ba      	adds	r2, r7, r2
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	e025      	b.n	800fcc8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800fc7c:	4b22      	ldr	r3, [pc, #136]	@ (800fd08 <calculateSPLQ31+0x598>)
 800fc7e:	208c      	movs	r0, #140	@ 0x8c
 800fc80:	183a      	adds	r2, r7, r0
 800fc82:	6812      	ldr	r2, [r2, #0]
 800fc84:	0092      	lsls	r2, r2, #2
 800fc86:	58d2      	ldr	r2, [r2, r3]
 800fc88:	4b23      	ldr	r3, [pc, #140]	@ (800fd18 <calculateSPLQ31+0x5a8>)
 800fc8a:	1839      	adds	r1, r7, r0
 800fc8c:	6809      	ldr	r1, [r1, #0]
 800fc8e:	0089      	lsls	r1, r1, #2
 800fc90:	58cb      	ldr	r3, [r1, r3]
 800fc92:	18d1      	adds	r1, r2, r3
 800fc94:	4b20      	ldr	r3, [pc, #128]	@ (800fd18 <calculateSPLQ31+0x5a8>)
 800fc96:	183a      	adds	r2, r7, r0
 800fc98:	6812      	ldr	r2, [r2, #0]
 800fc9a:	0092      	lsls	r2, r2, #2
 800fc9c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800fc9e:	4b1b      	ldr	r3, [pc, #108]	@ (800fd0c <calculateSPLQ31+0x59c>)
 800fca0:	183a      	adds	r2, r7, r0
 800fca2:	6812      	ldr	r2, [r2, #0]
 800fca4:	0092      	lsls	r2, r2, #2
 800fca6:	58d2      	ldr	r2, [r2, r3]
 800fca8:	4b1c      	ldr	r3, [pc, #112]	@ (800fd1c <calculateSPLQ31+0x5ac>)
 800fcaa:	1839      	adds	r1, r7, r0
 800fcac:	6809      	ldr	r1, [r1, #0]
 800fcae:	0089      	lsls	r1, r1, #2
 800fcb0:	58cb      	ldr	r3, [r1, r3]
 800fcb2:	18d1      	adds	r1, r2, r3
 800fcb4:	4b19      	ldr	r3, [pc, #100]	@ (800fd1c <calculateSPLQ31+0x5ac>)
 800fcb6:	183a      	adds	r2, r7, r0
 800fcb8:	6812      	ldr	r2, [r2, #0]
 800fcba:	0092      	lsls	r2, r2, #2
 800fcbc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fcbe:	183b      	adds	r3, r7, r0
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	183a      	adds	r2, r7, r0
 800fcc6:	6013      	str	r3, [r2, #0]
 800fcc8:	238c      	movs	r3, #140	@ 0x8c
 800fcca:	18fb      	adds	r3, r7, r3
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2b05      	cmp	r3, #5
 800fcd0:	d9d4      	bls.n	800fc7c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800fcd2:	4b13      	ldr	r3, [pc, #76]	@ (800fd20 <calculateSPLQ31+0x5b0>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <calculateSPLQ31+0x5b0>)
 800fcda:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800fcdc:	4b10      	ldr	r3, [pc, #64]	@ (800fd20 <calculateSPLQ31+0x5b0>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b0f      	cmp	r3, #15
 800fce2:	d905      	bls.n	800fcf0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800fce4:	4b0f      	ldr	r3, [pc, #60]	@ (800fd24 <calculateSPLQ31+0x5b4>)
 800fce6:	2201      	movs	r2, #1
 800fce8:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800fcea:	4b0f      	ldr	r3, [pc, #60]	@ (800fd28 <calculateSPLQ31+0x5b8>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	701a      	strb	r2, [r3, #0]
    }
}
 800fcf0:	46c0      	nop			@ (mov r8, r8)
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	b02f      	add	sp, #188	@ 0xbc
 800fcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcf8:	200000d0 	.word	0x200000d0
 800fcfc:	200000d4 	.word	0x200000d4
 800fd00:	20000fa4 	.word	0x20000fa4
 800fd04:	20000fa0 	.word	0x20000fa0
 800fd08:	20000fa8 	.word	0x20000fa8
 800fd0c:	20000fc0 	.word	0x20000fc0
 800fd10:	200019e8 	.word	0x200019e8
 800fd14:	200019ec 	.word	0x200019ec
 800fd18:	200019f0 	.word	0x200019f0
 800fd1c:	20001a08 	.word	0x20001a08
 800fd20:	20001a20 	.word	0x20001a20
 800fd24:	20000f95 	.word	0x20000f95
 800fd28:	20000f93 	.word	0x20000f93

0800fd2c <resetSPLstate>:

static void resetSPLstate(void)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800fd32:	4b11      	ldr	r3, [pc, #68]	@ (800fd78 <resetSPLstate+0x4c>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800fd38:	4b10      	ldr	r3, [pc, #64]	@ (800fd7c <resetSPLstate+0x50>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800fd3e:	4b10      	ldr	r3, [pc, #64]	@ (800fd80 <resetSPLstate+0x54>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fd44:	2300      	movs	r3, #0
 800fd46:	607b      	str	r3, [r7, #4]
 800fd48:	e00c      	b.n	800fd64 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800fd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800fd84 <resetSPLstate+0x58>)
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	0092      	lsls	r2, r2, #2
 800fd50:	2100      	movs	r1, #0
 800fd52:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800fd54:	4b0c      	ldr	r3, [pc, #48]	@ (800fd88 <resetSPLstate+0x5c>)
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	0092      	lsls	r2, r2, #2
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	3301      	adds	r3, #1
 800fd62:	607b      	str	r3, [r7, #4]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b05      	cmp	r3, #5
 800fd68:	d9ef      	bls.n	800fd4a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800fd6a:	4b08      	ldr	r3, [pc, #32]	@ (800fd8c <resetSPLstate+0x60>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	701a      	strb	r2, [r3, #0]
}
 800fd70:	46c0      	nop			@ (mov r8, r8)
 800fd72:	46bd      	mov	sp, r7
 800fd74:	b002      	add	sp, #8
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	200019e8 	.word	0x200019e8
 800fd7c:	200019ec 	.word	0x200019ec
 800fd80:	20001a20 	.word	0x20001a20
 800fd84:	200019f0 	.word	0x200019f0
 800fd88:	20001a08 	.word	0x20001a08
 800fd8c:	20000f95 	.word	0x20000f95

0800fd90 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800fd90:	b5b0      	push	{r4, r5, r7, lr}
 800fd92:	b090      	sub	sp, #64	@ 0x40
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	0019      	movs	r1, r3
 800fd9c:	1dfb      	adds	r3, r7, #7
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	1dbb      	adds	r3, r7, #6
 800fda2:	1c0a      	adds	r2, r1, #0
 800fda4:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800fda6:	1dfb      	adds	r3, r7, #7
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d005      	beq.n	800fdba <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800fdae:	4b3b      	ldr	r3, [pc, #236]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800fdb4:	4b3a      	ldr	r3, [pc, #232]	@ (800fea0 <getFilteredMaxAmplitudeQ31+0x110>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800fdc2:	2305      	movs	r3, #5
 800fdc4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdca:	e040      	b.n	800fe4e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800fdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	18d3      	adds	r3, r2, r3
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd8:	409a      	lsls	r2, r3
 800fdda:	0013      	movs	r3, r2
 800fddc:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800fdde:	4b30      	ldr	r3, [pc, #192]	@ (800fea0 <getFilteredMaxAmplitudeQ31+0x110>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	425a      	negs	r2, r3
 800fde4:	4b2e      	ldr	r3, [pc, #184]	@ (800fea0 <getFilteredMaxAmplitudeQ31+0x110>)
 800fde6:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800fde8:	2418      	movs	r4, #24
 800fdea:	193a      	adds	r2, r7, r4
 800fdec:	492c      	ldr	r1, [pc, #176]	@ (800fea0 <getFilteredMaxAmplitudeQ31+0x110>)
 800fdee:	231c      	movs	r3, #28
 800fdf0:	18f8      	adds	r0, r7, r3
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f012 f85e 	bl	8021eb4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800fdf8:	2514      	movs	r5, #20
 800fdfa:	197a      	adds	r2, r7, r5
 800fdfc:	1939      	adds	r1, r7, r4
 800fdfe:	4829      	ldr	r0, [pc, #164]	@ (800fea4 <getFilteredMaxAmplitudeQ31+0x114>)
 800fe00:	2301      	movs	r3, #1
 800fe02:	f012 f825 	bl	8021e50 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800fe06:	2410      	movs	r4, #16
 800fe08:	193a      	adds	r2, r7, r4
 800fe0a:	4924      	ldr	r1, [pc, #144]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe0c:	4826      	ldr	r0, [pc, #152]	@ (800fea8 <getFilteredMaxAmplitudeQ31+0x118>)
 800fe0e:	2301      	movs	r3, #1
 800fe10:	f012 f81e 	bl	8021e50 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800fe14:	4a21      	ldr	r2, [pc, #132]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe16:	1939      	adds	r1, r7, r4
 800fe18:	1978      	adds	r0, r7, r5
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	f012 f84a 	bl	8021eb4 <arm_add_q31>

        lastData = fx;
 800fe20:	69fa      	ldr	r2, [r7, #28]
 800fe22:	4b1f      	ldr	r3, [pc, #124]	@ (800fea0 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe24:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800fe26:	4b1d      	ldr	r3, [pc, #116]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	da03      	bge.n	800fe38 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800fe30:	4b1a      	ldr	r3, [pc, #104]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe36:	e007      	b.n	800fe48 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800fe38:	4b18      	ldr	r3, [pc, #96]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	dd02      	ble.n	800fe48 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800fe42:	4b16      	ldr	r3, [pc, #88]	@ (800fe9c <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800fe48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d3ba      	bcc.n	800fdcc <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800fe56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe58:	17da      	asrs	r2, r3, #31
 800fe5a:	189b      	adds	r3, r3, r2
 800fe5c:	4053      	eors	r3, r2
 800fe5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800fe60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe62:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800fe64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d200      	bcs.n	800fe6e <getFilteredMaxAmplitudeQ31+0xde>
 800fe6c:	0013      	movs	r3, r2
 800fe6e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800fe70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe74:	40da      	lsrs	r2, r3
 800fe76:	0013      	movs	r3, r2
 800fe78:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800fe7a:	1dbb      	adds	r3, r7, #6
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d007      	beq.n	800fe92 <getFilteredMaxAmplitudeQ31+0x102>
 800fe82:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <getFilteredMaxAmplitudeQ31+0x11c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6a3a      	ldr	r2, [r7, #32]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d902      	bls.n	800fe92 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800fe8c:	4b07      	ldr	r3, [pc, #28]	@ (800feac <getFilteredMaxAmplitudeQ31+0x11c>)
 800fe8e:	6a3a      	ldr	r2, [r7, #32]
 800fe90:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800fe92:	6a3b      	ldr	r3, [r7, #32]
}
 800fe94:	0018      	movs	r0, r3
 800fe96:	46bd      	mov	sp, r7
 800fe98:	b010      	add	sp, #64	@ 0x40
 800fe9a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe9c:	20001e24 	.word	0x20001e24
 800fea0:	20001e28 	.word	0x20001e28
 800fea4:	0802b178 	.word	0x0802b178
 800fea8:	0802b17c 	.word	0x0802b17c
 800feac:	20000f9c 	.word	0x20000f9c

0800feb0 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800febc:	4913      	ldr	r1, [pc, #76]	@ (800ff0c <floatToIntAndFrac2dp+0x5c>)
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f7f1 f86e 	bl	8000fa0 <__aeabi_fmul>
 800fec4:	1c03      	adds	r3, r0, #0
 800fec6:	1c18      	adds	r0, r3, #0
 800fec8:	f016 fcc0 	bl	802684c <roundf>
 800fecc:	1c03      	adds	r3, r0, #0
 800fece:	1c18      	adds	r0, r3, #0
 800fed0:	f7f0 fba4 	bl	800061c <__aeabi_f2uiz>
 800fed4:	0003      	movs	r3, r0
 800fed6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2164      	movs	r1, #100	@ 0x64
 800fedc:	0018      	movs	r0, r3
 800fede:	f7f0 f961 	bl	80001a4 <__udivsi3>
 800fee2:	0003      	movs	r3, r0
 800fee4:	001a      	movs	r2, r3
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	b2da      	uxtb	r2, r3
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2164      	movs	r1, #100	@ 0x64
 800fef6:	434b      	muls	r3, r1
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	b2da      	uxtb	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	701a      	strb	r2, [r3, #0]
}
 800ff02:	46c0      	nop			@ (mov r8, r8)
 800ff04:	46bd      	mov	sp, r7
 800ff06:	b006      	add	sp, #24
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	46c0      	nop			@ (mov r8, r8)
 800ff0c:	42c80000 	.word	0x42c80000

0800ff10 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ff1c:	4914      	ldr	r1, [pc, #80]	@ (800ff70 <floatToIntAndFrac1dp+0x60>)
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f7f1 f83e 	bl	8000fa0 <__aeabi_fmul>
 800ff24:	1c03      	adds	r3, r0, #0
 800ff26:	1c18      	adds	r0, r3, #0
 800ff28:	f016 fc90 	bl	802684c <roundf>
 800ff2c:	1c03      	adds	r3, r0, #0
 800ff2e:	1c18      	adds	r0, r3, #0
 800ff30:	f7f0 fb74 	bl	800061c <__aeabi_f2uiz>
 800ff34:	0003      	movs	r3, r0
 800ff36:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	210a      	movs	r1, #10
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	f7f0 f931 	bl	80001a4 <__udivsi3>
 800ff42:	0003      	movs	r3, r0
 800ff44:	001a      	movs	r2, r3
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	b2da      	uxtb	r2, r3
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	1c19      	adds	r1, r3, #0
 800ff56:	0089      	lsls	r1, r1, #2
 800ff58:	18cb      	adds	r3, r1, r3
 800ff5a:	18db      	adds	r3, r3, r3
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	701a      	strb	r2, [r3, #0]
}
 800ff66:	46c0      	nop			@ (mov r8, r8)
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	b006      	add	sp, #24
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	46c0      	nop			@ (mov r8, r8)
 800ff70:	41200000 	.word	0x41200000

0800ff74 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7f1 fb24 	bl	80015d0 <__aeabi_i2f>
 800ff88:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ff8a:	6838      	ldr	r0, [r7, #0]
 800ff8c:	f7f1 fb20 	bl	80015d0 <__aeabi_i2f>
 800ff90:	1c03      	adds	r3, r0, #0
 800ff92:	4918      	ldr	r1, [pc, #96]	@ (800fff4 <sumToIntAverage+0x80>)
 800ff94:	1c18      	adds	r0, r3, #0
 800ff96:	f7f0 fe1d 	bl	8000bd4 <__aeabi_fdiv>
 800ff9a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ff9c:	1c19      	adds	r1, r3, #0
 800ff9e:	1c20      	adds	r0, r4, #0
 800ffa0:	f7f0 fc8e 	bl	80008c0 <__aeabi_fadd>
 800ffa4:	1c03      	adds	r3, r0, #0
 800ffa6:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ffa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffaa:	f7f1 fb5d 	bl	8001668 <__aeabi_ui2f>
 800ffae:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ffb0:	1c19      	adds	r1, r3, #0
 800ffb2:	1c20      	adds	r0, r4, #0
 800ffb4:	f7f0 fe0e 	bl	8000bd4 <__aeabi_fdiv>
 800ffb8:	1c03      	adds	r3, r0, #0
 800ffba:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ffc0:	68ba      	ldr	r2, [r7, #8]
 800ffc2:	2310      	movs	r3, #16
 800ffc4:	18f9      	adds	r1, r7, r3
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	1c18      	adds	r0, r3, #0
 800ffca:	f7ff ffa1 	bl	800ff10 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	2bff      	cmp	r3, #255	@ 0xff
 800ffd2:	d906      	bls.n	800ffe2 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	22ff      	movs	r2, #255	@ 0xff
 800ffd8:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	2209      	movs	r2, #9
 800ffde:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ffe0:	e003      	b.n	800ffea <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	701a      	strb	r2, [r3, #0]
}
 800ffea:	46c0      	nop			@ (mov r8, r8)
 800ffec:	46bd      	mov	sp, r7
 800ffee:	b007      	add	sp, #28
 800fff0:	bd90      	pop	{r4, r7, pc}
 800fff2:	46c0      	nop			@ (mov r8, r8)
 800fff4:	41200000 	.word	0x41200000

0800fff8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	60b9      	str	r1, [r7, #8]
 8010002:	607a      	str	r2, [r7, #4]
 8010004:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	2280      	movs	r2, #128	@ 0x80
 801000a:	0612      	lsls	r2, r2, #24
 801000c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	4a18      	ldr	r2, [pc, #96]	@ (8010074 <findMinMax+0x7c>)
 8010012:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8010014:	2300      	movs	r3, #0
 8010016:	617b      	str	r3, [r7, #20]
 8010018:	e022      	b.n	8010060 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	18d3      	adds	r3, r2, r3
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	429a      	cmp	r2, r3
 801002a:	da06      	bge.n	801003a <findMinMax+0x42>
        {
            min[0] = array[i];
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	18d3      	adds	r3, r2, r3
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	18d3      	adds	r3, r2, r3
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	429a      	cmp	r2, r3
 801004a:	dd06      	ble.n	801005a <findMinMax+0x62>
        {
            max[0] = array[i];
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	18d3      	adds	r3, r2, r3
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	3301      	adds	r3, #1
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	697a      	ldr	r2, [r7, #20]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	429a      	cmp	r2, r3
 8010066:	d3d8      	bcc.n	801001a <findMinMax+0x22>
        }
    }
}
 8010068:	46c0      	nop			@ (mov r8, r8)
 801006a:	46c0      	nop			@ (mov r8, r8)
 801006c:	46bd      	mov	sp, r7
 801006e:	b006      	add	sp, #24
 8010070:	bd80      	pop	{r7, pc}
 8010072:	46c0      	nop			@ (mov r8, r8)
 8010074:	7fffffff 	.word	0x7fffffff

08010078 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8010086:	687a      	ldr	r2, [r7, #4]
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d302      	bcc.n	8010094 <getPo2factor+0x1c>
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d107      	bne.n	80100a4 <getPo2factor+0x2c>
    {
        return 0;
 8010094:	2300      	movs	r3, #0
 8010096:	e00d      	b.n	80100b4 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	085b      	lsrs	r3, r3, #1
 801009c:	607b      	str	r3, [r7, #4]
        bitShift++;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3301      	adds	r3, #1
 80100a2:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d2f5      	bcs.n	8010098 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3b01      	subs	r3, #1
 80100b0:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80100b2:	68fb      	ldr	r3, [r7, #12]
}
 80100b4:	0018      	movs	r0, r3
 80100b6:	46bd      	mov	sp, r7
 80100b8:	b004      	add	sp, #16
 80100ba:	bd80      	pop	{r7, pc}

080100bc <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80100ca:	68f8      	ldr	r0, [r7, #12]
 80100cc:	f7f1 facc 	bl	8001668 <__aeabi_ui2f>
 80100d0:	1c03      	adds	r3, r0, #0
 80100d2:	1c19      	adds	r1, r3, #0
 80100d4:	68b8      	ldr	r0, [r7, #8]
 80100d6:	f7f0 ff63 	bl	8000fa0 <__aeabi_fmul>
 80100da:	1c03      	adds	r3, r0, #0
 80100dc:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	2310      	movs	r3, #16
 80100e6:	18f9      	adds	r1, r7, r3
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	1c18      	adds	r0, r3, #0
 80100ec:	f7ff fee0 	bl	800feb0 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	801a      	strh	r2, [r3, #0]
}
 80100f8:	46c0      	nop			@ (mov r8, r8)
 80100fa:	46bd      	mov	sp, r7
 80100fc:	b006      	add	sp, #24
 80100fe:	bd80      	pop	{r7, pc}

08010100 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	60b8      	str	r0, [r7, #8]
 8010108:	60f9      	str	r1, [r7, #12]
 801010a:	607a      	str	r2, [r7, #4]
 801010c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801010e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010110:	6a3a      	ldr	r2, [r7, #32]
 8010112:	68b8      	ldr	r0, [r7, #8]
 8010114:	68f9      	ldr	r1, [r7, #12]
 8010116:	f7fa f87b 	bl	800a210 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801011a:	6a3b      	ldr	r3, [r7, #32]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	18d2      	adds	r2, r2, r3
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	18d2      	adds	r2, r2, r3
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801012a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	18d2      	adds	r2, r2, r3
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	18d2      	adds	r2, r2, r3
 8010136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010138:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801013a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	0011      	movs	r1, r2
 8010140:	0018      	movs	r0, r3
 8010142:	f7fa f8f5 	bl	800a330 <correctIntFracNumber>
}
 8010146:	46c0      	nop			@ (mov r8, r8)
 8010148:	46bd      	mov	sp, r7
 801014a:	b004      	add	sp, #16
 801014c:	bd80      	pop	{r7, pc}

0801014e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b086      	sub	sp, #24
 8010152:	af00      	add	r7, sp, #0
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801015e:	2300      	movs	r3, #0
 8010160:	613b      	str	r3, [r7, #16]
 8010162:	e019      	b.n	8010198 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	18d3      	adds	r3, r2, r3
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	3201      	adds	r2, #1
 8010174:	0052      	lsls	r2, r2, #1
 8010176:	68f9      	ldr	r1, [r7, #12]
 8010178:	188a      	adds	r2, r1, r2
 801017a:	8812      	ldrh	r2, [r2, #0]
 801017c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801017e:	0019      	movs	r1, r3
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8010188:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801018a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	3301      	adds	r3, #1
 8010190:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	3304      	adds	r3, #4
 8010196:	613b      	str	r3, [r7, #16]
 8010198:	693a      	ldr	r2, [r7, #16]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	429a      	cmp	r2, r3
 801019e:	d3e1      	bcc.n	8010164 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80101a0:	46c0      	nop			@ (mov r8, r8)
 80101a2:	46c0      	nop			@ (mov r8, r8)
 80101a4:	46bd      	mov	sp, r7
 80101a6:	b006      	add	sp, #24
 80101a8:	bd80      	pop	{r7, pc}
	...

080101ac <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 80101ac:	b580      	push	{r7, lr}
 80101ae:	af00      	add	r7, sp, #0
  init = false;
 80101b0:	4b02      	ldr	r3, [pc, #8]	@ (80101bc <InitDone+0x10>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	701a      	strb	r2, [r3, #0]
}
 80101b6:	46c0      	nop			@ (mov r8, r8)
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	200000dc 	.word	0x200000dc

080101c0 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80101c6:	f7f7 fd6d 	bl	8007ca4 <ReadBatteryVoltage>
 80101ca:	1c02      	adds	r2, r0, #0
 80101cc:	4b25      	ldr	r3, [pc, #148]	@ (8010264 <batteryChargeCheck+0xa4>)
 80101ce:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 80101d0:	4b24      	ldr	r3, [pc, #144]	@ (8010264 <batteryChargeCheck+0xa4>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4924      	ldr	r1, [pc, #144]	@ (8010268 <batteryChargeCheck+0xa8>)
 80101d6:	1c18      	adds	r0, r3, #0
 80101d8:	f7f0 f9aa 	bl	8000530 <__aeabi_fcmplt>
 80101dc:	1e03      	subs	r3, r0, #0
 80101de:	d002      	beq.n	80101e6 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 80101e0:	1dfb      	adds	r3, r7, #7
 80101e2:	2200      	movs	r2, #0
 80101e4:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 80101e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010264 <batteryChargeCheck+0xa4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	491f      	ldr	r1, [pc, #124]	@ (8010268 <batteryChargeCheck+0xa8>)
 80101ec:	1c18      	adds	r0, r3, #0
 80101ee:	f7f0 f9bd 	bl	800056c <__aeabi_fcmpge>
 80101f2:	1e03      	subs	r3, r0, #0
 80101f4:	d00d      	beq.n	8010212 <batteryChargeCheck+0x52>
 80101f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010264 <batteryChargeCheck+0xa4>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	1c18      	adds	r0, r3, #0
 80101fc:	f7f3 f932 	bl	8003464 <__aeabi_f2d>
 8010200:	4a1a      	ldr	r2, [pc, #104]	@ (801026c <batteryChargeCheck+0xac>)
 8010202:	4b1b      	ldr	r3, [pc, #108]	@ (8010270 <batteryChargeCheck+0xb0>)
 8010204:	f7f0 f95a 	bl	80004bc <__aeabi_dcmplt>
 8010208:	1e03      	subs	r3, r0, #0
 801020a:	d002      	beq.n	8010212 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 801020c:	1dfb      	adds	r3, r7, #7
 801020e:	2201      	movs	r2, #1
 8010210:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8010212:	4b14      	ldr	r3, [pc, #80]	@ (8010264 <batteryChargeCheck+0xa4>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	1c18      	adds	r0, r3, #0
 8010218:	f7f3 f924 	bl	8003464 <__aeabi_f2d>
 801021c:	4a13      	ldr	r2, [pc, #76]	@ (801026c <batteryChargeCheck+0xac>)
 801021e:	4b14      	ldr	r3, [pc, #80]	@ (8010270 <batteryChargeCheck+0xb0>)
 8010220:	f7f0 f96a 	bl	80004f8 <__aeabi_dcmpge>
 8010224:	1e03      	subs	r3, r0, #0
 8010226:	d00b      	beq.n	8010240 <batteryChargeCheck+0x80>
 8010228:	4b0e      	ldr	r3, [pc, #56]	@ (8010264 <batteryChargeCheck+0xa4>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2181      	movs	r1, #129	@ 0x81
 801022e:	05c9      	lsls	r1, r1, #23
 8010230:	1c18      	adds	r0, r3, #0
 8010232:	f7f0 f97d 	bl	8000530 <__aeabi_fcmplt>
 8010236:	1e03      	subs	r3, r0, #0
 8010238:	d002      	beq.n	8010240 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 801023a:	1dfb      	adds	r3, r7, #7
 801023c:	2202      	movs	r2, #2
 801023e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8010240:	4b08      	ldr	r3, [pc, #32]	@ (8010264 <batteryChargeCheck+0xa4>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2181      	movs	r1, #129	@ 0x81
 8010246:	05c9      	lsls	r1, r1, #23
 8010248:	1c18      	adds	r0, r3, #0
 801024a:	f7f0 f98f 	bl	800056c <__aeabi_fcmpge>
 801024e:	1e03      	subs	r3, r0, #0
 8010250:	d002      	beq.n	8010258 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8010252:	1dfb      	adds	r3, r7, #7
 8010254:	2203      	movs	r2, #3
 8010256:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8010258:	1dfb      	adds	r3, r7, #7
 801025a:	781b      	ldrb	r3, [r3, #0]
}
 801025c:	0018      	movs	r0, r3
 801025e:	46bd      	mov	sp, r7
 8010260:	b002      	add	sp, #8
 8010262:	bd80      	pop	{r7, pc}
 8010264:	20001e3c 	.word	0x20001e3c
 8010268:	40600000 	.word	0x40600000
 801026c:	9999999a 	.word	0x9999999a
 8010270:	400d9999 	.word	0x400d9999

08010274 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8010274:	b5b0      	push	{r4, r5, r7, lr}
 8010276:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8010278:	f7f7 fd76 	bl	8007d68 <ReadSolarVoltage>
 801027c:	0003      	movs	r3, r0
 801027e:	001a      	movs	r2, r3
 8010280:	4b1a      	ldr	r3, [pc, #104]	@ (80102ec <Calculate_LED_ON+0x78>)
 8010282:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8010284:	4b19      	ldr	r3, [pc, #100]	@ (80102ec <Calculate_LED_ON+0x78>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	4a19      	ldr	r2, [pc, #100]	@ (80102f0 <Calculate_LED_ON+0x7c>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d802      	bhi.n	8010294 <Calculate_LED_ON+0x20>
    solmV = 2900;
 801028e:	4b17      	ldr	r3, [pc, #92]	@ (80102ec <Calculate_LED_ON+0x78>)
 8010290:	4a18      	ldr	r2, [pc, #96]	@ (80102f4 <Calculate_LED_ON+0x80>)
 8010292:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8010294:	4b15      	ldr	r3, [pc, #84]	@ (80102ec <Calculate_LED_ON+0x78>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	4a17      	ldr	r2, [pc, #92]	@ (80102f8 <Calculate_LED_ON+0x84>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d902      	bls.n	80102a4 <Calculate_LED_ON+0x30>
    solmV = 4700;
 801029e:	4b13      	ldr	r3, [pc, #76]	@ (80102ec <Calculate_LED_ON+0x78>)
 80102a0:	4a15      	ldr	r2, [pc, #84]	@ (80102f8 <Calculate_LED_ON+0x84>)
 80102a2:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 80102a4:	4b11      	ldr	r3, [pc, #68]	@ (80102ec <Calculate_LED_ON+0x78>)
 80102a6:	881b      	ldrh	r3, [r3, #0]
 80102a8:	0018      	movs	r0, r3
 80102aa:	f7f3 f889 	bl	80033c0 <__aeabi_i2d>
 80102ae:	0004      	movs	r4, r0
 80102b0:	000d      	movs	r5, r1
 80102b2:	4b0e      	ldr	r3, [pc, #56]	@ (80102ec <Calculate_LED_ON+0x78>)
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	001a      	movs	r2, r3
 80102b8:	4b10      	ldr	r3, [pc, #64]	@ (80102fc <Calculate_LED_ON+0x88>)
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	0018      	movs	r0, r3
 80102be:	f7f3 f87f 	bl	80033c0 <__aeabi_i2d>
 80102c2:	2200      	movs	r2, #0
 80102c4:	4b0e      	ldr	r3, [pc, #56]	@ (8010300 <Calculate_LED_ON+0x8c>)
 80102c6:	f7f2 f9b9 	bl	800263c <__aeabi_dmul>
 80102ca:	0002      	movs	r2, r0
 80102cc:	000b      	movs	r3, r1
 80102ce:	0020      	movs	r0, r4
 80102d0:	0029      	movs	r1, r5
 80102d2:	f7f1 fa0b 	bl	80016ec <__aeabi_dadd>
 80102d6:	0002      	movs	r2, r0
 80102d8:	000b      	movs	r3, r1
 80102da:	0010      	movs	r0, r2
 80102dc:	0019      	movs	r1, r3
 80102de:	f7f0 f9b5 	bl	800064c <__aeabi_d2uiz>
 80102e2:	0003      	movs	r3, r0
 80102e4:	b29b      	uxth	r3, r3
}
 80102e6:	0018      	movs	r0, r3
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bdb0      	pop	{r4, r5, r7, pc}
 80102ec:	20001e40 	.word	0x20001e40
 80102f0:	00000b53 	.word	0x00000b53
 80102f4:	00000b54 	.word	0x00000b54
 80102f8:	0000125c 	.word	0x0000125c
 80102fc:	00000dee 	.word	0x00000dee
 8010300:	3ff80000 	.word	0x3ff80000

08010304 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8010304:	b590      	push	{r4, r7, lr}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	0004      	movs	r4, r0
 801030c:	0008      	movs	r0, r1
 801030e:	0011      	movs	r1, r2
 8010310:	1dbb      	adds	r3, r7, #6
 8010312:	1c22      	adds	r2, r4, #0
 8010314:	801a      	strh	r2, [r3, #0]
 8010316:	1d3b      	adds	r3, r7, #4
 8010318:	1c02      	adds	r2, r0, #0
 801031a:	801a      	strh	r2, [r3, #0]
 801031c:	1cbb      	adds	r3, r7, #2
 801031e:	1c0a      	adds	r2, r1, #0
 8010320:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8010322:	4b0f      	ldr	r3, [pc, #60]	@ (8010360 <SetStatusLED+0x5c>)
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d107      	bne.n	801033a <SetStatusLED+0x36>
 801032a:	4b0e      	ldr	r3, [pc, #56]	@ (8010364 <SetStatusLED+0x60>)
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d103      	bne.n	801033a <SetStatusLED+0x36>
 8010332:	4b0d      	ldr	r3, [pc, #52]	@ (8010368 <SetStatusLED+0x64>)
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00e      	beq.n	8010358 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 801033a:	2380      	movs	r3, #128	@ 0x80
 801033c:	05db      	lsls	r3, r3, #23
 801033e:	1dba      	adds	r2, r7, #6
 8010340:	8812      	ldrh	r2, [r2, #0]
 8010342:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8010344:	2380      	movs	r3, #128	@ 0x80
 8010346:	05db      	lsls	r3, r3, #23
 8010348:	1d3a      	adds	r2, r7, #4
 801034a:	8812      	ldrh	r2, [r2, #0]
 801034c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 801034e:	2380      	movs	r3, #128	@ 0x80
 8010350:	05db      	lsls	r3, r3, #23
 8010352:	1cba      	adds	r2, r7, #2
 8010354:	8812      	ldrh	r2, [r2, #0]
 8010356:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8010358:	46c0      	nop			@ (mov r8, r8)
 801035a:	46bd      	mov	sp, r7
 801035c:	b003      	add	sp, #12
 801035e:	bd90      	pop	{r4, r7, pc}
 8010360:	20001e2d 	.word	0x20001e2d
 8010364:	200000dc 	.word	0x200000dc
 8010368:	20001e2e 	.word	0x20001e2e

0801036c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 801036c:	b590      	push	{r4, r7, lr}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	0004      	movs	r4, r0
 8010374:	0008      	movs	r0, r1
 8010376:	0011      	movs	r1, r2
 8010378:	1dfb      	adds	r3, r7, #7
 801037a:	1c22      	adds	r2, r4, #0
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	1dbb      	adds	r3, r7, #6
 8010380:	1c02      	adds	r2, r0, #0
 8010382:	701a      	strb	r2, [r3, #0]
 8010384:	1d7b      	adds	r3, r7, #5
 8010386:	1c0a      	adds	r2, r1, #0
 8010388:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 801038a:	4b19      	ldr	r3, [pc, #100]	@ (80103f0 <SetDBLED+0x84>)
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d107      	bne.n	80103a2 <SetDBLED+0x36>
 8010392:	4b18      	ldr	r3, [pc, #96]	@ (80103f4 <SetDBLED+0x88>)
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d103      	bne.n	80103a2 <SetDBLED+0x36>
 801039a:	4b17      	ldr	r3, [pc, #92]	@ (80103f8 <SetDBLED+0x8c>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d022      	beq.n	80103e8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 80103a2:	1dfb      	adds	r3, r7, #7
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2201      	movs	r2, #1
 80103a8:	4053      	eors	r3, r2
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	001a      	movs	r2, r3
 80103ae:	4b13      	ldr	r3, [pc, #76]	@ (80103fc <SetDBLED+0x90>)
 80103b0:	2101      	movs	r1, #1
 80103b2:	0018      	movs	r0, r3
 80103b4:	f003 f8eb 	bl	801358e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 80103b8:	1dbb      	adds	r3, r7, #6
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	2201      	movs	r2, #1
 80103be:	4053      	eors	r3, r2
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	001a      	movs	r2, r3
 80103c4:	2380      	movs	r3, #128	@ 0x80
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	480c      	ldr	r0, [pc, #48]	@ (80103fc <SetDBLED+0x90>)
 80103ca:	0019      	movs	r1, r3
 80103cc:	f003 f8df 	bl	801358e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 80103d0:	1d7b      	adds	r3, r7, #5
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2201      	movs	r2, #1
 80103d6:	4053      	eors	r3, r2
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	001a      	movs	r2, r3
 80103dc:	2380      	movs	r3, #128	@ 0x80
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	4806      	ldr	r0, [pc, #24]	@ (80103fc <SetDBLED+0x90>)
 80103e2:	0019      	movs	r1, r3
 80103e4:	f003 f8d3 	bl	801358e <HAL_GPIO_WritePin>
  }
}
 80103e8:	46c0      	nop			@ (mov r8, r8)
 80103ea:	46bd      	mov	sp, r7
 80103ec:	b003      	add	sp, #12
 80103ee:	bd90      	pop	{r4, r7, pc}
 80103f0:	20001e2d 	.word	0x20001e2d
 80103f4:	200000dc 	.word	0x200000dc
 80103f8:	20001e2e 	.word	0x20001e2e
 80103fc:	50000400 	.word	0x50000400

08010400 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8010400:	b590      	push	{r4, r7, lr}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	0004      	movs	r4, r0
 8010408:	0008      	movs	r0, r1
 801040a:	0011      	movs	r1, r2
 801040c:	1dbb      	adds	r3, r7, #6
 801040e:	1c22      	adds	r2, r4, #0
 8010410:	801a      	strh	r2, [r3, #0]
 8010412:	1d3b      	adds	r3, r7, #4
 8010414:	1c02      	adds	r2, r0, #0
 8010416:	801a      	strh	r2, [r3, #0]
 8010418:	1cbb      	adds	r3, r7, #2
 801041a:	1c0a      	adds	r2, r1, #0
 801041c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 801041e:	4b0e      	ldr	r3, [pc, #56]	@ (8010458 <SetVocLED+0x58>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d107      	bne.n	8010436 <SetVocLED+0x36>
 8010426:	4b0d      	ldr	r3, [pc, #52]	@ (801045c <SetVocLED+0x5c>)
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d103      	bne.n	8010436 <SetVocLED+0x36>
 801042e:	4b0c      	ldr	r3, [pc, #48]	@ (8010460 <SetVocLED+0x60>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00b      	beq.n	801044e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8010436:	4b0b      	ldr	r3, [pc, #44]	@ (8010464 <SetVocLED+0x64>)
 8010438:	1dba      	adds	r2, r7, #6
 801043a:	8812      	ldrh	r2, [r2, #0]
 801043c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 801043e:	4b09      	ldr	r3, [pc, #36]	@ (8010464 <SetVocLED+0x64>)
 8010440:	1d3a      	adds	r2, r7, #4
 8010442:	8812      	ldrh	r2, [r2, #0]
 8010444:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8010446:	4b07      	ldr	r3, [pc, #28]	@ (8010464 <SetVocLED+0x64>)
 8010448:	1cba      	adds	r2, r7, #2
 801044a:	8812      	ldrh	r2, [r2, #0]
 801044c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801044e:	46c0      	nop			@ (mov r8, r8)
 8010450:	46bd      	mov	sp, r7
 8010452:	b003      	add	sp, #12
 8010454:	bd90      	pop	{r4, r7, pc}
 8010456:	46c0      	nop			@ (mov r8, r8)
 8010458:	20001e2d 	.word	0x20001e2d
 801045c:	200000dc 	.word	0x200000dc
 8010460:	20001e2e 	.word	0x20001e2e
 8010464:	40000400 	.word	0x40000400

08010468 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801046c:	4b08      	ldr	r3, [pc, #32]	@ (8010490 <SetMeasurementIndicator+0x28>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d103      	bne.n	801047c <SetMeasurementIndicator+0x14>
 8010474:	4b07      	ldr	r3, [pc, #28]	@ (8010494 <SetMeasurementIndicator+0x2c>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d006      	beq.n	801048a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 801047c:	f7ff fefa 	bl	8010274 <Calculate_LED_ON>
 8010480:	0003      	movs	r3, r0
 8010482:	001a      	movs	r2, r3
 8010484:	2380      	movs	r3, #128	@ 0x80
 8010486:	05db      	lsls	r3, r3, #23
 8010488:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801048a:	46c0      	nop			@ (mov r8, r8)
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	20001e2d 	.word	0x20001e2d
 8010494:	20001e2e 	.word	0x20001e2e

08010498 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801049c:	4b07      	ldr	r3, [pc, #28]	@ (80104bc <ResetMeasurementIndicator+0x24>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d103      	bne.n	80104ac <ResetMeasurementIndicator+0x14>
 80104a4:	4b06      	ldr	r3, [pc, #24]	@ (80104c0 <ResetMeasurementIndicator+0x28>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d004      	beq.n	80104b6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 80104ac:	2380      	movs	r3, #128	@ 0x80
 80104ae:	05db      	lsls	r3, r3, #23
 80104b0:	22fa      	movs	r2, #250	@ 0xfa
 80104b2:	0112      	lsls	r2, r2, #4
 80104b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80104b6:	46c0      	nop			@ (mov r8, r8)
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	20001e2d 	.word	0x20001e2d
 80104c0:	20001e2e 	.word	0x20001e2e

080104c4 <SetMICIndicator>:
void SetMICIndicator(){
 80104c4:	b580      	push	{r7, lr}
 80104c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80104c8:	4b19      	ldr	r3, [pc, #100]	@ (8010530 <SetMICIndicator+0x6c>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <SetMICIndicator+0x14>
 80104d0:	4b18      	ldr	r3, [pc, #96]	@ (8010534 <SetMICIndicator+0x70>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d007      	beq.n	80104e8 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 80104d8:	f7ff fecc 	bl	8010274 <Calculate_LED_ON>
 80104dc:	0003      	movs	r3, r0
 80104de:	001a      	movs	r2, r3
 80104e0:	2380      	movs	r3, #128	@ 0x80
 80104e2:	05db      	lsls	r3, r3, #23
 80104e4:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 80104e6:	e01f      	b.n	8010528 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 80104e8:	4b13      	ldr	r3, [pc, #76]	@ (8010538 <SetMICIndicator+0x74>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	1c18      	adds	r0, r3, #0
 80104ee:	f7f2 ffb9 	bl	8003464 <__aeabi_f2d>
 80104f2:	4a12      	ldr	r2, [pc, #72]	@ (801053c <SetMICIndicator+0x78>)
 80104f4:	4b12      	ldr	r3, [pc, #72]	@ (8010540 <SetMICIndicator+0x7c>)
 80104f6:	f7ef fff5 	bl	80004e4 <__aeabi_dcmpgt>
 80104fa:	1e03      	subs	r3, r0, #0
 80104fc:	d00a      	beq.n	8010514 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 80104fe:	f7ff feb9 	bl	8010274 <Calculate_LED_ON>
 8010502:	0003      	movs	r3, r0
 8010504:	001a      	movs	r2, r3
 8010506:	2380      	movs	r3, #128	@ 0x80
 8010508:	05db      	lsls	r3, r3, #23
 801050a:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 801050c:	4b0d      	ldr	r3, [pc, #52]	@ (8010544 <SetMICIndicator+0x80>)
 801050e:	2202      	movs	r2, #2
 8010510:	701a      	strb	r2, [r3, #0]
}
 8010512:	e009      	b.n	8010528 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8010514:	f7ff feae 	bl	8010274 <Calculate_LED_ON>
 8010518:	0003      	movs	r3, r0
 801051a:	001a      	movs	r2, r3
 801051c:	2380      	movs	r3, #128	@ 0x80
 801051e:	05db      	lsls	r3, r3, #23
 8010520:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8010522:	4b08      	ldr	r3, [pc, #32]	@ (8010544 <SetMICIndicator+0x80>)
 8010524:	2201      	movs	r2, #1
 8010526:	701a      	strb	r2, [r3, #0]
}
 8010528:	46c0      	nop			@ (mov r8, r8)
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	46c0      	nop			@ (mov r8, r8)
 8010530:	20001e2d 	.word	0x20001e2d
 8010534:	20001e2e 	.word	0x20001e2e
 8010538:	20001e3c 	.word	0x20001e3c
 801053c:	9999999a 	.word	0x9999999a
 8010540:	400d9999 	.word	0x400d9999
 8010544:	20001e30 	.word	0x20001e30

08010548 <ResetMICIndicator>:
void ResetMICIndicator(){
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801054c:	4b0f      	ldr	r3, [pc, #60]	@ (801058c <ResetMICIndicator+0x44>)
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d103      	bne.n	801055c <ResetMICIndicator+0x14>
 8010554:	4b0e      	ldr	r3, [pc, #56]	@ (8010590 <ResetMICIndicator+0x48>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d005      	beq.n	8010568 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 801055c:	2380      	movs	r3, #128	@ 0x80
 801055e:	05db      	lsls	r3, r3, #23
 8010560:	22fa      	movs	r2, #250	@ 0xfa
 8010562:	0112      	lsls	r2, r2, #4
 8010564:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8010566:	e00e      	b.n	8010586 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8010568:	4b0a      	ldr	r3, [pc, #40]	@ (8010594 <ResetMICIndicator+0x4c>)
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	2b02      	cmp	r3, #2
 801056e:	d105      	bne.n	801057c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8010570:	2380      	movs	r3, #128	@ 0x80
 8010572:	05db      	lsls	r3, r3, #23
 8010574:	22fa      	movs	r2, #250	@ 0xfa
 8010576:	0112      	lsls	r2, r2, #4
 8010578:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801057a:	e004      	b.n	8010586 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 801057c:	2380      	movs	r3, #128	@ 0x80
 801057e:	05db      	lsls	r3, r3, #23
 8010580:	22fa      	movs	r2, #250	@ 0xfa
 8010582:	0112      	lsls	r2, r2, #4
 8010584:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8010586:	46c0      	nop			@ (mov r8, r8)
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	20001e2d 	.word	0x20001e2d
 8010590:	20001e2e 	.word	0x20001e2e
 8010594:	20001e30 	.word	0x20001e30

08010598 <SetESPIndicator>:
void SetESPIndicator(){
 8010598:	b580      	push	{r7, lr}
 801059a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801059c:	4b08      	ldr	r3, [pc, #32]	@ (80105c0 <SetESPIndicator+0x28>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d103      	bne.n	80105ac <SetESPIndicator+0x14>
 80105a4:	4b07      	ldr	r3, [pc, #28]	@ (80105c4 <SetESPIndicator+0x2c>)
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d006      	beq.n	80105ba <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80105ac:	f7ff fe62 	bl	8010274 <Calculate_LED_ON>
 80105b0:	0003      	movs	r3, r0
 80105b2:	001a      	movs	r2, r3
 80105b4:	2380      	movs	r3, #128	@ 0x80
 80105b6:	05db      	lsls	r3, r3, #23
 80105b8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80105ba:	46c0      	nop			@ (mov r8, r8)
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	20001e2d 	.word	0x20001e2d
 80105c4:	20001e2e 	.word	0x20001e2e

080105c8 <ResetESPIndicator>:
void ResetESPIndicator(){
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80105cc:	4b07      	ldr	r3, [pc, #28]	@ (80105ec <ResetESPIndicator+0x24>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d103      	bne.n	80105dc <ResetESPIndicator+0x14>
 80105d4:	4b06      	ldr	r3, [pc, #24]	@ (80105f0 <ResetESPIndicator+0x28>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d004      	beq.n	80105e6 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 80105dc:	2380      	movs	r3, #128	@ 0x80
 80105de:	05db      	lsls	r3, r3, #23
 80105e0:	22fa      	movs	r2, #250	@ 0xfa
 80105e2:	0112      	lsls	r2, r2, #4
 80105e4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80105e6:	46c0      	nop			@ (mov r8, r8)
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	20001e2d 	.word	0x20001e2d
 80105f0:	20001e2e 	.word	0x20001e2e

080105f4 <SetPMIndicator>:

void SetPMIndicator() {
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80105f8:	4b0f      	ldr	r3, [pc, #60]	@ (8010638 <SetPMIndicator+0x44>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <SetPMIndicator+0x14>
 8010600:	4b0e      	ldr	r3, [pc, #56]	@ (801063c <SetPMIndicator+0x48>)
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d014      	beq.n	8010632 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8010608:	f7ff fe34 	bl	8010274 <Calculate_LED_ON>
 801060c:	0003      	movs	r3, r0
 801060e:	001a      	movs	r2, r3
 8010610:	2380      	movs	r3, #128	@ 0x80
 8010612:	05db      	lsls	r3, r3, #23
 8010614:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8010616:	f7ff fe2d 	bl	8010274 <Calculate_LED_ON>
 801061a:	0003      	movs	r3, r0
 801061c:	001a      	movs	r2, r3
 801061e:	2380      	movs	r3, #128	@ 0x80
 8010620:	05db      	lsls	r3, r3, #23
 8010622:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8010624:	f7ff fe26 	bl	8010274 <Calculate_LED_ON>
 8010628:	0003      	movs	r3, r0
 801062a:	001a      	movs	r2, r3
 801062c:	2380      	movs	r3, #128	@ 0x80
 801062e:	05db      	lsls	r3, r3, #23
 8010630:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8010632:	46c0      	nop			@ (mov r8, r8)
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20001e2d 	.word	0x20001e2d
 801063c:	20001e2e 	.word	0x20001e2e

08010640 <ResetPMIndicator>:

void ResetPMIndicator() {
 8010640:	b580      	push	{r7, lr}
 8010642:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010644:	4b0c      	ldr	r3, [pc, #48]	@ (8010678 <ResetPMIndicator+0x38>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d103      	bne.n	8010654 <ResetPMIndicator+0x14>
 801064c:	4b0b      	ldr	r3, [pc, #44]	@ (801067c <ResetPMIndicator+0x3c>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d00e      	beq.n	8010672 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8010654:	2380      	movs	r3, #128	@ 0x80
 8010656:	05db      	lsls	r3, r3, #23
 8010658:	22fa      	movs	r2, #250	@ 0xfa
 801065a:	0112      	lsls	r2, r2, #4
 801065c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 801065e:	2380      	movs	r3, #128	@ 0x80
 8010660:	05db      	lsls	r3, r3, #23
 8010662:	22fa      	movs	r2, #250	@ 0xfa
 8010664:	0112      	lsls	r2, r2, #4
 8010666:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8010668:	2380      	movs	r3, #128	@ 0x80
 801066a:	05db      	lsls	r3, r3, #23
 801066c:	22fa      	movs	r2, #250	@ 0xfa
 801066e:	0112      	lsls	r2, r2, #4
 8010670:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8010672:	46c0      	nop			@ (mov r8, r8)
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	20001e2d 	.word	0x20001e2d
 801067c:	20001e2e 	.word	0x20001e2e

08010680 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8010684:	23fa      	movs	r3, #250	@ 0xfa
 8010686:	011a      	lsls	r2, r3, #4
 8010688:	23fa      	movs	r3, #250	@ 0xfa
 801068a:	0119      	lsls	r1, r3, #4
 801068c:	23fa      	movs	r3, #250	@ 0xfa
 801068e:	011b      	lsls	r3, r3, #4
 8010690:	0018      	movs	r0, r3
 8010692:	f7ff fe37 	bl	8010304 <SetStatusLED>
  SetDBLED(false,false,false);
 8010696:	2200      	movs	r2, #0
 8010698:	2100      	movs	r1, #0
 801069a:	2000      	movs	r0, #0
 801069c:	f7ff fe66 	bl	801036c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 80106a0:	23fa      	movs	r3, #250	@ 0xfa
 80106a2:	011a      	lsls	r2, r3, #4
 80106a4:	23fa      	movs	r3, #250	@ 0xfa
 80106a6:	0119      	lsls	r1, r3, #4
 80106a8:	23fa      	movs	r3, #250	@ 0xfa
 80106aa:	011b      	lsls	r3, r3, #4
 80106ac:	0018      	movs	r0, r3
 80106ae:	f7ff fea7 	bl	8010400 <SetVocLED>
return;
 80106b2:	46c0      	nop			@ (mov r8, r8)
}
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <SetAllREDLED>:

void SetAllREDLED() {
 80106b8:	b580      	push	{r7, lr}
 80106ba:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 80106bc:	2380      	movs	r3, #128	@ 0x80
 80106be:	05db      	lsls	r3, r3, #23
 80106c0:	4a19      	ldr	r2, [pc, #100]	@ (8010728 <SetAllREDLED+0x70>)
 80106c2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 80106c4:	2380      	movs	r3, #128	@ 0x80
 80106c6:	05db      	lsls	r3, r3, #23
 80106c8:	22fa      	movs	r2, #250	@ 0xfa
 80106ca:	0112      	lsls	r2, r2, #4
 80106cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 80106ce:	2380      	movs	r3, #128	@ 0x80
 80106d0:	05db      	lsls	r3, r3, #23
 80106d2:	22fa      	movs	r2, #250	@ 0xfa
 80106d4:	0112      	lsls	r2, r2, #4
 80106d6:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 80106d8:	4b14      	ldr	r3, [pc, #80]	@ (801072c <SetAllREDLED+0x74>)
 80106da:	4a13      	ldr	r2, [pc, #76]	@ (8010728 <SetAllREDLED+0x70>)
 80106dc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 80106de:	4b13      	ldr	r3, [pc, #76]	@ (801072c <SetAllREDLED+0x74>)
 80106e0:	22fa      	movs	r2, #250	@ 0xfa
 80106e2:	0112      	lsls	r2, r2, #4
 80106e4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 80106e6:	4b11      	ldr	r3, [pc, #68]	@ (801072c <SetAllREDLED+0x74>)
 80106e8:	22fa      	movs	r2, #250	@ 0xfa
 80106ea:	0112      	lsls	r2, r2, #4
 80106ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 80106ee:	4b10      	ldr	r3, [pc, #64]	@ (8010730 <SetAllREDLED+0x78>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	2101      	movs	r1, #1
 80106f4:	0018      	movs	r0, r3
 80106f6:	f002 ff4a 	bl	801358e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 80106fa:	2380      	movs	r3, #128	@ 0x80
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	480c      	ldr	r0, [pc, #48]	@ (8010730 <SetAllREDLED+0x78>)
 8010700:	2201      	movs	r2, #1
 8010702:	0019      	movs	r1, r3
 8010704:	f002 ff43 	bl	801358e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8010708:	2380      	movs	r3, #128	@ 0x80
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	4808      	ldr	r0, [pc, #32]	@ (8010730 <SetAllREDLED+0x78>)
 801070e:	2201      	movs	r2, #1
 8010710:	0019      	movs	r1, r3
 8010712:	f002 ff3c 	bl	801358e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8010716:	23fa      	movs	r3, #250	@ 0xfa
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	0018      	movs	r0, r3
 801071c:	f001 fcb0 	bl	8012080 <HAL_Delay>
}
 8010720:	46c0      	nop			@ (mov r8, r8)
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	46c0      	nop			@ (mov r8, r8)
 8010728:	00000bb8 	.word	0x00000bb8
 801072c:	40000400 	.word	0x40000400
 8010730:	50000400 	.word	0x50000400

08010734 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8010734:	b5b0      	push	{r4, r5, r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	0002      	movs	r2, r0
 801073c:	1dbb      	adds	r3, r7, #6
 801073e:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8010740:	1dbb      	adds	r3, r7, #6
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d05a      	beq.n	80107fe <SetVOCindicator+0xca>
 8010748:	1dbb      	adds	r3, r7, #6
 801074a:	881b      	ldrh	r3, [r3, #0]
 801074c:	2b64      	cmp	r3, #100	@ 0x64
 801074e:	d856      	bhi.n	80107fe <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8010750:	1dbb      	adds	r3, r7, #6
 8010752:	881b      	ldrh	r3, [r3, #0]
 8010754:	0018      	movs	r0, r3
 8010756:	f7f2 fe33 	bl	80033c0 <__aeabi_i2d>
 801075a:	2200      	movs	r2, #0
 801075c:	4b5f      	ldr	r3, [pc, #380]	@ (80108dc <SetVOCindicator+0x1a8>)
 801075e:	f7f1 fb29 	bl	8001db4 <__aeabi_ddiv>
 8010762:	0002      	movs	r2, r0
 8010764:	000b      	movs	r3, r1
 8010766:	2000      	movs	r0, #0
 8010768:	495d      	ldr	r1, [pc, #372]	@ (80108e0 <SetVOCindicator+0x1ac>)
 801076a:	f7f2 fa2f 	bl	8002bcc <__aeabi_dsub>
 801076e:	0002      	movs	r2, r0
 8010770:	000b      	movs	r3, r1
 8010772:	0014      	movs	r4, r2
 8010774:	001d      	movs	r5, r3
 8010776:	4b5b      	ldr	r3, [pc, #364]	@ (80108e4 <SetVOCindicator+0x1b0>)
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	0018      	movs	r0, r3
 801077c:	f7f2 fe20 	bl	80033c0 <__aeabi_i2d>
 8010780:	0002      	movs	r2, r0
 8010782:	000b      	movs	r3, r1
 8010784:	0020      	movs	r0, r4
 8010786:	0029      	movs	r1, r5
 8010788:	f7f1 ff58 	bl	800263c <__aeabi_dmul>
 801078c:	0002      	movs	r2, r0
 801078e:	000b      	movs	r3, r1
 8010790:	0010      	movs	r0, r2
 8010792:	0019      	movs	r1, r3
 8010794:	f7ef ff5a 	bl	800064c <__aeabi_d2uiz>
 8010798:	0003      	movs	r3, r0
 801079a:	b29a      	uxth	r2, r3
 801079c:	4b52      	ldr	r3, [pc, #328]	@ (80108e8 <SetVOCindicator+0x1b4>)
 801079e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 80107a0:	1dbb      	adds	r3, r7, #6
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	0018      	movs	r0, r3
 80107a6:	f7f2 fe0b 	bl	80033c0 <__aeabi_i2d>
 80107aa:	2200      	movs	r2, #0
 80107ac:	4b4b      	ldr	r3, [pc, #300]	@ (80108dc <SetVOCindicator+0x1a8>)
 80107ae:	f7f1 fb01 	bl	8001db4 <__aeabi_ddiv>
 80107b2:	0002      	movs	r2, r0
 80107b4:	000b      	movs	r3, r1
 80107b6:	0014      	movs	r4, r2
 80107b8:	001d      	movs	r5, r3
 80107ba:	4b4a      	ldr	r3, [pc, #296]	@ (80108e4 <SetVOCindicator+0x1b0>)
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	0018      	movs	r0, r3
 80107c0:	f7f2 fdfe 	bl	80033c0 <__aeabi_i2d>
 80107c4:	0002      	movs	r2, r0
 80107c6:	000b      	movs	r3, r1
 80107c8:	0020      	movs	r0, r4
 80107ca:	0029      	movs	r1, r5
 80107cc:	f7f1 ff36 	bl	800263c <__aeabi_dmul>
 80107d0:	0002      	movs	r2, r0
 80107d2:	000b      	movs	r3, r1
 80107d4:	0010      	movs	r0, r2
 80107d6:	0019      	movs	r1, r3
 80107d8:	f7ef ff38 	bl	800064c <__aeabi_d2uiz>
 80107dc:	0003      	movs	r3, r0
 80107de:	b29a      	uxth	r2, r3
 80107e0:	4b42      	ldr	r3, [pc, #264]	@ (80108ec <SetVOCindicator+0x1b8>)
 80107e2:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 80107e4:	4b3f      	ldr	r3, [pc, #252]	@ (80108e4 <SetVOCindicator+0x1b0>)
 80107e6:	881a      	ldrh	r2, [r3, #0]
 80107e8:	4b41      	ldr	r3, [pc, #260]	@ (80108f0 <SetVOCindicator+0x1bc>)
 80107ea:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80107ec:	4b40      	ldr	r3, [pc, #256]	@ (80108f0 <SetVOCindicator+0x1bc>)
 80107ee:	8818      	ldrh	r0, [r3, #0]
 80107f0:	4b3d      	ldr	r3, [pc, #244]	@ (80108e8 <SetVOCindicator+0x1b4>)
 80107f2:	8819      	ldrh	r1, [r3, #0]
 80107f4:	4b3d      	ldr	r3, [pc, #244]	@ (80108ec <SetVOCindicator+0x1b8>)
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	001a      	movs	r2, r3
 80107fa:	f7ff fe01 	bl	8010400 <SetVocLED>
  }
  if(VOCi > 100){
 80107fe:	1dbb      	adds	r3, r7, #6
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	2b64      	cmp	r3, #100	@ 0x64
 8010804:	d966      	bls.n	80108d4 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8010806:	1dbb      	adds	r3, r7, #6
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	0018      	movs	r0, r3
 801080c:	f7f2 fdd8 	bl	80033c0 <__aeabi_i2d>
 8010810:	2200      	movs	r2, #0
 8010812:	4b32      	ldr	r3, [pc, #200]	@ (80108dc <SetVOCindicator+0x1a8>)
 8010814:	f7f2 f9da 	bl	8002bcc <__aeabi_dsub>
 8010818:	0002      	movs	r2, r0
 801081a:	000b      	movs	r3, r1
 801081c:	0010      	movs	r0, r2
 801081e:	0019      	movs	r1, r3
 8010820:	2200      	movs	r2, #0
 8010822:	4b34      	ldr	r3, [pc, #208]	@ (80108f4 <SetVOCindicator+0x1c0>)
 8010824:	f7f1 fac6 	bl	8001db4 <__aeabi_ddiv>
 8010828:	0002      	movs	r2, r0
 801082a:	000b      	movs	r3, r1
 801082c:	0014      	movs	r4, r2
 801082e:	001d      	movs	r5, r3
 8010830:	4b2c      	ldr	r3, [pc, #176]	@ (80108e4 <SetVOCindicator+0x1b0>)
 8010832:	881b      	ldrh	r3, [r3, #0]
 8010834:	0018      	movs	r0, r3
 8010836:	f7f2 fdc3 	bl	80033c0 <__aeabi_i2d>
 801083a:	0002      	movs	r2, r0
 801083c:	000b      	movs	r3, r1
 801083e:	0020      	movs	r0, r4
 8010840:	0029      	movs	r1, r5
 8010842:	f7f1 fefb 	bl	800263c <__aeabi_dmul>
 8010846:	0002      	movs	r2, r0
 8010848:	000b      	movs	r3, r1
 801084a:	0010      	movs	r0, r2
 801084c:	0019      	movs	r1, r3
 801084e:	f7ef fefd 	bl	800064c <__aeabi_d2uiz>
 8010852:	0003      	movs	r3, r0
 8010854:	b29a      	uxth	r2, r3
 8010856:	4b24      	ldr	r3, [pc, #144]	@ (80108e8 <SetVOCindicator+0x1b4>)
 8010858:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 801085a:	1dbb      	adds	r3, r7, #6
 801085c:	881b      	ldrh	r3, [r3, #0]
 801085e:	0018      	movs	r0, r3
 8010860:	f7f2 fdae 	bl	80033c0 <__aeabi_i2d>
 8010864:	2200      	movs	r2, #0
 8010866:	4b1d      	ldr	r3, [pc, #116]	@ (80108dc <SetVOCindicator+0x1a8>)
 8010868:	f7f2 f9b0 	bl	8002bcc <__aeabi_dsub>
 801086c:	0002      	movs	r2, r0
 801086e:	000b      	movs	r3, r1
 8010870:	0010      	movs	r0, r2
 8010872:	0019      	movs	r1, r3
 8010874:	2200      	movs	r2, #0
 8010876:	4b1f      	ldr	r3, [pc, #124]	@ (80108f4 <SetVOCindicator+0x1c0>)
 8010878:	f7f1 fa9c 	bl	8001db4 <__aeabi_ddiv>
 801087c:	0002      	movs	r2, r0
 801087e:	000b      	movs	r3, r1
 8010880:	2000      	movs	r0, #0
 8010882:	4917      	ldr	r1, [pc, #92]	@ (80108e0 <SetVOCindicator+0x1ac>)
 8010884:	f7f2 f9a2 	bl	8002bcc <__aeabi_dsub>
 8010888:	0002      	movs	r2, r0
 801088a:	000b      	movs	r3, r1
 801088c:	0014      	movs	r4, r2
 801088e:	001d      	movs	r5, r3
 8010890:	4b14      	ldr	r3, [pc, #80]	@ (80108e4 <SetVOCindicator+0x1b0>)
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	0018      	movs	r0, r3
 8010896:	f7f2 fd93 	bl	80033c0 <__aeabi_i2d>
 801089a:	0002      	movs	r2, r0
 801089c:	000b      	movs	r3, r1
 801089e:	0020      	movs	r0, r4
 80108a0:	0029      	movs	r1, r5
 80108a2:	f7f1 fecb 	bl	800263c <__aeabi_dmul>
 80108a6:	0002      	movs	r2, r0
 80108a8:	000b      	movs	r3, r1
 80108aa:	0010      	movs	r0, r2
 80108ac:	0019      	movs	r1, r3
 80108ae:	f7ef fecd 	bl	800064c <__aeabi_d2uiz>
 80108b2:	0003      	movs	r3, r0
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	4b0e      	ldr	r3, [pc, #56]	@ (80108f0 <SetVOCindicator+0x1bc>)
 80108b8:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 80108ba:	4b0a      	ldr	r3, [pc, #40]	@ (80108e4 <SetVOCindicator+0x1b0>)
 80108bc:	881a      	ldrh	r2, [r3, #0]
 80108be:	4b0b      	ldr	r3, [pc, #44]	@ (80108ec <SetVOCindicator+0x1b8>)
 80108c0:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80108c2:	4b0b      	ldr	r3, [pc, #44]	@ (80108f0 <SetVOCindicator+0x1bc>)
 80108c4:	8818      	ldrh	r0, [r3, #0]
 80108c6:	4b08      	ldr	r3, [pc, #32]	@ (80108e8 <SetVOCindicator+0x1b4>)
 80108c8:	8819      	ldrh	r1, [r3, #0]
 80108ca:	4b08      	ldr	r3, [pc, #32]	@ (80108ec <SetVOCindicator+0x1b8>)
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	001a      	movs	r2, r3
 80108d0:	f7ff fd96 	bl	8010400 <SetVocLED>
  }

}
 80108d4:	46c0      	nop			@ (mov r8, r8)
 80108d6:	46bd      	mov	sp, r7
 80108d8:	b002      	add	sp, #8
 80108da:	bdb0      	pop	{r4, r5, r7, pc}
 80108dc:	40590000 	.word	0x40590000
 80108e0:	3ff00000 	.word	0x3ff00000
 80108e4:	200000de 	.word	0x200000de
 80108e8:	20001e42 	.word	0x20001e42
 80108ec:	20001e44 	.word	0x20001e44
 80108f0:	20001e46 	.word	0x20001e46
 80108f4:	40790000 	.word	0x40790000

080108f8 <powerCheck>:

Battery_Status powerCheck(){
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 80108fe:	f7f7 fa87 	bl	8007e10 <Check_USB_PowerOn>
 8010902:	0003      	movs	r3, r0
 8010904:	001a      	movs	r2, r3
 8010906:	2301      	movs	r3, #1
 8010908:	4053      	eors	r3, r2
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d005      	beq.n	801091c <powerCheck+0x24>
    status = batteryChargeCheck();
 8010910:	1dfc      	adds	r4, r7, #7
 8010912:	f7ff fc55 	bl	80101c0 <batteryChargeCheck>
 8010916:	0003      	movs	r3, r0
 8010918:	7023      	strb	r3, [r4, #0]
 801091a:	e002      	b.n	8010922 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 801091c:	1dfb      	adds	r3, r7, #7
 801091e:	2204      	movs	r2, #4
 8010920:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8010922:	1dfb      	adds	r3, r7, #7
 8010924:	781b      	ldrb	r3, [r3, #0]
}
 8010926:	0018      	movs	r0, r3
 8010928:	46bd      	mov	sp, r7
 801092a:	b003      	add	sp, #12
 801092c:	bd90      	pop	{r4, r7, pc}
	...

08010930 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	0002      	movs	r2, r0
 8010938:	1dfb      	adds	r3, r7, #7
 801093a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 801093c:	1dfb      	adds	r3, r7, #7
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b04      	cmp	r3, #4
 8010942:	d105      	bne.n	8010950 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 8010944:	4a18      	ldr	r2, [pc, #96]	@ (80109a8 <powerDisplay+0x78>)
 8010946:	4b19      	ldr	r3, [pc, #100]	@ (80109ac <powerDisplay+0x7c>)
 8010948:	0019      	movs	r1, r3
 801094a:	2003      	movs	r0, #3
 801094c:	f000 ff42 	bl	80117d4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 8010950:	1dfb      	adds	r3, r7, #7
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	2b03      	cmp	r3, #3
 8010956:	d105      	bne.n	8010964 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8010958:	4a15      	ldr	r2, [pc, #84]	@ (80109b0 <powerDisplay+0x80>)
 801095a:	4b14      	ldr	r3, [pc, #80]	@ (80109ac <powerDisplay+0x7c>)
 801095c:	0019      	movs	r1, r3
 801095e:	2003      	movs	r0, #3
 8010960:	f000 ff38 	bl	80117d4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8010964:	1dfb      	adds	r3, r7, #7
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b02      	cmp	r3, #2
 801096a:	d105      	bne.n	8010978 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 801096c:	4a11      	ldr	r2, [pc, #68]	@ (80109b4 <powerDisplay+0x84>)
 801096e:	4b0f      	ldr	r3, [pc, #60]	@ (80109ac <powerDisplay+0x7c>)
 8010970:	0019      	movs	r1, r3
 8010972:	2003      	movs	r0, #3
 8010974:	f000 ff2e 	bl	80117d4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8010978:	1dfb      	adds	r3, r7, #7
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d105      	bne.n	801098c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8010980:	4a0d      	ldr	r2, [pc, #52]	@ (80109b8 <powerDisplay+0x88>)
 8010982:	4b0a      	ldr	r3, [pc, #40]	@ (80109ac <powerDisplay+0x7c>)
 8010984:	0019      	movs	r1, r3
 8010986:	2003      	movs	r0, #3
 8010988:	f000 ff24 	bl	80117d4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 801098c:	1dfb      	adds	r3, r7, #7
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d105      	bne.n	80109a0 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8010994:	4a09      	ldr	r2, [pc, #36]	@ (80109bc <powerDisplay+0x8c>)
 8010996:	4b05      	ldr	r3, [pc, #20]	@ (80109ac <powerDisplay+0x7c>)
 8010998:	0019      	movs	r1, r3
 801099a:	2003      	movs	r0, #3
 801099c:	f000 ff1a 	bl	80117d4 <CreateLine>
  }
}
 80109a0:	46c0      	nop			@ (mov r8, r8)
 80109a2:	46bd      	mov	sp, r7
 80109a4:	b002      	add	sp, #8
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	0802a914 	.word	0x0802a914
 80109ac:	0802a938 	.word	0x0802a938
 80109b0:	0802a93c 	.word	0x0802a93c
 80109b4:	0802a954 	.word	0x0802a954
 80109b8:	0802a974 	.word	0x0802a974
 80109bc:	0802a98c 	.word	0x0802a98c

080109c0 <configCheck>:

void configCheck(){
 80109c0:	b590      	push	{r4, r7, lr}
 80109c2:	b083      	sub	sp, #12
 80109c4:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 80109c6:	f7f7 fa32 	bl	8007e2e <BootButton_Pressed>
 80109ca:	1e03      	subs	r3, r0, #0
 80109cc:	d007      	beq.n	80109de <configCheck+0x1e>
 80109ce:	f7f7 fa3f 	bl	8007e50 <UserButton_Pressed>
 80109d2:	1e03      	subs	r3, r0, #0
 80109d4:	d003      	beq.n	80109de <configCheck+0x1e>
    configSet = true;
 80109d6:	4bb2      	ldr	r3, [pc, #712]	@ (8010ca0 <configCheck+0x2e0>)
 80109d8:	2201      	movs	r2, #1
 80109da:	701a      	strb	r2, [r3, #0]
 80109dc:	e00a      	b.n	80109f4 <configCheck+0x34>
  }
  else{
    configSet = false;
 80109de:	4bb0      	ldr	r3, [pc, #704]	@ (8010ca0 <configCheck+0x2e0>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 80109e4:	f001 fb42 	bl	801206c <HAL_GetTick>
 80109e8:	0003      	movs	r3, r0
 80109ea:	22fa      	movs	r2, #250	@ 0xfa
 80109ec:	00d2      	lsls	r2, r2, #3
 80109ee:	189a      	adds	r2, r3, r2
 80109f0:	4bac      	ldr	r3, [pc, #688]	@ (8010ca4 <configCheck+0x2e4>)
 80109f2:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80109f4:	4baa      	ldr	r3, [pc, #680]	@ (8010ca0 <configCheck+0x2e0>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00d      	beq.n	8010a18 <configCheck+0x58>
 80109fc:	4ba9      	ldr	r3, [pc, #676]	@ (8010ca4 <configCheck+0x2e4>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	0018      	movs	r0, r3
 8010a02:	f000 fe91 	bl	8011728 <TimestampIsReached>
 8010a06:	1e03      	subs	r3, r0, #0
 8010a08:	d006      	beq.n	8010a18 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8010a0a:	f7f3 fe79 	bl	8004700 <SetConfigMode>
    SetDBLED(true, true, true);
 8010a0e:	2201      	movs	r2, #1
 8010a10:	2101      	movs	r1, #1
 8010a12:	2001      	movs	r0, #1
 8010a14:	f7ff fcaa 	bl	801036c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8010a18:	f7f7 fa09 	bl	8007e2e <BootButton_Pressed>
 8010a1c:	0003      	movs	r3, r0
 8010a1e:	001a      	movs	r2, r3
 8010a20:	2301      	movs	r3, #1
 8010a22:	4053      	eors	r3, r2
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d054      	beq.n	8010ad4 <configCheck+0x114>
 8010a2a:	f7f7 fa11 	bl	8007e50 <UserButton_Pressed>
 8010a2e:	1e03      	subs	r3, r0, #0
 8010a30:	d050      	beq.n	8010ad4 <configCheck+0x114>
 8010a32:	4b9d      	ldr	r3, [pc, #628]	@ (8010ca8 <configCheck+0x2e8>)
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2201      	movs	r2, #1
 8010a38:	4053      	eors	r3, r2
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d049      	beq.n	8010ad4 <configCheck+0x114>
 8010a40:	f7f3 fe7e 	bl	8004740 <GetReconfigMode>
 8010a44:	0003      	movs	r3, r0
 8010a46:	001a      	movs	r2, r3
 8010a48:	2301      	movs	r3, #1
 8010a4a:	4053      	eors	r3, r2
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d040      	beq.n	8010ad4 <configCheck+0x114>
    SetLEDsOff();
 8010a52:	f7ff fe15 	bl	8010680 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8010a56:	4a95      	ldr	r2, [pc, #596]	@ (8010cac <configCheck+0x2ec>)
 8010a58:	4994      	ldr	r1, [pc, #592]	@ (8010cac <configCheck+0x2ec>)
 8010a5a:	4b94      	ldr	r3, [pc, #592]	@ (8010cac <configCheck+0x2ec>)
 8010a5c:	0018      	movs	r0, r3
 8010a5e:	f7ff fccf 	bl	8010400 <SetVocLED>
    HAL_Delay(1500);
 8010a62:	4b93      	ldr	r3, [pc, #588]	@ (8010cb0 <configCheck+0x2f0>)
 8010a64:	0018      	movs	r0, r3
 8010a66:	f001 fb0b 	bl	8012080 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8010a6a:	23fa      	movs	r3, #250	@ 0xfa
 8010a6c:	011a      	lsls	r2, r3, #4
 8010a6e:	23fa      	movs	r3, #250	@ 0xfa
 8010a70:	0119      	lsls	r1, r3, #4
 8010a72:	23fa      	movs	r3, #250	@ 0xfa
 8010a74:	011b      	lsls	r3, r3, #4
 8010a76:	0018      	movs	r0, r3
 8010a78:	f7ff fcc2 	bl	8010400 <SetVocLED>
    userToggle = !userToggle;
 8010a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8010cb4 <configCheck+0x2f4>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	1e5a      	subs	r2, r3, #1
 8010a82:	4193      	sbcs	r3, r2
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2201      	movs	r2, #1
 8010a88:	4053      	eors	r3, r2
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	1c1a      	adds	r2, r3, #0
 8010a8e:	2301      	movs	r3, #1
 8010a90:	4013      	ands	r3, r2
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	4b87      	ldr	r3, [pc, #540]	@ (8010cb4 <configCheck+0x2f4>)
 8010a96:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8010a98:	4b86      	ldr	r3, [pc, #536]	@ (8010cb4 <configCheck+0x2f4>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d001      	beq.n	8010aa4 <configCheck+0xe4>
      EnabledConnectedDevices();
 8010aa0:	f7fa ff92 	bl	800b9c8 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8010aa4:	4b83      	ldr	r3, [pc, #524]	@ (8010cb4 <configCheck+0x2f4>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <configCheck+0xf0>
 8010aac:	4b82      	ldr	r3, [pc, #520]	@ (8010cb8 <configCheck+0x2f8>)
 8010aae:	e000      	b.n	8010ab2 <configCheck+0xf2>
 8010ab0:	4b82      	ldr	r3, [pc, #520]	@ (8010cbc <configCheck+0x2fc>)
 8010ab2:	4a83      	ldr	r2, [pc, #524]	@ (8010cc0 <configCheck+0x300>)
 8010ab4:	4983      	ldr	r1, [pc, #524]	@ (8010cc4 <configCheck+0x304>)
 8010ab6:	2003      	movs	r0, #3
 8010ab8:	f000 fe8c 	bl	80117d4 <CreateLine>
    userbuttonHeld = true;
 8010abc:	4b7a      	ldr	r3, [pc, #488]	@ (8010ca8 <configCheck+0x2e8>)
 8010abe:	2201      	movs	r2, #1
 8010ac0:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8010ac2:	f001 fad3 	bl	801206c <HAL_GetTick>
 8010ac6:	0003      	movs	r3, r0
 8010ac8:	22fa      	movs	r2, #250	@ 0xfa
 8010aca:	00d2      	lsls	r2, r2, #3
 8010acc:	189a      	adds	r2, r3, r2
 8010ace:	4b7e      	ldr	r3, [pc, #504]	@ (8010cc8 <configCheck+0x308>)
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	e002      	b.n	8010ada <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 8010ad4:	4b74      	ldr	r3, [pc, #464]	@ (8010ca8 <configCheck+0x2e8>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8010ada:	f7f7 f9a8 	bl	8007e2e <BootButton_Pressed>
 8010ade:	0003      	movs	r3, r0
 8010ae0:	001a      	movs	r2, r3
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	4053      	eors	r3, r2
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d100      	bne.n	8010aee <configCheck+0x12e>
 8010aec:	e0a4      	b.n	8010c38 <configCheck+0x278>
 8010aee:	4b6e      	ldr	r3, [pc, #440]	@ (8010ca8 <configCheck+0x2e8>)
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d100      	bne.n	8010af8 <configCheck+0x138>
 8010af6:	e09f      	b.n	8010c38 <configCheck+0x278>
 8010af8:	4b73      	ldr	r3, [pc, #460]	@ (8010cc8 <configCheck+0x308>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	0018      	movs	r0, r3
 8010afe:	f000 fe13 	bl	8011728 <TimestampIsReached>
 8010b02:	1e03      	subs	r3, r0, #0
 8010b04:	d100      	bne.n	8010b08 <configCheck+0x148>
 8010b06:	e097      	b.n	8010c38 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010b08:	f7fa fbf8 	bl	800b2fc <GetPMSensorPresence>
 8010b0c:	1e03      	subs	r3, r0, #0
 8010b0e:	d100      	bne.n	8010b12 <configCheck+0x152>
 8010b10:	e082      	b.n	8010c18 <configCheck+0x258>
 8010b12:	4b6e      	ldr	r3, [pc, #440]	@ (8010ccc <configCheck+0x30c>)
 8010b14:	791b      	ldrb	r3, [r3, #4]
 8010b16:	2b34      	cmp	r3, #52	@ 0x34
 8010b18:	d004      	beq.n	8010b24 <configCheck+0x164>
 8010b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8010ccc <configCheck+0x30c>)
 8010b1c:	791b      	ldrb	r3, [r3, #4]
 8010b1e:	2b35      	cmp	r3, #53	@ 0x35
 8010b20:	d000      	beq.n	8010b24 <configCheck+0x164>
 8010b22:	e079      	b.n	8010c18 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8010b24:	4b6a      	ldr	r3, [pc, #424]	@ (8010cd0 <configCheck+0x310>)
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	1e5a      	subs	r2, r3, #1
 8010b2a:	4193      	sbcs	r3, r2
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	2201      	movs	r2, #1
 8010b30:	4053      	eors	r3, r2
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	1c1a      	adds	r2, r3, #0
 8010b36:	2301      	movs	r3, #1
 8010b38:	4013      	ands	r3, r2
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	4b64      	ldr	r3, [pc, #400]	@ (8010cd0 <configCheck+0x310>)
 8010b3e:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8010b40:	4b63      	ldr	r3, [pc, #396]	@ (8010cd0 <configCheck+0x310>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d005      	beq.n	8010b54 <configCheck+0x194>
 8010b48:	1dbc      	adds	r4, r7, #6
 8010b4a:	f7ff fb93 	bl	8010274 <Calculate_LED_ON>
 8010b4e:	0003      	movs	r3, r0
 8010b50:	8023      	strh	r3, [r4, #0]
 8010b52:	e003      	b.n	8010b5c <configCheck+0x19c>
        else color = 4000;
 8010b54:	1dbb      	adds	r3, r7, #6
 8010b56:	22fa      	movs	r2, #250	@ 0xfa
 8010b58:	0112      	lsls	r2, r2, #4
 8010b5a:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8010b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8010cd0 <configCheck+0x310>)
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d001      	beq.n	8010b68 <configCheck+0x1a8>
 8010b64:	4b5b      	ldr	r3, [pc, #364]	@ (8010cd4 <configCheck+0x314>)
 8010b66:	e000      	b.n	8010b6a <configCheck+0x1aa>
 8010b68:	4b5b      	ldr	r3, [pc, #364]	@ (8010cd8 <configCheck+0x318>)
 8010b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8010cdc <configCheck+0x31c>)
 8010b6c:	495c      	ldr	r1, [pc, #368]	@ (8010ce0 <configCheck+0x320>)
 8010b6e:	2002      	movs	r0, #2
 8010b70:	f000 fe30 	bl	80117d4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8010b74:	1d7b      	adds	r3, r7, #5
 8010b76:	2200      	movs	r2, #0
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	e028      	b.n	8010bce <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8010b7c:	f7ff fb7a 	bl	8010274 <Calculate_LED_ON>
 8010b80:	0003      	movs	r3, r0
 8010b82:	001a      	movs	r2, r3
 8010b84:	4b57      	ldr	r3, [pc, #348]	@ (8010ce4 <configCheck+0x324>)
 8010b86:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8010b88:	4b56      	ldr	r3, [pc, #344]	@ (8010ce4 <configCheck+0x324>)
 8010b8a:	1dba      	adds	r2, r7, #6
 8010b8c:	8812      	ldrh	r2, [r2, #0]
 8010b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8010b90:	4b54      	ldr	r3, [pc, #336]	@ (8010ce4 <configCheck+0x324>)
 8010b92:	1dba      	adds	r2, r7, #6
 8010b94:	8812      	ldrh	r2, [r2, #0]
 8010b96:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010b98:	23c8      	movs	r3, #200	@ 0xc8
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	0018      	movs	r0, r3
 8010b9e:	f001 fa6f 	bl	8012080 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8010ba2:	4b50      	ldr	r3, [pc, #320]	@ (8010ce4 <configCheck+0x324>)
 8010ba4:	22fa      	movs	r2, #250	@ 0xfa
 8010ba6:	0112      	lsls	r2, r2, #4
 8010ba8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8010baa:	4b4e      	ldr	r3, [pc, #312]	@ (8010ce4 <configCheck+0x324>)
 8010bac:	22fa      	movs	r2, #250	@ 0xfa
 8010bae:	0112      	lsls	r2, r2, #4
 8010bb0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8010bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8010ce4 <configCheck+0x324>)
 8010bb4:	22fa      	movs	r2, #250	@ 0xfa
 8010bb6:	0112      	lsls	r2, r2, #4
 8010bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010bba:	23c8      	movs	r3, #200	@ 0xc8
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	0018      	movs	r0, r3
 8010bc0:	f001 fa5e 	bl	8012080 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8010bc4:	1d7b      	adds	r3, r7, #5
 8010bc6:	781a      	ldrb	r2, [r3, #0]
 8010bc8:	1d7b      	adds	r3, r7, #5
 8010bca:	3201      	adds	r2, #1
 8010bcc:	701a      	strb	r2, [r3, #0]
 8010bce:	1d7b      	adds	r3, r7, #5
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d9d2      	bls.n	8010b7c <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8010bd6:	4b37      	ldr	r3, [pc, #220]	@ (8010cb4 <configCheck+0x2f4>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	1e5a      	subs	r2, r3, #1
 8010bdc:	4193      	sbcs	r3, r2
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	2201      	movs	r2, #1
 8010be2:	4053      	eors	r3, r2
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	1c1a      	adds	r2, r3, #0
 8010be8:	2301      	movs	r3, #1
 8010bea:	4013      	ands	r3, r2
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	4b31      	ldr	r3, [pc, #196]	@ (8010cb4 <configCheck+0x2f4>)
 8010bf0:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8010bf2:	4b30      	ldr	r3, [pc, #192]	@ (8010cb4 <configCheck+0x2f4>)
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <configCheck+0x23e>
 8010bfa:	4b36      	ldr	r3, [pc, #216]	@ (8010cd4 <configCheck+0x314>)
 8010bfc:	e000      	b.n	8010c00 <configCheck+0x240>
 8010bfe:	4b36      	ldr	r3, [pc, #216]	@ (8010cd8 <configCheck+0x318>)
 8010c00:	4a39      	ldr	r2, [pc, #228]	@ (8010ce8 <configCheck+0x328>)
 8010c02:	4937      	ldr	r1, [pc, #220]	@ (8010ce0 <configCheck+0x320>)
 8010c04:	2002      	movs	r0, #2
 8010c06:	f000 fde5 	bl	80117d4 <CreateLine>
      if (usbPluggedIn) {
 8010c0a:	4b38      	ldr	r3, [pc, #224]	@ (8010cec <configCheck+0x32c>)
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d009      	beq.n	8010c26 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8010c12:	f7fc f84b 	bl	800ccac <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010c16:	e006      	b.n	8010c26 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8010c18:	4a35      	ldr	r2, [pc, #212]	@ (8010cf0 <configCheck+0x330>)
 8010c1a:	4b31      	ldr	r3, [pc, #196]	@ (8010ce0 <configCheck+0x320>)
 8010c1c:	0019      	movs	r1, r3
 8010c1e:	2002      	movs	r0, #2
 8010c20:	f000 fdd8 	bl	80117d4 <CreateLine>
 8010c24:	e000      	b.n	8010c28 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010c26:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8010c28:	46c0      	nop			@ (mov r8, r8)
 8010c2a:	f7f7 f911 	bl	8007e50 <UserButton_Pressed>
 8010c2e:	1e03      	subs	r3, r0, #0
 8010c30:	d1fb      	bne.n	8010c2a <configCheck+0x26a>
    }
    userbuttonHeld = false;
 8010c32:	4b1d      	ldr	r3, [pc, #116]	@ (8010ca8 <configCheck+0x2e8>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8010c38:	f7f7 f8f9 	bl	8007e2e <BootButton_Pressed>
 8010c3c:	0003      	movs	r3, r0
 8010c3e:	001a      	movs	r2, r3
 8010c40:	2301      	movs	r3, #1
 8010c42:	4053      	eors	r3, r2
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00b      	beq.n	8010c62 <configCheck+0x2a2>
 8010c4a:	f7f7 f901 	bl	8007e50 <UserButton_Pressed>
 8010c4e:	0003      	movs	r3, r0
 8010c50:	001a      	movs	r2, r3
 8010c52:	2301      	movs	r3, #1
 8010c54:	4053      	eors	r3, r2
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d002      	beq.n	8010c62 <configCheck+0x2a2>
    userbuttonHeld = false;
 8010c5c:	4b12      	ldr	r3, [pc, #72]	@ (8010ca8 <configCheck+0x2e8>)
 8010c5e:	2200      	movs	r2, #0
 8010c60:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8010c62:	f7f7 f8d5 	bl	8007e10 <Check_USB_PowerOn>
 8010c66:	1e03      	subs	r3, r0, #0
 8010c68:	d003      	beq.n	8010c72 <configCheck+0x2b2>
    usbPluggedIn = true;
 8010c6a:	4b20      	ldr	r3, [pc, #128]	@ (8010cec <configCheck+0x32c>)
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8010c70:	e012      	b.n	8010c98 <configCheck+0x2d8>
    if(!userToggle && !init){
 8010c72:	4b10      	ldr	r3, [pc, #64]	@ (8010cb4 <configCheck+0x2f4>)
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2201      	movs	r2, #1
 8010c78:	4053      	eors	r3, r2
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <configCheck+0x2d2>
 8010c80:	4b1c      	ldr	r3, [pc, #112]	@ (8010cf4 <configCheck+0x334>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2201      	movs	r2, #1
 8010c86:	4053      	eors	r3, r2
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <configCheck+0x2d2>
      SetLEDsOff();
 8010c8e:	f7ff fcf7 	bl	8010680 <SetLEDsOff>
    usbPluggedIn = false;
 8010c92:	4b16      	ldr	r3, [pc, #88]	@ (8010cec <configCheck+0x32c>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	701a      	strb	r2, [r3, #0]
}
 8010c98:	46c0      	nop			@ (mov r8, r8)
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	b003      	add	sp, #12
 8010c9e:	bd90      	pop	{r4, r7, pc}
 8010ca0:	20001e2c 	.word	0x20001e2c
 8010ca4:	20001e34 	.word	0x20001e34
 8010ca8:	20001e2f 	.word	0x20001e2f
 8010cac:	00000bb8 	.word	0x00000bb8
 8010cb0:	000005dc 	.word	0x000005dc
 8010cb4:	20001e2e 	.word	0x20001e2e
 8010cb8:	0802a9b0 	.word	0x0802a9b0
 8010cbc:	0802a9b4 	.word	0x0802a9b4
 8010cc0:	0802a9b8 	.word	0x0802a9b8
 8010cc4:	0802a938 	.word	0x0802a938
 8010cc8:	20001e38 	.word	0x20001e38
 8010ccc:	20000ea0 	.word	0x20000ea0
 8010cd0:	20000e9e 	.word	0x20000e9e
 8010cd4:	0802a9d8 	.word	0x0802a9d8
 8010cd8:	0802a9e0 	.word	0x0802a9e0
 8010cdc:	0802a9ec 	.word	0x0802a9ec
 8010ce0:	0802aa0c 	.word	0x0802aa0c
 8010ce4:	40000400 	.word	0x40000400
 8010ce8:	0802aa10 	.word	0x0802aa10
 8010cec:	20001e2d 	.word	0x20001e2d
 8010cf0:	0802aa28 	.word	0x0802aa28
 8010cf4:	200000dc 	.word	0x200000dc

08010cf8 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8010cfe:	1dfc      	adds	r4, r7, #7
 8010d00:	f7ff fdfa 	bl	80108f8 <powerCheck>
 8010d04:	0003      	movs	r3, r0
 8010d06:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8010d08:	1dfb      	adds	r3, r7, #7
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	0018      	movs	r0, r3
 8010d0e:	f7ff fe0f 	bl	8010930 <powerDisplay>
  return status;
 8010d12:	1dfb      	adds	r3, r7, #7
 8010d14:	781b      	ldrb	r3, [r3, #0]
}
 8010d16:	0018      	movs	r0, r3
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	b003      	add	sp, #12
 8010d1c:	bd90      	pop	{r4, r7, pc}
	...

08010d20 <setuserToggle>:

void setuserToggle(void) {
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8010d24:	f7ff fde8 	bl	80108f8 <powerCheck>
 8010d28:	0003      	movs	r3, r0
 8010d2a:	2b04      	cmp	r3, #4
 8010d2c:	d004      	beq.n	8010d38 <setuserToggle+0x18>
    userToggle = true;
 8010d2e:	4b04      	ldr	r3, [pc, #16]	@ (8010d40 <setuserToggle+0x20>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8010d34:	f7fa fe48 	bl	800b9c8 <EnabledConnectedDevices>
  }
}
 8010d38:	46c0      	nop			@ (mov r8, r8)
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	46c0      	nop			@ (mov r8, r8)
 8010d40:	20001e2e 	.word	0x20001e2e

08010d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d48:	4b07      	ldr	r3, [pc, #28]	@ (8010d68 <HAL_MspInit+0x24>)
 8010d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d4c:	4b06      	ldr	r3, [pc, #24]	@ (8010d68 <HAL_MspInit+0x24>)
 8010d4e:	2101      	movs	r1, #1
 8010d50:	430a      	orrs	r2, r1
 8010d52:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8010d54:	4b04      	ldr	r3, [pc, #16]	@ (8010d68 <HAL_MspInit+0x24>)
 8010d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d58:	4b03      	ldr	r3, [pc, #12]	@ (8010d68 <HAL_MspInit+0x24>)
 8010d5a:	2180      	movs	r1, #128	@ 0x80
 8010d5c:	0549      	lsls	r1, r1, #21
 8010d5e:	430a      	orrs	r2, r1
 8010d60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010d62:	46c0      	nop			@ (mov r8, r8)
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	40021000 	.word	0x40021000

08010d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010d70:	46c0      	nop			@ (mov r8, r8)
 8010d72:	e7fd      	b.n	8010d70 <NMI_Handler+0x4>

08010d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d78:	46c0      	nop			@ (mov r8, r8)
 8010d7a:	e7fd      	b.n	8010d78 <HardFault_Handler+0x4>

08010d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8010d80:	46c0      	nop			@ (mov r8, r8)
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}

08010d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010d86:	b580      	push	{r7, lr}
 8010d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010d8a:	46c0      	nop			@ (mov r8, r8)
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010d94:	f001 f958 	bl	8012048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8010d98:	46c0      	nop			@ (mov r8, r8)
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
	...

08010da0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8010da4:	4b03      	ldr	r3, [pc, #12]	@ (8010db4 <RTC_IRQHandler+0x14>)
 8010da6:	0018      	movs	r0, r3
 8010da8:	f009 f916 	bl	8019fd8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8010dac:	46c0      	nop			@ (mov r8, r8)
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	46c0      	nop			@ (mov r8, r8)
 8010db4:	20000e78 	.word	0x20000e78

08010db8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8010dbc:	2380      	movs	r3, #128	@ 0x80
 8010dbe:	021b      	lsls	r3, r3, #8
 8010dc0:	0018      	movs	r0, r3
 8010dc2:	f002 fc01 	bl	80135c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8010dc6:	46c0      	nop			@ (mov r8, r8)
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8010dd0:	4b05      	ldr	r3, [pc, #20]	@ (8010de8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8010dd2:	0018      	movs	r0, r3
 8010dd4:	f001 ff89 	bl	8012cea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8010dd8:	4b04      	ldr	r3, [pc, #16]	@ (8010dec <DMA1_Channel2_3_IRQHandler+0x20>)
 8010dda:	0018      	movs	r0, r3
 8010ddc:	f001 ff85 	bl	8012cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8010de0:	46c0      	nop			@ (mov r8, r8)
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	46c0      	nop			@ (mov r8, r8)
 8010de8:	20000d10 	.word	0x20000d10
 8010dec:	20000cc8 	.word	0x20000cc8

08010df0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010df4:	4b07      	ldr	r3, [pc, #28]	@ (8010e14 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8010df6:	0018      	movs	r0, r3
 8010df8:	f001 ff77 	bl	8012cea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8010dfc:	4b06      	ldr	r3, [pc, #24]	@ (8010e18 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8010dfe:	0018      	movs	r0, r3
 8010e00:	f001 ff73 	bl	8012cea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8010e04:	4b05      	ldr	r3, [pc, #20]	@ (8010e1c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8010e06:	0018      	movs	r0, r3
 8010e08:	f001 ff6f 	bl	8012cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8010e0c:	46c0      	nop			@ (mov r8, r8)
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	46c0      	nop			@ (mov r8, r8)
 8010e14:	20000d94 	.word	0x20000d94
 8010e18:	20002134 	.word	0x20002134
 8010e1c:	2000217c 	.word	0x2000217c

08010e20 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8010e24:	4b03      	ldr	r3, [pc, #12]	@ (8010e34 <USART4_5_IRQHandler+0x14>)
 8010e26:	0018      	movs	r0, r3
 8010e28:	f009 ffd0 	bl	801adcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8010e2c:	46c0      	nop			@ (mov r8, r8)
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	46c0      	nop			@ (mov r8, r8)
 8010e34:	2000207c 	.word	0x2000207c

08010e38 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8010e3c:	4b09      	ldr	r3, [pc, #36]	@ (8010e64 <I2C1_IRQHandler+0x2c>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	699a      	ldr	r2, [r3, #24]
 8010e42:	23e0      	movs	r3, #224	@ 0xe0
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	4013      	ands	r3, r2
 8010e48:	d004      	beq.n	8010e54 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8010e4a:	4b06      	ldr	r3, [pc, #24]	@ (8010e64 <I2C1_IRQHandler+0x2c>)
 8010e4c:	0018      	movs	r0, r3
 8010e4e:	f003 fad9 	bl	8014404 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8010e52:	e003      	b.n	8010e5c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8010e54:	4b03      	ldr	r3, [pc, #12]	@ (8010e64 <I2C1_IRQHandler+0x2c>)
 8010e56:	0018      	movs	r0, r3
 8010e58:	f003 faba 	bl	80143d0 <HAL_I2C_EV_IRQHandler>
}
 8010e5c:	46c0      	nop			@ (mov r8, r8)
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	46c0      	nop			@ (mov r8, r8)
 8010e64:	20000c20 	.word	0x20000c20

08010e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010e6c:	4b03      	ldr	r3, [pc, #12]	@ (8010e7c <USART1_IRQHandler+0x14>)
 8010e6e:	0018      	movs	r0, r3
 8010e70:	f009 ffac 	bl	801adcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010e74:	46c0      	nop			@ (mov r8, r8)
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	20001fc4 	.word	0x20001fc4

08010e80 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8010e84:	4b03      	ldr	r3, [pc, #12]	@ (8010e94 <USB_IRQHandler+0x14>)
 8010e86:	0018      	movs	r0, r3
 8010e88:	f005 fefc 	bl	8016c84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8010e8c:	46c0      	nop			@ (mov r8, r8)
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	46c0      	nop			@ (mov r8, r8)
 8010e94:	20002f90 	.word	0x20002f90

08010e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
  return 1;
 8010e9c:	2301      	movs	r3, #1
}
 8010e9e:	0018      	movs	r0, r3
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <_kill>:

int _kill(int pid, int sig)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010eae:	f012 fe93 	bl	8023bd8 <__errno>
 8010eb2:	0003      	movs	r3, r0
 8010eb4:	2216      	movs	r2, #22
 8010eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	425b      	negs	r3, r3
}
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	b002      	add	sp, #8
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <_exit>:

void _exit (int status)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010ecc:	2301      	movs	r3, #1
 8010ece:	425a      	negs	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	0011      	movs	r1, r2
 8010ed4:	0018      	movs	r0, r3
 8010ed6:	f7ff ffe5 	bl	8010ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010eda:	46c0      	nop			@ (mov r8, r8)
 8010edc:	e7fd      	b.n	8010eda <_exit+0x16>

08010ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b086      	sub	sp, #24
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	60f8      	str	r0, [r7, #12]
 8010ee6:	60b9      	str	r1, [r7, #8]
 8010ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010eea:	2300      	movs	r3, #0
 8010eec:	617b      	str	r3, [r7, #20]
 8010eee:	e00a      	b.n	8010f06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010ef0:	e000      	b.n	8010ef4 <_read+0x16>
 8010ef2:	bf00      	nop
 8010ef4:	0001      	movs	r1, r0
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	1c5a      	adds	r2, r3, #1
 8010efa:	60ba      	str	r2, [r7, #8]
 8010efc:	b2ca      	uxtb	r2, r1
 8010efe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	3301      	adds	r3, #1
 8010f04:	617b      	str	r3, [r7, #20]
 8010f06:	697a      	ldr	r2, [r7, #20]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	dbf0      	blt.n	8010ef0 <_read+0x12>
  }

  return len;
 8010f0e:	687b      	ldr	r3, [r7, #4]
}
 8010f10:	0018      	movs	r0, r3
 8010f12:	46bd      	mov	sp, r7
 8010f14:	b006      	add	sp, #24
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010f20:	2301      	movs	r3, #1
 8010f22:	425b      	negs	r3, r3
}
 8010f24:	0018      	movs	r0, r3
 8010f26:	46bd      	mov	sp, r7
 8010f28:	b002      	add	sp, #8
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	2280      	movs	r2, #128	@ 0x80
 8010f3a:	0192      	lsls	r2, r2, #6
 8010f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8010f3e:	2300      	movs	r3, #0
}
 8010f40:	0018      	movs	r0, r3
 8010f42:	46bd      	mov	sp, r7
 8010f44:	b002      	add	sp, #8
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_isatty>:

int _isatty(int file)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010f50:	2301      	movs	r3, #1
}
 8010f52:	0018      	movs	r0, r3
 8010f54:	46bd      	mov	sp, r7
 8010f56:	b002      	add	sp, #8
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b084      	sub	sp, #16
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	60f8      	str	r0, [r7, #12]
 8010f62:	60b9      	str	r1, [r7, #8]
 8010f64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	0018      	movs	r0, r3
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	b004      	add	sp, #16
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010f78:	4a14      	ldr	r2, [pc, #80]	@ (8010fcc <_sbrk+0x5c>)
 8010f7a:	4b15      	ldr	r3, [pc, #84]	@ (8010fd0 <_sbrk+0x60>)
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010f84:	4b13      	ldr	r3, [pc, #76]	@ (8010fd4 <_sbrk+0x64>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d102      	bne.n	8010f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010f8c:	4b11      	ldr	r3, [pc, #68]	@ (8010fd4 <_sbrk+0x64>)
 8010f8e:	4a12      	ldr	r2, [pc, #72]	@ (8010fd8 <_sbrk+0x68>)
 8010f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010f92:	4b10      	ldr	r3, [pc, #64]	@ (8010fd4 <_sbrk+0x64>)
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	18d3      	adds	r3, r2, r3
 8010f9a:	693a      	ldr	r2, [r7, #16]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d207      	bcs.n	8010fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010fa0:	f012 fe1a 	bl	8023bd8 <__errno>
 8010fa4:	0003      	movs	r3, r0
 8010fa6:	220c      	movs	r2, #12
 8010fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010faa:	2301      	movs	r3, #1
 8010fac:	425b      	negs	r3, r3
 8010fae:	e009      	b.n	8010fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010fb0:	4b08      	ldr	r3, [pc, #32]	@ (8010fd4 <_sbrk+0x64>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010fb6:	4b07      	ldr	r3, [pc, #28]	@ (8010fd4 <_sbrk+0x64>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	18d2      	adds	r2, r2, r3
 8010fbe:	4b05      	ldr	r3, [pc, #20]	@ (8010fd4 <_sbrk+0x64>)
 8010fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
}
 8010fc4:	0018      	movs	r0, r3
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	b006      	add	sp, #24
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	20005000 	.word	0x20005000
 8010fd0:	00000400 	.word	0x00000400
 8010fd4:	20001e48 	.word	0x20001e48
 8010fd8:	200035f0 	.word	0x200035f0

08010fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010fe0:	46c0      	nop			@ (mov r8, r8)
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b086      	sub	sp, #24
 8010fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010fee:	2310      	movs	r3, #16
 8010ff0:	18fb      	adds	r3, r7, r3
 8010ff2:	0018      	movs	r0, r3
 8010ff4:	2308      	movs	r3, #8
 8010ff6:	001a      	movs	r2, r3
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	f012 fd49 	bl	8023a90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010ffe:	003b      	movs	r3, r7
 8011000:	0018      	movs	r0, r3
 8011002:	2310      	movs	r3, #16
 8011004:	001a      	movs	r2, r3
 8011006:	2100      	movs	r1, #0
 8011008:	f012 fd42 	bl	8023a90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801100c:	4b2e      	ldr	r3, [pc, #184]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 801100e:	2280      	movs	r2, #128	@ 0x80
 8011010:	05d2      	lsls	r2, r2, #23
 8011012:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8011014:	4b2c      	ldr	r3, [pc, #176]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011016:	2200      	movs	r2, #0
 8011018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801101a:	4b2b      	ldr	r3, [pc, #172]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 801101c:	2200      	movs	r2, #0
 801101e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8011020:	4b29      	ldr	r3, [pc, #164]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011022:	4a2a      	ldr	r2, [pc, #168]	@ (80110cc <MX_TIM2_Init+0xe4>)
 8011024:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011026:	4b28      	ldr	r3, [pc, #160]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011028:	2200      	movs	r2, #0
 801102a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801102c:	4b26      	ldr	r3, [pc, #152]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 801102e:	2200      	movs	r2, #0
 8011030:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8011032:	4b25      	ldr	r3, [pc, #148]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011034:	0018      	movs	r0, r3
 8011036:	f009 f8dd 	bl	801a1f4 <HAL_TIM_PWM_Init>
 801103a:	1e03      	subs	r3, r0, #0
 801103c:	d001      	beq.n	8011042 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 801103e:	f7fa f90b 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011042:	2110      	movs	r1, #16
 8011044:	187b      	adds	r3, r7, r1
 8011046:	2200      	movs	r2, #0
 8011048:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801104a:	187b      	adds	r3, r7, r1
 801104c:	2200      	movs	r2, #0
 801104e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011050:	187a      	adds	r2, r7, r1
 8011052:	4b1d      	ldr	r3, [pc, #116]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011054:	0011      	movs	r1, r2
 8011056:	0018      	movs	r0, r3
 8011058:	f009 fbea 	bl	801a830 <HAL_TIMEx_MasterConfigSynchronization>
 801105c:	1e03      	subs	r3, r0, #0
 801105e:	d001      	beq.n	8011064 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8011060:	f7fa f8fa 	bl	800b258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011064:	003b      	movs	r3, r7
 8011066:	2260      	movs	r2, #96	@ 0x60
 8011068:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801106a:	003b      	movs	r3, r7
 801106c:	2200      	movs	r2, #0
 801106e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011070:	003b      	movs	r3, r7
 8011072:	2200      	movs	r2, #0
 8011074:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011076:	003b      	movs	r3, r7
 8011078:	2200      	movs	r2, #0
 801107a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801107c:	0039      	movs	r1, r7
 801107e:	4b12      	ldr	r3, [pc, #72]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011080:	2200      	movs	r2, #0
 8011082:	0018      	movs	r0, r3
 8011084:	f009 f988 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 8011088:	1e03      	subs	r3, r0, #0
 801108a:	d001      	beq.n	8011090 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 801108c:	f7fa f8e4 	bl	800b258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011090:	0039      	movs	r1, r7
 8011092:	4b0d      	ldr	r3, [pc, #52]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 8011094:	2208      	movs	r2, #8
 8011096:	0018      	movs	r0, r3
 8011098:	f009 f97e 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 801109c:	1e03      	subs	r3, r0, #0
 801109e:	d001      	beq.n	80110a4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80110a0:	f7fa f8da 	bl	800b258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80110a4:	0039      	movs	r1, r7
 80110a6:	4b08      	ldr	r3, [pc, #32]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 80110a8:	220c      	movs	r2, #12
 80110aa:	0018      	movs	r0, r3
 80110ac:	f009 f974 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 80110b0:	1e03      	subs	r3, r0, #0
 80110b2:	d001      	beq.n	80110b8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80110b4:	f7fa f8d0 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80110b8:	4b03      	ldr	r3, [pc, #12]	@ (80110c8 <MX_TIM2_Init+0xe0>)
 80110ba:	0018      	movs	r0, r3
 80110bc:	f000 f8fe 	bl	80112bc <HAL_TIM_MspPostInit>

}
 80110c0:	46c0      	nop			@ (mov r8, r8)
 80110c2:	46bd      	mov	sp, r7
 80110c4:	b006      	add	sp, #24
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	20001e4c 	.word	0x20001e4c
 80110cc:	0000ffff 	.word	0x0000ffff

080110d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80110d6:	2310      	movs	r3, #16
 80110d8:	18fb      	adds	r3, r7, r3
 80110da:	0018      	movs	r0, r3
 80110dc:	2308      	movs	r3, #8
 80110de:	001a      	movs	r2, r3
 80110e0:	2100      	movs	r1, #0
 80110e2:	f012 fcd5 	bl	8023a90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80110e6:	003b      	movs	r3, r7
 80110e8:	0018      	movs	r0, r3
 80110ea:	2310      	movs	r3, #16
 80110ec:	001a      	movs	r2, r3
 80110ee:	2100      	movs	r1, #0
 80110f0:	f012 fcce 	bl	8023a90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80110f4:	4b32      	ldr	r3, [pc, #200]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 80110f6:	4a33      	ldr	r2, [pc, #204]	@ (80111c4 <MX_TIM3_Init+0xf4>)
 80110f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80110fa:	4b31      	ldr	r3, [pc, #196]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011100:	4b2f      	ldr	r3, [pc, #188]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 8011102:	2200      	movs	r2, #0
 8011104:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8011106:	4b2e      	ldr	r3, [pc, #184]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 8011108:	4a2f      	ldr	r2, [pc, #188]	@ (80111c8 <MX_TIM3_Init+0xf8>)
 801110a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801110c:	4b2c      	ldr	r3, [pc, #176]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 801110e:	2200      	movs	r2, #0
 8011110:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011112:	4b2b      	ldr	r3, [pc, #172]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 8011114:	2200      	movs	r2, #0
 8011116:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8011118:	4b29      	ldr	r3, [pc, #164]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 801111a:	0018      	movs	r0, r3
 801111c:	f009 f86a 	bl	801a1f4 <HAL_TIM_PWM_Init>
 8011120:	1e03      	subs	r3, r0, #0
 8011122:	d001      	beq.n	8011128 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8011124:	f7fa f898 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011128:	2110      	movs	r1, #16
 801112a:	187b      	adds	r3, r7, r1
 801112c:	2200      	movs	r2, #0
 801112e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011130:	187b      	adds	r3, r7, r1
 8011132:	2200      	movs	r2, #0
 8011134:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011136:	187a      	adds	r2, r7, r1
 8011138:	4b21      	ldr	r3, [pc, #132]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 801113a:	0011      	movs	r1, r2
 801113c:	0018      	movs	r0, r3
 801113e:	f009 fb77 	bl	801a830 <HAL_TIMEx_MasterConfigSynchronization>
 8011142:	1e03      	subs	r3, r0, #0
 8011144:	d001      	beq.n	801114a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8011146:	f7fa f887 	bl	800b258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801114a:	003b      	movs	r3, r7
 801114c:	2260      	movs	r2, #96	@ 0x60
 801114e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8011150:	003b      	movs	r3, r7
 8011152:	2200      	movs	r2, #0
 8011154:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011156:	003b      	movs	r3, r7
 8011158:	2200      	movs	r2, #0
 801115a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801115c:	003b      	movs	r3, r7
 801115e:	2200      	movs	r2, #0
 8011160:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011162:	0039      	movs	r1, r7
 8011164:	4b16      	ldr	r3, [pc, #88]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 8011166:	2200      	movs	r2, #0
 8011168:	0018      	movs	r0, r3
 801116a:	f009 f915 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 801116e:	1e03      	subs	r3, r0, #0
 8011170:	d001      	beq.n	8011176 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8011172:	f7fa f871 	bl	800b258 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8011176:	4b12      	ldr	r3, [pc, #72]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 8011178:	2104      	movs	r1, #4
 801117a:	0018      	movs	r0, r3
 801117c:	f009 fbb6 	bl	801a8ec <HAL_TIMEx_RemapConfig>
 8011180:	1e03      	subs	r3, r0, #0
 8011182:	d001      	beq.n	8011188 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8011184:	f7fa f868 	bl	800b258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011188:	0039      	movs	r1, r7
 801118a:	4b0d      	ldr	r3, [pc, #52]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 801118c:	2204      	movs	r2, #4
 801118e:	0018      	movs	r0, r3
 8011190:	f009 f902 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 8011194:	1e03      	subs	r3, r0, #0
 8011196:	d001      	beq.n	801119c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8011198:	f7fa f85e 	bl	800b258 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801119c:	0039      	movs	r1, r7
 801119e:	4b08      	ldr	r3, [pc, #32]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 80111a0:	2208      	movs	r2, #8
 80111a2:	0018      	movs	r0, r3
 80111a4:	f009 f8f8 	bl	801a398 <HAL_TIM_PWM_ConfigChannel>
 80111a8:	1e03      	subs	r3, r0, #0
 80111aa:	d001      	beq.n	80111b0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80111ac:	f7fa f854 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80111b0:	4b03      	ldr	r3, [pc, #12]	@ (80111c0 <MX_TIM3_Init+0xf0>)
 80111b2:	0018      	movs	r0, r3
 80111b4:	f000 f882 	bl	80112bc <HAL_TIM_MspPostInit>

}
 80111b8:	46c0      	nop			@ (mov r8, r8)
 80111ba:	46bd      	mov	sp, r7
 80111bc:	b006      	add	sp, #24
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	20001e8c 	.word	0x20001e8c
 80111c4:	40000400 	.word	0x40000400
 80111c8:	0000ffff 	.word	0x0000ffff

080111cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80111d2:	003b      	movs	r3, r7
 80111d4:	0018      	movs	r0, r3
 80111d6:	2308      	movs	r3, #8
 80111d8:	001a      	movs	r2, r3
 80111da:	2100      	movs	r1, #0
 80111dc:	f012 fc58 	bl	8023a90 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80111e0:	4b15      	ldr	r3, [pc, #84]	@ (8011238 <MX_TIM6_Init+0x6c>)
 80111e2:	4a16      	ldr	r2, [pc, #88]	@ (801123c <MX_TIM6_Init+0x70>)
 80111e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 80111e6:	4b14      	ldr	r3, [pc, #80]	@ (8011238 <MX_TIM6_Init+0x6c>)
 80111e8:	220a      	movs	r2, #10
 80111ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80111ec:	4b12      	ldr	r3, [pc, #72]	@ (8011238 <MX_TIM6_Init+0x6c>)
 80111ee:	2200      	movs	r2, #0
 80111f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80111f2:	4b11      	ldr	r3, [pc, #68]	@ (8011238 <MX_TIM6_Init+0x6c>)
 80111f4:	4a12      	ldr	r2, [pc, #72]	@ (8011240 <MX_TIM6_Init+0x74>)
 80111f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80111f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011238 <MX_TIM6_Init+0x6c>)
 80111fa:	2200      	movs	r2, #0
 80111fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80111fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011238 <MX_TIM6_Init+0x6c>)
 8011200:	0018      	movs	r0, r3
 8011202:	f008 ff4f 	bl	801a0a4 <HAL_TIM_Base_Init>
 8011206:	1e03      	subs	r3, r0, #0
 8011208:	d001      	beq.n	801120e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 801120a:	f7fa f825 	bl	800b258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801120e:	003b      	movs	r3, r7
 8011210:	2200      	movs	r2, #0
 8011212:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011214:	003b      	movs	r3, r7
 8011216:	2200      	movs	r2, #0
 8011218:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801121a:	003a      	movs	r2, r7
 801121c:	4b06      	ldr	r3, [pc, #24]	@ (8011238 <MX_TIM6_Init+0x6c>)
 801121e:	0011      	movs	r1, r2
 8011220:	0018      	movs	r0, r3
 8011222:	f009 fb05 	bl	801a830 <HAL_TIMEx_MasterConfigSynchronization>
 8011226:	1e03      	subs	r3, r0, #0
 8011228:	d001      	beq.n	801122e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 801122a:	f7fa f815 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801122e:	46c0      	nop			@ (mov r8, r8)
 8011230:	46bd      	mov	sp, r7
 8011232:	b002      	add	sp, #8
 8011234:	bd80      	pop	{r7, pc}
 8011236:	46c0      	nop			@ (mov r8, r8)
 8011238:	20001ecc 	.word	0x20001ecc
 801123c:	40001000 	.word	0x40001000
 8011240:	0000ffff 	.word	0x0000ffff

08011244 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	2380      	movs	r3, #128	@ 0x80
 8011252:	05db      	lsls	r3, r3, #23
 8011254:	429a      	cmp	r2, r3
 8011256:	d106      	bne.n	8011266 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011258:	4b0a      	ldr	r3, [pc, #40]	@ (8011284 <HAL_TIM_PWM_MspInit+0x40>)
 801125a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801125c:	4b09      	ldr	r3, [pc, #36]	@ (8011284 <HAL_TIM_PWM_MspInit+0x40>)
 801125e:	2101      	movs	r1, #1
 8011260:	430a      	orrs	r2, r1
 8011262:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8011264:	e00a      	b.n	801127c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4a07      	ldr	r2, [pc, #28]	@ (8011288 <HAL_TIM_PWM_MspInit+0x44>)
 801126c:	4293      	cmp	r3, r2
 801126e:	d105      	bne.n	801127c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011270:	4b04      	ldr	r3, [pc, #16]	@ (8011284 <HAL_TIM_PWM_MspInit+0x40>)
 8011272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011274:	4b03      	ldr	r3, [pc, #12]	@ (8011284 <HAL_TIM_PWM_MspInit+0x40>)
 8011276:	2102      	movs	r1, #2
 8011278:	430a      	orrs	r2, r1
 801127a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801127c:	46c0      	nop			@ (mov r8, r8)
 801127e:	46bd      	mov	sp, r7
 8011280:	b002      	add	sp, #8
 8011282:	bd80      	pop	{r7, pc}
 8011284:	40021000 	.word	0x40021000
 8011288:	40000400 	.word	0x40000400

0801128c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4a06      	ldr	r2, [pc, #24]	@ (80112b4 <HAL_TIM_Base_MspInit+0x28>)
 801129a:	4293      	cmp	r3, r2
 801129c:	d105      	bne.n	80112aa <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801129e:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <HAL_TIM_Base_MspInit+0x2c>)
 80112a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112a2:	4b05      	ldr	r3, [pc, #20]	@ (80112b8 <HAL_TIM_Base_MspInit+0x2c>)
 80112a4:	2110      	movs	r1, #16
 80112a6:	430a      	orrs	r2, r1
 80112a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80112aa:	46c0      	nop			@ (mov r8, r8)
 80112ac:	46bd      	mov	sp, r7
 80112ae:	b002      	add	sp, #8
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	46c0      	nop			@ (mov r8, r8)
 80112b4:	40001000 	.word	0x40001000
 80112b8:	40021000 	.word	0x40021000

080112bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b08b      	sub	sp, #44	@ 0x2c
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112c4:	2414      	movs	r4, #20
 80112c6:	193b      	adds	r3, r7, r4
 80112c8:	0018      	movs	r0, r3
 80112ca:	2314      	movs	r3, #20
 80112cc:	001a      	movs	r2, r3
 80112ce:	2100      	movs	r1, #0
 80112d0:	f012 fbde 	bl	8023a90 <memset>
  if(timHandle->Instance==TIM2)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	2380      	movs	r3, #128	@ 0x80
 80112da:	05db      	lsls	r3, r3, #23
 80112dc:	429a      	cmp	r2, r3
 80112de:	d123      	bne.n	8011328 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80112e0:	4b27      	ldr	r3, [pc, #156]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 80112e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112e4:	4b26      	ldr	r3, [pc, #152]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 80112e6:	2101      	movs	r1, #1
 80112e8:	430a      	orrs	r2, r1
 80112ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80112ec:	4b24      	ldr	r3, [pc, #144]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 80112ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f0:	2201      	movs	r2, #1
 80112f2:	4013      	ands	r3, r2
 80112f4:	613b      	str	r3, [r7, #16]
 80112f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80112f8:	0021      	movs	r1, r4
 80112fa:	187b      	adds	r3, r7, r1
 80112fc:	220d      	movs	r2, #13
 80112fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011300:	187b      	adds	r3, r7, r1
 8011302:	2202      	movs	r2, #2
 8011304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011306:	187b      	adds	r3, r7, r1
 8011308:	2200      	movs	r2, #0
 801130a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801130c:	187b      	adds	r3, r7, r1
 801130e:	2200      	movs	r2, #0
 8011310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8011312:	187b      	adds	r3, r7, r1
 8011314:	2202      	movs	r2, #2
 8011316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011318:	187a      	adds	r2, r7, r1
 801131a:	23a0      	movs	r3, #160	@ 0xa0
 801131c:	05db      	lsls	r3, r3, #23
 801131e:	0011      	movs	r1, r2
 8011320:	0018      	movs	r0, r3
 8011322:	f001 ff99 	bl	8013258 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8011326:	e027      	b.n	8011378 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a15      	ldr	r2, [pc, #84]	@ (8011384 <HAL_TIM_MspPostInit+0xc8>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d122      	bne.n	8011378 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011332:	4b13      	ldr	r3, [pc, #76]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 8011334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011336:	4b12      	ldr	r3, [pc, #72]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 8011338:	2104      	movs	r1, #4
 801133a:	430a      	orrs	r2, r1
 801133c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801133e:	4b10      	ldr	r3, [pc, #64]	@ (8011380 <HAL_TIM_MspPostInit+0xc4>)
 8011340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011342:	2204      	movs	r2, #4
 8011344:	4013      	ands	r3, r2
 8011346:	60fb      	str	r3, [r7, #12]
 8011348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 801134a:	2114      	movs	r1, #20
 801134c:	187b      	adds	r3, r7, r1
 801134e:	22e0      	movs	r2, #224	@ 0xe0
 8011350:	0052      	lsls	r2, r2, #1
 8011352:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011354:	187b      	adds	r3, r7, r1
 8011356:	2202      	movs	r2, #2
 8011358:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801135a:	187b      	adds	r3, r7, r1
 801135c:	2200      	movs	r2, #0
 801135e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011360:	187b      	adds	r3, r7, r1
 8011362:	2200      	movs	r2, #0
 8011364:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011366:	187b      	adds	r3, r7, r1
 8011368:	2202      	movs	r2, #2
 801136a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801136c:	187b      	adds	r3, r7, r1
 801136e:	4a06      	ldr	r2, [pc, #24]	@ (8011388 <HAL_TIM_MspPostInit+0xcc>)
 8011370:	0019      	movs	r1, r3
 8011372:	0010      	movs	r0, r2
 8011374:	f001 ff70 	bl	8013258 <HAL_GPIO_Init>
}
 8011378:	46c0      	nop			@ (mov r8, r8)
 801137a:	46bd      	mov	sp, r7
 801137c:	b00b      	add	sp, #44	@ 0x2c
 801137e:	bd90      	pop	{r4, r7, pc}
 8011380:	40021000 	.word	0x40021000
 8011384:	40000400 	.word	0x40000400
 8011388:	50000800 	.word	0x50000800

0801138c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8011390:	4b17      	ldr	r3, [pc, #92]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 8011392:	4a18      	ldr	r2, [pc, #96]	@ (80113f4 <MX_LPUART1_UART_Init+0x68>)
 8011394:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8011396:	4b16      	ldr	r3, [pc, #88]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 8011398:	22e1      	movs	r2, #225	@ 0xe1
 801139a:	0252      	lsls	r2, r2, #9
 801139c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801139e:	4b14      	ldr	r3, [pc, #80]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80113a4:	4b12      	ldr	r3, [pc, #72]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113a6:	2200      	movs	r2, #0
 80113a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80113aa:	4b11      	ldr	r3, [pc, #68]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80113b0:	4b0f      	ldr	r3, [pc, #60]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113b2:	220c      	movs	r2, #12
 80113b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80113b6:	4b0e      	ldr	r3, [pc, #56]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80113bc:	4b0c      	ldr	r3, [pc, #48]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113be:	2200      	movs	r2, #0
 80113c0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80113c2:	4b0b      	ldr	r3, [pc, #44]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113c4:	2218      	movs	r2, #24
 80113c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80113c8:	4b09      	ldr	r3, [pc, #36]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113ca:	2280      	movs	r2, #128	@ 0x80
 80113cc:	0212      	lsls	r2, r2, #8
 80113ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80113d0:	4b07      	ldr	r3, [pc, #28]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113d2:	2280      	movs	r2, #128	@ 0x80
 80113d4:	0152      	lsls	r2, r2, #5
 80113d6:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80113d8:	4b05      	ldr	r3, [pc, #20]	@ (80113f0 <MX_LPUART1_UART_Init+0x64>)
 80113da:	0018      	movs	r0, r3
 80113dc:	f009 faa4 	bl	801a928 <HAL_UART_Init>
 80113e0:	1e03      	subs	r3, r0, #0
 80113e2:	d001      	beq.n	80113e8 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80113e4:	f7f9 ff38 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80113e8:	46c0      	nop			@ (mov r8, r8)
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	46c0      	nop			@ (mov r8, r8)
 80113f0:	20001f0c 	.word	0x20001f0c
 80113f4:	40004800 	.word	0x40004800

080113f8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80113fc:	4b14      	ldr	r3, [pc, #80]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 80113fe:	4a15      	ldr	r2, [pc, #84]	@ (8011454 <MX_USART1_UART_Init+0x5c>)
 8011400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011402:	4b13      	ldr	r3, [pc, #76]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011404:	22e1      	movs	r2, #225	@ 0xe1
 8011406:	0252      	lsls	r2, r2, #9
 8011408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801140a:	4b11      	ldr	r3, [pc, #68]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 801140c:	2200      	movs	r2, #0
 801140e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011410:	4b0f      	ldr	r3, [pc, #60]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011412:	2200      	movs	r2, #0
 8011414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8011416:	4b0e      	ldr	r3, [pc, #56]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011418:	2200      	movs	r2, #0
 801141a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801141c:	4b0c      	ldr	r3, [pc, #48]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 801141e:	220c      	movs	r2, #12
 8011420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011422:	4b0b      	ldr	r3, [pc, #44]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011424:	2200      	movs	r2, #0
 8011426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8011428:	4b09      	ldr	r3, [pc, #36]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 801142a:	2200      	movs	r2, #0
 801142c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801142e:	4b08      	ldr	r3, [pc, #32]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011430:	2200      	movs	r2, #0
 8011432:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011434:	4b06      	ldr	r3, [pc, #24]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 8011436:	2200      	movs	r2, #0
 8011438:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801143a:	4b05      	ldr	r3, [pc, #20]	@ (8011450 <MX_USART1_UART_Init+0x58>)
 801143c:	0018      	movs	r0, r3
 801143e:	f009 fa73 	bl	801a928 <HAL_UART_Init>
 8011442:	1e03      	subs	r3, r0, #0
 8011444:	d001      	beq.n	801144a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8011446:	f7f9 ff07 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801144a:	46c0      	nop			@ (mov r8, r8)
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	20001fc4 	.word	0x20001fc4
 8011454:	40013800 	.word	0x40013800

08011458 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 801145c:	4b14      	ldr	r3, [pc, #80]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 801145e:	4a15      	ldr	r2, [pc, #84]	@ (80114b4 <MX_USART4_UART_Init+0x5c>)
 8011460:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8011462:	4b13      	ldr	r3, [pc, #76]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011464:	22e1      	movs	r2, #225	@ 0xe1
 8011466:	0252      	lsls	r2, r2, #9
 8011468:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801146a:	4b11      	ldr	r3, [pc, #68]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 801146c:	2200      	movs	r2, #0
 801146e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8011470:	4b0f      	ldr	r3, [pc, #60]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011472:	2200      	movs	r2, #0
 8011474:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8011476:	4b0e      	ldr	r3, [pc, #56]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011478:	2200      	movs	r2, #0
 801147a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 801147c:	4b0c      	ldr	r3, [pc, #48]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 801147e:	220c      	movs	r2, #12
 8011480:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011482:	4b0b      	ldr	r3, [pc, #44]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011484:	2200      	movs	r2, #0
 8011486:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8011488:	4b09      	ldr	r3, [pc, #36]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 801148a:	2200      	movs	r2, #0
 801148c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801148e:	4b08      	ldr	r3, [pc, #32]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011490:	2200      	movs	r2, #0
 8011492:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011494:	4b06      	ldr	r3, [pc, #24]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 8011496:	2200      	movs	r2, #0
 8011498:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801149a:	4b05      	ldr	r3, [pc, #20]	@ (80114b0 <MX_USART4_UART_Init+0x58>)
 801149c:	0018      	movs	r0, r3
 801149e:	f009 fa43 	bl	801a928 <HAL_UART_Init>
 80114a2:	1e03      	subs	r3, r0, #0
 80114a4:	d001      	beq.n	80114aa <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80114a6:	f7f9 fed7 	bl	800b258 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80114aa:	46c0      	nop			@ (mov r8, r8)
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	2000207c 	.word	0x2000207c
 80114b4:	40004c00 	.word	0x40004c00

080114b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80114b8:	b590      	push	{r4, r7, lr}
 80114ba:	b08d      	sub	sp, #52	@ 0x34
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80114c0:	241c      	movs	r4, #28
 80114c2:	193b      	adds	r3, r7, r4
 80114c4:	0018      	movs	r0, r3
 80114c6:	2314      	movs	r3, #20
 80114c8:	001a      	movs	r2, r3
 80114ca:	2100      	movs	r1, #0
 80114cc:	f012 fae0 	bl	8023a90 <memset>
  if(uartHandle->Instance==LPUART1)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a8b      	ldr	r2, [pc, #556]	@ (8011704 <HAL_UART_MspInit+0x24c>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d129      	bne.n	801152e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80114da:	4b8b      	ldr	r3, [pc, #556]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80114dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114de:	4b8a      	ldr	r3, [pc, #552]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80114e0:	2180      	movs	r1, #128	@ 0x80
 80114e2:	02c9      	lsls	r1, r1, #11
 80114e4:	430a      	orrs	r2, r1
 80114e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80114e8:	4b87      	ldr	r3, [pc, #540]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80114ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ec:	4b86      	ldr	r3, [pc, #536]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80114ee:	2104      	movs	r1, #4
 80114f0:	430a      	orrs	r2, r1
 80114f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80114f4:	4b84      	ldr	r3, [pc, #528]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80114f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f8:	2204      	movs	r2, #4
 80114fa:	4013      	ands	r3, r2
 80114fc:	61bb      	str	r3, [r7, #24]
 80114fe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011500:	0021      	movs	r1, r4
 8011502:	187b      	adds	r3, r7, r1
 8011504:	2203      	movs	r2, #3
 8011506:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011508:	187b      	adds	r3, r7, r1
 801150a:	2202      	movs	r2, #2
 801150c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801150e:	187b      	adds	r3, r7, r1
 8011510:	2200      	movs	r2, #0
 8011512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011514:	187b      	adds	r3, r7, r1
 8011516:	2203      	movs	r2, #3
 8011518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 801151a:	187b      	adds	r3, r7, r1
 801151c:	2206      	movs	r2, #6
 801151e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011520:	187b      	adds	r3, r7, r1
 8011522:	4a7a      	ldr	r2, [pc, #488]	@ (801170c <HAL_UART_MspInit+0x254>)
 8011524:	0019      	movs	r1, r3
 8011526:	0010      	movs	r0, r2
 8011528:	f001 fe96 	bl	8013258 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 801152c:	e0e5      	b.n	80116fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a77      	ldr	r2, [pc, #476]	@ (8011710 <HAL_UART_MspInit+0x258>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d133      	bne.n	80115a0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011538:	4b73      	ldr	r3, [pc, #460]	@ (8011708 <HAL_UART_MspInit+0x250>)
 801153a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801153c:	4b72      	ldr	r3, [pc, #456]	@ (8011708 <HAL_UART_MspInit+0x250>)
 801153e:	2180      	movs	r1, #128	@ 0x80
 8011540:	01c9      	lsls	r1, r1, #7
 8011542:	430a      	orrs	r2, r1
 8011544:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011546:	4b70      	ldr	r3, [pc, #448]	@ (8011708 <HAL_UART_MspInit+0x250>)
 8011548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801154a:	4b6f      	ldr	r3, [pc, #444]	@ (8011708 <HAL_UART_MspInit+0x250>)
 801154c:	2101      	movs	r1, #1
 801154e:	430a      	orrs	r2, r1
 8011550:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011552:	4b6d      	ldr	r3, [pc, #436]	@ (8011708 <HAL_UART_MspInit+0x250>)
 8011554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011556:	2201      	movs	r2, #1
 8011558:	4013      	ands	r3, r2
 801155a:	617b      	str	r3, [r7, #20]
 801155c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801155e:	211c      	movs	r1, #28
 8011560:	187b      	adds	r3, r7, r1
 8011562:	22c0      	movs	r2, #192	@ 0xc0
 8011564:	00d2      	lsls	r2, r2, #3
 8011566:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011568:	187b      	adds	r3, r7, r1
 801156a:	2202      	movs	r2, #2
 801156c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801156e:	187b      	adds	r3, r7, r1
 8011570:	2200      	movs	r2, #0
 8011572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011574:	187b      	adds	r3, r7, r1
 8011576:	2203      	movs	r2, #3
 8011578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 801157a:	187b      	adds	r3, r7, r1
 801157c:	2204      	movs	r2, #4
 801157e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011580:	187a      	adds	r2, r7, r1
 8011582:	23a0      	movs	r3, #160	@ 0xa0
 8011584:	05db      	lsls	r3, r3, #23
 8011586:	0011      	movs	r1, r2
 8011588:	0018      	movs	r0, r3
 801158a:	f001 fe65 	bl	8013258 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801158e:	2200      	movs	r2, #0
 8011590:	2100      	movs	r1, #0
 8011592:	201b      	movs	r0, #27
 8011594:	f001 fa0e 	bl	80129b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011598:	201b      	movs	r0, #27
 801159a:	f001 fa20 	bl	80129de <HAL_NVIC_EnableIRQ>
}
 801159e:	e0ac      	b.n	80116fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a5b      	ldr	r2, [pc, #364]	@ (8011714 <HAL_UART_MspInit+0x25c>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d000      	beq.n	80115ac <HAL_UART_MspInit+0xf4>
 80115aa:	e0a6      	b.n	80116fa <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 80115ac:	4b56      	ldr	r3, [pc, #344]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115b0:	4b55      	ldr	r3, [pc, #340]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115b2:	2180      	movs	r1, #128	@ 0x80
 80115b4:	0309      	lsls	r1, r1, #12
 80115b6:	430a      	orrs	r2, r1
 80115b8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ba:	4b53      	ldr	r3, [pc, #332]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115be:	4b52      	ldr	r3, [pc, #328]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115c0:	2101      	movs	r1, #1
 80115c2:	430a      	orrs	r2, r1
 80115c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80115c6:	4b50      	ldr	r3, [pc, #320]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ca:	2201      	movs	r2, #1
 80115cc:	4013      	ands	r3, r2
 80115ce:	613b      	str	r3, [r7, #16]
 80115d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80115d2:	4b4d      	ldr	r3, [pc, #308]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115d6:	4b4c      	ldr	r3, [pc, #304]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115d8:	2104      	movs	r1, #4
 80115da:	430a      	orrs	r2, r1
 80115dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80115de:	4b4a      	ldr	r3, [pc, #296]	@ (8011708 <HAL_UART_MspInit+0x250>)
 80115e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e2:	2204      	movs	r2, #4
 80115e4:	4013      	ands	r3, r2
 80115e6:	60fb      	str	r3, [r7, #12]
 80115e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80115ea:	241c      	movs	r4, #28
 80115ec:	193b      	adds	r3, r7, r4
 80115ee:	2202      	movs	r2, #2
 80115f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115f2:	193b      	adds	r3, r7, r4
 80115f4:	2202      	movs	r2, #2
 80115f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f8:	193b      	adds	r3, r7, r4
 80115fa:	2200      	movs	r2, #0
 80115fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115fe:	193b      	adds	r3, r7, r4
 8011600:	2203      	movs	r2, #3
 8011602:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8011604:	193b      	adds	r3, r7, r4
 8011606:	2206      	movs	r2, #6
 8011608:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801160a:	193a      	adds	r2, r7, r4
 801160c:	23a0      	movs	r3, #160	@ 0xa0
 801160e:	05db      	lsls	r3, r3, #23
 8011610:	0011      	movs	r1, r2
 8011612:	0018      	movs	r0, r3
 8011614:	f001 fe20 	bl	8013258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011618:	0021      	movs	r1, r4
 801161a:	187b      	adds	r3, r7, r1
 801161c:	2280      	movs	r2, #128	@ 0x80
 801161e:	00d2      	lsls	r2, r2, #3
 8011620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011622:	187b      	adds	r3, r7, r1
 8011624:	2202      	movs	r2, #2
 8011626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011628:	187b      	adds	r3, r7, r1
 801162a:	2200      	movs	r2, #0
 801162c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801162e:	187b      	adds	r3, r7, r1
 8011630:	2203      	movs	r2, #3
 8011632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8011634:	187b      	adds	r3, r7, r1
 8011636:	2206      	movs	r2, #6
 8011638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801163a:	187b      	adds	r3, r7, r1
 801163c:	4a33      	ldr	r2, [pc, #204]	@ (801170c <HAL_UART_MspInit+0x254>)
 801163e:	0019      	movs	r1, r3
 8011640:	0010      	movs	r0, r2
 8011642:	f001 fe09 	bl	8013258 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8011646:	4b34      	ldr	r3, [pc, #208]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011648:	4a34      	ldr	r2, [pc, #208]	@ (801171c <HAL_UART_MspInit+0x264>)
 801164a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 801164c:	4b32      	ldr	r3, [pc, #200]	@ (8011718 <HAL_UART_MspInit+0x260>)
 801164e:	220c      	movs	r2, #12
 8011650:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011652:	4b31      	ldr	r3, [pc, #196]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011654:	2200      	movs	r2, #0
 8011656:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011658:	4b2f      	ldr	r3, [pc, #188]	@ (8011718 <HAL_UART_MspInit+0x260>)
 801165a:	2200      	movs	r2, #0
 801165c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801165e:	4b2e      	ldr	r3, [pc, #184]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011660:	2280      	movs	r2, #128	@ 0x80
 8011662:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011664:	4b2c      	ldr	r3, [pc, #176]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011666:	2200      	movs	r2, #0
 8011668:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801166a:	4b2b      	ldr	r3, [pc, #172]	@ (8011718 <HAL_UART_MspInit+0x260>)
 801166c:	2200      	movs	r2, #0
 801166e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8011670:	4b29      	ldr	r3, [pc, #164]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011672:	2220      	movs	r2, #32
 8011674:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011676:	4b28      	ldr	r3, [pc, #160]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011678:	2200      	movs	r2, #0
 801167a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 801167c:	4b26      	ldr	r3, [pc, #152]	@ (8011718 <HAL_UART_MspInit+0x260>)
 801167e:	0018      	movs	r0, r3
 8011680:	f001 f9ce 	bl	8012a20 <HAL_DMA_Init>
 8011684:	1e03      	subs	r3, r0, #0
 8011686:	d001      	beq.n	801168c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8011688:	f7f9 fde6 	bl	800b258 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4a22      	ldr	r2, [pc, #136]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011690:	675a      	str	r2, [r3, #116]	@ 0x74
 8011692:	4b21      	ldr	r3, [pc, #132]	@ (8011718 <HAL_UART_MspInit+0x260>)
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8011698:	4b21      	ldr	r3, [pc, #132]	@ (8011720 <HAL_UART_MspInit+0x268>)
 801169a:	4a22      	ldr	r2, [pc, #136]	@ (8011724 <HAL_UART_MspInit+0x26c>)
 801169c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801169e:	4b20      	ldr	r3, [pc, #128]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116a0:	220c      	movs	r2, #12
 80116a2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80116a4:	4b1e      	ldr	r3, [pc, #120]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116a6:	2210      	movs	r2, #16
 80116a8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80116aa:	4b1d      	ldr	r3, [pc, #116]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116ac:	2200      	movs	r2, #0
 80116ae:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80116b0:	4b1b      	ldr	r3, [pc, #108]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116b2:	2280      	movs	r2, #128	@ 0x80
 80116b4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80116b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80116bc:	4b18      	ldr	r3, [pc, #96]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116be:	2200      	movs	r2, #0
 80116c0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80116c2:	4b17      	ldr	r3, [pc, #92]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80116c8:	4b15      	ldr	r3, [pc, #84]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80116ce:	4b14      	ldr	r3, [pc, #80]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116d0:	0018      	movs	r0, r3
 80116d2:	f001 f9a5 	bl	8012a20 <HAL_DMA_Init>
 80116d6:	1e03      	subs	r3, r0, #0
 80116d8:	d001      	beq.n	80116de <HAL_UART_MspInit+0x226>
      Error_Handler();
 80116da:	f7f9 fdbd 	bl	800b258 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4a0f      	ldr	r2, [pc, #60]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80116e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011720 <HAL_UART_MspInit+0x268>)
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80116ea:	2200      	movs	r2, #0
 80116ec:	2100      	movs	r1, #0
 80116ee:	200e      	movs	r0, #14
 80116f0:	f001 f960 	bl	80129b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80116f4:	200e      	movs	r0, #14
 80116f6:	f001 f972 	bl	80129de <HAL_NVIC_EnableIRQ>
}
 80116fa:	46c0      	nop			@ (mov r8, r8)
 80116fc:	46bd      	mov	sp, r7
 80116fe:	b00d      	add	sp, #52	@ 0x34
 8011700:	bd90      	pop	{r4, r7, pc}
 8011702:	46c0      	nop			@ (mov r8, r8)
 8011704:	40004800 	.word	0x40004800
 8011708:	40021000 	.word	0x40021000
 801170c:	50000800 	.word	0x50000800
 8011710:	40013800 	.word	0x40013800
 8011714:	40004c00 	.word	0x40004c00
 8011718:	20002134 	.word	0x20002134
 801171c:	4002006c 	.word	0x4002006c
 8011720:	2000217c 	.word	0x2000217c
 8011724:	40020080 	.word	0x40020080

08011728 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8011730:	f000 fc9c 	bl	801206c <HAL_GetTick>
 8011734:	0003      	movs	r3, r0
 8011736:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8011738:	4b1c      	ldr	r3, [pc, #112]	@ (80117ac <TimestampIsReached+0x84>)
 801173a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	429a      	cmp	r2, r3
 8011742:	d307      	bcc.n	8011754 <TimestampIsReached+0x2c>
 8011744:	697a      	ldr	r2, [r7, #20]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	693a      	ldr	r2, [r7, #16]
 801174c:	429a      	cmp	r2, r3
 801174e:	d901      	bls.n	8011754 <TimestampIsReached+0x2c>
 8011750:	2201      	movs	r2, #1
 8011752:	e000      	b.n	8011756 <TimestampIsReached+0x2e>
 8011754:	2200      	movs	r2, #0
 8011756:	230f      	movs	r3, #15
 8011758:	18fb      	adds	r3, r7, r3
 801175a:	701a      	strb	r2, [r3, #0]
 801175c:	781a      	ldrb	r2, [r3, #0]
 801175e:	2101      	movs	r1, #1
 8011760:	400a      	ands	r2, r1
 8011762:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8011764:	697a      	ldr	r2, [r7, #20]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	429a      	cmp	r2, r3
 801176a:	d207      	bcs.n	801177c <TimestampIsReached+0x54>
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	693a      	ldr	r2, [r7, #16]
 8011774:	429a      	cmp	r2, r3
 8011776:	d201      	bcs.n	801177c <TimestampIsReached+0x54>
 8011778:	2201      	movs	r2, #1
 801177a:	e000      	b.n	801177e <TimestampIsReached+0x56>
 801177c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801177e:	200e      	movs	r0, #14
 8011780:	183b      	adds	r3, r7, r0
 8011782:	701a      	strb	r2, [r3, #0]
 8011784:	781a      	ldrb	r2, [r3, #0]
 8011786:	2101      	movs	r1, #1
 8011788:	400a      	ands	r2, r1
 801178a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 801178c:	230f      	movs	r3, #15
 801178e:	18fb      	adds	r3, r7, r3
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d103      	bne.n	801179e <TimestampIsReached+0x76>
 8011796:	183b      	adds	r3, r7, r0
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d001      	beq.n	80117a2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801179e:	2301      	movs	r3, #1
 80117a0:	e000      	b.n	80117a4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	0018      	movs	r0, r3
 80117a6:	46bd      	mov	sp, r7
 80117a8:	b006      	add	sp, #24
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	7fffffff 	.word	0x7fffffff

080117b0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80117b8:	f000 fc58 	bl	801206c <HAL_GetTick>
 80117bc:	0002      	movs	r2, r0
 80117be:	4904      	ldr	r1, [pc, #16]	@ (80117d0 <AddTimestamp+0x20>)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	0018      	movs	r0, r3
 80117c4:	f011 fffe 	bl	80237c4 <siprintf>
}
 80117c8:	46c0      	nop			@ (mov r8, r8)
 80117ca:	46bd      	mov	sp, r7
 80117cc:	b002      	add	sp, #8
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	0802aa5c 	.word	0x0802aa5c

080117d4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80117d4:	b40c      	push	{r2, r3}
 80117d6:	b5b0      	push	{r4, r5, r7, lr}
 80117d8:	b0a4      	sub	sp, #144	@ 0x90
 80117da:	af00      	add	r7, sp, #0
 80117dc:	0002      	movs	r2, r0
 80117de:	6039      	str	r1, [r7, #0]
 80117e0:	1dfb      	adds	r3, r7, #7
 80117e2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80117e4:	4b23      	ldr	r3, [pc, #140]	@ (8011874 <CreateLine+0xa0>)
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	1dfa      	adds	r2, r7, #7
 80117ea:	7812      	ldrb	r2, [r2, #0]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d839      	bhi.n	8011864 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	4921      	ldr	r1, [pc, #132]	@ (8011878 <CreateLine+0xa4>)
 80117f4:	240c      	movs	r4, #12
 80117f6:	193b      	adds	r3, r7, r4
 80117f8:	0018      	movs	r0, r3
 80117fa:	f011 ffe3 	bl	80237c4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80117fe:	4b1d      	ldr	r3, [pc, #116]	@ (8011874 <CreateLine+0xa0>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	2b01      	cmp	r3, #1
 8011804:	d909      	bls.n	801181a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8011806:	193b      	adds	r3, r7, r4
 8011808:	0018      	movs	r0, r3
 801180a:	f7ee fcaf 	bl	800016c <strlen>
 801180e:	0002      	movs	r2, r0
 8011810:	193b      	adds	r3, r7, r4
 8011812:	189b      	adds	r3, r3, r2
 8011814:	0018      	movs	r0, r3
 8011816:	f7ff ffcb 	bl	80117b0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 801181a:	240c      	movs	r4, #12
 801181c:	193b      	adds	r3, r7, r4
 801181e:	0018      	movs	r0, r3
 8011820:	f7ee fca4 	bl	800016c <strlen>
 8011824:	0003      	movs	r3, r0
 8011826:	218c      	movs	r1, #140	@ 0x8c
 8011828:	187a      	adds	r2, r7, r1
 801182a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 801182c:	239c      	movs	r3, #156	@ 0x9c
 801182e:	2508      	movs	r5, #8
 8011830:	195b      	adds	r3, r3, r5
 8011832:	19db      	adds	r3, r3, r7
 8011834:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8011836:	193a      	adds	r2, r7, r4
 8011838:	187b      	adds	r3, r7, r1
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	18d0      	adds	r0, r2, r3
 801183e:	187b      	adds	r3, r7, r1
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2280      	movs	r2, #128	@ 0x80
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	0019      	movs	r1, r3
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	2298      	movs	r2, #152	@ 0x98
 801184c:	1952      	adds	r2, r2, r5
 801184e:	19d2      	adds	r2, r2, r7
 8011850:	6812      	ldr	r2, [r2, #0]
 8011852:	f012 f84f 	bl	80238f4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8011856:	193a      	adds	r2, r7, r4
 8011858:	4b08      	ldr	r3, [pc, #32]	@ (801187c <CreateLine+0xa8>)
 801185a:	0011      	movs	r1, r2
 801185c:	0018      	movs	r0, r3
 801185e:	f011 ff41 	bl	80236e4 <iprintf>
 8011862:	e000      	b.n	8011866 <CreateLine+0x92>
    return;
 8011864:	46c0      	nop			@ (mov r8, r8)
}
 8011866:	46bd      	mov	sp, r7
 8011868:	b024      	add	sp, #144	@ 0x90
 801186a:	bcb0      	pop	{r4, r5, r7}
 801186c:	bc08      	pop	{r3}
 801186e:	b002      	add	sp, #8
 8011870:	4718      	bx	r3
 8011872:	46c0      	nop			@ (mov r8, r8)
 8011874:	200000e4 	.word	0x200000e4
 8011878:	0802aa68 	.word	0x0802aa68
 801187c:	0802aa6c 	.word	0x0802aa6c

08011880 <_write>:

int _write(int fd, void *buf, size_t count) {
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	b29a      	uxth	r2, r3
 8011890:	68b9      	ldr	r1, [r7, #8]
 8011892:	4804      	ldr	r0, [pc, #16]	@ (80118a4 <_write+0x24>)
 8011894:	2364      	movs	r3, #100	@ 0x64
 8011896:	f009 f8ad 	bl	801a9f4 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 801189a:	687b      	ldr	r3, [r7, #4]
}
 801189c:	0018      	movs	r0, r3
 801189e:	46bd      	mov	sp, r7
 80118a0:	b004      	add	sp, #16
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	20001fc4 	.word	0x20001fc4

080118a8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	0002      	movs	r2, r0
 80118b0:	1dfb      	adds	r3, r7, #7
 80118b2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 80118b4:	4b03      	ldr	r3, [pc, #12]	@ (80118c4 <SetVerboseLevel+0x1c>)
 80118b6:	1dfa      	adds	r2, r7, #7
 80118b8:	7812      	ldrb	r2, [r2, #0]
 80118ba:	701a      	strb	r2, [r3, #0]
}
 80118bc:	46c0      	nop			@ (mov r8, r8)
 80118be:	46bd      	mov	sp, r7
 80118c0:	b002      	add	sp, #8
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	200000e4 	.word	0x200000e4

080118c8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 80118c8:	b580      	push	{r7, lr}
 80118ca:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 80118cc:	4b02      	ldr	r3, [pc, #8]	@ (80118d8 <GetVerboseLevel+0x10>)
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	0018      	movs	r0, r3
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	200000e4 	.word	0x200000e4

080118dc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80118e2:	4a0f      	ldr	r2, [pc, #60]	@ (8011920 <BinaryReleaseInfo+0x44>)
 80118e4:	4b0f      	ldr	r3, [pc, #60]	@ (8011924 <BinaryReleaseInfo+0x48>)
 80118e6:	0019      	movs	r1, r3
 80118e8:	2002      	movs	r0, #2
 80118ea:	f7ff ff73 	bl	80117d4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80118ee:	480e      	ldr	r0, [pc, #56]	@ (8011928 <BinaryReleaseInfo+0x4c>)
 80118f0:	4a0e      	ldr	r2, [pc, #56]	@ (801192c <BinaryReleaseInfo+0x50>)
 80118f2:	490c      	ldr	r1, [pc, #48]	@ (8011924 <BinaryReleaseInfo+0x48>)
 80118f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011930 <BinaryReleaseInfo+0x54>)
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	0003      	movs	r3, r0
 80118fa:	2002      	movs	r0, #2
 80118fc:	f7ff ff6a 	bl	80117d4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8011900:	4b0c      	ldr	r3, [pc, #48]	@ (8011934 <BinaryReleaseInfo+0x58>)
 8011902:	4a0d      	ldr	r2, [pc, #52]	@ (8011938 <BinaryReleaseInfo+0x5c>)
 8011904:	4907      	ldr	r1, [pc, #28]	@ (8011924 <BinaryReleaseInfo+0x48>)
 8011906:	2002      	movs	r0, #2
 8011908:	f7ff ff64 	bl	80117d4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 801190c:	4b0b      	ldr	r3, [pc, #44]	@ (801193c <BinaryReleaseInfo+0x60>)
 801190e:	4a0c      	ldr	r2, [pc, #48]	@ (8011940 <BinaryReleaseInfo+0x64>)
 8011910:	4904      	ldr	r1, [pc, #16]	@ (8011924 <BinaryReleaseInfo+0x48>)
 8011912:	2002      	movs	r0, #2
 8011914:	f7ff ff5e 	bl	80117d4 <CreateLine>
}
 8011918:	46c0      	nop			@ (mov r8, r8)
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	46c0      	nop			@ (mov r8, r8)
 8011920:	0802aa74 	.word	0x0802aa74
 8011924:	0802aaa0 	.word	0x0802aaa0
 8011928:	0802aaa4 	.word	0x0802aaa4
 801192c:	0802aab0 	.word	0x0802aab0
 8011930:	0802aac4 	.word	0x0802aac4
 8011934:	0802aad0 	.word	0x0802aad0
 8011938:	0802aadc 	.word	0x0802aadc
 801193c:	0802aae4 	.word	0x0802aae4
 8011940:	0802aaec 	.word	0x0802aaec

08011944 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b084      	sub	sp, #16
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	68f9      	ldr	r1, [r7, #12]
 8011956:	4803      	ldr	r0, [pc, #12]	@ (8011964 <errorHandler+0x20>)
 8011958:	f011 fec4 	bl	80236e4 <iprintf>
//    while (true)
//    {
//    }
}
 801195c:	46c0      	nop			@ (mov r8, r8)
 801195e:	46bd      	mov	sp, r7
 8011960:	b004      	add	sp, #16
 8011962:	bd80      	pop	{r7, pc}
 8011964:	0802ab04 	.word	0x0802ab04

08011968 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8011968:	b590      	push	{r4, r7, lr}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6039      	str	r1, [r7, #0]
 8011970:	0011      	movs	r1, r2
 8011972:	1dfb      	adds	r3, r7, #7
 8011974:	1c02      	adds	r2, r0, #0
 8011976:	701a      	strb	r2, [r3, #0]
 8011978:	1dbb      	adds	r3, r7, #6
 801197a:	1c0a      	adds	r2, r1, #0
 801197c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <ReadRegister+0x40>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00a      	beq.n	801199c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8011986:	4b08      	ldr	r3, [pc, #32]	@ (80119a8 <ReadRegister+0x40>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	1dba      	adds	r2, r7, #6
 801198c:	7814      	ldrb	r4, [r2, #0]
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	1dfa      	adds	r2, r7, #7
 8011992:	7810      	ldrb	r0, [r2, #0]
 8011994:	0022      	movs	r2, r4
 8011996:	4798      	blx	r3
 8011998:	0003      	movs	r3, r0
 801199a:	e000      	b.n	801199e <ReadRegister+0x36>
	}
	return false;
 801199c:	2300      	movs	r3, #0
}
 801199e:	0018      	movs	r0, r3
 80119a0:	46bd      	mov	sp, r7
 80119a2:	b003      	add	sp, #12
 80119a4:	bd90      	pop	{r4, r7, pc}
 80119a6:	46c0      	nop			@ (mov r8, r8)
 80119a8:	200021cc 	.word	0x200021cc

080119ac <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80119ac:	b590      	push	{r4, r7, lr}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6039      	str	r1, [r7, #0]
 80119b4:	0011      	movs	r1, r2
 80119b6:	1dfb      	adds	r3, r7, #7
 80119b8:	1c02      	adds	r2, r0, #0
 80119ba:	701a      	strb	r2, [r3, #0]
 80119bc:	1dbb      	adds	r3, r7, #6
 80119be:	1c0a      	adds	r2, r1, #0
 80119c0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80119c2:	4b0a      	ldr	r3, [pc, #40]	@ (80119ec <WriteRegister+0x40>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00a      	beq.n	80119e0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 80119ca:	4b08      	ldr	r3, [pc, #32]	@ (80119ec <WriteRegister+0x40>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	1dba      	adds	r2, r7, #6
 80119d0:	7814      	ldrb	r4, [r2, #0]
 80119d2:	6839      	ldr	r1, [r7, #0]
 80119d4:	1dfa      	adds	r2, r7, #7
 80119d6:	7810      	ldrb	r0, [r2, #0]
 80119d8:	0022      	movs	r2, r4
 80119da:	4798      	blx	r3
 80119dc:	0003      	movs	r3, r0
 80119de:	e000      	b.n	80119e2 <WriteRegister+0x36>
  }
  return false;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	0018      	movs	r0, r3
 80119e4:	46bd      	mov	sp, r7
 80119e6:	b003      	add	sp, #12
 80119e8:	bd90      	pop	{r4, r7, pc}
 80119ea:	46c0      	nop			@ (mov r8, r8)
 80119ec:	200021d0 	.word	0x200021d0

080119f0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	000a      	movs	r2, r1
 80119fa:	1cfb      	adds	r3, r7, #3
 80119fc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80119fe:	230f      	movs	r3, #15
 8011a00:	18fb      	adds	r3, r7, r3
 8011a02:	22ff      	movs	r2, #255	@ 0xff
 8011a04:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011a06:	230e      	movs	r3, #14
 8011a08:	18fb      	adds	r3, r7, r3
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	701a      	strb	r2, [r3, #0]
 8011a0e:	e037      	b.n	8011a80 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011a10:	230e      	movs	r3, #14
 8011a12:	18fb      	adds	r3, r7, r3
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	18d3      	adds	r3, r2, r3
 8011a1a:	7819      	ldrb	r1, [r3, #0]
 8011a1c:	220f      	movs	r2, #15
 8011a1e:	18bb      	adds	r3, r7, r2
 8011a20:	18ba      	adds	r2, r7, r2
 8011a22:	7812      	ldrb	r2, [r2, #0]
 8011a24:	404a      	eors	r2, r1
 8011a26:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011a28:	230d      	movs	r3, #13
 8011a2a:	18fb      	adds	r3, r7, r3
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	701a      	strb	r2, [r3, #0]
 8011a30:	e01b      	b.n	8011a6a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8011a32:	210f      	movs	r1, #15
 8011a34:	187b      	adds	r3, r7, r1
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	b25b      	sxtb	r3, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	da09      	bge.n	8011a52 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8011a3e:	187b      	adds	r3, r7, r1
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	b25b      	sxtb	r3, r3
 8011a46:	2231      	movs	r2, #49	@ 0x31
 8011a48:	4053      	eors	r3, r2
 8011a4a:	b25a      	sxtb	r2, r3
 8011a4c:	187b      	adds	r3, r7, r1
 8011a4e:	701a      	strb	r2, [r3, #0]
 8011a50:	e005      	b.n	8011a5e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8011a52:	230f      	movs	r3, #15
 8011a54:	18fa      	adds	r2, r7, r3
 8011a56:	18fb      	adds	r3, r7, r3
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	18db      	adds	r3, r3, r3
 8011a5c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011a5e:	210d      	movs	r1, #13
 8011a60:	187b      	adds	r3, r7, r1
 8011a62:	781a      	ldrb	r2, [r3, #0]
 8011a64:	187b      	adds	r3, r7, r1
 8011a66:	3201      	adds	r2, #1
 8011a68:	701a      	strb	r2, [r3, #0]
 8011a6a:	230d      	movs	r3, #13
 8011a6c:	18fb      	adds	r3, r7, r3
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	2b07      	cmp	r3, #7
 8011a72:	d9de      	bls.n	8011a32 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8011a74:	210e      	movs	r1, #14
 8011a76:	187b      	adds	r3, r7, r1
 8011a78:	781a      	ldrb	r2, [r3, #0]
 8011a7a:	187b      	adds	r3, r7, r1
 8011a7c:	3201      	adds	r2, #1
 8011a7e:	701a      	strb	r2, [r3, #0]
 8011a80:	230e      	movs	r3, #14
 8011a82:	18fa      	adds	r2, r7, r3
 8011a84:	1cfb      	adds	r3, r7, #3
 8011a86:	7812      	ldrb	r2, [r2, #0]
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d3c0      	bcc.n	8011a10 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8011a8e:	230f      	movs	r3, #15
 8011a90:	18fb      	adds	r3, r7, r3
 8011a92:	781b      	ldrb	r3, [r3, #0]
}
 8011a94:	0018      	movs	r0, r3
 8011a96:	46bd      	mov	sp, r7
 8011a98:	b004      	add	sp, #16
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad0 <HIDS_Init+0x34>)
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8011aac:	4b09      	ldr	r3, [pc, #36]	@ (8011ad4 <HIDS_Init+0x38>)
 8011aae:	683a      	ldr	r2, [r7, #0]
 8011ab0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8011ab2:	4b09      	ldr	r3, [pc, #36]	@ (8011ad8 <HIDS_Init+0x3c>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	0018      	movs	r0, r3
 8011ab8:	f000 f840 	bl	8011b3c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8011abc:	4b07      	ldr	r3, [pc, #28]	@ (8011adc <HIDS_Init+0x40>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	0018      	movs	r0, r3
 8011ac2:	f000 f82b 	bl	8011b1c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8011ac6:	46c0      	nop			@ (mov r8, r8)
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	b002      	add	sp, #8
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	46c0      	nop			@ (mov r8, r8)
 8011ad0:	200021cc 	.word	0x200021cc
 8011ad4:	200021d0 	.word	0x200021d0
 8011ad8:	200000e6 	.word	0x200000e6
 8011adc:	200000e5 	.word	0x200000e5

08011ae0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8011ae4:	f000 fac2 	bl	801206c <HAL_GetTick>
 8011ae8:	0002      	movs	r2, r0
 8011aea:	4b08      	ldr	r3, [pc, #32]	@ (8011b0c <HIDS_StartMeasurement+0x2c>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	18d2      	adds	r2, r2, r3
 8011af0:	4b07      	ldr	r3, [pc, #28]	@ (8011b10 <HIDS_StartMeasurement+0x30>)
 8011af2:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8011af4:	4b07      	ldr	r3, [pc, #28]	@ (8011b14 <HIDS_StartMeasurement+0x34>)
 8011af6:	2201      	movs	r2, #1
 8011af8:	0019      	movs	r1, r3
 8011afa:	2044      	movs	r0, #68	@ 0x44
 8011afc:	f7ff ff56 	bl	80119ac <WriteRegister>
  MeasurementDone = false;
 8011b00:	4b05      	ldr	r3, [pc, #20]	@ (8011b18 <HIDS_StartMeasurement+0x38>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	701a      	strb	r2, [r3, #0]
}
 8011b06:	46c0      	nop			@ (mov r8, r8)
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	200000ec 	.word	0x200000ec
 8011b10:	200000e8 	.word	0x200000e8
 8011b14:	200000e6 	.word	0x200000e6
 8011b18:	200021e2 	.word	0x200021e2

08011b1c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	0002      	movs	r2, r0
 8011b24:	1dfb      	adds	r3, r7, #7
 8011b26:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8011b28:	4b03      	ldr	r3, [pc, #12]	@ (8011b38 <HIDS_SetHeaterMode+0x1c>)
 8011b2a:	1dfa      	adds	r2, r7, #7
 8011b2c:	7812      	ldrb	r2, [r2, #0]
 8011b2e:	701a      	strb	r2, [r3, #0]
}
 8011b30:	46c0      	nop			@ (mov r8, r8)
 8011b32:	46bd      	mov	sp, r7
 8011b34:	b002      	add	sp, #8
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	200000e5 	.word	0x200000e5

08011b3c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	0002      	movs	r2, r0
 8011b44:	1dfb      	adds	r3, r7, #7
 8011b46:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8011b48:	4b03      	ldr	r3, [pc, #12]	@ (8011b58 <HIDS_SetMeasurementMode+0x1c>)
 8011b4a:	1dfa      	adds	r2, r7, #7
 8011b4c:	7812      	ldrb	r2, [r2, #0]
 8011b4e:	701a      	strb	r2, [r3, #0]
}
 8011b50:	46c0      	nop			@ (mov r8, r8)
 8011b52:	46bd      	mov	sp, r7
 8011b54:	b002      	add	sp, #8
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	200000e6 	.word	0x200000e6

08011b5c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8011b64:	f000 fa82 	bl	801206c <HAL_GetTick>
 8011b68:	0002      	movs	r2, r0
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	18d2      	adds	r2, r2, r3
 8011b6e:	4b03      	ldr	r3, [pc, #12]	@ (8011b7c <setHIDSTimeStamp+0x20>)
 8011b70:	601a      	str	r2, [r3, #0]
}
 8011b72:	46c0      	nop			@ (mov r8, r8)
 8011b74:	46bd      	mov	sp, r7
 8011b76:	b002      	add	sp, #8
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	46c0      	nop			@ (mov r8, r8)
 8011b7c:	200021e4 	.word	0x200021e4

08011b80 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8011b80:	b590      	push	{r4, r7, lr}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	781a      	ldrb	r2, [r3, #0]
 8011b8c:	210c      	movs	r1, #12
 8011b8e:	187b      	adds	r3, r7, r1
 8011b90:	701a      	strb	r2, [r3, #0]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	785a      	ldrb	r2, [r3, #1]
 8011b96:	187b      	adds	r3, r7, r1
 8011b98:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8011b9a:	240f      	movs	r4, #15
 8011b9c:	193b      	adds	r3, r7, r4
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	7892      	ldrb	r2, [r2, #2]
 8011ba2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8011ba4:	187b      	adds	r3, r7, r1
 8011ba6:	2102      	movs	r1, #2
 8011ba8:	0018      	movs	r0, r3
 8011baa:	f7ff ff21 	bl	80119f0 <CalculateCRC>
 8011bae:	0003      	movs	r3, r0
 8011bb0:	001a      	movs	r2, r3
 8011bb2:	193b      	adds	r3, r7, r4
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d007      	beq.n	8011bca <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8011bba:	4a1a      	ldr	r2, [pc, #104]	@ (8011c24 <CheckCRC+0xa4>)
 8011bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8011c28 <CheckCRC+0xa8>)
 8011bbe:	0019      	movs	r1, r3
 8011bc0:	2001      	movs	r0, #1
 8011bc2:	f7ff fe07 	bl	80117d4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e027      	b.n	8011c1a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	78da      	ldrb	r2, [r3, #3]
 8011bce:	2108      	movs	r1, #8
 8011bd0:	187b      	adds	r3, r7, r1
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	791a      	ldrb	r2, [r3, #4]
 8011bd8:	187b      	adds	r3, r7, r1
 8011bda:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8011bdc:	240e      	movs	r4, #14
 8011bde:	193b      	adds	r3, r7, r4
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	7952      	ldrb	r2, [r2, #5]
 8011be4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8011be6:	187b      	adds	r3, r7, r1
 8011be8:	2102      	movs	r1, #2
 8011bea:	0018      	movs	r0, r3
 8011bec:	f7ff ff00 	bl	80119f0 <CalculateCRC>
 8011bf0:	0003      	movs	r3, r0
 8011bf2:	001a      	movs	r2, r3
 8011bf4:	193b      	adds	r3, r7, r4
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d00d      	beq.n	8011c18 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8011bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8011c2c <CheckCRC+0xac>)
 8011bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8011c28 <CheckCRC+0xa8>)
 8011c00:	0019      	movs	r1, r3
 8011c02:	2001      	movs	r0, #1
 8011c04:	f7ff fde6 	bl	80117d4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8011c08:	4a09      	ldr	r2, [pc, #36]	@ (8011c30 <CheckCRC+0xb0>)
 8011c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c34 <CheckCRC+0xb4>)
 8011c0c:	217d      	movs	r1, #125	@ 0x7d
 8011c0e:	0018      	movs	r0, r3
 8011c10:	f7ff fe98 	bl	8011944 <errorHandler>
		return false;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e000      	b.n	8011c1a <CheckCRC+0x9a>
	}
	return true;
 8011c18:	2301      	movs	r3, #1
}
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	b005      	add	sp, #20
 8011c20:	bd90      	pop	{r4, r7, pc}
 8011c22:	46c0      	nop			@ (mov r8, r8)
 8011c24:	0802ab50 	.word	0x0802ab50
 8011c28:	0802ab78 	.word	0x0802ab78
 8011c2c:	0802ab7c 	.word	0x0802ab7c
 8011c30:	0802aba8 	.word	0x0802aba8
 8011c34:	0802b1d8 	.word	0x0802b1d8

08011c38 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8011c3e:	1dbb      	adds	r3, r7, #6
 8011c40:	2289      	movs	r2, #137	@ 0x89
 8011c42:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8011c44:	1dbb      	adds	r3, r7, #6
 8011c46:	2201      	movs	r2, #1
 8011c48:	0019      	movs	r1, r3
 8011c4a:	2044      	movs	r0, #68	@ 0x44
 8011c4c:	f7ff feae 	bl	80119ac <WriteRegister>
	HAL_Delay(30);
 8011c50:	201e      	movs	r0, #30
 8011c52:	f000 fa15 	bl	8012080 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8011c56:	4b14      	ldr	r3, [pc, #80]	@ (8011ca8 <HIDS_DeviceConnected+0x70>)
 8011c58:	2206      	movs	r2, #6
 8011c5a:	0019      	movs	r1, r3
 8011c5c:	2044      	movs	r0, #68	@ 0x44
 8011c5e:	f7ff fe83 	bl	8011968 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011c62:	1dfb      	adds	r3, r7, #7
 8011c64:	2200      	movs	r2, #0
 8011c66:	701a      	strb	r2, [r3, #0]
 8011c68:	e011      	b.n	8011c8e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8011c6a:	1dfb      	adds	r3, r7, #7
 8011c6c:	7818      	ldrb	r0, [r3, #0]
 8011c6e:	1dfb      	adds	r3, r7, #7
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	4a0d      	ldr	r2, [pc, #52]	@ (8011ca8 <HIDS_DeviceConnected+0x70>)
 8011c74:	5cd3      	ldrb	r3, [r2, r3]
 8011c76:	4a0d      	ldr	r2, [pc, #52]	@ (8011cac <HIDS_DeviceConnected+0x74>)
 8011c78:	490d      	ldr	r1, [pc, #52]	@ (8011cb0 <HIDS_DeviceConnected+0x78>)
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	0003      	movs	r3, r0
 8011c7e:	2002      	movs	r0, #2
 8011c80:	f7ff fda8 	bl	80117d4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011c84:	1dfb      	adds	r3, r7, #7
 8011c86:	781a      	ldrb	r2, [r3, #0]
 8011c88:	1dfb      	adds	r3, r7, #7
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	701a      	strb	r2, [r3, #0]
 8011c8e:	1dfb      	adds	r3, r7, #7
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b05      	cmp	r3, #5
 8011c94:	d9e9      	bls.n	8011c6a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8011c96:	4b04      	ldr	r3, [pc, #16]	@ (8011ca8 <HIDS_DeviceConnected+0x70>)
 8011c98:	0018      	movs	r0, r3
 8011c9a:	f7ff ff71 	bl	8011b80 <CheckCRC>
 8011c9e:	0003      	movs	r3, r0
}
 8011ca0:	0018      	movs	r0, r3
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	b002      	add	sp, #8
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	200021d4 	.word	0x200021d4
 8011cac:	0802abc0 	.word	0x0802abc0
 8011cb0:	0802ab4c 	.word	0x0802ab4c

08011cb4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8011cb8:	4b04      	ldr	r3, [pc, #16]	@ (8011ccc <HIDS_MeasurementReady+0x18>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	0018      	movs	r0, r3
 8011cbe:	f7ff fd33 	bl	8011728 <TimestampIsReached>
 8011cc2:	0003      	movs	r3, r0
}
 8011cc4:	0018      	movs	r0, r3
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	46c0      	nop			@ (mov r8, r8)
 8011ccc:	200000e8 	.word	0x200000e8

08011cd0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8011cda:	4b41      	ldr	r3, [pc, #260]	@ (8011de0 <HIDS_GetMeasurementValues+0x110>)
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d001      	beq.n	8011ce6 <HIDS_GetMeasurementValues+0x16>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e077      	b.n	8011dd6 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8011ce6:	f7ff ffe5 	bl	8011cb4 <HIDS_MeasurementReady>
 8011cea:	0003      	movs	r3, r0
 8011cec:	001a      	movs	r2, r3
 8011cee:	2301      	movs	r3, #1
 8011cf0:	4053      	eors	r3, r2
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <HIDS_GetMeasurementValues+0x2c>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	e06c      	b.n	8011dd6 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8011cfc:	4b39      	ldr	r3, [pc, #228]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011cfe:	2206      	movs	r2, #6
 8011d00:	0019      	movs	r1, r3
 8011d02:	2044      	movs	r0, #68	@ 0x44
 8011d04:	f7ff fe30 	bl	8011968 <ReadRegister>
 8011d08:	0003      	movs	r3, r0
 8011d0a:	001a      	movs	r2, r3
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	4053      	eors	r3, r2
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d005      	beq.n	8011d22 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8011d16:	4a34      	ldr	r2, [pc, #208]	@ (8011de8 <HIDS_GetMeasurementValues+0x118>)
 8011d18:	4b34      	ldr	r3, [pc, #208]	@ (8011dec <HIDS_GetMeasurementValues+0x11c>)
 8011d1a:	0019      	movs	r1, r3
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	f7ff fd59 	bl	80117d4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8011d22:	4b30      	ldr	r3, [pc, #192]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011d24:	0018      	movs	r0, r3
 8011d26:	f7ff ff2b 	bl	8011b80 <CheckCRC>
 8011d2a:	0003      	movs	r3, r0
 8011d2c:	001a      	movs	r2, r3
 8011d2e:	2301      	movs	r3, #1
 8011d30:	4053      	eors	r3, r2
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	e04c      	b.n	8011dd6 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8011d3c:	4b29      	ldr	r3, [pc, #164]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	021b      	lsls	r3, r3, #8
 8011d42:	4a28      	ldr	r2, [pc, #160]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011d44:	7852      	ldrb	r2, [r2, #1]
 8011d46:	4313      	orrs	r3, r2
 8011d48:	22af      	movs	r2, #175	@ 0xaf
 8011d4a:	4353      	muls	r3, r2
 8011d4c:	0018      	movs	r0, r3
 8011d4e:	f7f1 fb37 	bl	80033c0 <__aeabi_i2d>
 8011d52:	2200      	movs	r2, #0
 8011d54:	4b26      	ldr	r3, [pc, #152]	@ (8011df0 <HIDS_GetMeasurementValues+0x120>)
 8011d56:	f7f0 f82d 	bl	8001db4 <__aeabi_ddiv>
 8011d5a:	0002      	movs	r2, r0
 8011d5c:	000b      	movs	r3, r1
 8011d5e:	0010      	movs	r0, r2
 8011d60:	0019      	movs	r1, r3
 8011d62:	f7f1 fbc7 	bl	80034f4 <__aeabi_d2f>
 8011d66:	1c03      	adds	r3, r0, #0
 8011d68:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8011d6a:	4922      	ldr	r1, [pc, #136]	@ (8011df4 <HIDS_GetMeasurementValues+0x124>)
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f7ef fa55 	bl	800121c <__aeabi_fsub>
 8011d72:	1c03      	adds	r3, r0, #0
 8011d74:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8011d76:	4b1b      	ldr	r3, [pc, #108]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011d78:	78db      	ldrb	r3, [r3, #3]
 8011d7a:	021b      	lsls	r3, r3, #8
 8011d7c:	4a19      	ldr	r2, [pc, #100]	@ (8011de4 <HIDS_GetMeasurementValues+0x114>)
 8011d7e:	7912      	ldrb	r2, [r2, #4]
 8011d80:	431a      	orrs	r2, r3
 8011d82:	0013      	movs	r3, r2
 8011d84:	015b      	lsls	r3, r3, #5
 8011d86:	1a9b      	subs	r3, r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	189b      	adds	r3, r3, r2
 8011d8c:	0018      	movs	r0, r3
 8011d8e:	f7f1 fb17 	bl	80033c0 <__aeabi_i2d>
 8011d92:	2200      	movs	r2, #0
 8011d94:	4b16      	ldr	r3, [pc, #88]	@ (8011df0 <HIDS_GetMeasurementValues+0x120>)
 8011d96:	f7f0 f80d 	bl	8001db4 <__aeabi_ddiv>
 8011d9a:	0002      	movs	r2, r0
 8011d9c:	000b      	movs	r3, r1
 8011d9e:	0010      	movs	r0, r2
 8011da0:	0019      	movs	r1, r3
 8011da2:	f7f1 fba7 	bl	80034f4 <__aeabi_d2f>
 8011da6:	1c03      	adds	r3, r0, #0
 8011da8:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8011daa:	4913      	ldr	r1, [pc, #76]	@ (8011df8 <HIDS_GetMeasurementValues+0x128>)
 8011dac:	68b8      	ldr	r0, [r7, #8]
 8011dae:	f7ef fa35 	bl	800121c <__aeabi_fsub>
 8011db2:	1c03      	adds	r3, r0, #0
 8011db4:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	0011      	movs	r1, r2
 8011dc8:	0018      	movs	r0, r3
 8011dca:	f7fd f90b 	bl	800efe4 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8011dce:	4b04      	ldr	r3, [pc, #16]	@ (8011de0 <HIDS_GetMeasurementValues+0x110>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8011dd4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8011dd6:	0018      	movs	r0, r3
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	b004      	add	sp, #16
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	46c0      	nop			@ (mov r8, r8)
 8011de0:	200021e2 	.word	0x200021e2
 8011de4:	200021dc 	.word	0x200021dc
 8011de8:	0802abe0 	.word	0x0802abe0
 8011dec:	0802ab78 	.word	0x0802ab78
 8011df0:	40efffe0 	.word	0x40efffe0
 8011df4:	42340000 	.word	0x42340000
 8011df8:	40c00000 	.word	0x40c00000

08011dfc <ResetHIDSresults>:

void ResetHIDSresults() {
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	af00      	add	r7, sp, #0
  humid = 0.0;
 8011e00:	4b04      	ldr	r3, [pc, #16]	@ (8011e14 <ResetHIDSresults+0x18>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8011e06:	4b04      	ldr	r3, [pc, #16]	@ (8011e18 <ResetHIDSresults+0x1c>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	601a      	str	r2, [r3, #0]
}
 8011e0c:	46c0      	nop			@ (mov r8, r8)
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	46c0      	nop			@ (mov r8, r8)
 8011e14:	200021c4 	.word	0x200021c4
 8011e18:	200021c8 	.word	0x200021c8

08011e1c <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8011e1c:	b5b0      	push	{r4, r5, r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8011e22:	4b40      	ldr	r3, [pc, #256]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	2b06      	cmp	r3, #6
 8011e28:	d900      	bls.n	8011e2c <HIDS_Upkeep+0x10>
 8011e2a:	e06e      	b.n	8011f0a <HIDS_Upkeep+0xee>
 8011e2c:	009a      	lsls	r2, r3, #2
 8011e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8011f28 <HIDS_Upkeep+0x10c>)
 8011e30:	18d3      	adds	r3, r2, r3
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8011e36:	4a3d      	ldr	r2, [pc, #244]	@ (8011f2c <HIDS_Upkeep+0x110>)
 8011e38:	4b3d      	ldr	r3, [pc, #244]	@ (8011f30 <HIDS_Upkeep+0x114>)
 8011e3a:	0019      	movs	r1, r3
 8011e3c:	2003      	movs	r0, #3
 8011e3e:	f7ff fcc9 	bl	80117d4 <CreateLine>
      break;
 8011e42:	e069      	b.n	8011f18 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8011e44:	f7ff ffda 	bl	8011dfc <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8011e48:	4b36      	ldr	r3, [pc, #216]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	701a      	strb	r2, [r3, #0]
      break;
 8011e4e:	e063      	b.n	8011f18 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8011e50:	f7fe fb0a 	bl	8010468 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8011e54:	2001      	movs	r0, #1
 8011e56:	f7f9 fe1b 	bl	800ba90 <setSensorLock>
      HIDS_StartMeasurement();
 8011e5a:	f7ff fe41 	bl	8011ae0 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8011e5e:	4b31      	ldr	r3, [pc, #196]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011e60:	2202      	movs	r2, #2
 8011e62:	701a      	strb	r2, [r3, #0]
      break;
 8011e64:	e058      	b.n	8011f18 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8011e66:	4a33      	ldr	r2, [pc, #204]	@ (8011f34 <HIDS_Upkeep+0x118>)
 8011e68:	4b33      	ldr	r3, [pc, #204]	@ (8011f38 <HIDS_Upkeep+0x11c>)
 8011e6a:	0011      	movs	r1, r2
 8011e6c:	0018      	movs	r0, r3
 8011e6e:	f7ff ff2f 	bl	8011cd0 <HIDS_GetMeasurementValues>
 8011e72:	1e03      	subs	r3, r0, #0
 8011e74:	d04d      	beq.n	8011f12 <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8011e76:	4b2b      	ldr	r3, [pc, #172]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011e78:	2203      	movs	r2, #3
 8011e7a:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	f7f9 fe07 	bl	800ba90 <setSensorLock>
      }
      break;
 8011e82:	e046      	b.n	8011f12 <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8011e84:	4b2c      	ldr	r3, [pc, #176]	@ (8011f38 <HIDS_Upkeep+0x11c>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	1c18      	adds	r0, r3, #0
 8011e8a:	f7f1 faeb 	bl	8003464 <__aeabi_f2d>
 8011e8e:	0004      	movs	r4, r0
 8011e90:	000d      	movs	r5, r1
 8011e92:	4b28      	ldr	r3, [pc, #160]	@ (8011f34 <HIDS_Upkeep+0x118>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	1c18      	adds	r0, r3, #0
 8011e98:	f7f1 fae4 	bl	8003464 <__aeabi_f2d>
 8011e9c:	0002      	movs	r2, r0
 8011e9e:	000b      	movs	r3, r1
 8011ea0:	4826      	ldr	r0, [pc, #152]	@ (8011f3c <HIDS_Upkeep+0x120>)
 8011ea2:	4923      	ldr	r1, [pc, #140]	@ (8011f30 <HIDS_Upkeep+0x114>)
 8011ea4:	9202      	str	r2, [sp, #8]
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	9400      	str	r4, [sp, #0]
 8011eaa:	9501      	str	r5, [sp, #4]
 8011eac:	0002      	movs	r2, r0
 8011eae:	2003      	movs	r0, #3
 8011eb0:	f7ff fc90 	bl	80117d4 <CreateLine>
      setHIDS(temp, humid);
 8011eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8011f34 <HIDS_Upkeep+0x118>)
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	4b1f      	ldr	r3, [pc, #124]	@ (8011f38 <HIDS_Upkeep+0x11c>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	1c19      	adds	r1, r3, #0
 8011ebe:	1c10      	adds	r0, r2, #0
 8011ec0:	f7f2 fb36 	bl	8004530 <setHIDS>
      ResetMeasurementIndicator();
 8011ec4:	f7fe fae8 	bl	8010498 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8011ec8:	f000 f8d0 	bl	801206c <HAL_GetTick>
 8011ecc:	0004      	movs	r4, r0
 8011ece:	f7f5 ff9f 	bl	8007e10 <Check_USB_PowerOn>
 8011ed2:	1e03      	subs	r3, r0, #0
 8011ed4:	d103      	bne.n	8011ede <HIDS_Upkeep+0xc2>
 8011ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8011f40 <HIDS_Upkeep+0x124>)
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <HIDS_Upkeep+0xc6>
 8011ede:	4b19      	ldr	r3, [pc, #100]	@ (8011f44 <HIDS_Upkeep+0x128>)
 8011ee0:	e001      	b.n	8011ee6 <HIDS_Upkeep+0xca>
 8011ee2:	23fa      	movs	r3, #250	@ 0xfa
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	191a      	adds	r2, r3, r4
 8011ee8:	4b17      	ldr	r3, [pc, #92]	@ (8011f48 <HIDS_Upkeep+0x12c>)
 8011eea:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8011eec:	4b0d      	ldr	r3, [pc, #52]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011eee:	2206      	movs	r2, #6
 8011ef0:	701a      	strb	r2, [r3, #0]
      break;
 8011ef2:	e011      	b.n	8011f18 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8011ef4:	4b14      	ldr	r3, [pc, #80]	@ (8011f48 <HIDS_Upkeep+0x12c>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	0018      	movs	r0, r3
 8011efa:	f7ff fc15 	bl	8011728 <TimestampIsReached>
 8011efe:	1e03      	subs	r3, r0, #0
 8011f00:	d009      	beq.n	8011f16 <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8011f02:	4b08      	ldr	r3, [pc, #32]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011f04:	2200      	movs	r2, #0
 8011f06:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011f08:	e005      	b.n	8011f16 <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8011f0a:	4b06      	ldr	r3, [pc, #24]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	701a      	strb	r2, [r3, #0]
      break;
 8011f10:	e002      	b.n	8011f18 <HIDS_Upkeep+0xfc>
      break;
 8011f12:	46c0      	nop			@ (mov r8, r8)
 8011f14:	e000      	b.n	8011f18 <HIDS_Upkeep+0xfc>
      break;
 8011f16:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8011f18:	4b02      	ldr	r3, [pc, #8]	@ (8011f24 <HIDS_Upkeep+0x108>)
 8011f1a:	781b      	ldrb	r3, [r3, #0]
}
 8011f1c:	0018      	movs	r0, r3
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bdb0      	pop	{r4, r5, r7, pc}
 8011f22:	46c0      	nop			@ (mov r8, r8)
 8011f24:	200021e8 	.word	0x200021e8
 8011f28:	0802b1bc 	.word	0x0802b1bc
 8011f2c:	0802ac14 	.word	0x0802ac14
 8011f30:	0802ac48 	.word	0x0802ac48
 8011f34:	200021c8 	.word	0x200021c8
 8011f38:	200021c4 	.word	0x200021c4
 8011f3c:	0802ac4c 	.word	0x0802ac4c
 8011f40:	20001e2e 	.word	0x20001e2e
 8011f44:	00002710 	.word	0x00002710
 8011f48:	200021e4 	.word	0x200021e4

08011f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8011f4c:	480d      	ldr	r0, [pc, #52]	@ (8011f84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8011f4e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011f50:	f7ff f844 	bl	8010fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011f54:	480c      	ldr	r0, [pc, #48]	@ (8011f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8011f56:	490d      	ldr	r1, [pc, #52]	@ (8011f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8011f58:	4a0d      	ldr	r2, [pc, #52]	@ (8011f90 <LoopForever+0xe>)
  movs r3, #0
 8011f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011f5c:	e002      	b.n	8011f64 <LoopCopyDataInit>

08011f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011f62:	3304      	adds	r3, #4

08011f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011f68:	d3f9      	bcc.n	8011f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8011f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8011f98 <LoopForever+0x16>)
  movs r3, #0
 8011f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011f70:	e001      	b.n	8011f76 <LoopFillZerobss>

08011f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011f74:	3204      	adds	r2, #4

08011f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011f78:	d3fb      	bcc.n	8011f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8011f7a:	f011 fe33 	bl	8023be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011f7e:	f7f8 fe1d 	bl	800abbc <main>

08011f82 <LoopForever>:

LoopForever:
    b LoopForever
 8011f82:	e7fe      	b.n	8011f82 <LoopForever>
   ldr   r0, =_estack
 8011f84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8011f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011f8c:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8011f90:	0802bb88 	.word	0x0802bb88
  ldr r2, =_sbss
 8011f94:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8011f98:	200035f0 	.word	0x200035f0

08011f9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011f9c:	e7fe      	b.n	8011f9c <ADC1_COMP_IRQHandler>
	...

08011fa0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011fa6:	1dfb      	adds	r3, r7, #7
 8011fa8:	2200      	movs	r2, #0
 8011faa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8011fac:	4b0b      	ldr	r3, [pc, #44]	@ (8011fdc <HAL_Init+0x3c>)
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fdc <HAL_Init+0x3c>)
 8011fb2:	2140      	movs	r1, #64	@ 0x40
 8011fb4:	430a      	orrs	r2, r1
 8011fb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011fb8:	2003      	movs	r0, #3
 8011fba:	f000 f811 	bl	8011fe0 <HAL_InitTick>
 8011fbe:	1e03      	subs	r3, r0, #0
 8011fc0:	d003      	beq.n	8011fca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8011fc2:	1dfb      	adds	r3, r7, #7
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	701a      	strb	r2, [r3, #0]
 8011fc8:	e001      	b.n	8011fce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011fca:	f7fe febb 	bl	8010d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011fce:	1dfb      	adds	r3, r7, #7
 8011fd0:	781b      	ldrb	r3, [r3, #0]
}
 8011fd2:	0018      	movs	r0, r3
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	b002      	add	sp, #8
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	46c0      	nop			@ (mov r8, r8)
 8011fdc:	40022000 	.word	0x40022000

08011fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011fe0:	b590      	push	{r4, r7, lr}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011fe8:	4b14      	ldr	r3, [pc, #80]	@ (801203c <HAL_InitTick+0x5c>)
 8011fea:	681c      	ldr	r4, [r3, #0]
 8011fec:	4b14      	ldr	r3, [pc, #80]	@ (8012040 <HAL_InitTick+0x60>)
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	0019      	movs	r1, r3
 8011ff2:	23fa      	movs	r3, #250	@ 0xfa
 8011ff4:	0098      	lsls	r0, r3, #2
 8011ff6:	f7ee f8d5 	bl	80001a4 <__udivsi3>
 8011ffa:	0003      	movs	r3, r0
 8011ffc:	0019      	movs	r1, r3
 8011ffe:	0020      	movs	r0, r4
 8012000:	f7ee f8d0 	bl	80001a4 <__udivsi3>
 8012004:	0003      	movs	r3, r0
 8012006:	0018      	movs	r0, r3
 8012008:	f000 fcfd 	bl	8012a06 <HAL_SYSTICK_Config>
 801200c:	1e03      	subs	r3, r0, #0
 801200e:	d001      	beq.n	8012014 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8012010:	2301      	movs	r3, #1
 8012012:	e00f      	b.n	8012034 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2b03      	cmp	r3, #3
 8012018:	d80b      	bhi.n	8012032 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	2301      	movs	r3, #1
 801201e:	425b      	negs	r3, r3
 8012020:	2200      	movs	r2, #0
 8012022:	0018      	movs	r0, r3
 8012024:	f000 fcc6 	bl	80129b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012028:	4b06      	ldr	r3, [pc, #24]	@ (8012044 <HAL_InitTick+0x64>)
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801202e:	2300      	movs	r3, #0
 8012030:	e000      	b.n	8012034 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8012032:	2301      	movs	r3, #1
}
 8012034:	0018      	movs	r0, r3
 8012036:	46bd      	mov	sp, r7
 8012038:	b003      	add	sp, #12
 801203a:	bd90      	pop	{r4, r7, pc}
 801203c:	200000e0 	.word	0x200000e0
 8012040:	200000f4 	.word	0x200000f4
 8012044:	200000f0 	.word	0x200000f0

08012048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801204c:	4b05      	ldr	r3, [pc, #20]	@ (8012064 <HAL_IncTick+0x1c>)
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	001a      	movs	r2, r3
 8012052:	4b05      	ldr	r3, [pc, #20]	@ (8012068 <HAL_IncTick+0x20>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	18d2      	adds	r2, r2, r3
 8012058:	4b03      	ldr	r3, [pc, #12]	@ (8012068 <HAL_IncTick+0x20>)
 801205a:	601a      	str	r2, [r3, #0]
}
 801205c:	46c0      	nop			@ (mov r8, r8)
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	46c0      	nop			@ (mov r8, r8)
 8012064:	200000f4 	.word	0x200000f4
 8012068:	200021ec 	.word	0x200021ec

0801206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	af00      	add	r7, sp, #0
  return uwTick;
 8012070:	4b02      	ldr	r3, [pc, #8]	@ (801207c <HAL_GetTick+0x10>)
 8012072:	681b      	ldr	r3, [r3, #0]
}
 8012074:	0018      	movs	r0, r3
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	46c0      	nop			@ (mov r8, r8)
 801207c:	200021ec 	.word	0x200021ec

08012080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012088:	f7ff fff0 	bl	801206c <HAL_GetTick>
 801208c:	0003      	movs	r3, r0
 801208e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	3301      	adds	r3, #1
 8012098:	d005      	beq.n	80120a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801209a:	4b0a      	ldr	r3, [pc, #40]	@ (80120c4 <HAL_Delay+0x44>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	001a      	movs	r2, r3
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	189b      	adds	r3, r3, r2
 80120a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80120a6:	46c0      	nop			@ (mov r8, r8)
 80120a8:	f7ff ffe0 	bl	801206c <HAL_GetTick>
 80120ac:	0002      	movs	r2, r0
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	68fa      	ldr	r2, [r7, #12]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d8f7      	bhi.n	80120a8 <HAL_Delay+0x28>
  {
  }
}
 80120b8:	46c0      	nop			@ (mov r8, r8)
 80120ba:	46c0      	nop			@ (mov r8, r8)
 80120bc:	46bd      	mov	sp, r7
 80120be:	b004      	add	sp, #16
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	46c0      	nop			@ (mov r8, r8)
 80120c4:	200000f4 	.word	0x200000f4

080120c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80120cc:	4b04      	ldr	r3, [pc, #16]	@ (80120e0 <HAL_SuspendTick+0x18>)
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	4b03      	ldr	r3, [pc, #12]	@ (80120e0 <HAL_SuspendTick+0x18>)
 80120d2:	2102      	movs	r1, #2
 80120d4:	438a      	bics	r2, r1
 80120d6:	601a      	str	r2, [r3, #0]
}
 80120d8:	46c0      	nop			@ (mov r8, r8)
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	46c0      	nop			@ (mov r8, r8)
 80120e0:	e000e010 	.word	0xe000e010

080120e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80120e8:	4b04      	ldr	r3, [pc, #16]	@ (80120fc <HAL_ResumeTick+0x18>)
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	4b03      	ldr	r3, [pc, #12]	@ (80120fc <HAL_ResumeTick+0x18>)
 80120ee:	2102      	movs	r1, #2
 80120f0:	430a      	orrs	r2, r1
 80120f2:	601a      	str	r2, [r3, #0]
}
 80120f4:	46c0      	nop			@ (mov r8, r8)
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	46c0      	nop			@ (mov r8, r8)
 80120fc:	e000e010 	.word	0xe000e010

08012100 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8012104:	4b02      	ldr	r3, [pc, #8]	@ (8012110 <HAL_GetUIDw0+0x10>)
 8012106:	681b      	ldr	r3, [r3, #0]
}
 8012108:	0018      	movs	r0, r3
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	46c0      	nop			@ (mov r8, r8)
 8012110:	1ff80050 	.word	0x1ff80050

08012114 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8012118:	4b02      	ldr	r3, [pc, #8]	@ (8012124 <HAL_GetUIDw1+0x10>)
 801211a:	681b      	ldr	r3, [r3, #0]
}
 801211c:	0018      	movs	r0, r3
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	46c0      	nop			@ (mov r8, r8)
 8012124:	1ff80054 	.word	0x1ff80054

08012128 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 801212c:	4b02      	ldr	r3, [pc, #8]	@ (8012138 <HAL_GetUIDw2+0x10>)
 801212e:	681b      	ldr	r3, [r3, #0]
}
 8012130:	0018      	movs	r0, r3
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	46c0      	nop			@ (mov r8, r8)
 8012138:	1ff80064 	.word	0x1ff80064

0801213c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 801214a:	2301      	movs	r3, #1
 801214c:	e159      	b.n	8012402 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012152:	2b00      	cmp	r3, #0
 8012154:	d10a      	bne.n	801216c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2250      	movs	r2, #80	@ 0x50
 8012160:	2100      	movs	r1, #0
 8012162:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	0018      	movs	r0, r3
 8012168:	f7f6 fd04 	bl	8008b74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012170:	2210      	movs	r2, #16
 8012172:	4013      	ands	r3, r2
 8012174:	2b10      	cmp	r3, #16
 8012176:	d005      	beq.n	8012184 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	2204      	movs	r2, #4
 8012180:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8012182:	d00b      	beq.n	801219c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012188:	2210      	movs	r2, #16
 801218a:	431a      	orrs	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2250      	movs	r2, #80	@ 0x50
 8012194:	2100      	movs	r1, #0
 8012196:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012198:	2301      	movs	r3, #1
 801219a:	e132      	b.n	8012402 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121a0:	4a9a      	ldr	r2, [pc, #616]	@ (801240c <HAL_ADC_Init+0x2d0>)
 80121a2:	4013      	ands	r3, r2
 80121a4:	2202      	movs	r2, #2
 80121a6:	431a      	orrs	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	2203      	movs	r2, #3
 80121b4:	4013      	ands	r3, r2
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d108      	bne.n	80121cc <HAL_ADC_Init+0x90>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2201      	movs	r2, #1
 80121c2:	4013      	ands	r3, r2
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d101      	bne.n	80121cc <HAL_ADC_Init+0x90>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e000      	b.n	80121ce <HAL_ADC_Init+0x92>
 80121cc:	2300      	movs	r3, #0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d149      	bne.n	8012266 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	685a      	ldr	r2, [r3, #4]
 80121d6:	23c0      	movs	r3, #192	@ 0xc0
 80121d8:	061b      	lsls	r3, r3, #24
 80121da:	429a      	cmp	r2, r3
 80121dc:	d00b      	beq.n	80121f6 <HAL_ADC_Init+0xba>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	685a      	ldr	r2, [r3, #4]
 80121e2:	2380      	movs	r3, #128	@ 0x80
 80121e4:	05db      	lsls	r3, r3, #23
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d005      	beq.n	80121f6 <HAL_ADC_Init+0xba>
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	685a      	ldr	r2, [r3, #4]
 80121ee:	2380      	movs	r3, #128	@ 0x80
 80121f0:	061b      	lsls	r3, r3, #24
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d111      	bne.n	801221a <HAL_ADC_Init+0xde>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	691a      	ldr	r2, [r3, #16]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	0092      	lsls	r2, r2, #2
 8012202:	0892      	lsrs	r2, r2, #2
 8012204:	611a      	str	r2, [r3, #16]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6919      	ldr	r1, [r3, #16]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	685a      	ldr	r2, [r3, #4]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	430a      	orrs	r2, r1
 8012216:	611a      	str	r2, [r3, #16]
 8012218:	e014      	b.n	8012244 <HAL_ADC_Init+0x108>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	691a      	ldr	r2, [r3, #16]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	0092      	lsls	r2, r2, #2
 8012226:	0892      	lsrs	r2, r2, #2
 8012228:	611a      	str	r2, [r3, #16]
 801222a:	4b79      	ldr	r3, [pc, #484]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	4b78      	ldr	r3, [pc, #480]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 8012230:	4978      	ldr	r1, [pc, #480]	@ (8012414 <HAL_ADC_Init+0x2d8>)
 8012232:	400a      	ands	r2, r1
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	4b76      	ldr	r3, [pc, #472]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 8012238:	6819      	ldr	r1, [r3, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	685a      	ldr	r2, [r3, #4]
 801223e:	4b74      	ldr	r3, [pc, #464]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 8012240:	430a      	orrs	r2, r1
 8012242:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68da      	ldr	r2, [r3, #12]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2118      	movs	r1, #24
 8012250:	438a      	bics	r2, r1
 8012252:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	68d9      	ldr	r1, [r3, #12]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	689a      	ldr	r2, [r3, #8]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	430a      	orrs	r2, r1
 8012264:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8012266:	4b6a      	ldr	r3, [pc, #424]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	4b69      	ldr	r3, [pc, #420]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 801226c:	496a      	ldr	r1, [pc, #424]	@ (8012418 <HAL_ADC_Init+0x2dc>)
 801226e:	400a      	ands	r2, r1
 8012270:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8012272:	4b67      	ldr	r3, [pc, #412]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 8012274:	6819      	ldr	r1, [r3, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801227a:	065a      	lsls	r2, r3, #25
 801227c:	4b64      	ldr	r3, [pc, #400]	@ (8012410 <HAL_ADC_Init+0x2d4>)
 801227e:	430a      	orrs	r2, r1
 8012280:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	689a      	ldr	r2, [r3, #8]
 8012288:	2380      	movs	r3, #128	@ 0x80
 801228a:	055b      	lsls	r3, r3, #21
 801228c:	4013      	ands	r3, r2
 801228e:	d108      	bne.n	80122a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	689a      	ldr	r2, [r3, #8]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2180      	movs	r1, #128	@ 0x80
 801229c:	0549      	lsls	r1, r1, #21
 801229e:	430a      	orrs	r2, r1
 80122a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68da      	ldr	r2, [r3, #12]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	495b      	ldr	r1, [pc, #364]	@ (801241c <HAL_ADC_Init+0x2e0>)
 80122ae:	400a      	ands	r2, r1
 80122b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	68d9      	ldr	r1, [r3, #12]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	691b      	ldr	r3, [r3, #16]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d101      	bne.n	80122c8 <HAL_ADC_Init+0x18c>
 80122c4:	2304      	movs	r3, #4
 80122c6:	e000      	b.n	80122ca <HAL_ADC_Init+0x18e>
 80122c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80122ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2020      	movs	r0, #32
 80122d0:	5c1b      	ldrb	r3, [r3, r0]
 80122d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80122d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	202c      	movs	r0, #44	@ 0x2c
 80122da:	5c1b      	ldrb	r3, [r3, r0]
 80122dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80122de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80122e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	699b      	ldr	r3, [r3, #24]
 80122ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80122ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	69db      	ldr	r3, [r3, #28]
 80122f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80122f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	430a      	orrs	r2, r1
 80122fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012302:	23c2      	movs	r3, #194	@ 0xc2
 8012304:	33ff      	adds	r3, #255	@ 0xff
 8012306:	429a      	cmp	r2, r3
 8012308:	d00b      	beq.n	8012322 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	68d9      	ldr	r1, [r3, #12]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8012318:	431a      	orrs	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	430a      	orrs	r2, r1
 8012320:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2221      	movs	r2, #33	@ 0x21
 8012326:	5c9b      	ldrb	r3, [r3, r2]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d11a      	bne.n	8012362 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2220      	movs	r2, #32
 8012330:	5c9b      	ldrb	r3, [r3, r2]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d109      	bne.n	801234a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	68da      	ldr	r2, [r3, #12]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2180      	movs	r1, #128	@ 0x80
 8012342:	0249      	lsls	r1, r1, #9
 8012344:	430a      	orrs	r2, r1
 8012346:	60da      	str	r2, [r3, #12]
 8012348:	e00b      	b.n	8012362 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801234e:	2220      	movs	r2, #32
 8012350:	431a      	orrs	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801235a:	2201      	movs	r2, #1
 801235c:	431a      	orrs	r2, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012366:	2b01      	cmp	r3, #1
 8012368:	d11f      	bne.n	80123aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	691a      	ldr	r2, [r3, #16]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	492a      	ldr	r1, [pc, #168]	@ (8012420 <HAL_ADC_Init+0x2e4>)
 8012376:	400a      	ands	r2, r1
 8012378:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6919      	ldr	r1, [r3, #16]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012388:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 801238e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	430a      	orrs	r2, r1
 8012396:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	691a      	ldr	r2, [r3, #16]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2101      	movs	r1, #1
 80123a4:	430a      	orrs	r2, r1
 80123a6:	611a      	str	r2, [r3, #16]
 80123a8:	e00e      	b.n	80123c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	2201      	movs	r2, #1
 80123b2:	4013      	ands	r3, r2
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d107      	bne.n	80123c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	691a      	ldr	r2, [r3, #16]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2101      	movs	r1, #1
 80123c4:	438a      	bics	r2, r1
 80123c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	695a      	ldr	r2, [r3, #20]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	2107      	movs	r1, #7
 80123d4:	438a      	bics	r2, r1
 80123d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6959      	ldr	r1, [r3, #20]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	430a      	orrs	r2, r1
 80123e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123f4:	2203      	movs	r2, #3
 80123f6:	4393      	bics	r3, r2
 80123f8:	2201      	movs	r2, #1
 80123fa:	431a      	orrs	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8012400:	2300      	movs	r3, #0
}
 8012402:	0018      	movs	r0, r3
 8012404:	46bd      	mov	sp, r7
 8012406:	b002      	add	sp, #8
 8012408:	bd80      	pop	{r7, pc}
 801240a:	46c0      	nop			@ (mov r8, r8)
 801240c:	fffffefd 	.word	0xfffffefd
 8012410:	40012708 	.word	0x40012708
 8012414:	ffc3ffff 	.word	0xffc3ffff
 8012418:	fdffffff 	.word	0xfdffffff
 801241c:	fffe0219 	.word	0xfffe0219
 8012420:	fffffc03 	.word	0xfffffc03

08012424 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8012424:	b590      	push	{r4, r7, lr}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801242c:	230f      	movs	r3, #15
 801242e:	18fb      	adds	r3, r7, r3
 8012430:	2200      	movs	r2, #0
 8012432:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	689b      	ldr	r3, [r3, #8]
 801243a:	2204      	movs	r2, #4
 801243c:	4013      	ands	r3, r2
 801243e:	d138      	bne.n	80124b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2250      	movs	r2, #80	@ 0x50
 8012444:	5c9b      	ldrb	r3, [r3, r2]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d101      	bne.n	801244e <HAL_ADC_Start+0x2a>
 801244a:	2302      	movs	r3, #2
 801244c:	e038      	b.n	80124c0 <HAL_ADC_Start+0x9c>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2250      	movs	r2, #80	@ 0x50
 8012452:	2101      	movs	r1, #1
 8012454:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	69db      	ldr	r3, [r3, #28]
 801245a:	2b01      	cmp	r3, #1
 801245c:	d007      	beq.n	801246e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 801245e:	230f      	movs	r3, #15
 8012460:	18fc      	adds	r4, r7, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	0018      	movs	r0, r3
 8012466:	f000 f95f 	bl	8012728 <ADC_Enable>
 801246a:	0003      	movs	r3, r0
 801246c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801246e:	230f      	movs	r3, #15
 8012470:	18fb      	adds	r3, r7, r3
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d120      	bne.n	80124ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801247c:	4a12      	ldr	r2, [pc, #72]	@ (80124c8 <HAL_ADC_Start+0xa4>)
 801247e:	4013      	ands	r3, r2
 8012480:	2280      	movs	r2, #128	@ 0x80
 8012482:	0052      	lsls	r2, r2, #1
 8012484:	431a      	orrs	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2250      	movs	r2, #80	@ 0x50
 8012494:	2100      	movs	r1, #0
 8012496:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	221c      	movs	r2, #28
 801249e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	689a      	ldr	r2, [r3, #8]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2104      	movs	r1, #4
 80124ac:	430a      	orrs	r2, r1
 80124ae:	609a      	str	r2, [r3, #8]
 80124b0:	e003      	b.n	80124ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80124b2:	230f      	movs	r3, #15
 80124b4:	18fb      	adds	r3, r7, r3
 80124b6:	2202      	movs	r2, #2
 80124b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80124ba:	230f      	movs	r3, #15
 80124bc:	18fb      	adds	r3, r7, r3
 80124be:	781b      	ldrb	r3, [r3, #0]
}
 80124c0:	0018      	movs	r0, r3
 80124c2:	46bd      	mov	sp, r7
 80124c4:	b005      	add	sp, #20
 80124c6:	bd90      	pop	{r4, r7, pc}
 80124c8:	fffff0fe 	.word	0xfffff0fe

080124cc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80124d6:	2300      	movs	r3, #0
 80124d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80124da:	2300      	movs	r3, #0
 80124dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	695b      	ldr	r3, [r3, #20]
 80124e2:	2b08      	cmp	r3, #8
 80124e4:	d102      	bne.n	80124ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80124e6:	2308      	movs	r3, #8
 80124e8:	60fb      	str	r3, [r7, #12]
 80124ea:	e014      	b.n	8012516 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	2201      	movs	r2, #1
 80124f4:	4013      	ands	r3, r2
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d10b      	bne.n	8012512 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124fe:	2220      	movs	r2, #32
 8012500:	431a      	orrs	r2, r3
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2250      	movs	r2, #80	@ 0x50
 801250a:	2100      	movs	r1, #0
 801250c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	e072      	b.n	80125f8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8012512:	230c      	movs	r3, #12
 8012514:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8012516:	f7ff fda9 	bl	801206c <HAL_GetTick>
 801251a:	0003      	movs	r3, r0
 801251c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801251e:	e01f      	b.n	8012560 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	3301      	adds	r3, #1
 8012524:	d01c      	beq.n	8012560 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d007      	beq.n	801253c <HAL_ADC_PollForConversion+0x70>
 801252c:	f7ff fd9e 	bl	801206c <HAL_GetTick>
 8012530:	0002      	movs	r2, r0
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	429a      	cmp	r2, r3
 801253a:	d211      	bcs.n	8012560 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	4013      	ands	r3, r2
 8012546:	d10b      	bne.n	8012560 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801254c:	2204      	movs	r2, #4
 801254e:	431a      	orrs	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2250      	movs	r2, #80	@ 0x50
 8012558:	2100      	movs	r1, #0
 801255a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801255c:	2303      	movs	r3, #3
 801255e:	e04b      	b.n	80125f8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	4013      	ands	r3, r2
 801256a:	d0d9      	beq.n	8012520 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012570:	2280      	movs	r2, #128	@ 0x80
 8012572:	0092      	lsls	r2, r2, #2
 8012574:	431a      	orrs	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	68da      	ldr	r2, [r3, #12]
 8012580:	23c0      	movs	r3, #192	@ 0xc0
 8012582:	011b      	lsls	r3, r3, #4
 8012584:	4013      	ands	r3, r2
 8012586:	d12e      	bne.n	80125e6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2220      	movs	r2, #32
 801258c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801258e:	2b00      	cmp	r3, #0
 8012590:	d129      	bne.n	80125e6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2208      	movs	r2, #8
 801259a:	4013      	ands	r3, r2
 801259c:	2b08      	cmp	r3, #8
 801259e:	d122      	bne.n	80125e6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	2204      	movs	r2, #4
 80125a8:	4013      	ands	r3, r2
 80125aa:	d110      	bne.n	80125ce <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	210c      	movs	r1, #12
 80125b8:	438a      	bics	r2, r1
 80125ba:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125c0:	4a0f      	ldr	r2, [pc, #60]	@ (8012600 <HAL_ADC_PollForConversion+0x134>)
 80125c2:	4013      	ands	r3, r2
 80125c4:	2201      	movs	r2, #1
 80125c6:	431a      	orrs	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80125cc:	e00b      	b.n	80125e6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125d2:	2220      	movs	r2, #32
 80125d4:	431a      	orrs	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125de:	2201      	movs	r2, #1
 80125e0:	431a      	orrs	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	699b      	ldr	r3, [r3, #24]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d103      	bne.n	80125f6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	220c      	movs	r2, #12
 80125f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	0018      	movs	r0, r3
 80125fa:	46bd      	mov	sp, r7
 80125fc:	b004      	add	sp, #16
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	fffffefe 	.word	0xfffffefe

08012604 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b082      	sub	sp, #8
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8012612:	0018      	movs	r0, r3
 8012614:	46bd      	mov	sp, r7
 8012616:	b002      	add	sp, #8
 8012618:	bd80      	pop	{r7, pc}
	...

0801261c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2250      	movs	r2, #80	@ 0x50
 801262a:	5c9b      	ldrb	r3, [r3, r2]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d101      	bne.n	8012634 <HAL_ADC_ConfigChannel+0x18>
 8012630:	2302      	movs	r3, #2
 8012632:	e06c      	b.n	801270e <HAL_ADC_ConfigChannel+0xf2>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2250      	movs	r2, #80	@ 0x50
 8012638:	2101      	movs	r1, #1
 801263a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	689b      	ldr	r3, [r3, #8]
 8012642:	2204      	movs	r2, #4
 8012644:	4013      	ands	r3, r2
 8012646:	d00b      	beq.n	8012660 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801264c:	2220      	movs	r2, #32
 801264e:	431a      	orrs	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2250      	movs	r2, #80	@ 0x50
 8012658:	2100      	movs	r1, #0
 801265a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801265c:	2301      	movs	r3, #1
 801265e:	e056      	b.n	801270e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	4a2c      	ldr	r2, [pc, #176]	@ (8012718 <HAL_ADC_ConfigChannel+0xfc>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d028      	beq.n	80126bc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	035b      	lsls	r3, r3, #13
 8012676:	0b5a      	lsrs	r2, r3, #13
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	430a      	orrs	r2, r1
 801267e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	2380      	movs	r3, #128	@ 0x80
 8012686:	02db      	lsls	r3, r3, #11
 8012688:	4013      	ands	r3, r2
 801268a:	d009      	beq.n	80126a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 801268c:	4b23      	ldr	r3, [pc, #140]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	4b22      	ldr	r3, [pc, #136]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 8012692:	2180      	movs	r1, #128	@ 0x80
 8012694:	0409      	lsls	r1, r1, #16
 8012696:	430a      	orrs	r2, r1
 8012698:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 801269a:	200a      	movs	r0, #10
 801269c:	f000 f8ac 	bl	80127f8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	2380      	movs	r3, #128	@ 0x80
 80126a6:	029b      	lsls	r3, r3, #10
 80126a8:	4013      	ands	r3, r2
 80126aa:	d02b      	beq.n	8012704 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80126ac:	4b1b      	ldr	r3, [pc, #108]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	4b1a      	ldr	r3, [pc, #104]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126b2:	2180      	movs	r1, #128	@ 0x80
 80126b4:	03c9      	lsls	r1, r1, #15
 80126b6:	430a      	orrs	r2, r1
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	e023      	b.n	8012704 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	035b      	lsls	r3, r3, #13
 80126c8:	0b5b      	lsrs	r3, r3, #13
 80126ca:	43d9      	mvns	r1, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	400a      	ands	r2, r1
 80126d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	2380      	movs	r3, #128	@ 0x80
 80126da:	02db      	lsls	r3, r3, #11
 80126dc:	4013      	ands	r3, r2
 80126de:	d005      	beq.n	80126ec <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80126e0:	4b0e      	ldr	r3, [pc, #56]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	4b0d      	ldr	r3, [pc, #52]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126e6:	490e      	ldr	r1, [pc, #56]	@ (8012720 <HAL_ADC_ConfigChannel+0x104>)
 80126e8:	400a      	ands	r2, r1
 80126ea:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	2380      	movs	r3, #128	@ 0x80
 80126f2:	029b      	lsls	r3, r3, #10
 80126f4:	4013      	ands	r3, r2
 80126f6:	d005      	beq.n	8012704 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80126f8:	4b08      	ldr	r3, [pc, #32]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	4b07      	ldr	r3, [pc, #28]	@ (801271c <HAL_ADC_ConfigChannel+0x100>)
 80126fe:	4909      	ldr	r1, [pc, #36]	@ (8012724 <HAL_ADC_ConfigChannel+0x108>)
 8012700:	400a      	ands	r2, r1
 8012702:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2250      	movs	r2, #80	@ 0x50
 8012708:	2100      	movs	r1, #0
 801270a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	0018      	movs	r0, r3
 8012710:	46bd      	mov	sp, r7
 8012712:	b002      	add	sp, #8
 8012714:	bd80      	pop	{r7, pc}
 8012716:	46c0      	nop			@ (mov r8, r8)
 8012718:	00001001 	.word	0x00001001
 801271c:	40012708 	.word	0x40012708
 8012720:	ff7fffff 	.word	0xff7fffff
 8012724:	ffbfffff 	.word	0xffbfffff

08012728 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012730:	2300      	movs	r3, #0
 8012732:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	689b      	ldr	r3, [r3, #8]
 801273a:	2203      	movs	r2, #3
 801273c:	4013      	ands	r3, r2
 801273e:	2b01      	cmp	r3, #1
 8012740:	d108      	bne.n	8012754 <ADC_Enable+0x2c>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2201      	movs	r2, #1
 801274a:	4013      	ands	r3, r2
 801274c:	2b01      	cmp	r3, #1
 801274e:	d101      	bne.n	8012754 <ADC_Enable+0x2c>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <ADC_Enable+0x2e>
 8012754:	2300      	movs	r3, #0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d146      	bne.n	80127e8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	4a24      	ldr	r2, [pc, #144]	@ (80127f4 <ADC_Enable+0xcc>)
 8012762:	4013      	ands	r3, r2
 8012764:	d00d      	beq.n	8012782 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801276a:	2210      	movs	r2, #16
 801276c:	431a      	orrs	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012776:	2201      	movs	r2, #1
 8012778:	431a      	orrs	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801277e:	2301      	movs	r3, #1
 8012780:	e033      	b.n	80127ea <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	689a      	ldr	r2, [r3, #8]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2101      	movs	r1, #1
 801278e:	430a      	orrs	r2, r1
 8012790:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8012792:	2001      	movs	r0, #1
 8012794:	f000 f830 	bl	80127f8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8012798:	f7ff fc68 	bl	801206c <HAL_GetTick>
 801279c:	0003      	movs	r3, r0
 801279e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80127a0:	e01b      	b.n	80127da <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80127a2:	f7ff fc63 	bl	801206c <HAL_GetTick>
 80127a6:	0002      	movs	r2, r0
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	2b0a      	cmp	r3, #10
 80127ae:	d914      	bls.n	80127da <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2201      	movs	r2, #1
 80127b8:	4013      	ands	r3, r2
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d00d      	beq.n	80127da <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127c2:	2210      	movs	r2, #16
 80127c4:	431a      	orrs	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127ce:	2201      	movs	r2, #1
 80127d0:	431a      	orrs	r2, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80127d6:	2301      	movs	r3, #1
 80127d8:	e007      	b.n	80127ea <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2201      	movs	r2, #1
 80127e2:	4013      	ands	r3, r2
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d1dc      	bne.n	80127a2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80127e8:	2300      	movs	r3, #0
}
 80127ea:	0018      	movs	r0, r3
 80127ec:	46bd      	mov	sp, r7
 80127ee:	b004      	add	sp, #16
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	46c0      	nop			@ (mov r8, r8)
 80127f4:	80000017 	.word	0x80000017

080127f8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8012800:	4b0b      	ldr	r3, [pc, #44]	@ (8012830 <ADC_DelayMicroSecond+0x38>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	490b      	ldr	r1, [pc, #44]	@ (8012834 <ADC_DelayMicroSecond+0x3c>)
 8012806:	0018      	movs	r0, r3
 8012808:	f7ed fccc 	bl	80001a4 <__udivsi3>
 801280c:	0003      	movs	r3, r0
 801280e:	001a      	movs	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4353      	muls	r3, r2
 8012814:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8012816:	e002      	b.n	801281e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	3b01      	subs	r3, #1
 801281c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1f9      	bne.n	8012818 <ADC_DelayMicroSecond+0x20>
  }
}
 8012824:	46c0      	nop			@ (mov r8, r8)
 8012826:	46c0      	nop			@ (mov r8, r8)
 8012828:	46bd      	mov	sp, r7
 801282a:	b004      	add	sp, #16
 801282c:	bd80      	pop	{r7, pc}
 801282e:	46c0      	nop			@ (mov r8, r8)
 8012830:	200000e0 	.word	0x200000e0
 8012834:	000f4240 	.word	0x000f4240

08012838 <__NVIC_EnableIRQ>:
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	0002      	movs	r2, r0
 8012840:	1dfb      	adds	r3, r7, #7
 8012842:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012844:	1dfb      	adds	r3, r7, #7
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b7f      	cmp	r3, #127	@ 0x7f
 801284a:	d809      	bhi.n	8012860 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801284c:	1dfb      	adds	r3, r7, #7
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	001a      	movs	r2, r3
 8012852:	231f      	movs	r3, #31
 8012854:	401a      	ands	r2, r3
 8012856:	4b04      	ldr	r3, [pc, #16]	@ (8012868 <__NVIC_EnableIRQ+0x30>)
 8012858:	2101      	movs	r1, #1
 801285a:	4091      	lsls	r1, r2
 801285c:	000a      	movs	r2, r1
 801285e:	601a      	str	r2, [r3, #0]
}
 8012860:	46c0      	nop			@ (mov r8, r8)
 8012862:	46bd      	mov	sp, r7
 8012864:	b002      	add	sp, #8
 8012866:	bd80      	pop	{r7, pc}
 8012868:	e000e100 	.word	0xe000e100

0801286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801286c:	b590      	push	{r4, r7, lr}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
 8012872:	0002      	movs	r2, r0
 8012874:	6039      	str	r1, [r7, #0]
 8012876:	1dfb      	adds	r3, r7, #7
 8012878:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801287a:	1dfb      	adds	r3, r7, #7
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012880:	d828      	bhi.n	80128d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012882:	4a2f      	ldr	r2, [pc, #188]	@ (8012940 <__NVIC_SetPriority+0xd4>)
 8012884:	1dfb      	adds	r3, r7, #7
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	b25b      	sxtb	r3, r3
 801288a:	089b      	lsrs	r3, r3, #2
 801288c:	33c0      	adds	r3, #192	@ 0xc0
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	589b      	ldr	r3, [r3, r2]
 8012892:	1dfa      	adds	r2, r7, #7
 8012894:	7812      	ldrb	r2, [r2, #0]
 8012896:	0011      	movs	r1, r2
 8012898:	2203      	movs	r2, #3
 801289a:	400a      	ands	r2, r1
 801289c:	00d2      	lsls	r2, r2, #3
 801289e:	21ff      	movs	r1, #255	@ 0xff
 80128a0:	4091      	lsls	r1, r2
 80128a2:	000a      	movs	r2, r1
 80128a4:	43d2      	mvns	r2, r2
 80128a6:	401a      	ands	r2, r3
 80128a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	019b      	lsls	r3, r3, #6
 80128ae:	22ff      	movs	r2, #255	@ 0xff
 80128b0:	401a      	ands	r2, r3
 80128b2:	1dfb      	adds	r3, r7, #7
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	0018      	movs	r0, r3
 80128b8:	2303      	movs	r3, #3
 80128ba:	4003      	ands	r3, r0
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80128c0:	481f      	ldr	r0, [pc, #124]	@ (8012940 <__NVIC_SetPriority+0xd4>)
 80128c2:	1dfb      	adds	r3, r7, #7
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	b25b      	sxtb	r3, r3
 80128c8:	089b      	lsrs	r3, r3, #2
 80128ca:	430a      	orrs	r2, r1
 80128cc:	33c0      	adds	r3, #192	@ 0xc0
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80128d2:	e031      	b.n	8012938 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80128d4:	4a1b      	ldr	r2, [pc, #108]	@ (8012944 <__NVIC_SetPriority+0xd8>)
 80128d6:	1dfb      	adds	r3, r7, #7
 80128d8:	781b      	ldrb	r3, [r3, #0]
 80128da:	0019      	movs	r1, r3
 80128dc:	230f      	movs	r3, #15
 80128de:	400b      	ands	r3, r1
 80128e0:	3b08      	subs	r3, #8
 80128e2:	089b      	lsrs	r3, r3, #2
 80128e4:	3306      	adds	r3, #6
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	18d3      	adds	r3, r2, r3
 80128ea:	3304      	adds	r3, #4
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	1dfa      	adds	r2, r7, #7
 80128f0:	7812      	ldrb	r2, [r2, #0]
 80128f2:	0011      	movs	r1, r2
 80128f4:	2203      	movs	r2, #3
 80128f6:	400a      	ands	r2, r1
 80128f8:	00d2      	lsls	r2, r2, #3
 80128fa:	21ff      	movs	r1, #255	@ 0xff
 80128fc:	4091      	lsls	r1, r2
 80128fe:	000a      	movs	r2, r1
 8012900:	43d2      	mvns	r2, r2
 8012902:	401a      	ands	r2, r3
 8012904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	019b      	lsls	r3, r3, #6
 801290a:	22ff      	movs	r2, #255	@ 0xff
 801290c:	401a      	ands	r2, r3
 801290e:	1dfb      	adds	r3, r7, #7
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	0018      	movs	r0, r3
 8012914:	2303      	movs	r3, #3
 8012916:	4003      	ands	r3, r0
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801291c:	4809      	ldr	r0, [pc, #36]	@ (8012944 <__NVIC_SetPriority+0xd8>)
 801291e:	1dfb      	adds	r3, r7, #7
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	001c      	movs	r4, r3
 8012924:	230f      	movs	r3, #15
 8012926:	4023      	ands	r3, r4
 8012928:	3b08      	subs	r3, #8
 801292a:	089b      	lsrs	r3, r3, #2
 801292c:	430a      	orrs	r2, r1
 801292e:	3306      	adds	r3, #6
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	18c3      	adds	r3, r0, r3
 8012934:	3304      	adds	r3, #4
 8012936:	601a      	str	r2, [r3, #0]
}
 8012938:	46c0      	nop			@ (mov r8, r8)
 801293a:	46bd      	mov	sp, r7
 801293c:	b003      	add	sp, #12
 801293e:	bd90      	pop	{r4, r7, pc}
 8012940:	e000e100 	.word	0xe000e100
 8012944:	e000ed00 	.word	0xe000ed00

08012948 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801294c:	f3bf 8f4f 	dsb	sy
}
 8012950:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012952:	4b04      	ldr	r3, [pc, #16]	@ (8012964 <__NVIC_SystemReset+0x1c>)
 8012954:	4a04      	ldr	r2, [pc, #16]	@ (8012968 <__NVIC_SystemReset+0x20>)
 8012956:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012958:	f3bf 8f4f 	dsb	sy
}
 801295c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801295e:	46c0      	nop			@ (mov r8, r8)
 8012960:	e7fd      	b.n	801295e <__NVIC_SystemReset+0x16>
 8012962:	46c0      	nop			@ (mov r8, r8)
 8012964:	e000ed00 	.word	0xe000ed00
 8012968:	05fa0004 	.word	0x05fa0004

0801296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	1e5a      	subs	r2, r3, #1
 8012978:	2380      	movs	r3, #128	@ 0x80
 801297a:	045b      	lsls	r3, r3, #17
 801297c:	429a      	cmp	r2, r3
 801297e:	d301      	bcc.n	8012984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012980:	2301      	movs	r3, #1
 8012982:	e010      	b.n	80129a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012984:	4b0a      	ldr	r3, [pc, #40]	@ (80129b0 <SysTick_Config+0x44>)
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	3a01      	subs	r2, #1
 801298a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801298c:	2301      	movs	r3, #1
 801298e:	425b      	negs	r3, r3
 8012990:	2103      	movs	r1, #3
 8012992:	0018      	movs	r0, r3
 8012994:	f7ff ff6a 	bl	801286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012998:	4b05      	ldr	r3, [pc, #20]	@ (80129b0 <SysTick_Config+0x44>)
 801299a:	2200      	movs	r2, #0
 801299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801299e:	4b04      	ldr	r3, [pc, #16]	@ (80129b0 <SysTick_Config+0x44>)
 80129a0:	2207      	movs	r2, #7
 80129a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80129a4:	2300      	movs	r3, #0
}
 80129a6:	0018      	movs	r0, r3
 80129a8:	46bd      	mov	sp, r7
 80129aa:	b002      	add	sp, #8
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	46c0      	nop			@ (mov r8, r8)
 80129b0:	e000e010 	.word	0xe000e010

080129b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60b9      	str	r1, [r7, #8]
 80129bc:	607a      	str	r2, [r7, #4]
 80129be:	210f      	movs	r1, #15
 80129c0:	187b      	adds	r3, r7, r1
 80129c2:	1c02      	adds	r2, r0, #0
 80129c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	187b      	adds	r3, r7, r1
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	b25b      	sxtb	r3, r3
 80129ce:	0011      	movs	r1, r2
 80129d0:	0018      	movs	r0, r3
 80129d2:	f7ff ff4b 	bl	801286c <__NVIC_SetPriority>
}
 80129d6:	46c0      	nop			@ (mov r8, r8)
 80129d8:	46bd      	mov	sp, r7
 80129da:	b004      	add	sp, #16
 80129dc:	bd80      	pop	{r7, pc}

080129de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80129de:	b580      	push	{r7, lr}
 80129e0:	b082      	sub	sp, #8
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	0002      	movs	r2, r0
 80129e6:	1dfb      	adds	r3, r7, #7
 80129e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80129ea:	1dfb      	adds	r3, r7, #7
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	b25b      	sxtb	r3, r3
 80129f0:	0018      	movs	r0, r3
 80129f2:	f7ff ff21 	bl	8012838 <__NVIC_EnableIRQ>
}
 80129f6:	46c0      	nop			@ (mov r8, r8)
 80129f8:	46bd      	mov	sp, r7
 80129fa:	b002      	add	sp, #8
 80129fc:	bd80      	pop	{r7, pc}

080129fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8012a02:	f7ff ffa1 	bl	8012948 <__NVIC_SystemReset>

08012a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	0018      	movs	r0, r3
 8012a12:	f7ff ffab 	bl	801296c <SysTick_Config>
 8012a16:	0003      	movs	r3, r0
}
 8012a18:	0018      	movs	r0, r3
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	b002      	add	sp, #8
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d101      	bne.n	8012a32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e061      	b.n	8012af6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	4a32      	ldr	r2, [pc, #200]	@ (8012b00 <HAL_DMA_Init+0xe0>)
 8012a38:	4694      	mov	ip, r2
 8012a3a:	4463      	add	r3, ip
 8012a3c:	2114      	movs	r1, #20
 8012a3e:	0018      	movs	r0, r3
 8012a40:	f7ed fbb0 	bl	80001a4 <__udivsi3>
 8012a44:	0003      	movs	r3, r0
 8012a46:	009a      	lsls	r2, r3, #2
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8012b04 <HAL_DMA_Init+0xe4>)
 8012a50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2225      	movs	r2, #37	@ 0x25
 8012a56:	2102      	movs	r1, #2
 8012a58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	4a28      	ldr	r2, [pc, #160]	@ (8012b08 <HAL_DMA_Init+0xe8>)
 8012a66:	4013      	ands	r3, r2
 8012a68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8012a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	691b      	ldr	r3, [r3, #16]
 8012a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	699b      	ldr	r3, [r3, #24]
 8012a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6a1b      	ldr	r3, [r3, #32]
 8012a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	4313      	orrs	r3, r2
 8012a96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	2380      	movs	r3, #128	@ 0x80
 8012aa6:	01db      	lsls	r3, r3, #7
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d018      	beq.n	8012ade <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8012aac:	4b17      	ldr	r3, [pc, #92]	@ (8012b0c <HAL_DMA_Init+0xec>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ab4:	211c      	movs	r1, #28
 8012ab6:	400b      	ands	r3, r1
 8012ab8:	210f      	movs	r1, #15
 8012aba:	4099      	lsls	r1, r3
 8012abc:	000b      	movs	r3, r1
 8012abe:	43d9      	mvns	r1, r3
 8012ac0:	4b12      	ldr	r3, [pc, #72]	@ (8012b0c <HAL_DMA_Init+0xec>)
 8012ac2:	400a      	ands	r2, r1
 8012ac4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8012ac6:	4b11      	ldr	r3, [pc, #68]	@ (8012b0c <HAL_DMA_Init+0xec>)
 8012ac8:	6819      	ldr	r1, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ad2:	201c      	movs	r0, #28
 8012ad4:	4003      	ands	r3, r0
 8012ad6:	409a      	lsls	r2, r3
 8012ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8012b0c <HAL_DMA_Init+0xec>)
 8012ada:	430a      	orrs	r2, r1
 8012adc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2225      	movs	r2, #37	@ 0x25
 8012ae8:	2101      	movs	r1, #1
 8012aea:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2224      	movs	r2, #36	@ 0x24
 8012af0:	2100      	movs	r1, #0
 8012af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012af4:	2300      	movs	r3, #0
}
 8012af6:	0018      	movs	r0, r3
 8012af8:	46bd      	mov	sp, r7
 8012afa:	b004      	add	sp, #16
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	46c0      	nop			@ (mov r8, r8)
 8012b00:	bffdfff8 	.word	0xbffdfff8
 8012b04:	40020000 	.word	0x40020000
 8012b08:	ffff800f 	.word	0xffff800f
 8012b0c:	400200a8 	.word	0x400200a8

08012b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
 8012b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b1e:	2317      	movs	r3, #23
 8012b20:	18fb      	adds	r3, r7, r3
 8012b22:	2200      	movs	r2, #0
 8012b24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2224      	movs	r2, #36	@ 0x24
 8012b2a:	5c9b      	ldrb	r3, [r3, r2]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d101      	bne.n	8012b34 <HAL_DMA_Start_IT+0x24>
 8012b30:	2302      	movs	r3, #2
 8012b32:	e04f      	b.n	8012bd4 <HAL_DMA_Start_IT+0xc4>
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	2224      	movs	r2, #36	@ 0x24
 8012b38:	2101      	movs	r1, #1
 8012b3a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	2225      	movs	r2, #37	@ 0x25
 8012b40:	5c9b      	ldrb	r3, [r3, r2]
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d13a      	bne.n	8012bbe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2225      	movs	r2, #37	@ 0x25
 8012b4c:	2102      	movs	r1, #2
 8012b4e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2200      	movs	r2, #0
 8012b54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2101      	movs	r1, #1
 8012b62:	438a      	bics	r2, r1
 8012b64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	68b9      	ldr	r1, [r7, #8]
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f000 f976 	bl	8012e5e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d008      	beq.n	8012b8c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	210e      	movs	r1, #14
 8012b86:	430a      	orrs	r2, r1
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	e00f      	b.n	8012bac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2104      	movs	r1, #4
 8012b98:	438a      	bics	r2, r1
 8012b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	210a      	movs	r1, #10
 8012ba8:	430a      	orrs	r2, r1
 8012baa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	430a      	orrs	r2, r1
 8012bba:	601a      	str	r2, [r3, #0]
 8012bbc:	e007      	b.n	8012bce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2224      	movs	r2, #36	@ 0x24
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8012bc6:	2317      	movs	r3, #23
 8012bc8:	18fb      	adds	r3, r7, r3
 8012bca:	2202      	movs	r2, #2
 8012bcc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8012bce:	2317      	movs	r3, #23
 8012bd0:	18fb      	adds	r3, r7, r3
 8012bd2:	781b      	ldrb	r3, [r3, #0]
}
 8012bd4:	0018      	movs	r0, r3
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	b006      	add	sp, #24
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012be4:	230f      	movs	r3, #15
 8012be6:	18fb      	adds	r3, r7, r3
 8012be8:	2200      	movs	r2, #0
 8012bea:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2225      	movs	r2, #37	@ 0x25
 8012bf0:	5c9b      	ldrb	r3, [r3, r2]
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d008      	beq.n	8012c0a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2204      	movs	r2, #4
 8012bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2224      	movs	r2, #36	@ 0x24
 8012c02:	2100      	movs	r1, #0
 8012c04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8012c06:	2301      	movs	r3, #1
 8012c08:	e024      	b.n	8012c54 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	210e      	movs	r1, #14
 8012c16:	438a      	bics	r2, r1
 8012c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2101      	movs	r1, #1
 8012c26:	438a      	bics	r2, r1
 8012c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c2e:	221c      	movs	r2, #28
 8012c30:	401a      	ands	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c36:	2101      	movs	r1, #1
 8012c38:	4091      	lsls	r1, r2
 8012c3a:	000a      	movs	r2, r1
 8012c3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2225      	movs	r2, #37	@ 0x25
 8012c42:	2101      	movs	r1, #1
 8012c44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2224      	movs	r2, #36	@ 0x24
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	5499      	strb	r1, [r3, r2]

    return status;
 8012c4e:	230f      	movs	r3, #15
 8012c50:	18fb      	adds	r3, r7, r3
 8012c52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c54:	0018      	movs	r0, r3
 8012c56:	46bd      	mov	sp, r7
 8012c58:	b004      	add	sp, #16
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c64:	210f      	movs	r1, #15
 8012c66:	187b      	adds	r3, r7, r1
 8012c68:	2200      	movs	r2, #0
 8012c6a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2225      	movs	r2, #37	@ 0x25
 8012c70:	5c9b      	ldrb	r3, [r3, r2]
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d006      	beq.n	8012c86 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2204      	movs	r2, #4
 8012c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012c7e:	187b      	adds	r3, r7, r1
 8012c80:	2201      	movs	r2, #1
 8012c82:	701a      	strb	r2, [r3, #0]
 8012c84:	e02a      	b.n	8012cdc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	210e      	movs	r1, #14
 8012c92:	438a      	bics	r2, r1
 8012c94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	438a      	bics	r2, r1
 8012ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012caa:	221c      	movs	r2, #28
 8012cac:	401a      	ands	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cb2:	2101      	movs	r1, #1
 8012cb4:	4091      	lsls	r1, r2
 8012cb6:	000a      	movs	r2, r1
 8012cb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2225      	movs	r2, #37	@ 0x25
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2224      	movs	r2, #36	@ 0x24
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d004      	beq.n	8012cdc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	0010      	movs	r0, r2
 8012cda:	4798      	blx	r3
    }
  }
  return status;
 8012cdc:	230f      	movs	r3, #15
 8012cde:	18fb      	adds	r3, r7, r3
 8012ce0:	781b      	ldrb	r3, [r3, #0]
}
 8012ce2:	0018      	movs	r0, r3
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	b004      	add	sp, #16
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b084      	sub	sp, #16
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d06:	221c      	movs	r2, #28
 8012d08:	4013      	ands	r3, r2
 8012d0a:	2204      	movs	r2, #4
 8012d0c:	409a      	lsls	r2, r3
 8012d0e:	0013      	movs	r3, r2
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	4013      	ands	r3, r2
 8012d14:	d026      	beq.n	8012d64 <HAL_DMA_IRQHandler+0x7a>
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	2204      	movs	r2, #4
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	d022      	beq.n	8012d64 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2220      	movs	r2, #32
 8012d26:	4013      	ands	r3, r2
 8012d28:	d107      	bne.n	8012d3a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	2104      	movs	r1, #4
 8012d36:	438a      	bics	r2, r1
 8012d38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d3e:	221c      	movs	r2, #28
 8012d40:	401a      	ands	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d46:	2104      	movs	r1, #4
 8012d48:	4091      	lsls	r1, r2
 8012d4a:	000a      	movs	r2, r1
 8012d4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d100      	bne.n	8012d58 <HAL_DMA_IRQHandler+0x6e>
 8012d56:	e071      	b.n	8012e3c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	0010      	movs	r0, r2
 8012d60:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8012d62:	e06b      	b.n	8012e3c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d68:	221c      	movs	r2, #28
 8012d6a:	4013      	ands	r3, r2
 8012d6c:	2202      	movs	r2, #2
 8012d6e:	409a      	lsls	r2, r3
 8012d70:	0013      	movs	r3, r2
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	4013      	ands	r3, r2
 8012d76:	d02d      	beq.n	8012dd4 <HAL_DMA_IRQHandler+0xea>
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	2202      	movs	r2, #2
 8012d7c:	4013      	ands	r3, r2
 8012d7e:	d029      	beq.n	8012dd4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	2220      	movs	r2, #32
 8012d88:	4013      	ands	r3, r2
 8012d8a:	d10b      	bne.n	8012da4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	210a      	movs	r1, #10
 8012d98:	438a      	bics	r2, r1
 8012d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2225      	movs	r2, #37	@ 0x25
 8012da0:	2101      	movs	r1, #1
 8012da2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012da8:	221c      	movs	r2, #28
 8012daa:	401a      	ands	r2, r3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012db0:	2102      	movs	r1, #2
 8012db2:	4091      	lsls	r1, r2
 8012db4:	000a      	movs	r2, r1
 8012db6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2224      	movs	r2, #36	@ 0x24
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d039      	beq.n	8012e3c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	0010      	movs	r0, r2
 8012dd0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8012dd2:	e033      	b.n	8012e3c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dd8:	221c      	movs	r2, #28
 8012dda:	4013      	ands	r3, r2
 8012ddc:	2208      	movs	r2, #8
 8012dde:	409a      	lsls	r2, r3
 8012de0:	0013      	movs	r3, r2
 8012de2:	68fa      	ldr	r2, [r7, #12]
 8012de4:	4013      	ands	r3, r2
 8012de6:	d02a      	beq.n	8012e3e <HAL_DMA_IRQHandler+0x154>
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	2208      	movs	r2, #8
 8012dec:	4013      	ands	r3, r2
 8012dee:	d026      	beq.n	8012e3e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	210e      	movs	r1, #14
 8012dfc:	438a      	bics	r2, r1
 8012dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e04:	221c      	movs	r2, #28
 8012e06:	401a      	ands	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	4091      	lsls	r1, r2
 8012e10:	000a      	movs	r2, r1
 8012e12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2225      	movs	r2, #37	@ 0x25
 8012e1e:	2101      	movs	r1, #1
 8012e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2224      	movs	r2, #36	@ 0x24
 8012e26:	2100      	movs	r1, #0
 8012e28:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d005      	beq.n	8012e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	0010      	movs	r0, r2
 8012e3a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012e3c:	46c0      	nop			@ (mov r8, r8)
 8012e3e:	46c0      	nop			@ (mov r8, r8)
}
 8012e40:	46bd      	mov	sp, r7
 8012e42:	b004      	add	sp, #16
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b082      	sub	sp, #8
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2225      	movs	r2, #37	@ 0x25
 8012e52:	5c9b      	ldrb	r3, [r3, r2]
 8012e54:	b2db      	uxtb	r3, r3
}
 8012e56:	0018      	movs	r0, r3
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	b002      	add	sp, #8
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b084      	sub	sp, #16
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	60f8      	str	r0, [r7, #12]
 8012e66:	60b9      	str	r1, [r7, #8]
 8012e68:	607a      	str	r2, [r7, #4]
 8012e6a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e70:	221c      	movs	r2, #28
 8012e72:	401a      	ands	r2, r3
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e78:	2101      	movs	r1, #1
 8012e7a:	4091      	lsls	r1, r2
 8012e7c:	000a      	movs	r2, r1
 8012e7e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	689b      	ldr	r3, [r3, #8]
 8012e8c:	2b10      	cmp	r3, #16
 8012e8e:	d108      	bne.n	8012ea2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012ea0:	e007      	b.n	8012eb2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	68ba      	ldr	r2, [r7, #8]
 8012ea8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	60da      	str	r2, [r3, #12]
}
 8012eb2:	46c0      	nop			@ (mov r8, r8)
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	b004      	add	sp, #16
 8012eb8:	bd80      	pop	{r7, pc}
	...

08012ebc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8012ec4:	f7ff f8d2 	bl	801206c <HAL_GetTick>
 8012ec8:	0003      	movs	r3, r0
 8012eca:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012ecc:	e00f      	b.n	8012eee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	d00c      	beq.n	8012eee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d007      	beq.n	8012eea <FLASH_WaitForLastOperation+0x2e>
 8012eda:	f7ff f8c7 	bl	801206c <HAL_GetTick>
 8012ede:	0002      	movs	r2, r0
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d201      	bcs.n	8012eee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8012eea:	2303      	movs	r3, #3
 8012eec:	e052      	b.n	8012f94 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012eee:	4b2b      	ldr	r3, [pc, #172]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012ef0:	699b      	ldr	r3, [r3, #24]
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	4013      	ands	r3, r2
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d0e9      	beq.n	8012ece <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012efa:	4b28      	ldr	r3, [pc, #160]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012efc:	699b      	ldr	r3, [r3, #24]
 8012efe:	2202      	movs	r2, #2
 8012f00:	4013      	ands	r3, r2
 8012f02:	2b02      	cmp	r3, #2
 8012f04:	d102      	bne.n	8012f0c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012f06:	4b25      	ldr	r3, [pc, #148]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f08:	2202      	movs	r2, #2
 8012f0a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012f0c:	4b23      	ldr	r3, [pc, #140]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f0e:	699a      	ldr	r2, [r3, #24]
 8012f10:	2380      	movs	r3, #128	@ 0x80
 8012f12:	005b      	lsls	r3, r3, #1
 8012f14:	401a      	ands	r2, r3
 8012f16:	2380      	movs	r3, #128	@ 0x80
 8012f18:	005b      	lsls	r3, r3, #1
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d035      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f20:	699a      	ldr	r2, [r3, #24]
 8012f22:	2380      	movs	r3, #128	@ 0x80
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012f28:	2380      	movs	r3, #128	@ 0x80
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d02c      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012f30:	4b1a      	ldr	r3, [pc, #104]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f32:	699a      	ldr	r2, [r3, #24]
 8012f34:	2380      	movs	r3, #128	@ 0x80
 8012f36:	00db      	lsls	r3, r3, #3
 8012f38:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012f3a:	2380      	movs	r3, #128	@ 0x80
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d023      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012f42:	4b16      	ldr	r3, [pc, #88]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f44:	699a      	ldr	r2, [r3, #24]
 8012f46:	2380      	movs	r3, #128	@ 0x80
 8012f48:	011b      	lsls	r3, r3, #4
 8012f4a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012f4c:	2380      	movs	r3, #128	@ 0x80
 8012f4e:	011b      	lsls	r3, r3, #4
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d01a      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012f54:	4b11      	ldr	r3, [pc, #68]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f56:	699a      	ldr	r2, [r3, #24]
 8012f58:	2380      	movs	r3, #128	@ 0x80
 8012f5a:	019b      	lsls	r3, r3, #6
 8012f5c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012f5e:	2380      	movs	r3, #128	@ 0x80
 8012f60:	019b      	lsls	r3, r3, #6
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d011      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012f66:	4b0d      	ldr	r3, [pc, #52]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f68:	699a      	ldr	r2, [r3, #24]
 8012f6a:	2380      	movs	r3, #128	@ 0x80
 8012f6c:	029b      	lsls	r3, r3, #10
 8012f6e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012f70:	2380      	movs	r3, #128	@ 0x80
 8012f72:	029b      	lsls	r3, r3, #10
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d008      	beq.n	8012f8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8012f78:	4b08      	ldr	r3, [pc, #32]	@ (8012f9c <FLASH_WaitForLastOperation+0xe0>)
 8012f7a:	699a      	ldr	r2, [r3, #24]
 8012f7c:	2380      	movs	r3, #128	@ 0x80
 8012f7e:	025b      	lsls	r3, r3, #9
 8012f80:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012f82:	2380      	movs	r3, #128	@ 0x80
 8012f84:	025b      	lsls	r3, r3, #9
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d103      	bne.n	8012f92 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8012f8a:	f000 f809 	bl	8012fa0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	e000      	b.n	8012f94 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	0018      	movs	r0, r3
 8012f96:	46bd      	mov	sp, r7
 8012f98:	b004      	add	sp, #16
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	40022000 	.word	0x40022000

08012fa0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8012faa:	4b49      	ldr	r3, [pc, #292]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 8012fac:	699a      	ldr	r2, [r3, #24]
 8012fae:	2380      	movs	r3, #128	@ 0x80
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	401a      	ands	r2, r3
 8012fb4:	2380      	movs	r3, #128	@ 0x80
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d10a      	bne.n	8012fd2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012fbc:	4b45      	ldr	r3, [pc, #276]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8012fbe:	695b      	ldr	r3, [r3, #20]
 8012fc0:	2202      	movs	r2, #2
 8012fc2:	431a      	orrs	r2, r3
 8012fc4:	4b43      	ldr	r3, [pc, #268]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8012fc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2280      	movs	r2, #128	@ 0x80
 8012fcc:	0052      	lsls	r2, r2, #1
 8012fce:	4313      	orrs	r3, r2
 8012fd0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8012fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 8012fd4:	699a      	ldr	r2, [r3, #24]
 8012fd6:	2380      	movs	r3, #128	@ 0x80
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	401a      	ands	r2, r3
 8012fdc:	2380      	movs	r3, #128	@ 0x80
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d10a      	bne.n	8012ffa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8012fe6:	695b      	ldr	r3, [r3, #20]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	431a      	orrs	r2, r3
 8012fec:	4b39      	ldr	r3, [pc, #228]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8012fee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2280      	movs	r2, #128	@ 0x80
 8012ff4:	0092      	lsls	r2, r2, #2
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8012ffa:	4b35      	ldr	r3, [pc, #212]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 8012ffc:	699a      	ldr	r2, [r3, #24]
 8012ffe:	2380      	movs	r3, #128	@ 0x80
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	401a      	ands	r2, r3
 8013004:	2380      	movs	r3, #128	@ 0x80
 8013006:	00db      	lsls	r3, r3, #3
 8013008:	429a      	cmp	r2, r3
 801300a:	d10a      	bne.n	8013022 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 801300c:	4b31      	ldr	r3, [pc, #196]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 801300e:	695b      	ldr	r3, [r3, #20]
 8013010:	2208      	movs	r2, #8
 8013012:	431a      	orrs	r2, r3
 8013014:	4b2f      	ldr	r3, [pc, #188]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8013016:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2280      	movs	r2, #128	@ 0x80
 801301c:	00d2      	lsls	r2, r2, #3
 801301e:	4313      	orrs	r3, r2
 8013020:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8013022:	4b2b      	ldr	r3, [pc, #172]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 8013024:	699a      	ldr	r2, [r3, #24]
 8013026:	2380      	movs	r3, #128	@ 0x80
 8013028:	011b      	lsls	r3, r3, #4
 801302a:	401a      	ands	r2, r3
 801302c:	2380      	movs	r3, #128	@ 0x80
 801302e:	011b      	lsls	r3, r3, #4
 8013030:	429a      	cmp	r2, r3
 8013032:	d10a      	bne.n	801304a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8013034:	4b27      	ldr	r3, [pc, #156]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8013036:	695b      	ldr	r3, [r3, #20]
 8013038:	2204      	movs	r2, #4
 801303a:	431a      	orrs	r2, r3
 801303c:	4b25      	ldr	r3, [pc, #148]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 801303e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2280      	movs	r2, #128	@ 0x80
 8013044:	0112      	lsls	r2, r2, #4
 8013046:	4313      	orrs	r3, r2
 8013048:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801304a:	4b21      	ldr	r3, [pc, #132]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 801304c:	699a      	ldr	r2, [r3, #24]
 801304e:	2380      	movs	r3, #128	@ 0x80
 8013050:	019b      	lsls	r3, r3, #6
 8013052:	401a      	ands	r2, r3
 8013054:	2380      	movs	r3, #128	@ 0x80
 8013056:	019b      	lsls	r3, r3, #6
 8013058:	429a      	cmp	r2, r3
 801305a:	d10a      	bne.n	8013072 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801305c:	4b1d      	ldr	r3, [pc, #116]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 801305e:	695b      	ldr	r3, [r3, #20]
 8013060:	2210      	movs	r2, #16
 8013062:	431a      	orrs	r2, r3
 8013064:	4b1b      	ldr	r3, [pc, #108]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8013066:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2280      	movs	r2, #128	@ 0x80
 801306c:	0192      	lsls	r2, r2, #6
 801306e:	4313      	orrs	r3, r2
 8013070:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8013072:	4b17      	ldr	r3, [pc, #92]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 8013074:	699a      	ldr	r2, [r3, #24]
 8013076:	2380      	movs	r3, #128	@ 0x80
 8013078:	029b      	lsls	r3, r3, #10
 801307a:	401a      	ands	r2, r3
 801307c:	2380      	movs	r3, #128	@ 0x80
 801307e:	029b      	lsls	r3, r3, #10
 8013080:	429a      	cmp	r2, r3
 8013082:	d109      	bne.n	8013098 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8013084:	4b13      	ldr	r3, [pc, #76]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	2220      	movs	r2, #32
 801308a:	431a      	orrs	r2, r3
 801308c:	4b11      	ldr	r3, [pc, #68]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 801308e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2220      	movs	r2, #32
 8013094:	4313      	orrs	r3, r2
 8013096:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8013098:	4b0d      	ldr	r3, [pc, #52]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 801309a:	699a      	ldr	r2, [r3, #24]
 801309c:	2380      	movs	r3, #128	@ 0x80
 801309e:	025b      	lsls	r3, r3, #9
 80130a0:	401a      	ands	r2, r3
 80130a2:	2380      	movs	r3, #128	@ 0x80
 80130a4:	025b      	lsls	r3, r3, #9
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d10a      	bne.n	80130c0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80130aa:	4b0a      	ldr	r3, [pc, #40]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	2240      	movs	r2, #64	@ 0x40
 80130b0:	431a      	orrs	r2, r3
 80130b2:	4b08      	ldr	r3, [pc, #32]	@ (80130d4 <FLASH_SetErrorCode+0x134>)
 80130b4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2280      	movs	r2, #128	@ 0x80
 80130ba:	0252      	lsls	r2, r2, #9
 80130bc:	4313      	orrs	r3, r2
 80130be:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80130c0:	4b03      	ldr	r3, [pc, #12]	@ (80130d0 <FLASH_SetErrorCode+0x130>)
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	619a      	str	r2, [r3, #24]
}  
 80130c6:	46c0      	nop			@ (mov r8, r8)
 80130c8:	46bd      	mov	sp, r7
 80130ca:	b002      	add	sp, #8
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	46c0      	nop			@ (mov r8, r8)
 80130d0:	40022000 	.word	0x40022000
 80130d4:	200021f0 	.word	0x200021f0

080130d8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80130de:	4b12      	ldr	r3, [pc, #72]	@ (8013128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	2201      	movs	r2, #1
 80130e4:	4013      	ands	r3, r2
 80130e6:	d019      	beq.n	801311c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130e8:	f3ef 8310 	mrs	r3, PRIMASK
 80130ec:	607b      	str	r3, [r7, #4]
  return(result);
 80130ee:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80130f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80130f2:	b672      	cpsid	i
}
 80130f4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80130f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80130f8:	4a0c      	ldr	r2, [pc, #48]	@ (801312c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80130fa:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80130fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80130fe:	4a0c      	ldr	r2, [pc, #48]	@ (8013130 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8013100:	60da      	str	r2, [r3, #12]
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	f383 8810 	msr	PRIMASK, r3
}
 801310c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801310e:	4b06      	ldr	r3, [pc, #24]	@ (8013128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	2201      	movs	r2, #1
 8013114:	4013      	ands	r3, r2
 8013116:	d001      	beq.n	801311c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8013118:	2301      	movs	r3, #1
 801311a:	e000      	b.n	801311e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 801311c:	2300      	movs	r3, #0
}
 801311e:	0018      	movs	r0, r3
 8013120:	46bd      	mov	sp, r7
 8013122:	b004      	add	sp, #16
 8013124:	bd80      	pop	{r7, pc}
 8013126:	46c0      	nop			@ (mov r8, r8)
 8013128:	40022000 	.word	0x40022000
 801312c:	89abcdef 	.word	0x89abcdef
 8013130:	02030405 	.word	0x02030405

08013134 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8013138:	4b04      	ldr	r3, [pc, #16]	@ (801314c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801313a:	685a      	ldr	r2, [r3, #4]
 801313c:	4b03      	ldr	r3, [pc, #12]	@ (801314c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801313e:	2101      	movs	r1, #1
 8013140:	430a      	orrs	r2, r1
 8013142:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8013144:	2300      	movs	r3, #0
}
 8013146:	0018      	movs	r0, r3
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	40022000 	.word	0x40022000

08013150 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8013150:	b5b0      	push	{r4, r5, r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013158:	250f      	movs	r5, #15
 801315a:	197b      	adds	r3, r7, r5
 801315c:	2200      	movs	r2, #0
 801315e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013160:	197c      	adds	r4, r7, r5
 8013162:	4b0f      	ldr	r3, [pc, #60]	@ (80131a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8013164:	0018      	movs	r0, r3
 8013166:	f7ff fea9 	bl	8012ebc <FLASH_WaitForLastOperation>
 801316a:	0003      	movs	r3, r0
 801316c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801316e:	0029      	movs	r1, r5
 8013170:	187b      	adds	r3, r7, r1
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d10c      	bne.n	8013192 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013178:	4b0a      	ldr	r3, [pc, #40]	@ (80131a4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801317a:	2200      	movs	r2, #0
 801317c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2200      	movs	r2, #0
 8013182:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013184:	187c      	adds	r4, r7, r1
 8013186:	4b06      	ldr	r3, [pc, #24]	@ (80131a0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8013188:	0018      	movs	r0, r3
 801318a:	f7ff fe97 	bl	8012ebc <FLASH_WaitForLastOperation>
 801318e:	0003      	movs	r3, r0
 8013190:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8013192:	230f      	movs	r3, #15
 8013194:	18fb      	adds	r3, r7, r3
 8013196:	781b      	ldrb	r3, [r3, #0]
}  
 8013198:	0018      	movs	r0, r3
 801319a:	46bd      	mov	sp, r7
 801319c:	b004      	add	sp, #16
 801319e:	bdb0      	pop	{r4, r5, r7, pc}
 80131a0:	0000c350 	.word	0x0000c350
 80131a4:	200021f0 	.word	0x200021f0

080131a8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80131a8:	b5b0      	push	{r4, r5, r7, lr}
 80131aa:	b086      	sub	sp, #24
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80131b4:	2317      	movs	r3, #23
 80131b6:	18fb      	adds	r3, r7, r3
 80131b8:	2201      	movs	r2, #1
 80131ba:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80131bc:	4b24      	ldr	r3, [pc, #144]	@ (8013250 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80131be:	7c1b      	ldrb	r3, [r3, #16]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d101      	bne.n	80131c8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80131c4:	2302      	movs	r3, #2
 80131c6:	e03e      	b.n	8013246 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80131c8:	4b21      	ldr	r3, [pc, #132]	@ (8013250 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80131ca:	2201      	movs	r2, #1
 80131cc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80131ce:	2517      	movs	r5, #23
 80131d0:	197c      	adds	r4, r7, r5
 80131d2:	4b20      	ldr	r3, [pc, #128]	@ (8013254 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80131d4:	0018      	movs	r0, r3
 80131d6:	f7ff fe71 	bl	8012ebc <FLASH_WaitForLastOperation>
 80131da:	0003      	movs	r3, r0
 80131dc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80131de:	197b      	adds	r3, r7, r5
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d129      	bne.n	801323a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80131e6:	4b1a      	ldr	r3, [pc, #104]	@ (8013250 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b02      	cmp	r3, #2
 80131f0:	d103      	bne.n	80131fa <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	601a      	str	r2, [r3, #0]
 80131f8:	e013      	b.n	8013222 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	d104      	bne.n	801320a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	b292      	uxth	r2, r2
 8013206:	801a      	strh	r2, [r3, #0]
 8013208:	e00b      	b.n	8013222 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d104      	bne.n	801321a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	b2d2      	uxtb	r2, r2
 8013216:	701a      	strb	r2, [r3, #0]
 8013218:	e003      	b.n	8013222 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 801321a:	2317      	movs	r3, #23
 801321c:	18fb      	adds	r3, r7, r3
 801321e:	2201      	movs	r2, #1
 8013220:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8013222:	2217      	movs	r2, #23
 8013224:	18bb      	adds	r3, r7, r2
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d106      	bne.n	801323a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801322c:	18bc      	adds	r4, r7, r2
 801322e:	4b09      	ldr	r3, [pc, #36]	@ (8013254 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8013230:	0018      	movs	r0, r3
 8013232:	f7ff fe43 	bl	8012ebc <FLASH_WaitForLastOperation>
 8013236:	0003      	movs	r3, r0
 8013238:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801323a:	4b05      	ldr	r3, [pc, #20]	@ (8013250 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801323c:	2200      	movs	r2, #0
 801323e:	741a      	strb	r2, [r3, #16]

  return status;
 8013240:	2317      	movs	r3, #23
 8013242:	18fb      	adds	r3, r7, r3
 8013244:	781b      	ldrb	r3, [r3, #0]
}
 8013246:	0018      	movs	r0, r3
 8013248:	46bd      	mov	sp, r7
 801324a:	b006      	add	sp, #24
 801324c:	bdb0      	pop	{r4, r5, r7, pc}
 801324e:	46c0      	nop			@ (mov r8, r8)
 8013250:	200021f0 	.word	0x200021f0
 8013254:	0000c350 	.word	0x0000c350

08013258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013262:	2300      	movs	r3, #0
 8013264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013266:	2300      	movs	r3, #0
 8013268:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801326a:	2300      	movs	r3, #0
 801326c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801326e:	e155      	b.n	801351c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2101      	movs	r1, #1
 8013276:	697a      	ldr	r2, [r7, #20]
 8013278:	4091      	lsls	r1, r2
 801327a:	000a      	movs	r2, r1
 801327c:	4013      	ands	r3, r2
 801327e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d100      	bne.n	8013288 <HAL_GPIO_Init+0x30>
 8013286:	e146      	b.n	8013516 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	2203      	movs	r2, #3
 801328e:	4013      	ands	r3, r2
 8013290:	2b01      	cmp	r3, #1
 8013292:	d005      	beq.n	80132a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	2203      	movs	r2, #3
 801329a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801329c:	2b02      	cmp	r3, #2
 801329e:	d130      	bne.n	8013302 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	689b      	ldr	r3, [r3, #8]
 80132a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	005b      	lsls	r3, r3, #1
 80132aa:	2203      	movs	r2, #3
 80132ac:	409a      	lsls	r2, r3
 80132ae:	0013      	movs	r3, r2
 80132b0:	43da      	mvns	r2, r3
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	4013      	ands	r3, r2
 80132b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	68da      	ldr	r2, [r3, #12]
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	005b      	lsls	r3, r3, #1
 80132c0:	409a      	lsls	r2, r3
 80132c2:	0013      	movs	r3, r2
 80132c4:	693a      	ldr	r2, [r7, #16]
 80132c6:	4313      	orrs	r3, r2
 80132c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	693a      	ldr	r2, [r7, #16]
 80132ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80132d6:	2201      	movs	r2, #1
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	409a      	lsls	r2, r3
 80132dc:	0013      	movs	r3, r2
 80132de:	43da      	mvns	r2, r3
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	4013      	ands	r3, r2
 80132e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	091b      	lsrs	r3, r3, #4
 80132ec:	2201      	movs	r2, #1
 80132ee:	401a      	ands	r2, r3
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	409a      	lsls	r2, r3
 80132f4:	0013      	movs	r3, r2
 80132f6:	693a      	ldr	r2, [r7, #16]
 80132f8:	4313      	orrs	r3, r2
 80132fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	693a      	ldr	r2, [r7, #16]
 8013300:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	2203      	movs	r2, #3
 8013308:	4013      	ands	r3, r2
 801330a:	2b03      	cmp	r3, #3
 801330c:	d017      	beq.n	801333e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	68db      	ldr	r3, [r3, #12]
 8013312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	005b      	lsls	r3, r3, #1
 8013318:	2203      	movs	r2, #3
 801331a:	409a      	lsls	r2, r3
 801331c:	0013      	movs	r3, r2
 801331e:	43da      	mvns	r2, r3
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	4013      	ands	r3, r2
 8013324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	689a      	ldr	r2, [r3, #8]
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	409a      	lsls	r2, r3
 8013330:	0013      	movs	r3, r2
 8013332:	693a      	ldr	r2, [r7, #16]
 8013334:	4313      	orrs	r3, r2
 8013336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	693a      	ldr	r2, [r7, #16]
 801333c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	2203      	movs	r2, #3
 8013344:	4013      	ands	r3, r2
 8013346:	2b02      	cmp	r3, #2
 8013348:	d123      	bne.n	8013392 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	08da      	lsrs	r2, r3, #3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	3208      	adds	r2, #8
 8013352:	0092      	lsls	r2, r2, #2
 8013354:	58d3      	ldr	r3, [r2, r3]
 8013356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	2207      	movs	r2, #7
 801335c:	4013      	ands	r3, r2
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	220f      	movs	r2, #15
 8013362:	409a      	lsls	r2, r3
 8013364:	0013      	movs	r3, r2
 8013366:	43da      	mvns	r2, r3
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	4013      	ands	r3, r2
 801336c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	691a      	ldr	r2, [r3, #16]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	2107      	movs	r1, #7
 8013376:	400b      	ands	r3, r1
 8013378:	009b      	lsls	r3, r3, #2
 801337a:	409a      	lsls	r2, r3
 801337c:	0013      	movs	r3, r2
 801337e:	693a      	ldr	r2, [r7, #16]
 8013380:	4313      	orrs	r3, r2
 8013382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	08da      	lsrs	r2, r3, #3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3208      	adds	r2, #8
 801338c:	0092      	lsls	r2, r2, #2
 801338e:	6939      	ldr	r1, [r7, #16]
 8013390:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	2203      	movs	r2, #3
 801339e:	409a      	lsls	r2, r3
 80133a0:	0013      	movs	r3, r2
 80133a2:	43da      	mvns	r2, r3
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	4013      	ands	r3, r2
 80133a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	2203      	movs	r2, #3
 80133b0:	401a      	ands	r2, r3
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	409a      	lsls	r2, r3
 80133b8:	0013      	movs	r3, r2
 80133ba:	693a      	ldr	r2, [r7, #16]
 80133bc:	4313      	orrs	r3, r2
 80133be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	693a      	ldr	r2, [r7, #16]
 80133c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	685a      	ldr	r2, [r3, #4]
 80133ca:	23c0      	movs	r3, #192	@ 0xc0
 80133cc:	029b      	lsls	r3, r3, #10
 80133ce:	4013      	ands	r3, r2
 80133d0:	d100      	bne.n	80133d4 <HAL_GPIO_Init+0x17c>
 80133d2:	e0a0      	b.n	8013516 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80133d4:	4b57      	ldr	r3, [pc, #348]	@ (8013534 <HAL_GPIO_Init+0x2dc>)
 80133d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80133d8:	4b56      	ldr	r3, [pc, #344]	@ (8013534 <HAL_GPIO_Init+0x2dc>)
 80133da:	2101      	movs	r1, #1
 80133dc:	430a      	orrs	r2, r1
 80133de:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80133e0:	4a55      	ldr	r2, [pc, #340]	@ (8013538 <HAL_GPIO_Init+0x2e0>)
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	089b      	lsrs	r3, r3, #2
 80133e6:	3302      	adds	r3, #2
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	589b      	ldr	r3, [r3, r2]
 80133ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2203      	movs	r2, #3
 80133f2:	4013      	ands	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	220f      	movs	r2, #15
 80133f8:	409a      	lsls	r2, r3
 80133fa:	0013      	movs	r3, r2
 80133fc:	43da      	mvns	r2, r3
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	4013      	ands	r3, r2
 8013402:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	23a0      	movs	r3, #160	@ 0xa0
 8013408:	05db      	lsls	r3, r3, #23
 801340a:	429a      	cmp	r2, r3
 801340c:	d01f      	beq.n	801344e <HAL_GPIO_Init+0x1f6>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4a4a      	ldr	r2, [pc, #296]	@ (801353c <HAL_GPIO_Init+0x2e4>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d019      	beq.n	801344a <HAL_GPIO_Init+0x1f2>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4a49      	ldr	r2, [pc, #292]	@ (8013540 <HAL_GPIO_Init+0x2e8>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d013      	beq.n	8013446 <HAL_GPIO_Init+0x1ee>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4a48      	ldr	r2, [pc, #288]	@ (8013544 <HAL_GPIO_Init+0x2ec>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d00d      	beq.n	8013442 <HAL_GPIO_Init+0x1ea>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	4a47      	ldr	r2, [pc, #284]	@ (8013548 <HAL_GPIO_Init+0x2f0>)
 801342a:	4293      	cmp	r3, r2
 801342c:	d007      	beq.n	801343e <HAL_GPIO_Init+0x1e6>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	4a46      	ldr	r2, [pc, #280]	@ (801354c <HAL_GPIO_Init+0x2f4>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d101      	bne.n	801343a <HAL_GPIO_Init+0x1e2>
 8013436:	2305      	movs	r3, #5
 8013438:	e00a      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 801343a:	2306      	movs	r3, #6
 801343c:	e008      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 801343e:	2304      	movs	r3, #4
 8013440:	e006      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 8013442:	2303      	movs	r3, #3
 8013444:	e004      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 8013446:	2302      	movs	r3, #2
 8013448:	e002      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 801344a:	2301      	movs	r3, #1
 801344c:	e000      	b.n	8013450 <HAL_GPIO_Init+0x1f8>
 801344e:	2300      	movs	r3, #0
 8013450:	697a      	ldr	r2, [r7, #20]
 8013452:	2103      	movs	r1, #3
 8013454:	400a      	ands	r2, r1
 8013456:	0092      	lsls	r2, r2, #2
 8013458:	4093      	lsls	r3, r2
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	4313      	orrs	r3, r2
 801345e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013460:	4935      	ldr	r1, [pc, #212]	@ (8013538 <HAL_GPIO_Init+0x2e0>)
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	089b      	lsrs	r3, r3, #2
 8013466:	3302      	adds	r3, #2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	693a      	ldr	r2, [r7, #16]
 801346c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801346e:	4b38      	ldr	r3, [pc, #224]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	43da      	mvns	r2, r3
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	4013      	ands	r3, r2
 801347c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	685a      	ldr	r2, [r3, #4]
 8013482:	2380      	movs	r3, #128	@ 0x80
 8013484:	035b      	lsls	r3, r3, #13
 8013486:	4013      	ands	r3, r2
 8013488:	d003      	beq.n	8013492 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801348a:	693a      	ldr	r2, [r7, #16]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	4313      	orrs	r3, r2
 8013490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8013492:	4b2f      	ldr	r3, [pc, #188]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 8013494:	693a      	ldr	r2, [r7, #16]
 8013496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8013498:	4b2d      	ldr	r3, [pc, #180]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	43da      	mvns	r2, r3
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	4013      	ands	r3, r2
 80134a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	685a      	ldr	r2, [r3, #4]
 80134ac:	2380      	movs	r3, #128	@ 0x80
 80134ae:	039b      	lsls	r3, r3, #14
 80134b0:	4013      	ands	r3, r2
 80134b2:	d003      	beq.n	80134bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80134b4:	693a      	ldr	r2, [r7, #16]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	4313      	orrs	r3, r2
 80134ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80134bc:	4b24      	ldr	r3, [pc, #144]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 80134be:	693a      	ldr	r2, [r7, #16]
 80134c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80134c2:	4b23      	ldr	r3, [pc, #140]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	43da      	mvns	r2, r3
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	4013      	ands	r3, r2
 80134d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	685a      	ldr	r2, [r3, #4]
 80134d6:	2380      	movs	r3, #128	@ 0x80
 80134d8:	029b      	lsls	r3, r3, #10
 80134da:	4013      	ands	r3, r2
 80134dc:	d003      	beq.n	80134e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80134de:	693a      	ldr	r2, [r7, #16]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	4313      	orrs	r3, r2
 80134e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80134e6:	4b1a      	ldr	r3, [pc, #104]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 80134e8:	693a      	ldr	r2, [r7, #16]
 80134ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80134ec:	4b18      	ldr	r3, [pc, #96]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	43da      	mvns	r2, r3
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	4013      	ands	r3, r2
 80134fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	685a      	ldr	r2, [r3, #4]
 8013500:	2380      	movs	r3, #128	@ 0x80
 8013502:	025b      	lsls	r3, r3, #9
 8013504:	4013      	ands	r3, r2
 8013506:	d003      	beq.n	8013510 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8013508:	693a      	ldr	r2, [r7, #16]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	4313      	orrs	r3, r2
 801350e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8013510:	4b0f      	ldr	r3, [pc, #60]	@ (8013550 <HAL_GPIO_Init+0x2f8>)
 8013512:	693a      	ldr	r2, [r7, #16]
 8013514:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	3301      	adds	r3, #1
 801351a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	40da      	lsrs	r2, r3
 8013524:	1e13      	subs	r3, r2, #0
 8013526:	d000      	beq.n	801352a <HAL_GPIO_Init+0x2d2>
 8013528:	e6a2      	b.n	8013270 <HAL_GPIO_Init+0x18>
  }
}
 801352a:	46c0      	nop			@ (mov r8, r8)
 801352c:	46c0      	nop			@ (mov r8, r8)
 801352e:	46bd      	mov	sp, r7
 8013530:	b006      	add	sp, #24
 8013532:	bd80      	pop	{r7, pc}
 8013534:	40021000 	.word	0x40021000
 8013538:	40010000 	.word	0x40010000
 801353c:	50000400 	.word	0x50000400
 8013540:	50000800 	.word	0x50000800
 8013544:	50000c00 	.word	0x50000c00
 8013548:	50001000 	.word	0x50001000
 801354c:	50001c00 	.word	0x50001c00
 8013550:	40010400 	.word	0x40010400

08013554 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	000a      	movs	r2, r1
 801355e:	1cbb      	adds	r3, r7, #2
 8013560:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	1cba      	adds	r2, r7, #2
 8013568:	8812      	ldrh	r2, [r2, #0]
 801356a:	4013      	ands	r3, r2
 801356c:	d004      	beq.n	8013578 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801356e:	230f      	movs	r3, #15
 8013570:	18fb      	adds	r3, r7, r3
 8013572:	2201      	movs	r2, #1
 8013574:	701a      	strb	r2, [r3, #0]
 8013576:	e003      	b.n	8013580 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013578:	230f      	movs	r3, #15
 801357a:	18fb      	adds	r3, r7, r3
 801357c:	2200      	movs	r2, #0
 801357e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8013580:	230f      	movs	r3, #15
 8013582:	18fb      	adds	r3, r7, r3
 8013584:	781b      	ldrb	r3, [r3, #0]
}
 8013586:	0018      	movs	r0, r3
 8013588:	46bd      	mov	sp, r7
 801358a:	b004      	add	sp, #16
 801358c:	bd80      	pop	{r7, pc}

0801358e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801358e:	b580      	push	{r7, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
 8013596:	0008      	movs	r0, r1
 8013598:	0011      	movs	r1, r2
 801359a:	1cbb      	adds	r3, r7, #2
 801359c:	1c02      	adds	r2, r0, #0
 801359e:	801a      	strh	r2, [r3, #0]
 80135a0:	1c7b      	adds	r3, r7, #1
 80135a2:	1c0a      	adds	r2, r1, #0
 80135a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80135a6:	1c7b      	adds	r3, r7, #1
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d004      	beq.n	80135b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80135ae:	1cbb      	adds	r3, r7, #2
 80135b0:	881a      	ldrh	r2, [r3, #0]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80135b6:	e003      	b.n	80135c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80135b8:	1cbb      	adds	r3, r7, #2
 80135ba:	881a      	ldrh	r2, [r3, #0]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80135c0:	46c0      	nop			@ (mov r8, r8)
 80135c2:	46bd      	mov	sp, r7
 80135c4:	b002      	add	sp, #8
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	0002      	movs	r2, r0
 80135d0:	1dbb      	adds	r3, r7, #6
 80135d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80135d4:	4b09      	ldr	r3, [pc, #36]	@ (80135fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80135d6:	695b      	ldr	r3, [r3, #20]
 80135d8:	1dba      	adds	r2, r7, #6
 80135da:	8812      	ldrh	r2, [r2, #0]
 80135dc:	4013      	ands	r3, r2
 80135de:	d008      	beq.n	80135f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80135e0:	4b06      	ldr	r3, [pc, #24]	@ (80135fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80135e2:	1dba      	adds	r2, r7, #6
 80135e4:	8812      	ldrh	r2, [r2, #0]
 80135e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80135e8:	1dbb      	adds	r3, r7, #6
 80135ea:	881b      	ldrh	r3, [r3, #0]
 80135ec:	0018      	movs	r0, r3
 80135ee:	f7f7 fe15 	bl	800b21c <HAL_GPIO_EXTI_Callback>
  }
}
 80135f2:	46c0      	nop			@ (mov r8, r8)
 80135f4:	46bd      	mov	sp, r7
 80135f6:	b002      	add	sp, #8
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	46c0      	nop			@ (mov r8, r8)
 80135fc:	40010400 	.word	0x40010400

08013600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801360e:	2301      	movs	r3, #1
 8013610:	e082      	b.n	8013718 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2241      	movs	r2, #65	@ 0x41
 8013616:	5c9b      	ldrb	r3, [r3, r2]
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d107      	bne.n	801362e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2240      	movs	r2, #64	@ 0x40
 8013622:	2100      	movs	r1, #0
 8013624:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	0018      	movs	r0, r3
 801362a:	f7f7 f8ed 	bl	800a808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2241      	movs	r2, #65	@ 0x41
 8013632:	2124      	movs	r1, #36	@ 0x24
 8013634:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2101      	movs	r1, #1
 8013642:	438a      	bics	r2, r1
 8013644:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	685a      	ldr	r2, [r3, #4]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	4934      	ldr	r1, [pc, #208]	@ (8013720 <HAL_I2C_Init+0x120>)
 8013650:	400a      	ands	r2, r1
 8013652:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	689a      	ldr	r2, [r3, #8]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	4931      	ldr	r1, [pc, #196]	@ (8013724 <HAL_I2C_Init+0x124>)
 8013660:	400a      	ands	r2, r1
 8013662:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d108      	bne.n	801367e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	689a      	ldr	r2, [r3, #8]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2180      	movs	r1, #128	@ 0x80
 8013676:	0209      	lsls	r1, r1, #8
 8013678:	430a      	orrs	r2, r1
 801367a:	609a      	str	r2, [r3, #8]
 801367c:	e007      	b.n	801368e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	689a      	ldr	r2, [r3, #8]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2184      	movs	r1, #132	@ 0x84
 8013688:	0209      	lsls	r1, r1, #8
 801368a:	430a      	orrs	r2, r1
 801368c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	68db      	ldr	r3, [r3, #12]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d104      	bne.n	80136a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2280      	movs	r2, #128	@ 0x80
 801369c:	0112      	lsls	r2, r2, #4
 801369e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	685a      	ldr	r2, [r3, #4]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	491f      	ldr	r1, [pc, #124]	@ (8013728 <HAL_I2C_Init+0x128>)
 80136ac:	430a      	orrs	r2, r1
 80136ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	68da      	ldr	r2, [r3, #12]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	491a      	ldr	r1, [pc, #104]	@ (8013724 <HAL_I2C_Init+0x124>)
 80136bc:	400a      	ands	r2, r1
 80136be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	691a      	ldr	r2, [r3, #16]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	695b      	ldr	r3, [r3, #20]
 80136c8:	431a      	orrs	r2, r3
 80136ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	699b      	ldr	r3, [r3, #24]
 80136d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	430a      	orrs	r2, r1
 80136d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	69d9      	ldr	r1, [r3, #28]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6a1a      	ldr	r2, [r3, #32]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	430a      	orrs	r2, r1
 80136e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	2101      	movs	r1, #1
 80136f6:	430a      	orrs	r2, r1
 80136f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2200      	movs	r2, #0
 80136fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2241      	movs	r2, #65	@ 0x41
 8013704:	2120      	movs	r1, #32
 8013706:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2242      	movs	r2, #66	@ 0x42
 8013712:	2100      	movs	r1, #0
 8013714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013716:	2300      	movs	r3, #0
}
 8013718:	0018      	movs	r0, r3
 801371a:	46bd      	mov	sp, r7
 801371c:	b002      	add	sp, #8
 801371e:	bd80      	pop	{r7, pc}
 8013720:	f0ffffff 	.word	0xf0ffffff
 8013724:	ffff7fff 	.word	0xffff7fff
 8013728:	02008000 	.word	0x02008000

0801372c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b089      	sub	sp, #36	@ 0x24
 8013730:	af02      	add	r7, sp, #8
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	0008      	movs	r0, r1
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	0019      	movs	r1, r3
 801373a:	230a      	movs	r3, #10
 801373c:	18fb      	adds	r3, r7, r3
 801373e:	1c02      	adds	r2, r0, #0
 8013740:	801a      	strh	r2, [r3, #0]
 8013742:	2308      	movs	r3, #8
 8013744:	18fb      	adds	r3, r7, r3
 8013746:	1c0a      	adds	r2, r1, #0
 8013748:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2241      	movs	r2, #65	@ 0x41
 801374e:	5c9b      	ldrb	r3, [r3, r2]
 8013750:	b2db      	uxtb	r3, r3
 8013752:	2b20      	cmp	r3, #32
 8013754:	d000      	beq.n	8013758 <HAL_I2C_Master_Transmit+0x2c>
 8013756:	e0e7      	b.n	8013928 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2240      	movs	r2, #64	@ 0x40
 801375c:	5c9b      	ldrb	r3, [r3, r2]
 801375e:	2b01      	cmp	r3, #1
 8013760:	d101      	bne.n	8013766 <HAL_I2C_Master_Transmit+0x3a>
 8013762:	2302      	movs	r3, #2
 8013764:	e0e1      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2240      	movs	r2, #64	@ 0x40
 801376a:	2101      	movs	r1, #1
 801376c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801376e:	f7fe fc7d 	bl	801206c <HAL_GetTick>
 8013772:	0003      	movs	r3, r0
 8013774:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013776:	2380      	movs	r3, #128	@ 0x80
 8013778:	0219      	lsls	r1, r3, #8
 801377a:	68f8      	ldr	r0, [r7, #12]
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	2319      	movs	r3, #25
 8013782:	2201      	movs	r2, #1
 8013784:	f002 fa30 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 8013788:	1e03      	subs	r3, r0, #0
 801378a:	d001      	beq.n	8013790 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 801378c:	2301      	movs	r3, #1
 801378e:	e0cc      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2241      	movs	r2, #65	@ 0x41
 8013794:	2121      	movs	r1, #33	@ 0x21
 8013796:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2242      	movs	r2, #66	@ 0x42
 801379c:	2110      	movs	r1, #16
 801379e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2200      	movs	r2, #0
 80137a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2208      	movs	r2, #8
 80137b0:	18ba      	adds	r2, r7, r2
 80137b2:	8812      	ldrh	r2, [r2, #0]
 80137b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2200      	movs	r2, #0
 80137ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	2bff      	cmp	r3, #255	@ 0xff
 80137c4:	d911      	bls.n	80137ea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	22ff      	movs	r2, #255	@ 0xff
 80137ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	2380      	movs	r3, #128	@ 0x80
 80137d4:	045c      	lsls	r4, r3, #17
 80137d6:	230a      	movs	r3, #10
 80137d8:	18fb      	adds	r3, r7, r3
 80137da:	8819      	ldrh	r1, [r3, #0]
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	4b55      	ldr	r3, [pc, #340]	@ (8013934 <HAL_I2C_Master_Transmit+0x208>)
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	0023      	movs	r3, r4
 80137e4:	f002 fc52 	bl	801608c <I2C_TransferConfig>
 80137e8:	e075      	b.n	80138d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137ee:	b29a      	uxth	r2, r3
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137f8:	b2da      	uxtb	r2, r3
 80137fa:	2380      	movs	r3, #128	@ 0x80
 80137fc:	049c      	lsls	r4, r3, #18
 80137fe:	230a      	movs	r3, #10
 8013800:	18fb      	adds	r3, r7, r3
 8013802:	8819      	ldrh	r1, [r3, #0]
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	4b4b      	ldr	r3, [pc, #300]	@ (8013934 <HAL_I2C_Master_Transmit+0x208>)
 8013808:	9300      	str	r3, [sp, #0]
 801380a:	0023      	movs	r3, r4
 801380c:	f002 fc3e 	bl	801608c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8013810:	e061      	b.n	80138d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013812:	697a      	ldr	r2, [r7, #20]
 8013814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	0018      	movs	r0, r3
 801381a:	f002 fa33 	bl	8015c84 <I2C_WaitOnTXISFlagUntilTimeout>
 801381e:	1e03      	subs	r3, r0, #0
 8013820:	d001      	beq.n	8013826 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8013822:	2301      	movs	r3, #1
 8013824:	e081      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801382a:	781a      	ldrb	r2, [r3, #0]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013836:	1c5a      	adds	r2, r3, #1
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013840:	b29b      	uxth	r3, r3
 8013842:	3b01      	subs	r3, #1
 8013844:	b29a      	uxth	r2, r3
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801384e:	3b01      	subs	r3, #1
 8013850:	b29a      	uxth	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801385a:	b29b      	uxth	r3, r3
 801385c:	2b00      	cmp	r3, #0
 801385e:	d03a      	beq.n	80138d6 <HAL_I2C_Master_Transmit+0x1aa>
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013864:	2b00      	cmp	r3, #0
 8013866:	d136      	bne.n	80138d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801386a:	68f8      	ldr	r0, [r7, #12]
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	9300      	str	r3, [sp, #0]
 8013870:	0013      	movs	r3, r2
 8013872:	2200      	movs	r2, #0
 8013874:	2180      	movs	r1, #128	@ 0x80
 8013876:	f002 f9b7 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 801387a:	1e03      	subs	r3, r0, #0
 801387c:	d001      	beq.n	8013882 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801387e:	2301      	movs	r3, #1
 8013880:	e053      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013886:	b29b      	uxth	r3, r3
 8013888:	2bff      	cmp	r3, #255	@ 0xff
 801388a:	d911      	bls.n	80138b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	22ff      	movs	r2, #255	@ 0xff
 8013890:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013896:	b2da      	uxtb	r2, r3
 8013898:	2380      	movs	r3, #128	@ 0x80
 801389a:	045c      	lsls	r4, r3, #17
 801389c:	230a      	movs	r3, #10
 801389e:	18fb      	adds	r3, r7, r3
 80138a0:	8819      	ldrh	r1, [r3, #0]
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	2300      	movs	r3, #0
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	0023      	movs	r3, r4
 80138aa:	f002 fbef 	bl	801608c <I2C_TransferConfig>
 80138ae:	e012      	b.n	80138d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	2380      	movs	r3, #128	@ 0x80
 80138c2:	049c      	lsls	r4, r3, #18
 80138c4:	230a      	movs	r3, #10
 80138c6:	18fb      	adds	r3, r7, r3
 80138c8:	8819      	ldrh	r1, [r3, #0]
 80138ca:	68f8      	ldr	r0, [r7, #12]
 80138cc:	2300      	movs	r3, #0
 80138ce:	9300      	str	r3, [sp, #0]
 80138d0:	0023      	movs	r3, r4
 80138d2:	f002 fbdb 	bl	801608c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138da:	b29b      	uxth	r3, r3
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d198      	bne.n	8013812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80138e0:	697a      	ldr	r2, [r7, #20]
 80138e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	0018      	movs	r0, r3
 80138e8:	f002 fa12 	bl	8015d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80138ec:	1e03      	subs	r3, r0, #0
 80138ee:	d001      	beq.n	80138f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80138f0:	2301      	movs	r3, #1
 80138f2:	e01a      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2220      	movs	r2, #32
 80138fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	685a      	ldr	r2, [r3, #4]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	490c      	ldr	r1, [pc, #48]	@ (8013938 <HAL_I2C_Master_Transmit+0x20c>)
 8013908:	400a      	ands	r2, r1
 801390a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2241      	movs	r2, #65	@ 0x41
 8013910:	2120      	movs	r1, #32
 8013912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2242      	movs	r2, #66	@ 0x42
 8013918:	2100      	movs	r1, #0
 801391a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	2240      	movs	r2, #64	@ 0x40
 8013920:	2100      	movs	r1, #0
 8013922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013924:	2300      	movs	r3, #0
 8013926:	e000      	b.n	801392a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8013928:	2302      	movs	r3, #2
  }
}
 801392a:	0018      	movs	r0, r3
 801392c:	46bd      	mov	sp, r7
 801392e:	b007      	add	sp, #28
 8013930:	bd90      	pop	{r4, r7, pc}
 8013932:	46c0      	nop			@ (mov r8, r8)
 8013934:	80002000 	.word	0x80002000
 8013938:	fe00e800 	.word	0xfe00e800

0801393c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801393c:	b590      	push	{r4, r7, lr}
 801393e:	b089      	sub	sp, #36	@ 0x24
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	0008      	movs	r0, r1
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	0019      	movs	r1, r3
 801394a:	230a      	movs	r3, #10
 801394c:	18fb      	adds	r3, r7, r3
 801394e:	1c02      	adds	r2, r0, #0
 8013950:	801a      	strh	r2, [r3, #0]
 8013952:	2308      	movs	r3, #8
 8013954:	18fb      	adds	r3, r7, r3
 8013956:	1c0a      	adds	r2, r1, #0
 8013958:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2241      	movs	r2, #65	@ 0x41
 801395e:	5c9b      	ldrb	r3, [r3, r2]
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b20      	cmp	r3, #32
 8013964:	d000      	beq.n	8013968 <HAL_I2C_Master_Receive+0x2c>
 8013966:	e0e8      	b.n	8013b3a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2240      	movs	r2, #64	@ 0x40
 801396c:	5c9b      	ldrb	r3, [r3, r2]
 801396e:	2b01      	cmp	r3, #1
 8013970:	d101      	bne.n	8013976 <HAL_I2C_Master_Receive+0x3a>
 8013972:	2302      	movs	r3, #2
 8013974:	e0e2      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2240      	movs	r2, #64	@ 0x40
 801397a:	2101      	movs	r1, #1
 801397c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801397e:	f7fe fb75 	bl	801206c <HAL_GetTick>
 8013982:	0003      	movs	r3, r0
 8013984:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013986:	2380      	movs	r3, #128	@ 0x80
 8013988:	0219      	lsls	r1, r3, #8
 801398a:	68f8      	ldr	r0, [r7, #12]
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	9300      	str	r3, [sp, #0]
 8013990:	2319      	movs	r3, #25
 8013992:	2201      	movs	r2, #1
 8013994:	f002 f928 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 8013998:	1e03      	subs	r3, r0, #0
 801399a:	d001      	beq.n	80139a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 801399c:	2301      	movs	r3, #1
 801399e:	e0cd      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2241      	movs	r2, #65	@ 0x41
 80139a4:	2122      	movs	r1, #34	@ 0x22
 80139a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2242      	movs	r2, #66	@ 0x42
 80139ac:	2110      	movs	r1, #16
 80139ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2200      	movs	r2, #0
 80139b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2208      	movs	r2, #8
 80139c0:	18ba      	adds	r2, r7, r2
 80139c2:	8812      	ldrh	r2, [r2, #0]
 80139c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	2bff      	cmp	r3, #255	@ 0xff
 80139d4:	d911      	bls.n	80139fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	22ff      	movs	r2, #255	@ 0xff
 80139da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139e0:	b2da      	uxtb	r2, r3
 80139e2:	2380      	movs	r3, #128	@ 0x80
 80139e4:	045c      	lsls	r4, r3, #17
 80139e6:	230a      	movs	r3, #10
 80139e8:	18fb      	adds	r3, r7, r3
 80139ea:	8819      	ldrh	r1, [r3, #0]
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	4b55      	ldr	r3, [pc, #340]	@ (8013b44 <HAL_I2C_Master_Receive+0x208>)
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	0023      	movs	r3, r4
 80139f4:	f002 fb4a 	bl	801608c <I2C_TransferConfig>
 80139f8:	e076      	b.n	8013ae8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a08:	b2da      	uxtb	r2, r3
 8013a0a:	2380      	movs	r3, #128	@ 0x80
 8013a0c:	049c      	lsls	r4, r3, #18
 8013a0e:	230a      	movs	r3, #10
 8013a10:	18fb      	adds	r3, r7, r3
 8013a12:	8819      	ldrh	r1, [r3, #0]
 8013a14:	68f8      	ldr	r0, [r7, #12]
 8013a16:	4b4b      	ldr	r3, [pc, #300]	@ (8013b44 <HAL_I2C_Master_Receive+0x208>)
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	0023      	movs	r3, r4
 8013a1c:	f002 fb36 	bl	801608c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8013a20:	e062      	b.n	8013ae8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013a22:	697a      	ldr	r2, [r7, #20]
 8013a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	0018      	movs	r0, r3
 8013a2a:	f002 f9b5 	bl	8015d98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013a2e:	1e03      	subs	r3, r0, #0
 8013a30:	d001      	beq.n	8013a36 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8013a32:	2301      	movs	r3, #1
 8013a34:	e082      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a40:	b2d2      	uxtb	r2, r2
 8013a42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a48:	1c5a      	adds	r2, r3, #1
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a52:	3b01      	subs	r3, #1
 8013a54:	b29a      	uxth	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	3b01      	subs	r3, #1
 8013a62:	b29a      	uxth	r2, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d03a      	beq.n	8013ae8 <HAL_I2C_Master_Receive+0x1ac>
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d136      	bne.n	8013ae8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	0013      	movs	r3, r2
 8013a84:	2200      	movs	r2, #0
 8013a86:	2180      	movs	r1, #128	@ 0x80
 8013a88:	f002 f8ae 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 8013a8c:	1e03      	subs	r3, r0, #0
 8013a8e:	d001      	beq.n	8013a94 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e053      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	2bff      	cmp	r3, #255	@ 0xff
 8013a9c:	d911      	bls.n	8013ac2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	22ff      	movs	r2, #255	@ 0xff
 8013aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013aa8:	b2da      	uxtb	r2, r3
 8013aaa:	2380      	movs	r3, #128	@ 0x80
 8013aac:	045c      	lsls	r4, r3, #17
 8013aae:	230a      	movs	r3, #10
 8013ab0:	18fb      	adds	r3, r7, r3
 8013ab2:	8819      	ldrh	r1, [r3, #0]
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	9300      	str	r3, [sp, #0]
 8013aba:	0023      	movs	r3, r4
 8013abc:	f002 fae6 	bl	801608c <I2C_TransferConfig>
 8013ac0:	e012      	b.n	8013ae8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ad0:	b2da      	uxtb	r2, r3
 8013ad2:	2380      	movs	r3, #128	@ 0x80
 8013ad4:	049c      	lsls	r4, r3, #18
 8013ad6:	230a      	movs	r3, #10
 8013ad8:	18fb      	adds	r3, r7, r3
 8013ada:	8819      	ldrh	r1, [r3, #0]
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	2300      	movs	r3, #0
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	0023      	movs	r3, r4
 8013ae4:	f002 fad2 	bl	801608c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d197      	bne.n	8013a22 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013af2:	697a      	ldr	r2, [r7, #20]
 8013af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	0018      	movs	r0, r3
 8013afa:	f002 f909 	bl	8015d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013afe:	1e03      	subs	r3, r0, #0
 8013b00:	d001      	beq.n	8013b06 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8013b02:	2301      	movs	r3, #1
 8013b04:	e01a      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2220      	movs	r2, #32
 8013b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	685a      	ldr	r2, [r3, #4]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	490b      	ldr	r1, [pc, #44]	@ (8013b48 <HAL_I2C_Master_Receive+0x20c>)
 8013b1a:	400a      	ands	r2, r1
 8013b1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2241      	movs	r2, #65	@ 0x41
 8013b22:	2120      	movs	r1, #32
 8013b24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2242      	movs	r2, #66	@ 0x42
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2240      	movs	r2, #64	@ 0x40
 8013b32:	2100      	movs	r1, #0
 8013b34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013b36:	2300      	movs	r3, #0
 8013b38:	e000      	b.n	8013b3c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8013b3a:	2302      	movs	r3, #2
  }
}
 8013b3c:	0018      	movs	r0, r3
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	b007      	add	sp, #28
 8013b42:	bd90      	pop	{r4, r7, pc}
 8013b44:	80002400 	.word	0x80002400
 8013b48:	fe00e800 	.word	0xfe00e800

08013b4c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8013b4c:	b5b0      	push	{r4, r5, r7, lr}
 8013b4e:	b088      	sub	sp, #32
 8013b50:	af02      	add	r7, sp, #8
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	0008      	movs	r0, r1
 8013b56:	607a      	str	r2, [r7, #4]
 8013b58:	0019      	movs	r1, r3
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	18fb      	adds	r3, r7, r3
 8013b5e:	1c02      	adds	r2, r0, #0
 8013b60:	801a      	strh	r2, [r3, #0]
 8013b62:	2308      	movs	r3, #8
 8013b64:	18fb      	adds	r3, r7, r3
 8013b66:	1c0a      	adds	r2, r1, #0
 8013b68:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2241      	movs	r2, #65	@ 0x41
 8013b6e:	5c9b      	ldrb	r3, [r3, r2]
 8013b70:	b2db      	uxtb	r3, r3
 8013b72:	2b20      	cmp	r3, #32
 8013b74:	d000      	beq.n	8013b78 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8013b76:	e0dd      	b.n	8013d34 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	699a      	ldr	r2, [r3, #24]
 8013b7e:	2380      	movs	r3, #128	@ 0x80
 8013b80:	021b      	lsls	r3, r3, #8
 8013b82:	401a      	ands	r2, r3
 8013b84:	2380      	movs	r3, #128	@ 0x80
 8013b86:	021b      	lsls	r3, r3, #8
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d101      	bne.n	8013b90 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8013b8c:	2302      	movs	r3, #2
 8013b8e:	e0d2      	b.n	8013d36 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2240      	movs	r2, #64	@ 0x40
 8013b94:	5c9b      	ldrb	r3, [r3, r2]
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d101      	bne.n	8013b9e <HAL_I2C_Master_Transmit_DMA+0x52>
 8013b9a:	2302      	movs	r3, #2
 8013b9c:	e0cb      	b.n	8013d36 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	2240      	movs	r2, #64	@ 0x40
 8013ba2:	2101      	movs	r1, #1
 8013ba4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2241      	movs	r2, #65	@ 0x41
 8013baa:	2121      	movs	r1, #33	@ 0x21
 8013bac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2242      	movs	r2, #66	@ 0x42
 8013bb2:	2110      	movs	r1, #16
 8013bb4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2208      	movs	r2, #8
 8013bc6:	18ba      	adds	r2, r7, r2
 8013bc8:	8812      	ldrh	r2, [r2, #0]
 8013bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	4a5c      	ldr	r2, [pc, #368]	@ (8013d40 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8013bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	4a5b      	ldr	r2, [pc, #364]	@ (8013d44 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8013bd6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bdc:	b29b      	uxth	r3, r3
 8013bde:	2bff      	cmp	r3, #255	@ 0xff
 8013be0:	d906      	bls.n	8013bf0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	22ff      	movs	r2, #255	@ 0xff
 8013be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013be8:	2380      	movs	r3, #128	@ 0x80
 8013bea:	045b      	lsls	r3, r3, #17
 8013bec:	617b      	str	r3, [r7, #20]
 8013bee:	e007      	b.n	8013c00 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013bfa:	2380      	movs	r3, #128	@ 0x80
 8013bfc:	049b      	lsls	r3, r3, #18
 8013bfe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d100      	bne.n	8013c0a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013c08:	e078      	b.n	8013cfc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d023      	beq.n	8013c5a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c16:	4a4c      	ldr	r2, [pc, #304]	@ (8013d48 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013c18:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8013d4c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013c20:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c26:	2200      	movs	r2, #0
 8013c28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c2e:	2200      	movs	r2, #0
 8013c30:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013c36:	6879      	ldr	r1, [r7, #4]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	3328      	adds	r3, #40	@ 0x28
 8013c3e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013c44:	2513      	movs	r5, #19
 8013c46:	197c      	adds	r4, r7, r5
 8013c48:	f7fe ff62 	bl	8012b10 <HAL_DMA_Start_IT>
 8013c4c:	0003      	movs	r3, r0
 8013c4e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013c50:	197b      	adds	r3, r7, r5
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d13d      	bne.n	8013cd4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8013c58:	e013      	b.n	8013c82 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2241      	movs	r2, #65	@ 0x41
 8013c5e:	2120      	movs	r1, #32
 8013c60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2242      	movs	r2, #66	@ 0x42
 8013c66:	2100      	movs	r1, #0
 8013c68:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c6e:	2280      	movs	r2, #128	@ 0x80
 8013c70:	431a      	orrs	r2, r3
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2240      	movs	r2, #64	@ 0x40
 8013c7a:	2100      	movs	r1, #0
 8013c7c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	e059      	b.n	8013d36 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	697c      	ldr	r4, [r7, #20]
 8013c8a:	230a      	movs	r3, #10
 8013c8c:	18fb      	adds	r3, r7, r3
 8013c8e:	8819      	ldrh	r1, [r3, #0]
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	4b2f      	ldr	r3, [pc, #188]	@ (8013d50 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	0023      	movs	r3, r4
 8013c98:	f002 f9f8 	bl	801608c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2240      	movs	r2, #64	@ 0x40
 8013cb2:	2100      	movs	r1, #0
 8013cb4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2110      	movs	r1, #16
 8013cba:	0018      	movs	r0, r3
 8013cbc:	f002 fa20 	bl	8016100 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2180      	movs	r1, #128	@ 0x80
 8013ccc:	01c9      	lsls	r1, r1, #7
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	601a      	str	r2, [r3, #0]
 8013cd2:	e02d      	b.n	8013d30 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2241      	movs	r2, #65	@ 0x41
 8013cd8:	2120      	movs	r1, #32
 8013cda:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	2242      	movs	r2, #66	@ 0x42
 8013ce0:	2100      	movs	r1, #0
 8013ce2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ce8:	2210      	movs	r2, #16
 8013cea:	431a      	orrs	r2, r3
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2240      	movs	r2, #64	@ 0x40
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e01c      	b.n	8013d36 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	4a15      	ldr	r2, [pc, #84]	@ (8013d54 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013d00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d06:	b2da      	uxtb	r2, r3
 8013d08:	2380      	movs	r3, #128	@ 0x80
 8013d0a:	049c      	lsls	r4, r3, #18
 8013d0c:	230a      	movs	r3, #10
 8013d0e:	18fb      	adds	r3, r7, r3
 8013d10:	8819      	ldrh	r1, [r3, #0]
 8013d12:	68f8      	ldr	r0, [r7, #12]
 8013d14:	4b0e      	ldr	r3, [pc, #56]	@ (8013d50 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013d16:	9300      	str	r3, [sp, #0]
 8013d18:	0023      	movs	r3, r4
 8013d1a:	f002 f9b7 	bl	801608c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2240      	movs	r2, #64	@ 0x40
 8013d22:	2100      	movs	r1, #0
 8013d24:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2101      	movs	r1, #1
 8013d2a:	0018      	movs	r0, r3
 8013d2c:	f002 f9e8 	bl	8016100 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	e000      	b.n	8013d36 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013d34:	2302      	movs	r3, #2
  }
}
 8013d36:	0018      	movs	r0, r3
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	b006      	add	sp, #24
 8013d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d3e:	46c0      	nop			@ (mov r8, r8)
 8013d40:	ffff0000 	.word	0xffff0000
 8013d44:	080149bd 	.word	0x080149bd
 8013d48:	08015a39 	.word	0x08015a39
 8013d4c:	08015b79 	.word	0x08015b79
 8013d50:	80002000 	.word	0x80002000
 8013d54:	08014569 	.word	0x08014569

08013d58 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013d58:	b5b0      	push	{r4, r5, r7, lr}
 8013d5a:	b088      	sub	sp, #32
 8013d5c:	af02      	add	r7, sp, #8
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	0008      	movs	r0, r1
 8013d62:	607a      	str	r2, [r7, #4]
 8013d64:	0019      	movs	r1, r3
 8013d66:	230a      	movs	r3, #10
 8013d68:	18fb      	adds	r3, r7, r3
 8013d6a:	1c02      	adds	r2, r0, #0
 8013d6c:	801a      	strh	r2, [r3, #0]
 8013d6e:	2308      	movs	r3, #8
 8013d70:	18fb      	adds	r3, r7, r3
 8013d72:	1c0a      	adds	r2, r1, #0
 8013d74:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2241      	movs	r2, #65	@ 0x41
 8013d7a:	5c9b      	ldrb	r3, [r3, r2]
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	2b20      	cmp	r3, #32
 8013d80:	d000      	beq.n	8013d84 <HAL_I2C_Master_Receive_DMA+0x2c>
 8013d82:	e0dd      	b.n	8013f40 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	699a      	ldr	r2, [r3, #24]
 8013d8a:	2380      	movs	r3, #128	@ 0x80
 8013d8c:	021b      	lsls	r3, r3, #8
 8013d8e:	401a      	ands	r2, r3
 8013d90:	2380      	movs	r3, #128	@ 0x80
 8013d92:	021b      	lsls	r3, r3, #8
 8013d94:	429a      	cmp	r2, r3
 8013d96:	d101      	bne.n	8013d9c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8013d98:	2302      	movs	r3, #2
 8013d9a:	e0d2      	b.n	8013f42 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2240      	movs	r2, #64	@ 0x40
 8013da0:	5c9b      	ldrb	r3, [r3, r2]
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d101      	bne.n	8013daa <HAL_I2C_Master_Receive_DMA+0x52>
 8013da6:	2302      	movs	r3, #2
 8013da8:	e0cb      	b.n	8013f42 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2240      	movs	r2, #64	@ 0x40
 8013dae:	2101      	movs	r1, #1
 8013db0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2241      	movs	r2, #65	@ 0x41
 8013db6:	2122      	movs	r1, #34	@ 0x22
 8013db8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2242      	movs	r2, #66	@ 0x42
 8013dbe:	2110      	movs	r1, #16
 8013dc0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2208      	movs	r2, #8
 8013dd2:	18ba      	adds	r2, r7, r2
 8013dd4:	8812      	ldrh	r2, [r2, #0]
 8013dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	4a5c      	ldr	r2, [pc, #368]	@ (8013f4c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8013ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	4a5b      	ldr	r2, [pc, #364]	@ (8013f50 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013de2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	2bff      	cmp	r3, #255	@ 0xff
 8013dec:	d906      	bls.n	8013dfc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	22ff      	movs	r2, #255	@ 0xff
 8013df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013df4:	2380      	movs	r3, #128	@ 0x80
 8013df6:	045b      	lsls	r3, r3, #17
 8013df8:	617b      	str	r3, [r7, #20]
 8013dfa:	e007      	b.n	8013e0c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013e06:	2380      	movs	r3, #128	@ 0x80
 8013e08:	049b      	lsls	r3, r3, #18
 8013e0a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d100      	bne.n	8013e16 <HAL_I2C_Master_Receive_DMA+0xbe>
 8013e14:	e078      	b.n	8013f08 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d023      	beq.n	8013e66 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e22:	4a4c      	ldr	r2, [pc, #304]	@ (8013f54 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013e24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e2a:	4a4b      	ldr	r2, [pc, #300]	@ (8013f58 <HAL_I2C_Master_Receive_DMA+0x200>)
 8013e2c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e32:	2200      	movs	r2, #0
 8013e34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	3324      	adds	r3, #36	@ 0x24
 8013e48:	0019      	movs	r1, r3
 8013e4a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013e50:	2513      	movs	r5, #19
 8013e52:	197c      	adds	r4, r7, r5
 8013e54:	f7fe fe5c 	bl	8012b10 <HAL_DMA_Start_IT>
 8013e58:	0003      	movs	r3, r0
 8013e5a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013e5c:	197b      	adds	r3, r7, r5
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d13d      	bne.n	8013ee0 <HAL_I2C_Master_Receive_DMA+0x188>
 8013e64:	e013      	b.n	8013e8e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2241      	movs	r2, #65	@ 0x41
 8013e6a:	2120      	movs	r1, #32
 8013e6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2242      	movs	r2, #66	@ 0x42
 8013e72:	2100      	movs	r1, #0
 8013e74:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e7a:	2280      	movs	r2, #128	@ 0x80
 8013e7c:	431a      	orrs	r2, r3
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2240      	movs	r2, #64	@ 0x40
 8013e86:	2100      	movs	r1, #0
 8013e88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	e059      	b.n	8013f42 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e92:	b2da      	uxtb	r2, r3
 8013e94:	697c      	ldr	r4, [r7, #20]
 8013e96:	230a      	movs	r3, #10
 8013e98:	18fb      	adds	r3, r7, r3
 8013e9a:	8819      	ldrh	r1, [r3, #0]
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8013f5c <HAL_I2C_Master_Receive_DMA+0x204>)
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	0023      	movs	r3, r4
 8013ea4:	f002 f8f2 	bl	801608c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013eb2:	1ad3      	subs	r3, r2, r3
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2240      	movs	r2, #64	@ 0x40
 8013ebe:	2100      	movs	r1, #0
 8013ec0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2110      	movs	r1, #16
 8013ec6:	0018      	movs	r0, r3
 8013ec8:	f002 f91a 	bl	8016100 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2180      	movs	r1, #128	@ 0x80
 8013ed8:	0209      	lsls	r1, r1, #8
 8013eda:	430a      	orrs	r2, r1
 8013edc:	601a      	str	r2, [r3, #0]
 8013ede:	e02d      	b.n	8013f3c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	2241      	movs	r2, #65	@ 0x41
 8013ee4:	2120      	movs	r1, #32
 8013ee6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2242      	movs	r2, #66	@ 0x42
 8013eec:	2100      	movs	r1, #0
 8013eee:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ef4:	2210      	movs	r2, #16
 8013ef6:	431a      	orrs	r2, r3
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2240      	movs	r2, #64	@ 0x40
 8013f00:	2100      	movs	r1, #0
 8013f02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013f04:	2301      	movs	r3, #1
 8013f06:	e01c      	b.n	8013f42 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	4a15      	ldr	r2, [pc, #84]	@ (8013f60 <HAL_I2C_Master_Receive_DMA+0x208>)
 8013f0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f12:	b2da      	uxtb	r2, r3
 8013f14:	2380      	movs	r3, #128	@ 0x80
 8013f16:	049c      	lsls	r4, r3, #18
 8013f18:	230a      	movs	r3, #10
 8013f1a:	18fb      	adds	r3, r7, r3
 8013f1c:	8819      	ldrh	r1, [r3, #0]
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	4b0e      	ldr	r3, [pc, #56]	@ (8013f5c <HAL_I2C_Master_Receive_DMA+0x204>)
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	0023      	movs	r3, r4
 8013f26:	f002 f8b1 	bl	801608c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	2240      	movs	r2, #64	@ 0x40
 8013f2e:	2100      	movs	r1, #0
 8013f30:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2101      	movs	r1, #1
 8013f36:	0018      	movs	r0, r3
 8013f38:	f002 f8e2 	bl	8016100 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	e000      	b.n	8013f42 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013f40:	2302      	movs	r3, #2
  }
}
 8013f42:	0018      	movs	r0, r3
 8013f44:	46bd      	mov	sp, r7
 8013f46:	b006      	add	sp, #24
 8013f48:	bdb0      	pop	{r4, r5, r7, pc}
 8013f4a:	46c0      	nop			@ (mov r8, r8)
 8013f4c:	ffff0000 	.word	0xffff0000
 8013f50:	080149bd 	.word	0x080149bd
 8013f54:	08015ad9 	.word	0x08015ad9
 8013f58:	08015b79 	.word	0x08015b79
 8013f5c:	80002400 	.word	0x80002400
 8013f60:	08014569 	.word	0x08014569

08013f64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b089      	sub	sp, #36	@ 0x24
 8013f68:	af02      	add	r7, sp, #8
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	000c      	movs	r4, r1
 8013f6e:	0010      	movs	r0, r2
 8013f70:	0019      	movs	r1, r3
 8013f72:	230a      	movs	r3, #10
 8013f74:	18fb      	adds	r3, r7, r3
 8013f76:	1c22      	adds	r2, r4, #0
 8013f78:	801a      	strh	r2, [r3, #0]
 8013f7a:	2308      	movs	r3, #8
 8013f7c:	18fb      	adds	r3, r7, r3
 8013f7e:	1c02      	adds	r2, r0, #0
 8013f80:	801a      	strh	r2, [r3, #0]
 8013f82:	1dbb      	adds	r3, r7, #6
 8013f84:	1c0a      	adds	r2, r1, #0
 8013f86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	2241      	movs	r2, #65	@ 0x41
 8013f8c:	5c9b      	ldrb	r3, [r3, r2]
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	2b20      	cmp	r3, #32
 8013f92:	d000      	beq.n	8013f96 <HAL_I2C_Mem_Read+0x32>
 8013f94:	e110      	b.n	80141b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d004      	beq.n	8013fa6 <HAL_I2C_Mem_Read+0x42>
 8013f9c:	232c      	movs	r3, #44	@ 0x2c
 8013f9e:	18fb      	adds	r3, r7, r3
 8013fa0:	881b      	ldrh	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d105      	bne.n	8013fb2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	2280      	movs	r2, #128	@ 0x80
 8013faa:	0092      	lsls	r2, r2, #2
 8013fac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e103      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2240      	movs	r2, #64	@ 0x40
 8013fb6:	5c9b      	ldrb	r3, [r3, r2]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d101      	bne.n	8013fc0 <HAL_I2C_Mem_Read+0x5c>
 8013fbc:	2302      	movs	r3, #2
 8013fbe:	e0fc      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2240      	movs	r2, #64	@ 0x40
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013fc8:	f7fe f850 	bl	801206c <HAL_GetTick>
 8013fcc:	0003      	movs	r3, r0
 8013fce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013fd0:	2380      	movs	r3, #128	@ 0x80
 8013fd2:	0219      	lsls	r1, r3, #8
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	2319      	movs	r3, #25
 8013fdc:	2201      	movs	r2, #1
 8013fde:	f001 fe03 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 8013fe2:	1e03      	subs	r3, r0, #0
 8013fe4:	d001      	beq.n	8013fea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e0e7      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2241      	movs	r2, #65	@ 0x41
 8013fee:	2122      	movs	r1, #34	@ 0x22
 8013ff0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2242      	movs	r2, #66	@ 0x42
 8013ff6:	2140      	movs	r1, #64	@ 0x40
 8013ff8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014004:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	222c      	movs	r2, #44	@ 0x2c
 801400a:	18ba      	adds	r2, r7, r2
 801400c:	8812      	ldrh	r2, [r2, #0]
 801400e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2200      	movs	r2, #0
 8014014:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014016:	1dbb      	adds	r3, r7, #6
 8014018:	881c      	ldrh	r4, [r3, #0]
 801401a:	2308      	movs	r3, #8
 801401c:	18fb      	adds	r3, r7, r3
 801401e:	881a      	ldrh	r2, [r3, #0]
 8014020:	230a      	movs	r3, #10
 8014022:	18fb      	adds	r3, r7, r3
 8014024:	8819      	ldrh	r1, [r3, #0]
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	0023      	movs	r3, r4
 8014032:	f000 ffc1 	bl	8014fb8 <I2C_RequestMemoryRead>
 8014036:	1e03      	subs	r3, r0, #0
 8014038:	d005      	beq.n	8014046 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2240      	movs	r2, #64	@ 0x40
 801403e:	2100      	movs	r1, #0
 8014040:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8014042:	2301      	movs	r3, #1
 8014044:	e0b9      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801404a:	b29b      	uxth	r3, r3
 801404c:	2bff      	cmp	r3, #255	@ 0xff
 801404e:	d911      	bls.n	8014074 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	22ff      	movs	r2, #255	@ 0xff
 8014054:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801405a:	b2da      	uxtb	r2, r3
 801405c:	2380      	movs	r3, #128	@ 0x80
 801405e:	045c      	lsls	r4, r3, #17
 8014060:	230a      	movs	r3, #10
 8014062:	18fb      	adds	r3, r7, r3
 8014064:	8819      	ldrh	r1, [r3, #0]
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	4b56      	ldr	r3, [pc, #344]	@ (80141c4 <HAL_I2C_Mem_Read+0x260>)
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	0023      	movs	r3, r4
 801406e:	f002 f80d 	bl	801608c <I2C_TransferConfig>
 8014072:	e012      	b.n	801409a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014078:	b29a      	uxth	r2, r3
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014082:	b2da      	uxtb	r2, r3
 8014084:	2380      	movs	r3, #128	@ 0x80
 8014086:	049c      	lsls	r4, r3, #18
 8014088:	230a      	movs	r3, #10
 801408a:	18fb      	adds	r3, r7, r3
 801408c:	8819      	ldrh	r1, [r3, #0]
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	4b4c      	ldr	r3, [pc, #304]	@ (80141c4 <HAL_I2C_Mem_Read+0x260>)
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	0023      	movs	r3, r4
 8014096:	f001 fff9 	bl	801608c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	0013      	movs	r3, r2
 80140a4:	2200      	movs	r2, #0
 80140a6:	2104      	movs	r1, #4
 80140a8:	f001 fd9e 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 80140ac:	1e03      	subs	r3, r0, #0
 80140ae:	d001      	beq.n	80140b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80140b0:	2301      	movs	r3, #1
 80140b2:	e082      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140be:	b2d2      	uxtb	r2, r2
 80140c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140c6:	1c5a      	adds	r2, r3, #1
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140d0:	3b01      	subs	r3, #1
 80140d2:	b29a      	uxth	r2, r3
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140dc:	b29b      	uxth	r3, r3
 80140de:	3b01      	subs	r3, #1
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d03a      	beq.n	8014166 <HAL_I2C_Mem_Read+0x202>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d136      	bne.n	8014166 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80140f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	0013      	movs	r3, r2
 8014102:	2200      	movs	r2, #0
 8014104:	2180      	movs	r1, #128	@ 0x80
 8014106:	f001 fd6f 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 801410a:	1e03      	subs	r3, r0, #0
 801410c:	d001      	beq.n	8014112 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 801410e:	2301      	movs	r3, #1
 8014110:	e053      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014116:	b29b      	uxth	r3, r3
 8014118:	2bff      	cmp	r3, #255	@ 0xff
 801411a:	d911      	bls.n	8014140 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	22ff      	movs	r2, #255	@ 0xff
 8014120:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014126:	b2da      	uxtb	r2, r3
 8014128:	2380      	movs	r3, #128	@ 0x80
 801412a:	045c      	lsls	r4, r3, #17
 801412c:	230a      	movs	r3, #10
 801412e:	18fb      	adds	r3, r7, r3
 8014130:	8819      	ldrh	r1, [r3, #0]
 8014132:	68f8      	ldr	r0, [r7, #12]
 8014134:	2300      	movs	r3, #0
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	0023      	movs	r3, r4
 801413a:	f001 ffa7 	bl	801608c <I2C_TransferConfig>
 801413e:	e012      	b.n	8014166 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014144:	b29a      	uxth	r2, r3
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801414e:	b2da      	uxtb	r2, r3
 8014150:	2380      	movs	r3, #128	@ 0x80
 8014152:	049c      	lsls	r4, r3, #18
 8014154:	230a      	movs	r3, #10
 8014156:	18fb      	adds	r3, r7, r3
 8014158:	8819      	ldrh	r1, [r3, #0]
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	2300      	movs	r3, #0
 801415e:	9300      	str	r3, [sp, #0]
 8014160:	0023      	movs	r3, r4
 8014162:	f001 ff93 	bl	801608c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801416a:	b29b      	uxth	r3, r3
 801416c:	2b00      	cmp	r3, #0
 801416e:	d194      	bne.n	801409a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014170:	697a      	ldr	r2, [r7, #20]
 8014172:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	0018      	movs	r0, r3
 8014178:	f001 fdca 	bl	8015d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 801417c:	1e03      	subs	r3, r0, #0
 801417e:	d001      	beq.n	8014184 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8014180:	2301      	movs	r3, #1
 8014182:	e01a      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	2220      	movs	r2, #32
 801418a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	685a      	ldr	r2, [r3, #4]
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	490c      	ldr	r1, [pc, #48]	@ (80141c8 <HAL_I2C_Mem_Read+0x264>)
 8014198:	400a      	ands	r2, r1
 801419a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2241      	movs	r2, #65	@ 0x41
 80141a0:	2120      	movs	r1, #32
 80141a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2242      	movs	r2, #66	@ 0x42
 80141a8:	2100      	movs	r1, #0
 80141aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2240      	movs	r2, #64	@ 0x40
 80141b0:	2100      	movs	r1, #0
 80141b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80141b4:	2300      	movs	r3, #0
 80141b6:	e000      	b.n	80141ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80141b8:	2302      	movs	r3, #2
  }
}
 80141ba:	0018      	movs	r0, r3
 80141bc:	46bd      	mov	sp, r7
 80141be:	b007      	add	sp, #28
 80141c0:	bd90      	pop	{r4, r7, pc}
 80141c2:	46c0      	nop			@ (mov r8, r8)
 80141c4:	80002400 	.word	0x80002400
 80141c8:	fe00e800 	.word	0xfe00e800

080141cc <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80141cc:	b5b0      	push	{r4, r5, r7, lr}
 80141ce:	b088      	sub	sp, #32
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	000c      	movs	r4, r1
 80141d6:	0010      	movs	r0, r2
 80141d8:	0019      	movs	r1, r3
 80141da:	230a      	movs	r3, #10
 80141dc:	18fb      	adds	r3, r7, r3
 80141de:	1c22      	adds	r2, r4, #0
 80141e0:	801a      	strh	r2, [r3, #0]
 80141e2:	2308      	movs	r3, #8
 80141e4:	18fb      	adds	r3, r7, r3
 80141e6:	1c02      	adds	r2, r0, #0
 80141e8:	801a      	strh	r2, [r3, #0]
 80141ea:	1dbb      	adds	r3, r7, #6
 80141ec:	1c0a      	adds	r2, r1, #0
 80141ee:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	2241      	movs	r2, #65	@ 0x41
 80141f4:	5c9b      	ldrb	r3, [r3, r2]
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	2b20      	cmp	r3, #32
 80141fa:	d000      	beq.n	80141fe <HAL_I2C_Mem_Write_DMA+0x32>
 80141fc:	e0d8      	b.n	80143b0 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80141fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <HAL_I2C_Mem_Write_DMA+0x42>
 8014204:	232c      	movs	r3, #44	@ 0x2c
 8014206:	18fb      	adds	r3, r7, r3
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d105      	bne.n	801421a <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2280      	movs	r2, #128	@ 0x80
 8014212:	0092      	lsls	r2, r2, #2
 8014214:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	e0cb      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	699a      	ldr	r2, [r3, #24]
 8014220:	2380      	movs	r3, #128	@ 0x80
 8014222:	021b      	lsls	r3, r3, #8
 8014224:	401a      	ands	r2, r3
 8014226:	2380      	movs	r3, #128	@ 0x80
 8014228:	021b      	lsls	r3, r3, #8
 801422a:	429a      	cmp	r2, r3
 801422c:	d101      	bne.n	8014232 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 801422e:	2302      	movs	r3, #2
 8014230:	e0bf      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2240      	movs	r2, #64	@ 0x40
 8014236:	5c9b      	ldrb	r3, [r3, r2]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d101      	bne.n	8014240 <HAL_I2C_Mem_Write_DMA+0x74>
 801423c:	2302      	movs	r3, #2
 801423e:	e0b8      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2240      	movs	r2, #64	@ 0x40
 8014244:	2101      	movs	r1, #1
 8014246:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2241      	movs	r2, #65	@ 0x41
 801424c:	2121      	movs	r1, #33	@ 0x21
 801424e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2242      	movs	r2, #66	@ 0x42
 8014254:	2140      	movs	r1, #64	@ 0x40
 8014256:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	2200      	movs	r2, #0
 801425c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	222c      	movs	r2, #44	@ 0x2c
 8014268:	18ba      	adds	r2, r7, r2
 801426a:	8812      	ldrh	r2, [r2, #0]
 801426c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	4a52      	ldr	r2, [pc, #328]	@ (80143bc <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8014272:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	4a52      	ldr	r2, [pc, #328]	@ (80143c0 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8014278:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 801427a:	230a      	movs	r3, #10
 801427c:	18fb      	adds	r3, r7, r3
 801427e:	881a      	ldrh	r2, [r3, #0]
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014288:	b29b      	uxth	r3, r3
 801428a:	2bff      	cmp	r3, #255	@ 0xff
 801428c:	d903      	bls.n	8014296 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	22ff      	movs	r2, #255	@ 0xff
 8014292:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014294:	e004      	b.n	80142a0 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801429a:	b29a      	uxth	r2, r3
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80142a0:	1dbb      	adds	r3, r7, #6
 80142a2:	881b      	ldrh	r3, [r3, #0]
 80142a4:	2b01      	cmp	r3, #1
 80142a6:	d10b      	bne.n	80142c0 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80142a8:	2308      	movs	r3, #8
 80142aa:	18fb      	adds	r3, r7, r3
 80142ac:	881b      	ldrh	r3, [r3, #0]
 80142ae:	b2da      	uxtb	r2, r3
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2201      	movs	r2, #1
 80142ba:	4252      	negs	r2, r2
 80142bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80142be:	e00e      	b.n	80142de <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80142c0:	2108      	movs	r1, #8
 80142c2:	187b      	adds	r3, r7, r1
 80142c4:	881b      	ldrh	r3, [r3, #0]
 80142c6:	0a1b      	lsrs	r3, r3, #8
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	b2da      	uxtb	r2, r3
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80142d2:	187b      	adds	r3, r7, r1
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	001a      	movs	r2, r3
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d023      	beq.n	801432e <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142ea:	4a36      	ldr	r2, [pc, #216]	@ (80143c4 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 80142ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142f2:	4a35      	ldr	r2, [pc, #212]	@ (80143c8 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80142f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142fa:	2200      	movs	r2, #0
 80142fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014302:	2200      	movs	r2, #0
 8014304:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801430a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3328      	adds	r3, #40	@ 0x28
 8014312:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8014318:	2517      	movs	r5, #23
 801431a:	197c      	adds	r4, r7, r5
 801431c:	f7fe fbf8 	bl	8012b10 <HAL_DMA_Start_IT>
 8014320:	0003      	movs	r3, r0
 8014322:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8014324:	197b      	adds	r3, r7, r5
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d12d      	bne.n	8014388 <HAL_I2C_Mem_Write_DMA+0x1bc>
 801432c:	e013      	b.n	8014356 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2241      	movs	r2, #65	@ 0x41
 8014332:	2120      	movs	r1, #32
 8014334:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2242      	movs	r2, #66	@ 0x42
 801433a:	2100      	movs	r1, #0
 801433c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014342:	2280      	movs	r2, #128	@ 0x80
 8014344:	431a      	orrs	r2, r3
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2240      	movs	r2, #64	@ 0x40
 801434e:	2100      	movs	r1, #0
 8014350:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8014352:	2301      	movs	r3, #1
 8014354:	e02d      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8014356:	1dbb      	adds	r3, r7, #6
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	b2da      	uxtb	r2, r3
 801435c:	2380      	movs	r3, #128	@ 0x80
 801435e:	045c      	lsls	r4, r3, #17
 8014360:	230a      	movs	r3, #10
 8014362:	18fb      	adds	r3, r7, r3
 8014364:	8819      	ldrh	r1, [r3, #0]
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	4b18      	ldr	r3, [pc, #96]	@ (80143cc <HAL_I2C_Mem_Write_DMA+0x200>)
 801436a:	9300      	str	r3, [sp, #0]
 801436c:	0023      	movs	r3, r4
 801436e:	f001 fe8d 	bl	801608c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2240      	movs	r2, #64	@ 0x40
 8014376:	2100      	movs	r1, #0
 8014378:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	2101      	movs	r1, #1
 801437e:	0018      	movs	r0, r3
 8014380:	f001 febe 	bl	8016100 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8014384:	2300      	movs	r3, #0
 8014386:	e014      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	2241      	movs	r2, #65	@ 0x41
 801438c:	2120      	movs	r1, #32
 801438e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	2242      	movs	r2, #66	@ 0x42
 8014394:	2100      	movs	r1, #0
 8014396:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801439c:	2210      	movs	r2, #16
 801439e:	431a      	orrs	r2, r3
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2240      	movs	r2, #64	@ 0x40
 80143a8:	2100      	movs	r1, #0
 80143aa:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80143ac:	2301      	movs	r3, #1
 80143ae:	e000      	b.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80143b0:	2302      	movs	r3, #2
  }
}
 80143b2:	0018      	movs	r0, r3
 80143b4:	46bd      	mov	sp, r7
 80143b6:	b006      	add	sp, #24
 80143b8:	bdb0      	pop	{r4, r5, r7, pc}
 80143ba:	46c0      	nop			@ (mov r8, r8)
 80143bc:	ffff0000 	.word	0xffff0000
 80143c0:	08014bb5 	.word	0x08014bb5
 80143c4:	08015a39 	.word	0x08015a39
 80143c8:	08015b79 	.word	0x08015b79
 80143cc:	80002000 	.word	0x80002000

080143d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	699b      	ldr	r3, [r3, #24]
 80143de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d005      	beq.n	80143fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	68f9      	ldr	r1, [r7, #12]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	4798      	blx	r3
  }
}
 80143fc:	46c0      	nop			@ (mov r8, r8)
 80143fe:	46bd      	mov	sp, r7
 8014400:	b004      	add	sp, #16
 8014402:	bd80      	pop	{r7, pc}

08014404 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b086      	sub	sp, #24
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	699b      	ldr	r3, [r3, #24]
 8014412:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801441c:	697a      	ldr	r2, [r7, #20]
 801441e:	2380      	movs	r3, #128	@ 0x80
 8014420:	005b      	lsls	r3, r3, #1
 8014422:	4013      	ands	r3, r2
 8014424:	d00e      	beq.n	8014444 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	2280      	movs	r2, #128	@ 0x80
 801442a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801442c:	d00a      	beq.n	8014444 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014432:	2201      	movs	r2, #1
 8014434:	431a      	orrs	r2, r3
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2280      	movs	r2, #128	@ 0x80
 8014440:	0052      	lsls	r2, r2, #1
 8014442:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014444:	697a      	ldr	r2, [r7, #20]
 8014446:	2380      	movs	r3, #128	@ 0x80
 8014448:	00db      	lsls	r3, r3, #3
 801444a:	4013      	ands	r3, r2
 801444c:	d00e      	beq.n	801446c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	2280      	movs	r2, #128	@ 0x80
 8014452:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8014454:	d00a      	beq.n	801446c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801445a:	2208      	movs	r2, #8
 801445c:	431a      	orrs	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2280      	movs	r2, #128	@ 0x80
 8014468:	00d2      	lsls	r2, r2, #3
 801446a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801446c:	697a      	ldr	r2, [r7, #20]
 801446e:	2380      	movs	r3, #128	@ 0x80
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	4013      	ands	r3, r2
 8014474:	d00e      	beq.n	8014494 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	2280      	movs	r2, #128	@ 0x80
 801447a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801447c:	d00a      	beq.n	8014494 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014482:	2202      	movs	r2, #2
 8014484:	431a      	orrs	r2, r3
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2280      	movs	r2, #128	@ 0x80
 8014490:	0092      	lsls	r2, r2, #2
 8014492:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014498:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	220b      	movs	r2, #11
 801449e:	4013      	ands	r3, r2
 80144a0:	d005      	beq.n	80144ae <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80144a2:	68fa      	ldr	r2, [r7, #12]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	0011      	movs	r1, r2
 80144a8:	0018      	movs	r0, r3
 80144aa:	f001 f977 	bl	801579c <I2C_ITError>
  }
}
 80144ae:	46c0      	nop			@ (mov r8, r8)
 80144b0:	46bd      	mov	sp, r7
 80144b2:	b006      	add	sp, #24
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b082      	sub	sp, #8
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80144be:	46c0      	nop			@ (mov r8, r8)
 80144c0:	46bd      	mov	sp, r7
 80144c2:	b002      	add	sp, #8
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b082      	sub	sp, #8
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80144ce:	46c0      	nop			@ (mov r8, r8)
 80144d0:	46bd      	mov	sp, r7
 80144d2:	b002      	add	sp, #8
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b082      	sub	sp, #8
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80144de:	46c0      	nop			@ (mov r8, r8)
 80144e0:	46bd      	mov	sp, r7
 80144e2:	b002      	add	sp, #8
 80144e4:	bd80      	pop	{r7, pc}

080144e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80144e6:	b580      	push	{r7, lr}
 80144e8:	b082      	sub	sp, #8
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80144ee:	46c0      	nop			@ (mov r8, r8)
 80144f0:	46bd      	mov	sp, r7
 80144f2:	b002      	add	sp, #8
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b082      	sub	sp, #8
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	0008      	movs	r0, r1
 8014500:	0011      	movs	r1, r2
 8014502:	1cfb      	adds	r3, r7, #3
 8014504:	1c02      	adds	r2, r0, #0
 8014506:	701a      	strb	r2, [r3, #0]
 8014508:	003b      	movs	r3, r7
 801450a:	1c0a      	adds	r2, r1, #0
 801450c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801450e:	46c0      	nop			@ (mov r8, r8)
 8014510:	46bd      	mov	sp, r7
 8014512:	b002      	add	sp, #8
 8014514:	bd80      	pop	{r7, pc}

08014516 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b082      	sub	sp, #8
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801451e:	46c0      	nop			@ (mov r8, r8)
 8014520:	46bd      	mov	sp, r7
 8014522:	b002      	add	sp, #8
 8014524:	bd80      	pop	{r7, pc}

08014526 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801452e:	46c0      	nop			@ (mov r8, r8)
 8014530:	46bd      	mov	sp, r7
 8014532:	b002      	add	sp, #8
 8014534:	bd80      	pop	{r7, pc}

08014536 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014536:	b580      	push	{r7, lr}
 8014538:	b082      	sub	sp, #8
 801453a:	af00      	add	r7, sp, #0
 801453c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801453e:	46c0      	nop			@ (mov r8, r8)
 8014540:	46bd      	mov	sp, r7
 8014542:	b002      	add	sp, #8
 8014544:	bd80      	pop	{r7, pc}

08014546 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014546:	b580      	push	{r7, lr}
 8014548:	b082      	sub	sp, #8
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801454e:	46c0      	nop			@ (mov r8, r8)
 8014550:	46bd      	mov	sp, r7
 8014552:	b002      	add	sp, #8
 8014554:	bd80      	pop	{r7, pc}

08014556 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801455e:	46c0      	nop			@ (mov r8, r8)
 8014560:	46bd      	mov	sp, r7
 8014562:	b002      	add	sp, #8
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014568:	b590      	push	{r4, r7, lr}
 801456a:	b089      	sub	sp, #36	@ 0x24
 801456c:	af02      	add	r7, sp, #8
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2240      	movs	r2, #64	@ 0x40
 801457c:	5c9b      	ldrb	r3, [r3, r2]
 801457e:	2b01      	cmp	r3, #1
 8014580:	d101      	bne.n	8014586 <I2C_Master_ISR_IT+0x1e>
 8014582:	2302      	movs	r3, #2
 8014584:	e113      	b.n	80147ae <I2C_Master_ISR_IT+0x246>
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2240      	movs	r2, #64	@ 0x40
 801458a:	2101      	movs	r1, #1
 801458c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	2210      	movs	r2, #16
 8014592:	4013      	ands	r3, r2
 8014594:	d012      	beq.n	80145bc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2210      	movs	r2, #16
 801459a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801459c:	d00e      	beq.n	80145bc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2210      	movs	r2, #16
 80145a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145aa:	2204      	movs	r2, #4
 80145ac:	431a      	orrs	r2, r3
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	0018      	movs	r0, r3
 80145b6:	f001 fa1c 	bl	80159f2 <I2C_Flush_TXDR>
 80145ba:	e0e5      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	2204      	movs	r2, #4
 80145c0:	4013      	ands	r3, r2
 80145c2:	d021      	beq.n	8014608 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2204      	movs	r2, #4
 80145c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80145ca:	d01d      	beq.n	8014608 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	2204      	movs	r2, #4
 80145d0:	4393      	bics	r3, r2
 80145d2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145de:	b2d2      	uxtb	r2, r2
 80145e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145e6:	1c5a      	adds	r2, r3, #1
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145f0:	3b01      	subs	r3, #1
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	3b01      	subs	r3, #1
 8014600:	b29a      	uxth	r2, r3
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014606:	e0bf      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	2202      	movs	r2, #2
 801460c:	4013      	ands	r3, r2
 801460e:	d01c      	beq.n	801464a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2202      	movs	r2, #2
 8014614:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014616:	d018      	beq.n	801464a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801461c:	781a      	ldrb	r2, [r3, #0]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014628:	1c5a      	adds	r2, r3, #1
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014632:	3b01      	subs	r3, #1
 8014634:	b29a      	uxth	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801463e:	b29b      	uxth	r3, r3
 8014640:	3b01      	subs	r3, #1
 8014642:	b29a      	uxth	r2, r3
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014648:	e09e      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	2280      	movs	r2, #128	@ 0x80
 801464e:	4013      	ands	r3, r2
 8014650:	d100      	bne.n	8014654 <I2C_Master_ISR_IT+0xec>
 8014652:	e069      	b.n	8014728 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2240      	movs	r2, #64	@ 0x40
 8014658:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801465a:	d065      	beq.n	8014728 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014660:	b29b      	uxth	r3, r3
 8014662:	2b00      	cmp	r3, #0
 8014664:	d04a      	beq.n	80146fc <I2C_Master_ISR_IT+0x194>
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801466a:	2b00      	cmp	r3, #0
 801466c:	d146      	bne.n	80146fc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	b29a      	uxth	r2, r3
 8014676:	2112      	movs	r1, #18
 8014678:	187b      	adds	r3, r7, r1
 801467a:	0592      	lsls	r2, r2, #22
 801467c:	0d92      	lsrs	r2, r2, #22
 801467e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014684:	b29b      	uxth	r3, r3
 8014686:	2bff      	cmp	r3, #255	@ 0xff
 8014688:	d910      	bls.n	80146ac <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	22ff      	movs	r2, #255	@ 0xff
 801468e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014694:	b2da      	uxtb	r2, r3
 8014696:	2380      	movs	r3, #128	@ 0x80
 8014698:	045c      	lsls	r4, r3, #17
 801469a:	187b      	adds	r3, r7, r1
 801469c:	8819      	ldrh	r1, [r3, #0]
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	2300      	movs	r3, #0
 80146a2:	9300      	str	r3, [sp, #0]
 80146a4:	0023      	movs	r3, r4
 80146a6:	f001 fcf1 	bl	801608c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80146aa:	e03c      	b.n	8014726 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ba:	4a3f      	ldr	r2, [pc, #252]	@ (80147b8 <I2C_Master_ISR_IT+0x250>)
 80146bc:	4293      	cmp	r3, r2
 80146be:	d00e      	beq.n	80146de <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146c4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80146ca:	2312      	movs	r3, #18
 80146cc:	18fb      	adds	r3, r7, r3
 80146ce:	8819      	ldrh	r1, [r3, #0]
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	2300      	movs	r3, #0
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	0023      	movs	r3, r4
 80146d8:	f001 fcd8 	bl	801608c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80146dc:	e023      	b.n	8014726 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146e2:	b2da      	uxtb	r2, r3
 80146e4:	2380      	movs	r3, #128	@ 0x80
 80146e6:	049c      	lsls	r4, r3, #18
 80146e8:	2312      	movs	r3, #18
 80146ea:	18fb      	adds	r3, r7, r3
 80146ec:	8819      	ldrh	r1, [r3, #0]
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	2300      	movs	r3, #0
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	0023      	movs	r3, r4
 80146f6:	f001 fcc9 	bl	801608c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80146fa:	e014      	b.n	8014726 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	685a      	ldr	r2, [r3, #4]
 8014702:	2380      	movs	r3, #128	@ 0x80
 8014704:	049b      	lsls	r3, r3, #18
 8014706:	401a      	ands	r2, r3
 8014708:	2380      	movs	r3, #128	@ 0x80
 801470a:	049b      	lsls	r3, r3, #18
 801470c:	429a      	cmp	r2, r3
 801470e:	d004      	beq.n	801471a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	0018      	movs	r0, r3
 8014714:	f000 fd56 	bl	80151c4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014718:	e036      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	2140      	movs	r1, #64	@ 0x40
 801471e:	0018      	movs	r0, r3
 8014720:	f001 f83c 	bl	801579c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014724:	e030      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
 8014726:	e02f      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	2240      	movs	r2, #64	@ 0x40
 801472c:	4013      	ands	r3, r2
 801472e:	d02b      	beq.n	8014788 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2240      	movs	r2, #64	@ 0x40
 8014734:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8014736:	d027      	beq.n	8014788 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801473c:	b29b      	uxth	r3, r3
 801473e:	2b00      	cmp	r3, #0
 8014740:	d11d      	bne.n	801477e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	2380      	movs	r3, #128	@ 0x80
 801474a:	049b      	lsls	r3, r3, #18
 801474c:	401a      	ands	r2, r3
 801474e:	2380      	movs	r3, #128	@ 0x80
 8014750:	049b      	lsls	r3, r3, #18
 8014752:	429a      	cmp	r2, r3
 8014754:	d018      	beq.n	8014788 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801475a:	4a17      	ldr	r2, [pc, #92]	@ (80147b8 <I2C_Master_ISR_IT+0x250>)
 801475c:	4293      	cmp	r3, r2
 801475e:	d109      	bne.n	8014774 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2180      	movs	r1, #128	@ 0x80
 801476c:	01c9      	lsls	r1, r1, #7
 801476e:	430a      	orrs	r2, r1
 8014770:	605a      	str	r2, [r3, #4]
 8014772:	e009      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	0018      	movs	r0, r3
 8014778:	f000 fd24 	bl	80151c4 <I2C_ITMasterSeqCplt>
 801477c:	e004      	b.n	8014788 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2140      	movs	r1, #64	@ 0x40
 8014782:	0018      	movs	r0, r3
 8014784:	f001 f80a 	bl	801579c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	2220      	movs	r2, #32
 801478c:	4013      	ands	r3, r2
 801478e:	d009      	beq.n	80147a4 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2220      	movs	r2, #32
 8014794:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014796:	d005      	beq.n	80147a4 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8014798:	697a      	ldr	r2, [r7, #20]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	0011      	movs	r1, r2
 801479e:	0018      	movs	r0, r3
 80147a0:	f000 fdb6 	bl	8015310 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2240      	movs	r2, #64	@ 0x40
 80147a8:	2100      	movs	r1, #0
 80147aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	0018      	movs	r0, r3
 80147b0:	46bd      	mov	sp, r7
 80147b2:	b007      	add	sp, #28
 80147b4:	bd90      	pop	{r4, r7, pc}
 80147b6:	46c0      	nop			@ (mov r8, r8)
 80147b8:	ffff0000 	.word	0xffff0000

080147bc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2240      	movs	r2, #64	@ 0x40
 80147d6:	5c9b      	ldrb	r3, [r3, r2]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d101      	bne.n	80147e0 <I2C_Slave_ISR_IT+0x24>
 80147dc:	2302      	movs	r3, #2
 80147de:	e0e6      	b.n	80149ae <I2C_Slave_ISR_IT+0x1f2>
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2240      	movs	r2, #64	@ 0x40
 80147e4:	2101      	movs	r1, #1
 80147e6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	2220      	movs	r2, #32
 80147ec:	4013      	ands	r3, r2
 80147ee:	d009      	beq.n	8014804 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2220      	movs	r2, #32
 80147f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80147f6:	d005      	beq.n	8014804 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80147f8:	693a      	ldr	r2, [r7, #16]
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	0011      	movs	r1, r2
 80147fe:	0018      	movs	r0, r3
 8014800:	f000 fe54 	bl	80154ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	2210      	movs	r2, #16
 8014808:	4013      	ands	r3, r2
 801480a:	d052      	beq.n	80148b2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2210      	movs	r2, #16
 8014810:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014812:	d04e      	beq.n	80148b2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014818:	b29b      	uxth	r3, r3
 801481a:	2b00      	cmp	r3, #0
 801481c:	d12d      	bne.n	801487a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2241      	movs	r2, #65	@ 0x41
 8014822:	5c9b      	ldrb	r3, [r3, r2]
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b28      	cmp	r3, #40	@ 0x28
 8014828:	d10b      	bne.n	8014842 <I2C_Slave_ISR_IT+0x86>
 801482a:	697a      	ldr	r2, [r7, #20]
 801482c:	2380      	movs	r3, #128	@ 0x80
 801482e:	049b      	lsls	r3, r3, #18
 8014830:	429a      	cmp	r2, r3
 8014832:	d106      	bne.n	8014842 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8014834:	693a      	ldr	r2, [r7, #16]
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	0011      	movs	r1, r2
 801483a:	0018      	movs	r0, r3
 801483c:	f000 ff56 	bl	80156ec <I2C_ITListenCplt>
 8014840:	e036      	b.n	80148b0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2241      	movs	r2, #65	@ 0x41
 8014846:	5c9b      	ldrb	r3, [r3, r2]
 8014848:	b2db      	uxtb	r3, r3
 801484a:	2b29      	cmp	r3, #41	@ 0x29
 801484c:	d110      	bne.n	8014870 <I2C_Slave_ISR_IT+0xb4>
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	4a59      	ldr	r2, [pc, #356]	@ (80149b8 <I2C_Slave_ISR_IT+0x1fc>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d00c      	beq.n	8014870 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2210      	movs	r2, #16
 801485c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	0018      	movs	r0, r3
 8014862:	f001 f8c6 	bl	80159f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	0018      	movs	r0, r3
 801486a:	f000 fced 	bl	8015248 <I2C_ITSlaveSeqCplt>
 801486e:	e01f      	b.n	80148b0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	2210      	movs	r2, #16
 8014876:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8014878:	e091      	b.n	801499e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	2210      	movs	r2, #16
 8014880:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014886:	2204      	movs	r2, #4
 8014888:	431a      	orrs	r2, r3
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d005      	beq.n	80148a0 <I2C_Slave_ISR_IT+0xe4>
 8014894:	697a      	ldr	r2, [r7, #20]
 8014896:	2380      	movs	r3, #128	@ 0x80
 8014898:	045b      	lsls	r3, r3, #17
 801489a:	429a      	cmp	r2, r3
 801489c:	d000      	beq.n	80148a0 <I2C_Slave_ISR_IT+0xe4>
 801489e:	e07e      	b.n	801499e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	0011      	movs	r1, r2
 80148a8:	0018      	movs	r0, r3
 80148aa:	f000 ff77 	bl	801579c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80148ae:	e076      	b.n	801499e <I2C_Slave_ISR_IT+0x1e2>
 80148b0:	e075      	b.n	801499e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	2204      	movs	r2, #4
 80148b6:	4013      	ands	r3, r2
 80148b8:	d02f      	beq.n	801491a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2204      	movs	r2, #4
 80148be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80148c0:	d02b      	beq.n	801491a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d018      	beq.n	80148fe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148d6:	b2d2      	uxtb	r2, r2
 80148d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148de:	1c5a      	adds	r2, r3, #1
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148e8:	3b01      	subs	r3, #1
 80148ea:	b29a      	uxth	r2, r3
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	3b01      	subs	r3, #1
 80148f8:	b29a      	uxth	r2, r3
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014902:	b29b      	uxth	r3, r3
 8014904:	2b00      	cmp	r3, #0
 8014906:	d14c      	bne.n	80149a2 <I2C_Slave_ISR_IT+0x1e6>
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	4a2b      	ldr	r2, [pc, #172]	@ (80149b8 <I2C_Slave_ISR_IT+0x1fc>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d048      	beq.n	80149a2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	0018      	movs	r0, r3
 8014914:	f000 fc98 	bl	8015248 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8014918:	e043      	b.n	80149a2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	2208      	movs	r2, #8
 801491e:	4013      	ands	r3, r2
 8014920:	d00a      	beq.n	8014938 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2208      	movs	r2, #8
 8014926:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014928:	d006      	beq.n	8014938 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801492a:	693a      	ldr	r2, [r7, #16]
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	0011      	movs	r1, r2
 8014930:	0018      	movs	r0, r3
 8014932:	f000 fba3 	bl	801507c <I2C_ITAddrCplt>
 8014936:	e035      	b.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2202      	movs	r2, #2
 801493c:	4013      	ands	r3, r2
 801493e:	d031      	beq.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	2202      	movs	r2, #2
 8014944:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014946:	d02d      	beq.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801494c:	b29b      	uxth	r3, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	d018      	beq.n	8014984 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014956:	781a      	ldrb	r2, [r3, #0]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014962:	1c5a      	adds	r2, r3, #1
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801496c:	b29b      	uxth	r3, r3
 801496e:	3b01      	subs	r3, #1
 8014970:	b29a      	uxth	r2, r3
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801497a:	3b01      	subs	r3, #1
 801497c:	b29a      	uxth	r2, r3
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014982:	e00f      	b.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	2380      	movs	r3, #128	@ 0x80
 8014988:	045b      	lsls	r3, r3, #17
 801498a:	429a      	cmp	r2, r3
 801498c:	d002      	beq.n	8014994 <I2C_Slave_ISR_IT+0x1d8>
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d107      	bne.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	0018      	movs	r0, r3
 8014998:	f000 fc56 	bl	8015248 <I2C_ITSlaveSeqCplt>
 801499c:	e002      	b.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801499e:	46c0      	nop			@ (mov r8, r8)
 80149a0:	e000      	b.n	80149a4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80149a2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2240      	movs	r2, #64	@ 0x40
 80149a8:	2100      	movs	r1, #0
 80149aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	0018      	movs	r0, r3
 80149b0:	46bd      	mov	sp, r7
 80149b2:	b006      	add	sp, #24
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	46c0      	nop			@ (mov r8, r8)
 80149b8:	ffff0000 	.word	0xffff0000

080149bc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80149bc:	b590      	push	{r4, r7, lr}
 80149be:	b089      	sub	sp, #36	@ 0x24
 80149c0:	af02      	add	r7, sp, #8
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2240      	movs	r2, #64	@ 0x40
 80149cc:	5c9b      	ldrb	r3, [r3, r2]
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d101      	bne.n	80149d6 <I2C_Master_ISR_DMA+0x1a>
 80149d2:	2302      	movs	r3, #2
 80149d4:	e0e7      	b.n	8014ba6 <I2C_Master_ISR_DMA+0x1ea>
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2240      	movs	r2, #64	@ 0x40
 80149da:	2101      	movs	r1, #1
 80149dc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	2210      	movs	r2, #16
 80149e2:	4013      	ands	r3, r2
 80149e4:	d017      	beq.n	8014a16 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2210      	movs	r2, #16
 80149ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80149ec:	d013      	beq.n	8014a16 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	2210      	movs	r2, #16
 80149f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149fa:	2204      	movs	r2, #4
 80149fc:	431a      	orrs	r2, r3
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	2120      	movs	r1, #32
 8014a06:	0018      	movs	r0, r3
 8014a08:	f001 fb7a 	bl	8016100 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	0018      	movs	r0, r3
 8014a10:	f000 ffef 	bl	80159f2 <I2C_Flush_TXDR>
 8014a14:	e0c2      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2280      	movs	r2, #128	@ 0x80
 8014a1a:	4013      	ands	r3, r2
 8014a1c:	d100      	bne.n	8014a20 <I2C_Master_ISR_DMA+0x64>
 8014a1e:	e07c      	b.n	8014b1a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2240      	movs	r2, #64	@ 0x40
 8014a24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014a26:	d100      	bne.n	8014a2a <I2C_Master_ISR_DMA+0x6e>
 8014a28:	e077      	b.n	8014b1a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2140      	movs	r1, #64	@ 0x40
 8014a36:	438a      	bics	r2, r1
 8014a38:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d055      	beq.n	8014af0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	2312      	movs	r3, #18
 8014a4e:	18fb      	adds	r3, r7, r3
 8014a50:	0592      	lsls	r2, r2, #22
 8014a52:	0d92      	lsrs	r2, r2, #22
 8014a54:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	2bff      	cmp	r3, #255	@ 0xff
 8014a5e:	d906      	bls.n	8014a6e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	22ff      	movs	r2, #255	@ 0xff
 8014a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8014a66:	2380      	movs	r3, #128	@ 0x80
 8014a68:	045b      	lsls	r3, r3, #17
 8014a6a:	617b      	str	r3, [r7, #20]
 8014a6c:	e010      	b.n	8014a90 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8014bb0 <I2C_Master_ISR_DMA+0x1f4>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d003      	beq.n	8014a8a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a86:	617b      	str	r3, [r7, #20]
 8014a88:	e002      	b.n	8014a90 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8014a8a:	2380      	movs	r3, #128	@ 0x80
 8014a8c:	049b      	lsls	r3, r3, #18
 8014a8e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a94:	b2da      	uxtb	r2, r3
 8014a96:	697c      	ldr	r4, [r7, #20]
 8014a98:	2312      	movs	r3, #18
 8014a9a:	18fb      	adds	r3, r7, r3
 8014a9c:	8819      	ldrh	r1, [r3, #0]
 8014a9e:	68f8      	ldr	r0, [r7, #12]
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	0023      	movs	r3, r4
 8014aa6:	f001 faf1 	bl	801608c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	2241      	movs	r2, #65	@ 0x41
 8014ac0:	5c9b      	ldrb	r3, [r3, r2]
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	2b22      	cmp	r3, #34	@ 0x22
 8014ac6:	d109      	bne.n	8014adc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2180      	movs	r1, #128	@ 0x80
 8014ad4:	0209      	lsls	r1, r1, #8
 8014ad6:	430a      	orrs	r2, r1
 8014ad8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014ada:	e05f      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2180      	movs	r1, #128	@ 0x80
 8014ae8:	01c9      	lsls	r1, r1, #7
 8014aea:	430a      	orrs	r2, r1
 8014aec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014aee:	e055      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	685a      	ldr	r2, [r3, #4]
 8014af6:	2380      	movs	r3, #128	@ 0x80
 8014af8:	049b      	lsls	r3, r3, #18
 8014afa:	401a      	ands	r2, r3
 8014afc:	2380      	movs	r3, #128	@ 0x80
 8014afe:	049b      	lsls	r3, r3, #18
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d004      	beq.n	8014b0e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	0018      	movs	r0, r3
 8014b08:	f000 fb5c 	bl	80151c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8014b0c:	e046      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	2140      	movs	r1, #64	@ 0x40
 8014b12:	0018      	movs	r0, r3
 8014b14:	f000 fe42 	bl	801579c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014b18:	e040      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	2240      	movs	r2, #64	@ 0x40
 8014b1e:	4013      	ands	r3, r2
 8014b20:	d02c      	beq.n	8014b7c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2240      	movs	r2, #64	@ 0x40
 8014b26:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014b28:	d028      	beq.n	8014b7c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d11d      	bne.n	8014b70 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	685a      	ldr	r2, [r3, #4]
 8014b3a:	2380      	movs	r3, #128	@ 0x80
 8014b3c:	049b      	lsls	r3, r3, #18
 8014b3e:	401a      	ands	r2, r3
 8014b40:	2380      	movs	r3, #128	@ 0x80
 8014b42:	049b      	lsls	r3, r3, #18
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d028      	beq.n	8014b9a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b4c:	4a18      	ldr	r2, [pc, #96]	@ (8014bb0 <I2C_Master_ISR_DMA+0x1f4>)
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d109      	bne.n	8014b66 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	685a      	ldr	r2, [r3, #4]
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2180      	movs	r1, #128	@ 0x80
 8014b5e:	01c9      	lsls	r1, r1, #7
 8014b60:	430a      	orrs	r2, r1
 8014b62:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8014b64:	e019      	b.n	8014b9a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	0018      	movs	r0, r3
 8014b6a:	f000 fb2b 	bl	80151c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8014b6e:	e014      	b.n	8014b9a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	2140      	movs	r1, #64	@ 0x40
 8014b74:	0018      	movs	r0, r3
 8014b76:	f000 fe11 	bl	801579c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014b7a:	e00e      	b.n	8014b9a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	2220      	movs	r2, #32
 8014b80:	4013      	ands	r3, r2
 8014b82:	d00b      	beq.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2220      	movs	r2, #32
 8014b88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014b8a:	d007      	beq.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014b8c:	68ba      	ldr	r2, [r7, #8]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	0011      	movs	r1, r2
 8014b92:	0018      	movs	r0, r3
 8014b94:	f000 fbbc 	bl	8015310 <I2C_ITMasterCplt>
 8014b98:	e000      	b.n	8014b9c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8014b9a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2240      	movs	r2, #64	@ 0x40
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	0018      	movs	r0, r3
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	b007      	add	sp, #28
 8014bac:	bd90      	pop	{r4, r7, pc}
 8014bae:	46c0      	nop			@ (mov r8, r8)
 8014bb0:	ffff0000 	.word	0xffff0000

08014bb4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8014bb4:	b590      	push	{r4, r7, lr}
 8014bb6:	b089      	sub	sp, #36	@ 0x24
 8014bb8:	af02      	add	r7, sp, #8
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014bc0:	4b88      	ldr	r3, [pc, #544]	@ (8014de4 <I2C_Mem_ISR_DMA+0x230>)
 8014bc2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2240      	movs	r2, #64	@ 0x40
 8014bc8:	5c9b      	ldrb	r3, [r3, r2]
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d101      	bne.n	8014bd2 <I2C_Mem_ISR_DMA+0x1e>
 8014bce:	2302      	movs	r3, #2
 8014bd0:	e104      	b.n	8014ddc <I2C_Mem_ISR_DMA+0x228>
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2240      	movs	r2, #64	@ 0x40
 8014bd6:	2101      	movs	r1, #1
 8014bd8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2210      	movs	r2, #16
 8014bde:	4013      	ands	r3, r2
 8014be0:	d017      	beq.n	8014c12 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2210      	movs	r2, #16
 8014be6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014be8:	d013      	beq.n	8014c12 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2210      	movs	r2, #16
 8014bf0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014bf6:	2204      	movs	r2, #4
 8014bf8:	431a      	orrs	r2, r3
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2120      	movs	r1, #32
 8014c02:	0018      	movs	r0, r3
 8014c04:	f001 fa7c 	bl	8016100 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	0018      	movs	r0, r3
 8014c0c:	f000 fef1 	bl	80159f2 <I2C_Flush_TXDR>
 8014c10:	e0df      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2202      	movs	r2, #2
 8014c16:	4013      	ands	r3, r2
 8014c18:	d00d      	beq.n	8014c36 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2202      	movs	r2, #2
 8014c1e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014c20:	d009      	beq.n	8014c36 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	68fa      	ldr	r2, [r7, #12]
 8014c28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8014c2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	4252      	negs	r2, r2
 8014c32:	651a      	str	r2, [r3, #80]	@ 0x50
 8014c34:	e0cd      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	2280      	movs	r2, #128	@ 0x80
 8014c3a:	4013      	ands	r3, r2
 8014c3c:	d05e      	beq.n	8014cfc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2240      	movs	r2, #64	@ 0x40
 8014c42:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014c44:	d05a      	beq.n	8014cfc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2110      	movs	r1, #16
 8014c4a:	0018      	movs	r0, r3
 8014c4c:	f001 fa58 	bl	8016100 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d04a      	beq.n	8014cf0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	2bff      	cmp	r3, #255	@ 0xff
 8014c62:	d910      	bls.n	8014c86 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	22ff      	movs	r2, #255	@ 0xff
 8014c68:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c6e:	b299      	uxth	r1, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c74:	b2da      	uxtb	r2, r3
 8014c76:	2380      	movs	r3, #128	@ 0x80
 8014c78:	045b      	lsls	r3, r3, #17
 8014c7a:	68f8      	ldr	r0, [r7, #12]
 8014c7c:	2400      	movs	r4, #0
 8014c7e:	9400      	str	r4, [sp, #0]
 8014c80:	f001 fa04 	bl	801608c <I2C_TransferConfig>
 8014c84:	e011      	b.n	8014caa <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c94:	b299      	uxth	r1, r3
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c9a:	b2da      	uxtb	r2, r3
 8014c9c:	2380      	movs	r3, #128	@ 0x80
 8014c9e:	049b      	lsls	r3, r3, #18
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	2400      	movs	r4, #0
 8014ca4:	9400      	str	r4, [sp, #0]
 8014ca6:	f001 f9f1 	bl	801608c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cb4:	1ad3      	subs	r3, r2, r3
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2241      	movs	r2, #65	@ 0x41
 8014cc0:	5c9b      	ldrb	r3, [r3, r2]
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	2b22      	cmp	r3, #34	@ 0x22
 8014cc6:	d109      	bne.n	8014cdc <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2180      	movs	r1, #128	@ 0x80
 8014cd4:	0209      	lsls	r1, r1, #8
 8014cd6:	430a      	orrs	r2, r1
 8014cd8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014cda:	e07a      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	681a      	ldr	r2, [r3, #0]
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	2180      	movs	r1, #128	@ 0x80
 8014ce8:	01c9      	lsls	r1, r1, #7
 8014cea:	430a      	orrs	r2, r1
 8014cec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014cee:	e070      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2140      	movs	r1, #64	@ 0x40
 8014cf4:	0018      	movs	r0, r3
 8014cf6:	f000 fd51 	bl	801579c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014cfa:	e06a      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	2240      	movs	r2, #64	@ 0x40
 8014d00:	4013      	ands	r3, r2
 8014d02:	d058      	beq.n	8014db6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2240      	movs	r2, #64	@ 0x40
 8014d08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014d0a:	d054      	beq.n	8014db6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2241      	movs	r2, #65	@ 0x41
 8014d10:	5c9b      	ldrb	r3, [r3, r2]
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	2b22      	cmp	r3, #34	@ 0x22
 8014d16:	d101      	bne.n	8014d1c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8014d18:	4b33      	ldr	r3, [pc, #204]	@ (8014de8 <I2C_Mem_ISR_DMA+0x234>)
 8014d1a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	2bff      	cmp	r3, #255	@ 0xff
 8014d24:	d911      	bls.n	8014d4a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	22ff      	movs	r2, #255	@ 0xff
 8014d2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d30:	b299      	uxth	r1, r3
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d36:	b2da      	uxtb	r2, r3
 8014d38:	2380      	movs	r3, #128	@ 0x80
 8014d3a:	045c      	lsls	r4, r3, #17
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	9300      	str	r3, [sp, #0]
 8014d42:	0023      	movs	r3, r4
 8014d44:	f001 f9a2 	bl	801608c <I2C_TransferConfig>
 8014d48:	e012      	b.n	8014d70 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d58:	b299      	uxth	r1, r3
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d5e:	b2da      	uxtb	r2, r3
 8014d60:	2380      	movs	r3, #128	@ 0x80
 8014d62:	049c      	lsls	r4, r3, #18
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	9300      	str	r3, [sp, #0]
 8014d6a:	0023      	movs	r3, r4
 8014d6c:	f001 f98e 	bl	801608c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	b29a      	uxth	r2, r3
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2241      	movs	r2, #65	@ 0x41
 8014d86:	5c9b      	ldrb	r3, [r3, r2]
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	2b22      	cmp	r3, #34	@ 0x22
 8014d8c:	d109      	bne.n	8014da2 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	2180      	movs	r1, #128	@ 0x80
 8014d9a:	0209      	lsls	r1, r1, #8
 8014d9c:	430a      	orrs	r2, r1
 8014d9e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014da0:	e017      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2180      	movs	r1, #128	@ 0x80
 8014dae:	01c9      	lsls	r1, r1, #7
 8014db0:	430a      	orrs	r2, r1
 8014db2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014db4:	e00d      	b.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	2220      	movs	r2, #32
 8014dba:	4013      	ands	r3, r2
 8014dbc:	d009      	beq.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2220      	movs	r2, #32
 8014dc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014dc4:	d005      	beq.n	8014dd2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014dc6:	68ba      	ldr	r2, [r7, #8]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	0011      	movs	r1, r2
 8014dcc:	0018      	movs	r0, r3
 8014dce:	f000 fa9f 	bl	8015310 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2240      	movs	r2, #64	@ 0x40
 8014dd6:	2100      	movs	r1, #0
 8014dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	0018      	movs	r0, r3
 8014dde:	46bd      	mov	sp, r7
 8014de0:	b007      	add	sp, #28
 8014de2:	bd90      	pop	{r4, r7, pc}
 8014de4:	80002000 	.word	0x80002000
 8014de8:	80002400 	.word	0x80002400

08014dec <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b088      	sub	sp, #32
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dfc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2240      	movs	r2, #64	@ 0x40
 8014e06:	5c9b      	ldrb	r3, [r3, r2]
 8014e08:	2b01      	cmp	r3, #1
 8014e0a:	d101      	bne.n	8014e10 <I2C_Slave_ISR_DMA+0x24>
 8014e0c:	2302      	movs	r3, #2
 8014e0e:	e0cd      	b.n	8014fac <I2C_Slave_ISR_DMA+0x1c0>
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2240      	movs	r2, #64	@ 0x40
 8014e14:	2101      	movs	r1, #1
 8014e16:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2220      	movs	r2, #32
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	d009      	beq.n	8014e34 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2220      	movs	r2, #32
 8014e24:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e26:	d005      	beq.n	8014e34 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	0011      	movs	r1, r2
 8014e2e:	0018      	movs	r0, r3
 8014e30:	f000 fb3c 	bl	80154ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	2210      	movs	r2, #16
 8014e38:	4013      	ands	r3, r2
 8014e3a:	d100      	bne.n	8014e3e <I2C_Slave_ISR_DMA+0x52>
 8014e3c:	e0a3      	b.n	8014f86 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2210      	movs	r2, #16
 8014e42:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014e44:	d100      	bne.n	8014e48 <I2C_Slave_ISR_DMA+0x5c>
 8014e46:	e09e      	b.n	8014f86 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	2380      	movs	r3, #128	@ 0x80
 8014e4c:	01db      	lsls	r3, r3, #7
 8014e4e:	4013      	ands	r3, r2
 8014e50:	d105      	bne.n	8014e5e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	2380      	movs	r3, #128	@ 0x80
 8014e56:	021b      	lsls	r3, r3, #8
 8014e58:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014e5a:	d100      	bne.n	8014e5e <I2C_Slave_ISR_DMA+0x72>
 8014e5c:	e08c      	b.n	8014f78 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00c      	beq.n	8014e80 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	2380      	movs	r3, #128	@ 0x80
 8014e6a:	021b      	lsls	r3, r3, #8
 8014e6c:	4013      	ands	r3, r2
 8014e6e:	d007      	beq.n	8014e80 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d101      	bne.n	8014e80 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8014e7c:	2301      	movs	r3, #1
 8014e7e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00c      	beq.n	8014ea2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	2380      	movs	r3, #128	@ 0x80
 8014e8c:	01db      	lsls	r3, r3, #7
 8014e8e:	4013      	ands	r3, r2
 8014e90:	d007      	beq.n	8014ea2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d101      	bne.n	8014ea2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d12d      	bne.n	8014f04 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	2241      	movs	r2, #65	@ 0x41
 8014eac:	5c9b      	ldrb	r3, [r3, r2]
 8014eae:	b2db      	uxtb	r3, r3
 8014eb0:	2b28      	cmp	r3, #40	@ 0x28
 8014eb2:	d10b      	bne.n	8014ecc <I2C_Slave_ISR_DMA+0xe0>
 8014eb4:	69ba      	ldr	r2, [r7, #24]
 8014eb6:	2380      	movs	r3, #128	@ 0x80
 8014eb8:	049b      	lsls	r3, r3, #18
 8014eba:	429a      	cmp	r2, r3
 8014ebc:	d106      	bne.n	8014ecc <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014ebe:	68ba      	ldr	r2, [r7, #8]
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	0011      	movs	r1, r2
 8014ec4:	0018      	movs	r0, r3
 8014ec6:	f000 fc11 	bl	80156ec <I2C_ITListenCplt>
 8014eca:	e054      	b.n	8014f76 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	2241      	movs	r2, #65	@ 0x41
 8014ed0:	5c9b      	ldrb	r3, [r3, r2]
 8014ed2:	b2db      	uxtb	r3, r3
 8014ed4:	2b29      	cmp	r3, #41	@ 0x29
 8014ed6:	d110      	bne.n	8014efa <I2C_Slave_ISR_DMA+0x10e>
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	4a36      	ldr	r2, [pc, #216]	@ (8014fb4 <I2C_Slave_ISR_DMA+0x1c8>)
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d00c      	beq.n	8014efa <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2210      	movs	r2, #16
 8014ee6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	0018      	movs	r0, r3
 8014eec:	f000 fd81 	bl	80159f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	0018      	movs	r0, r3
 8014ef4:	f000 f9a8 	bl	8015248 <I2C_ITSlaveSeqCplt>
 8014ef8:	e03d      	b.n	8014f76 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	2210      	movs	r2, #16
 8014f00:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8014f02:	e03e      	b.n	8014f82 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2210      	movs	r2, #16
 8014f0a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f10:	2204      	movs	r2, #4
 8014f12:	431a      	orrs	r2, r3
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8014f18:	2317      	movs	r3, #23
 8014f1a:	18fb      	adds	r3, r7, r3
 8014f1c:	68fa      	ldr	r2, [r7, #12]
 8014f1e:	2141      	movs	r1, #65	@ 0x41
 8014f20:	5c52      	ldrb	r2, [r2, r1]
 8014f22:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d004      	beq.n	8014f34 <I2C_Slave_ISR_DMA+0x148>
 8014f2a:	69ba      	ldr	r2, [r7, #24]
 8014f2c:	2380      	movs	r3, #128	@ 0x80
 8014f2e:	045b      	lsls	r3, r3, #17
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d126      	bne.n	8014f82 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014f34:	2217      	movs	r2, #23
 8014f36:	18bb      	adds	r3, r7, r2
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	2b21      	cmp	r3, #33	@ 0x21
 8014f3c:	d003      	beq.n	8014f46 <I2C_Slave_ISR_DMA+0x15a>
 8014f3e:	18bb      	adds	r3, r7, r2
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	2b29      	cmp	r3, #41	@ 0x29
 8014f44:	d103      	bne.n	8014f4e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2221      	movs	r2, #33	@ 0x21
 8014f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014f4c:	e00b      	b.n	8014f66 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014f4e:	2217      	movs	r2, #23
 8014f50:	18bb      	adds	r3, r7, r2
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	2b22      	cmp	r3, #34	@ 0x22
 8014f56:	d003      	beq.n	8014f60 <I2C_Slave_ISR_DMA+0x174>
 8014f58:	18bb      	adds	r3, r7, r2
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f5e:	d102      	bne.n	8014f66 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2222      	movs	r2, #34	@ 0x22
 8014f64:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	0011      	movs	r1, r2
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f000 fc14 	bl	801579c <I2C_ITError>
      if (treatdmanack == 1U)
 8014f74:	e005      	b.n	8014f82 <I2C_Slave_ISR_DMA+0x196>
 8014f76:	e004      	b.n	8014f82 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2210      	movs	r2, #16
 8014f7e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014f80:	e00f      	b.n	8014fa2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8014f82:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014f84:	e00d      	b.n	8014fa2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	2208      	movs	r2, #8
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	d009      	beq.n	8014fa2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2208      	movs	r2, #8
 8014f92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014f94:	d005      	beq.n	8014fa2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8014f96:	68ba      	ldr	r2, [r7, #8]
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	0011      	movs	r1, r2
 8014f9c:	0018      	movs	r0, r3
 8014f9e:	f000 f86d 	bl	801507c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2240      	movs	r2, #64	@ 0x40
 8014fa6:	2100      	movs	r1, #0
 8014fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014faa:	2300      	movs	r3, #0
}
 8014fac:	0018      	movs	r0, r3
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	b008      	add	sp, #32
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	ffff0000 	.word	0xffff0000

08014fb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014fb8:	b5b0      	push	{r4, r5, r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af02      	add	r7, sp, #8
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	000c      	movs	r4, r1
 8014fc2:	0010      	movs	r0, r2
 8014fc4:	0019      	movs	r1, r3
 8014fc6:	250a      	movs	r5, #10
 8014fc8:	197b      	adds	r3, r7, r5
 8014fca:	1c22      	adds	r2, r4, #0
 8014fcc:	801a      	strh	r2, [r3, #0]
 8014fce:	2308      	movs	r3, #8
 8014fd0:	18fb      	adds	r3, r7, r3
 8014fd2:	1c02      	adds	r2, r0, #0
 8014fd4:	801a      	strh	r2, [r3, #0]
 8014fd6:	1dbb      	adds	r3, r7, #6
 8014fd8:	1c0a      	adds	r2, r1, #0
 8014fda:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8014fdc:	1dbb      	adds	r3, r7, #6
 8014fde:	881b      	ldrh	r3, [r3, #0]
 8014fe0:	b2da      	uxtb	r2, r3
 8014fe2:	197b      	adds	r3, r7, r5
 8014fe4:	8819      	ldrh	r1, [r3, #0]
 8014fe6:	68f8      	ldr	r0, [r7, #12]
 8014fe8:	4b23      	ldr	r3, [pc, #140]	@ (8015078 <I2C_RequestMemoryRead+0xc0>)
 8014fea:	9300      	str	r3, [sp, #0]
 8014fec:	2300      	movs	r3, #0
 8014fee:	f001 f84d 	bl	801608c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ff4:	6a39      	ldr	r1, [r7, #32]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	0018      	movs	r0, r3
 8014ffa:	f000 fe43 	bl	8015c84 <I2C_WaitOnTXISFlagUntilTimeout>
 8014ffe:	1e03      	subs	r3, r0, #0
 8015000:	d001      	beq.n	8015006 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8015002:	2301      	movs	r3, #1
 8015004:	e033      	b.n	801506e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015006:	1dbb      	adds	r3, r7, #6
 8015008:	881b      	ldrh	r3, [r3, #0]
 801500a:	2b01      	cmp	r3, #1
 801500c:	d107      	bne.n	801501e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801500e:	2308      	movs	r3, #8
 8015010:	18fb      	adds	r3, r7, r3
 8015012:	881b      	ldrh	r3, [r3, #0]
 8015014:	b2da      	uxtb	r2, r3
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	629a      	str	r2, [r3, #40]	@ 0x28
 801501c:	e019      	b.n	8015052 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801501e:	2308      	movs	r3, #8
 8015020:	18fb      	adds	r3, r7, r3
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	0a1b      	lsrs	r3, r3, #8
 8015026:	b29b      	uxth	r3, r3
 8015028:	b2da      	uxtb	r2, r3
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8015030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015032:	6a39      	ldr	r1, [r7, #32]
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	0018      	movs	r0, r3
 8015038:	f000 fe24 	bl	8015c84 <I2C_WaitOnTXISFlagUntilTimeout>
 801503c:	1e03      	subs	r3, r0, #0
 801503e:	d001      	beq.n	8015044 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8015040:	2301      	movs	r3, #1
 8015042:	e014      	b.n	801506e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015044:	2308      	movs	r3, #8
 8015046:	18fb      	adds	r3, r7, r3
 8015048:	881b      	ldrh	r3, [r3, #0]
 801504a:	b2da      	uxtb	r2, r3
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8015052:	6a3a      	ldr	r2, [r7, #32]
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	0013      	movs	r3, r2
 801505c:	2200      	movs	r2, #0
 801505e:	2140      	movs	r1, #64	@ 0x40
 8015060:	f000 fdc2 	bl	8015be8 <I2C_WaitOnFlagUntilTimeout>
 8015064:	1e03      	subs	r3, r0, #0
 8015066:	d001      	beq.n	801506c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8015068:	2301      	movs	r3, #1
 801506a:	e000      	b.n	801506e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	0018      	movs	r0, r3
 8015070:	46bd      	mov	sp, r7
 8015072:	b004      	add	sp, #16
 8015074:	bdb0      	pop	{r4, r5, r7, pc}
 8015076:	46c0      	nop			@ (mov r8, r8)
 8015078:	80002000 	.word	0x80002000

0801507c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801507c:	b5b0      	push	{r4, r5, r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2241      	movs	r2, #65	@ 0x41
 801508a:	5c9b      	ldrb	r3, [r3, r2]
 801508c:	b2db      	uxtb	r3, r3
 801508e:	001a      	movs	r2, r3
 8015090:	2328      	movs	r3, #40	@ 0x28
 8015092:	4013      	ands	r3, r2
 8015094:	2b28      	cmp	r3, #40	@ 0x28
 8015096:	d000      	beq.n	801509a <I2C_ITAddrCplt+0x1e>
 8015098:	e088      	b.n	80151ac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	699b      	ldr	r3, [r3, #24]
 80150a0:	0c1b      	lsrs	r3, r3, #16
 80150a2:	b2da      	uxtb	r2, r3
 80150a4:	250f      	movs	r5, #15
 80150a6:	197b      	adds	r3, r7, r5
 80150a8:	2101      	movs	r1, #1
 80150aa:	400a      	ands	r2, r1
 80150ac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	699b      	ldr	r3, [r3, #24]
 80150b4:	0c1b      	lsrs	r3, r3, #16
 80150b6:	b29a      	uxth	r2, r3
 80150b8:	200c      	movs	r0, #12
 80150ba:	183b      	adds	r3, r7, r0
 80150bc:	21fe      	movs	r1, #254	@ 0xfe
 80150be:	400a      	ands	r2, r1
 80150c0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	240a      	movs	r4, #10
 80150cc:	193b      	adds	r3, r7, r4
 80150ce:	0592      	lsls	r2, r2, #22
 80150d0:	0d92      	lsrs	r2, r2, #22
 80150d2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	b29a      	uxth	r2, r3
 80150dc:	2308      	movs	r3, #8
 80150de:	18fb      	adds	r3, r7, r3
 80150e0:	21fe      	movs	r1, #254	@ 0xfe
 80150e2:	400a      	ands	r2, r1
 80150e4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	2b02      	cmp	r3, #2
 80150ec:	d148      	bne.n	8015180 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80150ee:	0021      	movs	r1, r4
 80150f0:	187b      	adds	r3, r7, r1
 80150f2:	881b      	ldrh	r3, [r3, #0]
 80150f4:	09db      	lsrs	r3, r3, #7
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	183b      	adds	r3, r7, r0
 80150fa:	881b      	ldrh	r3, [r3, #0]
 80150fc:	4053      	eors	r3, r2
 80150fe:	b29b      	uxth	r3, r3
 8015100:	001a      	movs	r2, r3
 8015102:	2306      	movs	r3, #6
 8015104:	4013      	ands	r3, r2
 8015106:	d120      	bne.n	801514a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8015108:	183b      	adds	r3, r7, r0
 801510a:	187a      	adds	r2, r7, r1
 801510c:	8812      	ldrh	r2, [r2, #0]
 801510e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801511e:	2b02      	cmp	r3, #2
 8015120:	d14c      	bne.n	80151bc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2200      	movs	r2, #0
 8015126:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2208      	movs	r2, #8
 801512e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2240      	movs	r2, #64	@ 0x40
 8015134:	2100      	movs	r1, #0
 8015136:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015138:	183b      	adds	r3, r7, r0
 801513a:	881a      	ldrh	r2, [r3, #0]
 801513c:	197b      	adds	r3, r7, r5
 801513e:	7819      	ldrb	r1, [r3, #0]
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	0018      	movs	r0, r3
 8015144:	f7ff f9d7 	bl	80144f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015148:	e038      	b.n	80151bc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801514a:	240c      	movs	r4, #12
 801514c:	193b      	adds	r3, r7, r4
 801514e:	2208      	movs	r2, #8
 8015150:	18ba      	adds	r2, r7, r2
 8015152:	8812      	ldrh	r2, [r2, #0]
 8015154:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015156:	2380      	movs	r3, #128	@ 0x80
 8015158:	021a      	lsls	r2, r3, #8
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	0011      	movs	r1, r2
 801515e:	0018      	movs	r0, r3
 8015160:	f001 f85c 	bl	801621c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2240      	movs	r2, #64	@ 0x40
 8015168:	2100      	movs	r1, #0
 801516a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801516c:	193b      	adds	r3, r7, r4
 801516e:	881a      	ldrh	r2, [r3, #0]
 8015170:	230f      	movs	r3, #15
 8015172:	18fb      	adds	r3, r7, r3
 8015174:	7819      	ldrb	r1, [r3, #0]
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	0018      	movs	r0, r3
 801517a:	f7ff f9bc 	bl	80144f6 <HAL_I2C_AddrCallback>
}
 801517e:	e01d      	b.n	80151bc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015180:	2380      	movs	r3, #128	@ 0x80
 8015182:	021a      	lsls	r2, r3, #8
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	0011      	movs	r1, r2
 8015188:	0018      	movs	r0, r3
 801518a:	f001 f847 	bl	801621c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2240      	movs	r2, #64	@ 0x40
 8015192:	2100      	movs	r1, #0
 8015194:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8015196:	230c      	movs	r3, #12
 8015198:	18fb      	adds	r3, r7, r3
 801519a:	881a      	ldrh	r2, [r3, #0]
 801519c:	230f      	movs	r3, #15
 801519e:	18fb      	adds	r3, r7, r3
 80151a0:	7819      	ldrb	r1, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	0018      	movs	r0, r3
 80151a6:	f7ff f9a6 	bl	80144f6 <HAL_I2C_AddrCallback>
}
 80151aa:	e007      	b.n	80151bc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2208      	movs	r2, #8
 80151b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2240      	movs	r2, #64	@ 0x40
 80151b8:	2100      	movs	r1, #0
 80151ba:	5499      	strb	r1, [r3, r2]
}
 80151bc:	46c0      	nop			@ (mov r8, r8)
 80151be:	46bd      	mov	sp, r7
 80151c0:	b004      	add	sp, #16
 80151c2:	bdb0      	pop	{r4, r5, r7, pc}

080151c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2242      	movs	r2, #66	@ 0x42
 80151d0:	2100      	movs	r1, #0
 80151d2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2241      	movs	r2, #65	@ 0x41
 80151d8:	5c9b      	ldrb	r3, [r3, r2]
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	2b21      	cmp	r3, #33	@ 0x21
 80151de:	d117      	bne.n	8015210 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2241      	movs	r2, #65	@ 0x41
 80151e4:	2120      	movs	r1, #32
 80151e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2211      	movs	r2, #17
 80151ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2101      	movs	r1, #1
 80151f8:	0018      	movs	r0, r3
 80151fa:	f001 f80f 	bl	801621c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2240      	movs	r2, #64	@ 0x40
 8015202:	2100      	movs	r1, #0
 8015204:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	0018      	movs	r0, r3
 801520a:	f7ff f954 	bl	80144b6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801520e:	e016      	b.n	801523e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2241      	movs	r2, #65	@ 0x41
 8015214:	2120      	movs	r1, #32
 8015216:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2212      	movs	r2, #18
 801521c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2200      	movs	r2, #0
 8015222:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2102      	movs	r1, #2
 8015228:	0018      	movs	r0, r3
 801522a:	f000 fff7 	bl	801621c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2240      	movs	r2, #64	@ 0x40
 8015232:	2100      	movs	r1, #0
 8015234:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	0018      	movs	r0, r3
 801523a:	f7ff f944 	bl	80144c6 <HAL_I2C_MasterRxCpltCallback>
}
 801523e:	46c0      	nop			@ (mov r8, r8)
 8015240:	46bd      	mov	sp, r7
 8015242:	b002      	add	sp, #8
 8015244:	bd80      	pop	{r7, pc}
	...

08015248 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2242      	movs	r2, #66	@ 0x42
 801525c:	2100      	movs	r1, #0
 801525e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015260:	68fa      	ldr	r2, [r7, #12]
 8015262:	2380      	movs	r3, #128	@ 0x80
 8015264:	01db      	lsls	r3, r3, #7
 8015266:	4013      	ands	r3, r2
 8015268:	d008      	beq.n	801527c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	4924      	ldr	r1, [pc, #144]	@ (8015308 <I2C_ITSlaveSeqCplt+0xc0>)
 8015276:	400a      	ands	r2, r1
 8015278:	601a      	str	r2, [r3, #0]
 801527a:	e00c      	b.n	8015296 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	2380      	movs	r3, #128	@ 0x80
 8015280:	021b      	lsls	r3, r3, #8
 8015282:	4013      	ands	r3, r2
 8015284:	d007      	beq.n	8015296 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	491e      	ldr	r1, [pc, #120]	@ (801530c <I2C_ITSlaveSeqCplt+0xc4>)
 8015292:	400a      	ands	r2, r1
 8015294:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2241      	movs	r2, #65	@ 0x41
 801529a:	5c9b      	ldrb	r3, [r3, r2]
 801529c:	b2db      	uxtb	r3, r3
 801529e:	2b29      	cmp	r3, #41	@ 0x29
 80152a0:	d114      	bne.n	80152cc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2241      	movs	r2, #65	@ 0x41
 80152a6:	2128      	movs	r1, #40	@ 0x28
 80152a8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2221      	movs	r2, #33	@ 0x21
 80152ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2101      	movs	r1, #1
 80152b4:	0018      	movs	r0, r3
 80152b6:	f000 ffb1 	bl	801621c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2240      	movs	r2, #64	@ 0x40
 80152be:	2100      	movs	r1, #0
 80152c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	0018      	movs	r0, r3
 80152c6:	f7ff f906 	bl	80144d6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80152ca:	e019      	b.n	8015300 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2241      	movs	r2, #65	@ 0x41
 80152d0:	5c9b      	ldrb	r3, [r3, r2]
 80152d2:	b2db      	uxtb	r3, r3
 80152d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80152d6:	d113      	bne.n	8015300 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2241      	movs	r2, #65	@ 0x41
 80152dc:	2128      	movs	r1, #40	@ 0x28
 80152de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2222      	movs	r2, #34	@ 0x22
 80152e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2102      	movs	r1, #2
 80152ea:	0018      	movs	r0, r3
 80152ec:	f000 ff96 	bl	801621c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2240      	movs	r2, #64	@ 0x40
 80152f4:	2100      	movs	r1, #0
 80152f6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	0018      	movs	r0, r3
 80152fc:	f7ff f8f3 	bl	80144e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8015300:	46c0      	nop			@ (mov r8, r8)
 8015302:	46bd      	mov	sp, r7
 8015304:	b004      	add	sp, #16
 8015306:	bd80      	pop	{r7, pc}
 8015308:	ffffbfff 	.word	0xffffbfff
 801530c:	ffff7fff 	.word	0xffff7fff

08015310 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2220      	movs	r2, #32
 8015324:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2241      	movs	r2, #65	@ 0x41
 801532a:	5c9b      	ldrb	r3, [r3, r2]
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b21      	cmp	r3, #33	@ 0x21
 8015330:	d108      	bne.n	8015344 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2101      	movs	r1, #1
 8015336:	0018      	movs	r0, r3
 8015338:	f000 ff70 	bl	801621c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2211      	movs	r2, #17
 8015340:	631a      	str	r2, [r3, #48]	@ 0x30
 8015342:	e00d      	b.n	8015360 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2241      	movs	r2, #65	@ 0x41
 8015348:	5c9b      	ldrb	r3, [r3, r2]
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b22      	cmp	r3, #34	@ 0x22
 801534e:	d107      	bne.n	8015360 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2102      	movs	r1, #2
 8015354:	0018      	movs	r0, r3
 8015356:	f000 ff61 	bl	801621c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	2212      	movs	r2, #18
 801535e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	494e      	ldr	r1, [pc, #312]	@ (80154a4 <I2C_ITMasterCplt+0x194>)
 801536c:	400a      	ands	r2, r1
 801536e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2200      	movs	r2, #0
 8015374:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	4a4b      	ldr	r2, [pc, #300]	@ (80154a8 <I2C_ITMasterCplt+0x198>)
 801537a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	2210      	movs	r2, #16
 8015380:	4013      	ands	r3, r2
 8015382:	d009      	beq.n	8015398 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2210      	movs	r2, #16
 801538a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015390:	2204      	movs	r2, #4
 8015392:	431a      	orrs	r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2241      	movs	r2, #65	@ 0x41
 801539c:	5c9b      	ldrb	r3, [r3, r2]
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	2b60      	cmp	r3, #96	@ 0x60
 80153a2:	d109      	bne.n	80153b8 <I2C_ITMasterCplt+0xa8>
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	2204      	movs	r2, #4
 80153a8:	4013      	ands	r3, r2
 80153aa:	d005      	beq.n	80153b8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80153b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	0018      	movs	r0, r3
 80153bc:	f000 fb19 	bl	80159f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153c4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2241      	movs	r2, #65	@ 0x41
 80153ca:	5c9b      	ldrb	r3, [r3, r2]
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b60      	cmp	r3, #96	@ 0x60
 80153d0:	d002      	beq.n	80153d8 <I2C_ITMasterCplt+0xc8>
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d007      	beq.n	80153e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	0011      	movs	r1, r2
 80153e0:	0018      	movs	r0, r3
 80153e2:	f000 f9db 	bl	801579c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80153e6:	e058      	b.n	801549a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2241      	movs	r2, #65	@ 0x41
 80153ec:	5c9b      	ldrb	r3, [r3, r2]
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	2b21      	cmp	r3, #33	@ 0x21
 80153f2:	d126      	bne.n	8015442 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2241      	movs	r2, #65	@ 0x41
 80153f8:	2120      	movs	r1, #32
 80153fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2200      	movs	r2, #0
 8015400:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2242      	movs	r2, #66	@ 0x42
 8015406:	5c9b      	ldrb	r3, [r3, r2]
 8015408:	b2db      	uxtb	r3, r3
 801540a:	2b40      	cmp	r3, #64	@ 0x40
 801540c:	d10c      	bne.n	8015428 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2242      	movs	r2, #66	@ 0x42
 8015412:	2100      	movs	r1, #0
 8015414:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2240      	movs	r2, #64	@ 0x40
 801541a:	2100      	movs	r1, #0
 801541c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	0018      	movs	r0, r3
 8015422:	f7ff f880 	bl	8014526 <HAL_I2C_MemTxCpltCallback>
}
 8015426:	e038      	b.n	801549a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	2242      	movs	r2, #66	@ 0x42
 801542c:	2100      	movs	r1, #0
 801542e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2240      	movs	r2, #64	@ 0x40
 8015434:	2100      	movs	r1, #0
 8015436:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	0018      	movs	r0, r3
 801543c:	f7ff f83b 	bl	80144b6 <HAL_I2C_MasterTxCpltCallback>
}
 8015440:	e02b      	b.n	801549a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	2241      	movs	r2, #65	@ 0x41
 8015446:	5c9b      	ldrb	r3, [r3, r2]
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b22      	cmp	r3, #34	@ 0x22
 801544c:	d125      	bne.n	801549a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2241      	movs	r2, #65	@ 0x41
 8015452:	2120      	movs	r1, #32
 8015454:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2200      	movs	r2, #0
 801545a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2242      	movs	r2, #66	@ 0x42
 8015460:	5c9b      	ldrb	r3, [r3, r2]
 8015462:	b2db      	uxtb	r3, r3
 8015464:	2b40      	cmp	r3, #64	@ 0x40
 8015466:	d10c      	bne.n	8015482 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2242      	movs	r2, #66	@ 0x42
 801546c:	2100      	movs	r1, #0
 801546e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2240      	movs	r2, #64	@ 0x40
 8015474:	2100      	movs	r1, #0
 8015476:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	0018      	movs	r0, r3
 801547c:	f7ff f85b 	bl	8014536 <HAL_I2C_MemRxCpltCallback>
}
 8015480:	e00b      	b.n	801549a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2242      	movs	r2, #66	@ 0x42
 8015486:	2100      	movs	r1, #0
 8015488:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2240      	movs	r2, #64	@ 0x40
 801548e:	2100      	movs	r1, #0
 8015490:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	0018      	movs	r0, r3
 8015496:	f7ff f816 	bl	80144c6 <HAL_I2C_MasterRxCpltCallback>
}
 801549a:	46c0      	nop			@ (mov r8, r8)
 801549c:	46bd      	mov	sp, r7
 801549e:	b006      	add	sp, #24
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	46c0      	nop			@ (mov r8, r8)
 80154a4:	fe00e800 	.word	0xfe00e800
 80154a8:	ffff0000 	.word	0xffff0000

080154ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b086      	sub	sp, #24
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
 80154b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80154c2:	200f      	movs	r0, #15
 80154c4:	183b      	adds	r3, r7, r0
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	2141      	movs	r1, #65	@ 0x41
 80154ca:	5c52      	ldrb	r2, [r2, r1]
 80154cc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	2220      	movs	r2, #32
 80154d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80154d6:	183b      	adds	r3, r7, r0
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	2b21      	cmp	r3, #33	@ 0x21
 80154dc:	d003      	beq.n	80154e6 <I2C_ITSlaveCplt+0x3a>
 80154de:	183b      	adds	r3, r7, r0
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b29      	cmp	r3, #41	@ 0x29
 80154e4:	d109      	bne.n	80154fa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80154e6:	4a7b      	ldr	r2, [pc, #492]	@ (80156d4 <I2C_ITSlaveCplt+0x228>)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	0011      	movs	r1, r2
 80154ec:	0018      	movs	r0, r3
 80154ee:	f000 fe95 	bl	801621c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2221      	movs	r2, #33	@ 0x21
 80154f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80154f8:	e011      	b.n	801551e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80154fa:	220f      	movs	r2, #15
 80154fc:	18bb      	adds	r3, r7, r2
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	2b22      	cmp	r3, #34	@ 0x22
 8015502:	d003      	beq.n	801550c <I2C_ITSlaveCplt+0x60>
 8015504:	18bb      	adds	r3, r7, r2
 8015506:	781b      	ldrb	r3, [r3, #0]
 8015508:	2b2a      	cmp	r3, #42	@ 0x2a
 801550a:	d108      	bne.n	801551e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801550c:	4a72      	ldr	r2, [pc, #456]	@ (80156d8 <I2C_ITSlaveCplt+0x22c>)
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	0011      	movs	r1, r2
 8015512:	0018      	movs	r0, r3
 8015514:	f000 fe82 	bl	801621c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2222      	movs	r2, #34	@ 0x22
 801551c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	685a      	ldr	r2, [r3, #4]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	2180      	movs	r1, #128	@ 0x80
 801552a:	0209      	lsls	r1, r1, #8
 801552c:	430a      	orrs	r2, r1
 801552e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	685a      	ldr	r2, [r3, #4]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	4968      	ldr	r1, [pc, #416]	@ (80156dc <I2C_ITSlaveCplt+0x230>)
 801553c:	400a      	ands	r2, r1
 801553e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	0018      	movs	r0, r3
 8015544:	f000 fa55 	bl	80159f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8015548:	693a      	ldr	r2, [r7, #16]
 801554a:	2380      	movs	r3, #128	@ 0x80
 801554c:	01db      	lsls	r3, r3, #7
 801554e:	4013      	ands	r3, r2
 8015550:	d013      	beq.n	801557a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	4960      	ldr	r1, [pc, #384]	@ (80156e0 <I2C_ITSlaveCplt+0x234>)
 801555e:	400a      	ands	r2, r1
 8015560:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015566:	2b00      	cmp	r3, #0
 8015568:	d01f      	beq.n	80155aa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	b29a      	uxth	r2, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015578:	e017      	b.n	80155aa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801557a:	693a      	ldr	r2, [r7, #16]
 801557c:	2380      	movs	r3, #128	@ 0x80
 801557e:	021b      	lsls	r3, r3, #8
 8015580:	4013      	ands	r3, r2
 8015582:	d012      	beq.n	80155aa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	681a      	ldr	r2, [r3, #0]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	4955      	ldr	r1, [pc, #340]	@ (80156e4 <I2C_ITSlaveCplt+0x238>)
 8015590:	400a      	ands	r2, r1
 8015592:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015598:	2b00      	cmp	r3, #0
 801559a:	d006      	beq.n	80155aa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	2204      	movs	r2, #4
 80155ae:	4013      	ands	r3, r2
 80155b0:	d020      	beq.n	80155f4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2204      	movs	r2, #4
 80155b6:	4393      	bics	r3, r2
 80155b8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155c4:	b2d2      	uxtb	r2, r2
 80155c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155cc:	1c5a      	adds	r2, r3, #1
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d00c      	beq.n	80155f4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155de:	3b01      	subs	r3, #1
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	3b01      	subs	r3, #1
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155f8:	b29b      	uxth	r3, r3
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d005      	beq.n	801560a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015602:	2204      	movs	r2, #4
 8015604:	431a      	orrs	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2242      	movs	r2, #66	@ 0x42
 801560e:	2100      	movs	r1, #0
 8015610:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2200      	movs	r2, #0
 8015616:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801561c:	2b00      	cmp	r3, #0
 801561e:	d013      	beq.n	8015648 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	0011      	movs	r1, r2
 8015628:	0018      	movs	r0, r3
 801562a:	f000 f8b7 	bl	801579c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2241      	movs	r2, #65	@ 0x41
 8015632:	5c9b      	ldrb	r3, [r3, r2]
 8015634:	b2db      	uxtb	r3, r3
 8015636:	2b28      	cmp	r3, #40	@ 0x28
 8015638:	d147      	bne.n	80156ca <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801563a:	697a      	ldr	r2, [r7, #20]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	0011      	movs	r1, r2
 8015640:	0018      	movs	r0, r3
 8015642:	f000 f853 	bl	80156ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015646:	e040      	b.n	80156ca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801564c:	4a26      	ldr	r2, [pc, #152]	@ (80156e8 <I2C_ITSlaveCplt+0x23c>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d016      	beq.n	8015680 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	0018      	movs	r0, r3
 8015656:	f7ff fdf7 	bl	8015248 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	4a22      	ldr	r2, [pc, #136]	@ (80156e8 <I2C_ITSlaveCplt+0x23c>)
 801565e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2241      	movs	r2, #65	@ 0x41
 8015664:	2120      	movs	r1, #32
 8015666:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2200      	movs	r2, #0
 801566c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2240      	movs	r2, #64	@ 0x40
 8015672:	2100      	movs	r1, #0
 8015674:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	0018      	movs	r0, r3
 801567a:	f7fe ff4c 	bl	8014516 <HAL_I2C_ListenCpltCallback>
}
 801567e:	e024      	b.n	80156ca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2241      	movs	r2, #65	@ 0x41
 8015684:	5c9b      	ldrb	r3, [r3, r2]
 8015686:	b2db      	uxtb	r3, r3
 8015688:	2b22      	cmp	r3, #34	@ 0x22
 801568a:	d10f      	bne.n	80156ac <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2241      	movs	r2, #65	@ 0x41
 8015690:	2120      	movs	r1, #32
 8015692:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	2200      	movs	r2, #0
 8015698:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2240      	movs	r2, #64	@ 0x40
 801569e:	2100      	movs	r1, #0
 80156a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	0018      	movs	r0, r3
 80156a6:	f7fe ff1e 	bl	80144e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80156aa:	e00e      	b.n	80156ca <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2241      	movs	r2, #65	@ 0x41
 80156b0:	2120      	movs	r1, #32
 80156b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2200      	movs	r2, #0
 80156b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	2240      	movs	r2, #64	@ 0x40
 80156be:	2100      	movs	r1, #0
 80156c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	0018      	movs	r0, r3
 80156c6:	f7fe ff06 	bl	80144d6 <HAL_I2C_SlaveTxCpltCallback>
}
 80156ca:	46c0      	nop			@ (mov r8, r8)
 80156cc:	46bd      	mov	sp, r7
 80156ce:	b006      	add	sp, #24
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	46c0      	nop			@ (mov r8, r8)
 80156d4:	00008001 	.word	0x00008001
 80156d8:	00008002 	.word	0x00008002
 80156dc:	fe00e800 	.word	0xfe00e800
 80156e0:	ffffbfff 	.word	0xffffbfff
 80156e4:	ffff7fff 	.word	0xffff7fff
 80156e8:	ffff0000 	.word	0xffff0000

080156ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	4a26      	ldr	r2, [pc, #152]	@ (8015794 <I2C_ITListenCplt+0xa8>)
 80156fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2241      	movs	r2, #65	@ 0x41
 8015706:	2120      	movs	r1, #32
 8015708:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2242      	movs	r2, #66	@ 0x42
 801570e:	2100      	movs	r1, #0
 8015710:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2200      	movs	r2, #0
 8015716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	2204      	movs	r2, #4
 801571c:	4013      	ands	r3, r2
 801571e:	d022      	beq.n	8015766 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801572a:	b2d2      	uxtb	r2, r2
 801572c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015732:	1c5a      	adds	r2, r3, #1
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801573c:	2b00      	cmp	r3, #0
 801573e:	d012      	beq.n	8015766 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015744:	3b01      	subs	r3, #1
 8015746:	b29a      	uxth	r2, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015750:	b29b      	uxth	r3, r3
 8015752:	3b01      	subs	r3, #1
 8015754:	b29a      	uxth	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801575e:	2204      	movs	r2, #4
 8015760:	431a      	orrs	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8015766:	4a0c      	ldr	r2, [pc, #48]	@ (8015798 <I2C_ITListenCplt+0xac>)
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	0011      	movs	r1, r2
 801576c:	0018      	movs	r0, r3
 801576e:	f000 fd55 	bl	801621c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	2210      	movs	r2, #16
 8015778:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2240      	movs	r2, #64	@ 0x40
 801577e:	2100      	movs	r1, #0
 8015780:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	0018      	movs	r0, r3
 8015786:	f7fe fec6 	bl	8014516 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801578a:	46c0      	nop			@ (mov r8, r8)
 801578c:	46bd      	mov	sp, r7
 801578e:	b002      	add	sp, #8
 8015790:	bd80      	pop	{r7, pc}
 8015792:	46c0      	nop			@ (mov r8, r8)
 8015794:	ffff0000 	.word	0xffff0000
 8015798:	00008003 	.word	0x00008003

0801579c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
 80157a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80157a6:	200f      	movs	r0, #15
 80157a8:	183b      	adds	r3, r7, r0
 80157aa:	687a      	ldr	r2, [r7, #4]
 80157ac:	2141      	movs	r1, #65	@ 0x41
 80157ae:	5c52      	ldrb	r2, [r2, r1]
 80157b0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2242      	movs	r2, #66	@ 0x42
 80157b6:	2100      	movs	r1, #0
 80157b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	4a72      	ldr	r2, [pc, #456]	@ (8015988 <I2C_ITError+0x1ec>)
 80157be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2200      	movs	r2, #0
 80157c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	431a      	orrs	r2, r3
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80157d2:	183b      	adds	r3, r7, r0
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	2b28      	cmp	r3, #40	@ 0x28
 80157d8:	d007      	beq.n	80157ea <I2C_ITError+0x4e>
 80157da:	183b      	adds	r3, r7, r0
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	2b29      	cmp	r3, #41	@ 0x29
 80157e0:	d003      	beq.n	80157ea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80157e2:	183b      	adds	r3, r7, r0
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80157e8:	d10c      	bne.n	8015804 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2103      	movs	r1, #3
 80157ee:	0018      	movs	r0, r3
 80157f0:	f000 fd14 	bl	801621c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2241      	movs	r2, #65	@ 0x41
 80157f8:	2128      	movs	r1, #40	@ 0x28
 80157fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	4a63      	ldr	r2, [pc, #396]	@ (801598c <I2C_ITError+0x1f0>)
 8015800:	635a      	str	r2, [r3, #52]	@ 0x34
 8015802:	e032      	b.n	801586a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8015804:	4a62      	ldr	r2, [pc, #392]	@ (8015990 <I2C_ITError+0x1f4>)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	0011      	movs	r1, r2
 801580a:	0018      	movs	r0, r3
 801580c:	f000 fd06 	bl	801621c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	0018      	movs	r0, r3
 8015814:	f000 f8ed 	bl	80159f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2241      	movs	r2, #65	@ 0x41
 801581c:	5c9b      	ldrb	r3, [r3, r2]
 801581e:	b2db      	uxtb	r3, r3
 8015820:	2b60      	cmp	r3, #96	@ 0x60
 8015822:	d01f      	beq.n	8015864 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2241      	movs	r2, #65	@ 0x41
 8015828:	2120      	movs	r1, #32
 801582a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	699b      	ldr	r3, [r3, #24]
 8015832:	2220      	movs	r2, #32
 8015834:	4013      	ands	r3, r2
 8015836:	2b20      	cmp	r3, #32
 8015838:	d114      	bne.n	8015864 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	699b      	ldr	r3, [r3, #24]
 8015840:	2210      	movs	r2, #16
 8015842:	4013      	ands	r3, r2
 8015844:	2b10      	cmp	r3, #16
 8015846:	d109      	bne.n	801585c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2210      	movs	r2, #16
 801584e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015854:	2204      	movs	r2, #4
 8015856:	431a      	orrs	r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	2220      	movs	r2, #32
 8015862:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2200      	movs	r2, #0
 8015868:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801586e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015874:	2b00      	cmp	r3, #0
 8015876:	d03b      	beq.n	80158f0 <I2C_ITError+0x154>
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	2b11      	cmp	r3, #17
 801587c:	d002      	beq.n	8015884 <I2C_ITError+0xe8>
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	2b21      	cmp	r3, #33	@ 0x21
 8015882:	d135      	bne.n	80158f0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	2380      	movs	r3, #128	@ 0x80
 801588c:	01db      	lsls	r3, r3, #7
 801588e:	401a      	ands	r2, r3
 8015890:	2380      	movs	r3, #128	@ 0x80
 8015892:	01db      	lsls	r3, r3, #7
 8015894:	429a      	cmp	r2, r3
 8015896:	d107      	bne.n	80158a8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	493c      	ldr	r1, [pc, #240]	@ (8015994 <I2C_ITError+0x1f8>)
 80158a4:	400a      	ands	r2, r1
 80158a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158ac:	0018      	movs	r0, r3
 80158ae:	f7fd faca 	bl	8012e46 <HAL_DMA_GetState>
 80158b2:	0003      	movs	r3, r0
 80158b4:	2b01      	cmp	r3, #1
 80158b6:	d016      	beq.n	80158e6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158bc:	4a36      	ldr	r2, [pc, #216]	@ (8015998 <I2C_ITError+0x1fc>)
 80158be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2240      	movs	r2, #64	@ 0x40
 80158c4:	2100      	movs	r1, #0
 80158c6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158cc:	0018      	movs	r0, r3
 80158ce:	f7fd f9c5 	bl	8012c5c <HAL_DMA_Abort_IT>
 80158d2:	1e03      	subs	r3, r0, #0
 80158d4:	d051      	beq.n	801597a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158e0:	0018      	movs	r0, r3
 80158e2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80158e4:	e049      	b.n	801597a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	0018      	movs	r0, r3
 80158ea:	f000 f859 	bl	80159a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80158ee:	e044      	b.n	801597a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d03b      	beq.n	8015970 <I2C_ITError+0x1d4>
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	2b12      	cmp	r3, #18
 80158fc:	d002      	beq.n	8015904 <I2C_ITError+0x168>
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	2b22      	cmp	r3, #34	@ 0x22
 8015902:	d135      	bne.n	8015970 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	2380      	movs	r3, #128	@ 0x80
 801590c:	021b      	lsls	r3, r3, #8
 801590e:	401a      	ands	r2, r3
 8015910:	2380      	movs	r3, #128	@ 0x80
 8015912:	021b      	lsls	r3, r3, #8
 8015914:	429a      	cmp	r2, r3
 8015916:	d107      	bne.n	8015928 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	491e      	ldr	r1, [pc, #120]	@ (801599c <I2C_ITError+0x200>)
 8015924:	400a      	ands	r2, r1
 8015926:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801592c:	0018      	movs	r0, r3
 801592e:	f7fd fa8a 	bl	8012e46 <HAL_DMA_GetState>
 8015932:	0003      	movs	r3, r0
 8015934:	2b01      	cmp	r3, #1
 8015936:	d016      	beq.n	8015966 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801593c:	4a16      	ldr	r2, [pc, #88]	@ (8015998 <I2C_ITError+0x1fc>)
 801593e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2240      	movs	r2, #64	@ 0x40
 8015944:	2100      	movs	r1, #0
 8015946:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801594c:	0018      	movs	r0, r3
 801594e:	f7fd f985 	bl	8012c5c <HAL_DMA_Abort_IT>
 8015952:	1e03      	subs	r3, r0, #0
 8015954:	d013      	beq.n	801597e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801595a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015960:	0018      	movs	r0, r3
 8015962:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015964:	e00b      	b.n	801597e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	0018      	movs	r0, r3
 801596a:	f000 f819 	bl	80159a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801596e:	e006      	b.n	801597e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	0018      	movs	r0, r3
 8015974:	f000 f814 	bl	80159a0 <I2C_TreatErrorCallback>
  }
}
 8015978:	e002      	b.n	8015980 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801597a:	46c0      	nop			@ (mov r8, r8)
 801597c:	e000      	b.n	8015980 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801597e:	46c0      	nop			@ (mov r8, r8)
}
 8015980:	46c0      	nop			@ (mov r8, r8)
 8015982:	46bd      	mov	sp, r7
 8015984:	b004      	add	sp, #16
 8015986:	bd80      	pop	{r7, pc}
 8015988:	ffff0000 	.word	0xffff0000
 801598c:	080147bd 	.word	0x080147bd
 8015990:	00008003 	.word	0x00008003
 8015994:	ffffbfff 	.word	0xffffbfff
 8015998:	08015bab 	.word	0x08015bab
 801599c:	ffff7fff 	.word	0xffff7fff

080159a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2241      	movs	r2, #65	@ 0x41
 80159ac:	5c9b      	ldrb	r3, [r3, r2]
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	2b60      	cmp	r3, #96	@ 0x60
 80159b2:	d10f      	bne.n	80159d4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2241      	movs	r2, #65	@ 0x41
 80159b8:	2120      	movs	r1, #32
 80159ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2200      	movs	r2, #0
 80159c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2240      	movs	r2, #64	@ 0x40
 80159c6:	2100      	movs	r1, #0
 80159c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	0018      	movs	r0, r3
 80159ce:	f7fe fdc2 	bl	8014556 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80159d2:	e00a      	b.n	80159ea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2240      	movs	r2, #64	@ 0x40
 80159de:	2100      	movs	r1, #0
 80159e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	0018      	movs	r0, r3
 80159e6:	f7fe fdae 	bl	8014546 <HAL_I2C_ErrorCallback>
}
 80159ea:	46c0      	nop			@ (mov r8, r8)
 80159ec:	46bd      	mov	sp, r7
 80159ee:	b002      	add	sp, #8
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80159f2:	b580      	push	{r7, lr}
 80159f4:	b082      	sub	sp, #8
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	699b      	ldr	r3, [r3, #24]
 8015a00:	2202      	movs	r2, #2
 8015a02:	4013      	ands	r3, r2
 8015a04:	2b02      	cmp	r3, #2
 8015a06:	d103      	bne.n	8015a10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	699b      	ldr	r3, [r3, #24]
 8015a16:	2201      	movs	r2, #1
 8015a18:	4013      	ands	r3, r2
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d007      	beq.n	8015a2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	699a      	ldr	r2, [r3, #24]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2101      	movs	r1, #1
 8015a2a:	430a      	orrs	r2, r1
 8015a2c:	619a      	str	r2, [r3, #24]
  }
}
 8015a2e:	46c0      	nop			@ (mov r8, r8)
 8015a30:	46bd      	mov	sp, r7
 8015a32:	b002      	add	sp, #8
 8015a34:	bd80      	pop	{r7, pc}
	...

08015a38 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a44:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	4920      	ldr	r1, [pc, #128]	@ (8015ad4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8015a52:	400a      	ands	r2, r1
 8015a54:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d105      	bne.n	8015a6c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	2120      	movs	r1, #32
 8015a64:	0018      	movs	r0, r3
 8015a66:	f000 fb4b 	bl	8016100 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015a6a:	e02e      	b.n	8015aca <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a70:	68fa      	ldr	r2, [r7, #12]
 8015a72:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015a74:	189a      	adds	r2, r3, r2
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	2bff      	cmp	r3, #255	@ 0xff
 8015a82:	d903      	bls.n	8015a8c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	22ff      	movs	r2, #255	@ 0xff
 8015a88:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015a8a:	e004      	b.n	8015a96 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a90:	b29a      	uxth	r2, r3
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a9e:	0019      	movs	r1, r3
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	3328      	adds	r3, #40	@ 0x28
 8015aa6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015aac:	f7fd f830 	bl	8012b10 <HAL_DMA_Start_IT>
 8015ab0:	1e03      	subs	r3, r0, #0
 8015ab2:	d005      	beq.n	8015ac0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2110      	movs	r1, #16
 8015ab8:	0018      	movs	r0, r3
 8015aba:	f7ff fe6f 	bl	801579c <I2C_ITError>
}
 8015abe:	e004      	b.n	8015aca <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	2140      	movs	r1, #64	@ 0x40
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f000 fb1b 	bl	8016100 <I2C_Enable_IRQ>
}
 8015aca:	46c0      	nop			@ (mov r8, r8)
 8015acc:	46bd      	mov	sp, r7
 8015ace:	b004      	add	sp, #16
 8015ad0:	bd80      	pop	{r7, pc}
 8015ad2:	46c0      	nop			@ (mov r8, r8)
 8015ad4:	ffffbfff 	.word	0xffffbfff

08015ad8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ae4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	4920      	ldr	r1, [pc, #128]	@ (8015b74 <I2C_DMAMasterReceiveCplt+0x9c>)
 8015af2:	400a      	ands	r2, r1
 8015af4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d105      	bne.n	8015b0c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2120      	movs	r1, #32
 8015b04:	0018      	movs	r0, r3
 8015b06:	f000 fafb 	bl	8016100 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015b0a:	e02e      	b.n	8015b6a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b10:	68fa      	ldr	r2, [r7, #12]
 8015b12:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015b14:	189a      	adds	r2, r3, r2
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	2bff      	cmp	r3, #255	@ 0xff
 8015b22:	d903      	bls.n	8015b2c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	22ff      	movs	r2, #255	@ 0xff
 8015b28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015b2a:	e004      	b.n	8015b36 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	3324      	adds	r3, #36	@ 0x24
 8015b40:	0019      	movs	r1, r3
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b46:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015b4c:	f7fc ffe0 	bl	8012b10 <HAL_DMA_Start_IT>
 8015b50:	1e03      	subs	r3, r0, #0
 8015b52:	d005      	beq.n	8015b60 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2110      	movs	r1, #16
 8015b58:	0018      	movs	r0, r3
 8015b5a:	f7ff fe1f 	bl	801579c <I2C_ITError>
}
 8015b5e:	e004      	b.n	8015b6a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2140      	movs	r1, #64	@ 0x40
 8015b64:	0018      	movs	r0, r3
 8015b66:	f000 facb 	bl	8016100 <I2C_Enable_IRQ>
}
 8015b6a:	46c0      	nop			@ (mov r8, r8)
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	b004      	add	sp, #16
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	46c0      	nop			@ (mov r8, r8)
 8015b74:	ffff7fff 	.word	0xffff7fff

08015b78 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b84:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	685a      	ldr	r2, [r3, #4]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2180      	movs	r1, #128	@ 0x80
 8015b92:	0209      	lsls	r1, r1, #8
 8015b94:	430a      	orrs	r2, r1
 8015b96:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2110      	movs	r1, #16
 8015b9c:	0018      	movs	r0, r3
 8015b9e:	f7ff fdfd 	bl	801579c <I2C_ITError>
}
 8015ba2:	46c0      	nop			@ (mov r8, r8)
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	b004      	add	sp, #16
 8015ba8:	bd80      	pop	{r7, pc}

08015baa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8015baa:	b580      	push	{r7, lr}
 8015bac:	b084      	sub	sp, #16
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bb6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d003      	beq.n	8015bc8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d003      	beq.n	8015bd8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	0018      	movs	r0, r3
 8015bdc:	f7ff fee0 	bl	80159a0 <I2C_TreatErrorCallback>
}
 8015be0:	46c0      	nop			@ (mov r8, r8)
 8015be2:	46bd      	mov	sp, r7
 8015be4:	b004      	add	sp, #16
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	60b9      	str	r1, [r7, #8]
 8015bf2:	603b      	str	r3, [r7, #0]
 8015bf4:	1dfb      	adds	r3, r7, #7
 8015bf6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015bf8:	e030      	b.n	8015c5c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	d02d      	beq.n	8015c5c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c00:	f7fc fa34 	bl	801206c <HAL_GetTick>
 8015c04:	0002      	movs	r2, r0
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	1ad3      	subs	r3, r2, r3
 8015c0a:	683a      	ldr	r2, [r7, #0]
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d302      	bcc.n	8015c16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d122      	bne.n	8015c5c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	699b      	ldr	r3, [r3, #24]
 8015c1c:	68ba      	ldr	r2, [r7, #8]
 8015c1e:	4013      	ands	r3, r2
 8015c20:	68ba      	ldr	r2, [r7, #8]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	425a      	negs	r2, r3
 8015c26:	4153      	adcs	r3, r2
 8015c28:	b2db      	uxtb	r3, r3
 8015c2a:	001a      	movs	r2, r3
 8015c2c:	1dfb      	adds	r3, r7, #7
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d113      	bne.n	8015c5c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c38:	2220      	movs	r2, #32
 8015c3a:	431a      	orrs	r2, r3
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2241      	movs	r2, #65	@ 0x41
 8015c44:	2120      	movs	r1, #32
 8015c46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	2242      	movs	r2, #66	@ 0x42
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2240      	movs	r2, #64	@ 0x40
 8015c54:	2100      	movs	r1, #0
 8015c56:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8015c58:	2301      	movs	r3, #1
 8015c5a:	e00f      	b.n	8015c7c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	699b      	ldr	r3, [r3, #24]
 8015c62:	68ba      	ldr	r2, [r7, #8]
 8015c64:	4013      	ands	r3, r2
 8015c66:	68ba      	ldr	r2, [r7, #8]
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	425a      	negs	r2, r3
 8015c6c:	4153      	adcs	r3, r2
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	001a      	movs	r2, r3
 8015c72:	1dfb      	adds	r3, r7, #7
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d0bf      	beq.n	8015bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015c7a:	2300      	movs	r3, #0
}
 8015c7c:	0018      	movs	r0, r3
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	b004      	add	sp, #16
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015c90:	e032      	b.n	8015cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	0018      	movs	r0, r3
 8015c9a:	f000 f8ff 	bl	8015e9c <I2C_IsErrorOccurred>
 8015c9e:	1e03      	subs	r3, r0, #0
 8015ca0:	d001      	beq.n	8015ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	e030      	b.n	8015d08 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	d025      	beq.n	8015cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015cac:	f7fc f9de 	bl	801206c <HAL_GetTick>
 8015cb0:	0002      	movs	r2, r0
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	68ba      	ldr	r2, [r7, #8]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d302      	bcc.n	8015cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d11a      	bne.n	8015cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	699b      	ldr	r3, [r3, #24]
 8015cc8:	2202      	movs	r2, #2
 8015cca:	4013      	ands	r3, r2
 8015ccc:	2b02      	cmp	r3, #2
 8015cce:	d013      	beq.n	8015cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cd4:	2220      	movs	r2, #32
 8015cd6:	431a      	orrs	r2, r3
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2241      	movs	r2, #65	@ 0x41
 8015ce0:	2120      	movs	r1, #32
 8015ce2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2242      	movs	r2, #66	@ 0x42
 8015ce8:	2100      	movs	r1, #0
 8015cea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2240      	movs	r2, #64	@ 0x40
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	e007      	b.n	8015d08 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	699b      	ldr	r3, [r3, #24]
 8015cfe:	2202      	movs	r2, #2
 8015d00:	4013      	ands	r3, r2
 8015d02:	2b02      	cmp	r3, #2
 8015d04:	d1c5      	bne.n	8015c92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8015d06:	2300      	movs	r3, #0
}
 8015d08:	0018      	movs	r0, r3
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	b004      	add	sp, #16
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015d1c:	e02f      	b.n	8015d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	68b9      	ldr	r1, [r7, #8]
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	0018      	movs	r0, r3
 8015d26:	f000 f8b9 	bl	8015e9c <I2C_IsErrorOccurred>
 8015d2a:	1e03      	subs	r3, r0, #0
 8015d2c:	d001      	beq.n	8015d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015d2e:	2301      	movs	r3, #1
 8015d30:	e02d      	b.n	8015d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015d32:	f7fc f99b 	bl	801206c <HAL_GetTick>
 8015d36:	0002      	movs	r2, r0
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	1ad3      	subs	r3, r2, r3
 8015d3c:	68ba      	ldr	r2, [r7, #8]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d302      	bcc.n	8015d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d11a      	bne.n	8015d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	699b      	ldr	r3, [r3, #24]
 8015d4e:	2220      	movs	r2, #32
 8015d50:	4013      	ands	r3, r2
 8015d52:	2b20      	cmp	r3, #32
 8015d54:	d013      	beq.n	8015d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d5a:	2220      	movs	r2, #32
 8015d5c:	431a      	orrs	r2, r3
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2241      	movs	r2, #65	@ 0x41
 8015d66:	2120      	movs	r1, #32
 8015d68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2242      	movs	r2, #66	@ 0x42
 8015d6e:	2100      	movs	r1, #0
 8015d70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2240      	movs	r2, #64	@ 0x40
 8015d76:	2100      	movs	r1, #0
 8015d78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e007      	b.n	8015d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	699b      	ldr	r3, [r3, #24]
 8015d84:	2220      	movs	r2, #32
 8015d86:	4013      	ands	r3, r2
 8015d88:	2b20      	cmp	r3, #32
 8015d8a:	d1c8      	bne.n	8015d1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	0018      	movs	r0, r3
 8015d90:	46bd      	mov	sp, r7
 8015d92:	b004      	add	sp, #16
 8015d94:	bd80      	pop	{r7, pc}
	...

08015d98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015da4:	e06b      	b.n	8015e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015da6:	687a      	ldr	r2, [r7, #4]
 8015da8:	68b9      	ldr	r1, [r7, #8]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	0018      	movs	r0, r3
 8015dae:	f000 f875 	bl	8015e9c <I2C_IsErrorOccurred>
 8015db2:	1e03      	subs	r3, r0, #0
 8015db4:	d001      	beq.n	8015dba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015db6:	2301      	movs	r3, #1
 8015db8:	e069      	b.n	8015e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	699b      	ldr	r3, [r3, #24]
 8015dc0:	2220      	movs	r2, #32
 8015dc2:	4013      	ands	r3, r2
 8015dc4:	2b20      	cmp	r3, #32
 8015dc6:	d138      	bne.n	8015e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	699b      	ldr	r3, [r3, #24]
 8015dce:	2204      	movs	r2, #4
 8015dd0:	4013      	ands	r3, r2
 8015dd2:	2b04      	cmp	r3, #4
 8015dd4:	d105      	bne.n	8015de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d001      	beq.n	8015de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8015dde:	2300      	movs	r3, #0
 8015de0:	e055      	b.n	8015e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	699b      	ldr	r3, [r3, #24]
 8015de8:	2210      	movs	r2, #16
 8015dea:	4013      	ands	r3, r2
 8015dec:	2b10      	cmp	r3, #16
 8015dee:	d107      	bne.n	8015e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2210      	movs	r2, #16
 8015df6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2204      	movs	r2, #4
 8015dfc:	645a      	str	r2, [r3, #68]	@ 0x44
 8015dfe:	e002      	b.n	8015e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2200      	movs	r2, #0
 8015e04:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	2220      	movs	r2, #32
 8015e0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	685a      	ldr	r2, [r3, #4]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	491f      	ldr	r1, [pc, #124]	@ (8015e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8015e1a:	400a      	ands	r2, r1
 8015e1c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	2241      	movs	r2, #65	@ 0x41
 8015e22:	2120      	movs	r1, #32
 8015e24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2242      	movs	r2, #66	@ 0x42
 8015e2a:	2100      	movs	r1, #0
 8015e2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2240      	movs	r2, #64	@ 0x40
 8015e32:	2100      	movs	r1, #0
 8015e34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015e36:	2301      	movs	r3, #1
 8015e38:	e029      	b.n	8015e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e3a:	f7fc f917 	bl	801206c <HAL_GetTick>
 8015e3e:	0002      	movs	r2, r0
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	68ba      	ldr	r2, [r7, #8]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d302      	bcc.n	8015e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8015e4a:	68bb      	ldr	r3, [r7, #8]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d116      	bne.n	8015e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	699b      	ldr	r3, [r3, #24]
 8015e56:	2204      	movs	r2, #4
 8015e58:	4013      	ands	r3, r2
 8015e5a:	2b04      	cmp	r3, #4
 8015e5c:	d00f      	beq.n	8015e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e62:	2220      	movs	r2, #32
 8015e64:	431a      	orrs	r2, r3
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	2241      	movs	r2, #65	@ 0x41
 8015e6e:	2120      	movs	r1, #32
 8015e70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2240      	movs	r2, #64	@ 0x40
 8015e76:	2100      	movs	r1, #0
 8015e78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	e007      	b.n	8015e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	699b      	ldr	r3, [r3, #24]
 8015e84:	2204      	movs	r2, #4
 8015e86:	4013      	ands	r3, r2
 8015e88:	2b04      	cmp	r3, #4
 8015e8a:	d18c      	bne.n	8015da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015e8c:	2300      	movs	r3, #0
}
 8015e8e:	0018      	movs	r0, r3
 8015e90:	46bd      	mov	sp, r7
 8015e92:	b004      	add	sp, #16
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	46c0      	nop			@ (mov r8, r8)
 8015e98:	fe00e800 	.word	0xfe00e800

08015e9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b08a      	sub	sp, #40	@ 0x28
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	60b9      	str	r1, [r7, #8]
 8015ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015ea8:	2327      	movs	r3, #39	@ 0x27
 8015eaa:	18fb      	adds	r3, r7, r3
 8015eac:	2200      	movs	r2, #0
 8015eae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	699b      	ldr	r3, [r3, #24]
 8015eb6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	2210      	movs	r2, #16
 8015ec4:	4013      	ands	r3, r2
 8015ec6:	d100      	bne.n	8015eca <I2C_IsErrorOccurred+0x2e>
 8015ec8:	e079      	b.n	8015fbe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	2210      	movs	r2, #16
 8015ed0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015ed2:	e057      	b.n	8015f84 <I2C_IsErrorOccurred+0xe8>
 8015ed4:	2227      	movs	r2, #39	@ 0x27
 8015ed6:	18bb      	adds	r3, r7, r2
 8015ed8:	18ba      	adds	r2, r7, r2
 8015eda:	7812      	ldrb	r2, [r2, #0]
 8015edc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	d04f      	beq.n	8015f84 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015ee4:	f7fc f8c2 	bl	801206c <HAL_GetTick>
 8015ee8:	0002      	movs	r2, r0
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	1ad3      	subs	r3, r2, r3
 8015eee:	68ba      	ldr	r2, [r7, #8]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d302      	bcc.n	8015efa <I2C_IsErrorOccurred+0x5e>
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d144      	bne.n	8015f84 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	685a      	ldr	r2, [r3, #4]
 8015f00:	2380      	movs	r3, #128	@ 0x80
 8015f02:	01db      	lsls	r3, r3, #7
 8015f04:	4013      	ands	r3, r2
 8015f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8015f08:	2013      	movs	r0, #19
 8015f0a:	183b      	adds	r3, r7, r0
 8015f0c:	68fa      	ldr	r2, [r7, #12]
 8015f0e:	2142      	movs	r1, #66	@ 0x42
 8015f10:	5c52      	ldrb	r2, [r2, r1]
 8015f12:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	699a      	ldr	r2, [r3, #24]
 8015f1a:	2380      	movs	r3, #128	@ 0x80
 8015f1c:	021b      	lsls	r3, r3, #8
 8015f1e:	401a      	ands	r2, r3
 8015f20:	2380      	movs	r3, #128	@ 0x80
 8015f22:	021b      	lsls	r3, r3, #8
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d126      	bne.n	8015f76 <I2C_IsErrorOccurred+0xda>
 8015f28:	697a      	ldr	r2, [r7, #20]
 8015f2a:	2380      	movs	r3, #128	@ 0x80
 8015f2c:	01db      	lsls	r3, r3, #7
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d021      	beq.n	8015f76 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8015f32:	183b      	adds	r3, r7, r0
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	2b20      	cmp	r3, #32
 8015f38:	d01d      	beq.n	8015f76 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	685a      	ldr	r2, [r3, #4]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	2180      	movs	r1, #128	@ 0x80
 8015f46:	01c9      	lsls	r1, r1, #7
 8015f48:	430a      	orrs	r2, r1
 8015f4a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8015f4c:	f7fc f88e 	bl	801206c <HAL_GetTick>
 8015f50:	0003      	movs	r3, r0
 8015f52:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015f54:	e00f      	b.n	8015f76 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8015f56:	f7fc f889 	bl	801206c <HAL_GetTick>
 8015f5a:	0002      	movs	r2, r0
 8015f5c:	69fb      	ldr	r3, [r7, #28]
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	2b19      	cmp	r3, #25
 8015f62:	d908      	bls.n	8015f76 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8015f64:	6a3b      	ldr	r3, [r7, #32]
 8015f66:	2220      	movs	r2, #32
 8015f68:	4313      	orrs	r3, r2
 8015f6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8015f6c:	2327      	movs	r3, #39	@ 0x27
 8015f6e:	18fb      	adds	r3, r7, r3
 8015f70:	2201      	movs	r2, #1
 8015f72:	701a      	strb	r2, [r3, #0]

              break;
 8015f74:	e006      	b.n	8015f84 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	699b      	ldr	r3, [r3, #24]
 8015f7c:	2220      	movs	r2, #32
 8015f7e:	4013      	ands	r3, r2
 8015f80:	2b20      	cmp	r3, #32
 8015f82:	d1e8      	bne.n	8015f56 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	699b      	ldr	r3, [r3, #24]
 8015f8a:	2220      	movs	r2, #32
 8015f8c:	4013      	ands	r3, r2
 8015f8e:	2b20      	cmp	r3, #32
 8015f90:	d004      	beq.n	8015f9c <I2C_IsErrorOccurred+0x100>
 8015f92:	2327      	movs	r3, #39	@ 0x27
 8015f94:	18fb      	adds	r3, r7, r3
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d09b      	beq.n	8015ed4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8015f9c:	2327      	movs	r3, #39	@ 0x27
 8015f9e:	18fb      	adds	r3, r7, r3
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d103      	bne.n	8015fae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2220      	movs	r2, #32
 8015fac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8015fae:	6a3b      	ldr	r3, [r7, #32]
 8015fb0:	2204      	movs	r2, #4
 8015fb2:	4313      	orrs	r3, r2
 8015fb4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8015fb6:	2327      	movs	r3, #39	@ 0x27
 8015fb8:	18fb      	adds	r3, r7, r3
 8015fba:	2201      	movs	r2, #1
 8015fbc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	699b      	ldr	r3, [r3, #24]
 8015fc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8015fc6:	69ba      	ldr	r2, [r7, #24]
 8015fc8:	2380      	movs	r3, #128	@ 0x80
 8015fca:	005b      	lsls	r3, r3, #1
 8015fcc:	4013      	ands	r3, r2
 8015fce:	d00c      	beq.n	8015fea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8015fd0:	6a3b      	ldr	r3, [r7, #32]
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	4313      	orrs	r3, r2
 8015fd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2280      	movs	r2, #128	@ 0x80
 8015fde:	0052      	lsls	r2, r2, #1
 8015fe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015fe2:	2327      	movs	r3, #39	@ 0x27
 8015fe4:	18fb      	adds	r3, r7, r3
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8015fea:	69ba      	ldr	r2, [r7, #24]
 8015fec:	2380      	movs	r3, #128	@ 0x80
 8015fee:	00db      	lsls	r3, r3, #3
 8015ff0:	4013      	ands	r3, r2
 8015ff2:	d00c      	beq.n	801600e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8015ff4:	6a3b      	ldr	r3, [r7, #32]
 8015ff6:	2208      	movs	r2, #8
 8015ff8:	4313      	orrs	r3, r2
 8015ffa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2280      	movs	r2, #128	@ 0x80
 8016002:	00d2      	lsls	r2, r2, #3
 8016004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016006:	2327      	movs	r3, #39	@ 0x27
 8016008:	18fb      	adds	r3, r7, r3
 801600a:	2201      	movs	r2, #1
 801600c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801600e:	69ba      	ldr	r2, [r7, #24]
 8016010:	2380      	movs	r3, #128	@ 0x80
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	4013      	ands	r3, r2
 8016016:	d00c      	beq.n	8016032 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016018:	6a3b      	ldr	r3, [r7, #32]
 801601a:	2202      	movs	r2, #2
 801601c:	4313      	orrs	r3, r2
 801601e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	2280      	movs	r2, #128	@ 0x80
 8016026:	0092      	lsls	r2, r2, #2
 8016028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801602a:	2327      	movs	r3, #39	@ 0x27
 801602c:	18fb      	adds	r3, r7, r3
 801602e:	2201      	movs	r2, #1
 8016030:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8016032:	2327      	movs	r3, #39	@ 0x27
 8016034:	18fb      	adds	r3, r7, r3
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d01d      	beq.n	8016078 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	0018      	movs	r0, r3
 8016040:	f7ff fcd7 	bl	80159f2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	685a      	ldr	r2, [r3, #4]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	490e      	ldr	r1, [pc, #56]	@ (8016088 <I2C_IsErrorOccurred+0x1ec>)
 8016050:	400a      	ands	r2, r1
 8016052:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016058:	6a3b      	ldr	r3, [r7, #32]
 801605a:	431a      	orrs	r2, r3
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2241      	movs	r2, #65	@ 0x41
 8016064:	2120      	movs	r1, #32
 8016066:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2242      	movs	r2, #66	@ 0x42
 801606c:	2100      	movs	r1, #0
 801606e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2240      	movs	r2, #64	@ 0x40
 8016074:	2100      	movs	r1, #0
 8016076:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016078:	2327      	movs	r3, #39	@ 0x27
 801607a:	18fb      	adds	r3, r7, r3
 801607c:	781b      	ldrb	r3, [r3, #0]
}
 801607e:	0018      	movs	r0, r3
 8016080:	46bd      	mov	sp, r7
 8016082:	b00a      	add	sp, #40	@ 0x28
 8016084:	bd80      	pop	{r7, pc}
 8016086:	46c0      	nop			@ (mov r8, r8)
 8016088:	fe00e800 	.word	0xfe00e800

0801608c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801608c:	b590      	push	{r4, r7, lr}
 801608e:	b087      	sub	sp, #28
 8016090:	af00      	add	r7, sp, #0
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	0008      	movs	r0, r1
 8016096:	0011      	movs	r1, r2
 8016098:	607b      	str	r3, [r7, #4]
 801609a:	240a      	movs	r4, #10
 801609c:	193b      	adds	r3, r7, r4
 801609e:	1c02      	adds	r2, r0, #0
 80160a0:	801a      	strh	r2, [r3, #0]
 80160a2:	2009      	movs	r0, #9
 80160a4:	183b      	adds	r3, r7, r0
 80160a6:	1c0a      	adds	r2, r1, #0
 80160a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80160aa:	193b      	adds	r3, r7, r4
 80160ac:	881b      	ldrh	r3, [r3, #0]
 80160ae:	059b      	lsls	r3, r3, #22
 80160b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80160b2:	183b      	adds	r3, r7, r0
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	0419      	lsls	r1, r3, #16
 80160b8:	23ff      	movs	r3, #255	@ 0xff
 80160ba:	041b      	lsls	r3, r3, #16
 80160bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80160be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80160c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160c6:	4313      	orrs	r3, r2
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	085b      	lsrs	r3, r3, #1
 80160cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80160d6:	0d51      	lsrs	r1, r2, #21
 80160d8:	2280      	movs	r2, #128	@ 0x80
 80160da:	00d2      	lsls	r2, r2, #3
 80160dc:	400a      	ands	r2, r1
 80160de:	4907      	ldr	r1, [pc, #28]	@ (80160fc <I2C_TransferConfig+0x70>)
 80160e0:	430a      	orrs	r2, r1
 80160e2:	43d2      	mvns	r2, r2
 80160e4:	401a      	ands	r2, r3
 80160e6:	0011      	movs	r1, r2
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	697a      	ldr	r2, [r7, #20]
 80160ee:	430a      	orrs	r2, r1
 80160f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80160f2:	46c0      	nop			@ (mov r8, r8)
 80160f4:	46bd      	mov	sp, r7
 80160f6:	b007      	add	sp, #28
 80160f8:	bd90      	pop	{r4, r7, pc}
 80160fa:	46c0      	nop			@ (mov r8, r8)
 80160fc:	03ff63ff 	.word	0x03ff63ff

08016100 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	000a      	movs	r2, r1
 801610a:	1cbb      	adds	r3, r7, #2
 801610c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801610e:	2300      	movs	r3, #0
 8016110:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016116:	4b3e      	ldr	r3, [pc, #248]	@ (8016210 <I2C_Enable_IRQ+0x110>)
 8016118:	429a      	cmp	r2, r3
 801611a:	d035      	beq.n	8016188 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8016120:	4b3c      	ldr	r3, [pc, #240]	@ (8016214 <I2C_Enable_IRQ+0x114>)
 8016122:	429a      	cmp	r2, r3
 8016124:	d030      	beq.n	8016188 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801612a:	4b3b      	ldr	r3, [pc, #236]	@ (8016218 <I2C_Enable_IRQ+0x118>)
 801612c:	429a      	cmp	r2, r3
 801612e:	d02b      	beq.n	8016188 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016130:	1cbb      	adds	r3, r7, #2
 8016132:	2200      	movs	r2, #0
 8016134:	5e9b      	ldrsh	r3, [r3, r2]
 8016136:	2b00      	cmp	r3, #0
 8016138:	da03      	bge.n	8016142 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	22b8      	movs	r2, #184	@ 0xb8
 801613e:	4313      	orrs	r3, r2
 8016140:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8016142:	1cbb      	adds	r3, r7, #2
 8016144:	881b      	ldrh	r3, [r3, #0]
 8016146:	2201      	movs	r2, #1
 8016148:	4013      	ands	r3, r2
 801614a:	d003      	beq.n	8016154 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	22f2      	movs	r2, #242	@ 0xf2
 8016150:	4313      	orrs	r3, r2
 8016152:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016154:	1cbb      	adds	r3, r7, #2
 8016156:	881b      	ldrh	r3, [r3, #0]
 8016158:	2202      	movs	r2, #2
 801615a:	4013      	ands	r3, r2
 801615c:	d003      	beq.n	8016166 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	22f4      	movs	r2, #244	@ 0xf4
 8016162:	4313      	orrs	r3, r2
 8016164:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016166:	1cbb      	adds	r3, r7, #2
 8016168:	881b      	ldrh	r3, [r3, #0]
 801616a:	2b10      	cmp	r3, #16
 801616c:	d103      	bne.n	8016176 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2290      	movs	r2, #144	@ 0x90
 8016172:	4313      	orrs	r3, r2
 8016174:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016176:	1cbb      	adds	r3, r7, #2
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	2b20      	cmp	r3, #32
 801617c:	d13c      	bne.n	80161f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2220      	movs	r2, #32
 8016182:	4313      	orrs	r3, r2
 8016184:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016186:	e037      	b.n	80161f8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016188:	1cbb      	adds	r3, r7, #2
 801618a:	2200      	movs	r2, #0
 801618c:	5e9b      	ldrsh	r3, [r3, r2]
 801618e:	2b00      	cmp	r3, #0
 8016190:	da03      	bge.n	801619a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	22b8      	movs	r2, #184	@ 0xb8
 8016196:	4313      	orrs	r3, r2
 8016198:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801619a:	1cbb      	adds	r3, r7, #2
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	2201      	movs	r2, #1
 80161a0:	4013      	ands	r3, r2
 80161a2:	d003      	beq.n	80161ac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	22f2      	movs	r2, #242	@ 0xf2
 80161a8:	4313      	orrs	r3, r2
 80161aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80161ac:	1cbb      	adds	r3, r7, #2
 80161ae:	881b      	ldrh	r3, [r3, #0]
 80161b0:	2202      	movs	r2, #2
 80161b2:	4013      	ands	r3, r2
 80161b4:	d003      	beq.n	80161be <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	22f4      	movs	r2, #244	@ 0xf4
 80161ba:	4313      	orrs	r3, r2
 80161bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80161be:	1cbb      	adds	r3, r7, #2
 80161c0:	881b      	ldrh	r3, [r3, #0]
 80161c2:	2b10      	cmp	r3, #16
 80161c4:	d103      	bne.n	80161ce <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2290      	movs	r2, #144	@ 0x90
 80161ca:	4313      	orrs	r3, r2
 80161cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80161ce:	1cbb      	adds	r3, r7, #2
 80161d0:	881b      	ldrh	r3, [r3, #0]
 80161d2:	2b20      	cmp	r3, #32
 80161d4:	d103      	bne.n	80161de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2260      	movs	r2, #96	@ 0x60
 80161da:	4313      	orrs	r3, r2
 80161dc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80161e2:	4b0d      	ldr	r3, [pc, #52]	@ (8016218 <I2C_Enable_IRQ+0x118>)
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d007      	beq.n	80161f8 <I2C_Enable_IRQ+0xf8>
 80161e8:	1cbb      	adds	r3, r7, #2
 80161ea:	881b      	ldrh	r3, [r3, #0]
 80161ec:	2b40      	cmp	r3, #64	@ 0x40
 80161ee:	d103      	bne.n	80161f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2240      	movs	r2, #64	@ 0x40
 80161f4:	4313      	orrs	r3, r2
 80161f6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	6819      	ldr	r1, [r3, #0]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	68fa      	ldr	r2, [r7, #12]
 8016204:	430a      	orrs	r2, r1
 8016206:	601a      	str	r2, [r3, #0]
}
 8016208:	46c0      	nop			@ (mov r8, r8)
 801620a:	46bd      	mov	sp, r7
 801620c:	b004      	add	sp, #16
 801620e:	bd80      	pop	{r7, pc}
 8016210:	080149bd 	.word	0x080149bd
 8016214:	08014ded 	.word	0x08014ded
 8016218:	08014bb5 	.word	0x08014bb5

0801621c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	000a      	movs	r2, r1
 8016226:	1cbb      	adds	r3, r7, #2
 8016228:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801622a:	2300      	movs	r3, #0
 801622c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801622e:	1cbb      	adds	r3, r7, #2
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	2201      	movs	r2, #1
 8016234:	4013      	ands	r3, r2
 8016236:	d010      	beq.n	801625a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	2242      	movs	r2, #66	@ 0x42
 801623c:	4313      	orrs	r3, r2
 801623e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2241      	movs	r2, #65	@ 0x41
 8016244:	5c9b      	ldrb	r3, [r3, r2]
 8016246:	b2db      	uxtb	r3, r3
 8016248:	001a      	movs	r2, r3
 801624a:	2328      	movs	r3, #40	@ 0x28
 801624c:	4013      	ands	r3, r2
 801624e:	2b28      	cmp	r3, #40	@ 0x28
 8016250:	d003      	beq.n	801625a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	22b0      	movs	r2, #176	@ 0xb0
 8016256:	4313      	orrs	r3, r2
 8016258:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801625a:	1cbb      	adds	r3, r7, #2
 801625c:	881b      	ldrh	r3, [r3, #0]
 801625e:	2202      	movs	r2, #2
 8016260:	4013      	ands	r3, r2
 8016262:	d010      	beq.n	8016286 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2244      	movs	r2, #68	@ 0x44
 8016268:	4313      	orrs	r3, r2
 801626a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2241      	movs	r2, #65	@ 0x41
 8016270:	5c9b      	ldrb	r3, [r3, r2]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	001a      	movs	r2, r3
 8016276:	2328      	movs	r3, #40	@ 0x28
 8016278:	4013      	ands	r3, r2
 801627a:	2b28      	cmp	r3, #40	@ 0x28
 801627c:	d003      	beq.n	8016286 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	22b0      	movs	r2, #176	@ 0xb0
 8016282:	4313      	orrs	r3, r2
 8016284:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016286:	1cbb      	adds	r3, r7, #2
 8016288:	2200      	movs	r2, #0
 801628a:	5e9b      	ldrsh	r3, [r3, r2]
 801628c:	2b00      	cmp	r3, #0
 801628e:	da03      	bge.n	8016298 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	22b8      	movs	r2, #184	@ 0xb8
 8016294:	4313      	orrs	r3, r2
 8016296:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016298:	1cbb      	adds	r3, r7, #2
 801629a:	881b      	ldrh	r3, [r3, #0]
 801629c:	2b10      	cmp	r3, #16
 801629e:	d103      	bne.n	80162a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2290      	movs	r2, #144	@ 0x90
 80162a4:	4313      	orrs	r3, r2
 80162a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80162a8:	1cbb      	adds	r3, r7, #2
 80162aa:	881b      	ldrh	r3, [r3, #0]
 80162ac:	2b20      	cmp	r3, #32
 80162ae:	d103      	bne.n	80162b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	2220      	movs	r2, #32
 80162b4:	4313      	orrs	r3, r2
 80162b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80162b8:	1cbb      	adds	r3, r7, #2
 80162ba:	881b      	ldrh	r3, [r3, #0]
 80162bc:	2b40      	cmp	r3, #64	@ 0x40
 80162be:	d103      	bne.n	80162c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2240      	movs	r2, #64	@ 0x40
 80162c4:	4313      	orrs	r3, r2
 80162c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	43d9      	mvns	r1, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	400a      	ands	r2, r1
 80162d8:	601a      	str	r2, [r3, #0]
}
 80162da:	46c0      	nop			@ (mov r8, r8)
 80162dc:	46bd      	mov	sp, r7
 80162de:	b004      	add	sp, #16
 80162e0:	bd80      	pop	{r7, pc}
	...

080162e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b082      	sub	sp, #8
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2241      	movs	r2, #65	@ 0x41
 80162f2:	5c9b      	ldrb	r3, [r3, r2]
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	2b20      	cmp	r3, #32
 80162f8:	d138      	bne.n	801636c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2240      	movs	r2, #64	@ 0x40
 80162fe:	5c9b      	ldrb	r3, [r3, r2]
 8016300:	2b01      	cmp	r3, #1
 8016302:	d101      	bne.n	8016308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016304:	2302      	movs	r3, #2
 8016306:	e032      	b.n	801636e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2240      	movs	r2, #64	@ 0x40
 801630c:	2101      	movs	r1, #1
 801630e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2241      	movs	r2, #65	@ 0x41
 8016314:	2124      	movs	r1, #36	@ 0x24
 8016316:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2101      	movs	r1, #1
 8016324:	438a      	bics	r2, r1
 8016326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	4911      	ldr	r1, [pc, #68]	@ (8016378 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8016334:	400a      	ands	r2, r1
 8016336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	6819      	ldr	r1, [r3, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	430a      	orrs	r2, r1
 8016346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2101      	movs	r1, #1
 8016354:	430a      	orrs	r2, r1
 8016356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2241      	movs	r2, #65	@ 0x41
 801635c:	2120      	movs	r1, #32
 801635e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2240      	movs	r2, #64	@ 0x40
 8016364:	2100      	movs	r1, #0
 8016366:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016368:	2300      	movs	r3, #0
 801636a:	e000      	b.n	801636e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801636c:	2302      	movs	r3, #2
  }
}
 801636e:	0018      	movs	r0, r3
 8016370:	46bd      	mov	sp, r7
 8016372:	b002      	add	sp, #8
 8016374:	bd80      	pop	{r7, pc}
 8016376:	46c0      	nop			@ (mov r8, r8)
 8016378:	ffffefff 	.word	0xffffefff

0801637c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2241      	movs	r2, #65	@ 0x41
 801638a:	5c9b      	ldrb	r3, [r3, r2]
 801638c:	b2db      	uxtb	r3, r3
 801638e:	2b20      	cmp	r3, #32
 8016390:	d139      	bne.n	8016406 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2240      	movs	r2, #64	@ 0x40
 8016396:	5c9b      	ldrb	r3, [r3, r2]
 8016398:	2b01      	cmp	r3, #1
 801639a:	d101      	bne.n	80163a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801639c:	2302      	movs	r3, #2
 801639e:	e033      	b.n	8016408 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2240      	movs	r2, #64	@ 0x40
 80163a4:	2101      	movs	r1, #1
 80163a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2241      	movs	r2, #65	@ 0x41
 80163ac:	2124      	movs	r1, #36	@ 0x24
 80163ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2101      	movs	r1, #1
 80163bc:	438a      	bics	r2, r1
 80163be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	4a11      	ldr	r2, [pc, #68]	@ (8016410 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80163cc:	4013      	ands	r3, r2
 80163ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	021b      	lsls	r3, r3, #8
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	4313      	orrs	r3, r2
 80163d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	68fa      	ldr	r2, [r7, #12]
 80163e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2101      	movs	r1, #1
 80163ee:	430a      	orrs	r2, r1
 80163f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2241      	movs	r2, #65	@ 0x41
 80163f6:	2120      	movs	r1, #32
 80163f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2240      	movs	r2, #64	@ 0x40
 80163fe:	2100      	movs	r1, #0
 8016400:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016402:	2300      	movs	r3, #0
 8016404:	e000      	b.n	8016408 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016406:	2302      	movs	r3, #2
  }
}
 8016408:	0018      	movs	r0, r3
 801640a:	46bd      	mov	sp, r7
 801640c:	b004      	add	sp, #16
 801640e:	bd80      	pop	{r7, pc}
 8016410:	fffff0ff 	.word	0xfffff0ff

08016414 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b088      	sub	sp, #32
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d101      	bne.n	8016426 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8016422:	2301      	movs	r3, #1
 8016424:	e0e1      	b.n	80165ea <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2235      	movs	r2, #53	@ 0x35
 801642a:	5c9b      	ldrb	r3, [r3, r2]
 801642c:	b2db      	uxtb	r3, r3
 801642e:	2b00      	cmp	r3, #0
 8016430:	d107      	bne.n	8016442 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2234      	movs	r2, #52	@ 0x34
 8016436:	2100      	movs	r1, #0
 8016438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	0018      	movs	r0, r3
 801643e:	f7f4 fae5 	bl	800aa0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2235      	movs	r2, #53	@ 0x35
 8016446:	2102      	movs	r1, #2
 8016448:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	69da      	ldr	r2, [r3, #28]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4967      	ldr	r1, [pc, #412]	@ (80165f4 <HAL_I2S_Init+0x1e0>)
 8016456:	400a      	ands	r2, r1
 8016458:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2202      	movs	r2, #2
 8016460:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	695b      	ldr	r3, [r3, #20]
 8016466:	2b02      	cmp	r3, #2
 8016468:	d073      	beq.n	8016552 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	68db      	ldr	r3, [r3, #12]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d102      	bne.n	8016478 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8016472:	2310      	movs	r3, #16
 8016474:	617b      	str	r3, [r7, #20]
 8016476:	e001      	b.n	801647c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8016478:	2320      	movs	r3, #32
 801647a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	689b      	ldr	r3, [r3, #8]
 8016480:	2b20      	cmp	r3, #32
 8016482:	d802      	bhi.n	801648a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	005b      	lsls	r3, r3, #1
 8016488:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801648a:	f002 fed3 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 801648e:	0003      	movs	r3, r0
 8016490:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	691a      	ldr	r2, [r3, #16]
 8016496:	2380      	movs	r3, #128	@ 0x80
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	429a      	cmp	r2, r3
 801649c:	d131      	bne.n	8016502 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d016      	beq.n	80164d4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	0019      	movs	r1, r3
 80164ac:	68f8      	ldr	r0, [r7, #12]
 80164ae:	f7e9 fe79 	bl	80001a4 <__udivsi3>
 80164b2:	0003      	movs	r3, r0
 80164b4:	001a      	movs	r2, r3
 80164b6:	0013      	movs	r3, r2
 80164b8:	009b      	lsls	r3, r3, #2
 80164ba:	189b      	adds	r3, r3, r2
 80164bc:	005b      	lsls	r3, r3, #1
 80164be:	001a      	movs	r2, r3
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	695b      	ldr	r3, [r3, #20]
 80164c4:	0019      	movs	r1, r3
 80164c6:	0010      	movs	r0, r2
 80164c8:	f7e9 fe6c 	bl	80001a4 <__udivsi3>
 80164cc:	0003      	movs	r3, r0
 80164ce:	3305      	adds	r3, #5
 80164d0:	613b      	str	r3, [r7, #16]
 80164d2:	e02a      	b.n	801652a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	0019      	movs	r1, r3
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	f7e9 fe62 	bl	80001a4 <__udivsi3>
 80164e0:	0003      	movs	r3, r0
 80164e2:	001a      	movs	r2, r3
 80164e4:	0013      	movs	r3, r2
 80164e6:	009b      	lsls	r3, r3, #2
 80164e8:	189b      	adds	r3, r3, r2
 80164ea:	005b      	lsls	r3, r3, #1
 80164ec:	001a      	movs	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	695b      	ldr	r3, [r3, #20]
 80164f2:	0019      	movs	r1, r3
 80164f4:	0010      	movs	r0, r2
 80164f6:	f7e9 fe55 	bl	80001a4 <__udivsi3>
 80164fa:	0003      	movs	r3, r0
 80164fc:	3305      	adds	r3, #5
 80164fe:	613b      	str	r3, [r7, #16]
 8016500:	e013      	b.n	801652a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8016502:	6979      	ldr	r1, [r7, #20]
 8016504:	68f8      	ldr	r0, [r7, #12]
 8016506:	f7e9 fe4d 	bl	80001a4 <__udivsi3>
 801650a:	0003      	movs	r3, r0
 801650c:	001a      	movs	r2, r3
 801650e:	0013      	movs	r3, r2
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	189b      	adds	r3, r3, r2
 8016514:	005b      	lsls	r3, r3, #1
 8016516:	001a      	movs	r2, r3
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	695b      	ldr	r3, [r3, #20]
 801651c:	0019      	movs	r1, r3
 801651e:	0010      	movs	r0, r2
 8016520:	f7e9 fe40 	bl	80001a4 <__udivsi3>
 8016524:	0003      	movs	r3, r0
 8016526:	3305      	adds	r3, #5
 8016528:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	210a      	movs	r1, #10
 801652e:	0018      	movs	r0, r3
 8016530:	f7e9 fe38 	bl	80001a4 <__udivsi3>
 8016534:	0003      	movs	r3, r0
 8016536:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	2201      	movs	r2, #1
 801653c:	4013      	ands	r3, r2
 801653e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8016540:	693a      	ldr	r2, [r7, #16]
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	085b      	lsrs	r3, r3, #1
 8016548:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	021b      	lsls	r3, r3, #8
 801654e:	61bb      	str	r3, [r7, #24]
 8016550:	e003      	b.n	801655a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8016552:	2302      	movs	r3, #2
 8016554:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8016556:	2300      	movs	r3, #0
 8016558:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	2b01      	cmp	r3, #1
 801655e:	d902      	bls.n	8016566 <HAL_I2S_Init+0x152>
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	2bff      	cmp	r3, #255	@ 0xff
 8016564:	d907      	bls.n	8016576 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801656a:	2210      	movs	r2, #16
 801656c:	431a      	orrs	r2, r3
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8016572:	2301      	movs	r3, #1
 8016574:	e039      	b.n	80165ea <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	691a      	ldr	r2, [r3, #16]
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	431a      	orrs	r2, r3
 801657e:	0011      	movs	r1, r2
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	69fa      	ldr	r2, [r7, #28]
 8016586:	430a      	orrs	r2, r1
 8016588:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	69db      	ldr	r3, [r3, #28]
 8016590:	4a18      	ldr	r2, [pc, #96]	@ (80165f4 <HAL_I2S_Init+0x1e0>)
 8016592:	401a      	ands	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6859      	ldr	r1, [r3, #4]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	689b      	ldr	r3, [r3, #8]
 801659c:	4319      	orrs	r1, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	4319      	orrs	r1, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	699b      	ldr	r3, [r3, #24]
 80165a8:	430b      	orrs	r3, r1
 80165aa:	431a      	orrs	r2, r3
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2180      	movs	r1, #128	@ 0x80
 80165b2:	0109      	lsls	r1, r1, #4
 80165b4:	430a      	orrs	r2, r1
 80165b6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	689b      	ldr	r3, [r3, #8]
 80165bc:	2b30      	cmp	r3, #48	@ 0x30
 80165be:	d003      	beq.n	80165c8 <HAL_I2S_Init+0x1b4>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	689b      	ldr	r3, [r3, #8]
 80165c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80165c6:	d108      	bne.n	80165da <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	69da      	ldr	r2, [r3, #28]
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	2180      	movs	r1, #128	@ 0x80
 80165d4:	0149      	lsls	r1, r1, #5
 80165d6:	430a      	orrs	r2, r1
 80165d8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2200      	movs	r2, #0
 80165de:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2235      	movs	r2, #53	@ 0x35
 80165e4:	2101      	movs	r1, #1
 80165e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80165e8:	2300      	movs	r3, #0
}
 80165ea:	0018      	movs	r0, r3
 80165ec:	46bd      	mov	sp, r7
 80165ee:	b008      	add	sp, #32
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	46c0      	nop			@ (mov r8, r8)
 80165f4:	fffff040 	.word	0xfffff040

080165f8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b086      	sub	sp, #24
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	1dbb      	adds	r3, r7, #6
 8016604:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d003      	beq.n	8016614 <HAL_I2S_Receive_DMA+0x1c>
 801660c:	1dbb      	adds	r3, r7, #6
 801660e:	881b      	ldrh	r3, [r3, #0]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d101      	bne.n	8016618 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8016614:	2301      	movs	r3, #1
 8016616:	e0a6      	b.n	8016766 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2234      	movs	r2, #52	@ 0x34
 801661c:	5c9b      	ldrb	r3, [r3, r2]
 801661e:	b2db      	uxtb	r3, r3
 8016620:	2b01      	cmp	r3, #1
 8016622:	d101      	bne.n	8016628 <HAL_I2S_Receive_DMA+0x30>
 8016624:	2302      	movs	r3, #2
 8016626:	e09e      	b.n	8016766 <HAL_I2S_Receive_DMA+0x16e>
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2234      	movs	r2, #52	@ 0x34
 801662c:	2101      	movs	r1, #1
 801662e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2235      	movs	r2, #53	@ 0x35
 8016634:	5c9b      	ldrb	r3, [r3, r2]
 8016636:	b2db      	uxtb	r3, r3
 8016638:	2b01      	cmp	r3, #1
 801663a:	d005      	beq.n	8016648 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2234      	movs	r2, #52	@ 0x34
 8016640:	2100      	movs	r1, #0
 8016642:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8016644:	2302      	movs	r3, #2
 8016646:	e08e      	b.n	8016766 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	2235      	movs	r2, #53	@ 0x35
 801664c:	2104      	movs	r1, #4
 801664e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2200      	movs	r2, #0
 8016654:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	68ba      	ldr	r2, [r7, #8]
 801665a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	69db      	ldr	r3, [r3, #28]
 8016662:	2207      	movs	r2, #7
 8016664:	4013      	ands	r3, r2
 8016666:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	2b03      	cmp	r3, #3
 801666c:	d002      	beq.n	8016674 <HAL_I2S_Receive_DMA+0x7c>
 801666e:	697b      	ldr	r3, [r7, #20]
 8016670:	2b05      	cmp	r3, #5
 8016672:	d10c      	bne.n	801668e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8016674:	1dbb      	adds	r3, r7, #6
 8016676:	881b      	ldrh	r3, [r3, #0]
 8016678:	18db      	adds	r3, r3, r3
 801667a:	b29a      	uxth	r2, r3
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8016680:	1dbb      	adds	r3, r7, #6
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	18db      	adds	r3, r3, r3
 8016686:	b29a      	uxth	r2, r3
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801668c:	e007      	b.n	801669e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	1dba      	adds	r2, r7, #6
 8016692:	8812      	ldrh	r2, [r2, #0]
 8016694:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	1dba      	adds	r2, r7, #6
 801669a:	8812      	ldrh	r2, [r2, #0]
 801669c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166a2:	4a33      	ldr	r2, [pc, #204]	@ (8016770 <HAL_I2S_Receive_DMA+0x178>)
 80166a4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166aa:	4a32      	ldr	r2, [pc, #200]	@ (8016774 <HAL_I2S_Receive_DMA+0x17c>)
 80166ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166b2:	4a31      	ldr	r2, [pc, #196]	@ (8016778 <HAL_I2S_Receive_DMA+0x180>)
 80166b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	69da      	ldr	r2, [r3, #28]
 80166bc:	23c0      	movs	r3, #192	@ 0xc0
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	401a      	ands	r2, r3
 80166c2:	23c0      	movs	r3, #192	@ 0xc0
 80166c4:	009b      	lsls	r3, r3, #2
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d10a      	bne.n	80166e0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80166ca:	2300      	movs	r3, #0
 80166cc:	613b      	str	r3, [r7, #16]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	613b      	str	r3, [r7, #16]
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	689b      	ldr	r3, [r3, #8]
 80166dc:	613b      	str	r3, [r7, #16]
 80166de:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	330c      	adds	r3, #12
 80166ea:	0019      	movs	r1, r3
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166f0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80166f8:	f7fc fa0a 	bl	8012b10 <HAL_DMA_Start_IT>
 80166fc:	1e03      	subs	r3, r0, #0
 80166fe:	d00f      	beq.n	8016720 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016704:	2208      	movs	r2, #8
 8016706:	431a      	orrs	r2, r3
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2235      	movs	r2, #53	@ 0x35
 8016710:	2101      	movs	r1, #1
 8016712:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	2234      	movs	r2, #52	@ 0x34
 8016718:	2100      	movs	r1, #0
 801671a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801671c:	2301      	movs	r3, #1
 801671e:	e022      	b.n	8016766 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	69da      	ldr	r2, [r3, #28]
 8016726:	2380      	movs	r3, #128	@ 0x80
 8016728:	00db      	lsls	r3, r3, #3
 801672a:	4013      	ands	r3, r2
 801672c:	d108      	bne.n	8016740 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	69da      	ldr	r2, [r3, #28]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2180      	movs	r1, #128	@ 0x80
 801673a:	00c9      	lsls	r1, r1, #3
 801673c:	430a      	orrs	r2, r1
 801673e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	685b      	ldr	r3, [r3, #4]
 8016746:	2201      	movs	r2, #1
 8016748:	4013      	ands	r3, r2
 801674a:	d107      	bne.n	801675c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	685a      	ldr	r2, [r3, #4]
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	2101      	movs	r1, #1
 8016758:	430a      	orrs	r2, r1
 801675a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2234      	movs	r2, #52	@ 0x34
 8016760:	2100      	movs	r1, #0
 8016762:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8016764:	2300      	movs	r3, #0
}
 8016766:	0018      	movs	r0, r3
 8016768:	46bd      	mov	sp, r7
 801676a:	b006      	add	sp, #24
 801676c:	bd80      	pop	{r7, pc}
 801676e:	46c0      	nop			@ (mov r8, r8)
 8016770:	08016959 	.word	0x08016959
 8016774:	08016915 	.word	0x08016915
 8016778:	08016977 	.word	0x08016977

0801677c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b086      	sub	sp, #24
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016784:	2317      	movs	r3, #23
 8016786:	18fb      	adds	r3, r7, r3
 8016788:	2200      	movs	r2, #0
 801678a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	685a      	ldr	r2, [r3, #4]
 8016790:	2380      	movs	r3, #128	@ 0x80
 8016792:	009b      	lsls	r3, r3, #2
 8016794:	429a      	cmp	r2, r3
 8016796:	d003      	beq.n	80167a0 <HAL_I2S_DMAStop+0x24>
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d158      	bne.n	8016852 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d010      	beq.n	80167ca <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80167ac:	0018      	movs	r0, r3
 80167ae:	f7fc fa15 	bl	8012bdc <HAL_DMA_Abort>
 80167b2:	1e03      	subs	r3, r0, #0
 80167b4:	d009      	beq.n	80167ca <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167ba:	2208      	movs	r2, #8
 80167bc:	431a      	orrs	r2, r3
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80167c2:	2317      	movs	r3, #23
 80167c4:	18fb      	adds	r3, r7, r3
 80167c6:	2201      	movs	r2, #1
 80167c8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	2364      	movs	r3, #100	@ 0x64
 80167ce:	2201      	movs	r2, #1
 80167d0:	2102      	movs	r1, #2
 80167d2:	f000 f8f7 	bl	80169c4 <I2S_WaitFlagStateUntilTimeout>
 80167d6:	1e03      	subs	r3, r0, #0
 80167d8:	d00d      	beq.n	80167f6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167de:	2201      	movs	r2, #1
 80167e0:	431a      	orrs	r2, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2235      	movs	r2, #53	@ 0x35
 80167ea:	2101      	movs	r1, #1
 80167ec:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80167ee:	2317      	movs	r3, #23
 80167f0:	18fb      	adds	r3, r7, r3
 80167f2:	2201      	movs	r2, #1
 80167f4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	2364      	movs	r3, #100	@ 0x64
 80167fa:	2200      	movs	r2, #0
 80167fc:	2180      	movs	r1, #128	@ 0x80
 80167fe:	f000 f8e1 	bl	80169c4 <I2S_WaitFlagStateUntilTimeout>
 8016802:	1e03      	subs	r3, r0, #0
 8016804:	d00d      	beq.n	8016822 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801680a:	2201      	movs	r2, #1
 801680c:	431a      	orrs	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2235      	movs	r2, #53	@ 0x35
 8016816:	2101      	movs	r1, #1
 8016818:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801681a:	2317      	movs	r3, #23
 801681c:	18fb      	adds	r3, r7, r3
 801681e:	2201      	movs	r2, #1
 8016820:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	69da      	ldr	r2, [r3, #28]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4938      	ldr	r1, [pc, #224]	@ (8016910 <HAL_I2S_DMAStop+0x194>)
 801682e:	400a      	ands	r2, r1
 8016830:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8016832:	2300      	movs	r3, #0
 8016834:	613b      	str	r3, [r7, #16]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	689b      	ldr	r3, [r3, #8]
 801683c:	613b      	str	r3, [r7, #16]
 801683e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	685a      	ldr	r2, [r3, #4]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2102      	movs	r1, #2
 801684c:	438a      	bics	r2, r1
 801684e:	605a      	str	r2, [r3, #4]
 8016850:	e053      	b.n	80168fa <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	685a      	ldr	r2, [r3, #4]
 8016856:	23c0      	movs	r3, #192	@ 0xc0
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	429a      	cmp	r2, r3
 801685c:	d005      	beq.n	801686a <HAL_I2S_DMAStop+0xee>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	685a      	ldr	r2, [r3, #4]
 8016862:	2380      	movs	r3, #128	@ 0x80
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	429a      	cmp	r2, r3
 8016868:	d147      	bne.n	80168fa <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801686e:	2b00      	cmp	r3, #0
 8016870:	d010      	beq.n	8016894 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016876:	0018      	movs	r0, r3
 8016878:	f7fc f9b0 	bl	8012bdc <HAL_DMA_Abort>
 801687c:	1e03      	subs	r3, r0, #0
 801687e:	d009      	beq.n	8016894 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016884:	2208      	movs	r2, #8
 8016886:	431a      	orrs	r2, r3
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801688c:	2317      	movs	r3, #23
 801688e:	18fb      	adds	r3, r7, r3
 8016890:	2201      	movs	r2, #1
 8016892:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	69da      	ldr	r2, [r3, #28]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	491c      	ldr	r1, [pc, #112]	@ (8016910 <HAL_I2S_DMAStop+0x194>)
 80168a0:	400a      	ands	r2, r1
 80168a2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80168a4:	2300      	movs	r3, #0
 80168a6:	60fb      	str	r3, [r7, #12]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	68db      	ldr	r3, [r3, #12]
 80168ae:	60fb      	str	r3, [r7, #12]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	689b      	ldr	r3, [r3, #8]
 80168b6:	60fb      	str	r3, [r7, #12]
 80168b8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	685a      	ldr	r2, [r3, #4]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2101      	movs	r1, #1
 80168c6:	438a      	bics	r2, r1
 80168c8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	685a      	ldr	r2, [r3, #4]
 80168ce:	2380      	movs	r3, #128	@ 0x80
 80168d0:	005b      	lsls	r3, r3, #1
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d10e      	bne.n	80168f4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168da:	2240      	movs	r2, #64	@ 0x40
 80168dc:	431a      	orrs	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2235      	movs	r2, #53	@ 0x35
 80168e6:	2101      	movs	r1, #1
 80168e8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80168ea:	2317      	movs	r3, #23
 80168ec:	18fb      	adds	r3, r7, r3
 80168ee:	2201      	movs	r2, #1
 80168f0:	701a      	strb	r2, [r3, #0]
 80168f2:	e002      	b.n	80168fa <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2235      	movs	r2, #53	@ 0x35
 80168fe:	2101      	movs	r1, #1
 8016900:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8016902:	2317      	movs	r3, #23
 8016904:	18fb      	adds	r3, r7, r3
 8016906:	781b      	ldrb	r3, [r3, #0]
}
 8016908:	0018      	movs	r0, r3
 801690a:	46bd      	mov	sp, r7
 801690c:	b006      	add	sp, #24
 801690e:	bd80      	pop	{r7, pc}
 8016910:	fffffbff 	.word	0xfffffbff

08016914 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016920:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	69db      	ldr	r3, [r3, #28]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d10e      	bne.n	8016948 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	685a      	ldr	r2, [r3, #4]
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2101      	movs	r1, #1
 8016936:	438a      	bics	r2, r1
 8016938:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2200      	movs	r2, #0
 801693e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2235      	movs	r2, #53	@ 0x35
 8016944:	2101      	movs	r1, #1
 8016946:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	0018      	movs	r0, r3
 801694c:	f7f8 fea8 	bl	800f6a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8016950:	46c0      	nop			@ (mov r8, r8)
 8016952:	46bd      	mov	sp, r7
 8016954:	b004      	add	sp, #16
 8016956:	bd80      	pop	{r7, pc}

08016958 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b084      	sub	sp, #16
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016964:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	0018      	movs	r0, r3
 801696a:	f7f8 fe87 	bl	800f67c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801696e:	46c0      	nop			@ (mov r8, r8)
 8016970:	46bd      	mov	sp, r7
 8016972:	b004      	add	sp, #16
 8016974:	bd80      	pop	{r7, pc}

08016976 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8016976:	b580      	push	{r7, lr}
 8016978:	b084      	sub	sp, #16
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016982:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	685a      	ldr	r2, [r3, #4]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2103      	movs	r1, #3
 8016990:	438a      	bics	r2, r1
 8016992:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2200      	movs	r2, #0
 8016998:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2200      	movs	r2, #0
 801699e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	2235      	movs	r2, #53	@ 0x35
 80169a4:	2101      	movs	r1, #1
 80169a6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169ac:	2208      	movs	r2, #8
 80169ae:	431a      	orrs	r2, r3
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	0018      	movs	r0, r3
 80169b8:	f7f8 fec0 	bl	800f73c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80169bc:	46c0      	nop			@ (mov r8, r8)
 80169be:	46bd      	mov	sp, r7
 80169c0:	b004      	add	sp, #16
 80169c2:	bd80      	pop	{r7, pc}

080169c4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b086      	sub	sp, #24
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	603b      	str	r3, [r7, #0]
 80169d0:	1dfb      	adds	r3, r7, #7
 80169d2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80169d4:	f7fb fb4a 	bl	801206c <HAL_GetTick>
 80169d8:	0003      	movs	r3, r0
 80169da:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80169dc:	e017      	b.n	8016a0e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	3301      	adds	r3, #1
 80169e2:	d014      	beq.n	8016a0e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80169e4:	f7fb fb42 	bl	801206c <HAL_GetTick>
 80169e8:	0002      	movs	r2, r0
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	1ad3      	subs	r3, r2, r3
 80169ee:	683a      	ldr	r2, [r7, #0]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	d902      	bls.n	80169fa <I2S_WaitFlagStateUntilTimeout+0x36>
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d109      	bne.n	8016a0e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2235      	movs	r2, #53	@ 0x35
 80169fe:	2101      	movs	r1, #1
 8016a00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2234      	movs	r2, #52	@ 0x34
 8016a06:	2100      	movs	r1, #0
 8016a08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016a0a:	2303      	movs	r3, #3
 8016a0c:	e00f      	b.n	8016a2e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	68ba      	ldr	r2, [r7, #8]
 8016a16:	4013      	ands	r3, r2
 8016a18:	68ba      	ldr	r2, [r7, #8]
 8016a1a:	1ad3      	subs	r3, r2, r3
 8016a1c:	425a      	negs	r2, r3
 8016a1e:	4153      	adcs	r3, r2
 8016a20:	b2db      	uxtb	r3, r3
 8016a22:	001a      	movs	r2, r3
 8016a24:	1dfb      	adds	r3, r7, #7
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d1d8      	bne.n	80169de <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8016a2c:	2300      	movs	r3, #0
}
 8016a2e:	0018      	movs	r0, r3
 8016a30:	46bd      	mov	sp, r7
 8016a32:	b006      	add	sp, #24
 8016a34:	bd80      	pop	{r7, pc}
	...

08016a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a3a:	b08b      	sub	sp, #44	@ 0x2c
 8016a3c:	af06      	add	r7, sp, #24
 8016a3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d101      	bne.n	8016a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016a46:	2301      	movs	r3, #1
 8016a48:	e0f0      	b.n	8016c2c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	4a79      	ldr	r2, [pc, #484]	@ (8016c34 <HAL_PCD_Init+0x1fc>)
 8016a4e:	5c9b      	ldrb	r3, [r3, r2]
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d108      	bne.n	8016a68 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	23aa      	movs	r3, #170	@ 0xaa
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	0018      	movs	r0, r3
 8016a64:	f009 ff4a 	bl	80208fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	4a72      	ldr	r2, [pc, #456]	@ (8016c34 <HAL_PCD_Init+0x1fc>)
 8016a6c:	2103      	movs	r1, #3
 8016a6e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	0018      	movs	r0, r3
 8016a76:	f005 fefd 	bl	801c874 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016a7a:	230f      	movs	r3, #15
 8016a7c:	18fb      	adds	r3, r7, r3
 8016a7e:	2200      	movs	r2, #0
 8016a80:	701a      	strb	r2, [r3, #0]
 8016a82:	e049      	b.n	8016b18 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016a84:	200f      	movs	r0, #15
 8016a86:	183b      	adds	r3, r7, r0
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	6879      	ldr	r1, [r7, #4]
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	0013      	movs	r3, r2
 8016a90:	009b      	lsls	r3, r3, #2
 8016a92:	189b      	adds	r3, r3, r2
 8016a94:	00db      	lsls	r3, r3, #3
 8016a96:	18cb      	adds	r3, r1, r3
 8016a98:	3301      	adds	r3, #1
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016a9e:	183b      	adds	r3, r7, r0
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	6879      	ldr	r1, [r7, #4]
 8016aa4:	1c5a      	adds	r2, r3, #1
 8016aa6:	0013      	movs	r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	189b      	adds	r3, r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	183a      	adds	r2, r7, r0
 8016ab0:	7812      	ldrb	r2, [r2, #0]
 8016ab2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016ab4:	183b      	adds	r3, r7, r0
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	6879      	ldr	r1, [r7, #4]
 8016aba:	1c5a      	adds	r2, r3, #1
 8016abc:	0013      	movs	r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	189b      	adds	r3, r3, r2
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	18cb      	adds	r3, r1, r3
 8016ac6:	3303      	adds	r3, #3
 8016ac8:	2200      	movs	r2, #0
 8016aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016acc:	183b      	adds	r3, r7, r0
 8016ace:	781a      	ldrb	r2, [r3, #0]
 8016ad0:	6879      	ldr	r1, [r7, #4]
 8016ad2:	0013      	movs	r3, r2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	189b      	adds	r3, r3, r2
 8016ad8:	00db      	lsls	r3, r3, #3
 8016ada:	18cb      	adds	r3, r1, r3
 8016adc:	3338      	adds	r3, #56	@ 0x38
 8016ade:	2200      	movs	r2, #0
 8016ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016ae2:	183b      	adds	r3, r7, r0
 8016ae4:	781a      	ldrb	r2, [r3, #0]
 8016ae6:	6879      	ldr	r1, [r7, #4]
 8016ae8:	0013      	movs	r3, r2
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	189b      	adds	r3, r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	18cb      	adds	r3, r1, r3
 8016af2:	333c      	adds	r3, #60	@ 0x3c
 8016af4:	2200      	movs	r2, #0
 8016af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016af8:	183b      	adds	r3, r7, r0
 8016afa:	781a      	ldrb	r2, [r3, #0]
 8016afc:	6879      	ldr	r1, [r7, #4]
 8016afe:	0013      	movs	r3, r2
 8016b00:	009b      	lsls	r3, r3, #2
 8016b02:	189b      	adds	r3, r3, r2
 8016b04:	00db      	lsls	r3, r3, #3
 8016b06:	18cb      	adds	r3, r1, r3
 8016b08:	3340      	adds	r3, #64	@ 0x40
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b0e:	183b      	adds	r3, r7, r0
 8016b10:	781a      	ldrb	r2, [r3, #0]
 8016b12:	183b      	adds	r3, r7, r0
 8016b14:	3201      	adds	r2, #1
 8016b16:	701a      	strb	r2, [r3, #0]
 8016b18:	210f      	movs	r1, #15
 8016b1a:	187b      	adds	r3, r7, r1
 8016b1c:	781a      	ldrb	r2, [r3, #0]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	685b      	ldr	r3, [r3, #4]
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d3ae      	bcc.n	8016a84 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b26:	187b      	adds	r3, r7, r1
 8016b28:	2200      	movs	r2, #0
 8016b2a:	701a      	strb	r2, [r3, #0]
 8016b2c:	e056      	b.n	8016bdc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016b2e:	240f      	movs	r4, #15
 8016b30:	193b      	adds	r3, r7, r4
 8016b32:	781a      	ldrb	r2, [r3, #0]
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	236a      	movs	r3, #106	@ 0x6a
 8016b38:	33ff      	adds	r3, #255	@ 0xff
 8016b3a:	0019      	movs	r1, r3
 8016b3c:	0013      	movs	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	189b      	adds	r3, r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	18c3      	adds	r3, r0, r3
 8016b46:	185b      	adds	r3, r3, r1
 8016b48:	2200      	movs	r2, #0
 8016b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016b4c:	193b      	adds	r3, r7, r4
 8016b4e:	781a      	ldrb	r2, [r3, #0]
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	23b4      	movs	r3, #180	@ 0xb4
 8016b54:	0059      	lsls	r1, r3, #1
 8016b56:	0013      	movs	r3, r2
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	189b      	adds	r3, r3, r2
 8016b5c:	00db      	lsls	r3, r3, #3
 8016b5e:	18c3      	adds	r3, r0, r3
 8016b60:	185b      	adds	r3, r3, r1
 8016b62:	193a      	adds	r2, r7, r4
 8016b64:	7812      	ldrb	r2, [r2, #0]
 8016b66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016b68:	193b      	adds	r3, r7, r4
 8016b6a:	781a      	ldrb	r2, [r3, #0]
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	236c      	movs	r3, #108	@ 0x6c
 8016b70:	33ff      	adds	r3, #255	@ 0xff
 8016b72:	0019      	movs	r1, r3
 8016b74:	0013      	movs	r3, r2
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	189b      	adds	r3, r3, r2
 8016b7a:	00db      	lsls	r3, r3, #3
 8016b7c:	18c3      	adds	r3, r0, r3
 8016b7e:	185b      	adds	r3, r3, r1
 8016b80:	2200      	movs	r2, #0
 8016b82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016b84:	193b      	adds	r3, r7, r4
 8016b86:	781a      	ldrb	r2, [r3, #0]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	23bc      	movs	r3, #188	@ 0xbc
 8016b8c:	0059      	lsls	r1, r3, #1
 8016b8e:	0013      	movs	r3, r2
 8016b90:	009b      	lsls	r3, r3, #2
 8016b92:	189b      	adds	r3, r3, r2
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	18c3      	adds	r3, r0, r3
 8016b98:	185b      	adds	r3, r3, r1
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016b9e:	193b      	adds	r3, r7, r4
 8016ba0:	781a      	ldrb	r2, [r3, #0]
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	23be      	movs	r3, #190	@ 0xbe
 8016ba6:	0059      	lsls	r1, r3, #1
 8016ba8:	0013      	movs	r3, r2
 8016baa:	009b      	lsls	r3, r3, #2
 8016bac:	189b      	adds	r3, r3, r2
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	18c3      	adds	r3, r0, r3
 8016bb2:	185b      	adds	r3, r3, r1
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016bb8:	193b      	adds	r3, r7, r4
 8016bba:	781a      	ldrb	r2, [r3, #0]
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	23c0      	movs	r3, #192	@ 0xc0
 8016bc0:	0059      	lsls	r1, r3, #1
 8016bc2:	0013      	movs	r3, r2
 8016bc4:	009b      	lsls	r3, r3, #2
 8016bc6:	189b      	adds	r3, r3, r2
 8016bc8:	00db      	lsls	r3, r3, #3
 8016bca:	18c3      	adds	r3, r0, r3
 8016bcc:	185b      	adds	r3, r3, r1
 8016bce:	2200      	movs	r2, #0
 8016bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016bd2:	193b      	adds	r3, r7, r4
 8016bd4:	781a      	ldrb	r2, [r3, #0]
 8016bd6:	193b      	adds	r3, r7, r4
 8016bd8:	3201      	adds	r2, #1
 8016bda:	701a      	strb	r2, [r3, #0]
 8016bdc:	230f      	movs	r3, #15
 8016bde:	18fb      	adds	r3, r7, r3
 8016be0:	781a      	ldrb	r2, [r3, #0]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d3a1      	bcc.n	8016b2e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	6818      	ldr	r0, [r3, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	466a      	mov	r2, sp
 8016bf2:	0011      	movs	r1, r2
 8016bf4:	001a      	movs	r2, r3
 8016bf6:	3210      	adds	r2, #16
 8016bf8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8016bfa:	c170      	stmia	r1!, {r4, r5, r6}
 8016bfc:	ca30      	ldmia	r2!, {r4, r5}
 8016bfe:	c130      	stmia	r1!, {r4, r5}
 8016c00:	6859      	ldr	r1, [r3, #4]
 8016c02:	689a      	ldr	r2, [r3, #8]
 8016c04:	68db      	ldr	r3, [r3, #12]
 8016c06:	f005 fe4f 	bl	801c8a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2224      	movs	r2, #36	@ 0x24
 8016c0e:	2100      	movs	r1, #0
 8016c10:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	4a07      	ldr	r2, [pc, #28]	@ (8016c34 <HAL_PCD_Init+0x1fc>)
 8016c16:	2101      	movs	r1, #1
 8016c18:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	69db      	ldr	r3, [r3, #28]
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d103      	bne.n	8016c2a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	0018      	movs	r0, r3
 8016c26:	f001 fd23 	bl	8018670 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	0018      	movs	r0, r3
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	b005      	add	sp, #20
 8016c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c34:	000002a9 	.word	0x000002a9

08016c38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	23aa      	movs	r3, #170	@ 0xaa
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	5cd3      	ldrb	r3, [r2, r3]
 8016c48:	2b01      	cmp	r3, #1
 8016c4a:	d101      	bne.n	8016c50 <HAL_PCD_Start+0x18>
 8016c4c:	2302      	movs	r3, #2
 8016c4e:	e014      	b.n	8016c7a <HAL_PCD_Start+0x42>
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	23aa      	movs	r3, #170	@ 0xaa
 8016c54:	009b      	lsls	r3, r3, #2
 8016c56:	2101      	movs	r1, #1
 8016c58:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	0018      	movs	r0, r3
 8016c60:	f005 fdf2 	bl	801c848 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	0018      	movs	r0, r3
 8016c6a:	f007 fdf5 	bl	801e858 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	23aa      	movs	r3, #170	@ 0xaa
 8016c72:	009b      	lsls	r3, r3, #2
 8016c74:	2100      	movs	r1, #0
 8016c76:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016c78:	2300      	movs	r3, #0
}
 8016c7a:	0018      	movs	r0, r3
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	b002      	add	sp, #8
 8016c80:	bd80      	pop	{r7, pc}
	...

08016c84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	0018      	movs	r0, r3
 8016c92:	f007 fdf7 	bl	801e884 <USB_ReadInterrupts>
 8016c96:	0003      	movs	r3, r0
 8016c98:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8016c9a:	68fa      	ldr	r2, [r7, #12]
 8016c9c:	2380      	movs	r3, #128	@ 0x80
 8016c9e:	021b      	lsls	r3, r3, #8
 8016ca0:	4013      	ands	r3, r2
 8016ca2:	d004      	beq.n	8016cae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	0018      	movs	r0, r3
 8016ca8:	f000 fb62 	bl	8017370 <PCD_EP_ISR_Handler>

    return;
 8016cac:	e11d      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	2380      	movs	r3, #128	@ 0x80
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	4013      	ands	r3, r2
 8016cb6:	d015      	beq.n	8016ce4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2244      	movs	r2, #68	@ 0x44
 8016cbe:	5a9b      	ldrh	r3, [r3, r2]
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	498a      	ldr	r1, [pc, #552]	@ (8016ef0 <HAL_PCD_IRQHandler+0x26c>)
 8016cc8:	400a      	ands	r2, r1
 8016cca:	b291      	uxth	r1, r2
 8016ccc:	2244      	movs	r2, #68	@ 0x44
 8016cce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	0018      	movs	r0, r3
 8016cd4:	f009 fe95 	bl	8020a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2100      	movs	r1, #0
 8016cdc:	0018      	movs	r0, r3
 8016cde:	f000 f915 	bl	8016f0c <HAL_PCD_SetAddress>

    return;
 8016ce2:	e102      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8016ce4:	68fa      	ldr	r2, [r7, #12]
 8016ce6:	2380      	movs	r3, #128	@ 0x80
 8016ce8:	01db      	lsls	r3, r3, #7
 8016cea:	4013      	ands	r3, r2
 8016cec:	d00c      	beq.n	8016d08 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	2244      	movs	r2, #68	@ 0x44
 8016cf4:	5a9b      	ldrh	r3, [r3, r2]
 8016cf6:	b29a      	uxth	r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	497d      	ldr	r1, [pc, #500]	@ (8016ef4 <HAL_PCD_IRQHandler+0x270>)
 8016cfe:	400a      	ands	r2, r1
 8016d00:	b291      	uxth	r1, r2
 8016d02:	2244      	movs	r2, #68	@ 0x44
 8016d04:	5299      	strh	r1, [r3, r2]

    return;
 8016d06:	e0f0      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8016d08:	68fa      	ldr	r2, [r7, #12]
 8016d0a:	2380      	movs	r3, #128	@ 0x80
 8016d0c:	019b      	lsls	r3, r3, #6
 8016d0e:	4013      	ands	r3, r2
 8016d10:	d00c      	beq.n	8016d2c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2244      	movs	r2, #68	@ 0x44
 8016d18:	5a9b      	ldrh	r3, [r3, r2]
 8016d1a:	b29a      	uxth	r2, r3
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4975      	ldr	r1, [pc, #468]	@ (8016ef8 <HAL_PCD_IRQHandler+0x274>)
 8016d22:	400a      	ands	r2, r1
 8016d24:	b291      	uxth	r1, r2
 8016d26:	2244      	movs	r2, #68	@ 0x44
 8016d28:	5299      	strh	r1, [r3, r2]

    return;
 8016d2a:	e0de      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	2380      	movs	r3, #128	@ 0x80
 8016d30:	015b      	lsls	r3, r3, #5
 8016d32:	4013      	ands	r3, r2
 8016d34:	d038      	beq.n	8016da8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2240      	movs	r2, #64	@ 0x40
 8016d3c:	5a9b      	ldrh	r3, [r3, r2]
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2104      	movs	r1, #4
 8016d46:	438a      	bics	r2, r1
 8016d48:	b291      	uxth	r1, r2
 8016d4a:	2240      	movs	r2, #64	@ 0x40
 8016d4c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	2240      	movs	r2, #64	@ 0x40
 8016d54:	5a9b      	ldrh	r3, [r3, r2]
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	2108      	movs	r1, #8
 8016d5e:	438a      	bics	r2, r1
 8016d60:	b291      	uxth	r1, r2
 8016d62:	2240      	movs	r2, #64	@ 0x40
 8016d64:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8016d66:	687a      	ldr	r2, [r7, #4]
 8016d68:	23b8      	movs	r3, #184	@ 0xb8
 8016d6a:	009b      	lsls	r3, r3, #2
 8016d6c:	5cd3      	ldrb	r3, [r2, r3]
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d109      	bne.n	8016d86 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	23b8      	movs	r3, #184	@ 0xb8
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	2100      	movs	r1, #0
 8016d7a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2100      	movs	r1, #0
 8016d80:	0018      	movs	r0, r3
 8016d82:	f001 fc9f 	bl	80186c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	0018      	movs	r0, r3
 8016d8a:	f009 fe7b 	bl	8020a84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2244      	movs	r2, #68	@ 0x44
 8016d94:	5a9b      	ldrh	r3, [r3, r2]
 8016d96:	b29a      	uxth	r2, r3
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4957      	ldr	r1, [pc, #348]	@ (8016efc <HAL_PCD_IRQHandler+0x278>)
 8016d9e:	400a      	ands	r2, r1
 8016da0:	b291      	uxth	r1, r2
 8016da2:	2244      	movs	r2, #68	@ 0x44
 8016da4:	5299      	strh	r1, [r3, r2]

    return;
 8016da6:	e0a0      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8016da8:	68fa      	ldr	r2, [r7, #12]
 8016daa:	2380      	movs	r3, #128	@ 0x80
 8016dac:	011b      	lsls	r3, r3, #4
 8016dae:	4013      	ands	r3, r2
 8016db0:	d028      	beq.n	8016e04 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2240      	movs	r2, #64	@ 0x40
 8016db8:	5a9b      	ldrh	r3, [r3, r2]
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2108      	movs	r1, #8
 8016dc2:	430a      	orrs	r2, r1
 8016dc4:	b291      	uxth	r1, r2
 8016dc6:	2240      	movs	r2, #64	@ 0x40
 8016dc8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	2244      	movs	r2, #68	@ 0x44
 8016dd0:	5a9b      	ldrh	r3, [r3, r2]
 8016dd2:	b29a      	uxth	r2, r3
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	4949      	ldr	r1, [pc, #292]	@ (8016f00 <HAL_PCD_IRQHandler+0x27c>)
 8016dda:	400a      	ands	r2, r1
 8016ddc:	b291      	uxth	r1, r2
 8016dde:	2244      	movs	r2, #68	@ 0x44
 8016de0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	2240      	movs	r2, #64	@ 0x40
 8016de8:	5a9b      	ldrh	r3, [r3, r2]
 8016dea:	b29a      	uxth	r2, r3
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	2104      	movs	r1, #4
 8016df2:	430a      	orrs	r2, r1
 8016df4:	b291      	uxth	r1, r2
 8016df6:	2240      	movs	r2, #64	@ 0x40
 8016df8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	0018      	movs	r0, r3
 8016dfe:	f009 fe25 	bl	8020a4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016e02:	e072      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2280      	movs	r2, #128	@ 0x80
 8016e08:	4013      	ands	r3, r2
 8016e0a:	d046      	beq.n	8016e9a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	2244      	movs	r2, #68	@ 0x44
 8016e12:	5a9b      	ldrh	r3, [r3, r2]
 8016e14:	b29a      	uxth	r2, r3
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2180      	movs	r1, #128	@ 0x80
 8016e1c:	438a      	bics	r2, r1
 8016e1e:	b291      	uxth	r1, r2
 8016e20:	2244      	movs	r2, #68	@ 0x44
 8016e22:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	23b8      	movs	r3, #184	@ 0xb8
 8016e28:	009b      	lsls	r3, r3, #2
 8016e2a:	5cd3      	ldrb	r3, [r2, r3]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d12f      	bne.n	8016e90 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2240      	movs	r2, #64	@ 0x40
 8016e36:	5a9b      	ldrh	r3, [r3, r2]
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	2104      	movs	r1, #4
 8016e40:	430a      	orrs	r2, r1
 8016e42:	b291      	uxth	r1, r2
 8016e44:	2240      	movs	r2, #64	@ 0x40
 8016e46:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	2240      	movs	r2, #64	@ 0x40
 8016e4e:	5a9b      	ldrh	r3, [r3, r2]
 8016e50:	b29a      	uxth	r2, r3
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	2108      	movs	r1, #8
 8016e58:	430a      	orrs	r2, r1
 8016e5a:	b291      	uxth	r1, r2
 8016e5c:	2240      	movs	r2, #64	@ 0x40
 8016e5e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	23b8      	movs	r3, #184	@ 0xb8
 8016e64:	009b      	lsls	r3, r3, #2
 8016e66:	2101      	movs	r1, #1
 8016e68:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2254      	movs	r2, #84	@ 0x54
 8016e70:	5a9b      	ldrh	r3, [r3, r2]
 8016e72:	b29b      	uxth	r3, r3
 8016e74:	089b      	lsrs	r3, r3, #2
 8016e76:	223c      	movs	r2, #60	@ 0x3c
 8016e78:	4013      	ands	r3, r2
 8016e7a:	0019      	movs	r1, r3
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	23b9      	movs	r3, #185	@ 0xb9
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2101      	movs	r1, #1
 8016e88:	0018      	movs	r0, r3
 8016e8a:	f001 fc1b 	bl	80186c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8016e8e:	e02c      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	0018      	movs	r0, r3
 8016e94:	f009 fdda 	bl	8020a4c <HAL_PCD_SuspendCallback>
    return;
 8016e98:	e027      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	2380      	movs	r3, #128	@ 0x80
 8016e9e:	009b      	lsls	r3, r3, #2
 8016ea0:	4013      	ands	r3, r2
 8016ea2:	d010      	beq.n	8016ec6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2244      	movs	r2, #68	@ 0x44
 8016eaa:	5a9b      	ldrh	r3, [r3, r2]
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4914      	ldr	r1, [pc, #80]	@ (8016f04 <HAL_PCD_IRQHandler+0x280>)
 8016eb4:	400a      	ands	r2, r1
 8016eb6:	b291      	uxth	r1, r2
 8016eb8:	2244      	movs	r2, #68	@ 0x44
 8016eba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	0018      	movs	r0, r3
 8016ec0:	f009 fd90 	bl	80209e4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016ec4:	e011      	b.n	8016eea <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8016ec6:	68fa      	ldr	r2, [r7, #12]
 8016ec8:	2380      	movs	r3, #128	@ 0x80
 8016eca:	005b      	lsls	r3, r3, #1
 8016ecc:	4013      	ands	r3, r2
 8016ece:	d00c      	beq.n	8016eea <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2244      	movs	r2, #68	@ 0x44
 8016ed6:	5a9b      	ldrh	r3, [r3, r2]
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	490a      	ldr	r1, [pc, #40]	@ (8016f08 <HAL_PCD_IRQHandler+0x284>)
 8016ee0:	400a      	ands	r2, r1
 8016ee2:	b291      	uxth	r1, r2
 8016ee4:	2244      	movs	r2, #68	@ 0x44
 8016ee6:	5299      	strh	r1, [r3, r2]

    return;
 8016ee8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016eea:	46bd      	mov	sp, r7
 8016eec:	b004      	add	sp, #16
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	fffffbff 	.word	0xfffffbff
 8016ef4:	ffffbfff 	.word	0xffffbfff
 8016ef8:	ffffdfff 	.word	0xffffdfff
 8016efc:	ffffefff 	.word	0xffffefff
 8016f00:	fffff7ff 	.word	0xfffff7ff
 8016f04:	fffffdff 	.word	0xfffffdff
 8016f08:	fffffeff 	.word	0xfffffeff

08016f0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	000a      	movs	r2, r1
 8016f16:	1cfb      	adds	r3, r7, #3
 8016f18:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	23aa      	movs	r3, #170	@ 0xaa
 8016f1e:	009b      	lsls	r3, r3, #2
 8016f20:	5cd3      	ldrb	r3, [r2, r3]
 8016f22:	2b01      	cmp	r3, #1
 8016f24:	d101      	bne.n	8016f2a <HAL_PCD_SetAddress+0x1e>
 8016f26:	2302      	movs	r3, #2
 8016f28:	e017      	b.n	8016f5a <HAL_PCD_SetAddress+0x4e>
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	23aa      	movs	r3, #170	@ 0xaa
 8016f2e:	009b      	lsls	r3, r3, #2
 8016f30:	2101      	movs	r1, #1
 8016f32:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	1cfa      	adds	r2, r7, #3
 8016f38:	2124      	movs	r1, #36	@ 0x24
 8016f3a:	7812      	ldrb	r2, [r2, #0]
 8016f3c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	1cfb      	adds	r3, r7, #3
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	0019      	movs	r1, r3
 8016f48:	0010      	movs	r0, r2
 8016f4a:	f007 fc71 	bl	801e830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	23aa      	movs	r3, #170	@ 0xaa
 8016f52:	009b      	lsls	r3, r3, #2
 8016f54:	2100      	movs	r1, #0
 8016f56:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016f58:	2300      	movs	r3, #0
}
 8016f5a:	0018      	movs	r0, r3
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	b002      	add	sp, #8
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016f62:	b590      	push	{r4, r7, lr}
 8016f64:	b085      	sub	sp, #20
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
 8016f6a:	000c      	movs	r4, r1
 8016f6c:	0010      	movs	r0, r2
 8016f6e:	0019      	movs	r1, r3
 8016f70:	1cfb      	adds	r3, r7, #3
 8016f72:	1c22      	adds	r2, r4, #0
 8016f74:	701a      	strb	r2, [r3, #0]
 8016f76:	003b      	movs	r3, r7
 8016f78:	1c02      	adds	r2, r0, #0
 8016f7a:	801a      	strh	r2, [r3, #0]
 8016f7c:	1cbb      	adds	r3, r7, #2
 8016f7e:	1c0a      	adds	r2, r1, #0
 8016f80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8016f82:	230b      	movs	r3, #11
 8016f84:	18fb      	adds	r3, r7, r3
 8016f86:	2200      	movs	r2, #0
 8016f88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8016f8a:	1cfb      	adds	r3, r7, #3
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	b25b      	sxtb	r3, r3
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	da0f      	bge.n	8016fb4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016f94:	1cfb      	adds	r3, r7, #3
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	2207      	movs	r2, #7
 8016f9a:	4013      	ands	r3, r2
 8016f9c:	1c5a      	adds	r2, r3, #1
 8016f9e:	0013      	movs	r3, r2
 8016fa0:	009b      	lsls	r3, r3, #2
 8016fa2:	189b      	adds	r3, r3, r2
 8016fa4:	00db      	lsls	r3, r3, #3
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	18d3      	adds	r3, r2, r3
 8016faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2201      	movs	r2, #1
 8016fb0:	705a      	strb	r2, [r3, #1]
 8016fb2:	e00f      	b.n	8016fd4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016fb4:	1cfb      	adds	r3, r7, #3
 8016fb6:	781b      	ldrb	r3, [r3, #0]
 8016fb8:	2207      	movs	r2, #7
 8016fba:	401a      	ands	r2, r3
 8016fbc:	0013      	movs	r3, r2
 8016fbe:	009b      	lsls	r3, r3, #2
 8016fc0:	189b      	adds	r3, r3, r2
 8016fc2:	00db      	lsls	r3, r3, #3
 8016fc4:	3369      	adds	r3, #105	@ 0x69
 8016fc6:	33ff      	adds	r3, #255	@ 0xff
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	18d3      	adds	r3, r2, r3
 8016fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016fd4:	1cfb      	adds	r3, r7, #3
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	2207      	movs	r2, #7
 8016fda:	4013      	ands	r3, r2
 8016fdc:	b2da      	uxtb	r2, r3
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8016fe2:	003b      	movs	r3, r7
 8016fe4:	881a      	ldrh	r2, [r3, #0]
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	1cba      	adds	r2, r7, #2
 8016fee:	7812      	ldrb	r2, [r2, #0]
 8016ff0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8016ff2:	1cbb      	adds	r3, r7, #2
 8016ff4:	781b      	ldrb	r3, [r3, #0]
 8016ff6:	2b02      	cmp	r3, #2
 8016ff8:	d102      	bne.n	8017000 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	23aa      	movs	r3, #170	@ 0xaa
 8017004:	009b      	lsls	r3, r3, #2
 8017006:	5cd3      	ldrb	r3, [r2, r3]
 8017008:	2b01      	cmp	r3, #1
 801700a:	d101      	bne.n	8017010 <HAL_PCD_EP_Open+0xae>
 801700c:	2302      	movs	r3, #2
 801700e:	e013      	b.n	8017038 <HAL_PCD_EP_Open+0xd6>
 8017010:	687a      	ldr	r2, [r7, #4]
 8017012:	23aa      	movs	r3, #170	@ 0xaa
 8017014:	009b      	lsls	r3, r3, #2
 8017016:	2101      	movs	r1, #1
 8017018:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	68fa      	ldr	r2, [r7, #12]
 8017020:	0011      	movs	r1, r2
 8017022:	0018      	movs	r0, r3
 8017024:	f005 fc68 	bl	801c8f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	23aa      	movs	r3, #170	@ 0xaa
 801702c:	009b      	lsls	r3, r3, #2
 801702e:	2100      	movs	r1, #0
 8017030:	54d1      	strb	r1, [r2, r3]

  return ret;
 8017032:	230b      	movs	r3, #11
 8017034:	18fb      	adds	r3, r7, r3
 8017036:	781b      	ldrb	r3, [r3, #0]
}
 8017038:	0018      	movs	r0, r3
 801703a:	46bd      	mov	sp, r7
 801703c:	b005      	add	sp, #20
 801703e:	bd90      	pop	{r4, r7, pc}

08017040 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b084      	sub	sp, #16
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	000a      	movs	r2, r1
 801704a:	1cfb      	adds	r3, r7, #3
 801704c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801704e:	1cfb      	adds	r3, r7, #3
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	b25b      	sxtb	r3, r3
 8017054:	2b00      	cmp	r3, #0
 8017056:	da0f      	bge.n	8017078 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017058:	1cfb      	adds	r3, r7, #3
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2207      	movs	r2, #7
 801705e:	4013      	ands	r3, r2
 8017060:	1c5a      	adds	r2, r3, #1
 8017062:	0013      	movs	r3, r2
 8017064:	009b      	lsls	r3, r3, #2
 8017066:	189b      	adds	r3, r3, r2
 8017068:	00db      	lsls	r3, r3, #3
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	18d3      	adds	r3, r2, r3
 801706e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	2201      	movs	r2, #1
 8017074:	705a      	strb	r2, [r3, #1]
 8017076:	e00f      	b.n	8017098 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017078:	1cfb      	adds	r3, r7, #3
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	2207      	movs	r2, #7
 801707e:	401a      	ands	r2, r3
 8017080:	0013      	movs	r3, r2
 8017082:	009b      	lsls	r3, r3, #2
 8017084:	189b      	adds	r3, r3, r2
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	3369      	adds	r3, #105	@ 0x69
 801708a:	33ff      	adds	r3, #255	@ 0xff
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	18d3      	adds	r3, r2, r3
 8017090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	2200      	movs	r2, #0
 8017096:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8017098:	1cfb      	adds	r3, r7, #3
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	2207      	movs	r2, #7
 801709e:	4013      	ands	r3, r2
 80170a0:	b2da      	uxtb	r2, r3
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80170a6:	687a      	ldr	r2, [r7, #4]
 80170a8:	23aa      	movs	r3, #170	@ 0xaa
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	5cd3      	ldrb	r3, [r2, r3]
 80170ae:	2b01      	cmp	r3, #1
 80170b0:	d101      	bne.n	80170b6 <HAL_PCD_EP_Close+0x76>
 80170b2:	2302      	movs	r3, #2
 80170b4:	e011      	b.n	80170da <HAL_PCD_EP_Close+0x9a>
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	23aa      	movs	r3, #170	@ 0xaa
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	2101      	movs	r1, #1
 80170be:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	68fa      	ldr	r2, [r7, #12]
 80170c6:	0011      	movs	r1, r2
 80170c8:	0018      	movs	r0, r3
 80170ca:	f005 ffb7 	bl	801d03c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	23aa      	movs	r3, #170	@ 0xaa
 80170d2:	009b      	lsls	r3, r3, #2
 80170d4:	2100      	movs	r1, #0
 80170d6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80170d8:	2300      	movs	r3, #0
}
 80170da:	0018      	movs	r0, r3
 80170dc:	46bd      	mov	sp, r7
 80170de:	b004      	add	sp, #16
 80170e0:	bd80      	pop	{r7, pc}

080170e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80170e2:	b580      	push	{r7, lr}
 80170e4:	b086      	sub	sp, #24
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	60f8      	str	r0, [r7, #12]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
 80170ee:	200b      	movs	r0, #11
 80170f0:	183b      	adds	r3, r7, r0
 80170f2:	1c0a      	adds	r2, r1, #0
 80170f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80170f6:	0001      	movs	r1, r0
 80170f8:	187b      	adds	r3, r7, r1
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	2207      	movs	r2, #7
 80170fe:	401a      	ands	r2, r3
 8017100:	0013      	movs	r3, r2
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	189b      	adds	r3, r3, r2
 8017106:	00db      	lsls	r3, r3, #3
 8017108:	3369      	adds	r3, #105	@ 0x69
 801710a:	33ff      	adds	r3, #255	@ 0xff
 801710c:	68fa      	ldr	r2, [r7, #12]
 801710e:	18d3      	adds	r3, r2, r3
 8017110:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	683a      	ldr	r2, [r7, #0]
 801711c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	2200      	movs	r2, #0
 8017122:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	2200      	movs	r2, #0
 8017128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801712a:	187b      	adds	r3, r7, r1
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	2207      	movs	r2, #7
 8017130:	4013      	ands	r3, r2
 8017132:	b2da      	uxtb	r2, r3
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	697a      	ldr	r2, [r7, #20]
 801713e:	0011      	movs	r1, r2
 8017140:	0018      	movs	r0, r3
 8017142:	f006 f93b 	bl	801d3bc <USB_EPStartXfer>

  return HAL_OK;
 8017146:	2300      	movs	r3, #0
}
 8017148:	0018      	movs	r0, r3
 801714a:	46bd      	mov	sp, r7
 801714c:	b006      	add	sp, #24
 801714e:	bd80      	pop	{r7, pc}

08017150 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	000a      	movs	r2, r1
 801715a:	1cfb      	adds	r3, r7, #3
 801715c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801715e:	1cfb      	adds	r3, r7, #3
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2207      	movs	r2, #7
 8017164:	401a      	ands	r2, r3
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	23c2      	movs	r3, #194	@ 0xc2
 801716a:	0059      	lsls	r1, r3, #1
 801716c:	0013      	movs	r3, r2
 801716e:	009b      	lsls	r3, r3, #2
 8017170:	189b      	adds	r3, r3, r2
 8017172:	00db      	lsls	r3, r3, #3
 8017174:	18c3      	adds	r3, r0, r3
 8017176:	185b      	adds	r3, r3, r1
 8017178:	681b      	ldr	r3, [r3, #0]
}
 801717a:	0018      	movs	r0, r3
 801717c:	46bd      	mov	sp, r7
 801717e:	b002      	add	sp, #8
 8017180:	bd80      	pop	{r7, pc}

08017182 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017182:	b580      	push	{r7, lr}
 8017184:	b086      	sub	sp, #24
 8017186:	af00      	add	r7, sp, #0
 8017188:	60f8      	str	r0, [r7, #12]
 801718a:	607a      	str	r2, [r7, #4]
 801718c:	603b      	str	r3, [r7, #0]
 801718e:	200b      	movs	r0, #11
 8017190:	183b      	adds	r3, r7, r0
 8017192:	1c0a      	adds	r2, r1, #0
 8017194:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017196:	183b      	adds	r3, r7, r0
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	2207      	movs	r2, #7
 801719c:	4013      	ands	r3, r2
 801719e:	1c5a      	adds	r2, r3, #1
 80171a0:	0013      	movs	r3, r2
 80171a2:	009b      	lsls	r3, r3, #2
 80171a4:	189b      	adds	r3, r3, r2
 80171a6:	00db      	lsls	r3, r3, #3
 80171a8:	68fa      	ldr	r2, [r7, #12]
 80171aa:	18d3      	adds	r3, r2, r3
 80171ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80171ae:	697b      	ldr	r3, [r7, #20]
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	683a      	ldr	r2, [r7, #0]
 80171b8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	2224      	movs	r2, #36	@ 0x24
 80171be:	2101      	movs	r1, #1
 80171c0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	683a      	ldr	r2, [r7, #0]
 80171c6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	2200      	movs	r2, #0
 80171cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	2201      	movs	r2, #1
 80171d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80171d4:	183b      	adds	r3, r7, r0
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	2207      	movs	r2, #7
 80171da:	4013      	ands	r3, r2
 80171dc:	b2da      	uxtb	r2, r3
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	697a      	ldr	r2, [r7, #20]
 80171e8:	0011      	movs	r1, r2
 80171ea:	0018      	movs	r0, r3
 80171ec:	f006 f8e6 	bl	801d3bc <USB_EPStartXfer>

  return HAL_OK;
 80171f0:	2300      	movs	r3, #0
}
 80171f2:	0018      	movs	r0, r3
 80171f4:	46bd      	mov	sp, r7
 80171f6:	b006      	add	sp, #24
 80171f8:	bd80      	pop	{r7, pc}

080171fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80171fa:	b580      	push	{r7, lr}
 80171fc:	b084      	sub	sp, #16
 80171fe:	af00      	add	r7, sp, #0
 8017200:	6078      	str	r0, [r7, #4]
 8017202:	000a      	movs	r2, r1
 8017204:	1cfb      	adds	r3, r7, #3
 8017206:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8017208:	1cfb      	adds	r3, r7, #3
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	2207      	movs	r2, #7
 801720e:	401a      	ands	r2, r3
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	429a      	cmp	r2, r3
 8017216:	d901      	bls.n	801721c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8017218:	2301      	movs	r3, #1
 801721a:	e046      	b.n	80172aa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801721c:	1cfb      	adds	r3, r7, #3
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	b25b      	sxtb	r3, r3
 8017222:	2b00      	cmp	r3, #0
 8017224:	da0f      	bge.n	8017246 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017226:	1cfb      	adds	r3, r7, #3
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	2207      	movs	r2, #7
 801722c:	4013      	ands	r3, r2
 801722e:	1c5a      	adds	r2, r3, #1
 8017230:	0013      	movs	r3, r2
 8017232:	009b      	lsls	r3, r3, #2
 8017234:	189b      	adds	r3, r3, r2
 8017236:	00db      	lsls	r3, r3, #3
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	18d3      	adds	r3, r2, r3
 801723c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	2201      	movs	r2, #1
 8017242:	705a      	strb	r2, [r3, #1]
 8017244:	e00d      	b.n	8017262 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017246:	1cfb      	adds	r3, r7, #3
 8017248:	781a      	ldrb	r2, [r3, #0]
 801724a:	0013      	movs	r3, r2
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	189b      	adds	r3, r3, r2
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	3369      	adds	r3, #105	@ 0x69
 8017254:	33ff      	adds	r3, #255	@ 0xff
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	18d3      	adds	r3, r2, r3
 801725a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	2200      	movs	r2, #0
 8017260:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	2201      	movs	r2, #1
 8017266:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017268:	1cfb      	adds	r3, r7, #3
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	2207      	movs	r2, #7
 801726e:	4013      	ands	r3, r2
 8017270:	b2da      	uxtb	r2, r3
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	23aa      	movs	r3, #170	@ 0xaa
 801727a:	009b      	lsls	r3, r3, #2
 801727c:	5cd3      	ldrb	r3, [r2, r3]
 801727e:	2b01      	cmp	r3, #1
 8017280:	d101      	bne.n	8017286 <HAL_PCD_EP_SetStall+0x8c>
 8017282:	2302      	movs	r3, #2
 8017284:	e011      	b.n	80172aa <HAL_PCD_EP_SetStall+0xb0>
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	23aa      	movs	r3, #170	@ 0xaa
 801728a:	009b      	lsls	r3, r3, #2
 801728c:	2101      	movs	r1, #1
 801728e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	68fa      	ldr	r2, [r7, #12]
 8017296:	0011      	movs	r1, r2
 8017298:	0018      	movs	r0, r3
 801729a:	f007 f9c7 	bl	801e62c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	23aa      	movs	r3, #170	@ 0xaa
 80172a2:	009b      	lsls	r3, r3, #2
 80172a4:	2100      	movs	r1, #0
 80172a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80172a8:	2300      	movs	r3, #0
}
 80172aa:	0018      	movs	r0, r3
 80172ac:	46bd      	mov	sp, r7
 80172ae:	b004      	add	sp, #16
 80172b0:	bd80      	pop	{r7, pc}

080172b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80172b2:	b580      	push	{r7, lr}
 80172b4:	b084      	sub	sp, #16
 80172b6:	af00      	add	r7, sp, #0
 80172b8:	6078      	str	r0, [r7, #4]
 80172ba:	000a      	movs	r2, r1
 80172bc:	1cfb      	adds	r3, r7, #3
 80172be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80172c0:	1cfb      	adds	r3, r7, #3
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	220f      	movs	r2, #15
 80172c6:	401a      	ands	r2, r3
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	685b      	ldr	r3, [r3, #4]
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d901      	bls.n	80172d4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80172d0:	2301      	movs	r3, #1
 80172d2:	e048      	b.n	8017366 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80172d4:	1cfb      	adds	r3, r7, #3
 80172d6:	781b      	ldrb	r3, [r3, #0]
 80172d8:	b25b      	sxtb	r3, r3
 80172da:	2b00      	cmp	r3, #0
 80172dc:	da0f      	bge.n	80172fe <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80172de:	1cfb      	adds	r3, r7, #3
 80172e0:	781b      	ldrb	r3, [r3, #0]
 80172e2:	2207      	movs	r2, #7
 80172e4:	4013      	ands	r3, r2
 80172e6:	1c5a      	adds	r2, r3, #1
 80172e8:	0013      	movs	r3, r2
 80172ea:	009b      	lsls	r3, r3, #2
 80172ec:	189b      	adds	r3, r3, r2
 80172ee:	00db      	lsls	r3, r3, #3
 80172f0:	687a      	ldr	r2, [r7, #4]
 80172f2:	18d3      	adds	r3, r2, r3
 80172f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	2201      	movs	r2, #1
 80172fa:	705a      	strb	r2, [r3, #1]
 80172fc:	e00f      	b.n	801731e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80172fe:	1cfb      	adds	r3, r7, #3
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	2207      	movs	r2, #7
 8017304:	401a      	ands	r2, r3
 8017306:	0013      	movs	r3, r2
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	189b      	adds	r3, r3, r2
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	3369      	adds	r3, #105	@ 0x69
 8017310:	33ff      	adds	r3, #255	@ 0xff
 8017312:	687a      	ldr	r2, [r7, #4]
 8017314:	18d3      	adds	r3, r2, r3
 8017316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	2200      	movs	r2, #0
 801731c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	2200      	movs	r2, #0
 8017322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017324:	1cfb      	adds	r3, r7, #3
 8017326:	781b      	ldrb	r3, [r3, #0]
 8017328:	2207      	movs	r2, #7
 801732a:	4013      	ands	r3, r2
 801732c:	b2da      	uxtb	r2, r3
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8017332:	687a      	ldr	r2, [r7, #4]
 8017334:	23aa      	movs	r3, #170	@ 0xaa
 8017336:	009b      	lsls	r3, r3, #2
 8017338:	5cd3      	ldrb	r3, [r2, r3]
 801733a:	2b01      	cmp	r3, #1
 801733c:	d101      	bne.n	8017342 <HAL_PCD_EP_ClrStall+0x90>
 801733e:	2302      	movs	r3, #2
 8017340:	e011      	b.n	8017366 <HAL_PCD_EP_ClrStall+0xb4>
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	23aa      	movs	r3, #170	@ 0xaa
 8017346:	009b      	lsls	r3, r3, #2
 8017348:	2101      	movs	r1, #1
 801734a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	68fa      	ldr	r2, [r7, #12]
 8017352:	0011      	movs	r1, r2
 8017354:	0018      	movs	r0, r3
 8017356:	f007 f9b9 	bl	801e6cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801735a:	687a      	ldr	r2, [r7, #4]
 801735c:	23aa      	movs	r3, #170	@ 0xaa
 801735e:	009b      	lsls	r3, r3, #2
 8017360:	2100      	movs	r1, #0
 8017362:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8017364:	2300      	movs	r3, #0
}
 8017366:	0018      	movs	r0, r3
 8017368:	46bd      	mov	sp, r7
 801736a:	b004      	add	sp, #16
 801736c:	bd80      	pop	{r7, pc}
	...

08017370 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8017370:	b5b0      	push	{r4, r5, r7, lr}
 8017372:	b096      	sub	sp, #88	@ 0x58
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017378:	f000 fbec 	bl	8017b54 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681a      	ldr	r2, [r3, #0]
 8017380:	204e      	movs	r0, #78	@ 0x4e
 8017382:	183b      	adds	r3, r7, r0
 8017384:	2144      	movs	r1, #68	@ 0x44
 8017386:	5a52      	ldrh	r2, [r2, r1]
 8017388:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801738a:	183b      	adds	r3, r7, r0
 801738c:	881b      	ldrh	r3, [r3, #0]
 801738e:	b2da      	uxtb	r2, r3
 8017390:	244d      	movs	r4, #77	@ 0x4d
 8017392:	193b      	adds	r3, r7, r4
 8017394:	210f      	movs	r1, #15
 8017396:	400a      	ands	r2, r1
 8017398:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801739a:	193b      	adds	r3, r7, r4
 801739c:	781b      	ldrb	r3, [r3, #0]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d000      	beq.n	80173a4 <PCD_EP_ISR_Handler+0x34>
 80173a2:	e18f      	b.n	80176c4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80173a4:	183b      	adds	r3, r7, r0
 80173a6:	881b      	ldrh	r3, [r3, #0]
 80173a8:	2210      	movs	r2, #16
 80173aa:	4013      	ands	r3, r2
 80173ac:	d155      	bne.n	801745a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	881b      	ldrh	r3, [r3, #0]
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	200e      	movs	r0, #14
 80173b8:	183b      	adds	r3, r7, r0
 80173ba:	49bb      	ldr	r1, [pc, #748]	@ (80176a8 <PCD_EP_ISR_Handler+0x338>)
 80173bc:	400a      	ands	r2, r1
 80173be:	801a      	strh	r2, [r3, #0]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	183a      	adds	r2, r7, r0
 80173c6:	8812      	ldrh	r2, [r2, #0]
 80173c8:	49b8      	ldr	r1, [pc, #736]	@ (80176ac <PCD_EP_ISR_Handler+0x33c>)
 80173ca:	430a      	orrs	r2, r1
 80173cc:	b292      	uxth	r2, r2
 80173ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	3328      	adds	r3, #40	@ 0x28
 80173d4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	2250      	movs	r2, #80	@ 0x50
 80173dc:	5a9b      	ldrh	r3, [r3, r2]
 80173de:	b29b      	uxth	r3, r3
 80173e0:	001a      	movs	r2, r3
 80173e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	00db      	lsls	r3, r3, #3
 80173e8:	18d2      	adds	r2, r2, r3
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	18d3      	adds	r3, r2, r3
 80173f0:	4aaf      	ldr	r2, [pc, #700]	@ (80176b0 <PCD_EP_ISR_Handler+0x340>)
 80173f2:	4694      	mov	ip, r2
 80173f4:	4463      	add	r3, ip
 80173f6:	881b      	ldrh	r3, [r3, #0]
 80173f8:	059b      	lsls	r3, r3, #22
 80173fa:	0d9a      	lsrs	r2, r3, #22
 80173fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8017400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017402:	695a      	ldr	r2, [r3, #20]
 8017404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017406:	69db      	ldr	r3, [r3, #28]
 8017408:	18d2      	adds	r2, r2, r3
 801740a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801740c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2100      	movs	r1, #0
 8017412:	0018      	movs	r0, r3
 8017414:	f009 fac8 	bl	80209a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2224      	movs	r2, #36	@ 0x24
 801741c:	5c9b      	ldrb	r3, [r3, r2]
 801741e:	b2db      	uxtb	r3, r3
 8017420:	2b00      	cmp	r3, #0
 8017422:	d101      	bne.n	8017428 <PCD_EP_ISR_Handler+0xb8>
 8017424:	f000 fb96 	bl	8017b54 <PCD_EP_ISR_Handler+0x7e4>
 8017428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801742a:	699b      	ldr	r3, [r3, #24]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d001      	beq.n	8017434 <PCD_EP_ISR_Handler+0xc4>
 8017430:	f000 fb90 	bl	8017b54 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2224      	movs	r2, #36	@ 0x24
 8017438:	5c9b      	ldrb	r3, [r3, r2]
 801743a:	b2db      	uxtb	r3, r3
 801743c:	2280      	movs	r2, #128	@ 0x80
 801743e:	4252      	negs	r2, r2
 8017440:	4313      	orrs	r3, r2
 8017442:	b2da      	uxtb	r2, r3
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	0011      	movs	r1, r2
 801744a:	224c      	movs	r2, #76	@ 0x4c
 801744c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2224      	movs	r2, #36	@ 0x24
 8017452:	2100      	movs	r1, #0
 8017454:	5499      	strb	r1, [r3, r2]
 8017456:	f000 fb7d 	bl	8017b54 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	3369      	adds	r3, #105	@ 0x69
 801745e:	33ff      	adds	r3, #255	@ 0xff
 8017460:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	214a      	movs	r1, #74	@ 0x4a
 8017468:	187b      	adds	r3, r7, r1
 801746a:	8812      	ldrh	r2, [r2, #0]
 801746c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801746e:	187b      	adds	r3, r7, r1
 8017470:	881a      	ldrh	r2, [r3, #0]
 8017472:	2380      	movs	r3, #128	@ 0x80
 8017474:	011b      	lsls	r3, r3, #4
 8017476:	4013      	ands	r3, r2
 8017478:	d037      	beq.n	80174ea <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	2250      	movs	r2, #80	@ 0x50
 8017480:	5a9b      	ldrh	r3, [r3, r2]
 8017482:	b29b      	uxth	r3, r3
 8017484:	001a      	movs	r2, r3
 8017486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	00db      	lsls	r3, r3, #3
 801748c:	18d2      	adds	r2, r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	18d3      	adds	r3, r2, r3
 8017494:	4a87      	ldr	r2, [pc, #540]	@ (80176b4 <PCD_EP_ISR_Handler+0x344>)
 8017496:	4694      	mov	ip, r2
 8017498:	4463      	add	r3, ip
 801749a:	881b      	ldrh	r3, [r3, #0]
 801749c:	059b      	lsls	r3, r3, #22
 801749e:	0d9a      	lsrs	r2, r3, #22
 80174a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	22ac      	movs	r2, #172	@ 0xac
 80174ac:	0092      	lsls	r2, r2, #2
 80174ae:	1899      	adds	r1, r3, r2
 80174b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80174b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80174b8:	b29b      	uxth	r3, r3
 80174ba:	f007 fa3a 	bl	801e932 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	881b      	ldrh	r3, [r3, #0]
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	2010      	movs	r0, #16
 80174c8:	183b      	adds	r3, r7, r0
 80174ca:	497b      	ldr	r1, [pc, #492]	@ (80176b8 <PCD_EP_ISR_Handler+0x348>)
 80174cc:	400a      	ands	r2, r1
 80174ce:	801a      	strh	r2, [r3, #0]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	183a      	adds	r2, r7, r0
 80174d6:	8812      	ldrh	r2, [r2, #0]
 80174d8:	2180      	movs	r1, #128	@ 0x80
 80174da:	430a      	orrs	r2, r1
 80174dc:	b292      	uxth	r2, r2
 80174de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	0018      	movs	r0, r3
 80174e4:	f009 fa2a 	bl	802093c <HAL_PCD_SetupStageCallback>
 80174e8:	e334      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80174ea:	234a      	movs	r3, #74	@ 0x4a
 80174ec:	18fb      	adds	r3, r7, r3
 80174ee:	2200      	movs	r2, #0
 80174f0:	5e9b      	ldrsh	r3, [r3, r2]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	db00      	blt.n	80174f8 <PCD_EP_ISR_Handler+0x188>
 80174f6:	e32d      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	881b      	ldrh	r3, [r3, #0]
 80174fe:	b29a      	uxth	r2, r3
 8017500:	201e      	movs	r0, #30
 8017502:	183b      	adds	r3, r7, r0
 8017504:	496c      	ldr	r1, [pc, #432]	@ (80176b8 <PCD_EP_ISR_Handler+0x348>)
 8017506:	400a      	ands	r2, r1
 8017508:	801a      	strh	r2, [r3, #0]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	183a      	adds	r2, r7, r0
 8017510:	8812      	ldrh	r2, [r2, #0]
 8017512:	2180      	movs	r1, #128	@ 0x80
 8017514:	430a      	orrs	r2, r1
 8017516:	b292      	uxth	r2, r2
 8017518:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	2250      	movs	r2, #80	@ 0x50
 8017520:	5a9b      	ldrh	r3, [r3, r2]
 8017522:	b29b      	uxth	r3, r3
 8017524:	001a      	movs	r2, r3
 8017526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	18d2      	adds	r2, r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	18d3      	adds	r3, r2, r3
 8017534:	4a5f      	ldr	r2, [pc, #380]	@ (80176b4 <PCD_EP_ISR_Handler+0x344>)
 8017536:	4694      	mov	ip, r2
 8017538:	4463      	add	r3, ip
 801753a:	881b      	ldrh	r3, [r3, #0]
 801753c:	059b      	lsls	r3, r3, #22
 801753e:	0d9a      	lsrs	r2, r3, #22
 8017540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017542:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8017544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017546:	69db      	ldr	r3, [r3, #28]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d01a      	beq.n	8017582 <PCD_EP_ISR_Handler+0x212>
 801754c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801754e:	695b      	ldr	r3, [r3, #20]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d016      	beq.n	8017582 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6818      	ldr	r0, [r3, #0]
 8017558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801755a:	6959      	ldr	r1, [r3, #20]
 801755c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801755e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8017560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017562:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8017564:	b29b      	uxth	r3, r3
 8017566:	f007 f9e4 	bl	801e932 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801756a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801756c:	695a      	ldr	r2, [r3, #20]
 801756e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017570:	69db      	ldr	r3, [r3, #28]
 8017572:	18d2      	adds	r2, r2, r3
 8017574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017576:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2100      	movs	r1, #0
 801757c:	0018      	movs	r0, r3
 801757e:	f009 f9f2 	bl	8020966 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	214a      	movs	r1, #74	@ 0x4a
 8017588:	187b      	adds	r3, r7, r1
 801758a:	8812      	ldrh	r2, [r2, #0]
 801758c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801758e:	187b      	adds	r3, r7, r1
 8017590:	881a      	ldrh	r2, [r3, #0]
 8017592:	2380      	movs	r3, #128	@ 0x80
 8017594:	011b      	lsls	r3, r3, #4
 8017596:	4013      	ands	r3, r2
 8017598:	d000      	beq.n	801759c <PCD_EP_ISR_Handler+0x22c>
 801759a:	e2db      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
 801759c:	187b      	adds	r3, r7, r1
 801759e:	881a      	ldrh	r2, [r3, #0]
 80175a0:	23c0      	movs	r3, #192	@ 0xc0
 80175a2:	019b      	lsls	r3, r3, #6
 80175a4:	401a      	ands	r2, r3
 80175a6:	23c0      	movs	r3, #192	@ 0xc0
 80175a8:	019b      	lsls	r3, r3, #6
 80175aa:	429a      	cmp	r2, r3
 80175ac:	d100      	bne.n	80175b0 <PCD_EP_ISR_Handler+0x240>
 80175ae:	e2d1      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	61bb      	str	r3, [r7, #24]
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2250      	movs	r2, #80	@ 0x50
 80175bc:	5a9b      	ldrh	r3, [r3, r2]
 80175be:	b29b      	uxth	r3, r3
 80175c0:	001a      	movs	r2, r3
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	189b      	adds	r3, r3, r2
 80175c6:	61bb      	str	r3, [r7, #24]
 80175c8:	69bb      	ldr	r3, [r7, #24]
 80175ca:	4a3a      	ldr	r2, [pc, #232]	@ (80176b4 <PCD_EP_ISR_Handler+0x344>)
 80175cc:	4694      	mov	ip, r2
 80175ce:	4463      	add	r3, ip
 80175d0:	617b      	str	r3, [r7, #20]
 80175d2:	697b      	ldr	r3, [r7, #20]
 80175d4:	881b      	ldrh	r3, [r3, #0]
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	059b      	lsls	r3, r3, #22
 80175da:	0d9b      	lsrs	r3, r3, #22
 80175dc:	b29a      	uxth	r2, r3
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	801a      	strh	r2, [r3, #0]
 80175e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e4:	691b      	ldr	r3, [r3, #16]
 80175e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80175e8:	d91a      	bls.n	8017620 <PCD_EP_ISR_Handler+0x2b0>
 80175ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ec:	691b      	ldr	r3, [r3, #16]
 80175ee:	095b      	lsrs	r3, r3, #5
 80175f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80175f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175f4:	691b      	ldr	r3, [r3, #16]
 80175f6:	221f      	movs	r2, #31
 80175f8:	4013      	ands	r3, r2
 80175fa:	d102      	bne.n	8017602 <PCD_EP_ISR_Handler+0x292>
 80175fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175fe:	3b01      	subs	r3, #1
 8017600:	647b      	str	r3, [r7, #68]	@ 0x44
 8017602:	697b      	ldr	r3, [r7, #20]
 8017604:	881b      	ldrh	r3, [r3, #0]
 8017606:	b29a      	uxth	r2, r3
 8017608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801760a:	b29b      	uxth	r3, r3
 801760c:	029b      	lsls	r3, r3, #10
 801760e:	b29b      	uxth	r3, r3
 8017610:	4313      	orrs	r3, r2
 8017612:	b29b      	uxth	r3, r3
 8017614:	4a25      	ldr	r2, [pc, #148]	@ (80176ac <PCD_EP_ISR_Handler+0x33c>)
 8017616:	4313      	orrs	r3, r2
 8017618:	b29a      	uxth	r2, r3
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	801a      	strh	r2, [r3, #0]
 801761e:	e023      	b.n	8017668 <PCD_EP_ISR_Handler+0x2f8>
 8017620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017622:	691b      	ldr	r3, [r3, #16]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d108      	bne.n	801763a <PCD_EP_ISR_Handler+0x2ca>
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	881b      	ldrh	r3, [r3, #0]
 801762c:	b29b      	uxth	r3, r3
 801762e:	4a1f      	ldr	r2, [pc, #124]	@ (80176ac <PCD_EP_ISR_Handler+0x33c>)
 8017630:	4313      	orrs	r3, r2
 8017632:	b29a      	uxth	r2, r3
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	801a      	strh	r2, [r3, #0]
 8017638:	e016      	b.n	8017668 <PCD_EP_ISR_Handler+0x2f8>
 801763a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801763c:	691b      	ldr	r3, [r3, #16]
 801763e:	085b      	lsrs	r3, r3, #1
 8017640:	647b      	str	r3, [r7, #68]	@ 0x44
 8017642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017644:	691b      	ldr	r3, [r3, #16]
 8017646:	2201      	movs	r2, #1
 8017648:	4013      	ands	r3, r2
 801764a:	d002      	beq.n	8017652 <PCD_EP_ISR_Handler+0x2e2>
 801764c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801764e:	3301      	adds	r3, #1
 8017650:	647b      	str	r3, [r7, #68]	@ 0x44
 8017652:	697b      	ldr	r3, [r7, #20]
 8017654:	881b      	ldrh	r3, [r3, #0]
 8017656:	b29a      	uxth	r2, r3
 8017658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801765a:	b29b      	uxth	r3, r3
 801765c:	029b      	lsls	r3, r3, #10
 801765e:	b29b      	uxth	r3, r3
 8017660:	4313      	orrs	r3, r2
 8017662:	b29a      	uxth	r2, r3
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	881b      	ldrh	r3, [r3, #0]
 801766e:	b29a      	uxth	r2, r3
 8017670:	2012      	movs	r0, #18
 8017672:	183b      	adds	r3, r7, r0
 8017674:	4911      	ldr	r1, [pc, #68]	@ (80176bc <PCD_EP_ISR_Handler+0x34c>)
 8017676:	400a      	ands	r2, r1
 8017678:	801a      	strh	r2, [r3, #0]
 801767a:	183b      	adds	r3, r7, r0
 801767c:	183a      	adds	r2, r7, r0
 801767e:	8812      	ldrh	r2, [r2, #0]
 8017680:	2180      	movs	r1, #128	@ 0x80
 8017682:	0149      	lsls	r1, r1, #5
 8017684:	404a      	eors	r2, r1
 8017686:	801a      	strh	r2, [r3, #0]
 8017688:	183b      	adds	r3, r7, r0
 801768a:	183a      	adds	r2, r7, r0
 801768c:	8812      	ldrh	r2, [r2, #0]
 801768e:	2180      	movs	r1, #128	@ 0x80
 8017690:	0189      	lsls	r1, r1, #6
 8017692:	404a      	eors	r2, r1
 8017694:	801a      	strh	r2, [r3, #0]
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	183a      	adds	r2, r7, r0
 801769c:	8812      	ldrh	r2, [r2, #0]
 801769e:	4908      	ldr	r1, [pc, #32]	@ (80176c0 <PCD_EP_ISR_Handler+0x350>)
 80176a0:	430a      	orrs	r2, r1
 80176a2:	b292      	uxth	r2, r2
 80176a4:	801a      	strh	r2, [r3, #0]
 80176a6:	e255      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
 80176a8:	ffff8f0f 	.word	0xffff8f0f
 80176ac:	ffff8000 	.word	0xffff8000
 80176b0:	00000402 	.word	0x00000402
 80176b4:	00000406 	.word	0x00000406
 80176b8:	00000f8f 	.word	0x00000f8f
 80176bc:	ffffbf8f 	.word	0xffffbf8f
 80176c0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	001a      	movs	r2, r3
 80176ca:	204d      	movs	r0, #77	@ 0x4d
 80176cc:	183b      	adds	r3, r7, r0
 80176ce:	781b      	ldrb	r3, [r3, #0]
 80176d0:	009b      	lsls	r3, r3, #2
 80176d2:	18d2      	adds	r2, r2, r3
 80176d4:	214a      	movs	r1, #74	@ 0x4a
 80176d6:	187b      	adds	r3, r7, r1
 80176d8:	8812      	ldrh	r2, [r2, #0]
 80176da:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80176dc:	187b      	adds	r3, r7, r1
 80176de:	2200      	movs	r2, #0
 80176e0:	5e9b      	ldrsh	r3, [r3, r2]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	db00      	blt.n	80176e8 <PCD_EP_ISR_Handler+0x378>
 80176e6:	e0fa      	b.n	80178de <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	001a      	movs	r2, r3
 80176ee:	183b      	adds	r3, r7, r0
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	18d3      	adds	r3, r2, r3
 80176f6:	881b      	ldrh	r3, [r3, #0]
 80176f8:	b29a      	uxth	r2, r3
 80176fa:	2448      	movs	r4, #72	@ 0x48
 80176fc:	193b      	adds	r3, r7, r4
 80176fe:	49d1      	ldr	r1, [pc, #836]	@ (8017a44 <PCD_EP_ISR_Handler+0x6d4>)
 8017700:	400a      	ands	r2, r1
 8017702:	801a      	strh	r2, [r3, #0]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	001a      	movs	r2, r3
 801770a:	183b      	adds	r3, r7, r0
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	009b      	lsls	r3, r3, #2
 8017710:	18d3      	adds	r3, r2, r3
 8017712:	193a      	adds	r2, r7, r4
 8017714:	8812      	ldrh	r2, [r2, #0]
 8017716:	2180      	movs	r1, #128	@ 0x80
 8017718:	430a      	orrs	r2, r1
 801771a:	b292      	uxth	r2, r2
 801771c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801771e:	183b      	adds	r3, r7, r0
 8017720:	781a      	ldrb	r2, [r3, #0]
 8017722:	0013      	movs	r3, r2
 8017724:	009b      	lsls	r3, r3, #2
 8017726:	189b      	adds	r3, r3, r2
 8017728:	00db      	lsls	r3, r3, #3
 801772a:	3369      	adds	r3, #105	@ 0x69
 801772c:	33ff      	adds	r3, #255	@ 0xff
 801772e:	687a      	ldr	r2, [r7, #4]
 8017730:	18d3      	adds	r3, r2, r3
 8017732:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8017734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017736:	7b1b      	ldrb	r3, [r3, #12]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d125      	bne.n	8017788 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2250      	movs	r2, #80	@ 0x50
 8017742:	5a9b      	ldrh	r3, [r3, r2]
 8017744:	b29b      	uxth	r3, r3
 8017746:	001a      	movs	r2, r3
 8017748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	00db      	lsls	r3, r3, #3
 801774e:	18d2      	adds	r2, r2, r3
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	18d3      	adds	r3, r2, r3
 8017756:	4abc      	ldr	r2, [pc, #752]	@ (8017a48 <PCD_EP_ISR_Handler+0x6d8>)
 8017758:	4694      	mov	ip, r2
 801775a:	4463      	add	r3, ip
 801775c:	881a      	ldrh	r2, [r3, #0]
 801775e:	2450      	movs	r4, #80	@ 0x50
 8017760:	193b      	adds	r3, r7, r4
 8017762:	0592      	lsls	r2, r2, #22
 8017764:	0d92      	lsrs	r2, r2, #22
 8017766:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8017768:	193b      	adds	r3, r7, r4
 801776a:	881b      	ldrh	r3, [r3, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d100      	bne.n	8017772 <PCD_EP_ISR_Handler+0x402>
 8017770:	e08d      	b.n	801788e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	6818      	ldr	r0, [r3, #0]
 8017776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017778:	6959      	ldr	r1, [r3, #20]
 801777a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801777c:	88da      	ldrh	r2, [r3, #6]
 801777e:	193b      	adds	r3, r7, r4
 8017780:	881b      	ldrh	r3, [r3, #0]
 8017782:	f007 f8d6 	bl	801e932 <USB_ReadPMA>
 8017786:	e082      	b.n	801788e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8017788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801778a:	78db      	ldrb	r3, [r3, #3]
 801778c:	2b02      	cmp	r3, #2
 801778e:	d10c      	bne.n	80177aa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8017790:	2350      	movs	r3, #80	@ 0x50
 8017792:	18fc      	adds	r4, r7, r3
 8017794:	234a      	movs	r3, #74	@ 0x4a
 8017796:	18fb      	adds	r3, r7, r3
 8017798:	881a      	ldrh	r2, [r3, #0]
 801779a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	0018      	movs	r0, r3
 80177a0:	f000 f9ec 	bl	8017b7c <HAL_PCD_EP_DB_Receive>
 80177a4:	0003      	movs	r3, r0
 80177a6:	8023      	strh	r3, [r4, #0]
 80177a8:	e071      	b.n	801788e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	001a      	movs	r2, r3
 80177b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	18d3      	adds	r3, r2, r3
 80177b8:	881b      	ldrh	r3, [r3, #0]
 80177ba:	b29a      	uxth	r2, r3
 80177bc:	2052      	movs	r0, #82	@ 0x52
 80177be:	183b      	adds	r3, r7, r0
 80177c0:	49a2      	ldr	r1, [pc, #648]	@ (8017a4c <PCD_EP_ISR_Handler+0x6dc>)
 80177c2:	400a      	ands	r2, r1
 80177c4:	801a      	strh	r2, [r3, #0]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	001a      	movs	r2, r3
 80177cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	009b      	lsls	r3, r3, #2
 80177d2:	18d3      	adds	r3, r2, r3
 80177d4:	183a      	adds	r2, r7, r0
 80177d6:	8812      	ldrh	r2, [r2, #0]
 80177d8:	499d      	ldr	r1, [pc, #628]	@ (8017a50 <PCD_EP_ISR_Handler+0x6e0>)
 80177da:	430a      	orrs	r2, r1
 80177dc:	b292      	uxth	r2, r2
 80177de:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	001a      	movs	r2, r3
 80177e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	18d3      	adds	r3, r2, r3
 80177ee:	881b      	ldrh	r3, [r3, #0]
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	001a      	movs	r2, r3
 80177f4:	2380      	movs	r3, #128	@ 0x80
 80177f6:	01db      	lsls	r3, r3, #7
 80177f8:	4013      	ands	r3, r2
 80177fa:	d024      	beq.n	8017846 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2250      	movs	r2, #80	@ 0x50
 8017802:	5a9b      	ldrh	r3, [r3, r2]
 8017804:	b29b      	uxth	r3, r3
 8017806:	001a      	movs	r2, r3
 8017808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	00db      	lsls	r3, r3, #3
 801780e:	18d2      	adds	r2, r2, r3
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	18d3      	adds	r3, r2, r3
 8017816:	4a8f      	ldr	r2, [pc, #572]	@ (8017a54 <PCD_EP_ISR_Handler+0x6e4>)
 8017818:	4694      	mov	ip, r2
 801781a:	4463      	add	r3, ip
 801781c:	881a      	ldrh	r2, [r3, #0]
 801781e:	2450      	movs	r4, #80	@ 0x50
 8017820:	193b      	adds	r3, r7, r4
 8017822:	0592      	lsls	r2, r2, #22
 8017824:	0d92      	lsrs	r2, r2, #22
 8017826:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8017828:	193b      	adds	r3, r7, r4
 801782a:	881b      	ldrh	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d02e      	beq.n	801788e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6818      	ldr	r0, [r3, #0]
 8017834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017836:	6959      	ldr	r1, [r3, #20]
 8017838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801783a:	891a      	ldrh	r2, [r3, #8]
 801783c:	193b      	adds	r3, r7, r4
 801783e:	881b      	ldrh	r3, [r3, #0]
 8017840:	f007 f877 	bl	801e932 <USB_ReadPMA>
 8017844:	e023      	b.n	801788e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2250      	movs	r2, #80	@ 0x50
 801784c:	5a9b      	ldrh	r3, [r3, r2]
 801784e:	b29b      	uxth	r3, r3
 8017850:	001a      	movs	r2, r3
 8017852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	00db      	lsls	r3, r3, #3
 8017858:	18d2      	adds	r2, r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	18d3      	adds	r3, r2, r3
 8017860:	4a79      	ldr	r2, [pc, #484]	@ (8017a48 <PCD_EP_ISR_Handler+0x6d8>)
 8017862:	4694      	mov	ip, r2
 8017864:	4463      	add	r3, ip
 8017866:	881a      	ldrh	r2, [r3, #0]
 8017868:	2450      	movs	r4, #80	@ 0x50
 801786a:	193b      	adds	r3, r7, r4
 801786c:	0592      	lsls	r2, r2, #22
 801786e:	0d92      	lsrs	r2, r2, #22
 8017870:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8017872:	193b      	adds	r3, r7, r4
 8017874:	881b      	ldrh	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d009      	beq.n	801788e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6818      	ldr	r0, [r3, #0]
 801787e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017880:	6959      	ldr	r1, [r3, #20]
 8017882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017884:	895a      	ldrh	r2, [r3, #10]
 8017886:	193b      	adds	r3, r7, r4
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	f007 f852 	bl	801e932 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801788e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017890:	69da      	ldr	r2, [r3, #28]
 8017892:	2150      	movs	r1, #80	@ 0x50
 8017894:	187b      	adds	r3, r7, r1
 8017896:	881b      	ldrh	r3, [r3, #0]
 8017898:	18d2      	adds	r2, r2, r3
 801789a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801789c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801789e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178a0:	695a      	ldr	r2, [r3, #20]
 80178a2:	187b      	adds	r3, r7, r1
 80178a4:	881b      	ldrh	r3, [r3, #0]
 80178a6:	18d2      	adds	r2, r2, r3
 80178a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80178ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178ae:	699b      	ldr	r3, [r3, #24]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d005      	beq.n	80178c0 <PCD_EP_ISR_Handler+0x550>
 80178b4:	187b      	adds	r3, r7, r1
 80178b6:	881a      	ldrh	r2, [r3, #0]
 80178b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178ba:	691b      	ldr	r3, [r3, #16]
 80178bc:	429a      	cmp	r2, r3
 80178be:	d207      	bcs.n	80178d0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80178c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178c2:	781a      	ldrb	r2, [r3, #0]
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	0011      	movs	r1, r2
 80178c8:	0018      	movs	r0, r3
 80178ca:	f009 f84c 	bl	8020966 <HAL_PCD_DataOutStageCallback>
 80178ce:	e006      	b.n	80178de <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80178d6:	0011      	movs	r1, r2
 80178d8:	0018      	movs	r0, r3
 80178da:	f005 fd6f 	bl	801d3bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80178de:	244a      	movs	r4, #74	@ 0x4a
 80178e0:	193b      	adds	r3, r7, r4
 80178e2:	881b      	ldrh	r3, [r3, #0]
 80178e4:	2280      	movs	r2, #128	@ 0x80
 80178e6:	4013      	ands	r3, r2
 80178e8:	d100      	bne.n	80178ec <PCD_EP_ISR_Handler+0x57c>
 80178ea:	e133      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80178ec:	204d      	movs	r0, #77	@ 0x4d
 80178ee:	183b      	adds	r3, r7, r0
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	1c5a      	adds	r2, r3, #1
 80178f4:	0013      	movs	r3, r2
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	189b      	adds	r3, r3, r2
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	687a      	ldr	r2, [r7, #4]
 80178fe:	18d3      	adds	r3, r2, r3
 8017900:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	001a      	movs	r2, r3
 8017908:	183b      	adds	r3, r7, r0
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	009b      	lsls	r3, r3, #2
 801790e:	18d3      	adds	r3, r2, r3
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	b29a      	uxth	r2, r3
 8017914:	2542      	movs	r5, #66	@ 0x42
 8017916:	197b      	adds	r3, r7, r5
 8017918:	494f      	ldr	r1, [pc, #316]	@ (8017a58 <PCD_EP_ISR_Handler+0x6e8>)
 801791a:	400a      	ands	r2, r1
 801791c:	801a      	strh	r2, [r3, #0]
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	001a      	movs	r2, r3
 8017924:	183b      	adds	r3, r7, r0
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	009b      	lsls	r3, r3, #2
 801792a:	18d3      	adds	r3, r2, r3
 801792c:	197a      	adds	r2, r7, r5
 801792e:	8812      	ldrh	r2, [r2, #0]
 8017930:	494a      	ldr	r1, [pc, #296]	@ (8017a5c <PCD_EP_ISR_Handler+0x6ec>)
 8017932:	430a      	orrs	r2, r1
 8017934:	b292      	uxth	r2, r2
 8017936:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8017938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801793a:	78db      	ldrb	r3, [r3, #3]
 801793c:	2b01      	cmp	r3, #1
 801793e:	d000      	beq.n	8017942 <PCD_EP_ISR_Handler+0x5d2>
 8017940:	e0af      	b.n	8017aa2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8017942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017944:	2200      	movs	r2, #0
 8017946:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8017948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801794a:	7b1b      	ldrb	r3, [r3, #12]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d100      	bne.n	8017952 <PCD_EP_ISR_Handler+0x5e2>
 8017950:	e09f      	b.n	8017a92 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017952:	193b      	adds	r3, r7, r4
 8017954:	881b      	ldrh	r3, [r3, #0]
 8017956:	2240      	movs	r2, #64	@ 0x40
 8017958:	4013      	ands	r3, r2
 801795a:	d046      	beq.n	80179ea <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801795c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801795e:	785b      	ldrb	r3, [r3, #1]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d125      	bne.n	80179b0 <PCD_EP_ISR_Handler+0x640>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	627b      	str	r3, [r7, #36]	@ 0x24
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2250      	movs	r2, #80	@ 0x50
 8017970:	5a9b      	ldrh	r3, [r3, r2]
 8017972:	b29b      	uxth	r3, r3
 8017974:	001a      	movs	r2, r3
 8017976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017978:	189b      	adds	r3, r3, r2
 801797a:	627b      	str	r3, [r7, #36]	@ 0x24
 801797c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801797e:	781b      	ldrb	r3, [r3, #0]
 8017980:	00da      	lsls	r2, r3, #3
 8017982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017984:	18d3      	adds	r3, r2, r3
 8017986:	4a33      	ldr	r2, [pc, #204]	@ (8017a54 <PCD_EP_ISR_Handler+0x6e4>)
 8017988:	4694      	mov	ip, r2
 801798a:	4463      	add	r3, ip
 801798c:	623b      	str	r3, [r7, #32]
 801798e:	6a3b      	ldr	r3, [r7, #32]
 8017990:	881b      	ldrh	r3, [r3, #0]
 8017992:	b29b      	uxth	r3, r3
 8017994:	059b      	lsls	r3, r3, #22
 8017996:	0d9b      	lsrs	r3, r3, #22
 8017998:	b29a      	uxth	r2, r3
 801799a:	6a3b      	ldr	r3, [r7, #32]
 801799c:	801a      	strh	r2, [r3, #0]
 801799e:	6a3b      	ldr	r3, [r7, #32]
 80179a0:	881b      	ldrh	r3, [r3, #0]
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	4a2d      	ldr	r2, [pc, #180]	@ (8017a5c <PCD_EP_ISR_Handler+0x6ec>)
 80179a6:	4313      	orrs	r3, r2
 80179a8:	b29a      	uxth	r2, r3
 80179aa:	6a3b      	ldr	r3, [r7, #32]
 80179ac:	801a      	strh	r2, [r3, #0]
 80179ae:	e070      	b.n	8017a92 <PCD_EP_ISR_Handler+0x722>
 80179b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179b2:	785b      	ldrb	r3, [r3, #1]
 80179b4:	2b01      	cmp	r3, #1
 80179b6:	d16c      	bne.n	8017a92 <PCD_EP_ISR_Handler+0x722>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	2250      	movs	r2, #80	@ 0x50
 80179c4:	5a9b      	ldrh	r3, [r3, r2]
 80179c6:	b29b      	uxth	r3, r3
 80179c8:	001a      	movs	r2, r3
 80179ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179cc:	189b      	adds	r3, r3, r2
 80179ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	00da      	lsls	r2, r3, #3
 80179d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179d8:	18d3      	adds	r3, r2, r3
 80179da:	4a1e      	ldr	r2, [pc, #120]	@ (8017a54 <PCD_EP_ISR_Handler+0x6e4>)
 80179dc:	4694      	mov	ip, r2
 80179de:	4463      	add	r3, ip
 80179e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80179e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179e4:	2200      	movs	r2, #0
 80179e6:	801a      	strh	r2, [r3, #0]
 80179e8:	e053      	b.n	8017a92 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80179f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179f2:	785b      	ldrb	r3, [r3, #1]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d133      	bne.n	8017a60 <PCD_EP_ISR_Handler+0x6f0>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	2250      	movs	r2, #80	@ 0x50
 8017a04:	5a9b      	ldrh	r3, [r3, r2]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	001a      	movs	r2, r3
 8017a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a0c:	189b      	adds	r3, r3, r2
 8017a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a12:	781b      	ldrb	r3, [r3, #0]
 8017a14:	00da      	lsls	r2, r3, #3
 8017a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a18:	18d3      	adds	r3, r2, r3
 8017a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8017a48 <PCD_EP_ISR_Handler+0x6d8>)
 8017a1c:	4694      	mov	ip, r2
 8017a1e:	4463      	add	r3, ip
 8017a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8017a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a24:	881b      	ldrh	r3, [r3, #0]
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	059b      	lsls	r3, r3, #22
 8017a2a:	0d9b      	lsrs	r3, r3, #22
 8017a2c:	b29a      	uxth	r2, r3
 8017a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a30:	801a      	strh	r2, [r3, #0]
 8017a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a34:	881b      	ldrh	r3, [r3, #0]
 8017a36:	b29b      	uxth	r3, r3
 8017a38:	4a08      	ldr	r2, [pc, #32]	@ (8017a5c <PCD_EP_ISR_Handler+0x6ec>)
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	b29a      	uxth	r2, r3
 8017a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a40:	801a      	strh	r2, [r3, #0]
 8017a42:	e026      	b.n	8017a92 <PCD_EP_ISR_Handler+0x722>
 8017a44:	00000f8f 	.word	0x00000f8f
 8017a48:	00000406 	.word	0x00000406
 8017a4c:	ffff8f8f 	.word	0xffff8f8f
 8017a50:	ffff80c0 	.word	0xffff80c0
 8017a54:	00000402 	.word	0x00000402
 8017a58:	ffff8f0f 	.word	0xffff8f0f
 8017a5c:	ffff8000 	.word	0xffff8000
 8017a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a62:	785b      	ldrb	r3, [r3, #1]
 8017a64:	2b01      	cmp	r3, #1
 8017a66:	d114      	bne.n	8017a92 <PCD_EP_ISR_Handler+0x722>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2250      	movs	r2, #80	@ 0x50
 8017a6e:	5a9b      	ldrh	r3, [r3, r2]
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	001a      	movs	r2, r3
 8017a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a76:	189b      	adds	r3, r3, r2
 8017a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a7c:	781b      	ldrb	r3, [r3, #0]
 8017a7e:	00da      	lsls	r2, r3, #3
 8017a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a82:	18d3      	adds	r3, r2, r3
 8017a84:	4a3b      	ldr	r2, [pc, #236]	@ (8017b74 <PCD_EP_ISR_Handler+0x804>)
 8017a86:	4694      	mov	ip, r2
 8017a88:	4463      	add	r3, ip
 8017a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a8e:	2200      	movs	r2, #0
 8017a90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a94:	781a      	ldrb	r2, [r3, #0]
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	0011      	movs	r1, r2
 8017a9a:	0018      	movs	r0, r3
 8017a9c:	f008 ff84 	bl	80209a8 <HAL_PCD_DataInStageCallback>
 8017aa0:	e058      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8017aa2:	234a      	movs	r3, #74	@ 0x4a
 8017aa4:	18fb      	adds	r3, r7, r3
 8017aa6:	881a      	ldrh	r2, [r3, #0]
 8017aa8:	2380      	movs	r3, #128	@ 0x80
 8017aaa:	005b      	lsls	r3, r3, #1
 8017aac:	4013      	ands	r3, r2
 8017aae:	d149      	bne.n	8017b44 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	2250      	movs	r2, #80	@ 0x50
 8017ab6:	5a9b      	ldrh	r3, [r3, r2]
 8017ab8:	b29b      	uxth	r3, r3
 8017aba:	001a      	movs	r2, r3
 8017abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	00db      	lsls	r3, r3, #3
 8017ac2:	18d2      	adds	r2, r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	18d3      	adds	r3, r2, r3
 8017aca:	4a2b      	ldr	r2, [pc, #172]	@ (8017b78 <PCD_EP_ISR_Handler+0x808>)
 8017acc:	4694      	mov	ip, r2
 8017ace:	4463      	add	r3, ip
 8017ad0:	881a      	ldrh	r2, [r3, #0]
 8017ad2:	2140      	movs	r1, #64	@ 0x40
 8017ad4:	187b      	adds	r3, r7, r1
 8017ad6:	0592      	lsls	r2, r2, #22
 8017ad8:	0d92      	lsrs	r2, r2, #22
 8017ada:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8017adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ade:	699a      	ldr	r2, [r3, #24]
 8017ae0:	187b      	adds	r3, r7, r1
 8017ae2:	881b      	ldrh	r3, [r3, #0]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d907      	bls.n	8017af8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8017ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017aea:	699a      	ldr	r2, [r3, #24]
 8017aec:	187b      	adds	r3, r7, r1
 8017aee:	881b      	ldrh	r3, [r3, #0]
 8017af0:	1ad2      	subs	r2, r2, r3
 8017af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017af4:	619a      	str	r2, [r3, #24]
 8017af6:	e002      	b.n	8017afe <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8017af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017afa:	2200      	movs	r2, #0
 8017afc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8017afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d107      	bne.n	8017b16 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b08:	781a      	ldrb	r2, [r3, #0]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	0011      	movs	r1, r2
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f008 ff4a 	bl	80209a8 <HAL_PCD_DataInStageCallback>
 8017b14:	e01e      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8017b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b18:	695a      	ldr	r2, [r3, #20]
 8017b1a:	2140      	movs	r1, #64	@ 0x40
 8017b1c:	187b      	adds	r3, r7, r1
 8017b1e:	881b      	ldrh	r3, [r3, #0]
 8017b20:	18d2      	adds	r2, r2, r3
 8017b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b24:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8017b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b28:	69da      	ldr	r2, [r3, #28]
 8017b2a:	187b      	adds	r3, r7, r1
 8017b2c:	881b      	ldrh	r3, [r3, #0]
 8017b2e:	18d2      	adds	r2, r2, r3
 8017b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b32:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017b3a:	0011      	movs	r1, r2
 8017b3c:	0018      	movs	r0, r3
 8017b3e:	f005 fc3d 	bl	801d3bc <USB_EPStartXfer>
 8017b42:	e007      	b.n	8017b54 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8017b44:	234a      	movs	r3, #74	@ 0x4a
 8017b46:	18fb      	adds	r3, r7, r3
 8017b48:	881a      	ldrh	r2, [r3, #0]
 8017b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	0018      	movs	r0, r3
 8017b50:	f000 f930 	bl	8017db4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2244      	movs	r2, #68	@ 0x44
 8017b5a:	5a9b      	ldrh	r3, [r3, r2]
 8017b5c:	b29b      	uxth	r3, r3
 8017b5e:	b21b      	sxth	r3, r3
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	da01      	bge.n	8017b68 <PCD_EP_ISR_Handler+0x7f8>
 8017b64:	f7ff fc0a 	bl	801737c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8017b68:	2300      	movs	r3, #0
}
 8017b6a:	0018      	movs	r0, r3
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	b016      	add	sp, #88	@ 0x58
 8017b70:	bdb0      	pop	{r4, r5, r7, pc}
 8017b72:	46c0      	nop			@ (mov r8, r8)
 8017b74:	00000406 	.word	0x00000406
 8017b78:	00000402 	.word	0x00000402

08017b7c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017b7c:	b590      	push	{r4, r7, lr}
 8017b7e:	b089      	sub	sp, #36	@ 0x24
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	60f8      	str	r0, [r7, #12]
 8017b84:	60b9      	str	r1, [r7, #8]
 8017b86:	1dbb      	adds	r3, r7, #6
 8017b88:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017b8a:	1dbb      	adds	r3, r7, #6
 8017b8c:	881a      	ldrh	r2, [r3, #0]
 8017b8e:	2380      	movs	r3, #128	@ 0x80
 8017b90:	01db      	lsls	r3, r3, #7
 8017b92:	4013      	ands	r3, r2
 8017b94:	d100      	bne.n	8017b98 <HAL_PCD_EP_DB_Receive+0x1c>
 8017b96:	e07d      	b.n	8017c94 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	2250      	movs	r2, #80	@ 0x50
 8017b9e:	5a9b      	ldrh	r3, [r3, r2]
 8017ba0:	b29b      	uxth	r3, r3
 8017ba2:	001a      	movs	r2, r3
 8017ba4:	68bb      	ldr	r3, [r7, #8]
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	00db      	lsls	r3, r3, #3
 8017baa:	18d2      	adds	r2, r2, r3
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	18d3      	adds	r3, r2, r3
 8017bb2:	4a7a      	ldr	r2, [pc, #488]	@ (8017d9c <HAL_PCD_EP_DB_Receive+0x220>)
 8017bb4:	4694      	mov	ip, r2
 8017bb6:	4463      	add	r3, ip
 8017bb8:	881a      	ldrh	r2, [r3, #0]
 8017bba:	211a      	movs	r1, #26
 8017bbc:	187b      	adds	r3, r7, r1
 8017bbe:	0592      	lsls	r2, r2, #22
 8017bc0:	0d92      	lsrs	r2, r2, #22
 8017bc2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	699a      	ldr	r2, [r3, #24]
 8017bc8:	187b      	adds	r3, r7, r1
 8017bca:	881b      	ldrh	r3, [r3, #0]
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d307      	bcc.n	8017be0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8017bd0:	68bb      	ldr	r3, [r7, #8]
 8017bd2:	699a      	ldr	r2, [r3, #24]
 8017bd4:	187b      	adds	r3, r7, r1
 8017bd6:	881b      	ldrh	r3, [r3, #0]
 8017bd8:	1ad2      	subs	r2, r2, r3
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	619a      	str	r2, [r3, #24]
 8017bde:	e002      	b.n	8017be6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	2200      	movs	r2, #0
 8017be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	699b      	ldr	r3, [r3, #24]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d121      	bne.n	8017c32 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	001a      	movs	r2, r3
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	18d3      	adds	r3, r2, r3
 8017bfc:	881b      	ldrh	r3, [r3, #0]
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	2018      	movs	r0, #24
 8017c02:	183b      	adds	r3, r7, r0
 8017c04:	4966      	ldr	r1, [pc, #408]	@ (8017da0 <HAL_PCD_EP_DB_Receive+0x224>)
 8017c06:	400a      	ands	r2, r1
 8017c08:	801a      	strh	r2, [r3, #0]
 8017c0a:	183b      	adds	r3, r7, r0
 8017c0c:	183a      	adds	r2, r7, r0
 8017c0e:	8812      	ldrh	r2, [r2, #0]
 8017c10:	2180      	movs	r1, #128	@ 0x80
 8017c12:	0189      	lsls	r1, r1, #6
 8017c14:	404a      	eors	r2, r1
 8017c16:	801a      	strh	r2, [r3, #0]
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	001a      	movs	r2, r3
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	009b      	lsls	r3, r3, #2
 8017c24:	18d3      	adds	r3, r2, r3
 8017c26:	183a      	adds	r2, r7, r0
 8017c28:	8812      	ldrh	r2, [r2, #0]
 8017c2a:	495e      	ldr	r1, [pc, #376]	@ (8017da4 <HAL_PCD_EP_DB_Receive+0x228>)
 8017c2c:	430a      	orrs	r2, r1
 8017c2e:	b292      	uxth	r2, r2
 8017c30:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017c32:	1dbb      	adds	r3, r7, #6
 8017c34:	881b      	ldrh	r3, [r3, #0]
 8017c36:	2240      	movs	r2, #64	@ 0x40
 8017c38:	4013      	ands	r3, r2
 8017c3a:	d01a      	beq.n	8017c72 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	001a      	movs	r2, r3
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	009b      	lsls	r3, r3, #2
 8017c48:	18d3      	adds	r3, r2, r3
 8017c4a:	881b      	ldrh	r3, [r3, #0]
 8017c4c:	b29a      	uxth	r2, r3
 8017c4e:	2016      	movs	r0, #22
 8017c50:	183b      	adds	r3, r7, r0
 8017c52:	4955      	ldr	r1, [pc, #340]	@ (8017da8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8017c54:	400a      	ands	r2, r1
 8017c56:	801a      	strh	r2, [r3, #0]
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	001a      	movs	r2, r3
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	781b      	ldrb	r3, [r3, #0]
 8017c62:	009b      	lsls	r3, r3, #2
 8017c64:	18d3      	adds	r3, r2, r3
 8017c66:	183a      	adds	r2, r7, r0
 8017c68:	8812      	ldrh	r2, [r2, #0]
 8017c6a:	4950      	ldr	r1, [pc, #320]	@ (8017dac <HAL_PCD_EP_DB_Receive+0x230>)
 8017c6c:	430a      	orrs	r2, r1
 8017c6e:	b292      	uxth	r2, r2
 8017c70:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017c72:	241a      	movs	r4, #26
 8017c74:	193b      	adds	r3, r7, r4
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d100      	bne.n	8017c7e <HAL_PCD_EP_DB_Receive+0x102>
 8017c7c:	e086      	b.n	8017d8c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	6818      	ldr	r0, [r3, #0]
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	6959      	ldr	r1, [r3, #20]
 8017c86:	68bb      	ldr	r3, [r7, #8]
 8017c88:	891a      	ldrh	r2, [r3, #8]
 8017c8a:	193b      	adds	r3, r7, r4
 8017c8c:	881b      	ldrh	r3, [r3, #0]
 8017c8e:	f006 fe50 	bl	801e932 <USB_ReadPMA>
 8017c92:	e07b      	b.n	8017d8c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2250      	movs	r2, #80	@ 0x50
 8017c9a:	5a9b      	ldrh	r3, [r3, r2]
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	001a      	movs	r2, r3
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	00db      	lsls	r3, r3, #3
 8017ca6:	18d2      	adds	r2, r2, r3
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	18d3      	adds	r3, r2, r3
 8017cae:	4a40      	ldr	r2, [pc, #256]	@ (8017db0 <HAL_PCD_EP_DB_Receive+0x234>)
 8017cb0:	4694      	mov	ip, r2
 8017cb2:	4463      	add	r3, ip
 8017cb4:	881a      	ldrh	r2, [r3, #0]
 8017cb6:	211a      	movs	r1, #26
 8017cb8:	187b      	adds	r3, r7, r1
 8017cba:	0592      	lsls	r2, r2, #22
 8017cbc:	0d92      	lsrs	r2, r2, #22
 8017cbe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	699a      	ldr	r2, [r3, #24]
 8017cc4:	187b      	adds	r3, r7, r1
 8017cc6:	881b      	ldrh	r3, [r3, #0]
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d307      	bcc.n	8017cdc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	699a      	ldr	r2, [r3, #24]
 8017cd0:	187b      	adds	r3, r7, r1
 8017cd2:	881b      	ldrh	r3, [r3, #0]
 8017cd4:	1ad2      	subs	r2, r2, r3
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	619a      	str	r2, [r3, #24]
 8017cda:	e002      	b.n	8017ce2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	699b      	ldr	r3, [r3, #24]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d121      	bne.n	8017d2e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	001a      	movs	r2, r3
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	009b      	lsls	r3, r3, #2
 8017cf6:	18d3      	adds	r3, r2, r3
 8017cf8:	881b      	ldrh	r3, [r3, #0]
 8017cfa:	b29a      	uxth	r2, r3
 8017cfc:	201e      	movs	r0, #30
 8017cfe:	183b      	adds	r3, r7, r0
 8017d00:	4927      	ldr	r1, [pc, #156]	@ (8017da0 <HAL_PCD_EP_DB_Receive+0x224>)
 8017d02:	400a      	ands	r2, r1
 8017d04:	801a      	strh	r2, [r3, #0]
 8017d06:	183b      	adds	r3, r7, r0
 8017d08:	183a      	adds	r2, r7, r0
 8017d0a:	8812      	ldrh	r2, [r2, #0]
 8017d0c:	2180      	movs	r1, #128	@ 0x80
 8017d0e:	0189      	lsls	r1, r1, #6
 8017d10:	404a      	eors	r2, r1
 8017d12:	801a      	strh	r2, [r3, #0]
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	001a      	movs	r2, r3
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	009b      	lsls	r3, r3, #2
 8017d20:	18d3      	adds	r3, r2, r3
 8017d22:	183a      	adds	r2, r7, r0
 8017d24:	8812      	ldrh	r2, [r2, #0]
 8017d26:	491f      	ldr	r1, [pc, #124]	@ (8017da4 <HAL_PCD_EP_DB_Receive+0x228>)
 8017d28:	430a      	orrs	r2, r1
 8017d2a:	b292      	uxth	r2, r2
 8017d2c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8017d2e:	1dbb      	adds	r3, r7, #6
 8017d30:	881b      	ldrh	r3, [r3, #0]
 8017d32:	2240      	movs	r2, #64	@ 0x40
 8017d34:	4013      	ands	r3, r2
 8017d36:	d11a      	bne.n	8017d6e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	001a      	movs	r2, r3
 8017d3e:	68bb      	ldr	r3, [r7, #8]
 8017d40:	781b      	ldrb	r3, [r3, #0]
 8017d42:	009b      	lsls	r3, r3, #2
 8017d44:	18d3      	adds	r3, r2, r3
 8017d46:	881b      	ldrh	r3, [r3, #0]
 8017d48:	b29a      	uxth	r2, r3
 8017d4a:	201c      	movs	r0, #28
 8017d4c:	183b      	adds	r3, r7, r0
 8017d4e:	4916      	ldr	r1, [pc, #88]	@ (8017da8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8017d50:	400a      	ands	r2, r1
 8017d52:	801a      	strh	r2, [r3, #0]
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	001a      	movs	r2, r3
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	781b      	ldrb	r3, [r3, #0]
 8017d5e:	009b      	lsls	r3, r3, #2
 8017d60:	18d3      	adds	r3, r2, r3
 8017d62:	183a      	adds	r2, r7, r0
 8017d64:	8812      	ldrh	r2, [r2, #0]
 8017d66:	4911      	ldr	r1, [pc, #68]	@ (8017dac <HAL_PCD_EP_DB_Receive+0x230>)
 8017d68:	430a      	orrs	r2, r1
 8017d6a:	b292      	uxth	r2, r2
 8017d6c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017d6e:	241a      	movs	r4, #26
 8017d70:	193b      	adds	r3, r7, r4
 8017d72:	881b      	ldrh	r3, [r3, #0]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d009      	beq.n	8017d8c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6818      	ldr	r0, [r3, #0]
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	6959      	ldr	r1, [r3, #20]
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	895a      	ldrh	r2, [r3, #10]
 8017d84:	193b      	adds	r3, r7, r4
 8017d86:	881b      	ldrh	r3, [r3, #0]
 8017d88:	f006 fdd3 	bl	801e932 <USB_ReadPMA>
    }
  }

  return count;
 8017d8c:	231a      	movs	r3, #26
 8017d8e:	18fb      	adds	r3, r7, r3
 8017d90:	881b      	ldrh	r3, [r3, #0]
}
 8017d92:	0018      	movs	r0, r3
 8017d94:	46bd      	mov	sp, r7
 8017d96:	b009      	add	sp, #36	@ 0x24
 8017d98:	bd90      	pop	{r4, r7, pc}
 8017d9a:	46c0      	nop			@ (mov r8, r8)
 8017d9c:	00000402 	.word	0x00000402
 8017da0:	ffffbf8f 	.word	0xffffbf8f
 8017da4:	ffff8080 	.word	0xffff8080
 8017da8:	ffff8f8f 	.word	0xffff8f8f
 8017dac:	ffff80c0 	.word	0xffff80c0
 8017db0:	00000406 	.word	0x00000406

08017db4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b0a4      	sub	sp, #144	@ 0x90
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	60f8      	str	r0, [r7, #12]
 8017dbc:	60b9      	str	r1, [r7, #8]
 8017dbe:	1dbb      	adds	r3, r7, #6
 8017dc0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017dc2:	1dbb      	adds	r3, r7, #6
 8017dc4:	881b      	ldrh	r3, [r3, #0]
 8017dc6:	2240      	movs	r2, #64	@ 0x40
 8017dc8:	4013      	ands	r3, r2
 8017dca:	d100      	bne.n	8017dce <HAL_PCD_EP_DB_Transmit+0x1a>
 8017dcc:	e1e4      	b.n	8018198 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2250      	movs	r2, #80	@ 0x50
 8017dd4:	5a9b      	ldrh	r3, [r3, r2]
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	001a      	movs	r2, r3
 8017dda:	68bb      	ldr	r3, [r7, #8]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	00db      	lsls	r3, r3, #3
 8017de0:	18d2      	adds	r2, r2, r3
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	18d3      	adds	r3, r2, r3
 8017de8:	4ad0      	ldr	r2, [pc, #832]	@ (801812c <HAL_PCD_EP_DB_Transmit+0x378>)
 8017dea:	4694      	mov	ip, r2
 8017dec:	4463      	add	r3, ip
 8017dee:	881a      	ldrh	r2, [r3, #0]
 8017df0:	2186      	movs	r1, #134	@ 0x86
 8017df2:	187b      	adds	r3, r7, r1
 8017df4:	0592      	lsls	r2, r2, #22
 8017df6:	0d92      	lsrs	r2, r2, #22
 8017df8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	699a      	ldr	r2, [r3, #24]
 8017dfe:	187b      	adds	r3, r7, r1
 8017e00:	881b      	ldrh	r3, [r3, #0]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d907      	bls.n	8017e16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	699a      	ldr	r2, [r3, #24]
 8017e0a:	187b      	adds	r3, r7, r1
 8017e0c:	881b      	ldrh	r3, [r3, #0]
 8017e0e:	1ad2      	subs	r2, r2, r3
 8017e10:	68bb      	ldr	r3, [r7, #8]
 8017e12:	619a      	str	r2, [r3, #24]
 8017e14:	e002      	b.n	8017e1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	2200      	movs	r2, #0
 8017e1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	699b      	ldr	r3, [r3, #24]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d000      	beq.n	8017e26 <HAL_PCD_EP_DB_Transmit+0x72>
 8017e24:	e0b5      	b.n	8017f92 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	785b      	ldrb	r3, [r3, #1]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d125      	bne.n	8017e7a <HAL_PCD_EP_DB_Transmit+0xc6>
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2250      	movs	r2, #80	@ 0x50
 8017e3a:	5a9b      	ldrh	r3, [r3, r2]
 8017e3c:	b29b      	uxth	r3, r3
 8017e3e:	001a      	movs	r2, r3
 8017e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e42:	189b      	adds	r3, r3, r2
 8017e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e46:	68bb      	ldr	r3, [r7, #8]
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	00da      	lsls	r2, r3, #3
 8017e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e4e:	18d3      	adds	r3, r2, r3
 8017e50:	4ab6      	ldr	r2, [pc, #728]	@ (801812c <HAL_PCD_EP_DB_Transmit+0x378>)
 8017e52:	4694      	mov	ip, r2
 8017e54:	4463      	add	r3, ip
 8017e56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e5a:	881b      	ldrh	r3, [r3, #0]
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	059b      	lsls	r3, r3, #22
 8017e60:	0d9b      	lsrs	r3, r3, #22
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e66:	801a      	strh	r2, [r3, #0]
 8017e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e6a:	881b      	ldrh	r3, [r3, #0]
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	4ab0      	ldr	r2, [pc, #704]	@ (8018130 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017e70:	4313      	orrs	r3, r2
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e76:	801a      	strh	r2, [r3, #0]
 8017e78:	e01b      	b.n	8017eb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	785b      	ldrb	r3, [r3, #1]
 8017e7e:	2b01      	cmp	r3, #1
 8017e80:	d117      	bne.n	8017eb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2250      	movs	r2, #80	@ 0x50
 8017e8e:	5a9b      	ldrh	r3, [r3, r2]
 8017e90:	b29b      	uxth	r3, r3
 8017e92:	001a      	movs	r2, r3
 8017e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e96:	189b      	adds	r3, r3, r2
 8017e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	781b      	ldrb	r3, [r3, #0]
 8017e9e:	00da      	lsls	r2, r3, #3
 8017ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ea2:	18d3      	adds	r3, r2, r3
 8017ea4:	4aa1      	ldr	r2, [pc, #644]	@ (801812c <HAL_PCD_EP_DB_Transmit+0x378>)
 8017ea6:	4694      	mov	ip, r2
 8017ea8:	4463      	add	r3, ip
 8017eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8017eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eae:	2200      	movs	r2, #0
 8017eb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	785b      	ldrb	r3, [r3, #1]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d125      	bne.n	8017f0c <HAL_PCD_EP_DB_Transmit+0x158>
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	61fb      	str	r3, [r7, #28]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	2250      	movs	r2, #80	@ 0x50
 8017ecc:	5a9b      	ldrh	r3, [r3, r2]
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	001a      	movs	r2, r3
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	189b      	adds	r3, r3, r2
 8017ed6:	61fb      	str	r3, [r7, #28]
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	781b      	ldrb	r3, [r3, #0]
 8017edc:	00da      	lsls	r2, r3, #3
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	18d3      	adds	r3, r2, r3
 8017ee2:	4a94      	ldr	r2, [pc, #592]	@ (8018134 <HAL_PCD_EP_DB_Transmit+0x380>)
 8017ee4:	4694      	mov	ip, r2
 8017ee6:	4463      	add	r3, ip
 8017ee8:	61bb      	str	r3, [r7, #24]
 8017eea:	69bb      	ldr	r3, [r7, #24]
 8017eec:	881b      	ldrh	r3, [r3, #0]
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	059b      	lsls	r3, r3, #22
 8017ef2:	0d9b      	lsrs	r3, r3, #22
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	69bb      	ldr	r3, [r7, #24]
 8017ef8:	801a      	strh	r2, [r3, #0]
 8017efa:	69bb      	ldr	r3, [r7, #24]
 8017efc:	881b      	ldrh	r3, [r3, #0]
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	4a8b      	ldr	r2, [pc, #556]	@ (8018130 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017f02:	4313      	orrs	r3, r2
 8017f04:	b29a      	uxth	r2, r3
 8017f06:	69bb      	ldr	r3, [r7, #24]
 8017f08:	801a      	strh	r2, [r3, #0]
 8017f0a:	e018      	b.n	8017f3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f0c:	68bb      	ldr	r3, [r7, #8]
 8017f0e:	785b      	ldrb	r3, [r3, #1]
 8017f10:	2b01      	cmp	r3, #1
 8017f12:	d114      	bne.n	8017f3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	2250      	movs	r2, #80	@ 0x50
 8017f1a:	5a9b      	ldrh	r3, [r3, r2]
 8017f1c:	b29b      	uxth	r3, r3
 8017f1e:	001a      	movs	r2, r3
 8017f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f22:	189b      	adds	r3, r3, r2
 8017f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	781b      	ldrb	r3, [r3, #0]
 8017f2a:	00da      	lsls	r2, r3, #3
 8017f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f2e:	18d3      	adds	r3, r2, r3
 8017f30:	4a80      	ldr	r2, [pc, #512]	@ (8018134 <HAL_PCD_EP_DB_Transmit+0x380>)
 8017f32:	4694      	mov	ip, r2
 8017f34:	4463      	add	r3, ip
 8017f36:	623b      	str	r3, [r7, #32]
 8017f38:	6a3b      	ldr	r3, [r7, #32]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	781a      	ldrb	r2, [r3, #0]
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	0011      	movs	r1, r2
 8017f46:	0018      	movs	r0, r3
 8017f48:	f008 fd2e 	bl	80209a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017f4c:	1dbb      	adds	r3, r7, #6
 8017f4e:	881a      	ldrh	r2, [r3, #0]
 8017f50:	2380      	movs	r3, #128	@ 0x80
 8017f52:	01db      	lsls	r3, r3, #7
 8017f54:	4013      	ands	r3, r2
 8017f56:	d100      	bne.n	8017f5a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8017f58:	e309      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	001a      	movs	r2, r3
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	009b      	lsls	r3, r3, #2
 8017f66:	18d3      	adds	r3, r2, r3
 8017f68:	881b      	ldrh	r3, [r3, #0]
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	2016      	movs	r0, #22
 8017f6e:	183b      	adds	r3, r7, r0
 8017f70:	4971      	ldr	r1, [pc, #452]	@ (8018138 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017f72:	400a      	ands	r2, r1
 8017f74:	801a      	strh	r2, [r3, #0]
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	001a      	movs	r2, r3
 8017f7c:	68bb      	ldr	r3, [r7, #8]
 8017f7e:	781b      	ldrb	r3, [r3, #0]
 8017f80:	009b      	lsls	r3, r3, #2
 8017f82:	18d3      	adds	r3, r2, r3
 8017f84:	183a      	adds	r2, r7, r0
 8017f86:	8812      	ldrh	r2, [r2, #0]
 8017f88:	496c      	ldr	r1, [pc, #432]	@ (801813c <HAL_PCD_EP_DB_Transmit+0x388>)
 8017f8a:	430a      	orrs	r2, r1
 8017f8c:	b292      	uxth	r2, r2
 8017f8e:	801a      	strh	r2, [r3, #0]
 8017f90:	e2ed      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017f92:	1dbb      	adds	r3, r7, #6
 8017f94:	881a      	ldrh	r2, [r3, #0]
 8017f96:	2380      	movs	r3, #128	@ 0x80
 8017f98:	01db      	lsls	r3, r3, #7
 8017f9a:	4013      	ands	r3, r2
 8017f9c:	d01a      	beq.n	8017fd4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	001a      	movs	r2, r3
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	781b      	ldrb	r3, [r3, #0]
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	18d3      	adds	r3, r2, r3
 8017fac:	881b      	ldrh	r3, [r3, #0]
 8017fae:	b29a      	uxth	r2, r3
 8017fb0:	208a      	movs	r0, #138	@ 0x8a
 8017fb2:	183b      	adds	r3, r7, r0
 8017fb4:	4960      	ldr	r1, [pc, #384]	@ (8018138 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017fb6:	400a      	ands	r2, r1
 8017fb8:	801a      	strh	r2, [r3, #0]
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	001a      	movs	r2, r3
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	009b      	lsls	r3, r3, #2
 8017fc6:	18d3      	adds	r3, r2, r3
 8017fc8:	183a      	adds	r2, r7, r0
 8017fca:	8812      	ldrh	r2, [r2, #0]
 8017fcc:	495b      	ldr	r1, [pc, #364]	@ (801813c <HAL_PCD_EP_DB_Transmit+0x388>)
 8017fce:	430a      	orrs	r2, r1
 8017fd0:	b292      	uxth	r2, r2
 8017fd2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	2224      	movs	r2, #36	@ 0x24
 8017fd8:	5c9b      	ldrb	r3, [r3, r2]
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d000      	beq.n	8017fe0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8017fde:	e2c6      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	695a      	ldr	r2, [r3, #20]
 8017fe4:	2186      	movs	r1, #134	@ 0x86
 8017fe6:	187b      	adds	r3, r7, r1
 8017fe8:	881b      	ldrh	r3, [r3, #0]
 8017fea:	18d2      	adds	r2, r2, r3
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	69da      	ldr	r2, [r3, #28]
 8017ff4:	187b      	adds	r3, r7, r1
 8017ff6:	881b      	ldrh	r3, [r3, #0]
 8017ff8:	18d2      	adds	r2, r2, r3
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	6a1a      	ldr	r2, [r3, #32]
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	429a      	cmp	r2, r3
 8018008:	d30c      	bcc.n	8018024 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	691b      	ldr	r3, [r3, #16]
 801800e:	218c      	movs	r1, #140	@ 0x8c
 8018010:	187a      	adds	r2, r7, r1
 8018012:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	6a1a      	ldr	r2, [r3, #32]
 8018018:	187b      	adds	r3, r7, r1
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	1ad2      	subs	r2, r2, r3
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	621a      	str	r2, [r3, #32]
 8018022:	e01a      	b.n	801805a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8018024:	68bb      	ldr	r3, [r7, #8]
 8018026:	6a1b      	ldr	r3, [r3, #32]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d10a      	bne.n	8018042 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801802c:	2386      	movs	r3, #134	@ 0x86
 801802e:	18fb      	adds	r3, r7, r3
 8018030:	881b      	ldrh	r3, [r3, #0]
 8018032:	228c      	movs	r2, #140	@ 0x8c
 8018034:	18ba      	adds	r2, r7, r2
 8018036:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	2224      	movs	r2, #36	@ 0x24
 801803c:	2100      	movs	r1, #0
 801803e:	5499      	strb	r1, [r3, r2]
 8018040:	e00b      	b.n	801805a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	2224      	movs	r2, #36	@ 0x24
 8018046:	2100      	movs	r1, #0
 8018048:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	6a1b      	ldr	r3, [r3, #32]
 801804e:	228c      	movs	r2, #140	@ 0x8c
 8018050:	18ba      	adds	r2, r7, r2
 8018052:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	2200      	movs	r2, #0
 8018058:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	785b      	ldrb	r3, [r3, #1]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d000      	beq.n	8018064 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8018062:	e06d      	b.n	8018140 <HAL_PCD_EP_DB_Transmit+0x38c>
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	2250      	movs	r2, #80	@ 0x50
 8018070:	5a9b      	ldrh	r3, [r3, r2]
 8018072:	b29b      	uxth	r3, r3
 8018074:	001a      	movs	r2, r3
 8018076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018078:	189b      	adds	r3, r3, r2
 801807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	00da      	lsls	r2, r3, #3
 8018082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018084:	18d3      	adds	r3, r2, r3
 8018086:	4a29      	ldr	r2, [pc, #164]	@ (801812c <HAL_PCD_EP_DB_Transmit+0x378>)
 8018088:	4694      	mov	ip, r2
 801808a:	4463      	add	r3, ip
 801808c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018090:	881b      	ldrh	r3, [r3, #0]
 8018092:	b29b      	uxth	r3, r3
 8018094:	059b      	lsls	r3, r3, #22
 8018096:	0d9b      	lsrs	r3, r3, #22
 8018098:	b29a      	uxth	r2, r3
 801809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801809c:	801a      	strh	r2, [r3, #0]
 801809e:	228c      	movs	r2, #140	@ 0x8c
 80180a0:	18bb      	adds	r3, r7, r2
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80180a6:	d91a      	bls.n	80180de <HAL_PCD_EP_DB_Transmit+0x32a>
 80180a8:	18bb      	adds	r3, r7, r2
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	095b      	lsrs	r3, r3, #5
 80180ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80180b0:	18bb      	adds	r3, r7, r2
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	221f      	movs	r2, #31
 80180b6:	4013      	ands	r3, r2
 80180b8:	d102      	bne.n	80180c0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80180ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80180bc:	3b01      	subs	r3, #1
 80180be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80180c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180c2:	881b      	ldrh	r3, [r3, #0]
 80180c4:	b29a      	uxth	r2, r3
 80180c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	029b      	lsls	r3, r3, #10
 80180cc:	b29b      	uxth	r3, r3
 80180ce:	4313      	orrs	r3, r2
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	4a17      	ldr	r2, [pc, #92]	@ (8018130 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80180d4:	4313      	orrs	r3, r2
 80180d6:	b29a      	uxth	r2, r3
 80180d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180da:	801a      	strh	r2, [r3, #0]
 80180dc:	e04f      	b.n	801817e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80180de:	238c      	movs	r3, #140	@ 0x8c
 80180e0:	18fb      	adds	r3, r7, r3
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d108      	bne.n	80180fa <HAL_PCD_EP_DB_Transmit+0x346>
 80180e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180ea:	881b      	ldrh	r3, [r3, #0]
 80180ec:	b29b      	uxth	r3, r3
 80180ee:	4a10      	ldr	r2, [pc, #64]	@ (8018130 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80180f0:	4313      	orrs	r3, r2
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180f6:	801a      	strh	r2, [r3, #0]
 80180f8:	e041      	b.n	801817e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80180fa:	228c      	movs	r2, #140	@ 0x8c
 80180fc:	18bb      	adds	r3, r7, r2
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	085b      	lsrs	r3, r3, #1
 8018102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018104:	18bb      	adds	r3, r7, r2
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	2201      	movs	r2, #1
 801810a:	4013      	ands	r3, r2
 801810c:	d002      	beq.n	8018114 <HAL_PCD_EP_DB_Transmit+0x360>
 801810e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018110:	3301      	adds	r3, #1
 8018112:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018116:	881b      	ldrh	r3, [r3, #0]
 8018118:	b29a      	uxth	r2, r3
 801811a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801811c:	b29b      	uxth	r3, r3
 801811e:	029b      	lsls	r3, r3, #10
 8018120:	b29b      	uxth	r3, r3
 8018122:	4313      	orrs	r3, r2
 8018124:	b29a      	uxth	r2, r3
 8018126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018128:	801a      	strh	r2, [r3, #0]
 801812a:	e028      	b.n	801817e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801812c:	00000402 	.word	0x00000402
 8018130:	ffff8000 	.word	0xffff8000
 8018134:	00000406 	.word	0x00000406
 8018138:	ffff8f8f 	.word	0xffff8f8f
 801813c:	ffffc080 	.word	0xffffc080
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	785b      	ldrb	r3, [r3, #1]
 8018144:	2b01      	cmp	r3, #1
 8018146:	d11a      	bne.n	801817e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	647b      	str	r3, [r7, #68]	@ 0x44
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	2250      	movs	r2, #80	@ 0x50
 8018154:	5a9b      	ldrh	r3, [r3, r2]
 8018156:	b29b      	uxth	r3, r3
 8018158:	001a      	movs	r2, r3
 801815a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801815c:	189b      	adds	r3, r3, r2
 801815e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	781b      	ldrb	r3, [r3, #0]
 8018164:	00da      	lsls	r2, r3, #3
 8018166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018168:	18d3      	adds	r3, r2, r3
 801816a:	4adb      	ldr	r2, [pc, #876]	@ (80184d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801816c:	4694      	mov	ip, r2
 801816e:	4463      	add	r3, ip
 8018170:	643b      	str	r3, [r7, #64]	@ 0x40
 8018172:	238c      	movs	r3, #140	@ 0x8c
 8018174:	18fb      	adds	r3, r7, r3
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	b29a      	uxth	r2, r3
 801817a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801817c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	6818      	ldr	r0, [r3, #0]
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	6959      	ldr	r1, [r3, #20]
 8018186:	68bb      	ldr	r3, [r7, #8]
 8018188:	891a      	ldrh	r2, [r3, #8]
 801818a:	238c      	movs	r3, #140	@ 0x8c
 801818c:	18fb      	adds	r3, r7, r3
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	b29b      	uxth	r3, r3
 8018192:	f006 fb85 	bl	801e8a0 <USB_WritePMA>
 8018196:	e1ea      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	2250      	movs	r2, #80	@ 0x50
 801819e:	5a9b      	ldrh	r3, [r3, r2]
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	001a      	movs	r2, r3
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	781b      	ldrb	r3, [r3, #0]
 80181a8:	00db      	lsls	r3, r3, #3
 80181aa:	18d2      	adds	r2, r2, r3
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	18d3      	adds	r3, r2, r3
 80181b2:	4aca      	ldr	r2, [pc, #808]	@ (80184dc <HAL_PCD_EP_DB_Transmit+0x728>)
 80181b4:	4694      	mov	ip, r2
 80181b6:	4463      	add	r3, ip
 80181b8:	881a      	ldrh	r2, [r3, #0]
 80181ba:	2186      	movs	r1, #134	@ 0x86
 80181bc:	187b      	adds	r3, r7, r1
 80181be:	0592      	lsls	r2, r2, #22
 80181c0:	0d92      	lsrs	r2, r2, #22
 80181c2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	699a      	ldr	r2, [r3, #24]
 80181c8:	187b      	adds	r3, r7, r1
 80181ca:	881b      	ldrh	r3, [r3, #0]
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d307      	bcc.n	80181e0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	699a      	ldr	r2, [r3, #24]
 80181d4:	187b      	adds	r3, r7, r1
 80181d6:	881b      	ldrh	r3, [r3, #0]
 80181d8:	1ad2      	subs	r2, r2, r3
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	619a      	str	r2, [r3, #24]
 80181de:	e002      	b.n	80181e6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	2200      	movs	r2, #0
 80181e4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	699b      	ldr	r3, [r3, #24]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d000      	beq.n	80181f0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80181ee:	e0bb      	b.n	8018368 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	785b      	ldrb	r3, [r3, #1]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d125      	bne.n	8018244 <HAL_PCD_EP_DB_Transmit+0x490>
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2250      	movs	r2, #80	@ 0x50
 8018204:	5a9b      	ldrh	r3, [r3, r2]
 8018206:	b29b      	uxth	r3, r3
 8018208:	001a      	movs	r2, r3
 801820a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801820c:	189b      	adds	r3, r3, r2
 801820e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	00da      	lsls	r2, r3, #3
 8018216:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018218:	18d3      	adds	r3, r2, r3
 801821a:	4aaf      	ldr	r2, [pc, #700]	@ (80184d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801821c:	4694      	mov	ip, r2
 801821e:	4463      	add	r3, ip
 8018220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8018222:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018224:	881b      	ldrh	r3, [r3, #0]
 8018226:	b29b      	uxth	r3, r3
 8018228:	059b      	lsls	r3, r3, #22
 801822a:	0d9b      	lsrs	r3, r3, #22
 801822c:	b29a      	uxth	r2, r3
 801822e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018230:	801a      	strh	r2, [r3, #0]
 8018232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018234:	881b      	ldrh	r3, [r3, #0]
 8018236:	b29b      	uxth	r3, r3
 8018238:	4aa9      	ldr	r2, [pc, #676]	@ (80184e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801823a:	4313      	orrs	r3, r2
 801823c:	b29a      	uxth	r2, r3
 801823e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018240:	801a      	strh	r2, [r3, #0]
 8018242:	e01b      	b.n	801827c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	785b      	ldrb	r3, [r3, #1]
 8018248:	2b01      	cmp	r3, #1
 801824a:	d117      	bne.n	801827c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	667b      	str	r3, [r7, #100]	@ 0x64
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	2250      	movs	r2, #80	@ 0x50
 8018258:	5a9b      	ldrh	r3, [r3, r2]
 801825a:	b29b      	uxth	r3, r3
 801825c:	001a      	movs	r2, r3
 801825e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018260:	189b      	adds	r3, r3, r2
 8018262:	667b      	str	r3, [r7, #100]	@ 0x64
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	781b      	ldrb	r3, [r3, #0]
 8018268:	00da      	lsls	r2, r3, #3
 801826a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801826c:	18d3      	adds	r3, r2, r3
 801826e:	4a9a      	ldr	r2, [pc, #616]	@ (80184d8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8018270:	4694      	mov	ip, r2
 8018272:	4463      	add	r3, ip
 8018274:	663b      	str	r3, [r7, #96]	@ 0x60
 8018276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018278:	2200      	movs	r2, #0
 801827a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	677b      	str	r3, [r7, #116]	@ 0x74
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	785b      	ldrb	r3, [r3, #1]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d12b      	bne.n	80182e2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2250      	movs	r2, #80	@ 0x50
 8018296:	5a9b      	ldrh	r3, [r3, r2]
 8018298:	b29b      	uxth	r3, r3
 801829a:	001a      	movs	r2, r3
 801829c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801829e:	189b      	adds	r3, r3, r2
 80182a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	00da      	lsls	r2, r3, #3
 80182a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182aa:	18d3      	adds	r3, r2, r3
 80182ac:	4a8b      	ldr	r2, [pc, #556]	@ (80184dc <HAL_PCD_EP_DB_Transmit+0x728>)
 80182ae:	4694      	mov	ip, r2
 80182b0:	4463      	add	r3, ip
 80182b2:	2180      	movs	r1, #128	@ 0x80
 80182b4:	187a      	adds	r2, r7, r1
 80182b6:	6013      	str	r3, [r2, #0]
 80182b8:	187b      	adds	r3, r7, r1
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	059b      	lsls	r3, r3, #22
 80182c2:	0d9b      	lsrs	r3, r3, #22
 80182c4:	b29a      	uxth	r2, r3
 80182c6:	187b      	adds	r3, r7, r1
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	801a      	strh	r2, [r3, #0]
 80182cc:	187b      	adds	r3, r7, r1
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	881b      	ldrh	r3, [r3, #0]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	4a82      	ldr	r2, [pc, #520]	@ (80184e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80182d6:	4313      	orrs	r3, r2
 80182d8:	b29a      	uxth	r2, r3
 80182da:	187b      	adds	r3, r7, r1
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	801a      	strh	r2, [r3, #0]
 80182e0:	e018      	b.n	8018314 <HAL_PCD_EP_DB_Transmit+0x560>
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	785b      	ldrb	r3, [r3, #1]
 80182e6:	2b01      	cmp	r3, #1
 80182e8:	d114      	bne.n	8018314 <HAL_PCD_EP_DB_Transmit+0x560>
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	2250      	movs	r2, #80	@ 0x50
 80182f0:	5a9b      	ldrh	r3, [r3, r2]
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	001a      	movs	r2, r3
 80182f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80182f8:	189b      	adds	r3, r3, r2
 80182fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	781b      	ldrb	r3, [r3, #0]
 8018300:	00da      	lsls	r2, r3, #3
 8018302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018304:	18d3      	adds	r3, r2, r3
 8018306:	4a75      	ldr	r2, [pc, #468]	@ (80184dc <HAL_PCD_EP_DB_Transmit+0x728>)
 8018308:	4694      	mov	ip, r2
 801830a:	4463      	add	r3, ip
 801830c:	673b      	str	r3, [r7, #112]	@ 0x70
 801830e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018310:	2200      	movs	r2, #0
 8018312:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018314:	68bb      	ldr	r3, [r7, #8]
 8018316:	781a      	ldrb	r2, [r3, #0]
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	0011      	movs	r1, r2
 801831c:	0018      	movs	r0, r3
 801831e:	f008 fb43 	bl	80209a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8018322:	1dbb      	adds	r3, r7, #6
 8018324:	881a      	ldrh	r2, [r3, #0]
 8018326:	2380      	movs	r3, #128	@ 0x80
 8018328:	01db      	lsls	r3, r3, #7
 801832a:	4013      	ands	r3, r2
 801832c:	d000      	beq.n	8018330 <HAL_PCD_EP_DB_Transmit+0x57c>
 801832e:	e11e      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	001a      	movs	r2, r3
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	009b      	lsls	r3, r3, #2
 801833c:	18d3      	adds	r3, r2, r3
 801833e:	881b      	ldrh	r3, [r3, #0]
 8018340:	b29a      	uxth	r2, r3
 8018342:	2088      	movs	r0, #136	@ 0x88
 8018344:	183b      	adds	r3, r7, r0
 8018346:	4967      	ldr	r1, [pc, #412]	@ (80184e4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8018348:	400a      	ands	r2, r1
 801834a:	801a      	strh	r2, [r3, #0]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	001a      	movs	r2, r3
 8018352:	68bb      	ldr	r3, [r7, #8]
 8018354:	781b      	ldrb	r3, [r3, #0]
 8018356:	009b      	lsls	r3, r3, #2
 8018358:	18d3      	adds	r3, r2, r3
 801835a:	183a      	adds	r2, r7, r0
 801835c:	8812      	ldrh	r2, [r2, #0]
 801835e:	4962      	ldr	r1, [pc, #392]	@ (80184e8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8018360:	430a      	orrs	r2, r1
 8018362:	b292      	uxth	r2, r2
 8018364:	801a      	strh	r2, [r3, #0]
 8018366:	e102      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8018368:	1dbb      	adds	r3, r7, #6
 801836a:	881a      	ldrh	r2, [r3, #0]
 801836c:	2380      	movs	r3, #128	@ 0x80
 801836e:	01db      	lsls	r3, r3, #7
 8018370:	4013      	ands	r3, r2
 8018372:	d11a      	bne.n	80183aa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	001a      	movs	r2, r3
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	009b      	lsls	r3, r3, #2
 8018380:	18d3      	adds	r3, r2, r3
 8018382:	881b      	ldrh	r3, [r3, #0]
 8018384:	b29a      	uxth	r2, r3
 8018386:	204e      	movs	r0, #78	@ 0x4e
 8018388:	183b      	adds	r3, r7, r0
 801838a:	4956      	ldr	r1, [pc, #344]	@ (80184e4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801838c:	400a      	ands	r2, r1
 801838e:	801a      	strh	r2, [r3, #0]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	001a      	movs	r2, r3
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	781b      	ldrb	r3, [r3, #0]
 801839a:	009b      	lsls	r3, r3, #2
 801839c:	18d3      	adds	r3, r2, r3
 801839e:	183a      	adds	r2, r7, r0
 80183a0:	8812      	ldrh	r2, [r2, #0]
 80183a2:	4951      	ldr	r1, [pc, #324]	@ (80184e8 <HAL_PCD_EP_DB_Transmit+0x734>)
 80183a4:	430a      	orrs	r2, r1
 80183a6:	b292      	uxth	r2, r2
 80183a8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	2224      	movs	r2, #36	@ 0x24
 80183ae:	5c9b      	ldrb	r3, [r3, r2]
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	d000      	beq.n	80183b6 <HAL_PCD_EP_DB_Transmit+0x602>
 80183b4:	e0db      	b.n	801856e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	695a      	ldr	r2, [r3, #20]
 80183ba:	2186      	movs	r1, #134	@ 0x86
 80183bc:	187b      	adds	r3, r7, r1
 80183be:	881b      	ldrh	r3, [r3, #0]
 80183c0:	18d2      	adds	r2, r2, r3
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	69da      	ldr	r2, [r3, #28]
 80183ca:	187b      	adds	r3, r7, r1
 80183cc:	881b      	ldrh	r3, [r3, #0]
 80183ce:	18d2      	adds	r2, r2, r3
 80183d0:	68bb      	ldr	r3, [r7, #8]
 80183d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	6a1a      	ldr	r2, [r3, #32]
 80183d8:	68bb      	ldr	r3, [r7, #8]
 80183da:	691b      	ldr	r3, [r3, #16]
 80183dc:	429a      	cmp	r2, r3
 80183de:	d30c      	bcc.n	80183fa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	691b      	ldr	r3, [r3, #16]
 80183e4:	218c      	movs	r1, #140	@ 0x8c
 80183e6:	187a      	adds	r2, r7, r1
 80183e8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	6a1a      	ldr	r2, [r3, #32]
 80183ee:	187b      	adds	r3, r7, r1
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	1ad2      	subs	r2, r2, r3
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	621a      	str	r2, [r3, #32]
 80183f8:	e01a      	b.n	8018430 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	6a1b      	ldr	r3, [r3, #32]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d10a      	bne.n	8018418 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8018402:	2386      	movs	r3, #134	@ 0x86
 8018404:	18fb      	adds	r3, r7, r3
 8018406:	881b      	ldrh	r3, [r3, #0]
 8018408:	228c      	movs	r2, #140	@ 0x8c
 801840a:	18ba      	adds	r2, r7, r2
 801840c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	2224      	movs	r2, #36	@ 0x24
 8018412:	2100      	movs	r1, #0
 8018414:	5499      	strb	r1, [r3, r2]
 8018416:	e00b      	b.n	8018430 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	6a1b      	ldr	r3, [r3, #32]
 801841c:	228c      	movs	r2, #140	@ 0x8c
 801841e:	18ba      	adds	r2, r7, r2
 8018420:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	2200      	movs	r2, #0
 8018426:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	2224      	movs	r2, #36	@ 0x24
 801842c:	2100      	movs	r1, #0
 801842e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	657b      	str	r3, [r7, #84]	@ 0x54
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	785b      	ldrb	r3, [r3, #1]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d000      	beq.n	8018440 <HAL_PCD_EP_DB_Transmit+0x68c>
 801843e:	e06e      	b.n	801851e <HAL_PCD_EP_DB_Transmit+0x76a>
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	2250      	movs	r2, #80	@ 0x50
 801844c:	5a9b      	ldrh	r3, [r3, r2]
 801844e:	b29b      	uxth	r3, r3
 8018450:	001a      	movs	r2, r3
 8018452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018454:	189b      	adds	r3, r3, r2
 8018456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	00da      	lsls	r2, r3, #3
 801845e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018460:	18d3      	adds	r3, r2, r3
 8018462:	4a1e      	ldr	r2, [pc, #120]	@ (80184dc <HAL_PCD_EP_DB_Transmit+0x728>)
 8018464:	4694      	mov	ip, r2
 8018466:	4463      	add	r3, ip
 8018468:	65bb      	str	r3, [r7, #88]	@ 0x58
 801846a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801846c:	881b      	ldrh	r3, [r3, #0]
 801846e:	b29b      	uxth	r3, r3
 8018470:	059b      	lsls	r3, r3, #22
 8018472:	0d9b      	lsrs	r3, r3, #22
 8018474:	b29a      	uxth	r2, r3
 8018476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018478:	801a      	strh	r2, [r3, #0]
 801847a:	228c      	movs	r2, #140	@ 0x8c
 801847c:	18bb      	adds	r3, r7, r2
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2b3e      	cmp	r3, #62	@ 0x3e
 8018482:	d91a      	bls.n	80184ba <HAL_PCD_EP_DB_Transmit+0x706>
 8018484:	18bb      	adds	r3, r7, r2
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	095b      	lsrs	r3, r3, #5
 801848a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801848c:	18bb      	adds	r3, r7, r2
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	221f      	movs	r2, #31
 8018492:	4013      	ands	r3, r2
 8018494:	d102      	bne.n	801849c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8018496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018498:	3b01      	subs	r3, #1
 801849a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801849c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801849e:	881b      	ldrh	r3, [r3, #0]
 80184a0:	b29a      	uxth	r2, r3
 80184a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	029b      	lsls	r3, r3, #10
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	4313      	orrs	r3, r2
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	4a0c      	ldr	r2, [pc, #48]	@ (80184e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80184b0:	4313      	orrs	r3, r2
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184b6:	801a      	strh	r2, [r3, #0]
 80184b8:	e04d      	b.n	8018556 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80184ba:	238c      	movs	r3, #140	@ 0x8c
 80184bc:	18fb      	adds	r3, r7, r3
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d113      	bne.n	80184ec <HAL_PCD_EP_DB_Transmit+0x738>
 80184c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184c6:	881b      	ldrh	r3, [r3, #0]
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	4a05      	ldr	r2, [pc, #20]	@ (80184e0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80184cc:	4313      	orrs	r3, r2
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184d2:	801a      	strh	r2, [r3, #0]
 80184d4:	e03f      	b.n	8018556 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80184d6:	46c0      	nop			@ (mov r8, r8)
 80184d8:	00000402 	.word	0x00000402
 80184dc:	00000406 	.word	0x00000406
 80184e0:	ffff8000 	.word	0xffff8000
 80184e4:	ffff8f8f 	.word	0xffff8f8f
 80184e8:	ffffc080 	.word	0xffffc080
 80184ec:	228c      	movs	r2, #140	@ 0x8c
 80184ee:	18bb      	adds	r3, r7, r2
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	085b      	lsrs	r3, r3, #1
 80184f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80184f6:	18bb      	adds	r3, r7, r2
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	2201      	movs	r2, #1
 80184fc:	4013      	ands	r3, r2
 80184fe:	d002      	beq.n	8018506 <HAL_PCD_EP_DB_Transmit+0x752>
 8018500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018502:	3301      	adds	r3, #1
 8018504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018508:	881b      	ldrh	r3, [r3, #0]
 801850a:	b29a      	uxth	r2, r3
 801850c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801850e:	b29b      	uxth	r3, r3
 8018510:	029b      	lsls	r3, r3, #10
 8018512:	b29b      	uxth	r3, r3
 8018514:	4313      	orrs	r3, r2
 8018516:	b29a      	uxth	r2, r3
 8018518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801851a:	801a      	strh	r2, [r3, #0]
 801851c:	e01b      	b.n	8018556 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801851e:	68bb      	ldr	r3, [r7, #8]
 8018520:	785b      	ldrb	r3, [r3, #1]
 8018522:	2b01      	cmp	r3, #1
 8018524:	d117      	bne.n	8018556 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2250      	movs	r2, #80	@ 0x50
 801852c:	5a9b      	ldrh	r3, [r3, r2]
 801852e:	b29b      	uxth	r3, r3
 8018530:	001a      	movs	r2, r3
 8018532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018534:	189b      	adds	r3, r3, r2
 8018536:	657b      	str	r3, [r7, #84]	@ 0x54
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	00da      	lsls	r2, r3, #3
 801853e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018540:	18d3      	adds	r3, r2, r3
 8018542:	4a21      	ldr	r2, [pc, #132]	@ (80185c8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8018544:	4694      	mov	ip, r2
 8018546:	4463      	add	r3, ip
 8018548:	653b      	str	r3, [r7, #80]	@ 0x50
 801854a:	238c      	movs	r3, #140	@ 0x8c
 801854c:	18fb      	adds	r3, r7, r3
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	b29a      	uxth	r2, r3
 8018552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018554:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	6818      	ldr	r0, [r3, #0]
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	6959      	ldr	r1, [r3, #20]
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	895a      	ldrh	r2, [r3, #10]
 8018562:	238c      	movs	r3, #140	@ 0x8c
 8018564:	18fb      	adds	r3, r7, r3
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	b29b      	uxth	r3, r3
 801856a:	f006 f999 	bl	801e8a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	001a      	movs	r2, r3
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	781b      	ldrb	r3, [r3, #0]
 8018578:	009b      	lsls	r3, r3, #2
 801857a:	18d3      	adds	r3, r2, r3
 801857c:	881b      	ldrh	r3, [r3, #0]
 801857e:	b29a      	uxth	r2, r3
 8018580:	2014      	movs	r0, #20
 8018582:	183b      	adds	r3, r7, r0
 8018584:	4911      	ldr	r1, [pc, #68]	@ (80185cc <HAL_PCD_EP_DB_Transmit+0x818>)
 8018586:	400a      	ands	r2, r1
 8018588:	801a      	strh	r2, [r3, #0]
 801858a:	183b      	adds	r3, r7, r0
 801858c:	183a      	adds	r2, r7, r0
 801858e:	8812      	ldrh	r2, [r2, #0]
 8018590:	2110      	movs	r1, #16
 8018592:	404a      	eors	r2, r1
 8018594:	801a      	strh	r2, [r3, #0]
 8018596:	183b      	adds	r3, r7, r0
 8018598:	183a      	adds	r2, r7, r0
 801859a:	8812      	ldrh	r2, [r2, #0]
 801859c:	2120      	movs	r1, #32
 801859e:	404a      	eors	r2, r1
 80185a0:	801a      	strh	r2, [r3, #0]
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	001a      	movs	r2, r3
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	009b      	lsls	r3, r3, #2
 80185ae:	18d3      	adds	r3, r2, r3
 80185b0:	183a      	adds	r2, r7, r0
 80185b2:	8812      	ldrh	r2, [r2, #0]
 80185b4:	4906      	ldr	r1, [pc, #24]	@ (80185d0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80185b6:	430a      	orrs	r2, r1
 80185b8:	b292      	uxth	r2, r2
 80185ba:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80185bc:	2300      	movs	r3, #0
}
 80185be:	0018      	movs	r0, r3
 80185c0:	46bd      	mov	sp, r7
 80185c2:	b024      	add	sp, #144	@ 0x90
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	46c0      	nop			@ (mov r8, r8)
 80185c8:	00000406 	.word	0x00000406
 80185cc:	ffff8fbf 	.word	0xffff8fbf
 80185d0:	ffff8080 	.word	0xffff8080

080185d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80185d4:	b590      	push	{r4, r7, lr}
 80185d6:	b087      	sub	sp, #28
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	0008      	movs	r0, r1
 80185de:	0011      	movs	r1, r2
 80185e0:	607b      	str	r3, [r7, #4]
 80185e2:	240a      	movs	r4, #10
 80185e4:	193b      	adds	r3, r7, r4
 80185e6:	1c02      	adds	r2, r0, #0
 80185e8:	801a      	strh	r2, [r3, #0]
 80185ea:	2308      	movs	r3, #8
 80185ec:	18fb      	adds	r3, r7, r3
 80185ee:	1c0a      	adds	r2, r1, #0
 80185f0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80185f2:	0021      	movs	r1, r4
 80185f4:	187b      	adds	r3, r7, r1
 80185f6:	881b      	ldrh	r3, [r3, #0]
 80185f8:	2280      	movs	r2, #128	@ 0x80
 80185fa:	4013      	ands	r3, r2
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d00c      	beq.n	801861c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018602:	187b      	adds	r3, r7, r1
 8018604:	881b      	ldrh	r3, [r3, #0]
 8018606:	2207      	movs	r2, #7
 8018608:	4013      	ands	r3, r2
 801860a:	1c5a      	adds	r2, r3, #1
 801860c:	0013      	movs	r3, r2
 801860e:	009b      	lsls	r3, r3, #2
 8018610:	189b      	adds	r3, r3, r2
 8018612:	00db      	lsls	r3, r3, #3
 8018614:	68fa      	ldr	r2, [r7, #12]
 8018616:	18d3      	adds	r3, r2, r3
 8018618:	617b      	str	r3, [r7, #20]
 801861a:	e00b      	b.n	8018634 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801861c:	230a      	movs	r3, #10
 801861e:	18fb      	adds	r3, r7, r3
 8018620:	881a      	ldrh	r2, [r3, #0]
 8018622:	0013      	movs	r3, r2
 8018624:	009b      	lsls	r3, r3, #2
 8018626:	189b      	adds	r3, r3, r2
 8018628:	00db      	lsls	r3, r3, #3
 801862a:	3369      	adds	r3, #105	@ 0x69
 801862c:	33ff      	adds	r3, #255	@ 0xff
 801862e:	68fa      	ldr	r2, [r7, #12]
 8018630:	18d3      	adds	r3, r2, r3
 8018632:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8018634:	2308      	movs	r3, #8
 8018636:	18fb      	adds	r3, r7, r3
 8018638:	881b      	ldrh	r3, [r3, #0]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d107      	bne.n	801864e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	2200      	movs	r2, #0
 8018642:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	b29a      	uxth	r2, r3
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	80da      	strh	r2, [r3, #6]
 801864c:	e00b      	b.n	8018666 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	2201      	movs	r2, #1
 8018652:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	b29a      	uxth	r2, r3
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	0c1b      	lsrs	r3, r3, #16
 8018660:	b29a      	uxth	r2, r3
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8018666:	2300      	movs	r3, #0
}
 8018668:	0018      	movs	r0, r3
 801866a:	46bd      	mov	sp, r7
 801866c:	b007      	add	sp, #28
 801866e:	bd90      	pop	{r4, r7, pc}

08018670 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	23ba      	movs	r3, #186	@ 0xba
 8018682:	009b      	lsls	r3, r3, #2
 8018684:	2101      	movs	r1, #1
 8018686:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8018688:	687a      	ldr	r2, [r7, #4]
 801868a:	23b8      	movs	r3, #184	@ 0xb8
 801868c:	009b      	lsls	r3, r3, #2
 801868e:	2100      	movs	r1, #0
 8018690:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	2254      	movs	r2, #84	@ 0x54
 8018696:	5a9b      	ldrh	r3, [r3, r2]
 8018698:	b29b      	uxth	r3, r3
 801869a:	2201      	movs	r2, #1
 801869c:	4313      	orrs	r3, r2
 801869e:	b299      	uxth	r1, r3
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2254      	movs	r2, #84	@ 0x54
 80186a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	2254      	movs	r2, #84	@ 0x54
 80186aa:	5a9b      	ldrh	r3, [r3, r2]
 80186ac:	b29b      	uxth	r3, r3
 80186ae:	2202      	movs	r2, #2
 80186b0:	4313      	orrs	r3, r2
 80186b2:	b299      	uxth	r1, r3
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	2254      	movs	r2, #84	@ 0x54
 80186b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80186ba:	2300      	movs	r3, #0
}
 80186bc:	0018      	movs	r0, r3
 80186be:	46bd      	mov	sp, r7
 80186c0:	b004      	add	sp, #16
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	000a      	movs	r2, r1
 80186ce:	1cfb      	adds	r3, r7, #3
 80186d0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80186d2:	46c0      	nop			@ (mov r8, r8)
 80186d4:	46bd      	mov	sp, r7
 80186d6:	b002      	add	sp, #8
 80186d8:	bd80      	pop	{r7, pc}
	...

080186dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80186e0:	4b04      	ldr	r3, [pc, #16]	@ (80186f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80186e2:	681a      	ldr	r2, [r3, #0]
 80186e4:	4b03      	ldr	r3, [pc, #12]	@ (80186f4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80186e6:	2180      	movs	r1, #128	@ 0x80
 80186e8:	0049      	lsls	r1, r1, #1
 80186ea:	430a      	orrs	r2, r1
 80186ec:	601a      	str	r2, [r3, #0]
}
 80186ee:	46c0      	nop			@ (mov r8, r8)
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	40007000 	.word	0x40007000

080186f8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80186fc:	4b04      	ldr	r3, [pc, #16]	@ (8018710 <HAL_PWR_DisableBkUpAccess+0x18>)
 80186fe:	681a      	ldr	r2, [r3, #0]
 8018700:	4b03      	ldr	r3, [pc, #12]	@ (8018710 <HAL_PWR_DisableBkUpAccess+0x18>)
 8018702:	4904      	ldr	r1, [pc, #16]	@ (8018714 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8018704:	400a      	ands	r2, r1
 8018706:	601a      	str	r2, [r3, #0]
}
 8018708:	46c0      	nop			@ (mov r8, r8)
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
 801870e:	46c0      	nop			@ (mov r8, r8)
 8018710:	40007000 	.word	0x40007000
 8018714:	fffffeff 	.word	0xfffffeff

08018718 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b086      	sub	sp, #24
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
 8018720:	000a      	movs	r2, r1
 8018722:	1cfb      	adds	r3, r7, #3
 8018724:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8018726:	2300      	movs	r3, #0
 8018728:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801872a:	4b25      	ldr	r3, [pc, #148]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	2380      	movs	r3, #128	@ 0x80
 8018730:	009b      	lsls	r3, r3, #2
 8018732:	4013      	ands	r3, r2
 8018734:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8018736:	4b23      	ldr	r3, [pc, #140]	@ (80187c4 <HAL_PWR_EnterSTOPMode+0xac>)
 8018738:	6a1b      	ldr	r3, [r3, #32]
 801873a:	2201      	movs	r2, #1
 801873c:	4013      	ands	r3, r2
 801873e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8018740:	693b      	ldr	r3, [r7, #16]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d008      	beq.n	8018758 <HAL_PWR_EnterSTOPMode+0x40>
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d005      	beq.n	8018758 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801874c:	4b1c      	ldr	r3, [pc, #112]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801874e:	681a      	ldr	r2, [r3, #0]
 8018750:	4b1b      	ldr	r3, [pc, #108]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018752:	491d      	ldr	r1, [pc, #116]	@ (80187c8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8018754:	400a      	ands	r2, r1
 8018756:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8018758:	4b19      	ldr	r3, [pc, #100]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	2203      	movs	r2, #3
 8018762:	4393      	bics	r3, r2
 8018764:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8018766:	697a      	ldr	r2, [r7, #20]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	4313      	orrs	r3, r2
 801876c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801876e:	4b14      	ldr	r3, [pc, #80]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018770:	697a      	ldr	r2, [r7, #20]
 8018772:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8018774:	4b15      	ldr	r3, [pc, #84]	@ (80187cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8018776:	691a      	ldr	r2, [r3, #16]
 8018778:	4b14      	ldr	r3, [pc, #80]	@ (80187cc <HAL_PWR_EnterSTOPMode+0xb4>)
 801877a:	2104      	movs	r1, #4
 801877c:	430a      	orrs	r2, r1
 801877e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8018780:	1cfb      	adds	r3, r7, #3
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2b01      	cmp	r3, #1
 8018786:	d101      	bne.n	801878c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8018788:	bf30      	wfi
 801878a:	e002      	b.n	8018792 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801878c:	bf40      	sev
    __WFE();
 801878e:	bf20      	wfe
    __WFE();
 8018790:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8018792:	4b0e      	ldr	r3, [pc, #56]	@ (80187cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8018794:	691a      	ldr	r2, [r3, #16]
 8018796:	4b0d      	ldr	r3, [pc, #52]	@ (80187cc <HAL_PWR_EnterSTOPMode+0xb4>)
 8018798:	2104      	movs	r1, #4
 801879a:	438a      	bics	r2, r1
 801879c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801879e:	693b      	ldr	r3, [r7, #16]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d009      	beq.n	80187b8 <HAL_PWR_EnterSTOPMode+0xa0>
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d006      	beq.n	80187b8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80187aa:	4b05      	ldr	r3, [pc, #20]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187ac:	681a      	ldr	r2, [r3, #0]
 80187ae:	4b04      	ldr	r3, [pc, #16]	@ (80187c0 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187b0:	2180      	movs	r1, #128	@ 0x80
 80187b2:	0089      	lsls	r1, r1, #2
 80187b4:	430a      	orrs	r2, r1
 80187b6:	601a      	str	r2, [r3, #0]
  }
}
 80187b8:	46c0      	nop			@ (mov r8, r8)
 80187ba:	46bd      	mov	sp, r7
 80187bc:	b006      	add	sp, #24
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	40007000 	.word	0x40007000
 80187c4:	40010000 	.word	0x40010000
 80187c8:	fffffdff 	.word	0xfffffdff
 80187cc:	e000ed00 	.word	0xe000ed00

080187d0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80187d4:	4b07      	ldr	r3, [pc, #28]	@ (80187f4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	4b06      	ldr	r3, [pc, #24]	@ (80187f4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80187da:	2102      	movs	r1, #2
 80187dc:	430a      	orrs	r2, r1
 80187de:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80187e0:	4b05      	ldr	r3, [pc, #20]	@ (80187f8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80187e2:	691a      	ldr	r2, [r3, #16]
 80187e4:	4b04      	ldr	r3, [pc, #16]	@ (80187f8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80187e6:	2104      	movs	r1, #4
 80187e8:	430a      	orrs	r2, r1
 80187ea:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80187ec:	bf30      	wfi
}
 80187ee:	46c0      	nop			@ (mov r8, r8)
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	40007000 	.word	0x40007000
 80187f8:	e000ed00 	.word	0xe000ed00

080187fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80187fc:	b5b0      	push	{r4, r5, r7, lr}
 80187fe:	b08a      	sub	sp, #40	@ 0x28
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d102      	bne.n	8018810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801880a:	2301      	movs	r3, #1
 801880c:	f000 fbbf 	bl	8018f8e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018810:	4bc9      	ldr	r3, [pc, #804]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018812:	68db      	ldr	r3, [r3, #12]
 8018814:	220c      	movs	r2, #12
 8018816:	4013      	ands	r3, r2
 8018818:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801881a:	4bc7      	ldr	r3, [pc, #796]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801881c:	68da      	ldr	r2, [r3, #12]
 801881e:	2380      	movs	r3, #128	@ 0x80
 8018820:	025b      	lsls	r3, r3, #9
 8018822:	4013      	ands	r3, r2
 8018824:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2201      	movs	r2, #1
 801882c:	4013      	ands	r3, r2
 801882e:	d100      	bne.n	8018832 <HAL_RCC_OscConfig+0x36>
 8018830:	e07e      	b.n	8018930 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	2b08      	cmp	r3, #8
 8018836:	d007      	beq.n	8018848 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	2b0c      	cmp	r3, #12
 801883c:	d112      	bne.n	8018864 <HAL_RCC_OscConfig+0x68>
 801883e:	69ba      	ldr	r2, [r7, #24]
 8018840:	2380      	movs	r3, #128	@ 0x80
 8018842:	025b      	lsls	r3, r3, #9
 8018844:	429a      	cmp	r2, r3
 8018846:	d10d      	bne.n	8018864 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018848:	4bbb      	ldr	r3, [pc, #748]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	2380      	movs	r3, #128	@ 0x80
 801884e:	029b      	lsls	r3, r3, #10
 8018850:	4013      	ands	r3, r2
 8018852:	d100      	bne.n	8018856 <HAL_RCC_OscConfig+0x5a>
 8018854:	e06b      	b.n	801892e <HAL_RCC_OscConfig+0x132>
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	685b      	ldr	r3, [r3, #4]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d167      	bne.n	801892e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801885e:	2301      	movs	r3, #1
 8018860:	f000 fb95 	bl	8018f8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	685a      	ldr	r2, [r3, #4]
 8018868:	2380      	movs	r3, #128	@ 0x80
 801886a:	025b      	lsls	r3, r3, #9
 801886c:	429a      	cmp	r2, r3
 801886e:	d107      	bne.n	8018880 <HAL_RCC_OscConfig+0x84>
 8018870:	4bb1      	ldr	r3, [pc, #708]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018872:	681a      	ldr	r2, [r3, #0]
 8018874:	4bb0      	ldr	r3, [pc, #704]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018876:	2180      	movs	r1, #128	@ 0x80
 8018878:	0249      	lsls	r1, r1, #9
 801887a:	430a      	orrs	r2, r1
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	e027      	b.n	80188d0 <HAL_RCC_OscConfig+0xd4>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	685a      	ldr	r2, [r3, #4]
 8018884:	23a0      	movs	r3, #160	@ 0xa0
 8018886:	02db      	lsls	r3, r3, #11
 8018888:	429a      	cmp	r2, r3
 801888a:	d10e      	bne.n	80188aa <HAL_RCC_OscConfig+0xae>
 801888c:	4baa      	ldr	r3, [pc, #680]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801888e:	681a      	ldr	r2, [r3, #0]
 8018890:	4ba9      	ldr	r3, [pc, #676]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018892:	2180      	movs	r1, #128	@ 0x80
 8018894:	02c9      	lsls	r1, r1, #11
 8018896:	430a      	orrs	r2, r1
 8018898:	601a      	str	r2, [r3, #0]
 801889a:	4ba7      	ldr	r3, [pc, #668]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801889c:	681a      	ldr	r2, [r3, #0]
 801889e:	4ba6      	ldr	r3, [pc, #664]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188a0:	2180      	movs	r1, #128	@ 0x80
 80188a2:	0249      	lsls	r1, r1, #9
 80188a4:	430a      	orrs	r2, r1
 80188a6:	601a      	str	r2, [r3, #0]
 80188a8:	e012      	b.n	80188d0 <HAL_RCC_OscConfig+0xd4>
 80188aa:	4ba3      	ldr	r3, [pc, #652]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188ac:	681a      	ldr	r2, [r3, #0]
 80188ae:	4ba2      	ldr	r3, [pc, #648]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188b0:	49a2      	ldr	r1, [pc, #648]	@ (8018b3c <HAL_RCC_OscConfig+0x340>)
 80188b2:	400a      	ands	r2, r1
 80188b4:	601a      	str	r2, [r3, #0]
 80188b6:	4ba0      	ldr	r3, [pc, #640]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188b8:	681a      	ldr	r2, [r3, #0]
 80188ba:	2380      	movs	r3, #128	@ 0x80
 80188bc:	025b      	lsls	r3, r3, #9
 80188be:	4013      	ands	r3, r2
 80188c0:	60fb      	str	r3, [r7, #12]
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	4b9c      	ldr	r3, [pc, #624]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188c6:	681a      	ldr	r2, [r3, #0]
 80188c8:	4b9b      	ldr	r3, [pc, #620]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188ca:	499d      	ldr	r1, [pc, #628]	@ (8018b40 <HAL_RCC_OscConfig+0x344>)
 80188cc:	400a      	ands	r2, r1
 80188ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d015      	beq.n	8018904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80188d8:	f7f9 fbc8 	bl	801206c <HAL_GetTick>
 80188dc:	0003      	movs	r3, r0
 80188de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80188e0:	e009      	b.n	80188f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80188e2:	f7f9 fbc3 	bl	801206c <HAL_GetTick>
 80188e6:	0002      	movs	r2, r0
 80188e8:	697b      	ldr	r3, [r7, #20]
 80188ea:	1ad3      	subs	r3, r2, r3
 80188ec:	2b64      	cmp	r3, #100	@ 0x64
 80188ee:	d902      	bls.n	80188f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80188f0:	2303      	movs	r3, #3
 80188f2:	f000 fb4c 	bl	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80188f6:	4b90      	ldr	r3, [pc, #576]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80188f8:	681a      	ldr	r2, [r3, #0]
 80188fa:	2380      	movs	r3, #128	@ 0x80
 80188fc:	029b      	lsls	r3, r3, #10
 80188fe:	4013      	ands	r3, r2
 8018900:	d0ef      	beq.n	80188e2 <HAL_RCC_OscConfig+0xe6>
 8018902:	e015      	b.n	8018930 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018904:	f7f9 fbb2 	bl	801206c <HAL_GetTick>
 8018908:	0003      	movs	r3, r0
 801890a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801890c:	e008      	b.n	8018920 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801890e:	f7f9 fbad 	bl	801206c <HAL_GetTick>
 8018912:	0002      	movs	r2, r0
 8018914:	697b      	ldr	r3, [r7, #20]
 8018916:	1ad3      	subs	r3, r2, r3
 8018918:	2b64      	cmp	r3, #100	@ 0x64
 801891a:	d901      	bls.n	8018920 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801891c:	2303      	movs	r3, #3
 801891e:	e336      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8018920:	4b85      	ldr	r3, [pc, #532]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	2380      	movs	r3, #128	@ 0x80
 8018926:	029b      	lsls	r3, r3, #10
 8018928:	4013      	ands	r3, r2
 801892a:	d1f0      	bne.n	801890e <HAL_RCC_OscConfig+0x112>
 801892c:	e000      	b.n	8018930 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801892e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2202      	movs	r2, #2
 8018936:	4013      	ands	r3, r2
 8018938:	d100      	bne.n	801893c <HAL_RCC_OscConfig+0x140>
 801893a:	e099      	b.n	8018a70 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8018942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018944:	2220      	movs	r2, #32
 8018946:	4013      	ands	r3, r2
 8018948:	d009      	beq.n	801895e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801894a:	4b7b      	ldr	r3, [pc, #492]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	4b7a      	ldr	r3, [pc, #488]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018950:	2120      	movs	r1, #32
 8018952:	430a      	orrs	r2, r1
 8018954:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8018956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018958:	2220      	movs	r2, #32
 801895a:	4393      	bics	r3, r2
 801895c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801895e:	69fb      	ldr	r3, [r7, #28]
 8018960:	2b04      	cmp	r3, #4
 8018962:	d005      	beq.n	8018970 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8018964:	69fb      	ldr	r3, [r7, #28]
 8018966:	2b0c      	cmp	r3, #12
 8018968:	d13e      	bne.n	80189e8 <HAL_RCC_OscConfig+0x1ec>
 801896a:	69bb      	ldr	r3, [r7, #24]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d13b      	bne.n	80189e8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8018970:	4b71      	ldr	r3, [pc, #452]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	2204      	movs	r2, #4
 8018976:	4013      	ands	r3, r2
 8018978:	d004      	beq.n	8018984 <HAL_RCC_OscConfig+0x188>
 801897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801897c:	2b00      	cmp	r3, #0
 801897e:	d101      	bne.n	8018984 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8018980:	2301      	movs	r3, #1
 8018982:	e304      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018984:	4b6c      	ldr	r3, [pc, #432]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018986:	685b      	ldr	r3, [r3, #4]
 8018988:	4a6e      	ldr	r2, [pc, #440]	@ (8018b44 <HAL_RCC_OscConfig+0x348>)
 801898a:	4013      	ands	r3, r2
 801898c:	0019      	movs	r1, r3
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	691b      	ldr	r3, [r3, #16]
 8018992:	021a      	lsls	r2, r3, #8
 8018994:	4b68      	ldr	r3, [pc, #416]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018996:	430a      	orrs	r2, r1
 8018998:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801899a:	4b67      	ldr	r3, [pc, #412]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	2209      	movs	r2, #9
 80189a0:	4393      	bics	r3, r2
 80189a2:	0019      	movs	r1, r3
 80189a4:	4b64      	ldr	r3, [pc, #400]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80189a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80189a8:	430a      	orrs	r2, r1
 80189aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80189ac:	f000 fc42 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 80189b0:	0001      	movs	r1, r0
 80189b2:	4b61      	ldr	r3, [pc, #388]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80189b4:	68db      	ldr	r3, [r3, #12]
 80189b6:	091b      	lsrs	r3, r3, #4
 80189b8:	220f      	movs	r2, #15
 80189ba:	4013      	ands	r3, r2
 80189bc:	4a62      	ldr	r2, [pc, #392]	@ (8018b48 <HAL_RCC_OscConfig+0x34c>)
 80189be:	5cd3      	ldrb	r3, [r2, r3]
 80189c0:	000a      	movs	r2, r1
 80189c2:	40da      	lsrs	r2, r3
 80189c4:	4b61      	ldr	r3, [pc, #388]	@ (8018b4c <HAL_RCC_OscConfig+0x350>)
 80189c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80189c8:	4b61      	ldr	r3, [pc, #388]	@ (8018b50 <HAL_RCC_OscConfig+0x354>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2513      	movs	r5, #19
 80189ce:	197c      	adds	r4, r7, r5
 80189d0:	0018      	movs	r0, r3
 80189d2:	f7f9 fb05 	bl	8011fe0 <HAL_InitTick>
 80189d6:	0003      	movs	r3, r0
 80189d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80189da:	197b      	adds	r3, r7, r5
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d046      	beq.n	8018a70 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80189e2:	197b      	adds	r3, r7, r5
 80189e4:	781b      	ldrb	r3, [r3, #0]
 80189e6:	e2d2      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80189e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d027      	beq.n	8018a3e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80189ee:	4b52      	ldr	r3, [pc, #328]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	2209      	movs	r2, #9
 80189f4:	4393      	bics	r3, r2
 80189f6:	0019      	movs	r1, r3
 80189f8:	4b4f      	ldr	r3, [pc, #316]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 80189fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80189fc:	430a      	orrs	r2, r1
 80189fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018a00:	f7f9 fb34 	bl	801206c <HAL_GetTick>
 8018a04:	0003      	movs	r3, r0
 8018a06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018a08:	e008      	b.n	8018a1c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018a0a:	f7f9 fb2f 	bl	801206c <HAL_GetTick>
 8018a0e:	0002      	movs	r2, r0
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	1ad3      	subs	r3, r2, r3
 8018a14:	2b02      	cmp	r3, #2
 8018a16:	d901      	bls.n	8018a1c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8018a18:	2303      	movs	r3, #3
 8018a1a:	e2b8      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018a1c:	4b46      	ldr	r3, [pc, #280]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2204      	movs	r2, #4
 8018a22:	4013      	ands	r3, r2
 8018a24:	d0f1      	beq.n	8018a0a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018a26:	4b44      	ldr	r3, [pc, #272]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	4a46      	ldr	r2, [pc, #280]	@ (8018b44 <HAL_RCC_OscConfig+0x348>)
 8018a2c:	4013      	ands	r3, r2
 8018a2e:	0019      	movs	r1, r3
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	691b      	ldr	r3, [r3, #16]
 8018a34:	021a      	lsls	r2, r3, #8
 8018a36:	4b40      	ldr	r3, [pc, #256]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a38:	430a      	orrs	r2, r1
 8018a3a:	605a      	str	r2, [r3, #4]
 8018a3c:	e018      	b.n	8018a70 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a40:	681a      	ldr	r2, [r3, #0]
 8018a42:	4b3d      	ldr	r3, [pc, #244]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a44:	2101      	movs	r1, #1
 8018a46:	438a      	bics	r2, r1
 8018a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018a4a:	f7f9 fb0f 	bl	801206c <HAL_GetTick>
 8018a4e:	0003      	movs	r3, r0
 8018a50:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018a52:	e008      	b.n	8018a66 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018a54:	f7f9 fb0a 	bl	801206c <HAL_GetTick>
 8018a58:	0002      	movs	r2, r0
 8018a5a:	697b      	ldr	r3, [r7, #20]
 8018a5c:	1ad3      	subs	r3, r2, r3
 8018a5e:	2b02      	cmp	r3, #2
 8018a60:	d901      	bls.n	8018a66 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8018a62:	2303      	movs	r3, #3
 8018a64:	e293      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018a66:	4b34      	ldr	r3, [pc, #208]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	2204      	movs	r2, #4
 8018a6c:	4013      	ands	r3, r2
 8018a6e:	d1f1      	bne.n	8018a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	2210      	movs	r2, #16
 8018a76:	4013      	ands	r3, r2
 8018a78:	d100      	bne.n	8018a7c <HAL_RCC_OscConfig+0x280>
 8018a7a:	e0a2      	b.n	8018bc2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018a7c:	69fb      	ldr	r3, [r7, #28]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d140      	bne.n	8018b04 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8018a82:	4b2d      	ldr	r3, [pc, #180]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a84:	681a      	ldr	r2, [r3, #0]
 8018a86:	2380      	movs	r3, #128	@ 0x80
 8018a88:	009b      	lsls	r3, r3, #2
 8018a8a:	4013      	ands	r3, r2
 8018a8c:	d005      	beq.n	8018a9a <HAL_RCC_OscConfig+0x29e>
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	69db      	ldr	r3, [r3, #28]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d101      	bne.n	8018a9a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8018a96:	2301      	movs	r3, #1
 8018a98:	e279      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018a9a:	4b27      	ldr	r3, [pc, #156]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018a9c:	685b      	ldr	r3, [r3, #4]
 8018a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8018b54 <HAL_RCC_OscConfig+0x358>)
 8018aa0:	4013      	ands	r3, r2
 8018aa2:	0019      	movs	r1, r3
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018aa8:	4b23      	ldr	r3, [pc, #140]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018aaa:	430a      	orrs	r2, r1
 8018aac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018aae:	4b22      	ldr	r3, [pc, #136]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	021b      	lsls	r3, r3, #8
 8018ab4:	0a19      	lsrs	r1, r3, #8
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	6a1b      	ldr	r3, [r3, #32]
 8018aba:	061a      	lsls	r2, r3, #24
 8018abc:	4b1e      	ldr	r3, [pc, #120]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018abe:	430a      	orrs	r2, r1
 8018ac0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ac6:	0b5b      	lsrs	r3, r3, #13
 8018ac8:	3301      	adds	r3, #1
 8018aca:	2280      	movs	r2, #128	@ 0x80
 8018acc:	0212      	lsls	r2, r2, #8
 8018ace:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8018ad0:	4b19      	ldr	r3, [pc, #100]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018ad2:	68db      	ldr	r3, [r3, #12]
 8018ad4:	091b      	lsrs	r3, r3, #4
 8018ad6:	210f      	movs	r1, #15
 8018ad8:	400b      	ands	r3, r1
 8018ada:	491b      	ldr	r1, [pc, #108]	@ (8018b48 <HAL_RCC_OscConfig+0x34c>)
 8018adc:	5ccb      	ldrb	r3, [r1, r3]
 8018ade:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8018b4c <HAL_RCC_OscConfig+0x350>)
 8018ae2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8018ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8018b50 <HAL_RCC_OscConfig+0x354>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2513      	movs	r5, #19
 8018aea:	197c      	adds	r4, r7, r5
 8018aec:	0018      	movs	r0, r3
 8018aee:	f7f9 fa77 	bl	8011fe0 <HAL_InitTick>
 8018af2:	0003      	movs	r3, r0
 8018af4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8018af6:	197b      	adds	r3, r7, r5
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d061      	beq.n	8018bc2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8018afe:	197b      	adds	r3, r7, r5
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	e244      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	69db      	ldr	r3, [r3, #28]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d040      	beq.n	8018b8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8018b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018b0e:	681a      	ldr	r2, [r3, #0]
 8018b10:	4b09      	ldr	r3, [pc, #36]	@ (8018b38 <HAL_RCC_OscConfig+0x33c>)
 8018b12:	2180      	movs	r1, #128	@ 0x80
 8018b14:	0049      	lsls	r1, r1, #1
 8018b16:	430a      	orrs	r2, r1
 8018b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018b1a:	f7f9 faa7 	bl	801206c <HAL_GetTick>
 8018b1e:	0003      	movs	r3, r0
 8018b20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018b22:	e019      	b.n	8018b58 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018b24:	f7f9 faa2 	bl	801206c <HAL_GetTick>
 8018b28:	0002      	movs	r2, r0
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	1ad3      	subs	r3, r2, r3
 8018b2e:	2b02      	cmp	r3, #2
 8018b30:	d912      	bls.n	8018b58 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8018b32:	2303      	movs	r3, #3
 8018b34:	e22b      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
 8018b36:	46c0      	nop			@ (mov r8, r8)
 8018b38:	40021000 	.word	0x40021000
 8018b3c:	fffeffff 	.word	0xfffeffff
 8018b40:	fffbffff 	.word	0xfffbffff
 8018b44:	ffffe0ff 	.word	0xffffe0ff
 8018b48:	0802b198 	.word	0x0802b198
 8018b4c:	200000e0 	.word	0x200000e0
 8018b50:	200000f0 	.word	0x200000f0
 8018b54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018b58:	4bca      	ldr	r3, [pc, #808]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b5a:	681a      	ldr	r2, [r3, #0]
 8018b5c:	2380      	movs	r3, #128	@ 0x80
 8018b5e:	009b      	lsls	r3, r3, #2
 8018b60:	4013      	ands	r3, r2
 8018b62:	d0df      	beq.n	8018b24 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018b64:	4bc7      	ldr	r3, [pc, #796]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b66:	685b      	ldr	r3, [r3, #4]
 8018b68:	4ac7      	ldr	r2, [pc, #796]	@ (8018e88 <HAL_RCC_OscConfig+0x68c>)
 8018b6a:	4013      	ands	r3, r2
 8018b6c:	0019      	movs	r1, r3
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b72:	4bc4      	ldr	r3, [pc, #784]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b74:	430a      	orrs	r2, r1
 8018b76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018b78:	4bc2      	ldr	r3, [pc, #776]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	021b      	lsls	r3, r3, #8
 8018b7e:	0a19      	lsrs	r1, r3, #8
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6a1b      	ldr	r3, [r3, #32]
 8018b84:	061a      	lsls	r2, r3, #24
 8018b86:	4bbf      	ldr	r3, [pc, #764]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b88:	430a      	orrs	r2, r1
 8018b8a:	605a      	str	r2, [r3, #4]
 8018b8c:	e019      	b.n	8018bc2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8018b8e:	4bbd      	ldr	r3, [pc, #756]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b90:	681a      	ldr	r2, [r3, #0]
 8018b92:	4bbc      	ldr	r3, [pc, #752]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018b94:	49bd      	ldr	r1, [pc, #756]	@ (8018e8c <HAL_RCC_OscConfig+0x690>)
 8018b96:	400a      	ands	r2, r1
 8018b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018b9a:	f7f9 fa67 	bl	801206c <HAL_GetTick>
 8018b9e:	0003      	movs	r3, r0
 8018ba0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018ba2:	e008      	b.n	8018bb6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018ba4:	f7f9 fa62 	bl	801206c <HAL_GetTick>
 8018ba8:	0002      	movs	r2, r0
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	1ad3      	subs	r3, r2, r3
 8018bae:	2b02      	cmp	r3, #2
 8018bb0:	d901      	bls.n	8018bb6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8018bb2:	2303      	movs	r3, #3
 8018bb4:	e1eb      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018bb6:	4bb3      	ldr	r3, [pc, #716]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018bb8:	681a      	ldr	r2, [r3, #0]
 8018bba:	2380      	movs	r3, #128	@ 0x80
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	4013      	ands	r3, r2
 8018bc0:	d1f0      	bne.n	8018ba4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	2208      	movs	r2, #8
 8018bc8:	4013      	ands	r3, r2
 8018bca:	d036      	beq.n	8018c3a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	695b      	ldr	r3, [r3, #20]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d019      	beq.n	8018c08 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018bd4:	4bab      	ldr	r3, [pc, #684]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018bd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018bd8:	4baa      	ldr	r3, [pc, #680]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018bda:	2101      	movs	r1, #1
 8018bdc:	430a      	orrs	r2, r1
 8018bde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018be0:	f7f9 fa44 	bl	801206c <HAL_GetTick>
 8018be4:	0003      	movs	r3, r0
 8018be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018be8:	e008      	b.n	8018bfc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018bea:	f7f9 fa3f 	bl	801206c <HAL_GetTick>
 8018bee:	0002      	movs	r2, r0
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	1ad3      	subs	r3, r2, r3
 8018bf4:	2b02      	cmp	r3, #2
 8018bf6:	d901      	bls.n	8018bfc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8018bf8:	2303      	movs	r3, #3
 8018bfa:	e1c8      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018bfc:	4ba1      	ldr	r3, [pc, #644]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c00:	2202      	movs	r2, #2
 8018c02:	4013      	ands	r3, r2
 8018c04:	d0f1      	beq.n	8018bea <HAL_RCC_OscConfig+0x3ee>
 8018c06:	e018      	b.n	8018c3a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018c08:	4b9e      	ldr	r3, [pc, #632]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c0c:	4b9d      	ldr	r3, [pc, #628]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c0e:	2101      	movs	r1, #1
 8018c10:	438a      	bics	r2, r1
 8018c12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018c14:	f7f9 fa2a 	bl	801206c <HAL_GetTick>
 8018c18:	0003      	movs	r3, r0
 8018c1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018c1c:	e008      	b.n	8018c30 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018c1e:	f7f9 fa25 	bl	801206c <HAL_GetTick>
 8018c22:	0002      	movs	r2, r0
 8018c24:	697b      	ldr	r3, [r7, #20]
 8018c26:	1ad3      	subs	r3, r2, r3
 8018c28:	2b02      	cmp	r3, #2
 8018c2a:	d901      	bls.n	8018c30 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8018c2c:	2303      	movs	r3, #3
 8018c2e:	e1ae      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018c30:	4b94      	ldr	r3, [pc, #592]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c34:	2202      	movs	r2, #2
 8018c36:	4013      	ands	r3, r2
 8018c38:	d1f1      	bne.n	8018c1e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	2204      	movs	r2, #4
 8018c40:	4013      	ands	r3, r2
 8018c42:	d100      	bne.n	8018c46 <HAL_RCC_OscConfig+0x44a>
 8018c44:	e0ae      	b.n	8018da4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018c46:	2023      	movs	r0, #35	@ 0x23
 8018c48:	183b      	adds	r3, r7, r0
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018c52:	2380      	movs	r3, #128	@ 0x80
 8018c54:	055b      	lsls	r3, r3, #21
 8018c56:	4013      	ands	r3, r2
 8018c58:	d109      	bne.n	8018c6e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018c5a:	4b8a      	ldr	r3, [pc, #552]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018c5e:	4b89      	ldr	r3, [pc, #548]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018c60:	2180      	movs	r1, #128	@ 0x80
 8018c62:	0549      	lsls	r1, r1, #21
 8018c64:	430a      	orrs	r2, r1
 8018c66:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8018c68:	183b      	adds	r3, r7, r0
 8018c6a:	2201      	movs	r2, #1
 8018c6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018c6e:	4b88      	ldr	r3, [pc, #544]	@ (8018e90 <HAL_RCC_OscConfig+0x694>)
 8018c70:	681a      	ldr	r2, [r3, #0]
 8018c72:	2380      	movs	r3, #128	@ 0x80
 8018c74:	005b      	lsls	r3, r3, #1
 8018c76:	4013      	ands	r3, r2
 8018c78:	d11a      	bne.n	8018cb0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018c7a:	4b85      	ldr	r3, [pc, #532]	@ (8018e90 <HAL_RCC_OscConfig+0x694>)
 8018c7c:	681a      	ldr	r2, [r3, #0]
 8018c7e:	4b84      	ldr	r3, [pc, #528]	@ (8018e90 <HAL_RCC_OscConfig+0x694>)
 8018c80:	2180      	movs	r1, #128	@ 0x80
 8018c82:	0049      	lsls	r1, r1, #1
 8018c84:	430a      	orrs	r2, r1
 8018c86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018c88:	f7f9 f9f0 	bl	801206c <HAL_GetTick>
 8018c8c:	0003      	movs	r3, r0
 8018c8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018c90:	e008      	b.n	8018ca4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018c92:	f7f9 f9eb 	bl	801206c <HAL_GetTick>
 8018c96:	0002      	movs	r2, r0
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	1ad3      	subs	r3, r2, r3
 8018c9c:	2b64      	cmp	r3, #100	@ 0x64
 8018c9e:	d901      	bls.n	8018ca4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8018ca0:	2303      	movs	r3, #3
 8018ca2:	e174      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018ca4:	4b7a      	ldr	r3, [pc, #488]	@ (8018e90 <HAL_RCC_OscConfig+0x694>)
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	2380      	movs	r3, #128	@ 0x80
 8018caa:	005b      	lsls	r3, r3, #1
 8018cac:	4013      	ands	r3, r2
 8018cae:	d0f0      	beq.n	8018c92 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	689a      	ldr	r2, [r3, #8]
 8018cb4:	2380      	movs	r3, #128	@ 0x80
 8018cb6:	005b      	lsls	r3, r3, #1
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d107      	bne.n	8018ccc <HAL_RCC_OscConfig+0x4d0>
 8018cbc:	4b71      	ldr	r3, [pc, #452]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018cbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018cc0:	4b70      	ldr	r3, [pc, #448]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018cc2:	2180      	movs	r1, #128	@ 0x80
 8018cc4:	0049      	lsls	r1, r1, #1
 8018cc6:	430a      	orrs	r2, r1
 8018cc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8018cca:	e031      	b.n	8018d30 <HAL_RCC_OscConfig+0x534>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	689b      	ldr	r3, [r3, #8]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d10c      	bne.n	8018cee <HAL_RCC_OscConfig+0x4f2>
 8018cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018cda:	496c      	ldr	r1, [pc, #432]	@ (8018e8c <HAL_RCC_OscConfig+0x690>)
 8018cdc:	400a      	ands	r2, r1
 8018cde:	651a      	str	r2, [r3, #80]	@ 0x50
 8018ce0:	4b68      	ldr	r3, [pc, #416]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018ce2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018ce4:	4b67      	ldr	r3, [pc, #412]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018ce6:	496b      	ldr	r1, [pc, #428]	@ (8018e94 <HAL_RCC_OscConfig+0x698>)
 8018ce8:	400a      	ands	r2, r1
 8018cea:	651a      	str	r2, [r3, #80]	@ 0x50
 8018cec:	e020      	b.n	8018d30 <HAL_RCC_OscConfig+0x534>
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	689a      	ldr	r2, [r3, #8]
 8018cf2:	23a0      	movs	r3, #160	@ 0xa0
 8018cf4:	00db      	lsls	r3, r3, #3
 8018cf6:	429a      	cmp	r2, r3
 8018cf8:	d10e      	bne.n	8018d18 <HAL_RCC_OscConfig+0x51c>
 8018cfa:	4b62      	ldr	r3, [pc, #392]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018cfe:	4b61      	ldr	r3, [pc, #388]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d00:	2180      	movs	r1, #128	@ 0x80
 8018d02:	00c9      	lsls	r1, r1, #3
 8018d04:	430a      	orrs	r2, r1
 8018d06:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d08:	4b5e      	ldr	r3, [pc, #376]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d0e:	2180      	movs	r1, #128	@ 0x80
 8018d10:	0049      	lsls	r1, r1, #1
 8018d12:	430a      	orrs	r2, r1
 8018d14:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d16:	e00b      	b.n	8018d30 <HAL_RCC_OscConfig+0x534>
 8018d18:	4b5a      	ldr	r3, [pc, #360]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d1c:	4b59      	ldr	r3, [pc, #356]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d1e:	495b      	ldr	r1, [pc, #364]	@ (8018e8c <HAL_RCC_OscConfig+0x690>)
 8018d20:	400a      	ands	r2, r1
 8018d22:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d24:	4b57      	ldr	r3, [pc, #348]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d28:	4b56      	ldr	r3, [pc, #344]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d2a:	495a      	ldr	r1, [pc, #360]	@ (8018e94 <HAL_RCC_OscConfig+0x698>)
 8018d2c:	400a      	ands	r2, r1
 8018d2e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	689b      	ldr	r3, [r3, #8]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d015      	beq.n	8018d64 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018d38:	f7f9 f998 	bl	801206c <HAL_GetTick>
 8018d3c:	0003      	movs	r3, r0
 8018d3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018d40:	e009      	b.n	8018d56 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018d42:	f7f9 f993 	bl	801206c <HAL_GetTick>
 8018d46:	0002      	movs	r2, r0
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	1ad3      	subs	r3, r2, r3
 8018d4c:	4a52      	ldr	r2, [pc, #328]	@ (8018e98 <HAL_RCC_OscConfig+0x69c>)
 8018d4e:	4293      	cmp	r3, r2
 8018d50:	d901      	bls.n	8018d56 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8018d52:	2303      	movs	r3, #3
 8018d54:	e11b      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018d56:	4b4b      	ldr	r3, [pc, #300]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d5a:	2380      	movs	r3, #128	@ 0x80
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	4013      	ands	r3, r2
 8018d60:	d0ef      	beq.n	8018d42 <HAL_RCC_OscConfig+0x546>
 8018d62:	e014      	b.n	8018d8e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018d64:	f7f9 f982 	bl	801206c <HAL_GetTick>
 8018d68:	0003      	movs	r3, r0
 8018d6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018d6c:	e009      	b.n	8018d82 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018d6e:	f7f9 f97d 	bl	801206c <HAL_GetTick>
 8018d72:	0002      	movs	r2, r0
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	4a47      	ldr	r2, [pc, #284]	@ (8018e98 <HAL_RCC_OscConfig+0x69c>)
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	d901      	bls.n	8018d82 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8018d7e:	2303      	movs	r3, #3
 8018d80:	e105      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018d82:	4b40      	ldr	r3, [pc, #256]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d86:	2380      	movs	r3, #128	@ 0x80
 8018d88:	009b      	lsls	r3, r3, #2
 8018d8a:	4013      	ands	r3, r2
 8018d8c:	d1ef      	bne.n	8018d6e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8018d8e:	2323      	movs	r3, #35	@ 0x23
 8018d90:	18fb      	adds	r3, r7, r3
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d105      	bne.n	8018da4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018d98:	4b3a      	ldr	r3, [pc, #232]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018d9c:	4b39      	ldr	r3, [pc, #228]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018d9e:	493f      	ldr	r1, [pc, #252]	@ (8018e9c <HAL_RCC_OscConfig+0x6a0>)
 8018da0:	400a      	ands	r2, r1
 8018da2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	2220      	movs	r2, #32
 8018daa:	4013      	ands	r3, r2
 8018dac:	d049      	beq.n	8018e42 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	699b      	ldr	r3, [r3, #24]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d026      	beq.n	8018e04 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8018db6:	4b33      	ldr	r3, [pc, #204]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018db8:	689a      	ldr	r2, [r3, #8]
 8018dba:	4b32      	ldr	r3, [pc, #200]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018dbc:	2101      	movs	r1, #1
 8018dbe:	430a      	orrs	r2, r1
 8018dc0:	609a      	str	r2, [r3, #8]
 8018dc2:	4b30      	ldr	r3, [pc, #192]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018dc8:	2101      	movs	r1, #1
 8018dca:	430a      	orrs	r2, r1
 8018dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8018dce:	4b34      	ldr	r3, [pc, #208]	@ (8018ea0 <HAL_RCC_OscConfig+0x6a4>)
 8018dd0:	6a1a      	ldr	r2, [r3, #32]
 8018dd2:	4b33      	ldr	r3, [pc, #204]	@ (8018ea0 <HAL_RCC_OscConfig+0x6a4>)
 8018dd4:	2180      	movs	r1, #128	@ 0x80
 8018dd6:	0189      	lsls	r1, r1, #6
 8018dd8:	430a      	orrs	r2, r1
 8018dda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ddc:	f7f9 f946 	bl	801206c <HAL_GetTick>
 8018de0:	0003      	movs	r3, r0
 8018de2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018de4:	e008      	b.n	8018df8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018de6:	f7f9 f941 	bl	801206c <HAL_GetTick>
 8018dea:	0002      	movs	r2, r0
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	1ad3      	subs	r3, r2, r3
 8018df0:	2b02      	cmp	r3, #2
 8018df2:	d901      	bls.n	8018df8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8018df4:	2303      	movs	r3, #3
 8018df6:	e0ca      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018df8:	4b22      	ldr	r3, [pc, #136]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018dfa:	689b      	ldr	r3, [r3, #8]
 8018dfc:	2202      	movs	r2, #2
 8018dfe:	4013      	ands	r3, r2
 8018e00:	d0f1      	beq.n	8018de6 <HAL_RCC_OscConfig+0x5ea>
 8018e02:	e01e      	b.n	8018e42 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8018e04:	4b1f      	ldr	r3, [pc, #124]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018e06:	689a      	ldr	r2, [r3, #8]
 8018e08:	4b1e      	ldr	r3, [pc, #120]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018e0a:	2101      	movs	r1, #1
 8018e0c:	438a      	bics	r2, r1
 8018e0e:	609a      	str	r2, [r3, #8]
 8018e10:	4b23      	ldr	r3, [pc, #140]	@ (8018ea0 <HAL_RCC_OscConfig+0x6a4>)
 8018e12:	6a1a      	ldr	r2, [r3, #32]
 8018e14:	4b22      	ldr	r3, [pc, #136]	@ (8018ea0 <HAL_RCC_OscConfig+0x6a4>)
 8018e16:	4923      	ldr	r1, [pc, #140]	@ (8018ea4 <HAL_RCC_OscConfig+0x6a8>)
 8018e18:	400a      	ands	r2, r1
 8018e1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018e1c:	f7f9 f926 	bl	801206c <HAL_GetTick>
 8018e20:	0003      	movs	r3, r0
 8018e22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018e24:	e008      	b.n	8018e38 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018e26:	f7f9 f921 	bl	801206c <HAL_GetTick>
 8018e2a:	0002      	movs	r2, r0
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	1ad3      	subs	r3, r2, r3
 8018e30:	2b02      	cmp	r3, #2
 8018e32:	d901      	bls.n	8018e38 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8018e34:	2303      	movs	r3, #3
 8018e36:	e0aa      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018e38:	4b12      	ldr	r3, [pc, #72]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018e3a:	689b      	ldr	r3, [r3, #8]
 8018e3c:	2202      	movs	r2, #2
 8018e3e:	4013      	ands	r3, r2
 8018e40:	d1f1      	bne.n	8018e26 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d100      	bne.n	8018e4c <HAL_RCC_OscConfig+0x650>
 8018e4a:	e09f      	b.n	8018f8c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018e4c:	69fb      	ldr	r3, [r7, #28]
 8018e4e:	2b0c      	cmp	r3, #12
 8018e50:	d100      	bne.n	8018e54 <HAL_RCC_OscConfig+0x658>
 8018e52:	e078      	b.n	8018f46 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d159      	bne.n	8018f10 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018e5c:	4b09      	ldr	r3, [pc, #36]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018e5e:	681a      	ldr	r2, [r3, #0]
 8018e60:	4b08      	ldr	r3, [pc, #32]	@ (8018e84 <HAL_RCC_OscConfig+0x688>)
 8018e62:	4911      	ldr	r1, [pc, #68]	@ (8018ea8 <HAL_RCC_OscConfig+0x6ac>)
 8018e64:	400a      	ands	r2, r1
 8018e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018e68:	f7f9 f900 	bl	801206c <HAL_GetTick>
 8018e6c:	0003      	movs	r3, r0
 8018e6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018e70:	e01c      	b.n	8018eac <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018e72:	f7f9 f8fb 	bl	801206c <HAL_GetTick>
 8018e76:	0002      	movs	r2, r0
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	1ad3      	subs	r3, r2, r3
 8018e7c:	2b02      	cmp	r3, #2
 8018e7e:	d915      	bls.n	8018eac <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8018e80:	2303      	movs	r3, #3
 8018e82:	e084      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
 8018e84:	40021000 	.word	0x40021000
 8018e88:	ffff1fff 	.word	0xffff1fff
 8018e8c:	fffffeff 	.word	0xfffffeff
 8018e90:	40007000 	.word	0x40007000
 8018e94:	fffffbff 	.word	0xfffffbff
 8018e98:	00001388 	.word	0x00001388
 8018e9c:	efffffff 	.word	0xefffffff
 8018ea0:	40010000 	.word	0x40010000
 8018ea4:	ffffdfff 	.word	0xffffdfff
 8018ea8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018eac:	4b3a      	ldr	r3, [pc, #232]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018eae:	681a      	ldr	r2, [r3, #0]
 8018eb0:	2380      	movs	r3, #128	@ 0x80
 8018eb2:	049b      	lsls	r3, r3, #18
 8018eb4:	4013      	ands	r3, r2
 8018eb6:	d1dc      	bne.n	8018e72 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018eb8:	4b37      	ldr	r3, [pc, #220]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	4a37      	ldr	r2, [pc, #220]	@ (8018f9c <HAL_RCC_OscConfig+0x7a0>)
 8018ebe:	4013      	ands	r3, r2
 8018ec0:	0019      	movs	r1, r3
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018eca:	431a      	orrs	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ed0:	431a      	orrs	r2, r3
 8018ed2:	4b31      	ldr	r3, [pc, #196]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018ed4:	430a      	orrs	r2, r1
 8018ed6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018eda:	681a      	ldr	r2, [r3, #0]
 8018edc:	4b2e      	ldr	r3, [pc, #184]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018ede:	2180      	movs	r1, #128	@ 0x80
 8018ee0:	0449      	lsls	r1, r1, #17
 8018ee2:	430a      	orrs	r2, r1
 8018ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ee6:	f7f9 f8c1 	bl	801206c <HAL_GetTick>
 8018eea:	0003      	movs	r3, r0
 8018eec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018eee:	e008      	b.n	8018f02 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018ef0:	f7f9 f8bc 	bl	801206c <HAL_GetTick>
 8018ef4:	0002      	movs	r2, r0
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	1ad3      	subs	r3, r2, r3
 8018efa:	2b02      	cmp	r3, #2
 8018efc:	d901      	bls.n	8018f02 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8018efe:	2303      	movs	r3, #3
 8018f00:	e045      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018f02:	4b25      	ldr	r3, [pc, #148]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018f04:	681a      	ldr	r2, [r3, #0]
 8018f06:	2380      	movs	r3, #128	@ 0x80
 8018f08:	049b      	lsls	r3, r3, #18
 8018f0a:	4013      	ands	r3, r2
 8018f0c:	d0f0      	beq.n	8018ef0 <HAL_RCC_OscConfig+0x6f4>
 8018f0e:	e03d      	b.n	8018f8c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018f10:	4b21      	ldr	r3, [pc, #132]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	4b20      	ldr	r3, [pc, #128]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018f16:	4922      	ldr	r1, [pc, #136]	@ (8018fa0 <HAL_RCC_OscConfig+0x7a4>)
 8018f18:	400a      	ands	r2, r1
 8018f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018f1c:	f7f9 f8a6 	bl	801206c <HAL_GetTick>
 8018f20:	0003      	movs	r3, r0
 8018f22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018f24:	e008      	b.n	8018f38 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018f26:	f7f9 f8a1 	bl	801206c <HAL_GetTick>
 8018f2a:	0002      	movs	r2, r0
 8018f2c:	697b      	ldr	r3, [r7, #20]
 8018f2e:	1ad3      	subs	r3, r2, r3
 8018f30:	2b02      	cmp	r3, #2
 8018f32:	d901      	bls.n	8018f38 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8018f34:	2303      	movs	r3, #3
 8018f36:	e02a      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018f38:	4b17      	ldr	r3, [pc, #92]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018f3a:	681a      	ldr	r2, [r3, #0]
 8018f3c:	2380      	movs	r3, #128	@ 0x80
 8018f3e:	049b      	lsls	r3, r3, #18
 8018f40:	4013      	ands	r3, r2
 8018f42:	d1f0      	bne.n	8018f26 <HAL_RCC_OscConfig+0x72a>
 8018f44:	e022      	b.n	8018f8c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d101      	bne.n	8018f52 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8018f4e:	2301      	movs	r3, #1
 8018f50:	e01d      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8018f52:	4b11      	ldr	r3, [pc, #68]	@ (8018f98 <HAL_RCC_OscConfig+0x79c>)
 8018f54:	68db      	ldr	r3, [r3, #12]
 8018f56:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018f58:	69ba      	ldr	r2, [r7, #24]
 8018f5a:	2380      	movs	r3, #128	@ 0x80
 8018f5c:	025b      	lsls	r3, r3, #9
 8018f5e:	401a      	ands	r2, r3
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f64:	429a      	cmp	r2, r3
 8018f66:	d10f      	bne.n	8018f88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018f68:	69ba      	ldr	r2, [r7, #24]
 8018f6a:	23f0      	movs	r3, #240	@ 0xf0
 8018f6c:	039b      	lsls	r3, r3, #14
 8018f6e:	401a      	ands	r2, r3
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d107      	bne.n	8018f88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8018f78:	69ba      	ldr	r2, [r7, #24]
 8018f7a:	23c0      	movs	r3, #192	@ 0xc0
 8018f7c:	041b      	lsls	r3, r3, #16
 8018f7e:	401a      	ands	r2, r3
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018f84:	429a      	cmp	r2, r3
 8018f86:	d001      	beq.n	8018f8c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8018f88:	2301      	movs	r3, #1
 8018f8a:	e000      	b.n	8018f8e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8018f8c:	2300      	movs	r3, #0
}
 8018f8e:	0018      	movs	r0, r3
 8018f90:	46bd      	mov	sp, r7
 8018f92:	b00a      	add	sp, #40	@ 0x28
 8018f94:	bdb0      	pop	{r4, r5, r7, pc}
 8018f96:	46c0      	nop			@ (mov r8, r8)
 8018f98:	40021000 	.word	0x40021000
 8018f9c:	ff02ffff 	.word	0xff02ffff
 8018fa0:	feffffff 	.word	0xfeffffff

08018fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018fa4:	b5b0      	push	{r4, r5, r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d101      	bne.n	8018fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	e128      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018fb8:	4b96      	ldr	r3, [pc, #600]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	2201      	movs	r2, #1
 8018fbe:	4013      	ands	r3, r2
 8018fc0:	683a      	ldr	r2, [r7, #0]
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d91e      	bls.n	8019004 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018fc6:	4b93      	ldr	r3, [pc, #588]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2201      	movs	r2, #1
 8018fcc:	4393      	bics	r3, r2
 8018fce:	0019      	movs	r1, r3
 8018fd0:	4b90      	ldr	r3, [pc, #576]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8018fd2:	683a      	ldr	r2, [r7, #0]
 8018fd4:	430a      	orrs	r2, r1
 8018fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8018fd8:	f7f9 f848 	bl	801206c <HAL_GetTick>
 8018fdc:	0003      	movs	r3, r0
 8018fde:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018fe0:	e009      	b.n	8018ff6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018fe2:	f7f9 f843 	bl	801206c <HAL_GetTick>
 8018fe6:	0002      	movs	r2, r0
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	1ad3      	subs	r3, r2, r3
 8018fec:	4a8a      	ldr	r2, [pc, #552]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 8018fee:	4293      	cmp	r3, r2
 8018ff0:	d901      	bls.n	8018ff6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8018ff2:	2303      	movs	r3, #3
 8018ff4:	e109      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018ff6:	4b87      	ldr	r3, [pc, #540]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	2201      	movs	r2, #1
 8018ffc:	4013      	ands	r3, r2
 8018ffe:	683a      	ldr	r2, [r7, #0]
 8019000:	429a      	cmp	r2, r3
 8019002:	d1ee      	bne.n	8018fe2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	2202      	movs	r2, #2
 801900a:	4013      	ands	r3, r2
 801900c:	d009      	beq.n	8019022 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801900e:	4b83      	ldr	r3, [pc, #524]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019010:	68db      	ldr	r3, [r3, #12]
 8019012:	22f0      	movs	r2, #240	@ 0xf0
 8019014:	4393      	bics	r3, r2
 8019016:	0019      	movs	r1, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	689a      	ldr	r2, [r3, #8]
 801901c:	4b7f      	ldr	r3, [pc, #508]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 801901e:	430a      	orrs	r2, r1
 8019020:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	2201      	movs	r2, #1
 8019028:	4013      	ands	r3, r2
 801902a:	d100      	bne.n	801902e <HAL_RCC_ClockConfig+0x8a>
 801902c:	e089      	b.n	8019142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	685b      	ldr	r3, [r3, #4]
 8019032:	2b02      	cmp	r3, #2
 8019034:	d107      	bne.n	8019046 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019036:	4b79      	ldr	r3, [pc, #484]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	2380      	movs	r3, #128	@ 0x80
 801903c:	029b      	lsls	r3, r3, #10
 801903e:	4013      	ands	r3, r2
 8019040:	d120      	bne.n	8019084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019042:	2301      	movs	r3, #1
 8019044:	e0e1      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	2b03      	cmp	r3, #3
 801904c:	d107      	bne.n	801905e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801904e:	4b73      	ldr	r3, [pc, #460]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	2380      	movs	r3, #128	@ 0x80
 8019054:	049b      	lsls	r3, r3, #18
 8019056:	4013      	ands	r3, r2
 8019058:	d114      	bne.n	8019084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801905a:	2301      	movs	r3, #1
 801905c:	e0d5      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	2b01      	cmp	r3, #1
 8019064:	d106      	bne.n	8019074 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8019066:	4b6d      	ldr	r3, [pc, #436]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	2204      	movs	r2, #4
 801906c:	4013      	ands	r3, r2
 801906e:	d109      	bne.n	8019084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019070:	2301      	movs	r3, #1
 8019072:	e0ca      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8019074:	4b69      	ldr	r3, [pc, #420]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019076:	681a      	ldr	r2, [r3, #0]
 8019078:	2380      	movs	r3, #128	@ 0x80
 801907a:	009b      	lsls	r3, r3, #2
 801907c:	4013      	ands	r3, r2
 801907e:	d101      	bne.n	8019084 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019080:	2301      	movs	r3, #1
 8019082:	e0c2      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019084:	4b65      	ldr	r3, [pc, #404]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019086:	68db      	ldr	r3, [r3, #12]
 8019088:	2203      	movs	r2, #3
 801908a:	4393      	bics	r3, r2
 801908c:	0019      	movs	r1, r3
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	685a      	ldr	r2, [r3, #4]
 8019092:	4b62      	ldr	r3, [pc, #392]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019094:	430a      	orrs	r2, r1
 8019096:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019098:	f7f8 ffe8 	bl	801206c <HAL_GetTick>
 801909c:	0003      	movs	r3, r0
 801909e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	2b02      	cmp	r3, #2
 80190a6:	d111      	bne.n	80190cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80190a8:	e009      	b.n	80190be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80190aa:	f7f8 ffdf 	bl	801206c <HAL_GetTick>
 80190ae:	0002      	movs	r2, r0
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	1ad3      	subs	r3, r2, r3
 80190b4:	4a58      	ldr	r2, [pc, #352]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 80190b6:	4293      	cmp	r3, r2
 80190b8:	d901      	bls.n	80190be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80190ba:	2303      	movs	r3, #3
 80190bc:	e0a5      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80190be:	4b57      	ldr	r3, [pc, #348]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80190c0:	68db      	ldr	r3, [r3, #12]
 80190c2:	220c      	movs	r2, #12
 80190c4:	4013      	ands	r3, r2
 80190c6:	2b08      	cmp	r3, #8
 80190c8:	d1ef      	bne.n	80190aa <HAL_RCC_ClockConfig+0x106>
 80190ca:	e03a      	b.n	8019142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	685b      	ldr	r3, [r3, #4]
 80190d0:	2b03      	cmp	r3, #3
 80190d2:	d111      	bne.n	80190f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80190d4:	e009      	b.n	80190ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80190d6:	f7f8 ffc9 	bl	801206c <HAL_GetTick>
 80190da:	0002      	movs	r2, r0
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	1ad3      	subs	r3, r2, r3
 80190e0:	4a4d      	ldr	r2, [pc, #308]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 80190e2:	4293      	cmp	r3, r2
 80190e4:	d901      	bls.n	80190ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80190e6:	2303      	movs	r3, #3
 80190e8:	e08f      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80190ea:	4b4c      	ldr	r3, [pc, #304]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80190ec:	68db      	ldr	r3, [r3, #12]
 80190ee:	220c      	movs	r2, #12
 80190f0:	4013      	ands	r3, r2
 80190f2:	2b0c      	cmp	r3, #12
 80190f4:	d1ef      	bne.n	80190d6 <HAL_RCC_ClockConfig+0x132>
 80190f6:	e024      	b.n	8019142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	685b      	ldr	r3, [r3, #4]
 80190fc:	2b01      	cmp	r3, #1
 80190fe:	d11b      	bne.n	8019138 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019100:	e009      	b.n	8019116 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019102:	f7f8 ffb3 	bl	801206c <HAL_GetTick>
 8019106:	0002      	movs	r2, r0
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	4a42      	ldr	r2, [pc, #264]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 801910e:	4293      	cmp	r3, r2
 8019110:	d901      	bls.n	8019116 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8019112:	2303      	movs	r3, #3
 8019114:	e079      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019116:	4b41      	ldr	r3, [pc, #260]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 8019118:	68db      	ldr	r3, [r3, #12]
 801911a:	220c      	movs	r2, #12
 801911c:	4013      	ands	r3, r2
 801911e:	2b04      	cmp	r3, #4
 8019120:	d1ef      	bne.n	8019102 <HAL_RCC_ClockConfig+0x15e>
 8019122:	e00e      	b.n	8019142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019124:	f7f8 ffa2 	bl	801206c <HAL_GetTick>
 8019128:	0002      	movs	r2, r0
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	1ad3      	subs	r3, r2, r3
 801912e:	4a3a      	ldr	r2, [pc, #232]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 8019130:	4293      	cmp	r3, r2
 8019132:	d901      	bls.n	8019138 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8019134:	2303      	movs	r3, #3
 8019136:	e068      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8019138:	4b38      	ldr	r3, [pc, #224]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 801913a:	68db      	ldr	r3, [r3, #12]
 801913c:	220c      	movs	r2, #12
 801913e:	4013      	ands	r3, r2
 8019140:	d1f0      	bne.n	8019124 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019142:	4b34      	ldr	r3, [pc, #208]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2201      	movs	r2, #1
 8019148:	4013      	ands	r3, r2
 801914a:	683a      	ldr	r2, [r7, #0]
 801914c:	429a      	cmp	r2, r3
 801914e:	d21e      	bcs.n	801918e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019150:	4b30      	ldr	r3, [pc, #192]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2201      	movs	r2, #1
 8019156:	4393      	bics	r3, r2
 8019158:	0019      	movs	r1, r3
 801915a:	4b2e      	ldr	r3, [pc, #184]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 801915c:	683a      	ldr	r2, [r7, #0]
 801915e:	430a      	orrs	r2, r1
 8019160:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8019162:	f7f8 ff83 	bl	801206c <HAL_GetTick>
 8019166:	0003      	movs	r3, r0
 8019168:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801916a:	e009      	b.n	8019180 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801916c:	f7f8 ff7e 	bl	801206c <HAL_GetTick>
 8019170:	0002      	movs	r2, r0
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	1ad3      	subs	r3, r2, r3
 8019176:	4a28      	ldr	r2, [pc, #160]	@ (8019218 <HAL_RCC_ClockConfig+0x274>)
 8019178:	4293      	cmp	r3, r2
 801917a:	d901      	bls.n	8019180 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801917c:	2303      	movs	r3, #3
 801917e:	e044      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019180:	4b24      	ldr	r3, [pc, #144]	@ (8019214 <HAL_RCC_ClockConfig+0x270>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	2201      	movs	r2, #1
 8019186:	4013      	ands	r3, r2
 8019188:	683a      	ldr	r2, [r7, #0]
 801918a:	429a      	cmp	r2, r3
 801918c:	d1ee      	bne.n	801916c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	2204      	movs	r2, #4
 8019194:	4013      	ands	r3, r2
 8019196:	d009      	beq.n	80191ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019198:	4b20      	ldr	r3, [pc, #128]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 801919a:	68db      	ldr	r3, [r3, #12]
 801919c:	4a20      	ldr	r2, [pc, #128]	@ (8019220 <HAL_RCC_ClockConfig+0x27c>)
 801919e:	4013      	ands	r3, r2
 80191a0:	0019      	movs	r1, r3
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	68da      	ldr	r2, [r3, #12]
 80191a6:	4b1d      	ldr	r3, [pc, #116]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80191a8:	430a      	orrs	r2, r1
 80191aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2208      	movs	r2, #8
 80191b2:	4013      	ands	r3, r2
 80191b4:	d00a      	beq.n	80191cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80191b6:	4b19      	ldr	r3, [pc, #100]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80191b8:	68db      	ldr	r3, [r3, #12]
 80191ba:	4a1a      	ldr	r2, [pc, #104]	@ (8019224 <HAL_RCC_ClockConfig+0x280>)
 80191bc:	4013      	ands	r3, r2
 80191be:	0019      	movs	r1, r3
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	691b      	ldr	r3, [r3, #16]
 80191c4:	00da      	lsls	r2, r3, #3
 80191c6:	4b15      	ldr	r3, [pc, #84]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80191c8:	430a      	orrs	r2, r1
 80191ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80191cc:	f000 f832 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 80191d0:	0001      	movs	r1, r0
 80191d2:	4b12      	ldr	r3, [pc, #72]	@ (801921c <HAL_RCC_ClockConfig+0x278>)
 80191d4:	68db      	ldr	r3, [r3, #12]
 80191d6:	091b      	lsrs	r3, r3, #4
 80191d8:	220f      	movs	r2, #15
 80191da:	4013      	ands	r3, r2
 80191dc:	4a12      	ldr	r2, [pc, #72]	@ (8019228 <HAL_RCC_ClockConfig+0x284>)
 80191de:	5cd3      	ldrb	r3, [r2, r3]
 80191e0:	000a      	movs	r2, r1
 80191e2:	40da      	lsrs	r2, r3
 80191e4:	4b11      	ldr	r3, [pc, #68]	@ (801922c <HAL_RCC_ClockConfig+0x288>)
 80191e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80191e8:	4b11      	ldr	r3, [pc, #68]	@ (8019230 <HAL_RCC_ClockConfig+0x28c>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	250b      	movs	r5, #11
 80191ee:	197c      	adds	r4, r7, r5
 80191f0:	0018      	movs	r0, r3
 80191f2:	f7f8 fef5 	bl	8011fe0 <HAL_InitTick>
 80191f6:	0003      	movs	r3, r0
 80191f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80191fa:	197b      	adds	r3, r7, r5
 80191fc:	781b      	ldrb	r3, [r3, #0]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d002      	beq.n	8019208 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8019202:	197b      	adds	r3, r7, r5
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	e000      	b.n	801920a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8019208:	2300      	movs	r3, #0
}
 801920a:	0018      	movs	r0, r3
 801920c:	46bd      	mov	sp, r7
 801920e:	b004      	add	sp, #16
 8019210:	bdb0      	pop	{r4, r5, r7, pc}
 8019212:	46c0      	nop			@ (mov r8, r8)
 8019214:	40022000 	.word	0x40022000
 8019218:	00001388 	.word	0x00001388
 801921c:	40021000 	.word	0x40021000
 8019220:	fffff8ff 	.word	0xfffff8ff
 8019224:	ffffc7ff 	.word	0xffffc7ff
 8019228:	0802b198 	.word	0x0802b198
 801922c:	200000e0 	.word	0x200000e0
 8019230:	200000f0 	.word	0x200000f0

08019234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019234:	b5b0      	push	{r4, r5, r7, lr}
 8019236:	b08e      	sub	sp, #56	@ 0x38
 8019238:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801923a:	4b4c      	ldr	r3, [pc, #304]	@ (801936c <HAL_RCC_GetSysClockFreq+0x138>)
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8019240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019242:	230c      	movs	r3, #12
 8019244:	4013      	ands	r3, r2
 8019246:	2b0c      	cmp	r3, #12
 8019248:	d014      	beq.n	8019274 <HAL_RCC_GetSysClockFreq+0x40>
 801924a:	d900      	bls.n	801924e <HAL_RCC_GetSysClockFreq+0x1a>
 801924c:	e07b      	b.n	8019346 <HAL_RCC_GetSysClockFreq+0x112>
 801924e:	2b04      	cmp	r3, #4
 8019250:	d002      	beq.n	8019258 <HAL_RCC_GetSysClockFreq+0x24>
 8019252:	2b08      	cmp	r3, #8
 8019254:	d00b      	beq.n	801926e <HAL_RCC_GetSysClockFreq+0x3a>
 8019256:	e076      	b.n	8019346 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8019258:	4b44      	ldr	r3, [pc, #272]	@ (801936c <HAL_RCC_GetSysClockFreq+0x138>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	2210      	movs	r2, #16
 801925e:	4013      	ands	r3, r2
 8019260:	d002      	beq.n	8019268 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8019262:	4b43      	ldr	r3, [pc, #268]	@ (8019370 <HAL_RCC_GetSysClockFreq+0x13c>)
 8019264:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8019266:	e07c      	b.n	8019362 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8019268:	4b42      	ldr	r3, [pc, #264]	@ (8019374 <HAL_RCC_GetSysClockFreq+0x140>)
 801926a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801926c:	e079      	b.n	8019362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801926e:	4b42      	ldr	r3, [pc, #264]	@ (8019378 <HAL_RCC_GetSysClockFreq+0x144>)
 8019270:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8019272:	e076      	b.n	8019362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8019274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019276:	0c9a      	lsrs	r2, r3, #18
 8019278:	230f      	movs	r3, #15
 801927a:	401a      	ands	r2, r3
 801927c:	4b3f      	ldr	r3, [pc, #252]	@ (801937c <HAL_RCC_GetSysClockFreq+0x148>)
 801927e:	5c9b      	ldrb	r3, [r3, r2]
 8019280:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8019282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019284:	0d9a      	lsrs	r2, r3, #22
 8019286:	2303      	movs	r3, #3
 8019288:	4013      	ands	r3, r2
 801928a:	3301      	adds	r3, #1
 801928c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801928e:	4b37      	ldr	r3, [pc, #220]	@ (801936c <HAL_RCC_GetSysClockFreq+0x138>)
 8019290:	68da      	ldr	r2, [r3, #12]
 8019292:	2380      	movs	r3, #128	@ 0x80
 8019294:	025b      	lsls	r3, r3, #9
 8019296:	4013      	ands	r3, r2
 8019298:	d01a      	beq.n	80192d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801929a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801929c:	61bb      	str	r3, [r7, #24]
 801929e:	2300      	movs	r3, #0
 80192a0:	61fb      	str	r3, [r7, #28]
 80192a2:	4a35      	ldr	r2, [pc, #212]	@ (8019378 <HAL_RCC_GetSysClockFreq+0x144>)
 80192a4:	2300      	movs	r3, #0
 80192a6:	69b8      	ldr	r0, [r7, #24]
 80192a8:	69f9      	ldr	r1, [r7, #28]
 80192aa:	f7e7 f989 	bl	80005c0 <__aeabi_lmul>
 80192ae:	0002      	movs	r2, r0
 80192b0:	000b      	movs	r3, r1
 80192b2:	0010      	movs	r0, r2
 80192b4:	0019      	movs	r1, r3
 80192b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b8:	613b      	str	r3, [r7, #16]
 80192ba:	2300      	movs	r3, #0
 80192bc:	617b      	str	r3, [r7, #20]
 80192be:	693a      	ldr	r2, [r7, #16]
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	f7e7 f95d 	bl	8000580 <__aeabi_uldivmod>
 80192c6:	0002      	movs	r2, r0
 80192c8:	000b      	movs	r3, r1
 80192ca:	0013      	movs	r3, r2
 80192cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80192ce:	e037      	b.n	8019340 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80192d0:	4b26      	ldr	r3, [pc, #152]	@ (801936c <HAL_RCC_GetSysClockFreq+0x138>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2210      	movs	r2, #16
 80192d6:	4013      	ands	r3, r2
 80192d8:	d01a      	beq.n	8019310 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80192da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192dc:	60bb      	str	r3, [r7, #8]
 80192de:	2300      	movs	r3, #0
 80192e0:	60fb      	str	r3, [r7, #12]
 80192e2:	4a23      	ldr	r2, [pc, #140]	@ (8019370 <HAL_RCC_GetSysClockFreq+0x13c>)
 80192e4:	2300      	movs	r3, #0
 80192e6:	68b8      	ldr	r0, [r7, #8]
 80192e8:	68f9      	ldr	r1, [r7, #12]
 80192ea:	f7e7 f969 	bl	80005c0 <__aeabi_lmul>
 80192ee:	0002      	movs	r2, r0
 80192f0:	000b      	movs	r3, r1
 80192f2:	0010      	movs	r0, r2
 80192f4:	0019      	movs	r1, r3
 80192f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192f8:	603b      	str	r3, [r7, #0]
 80192fa:	2300      	movs	r3, #0
 80192fc:	607b      	str	r3, [r7, #4]
 80192fe:	683a      	ldr	r2, [r7, #0]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f7e7 f93d 	bl	8000580 <__aeabi_uldivmod>
 8019306:	0002      	movs	r2, r0
 8019308:	000b      	movs	r3, r1
 801930a:	0013      	movs	r3, r2
 801930c:	637b      	str	r3, [r7, #52]	@ 0x34
 801930e:	e017      	b.n	8019340 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019312:	0018      	movs	r0, r3
 8019314:	2300      	movs	r3, #0
 8019316:	0019      	movs	r1, r3
 8019318:	4a16      	ldr	r2, [pc, #88]	@ (8019374 <HAL_RCC_GetSysClockFreq+0x140>)
 801931a:	2300      	movs	r3, #0
 801931c:	f7e7 f950 	bl	80005c0 <__aeabi_lmul>
 8019320:	0002      	movs	r2, r0
 8019322:	000b      	movs	r3, r1
 8019324:	0010      	movs	r0, r2
 8019326:	0019      	movs	r1, r3
 8019328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932a:	001c      	movs	r4, r3
 801932c:	2300      	movs	r3, #0
 801932e:	001d      	movs	r5, r3
 8019330:	0022      	movs	r2, r4
 8019332:	002b      	movs	r3, r5
 8019334:	f7e7 f924 	bl	8000580 <__aeabi_uldivmod>
 8019338:	0002      	movs	r2, r0
 801933a:	000b      	movs	r3, r1
 801933c:	0013      	movs	r3, r2
 801933e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8019340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019342:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8019344:	e00d      	b.n	8019362 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8019346:	4b09      	ldr	r3, [pc, #36]	@ (801936c <HAL_RCC_GetSysClockFreq+0x138>)
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	0b5b      	lsrs	r3, r3, #13
 801934c:	2207      	movs	r2, #7
 801934e:	4013      	ands	r3, r2
 8019350:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8019352:	6a3b      	ldr	r3, [r7, #32]
 8019354:	3301      	adds	r3, #1
 8019356:	2280      	movs	r2, #128	@ 0x80
 8019358:	0212      	lsls	r2, r2, #8
 801935a:	409a      	lsls	r2, r3
 801935c:	0013      	movs	r3, r2
 801935e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8019360:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8019362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8019364:	0018      	movs	r0, r3
 8019366:	46bd      	mov	sp, r7
 8019368:	b00e      	add	sp, #56	@ 0x38
 801936a:	bdb0      	pop	{r4, r5, r7, pc}
 801936c:	40021000 	.word	0x40021000
 8019370:	003d0900 	.word	0x003d0900
 8019374:	00f42400 	.word	0x00f42400
 8019378:	007a1200 	.word	0x007a1200
 801937c:	0802b1b0 	.word	0x0802b1b0

08019380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019384:	4b02      	ldr	r3, [pc, #8]	@ (8019390 <HAL_RCC_GetHCLKFreq+0x10>)
 8019386:	681b      	ldr	r3, [r3, #0]
}
 8019388:	0018      	movs	r0, r3
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}
 801938e:	46c0      	nop			@ (mov r8, r8)
 8019390:	200000e0 	.word	0x200000e0

08019394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019398:	f7ff fff2 	bl	8019380 <HAL_RCC_GetHCLKFreq>
 801939c:	0001      	movs	r1, r0
 801939e:	4b06      	ldr	r3, [pc, #24]	@ (80193b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80193a0:	68db      	ldr	r3, [r3, #12]
 80193a2:	0a1b      	lsrs	r3, r3, #8
 80193a4:	2207      	movs	r2, #7
 80193a6:	4013      	ands	r3, r2
 80193a8:	4a04      	ldr	r2, [pc, #16]	@ (80193bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80193aa:	5cd3      	ldrb	r3, [r2, r3]
 80193ac:	40d9      	lsrs	r1, r3
 80193ae:	000b      	movs	r3, r1
}
 80193b0:	0018      	movs	r0, r3
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	46c0      	nop			@ (mov r8, r8)
 80193b8:	40021000 	.word	0x40021000
 80193bc:	0802b1a8 	.word	0x0802b1a8

080193c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80193c4:	f7ff ffdc 	bl	8019380 <HAL_RCC_GetHCLKFreq>
 80193c8:	0001      	movs	r1, r0
 80193ca:	4b06      	ldr	r3, [pc, #24]	@ (80193e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80193cc:	68db      	ldr	r3, [r3, #12]
 80193ce:	0adb      	lsrs	r3, r3, #11
 80193d0:	2207      	movs	r2, #7
 80193d2:	4013      	ands	r3, r2
 80193d4:	4a04      	ldr	r2, [pc, #16]	@ (80193e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80193d6:	5cd3      	ldrb	r3, [r2, r3]
 80193d8:	40d9      	lsrs	r1, r3
 80193da:	000b      	movs	r3, r1
}
 80193dc:	0018      	movs	r0, r3
 80193de:	46bd      	mov	sp, r7
 80193e0:	bd80      	pop	{r7, pc}
 80193e2:	46c0      	nop			@ (mov r8, r8)
 80193e4:	40021000 	.word	0x40021000
 80193e8:	0802b1a8 	.word	0x0802b1a8

080193ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b086      	sub	sp, #24
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80193f4:	2017      	movs	r0, #23
 80193f6:	183b      	adds	r3, r7, r0
 80193f8:	2200      	movs	r2, #0
 80193fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2220      	movs	r2, #32
 8019402:	4013      	ands	r3, r2
 8019404:	d100      	bne.n	8019408 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8019406:	e0c7      	b.n	8019598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019408:	4b9b      	ldr	r3, [pc, #620]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801940a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801940c:	2380      	movs	r3, #128	@ 0x80
 801940e:	055b      	lsls	r3, r3, #21
 8019410:	4013      	ands	r3, r2
 8019412:	d109      	bne.n	8019428 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019414:	4b98      	ldr	r3, [pc, #608]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019418:	4b97      	ldr	r3, [pc, #604]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801941a:	2180      	movs	r1, #128	@ 0x80
 801941c:	0549      	lsls	r1, r1, #21
 801941e:	430a      	orrs	r2, r1
 8019420:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8019422:	183b      	adds	r3, r7, r0
 8019424:	2201      	movs	r2, #1
 8019426:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019428:	4b94      	ldr	r3, [pc, #592]	@ (801967c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801942a:	681a      	ldr	r2, [r3, #0]
 801942c:	2380      	movs	r3, #128	@ 0x80
 801942e:	005b      	lsls	r3, r3, #1
 8019430:	4013      	ands	r3, r2
 8019432:	d11a      	bne.n	801946a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019434:	4b91      	ldr	r3, [pc, #580]	@ (801967c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8019436:	681a      	ldr	r2, [r3, #0]
 8019438:	4b90      	ldr	r3, [pc, #576]	@ (801967c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801943a:	2180      	movs	r1, #128	@ 0x80
 801943c:	0049      	lsls	r1, r1, #1
 801943e:	430a      	orrs	r2, r1
 8019440:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019442:	f7f8 fe13 	bl	801206c <HAL_GetTick>
 8019446:	0003      	movs	r3, r0
 8019448:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801944a:	e008      	b.n	801945e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801944c:	f7f8 fe0e 	bl	801206c <HAL_GetTick>
 8019450:	0002      	movs	r2, r0
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	1ad3      	subs	r3, r2, r3
 8019456:	2b64      	cmp	r3, #100	@ 0x64
 8019458:	d901      	bls.n	801945e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801945a:	2303      	movs	r3, #3
 801945c:	e107      	b.n	801966e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801945e:	4b87      	ldr	r3, [pc, #540]	@ (801967c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8019460:	681a      	ldr	r2, [r3, #0]
 8019462:	2380      	movs	r3, #128	@ 0x80
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	4013      	ands	r3, r2
 8019468:	d0f0      	beq.n	801944c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801946a:	4b83      	ldr	r3, [pc, #524]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801946c:	681a      	ldr	r2, [r3, #0]
 801946e:	23c0      	movs	r3, #192	@ 0xc0
 8019470:	039b      	lsls	r3, r3, #14
 8019472:	4013      	ands	r3, r2
 8019474:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	685a      	ldr	r2, [r3, #4]
 801947a:	23c0      	movs	r3, #192	@ 0xc0
 801947c:	039b      	lsls	r3, r3, #14
 801947e:	4013      	ands	r3, r2
 8019480:	68fa      	ldr	r2, [r7, #12]
 8019482:	429a      	cmp	r2, r3
 8019484:	d013      	beq.n	80194ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	685a      	ldr	r2, [r3, #4]
 801948a:	23c0      	movs	r3, #192	@ 0xc0
 801948c:	029b      	lsls	r3, r3, #10
 801948e:	401a      	ands	r2, r3
 8019490:	23c0      	movs	r3, #192	@ 0xc0
 8019492:	029b      	lsls	r3, r3, #10
 8019494:	429a      	cmp	r2, r3
 8019496:	d10a      	bne.n	80194ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8019498:	4b77      	ldr	r3, [pc, #476]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801949a:	681a      	ldr	r2, [r3, #0]
 801949c:	2380      	movs	r3, #128	@ 0x80
 801949e:	029b      	lsls	r3, r3, #10
 80194a0:	401a      	ands	r2, r3
 80194a2:	2380      	movs	r3, #128	@ 0x80
 80194a4:	029b      	lsls	r3, r3, #10
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d101      	bne.n	80194ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80194aa:	2301      	movs	r3, #1
 80194ac:	e0df      	b.n	801966e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80194ae:	4b72      	ldr	r3, [pc, #456]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80194b2:	23c0      	movs	r3, #192	@ 0xc0
 80194b4:	029b      	lsls	r3, r3, #10
 80194b6:	4013      	ands	r3, r2
 80194b8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d03b      	beq.n	8019538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	685a      	ldr	r2, [r3, #4]
 80194c4:	23c0      	movs	r3, #192	@ 0xc0
 80194c6:	029b      	lsls	r3, r3, #10
 80194c8:	4013      	ands	r3, r2
 80194ca:	68fa      	ldr	r2, [r7, #12]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d033      	beq.n	8019538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	2220      	movs	r2, #32
 80194d6:	4013      	ands	r3, r2
 80194d8:	d02e      	beq.n	8019538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80194da:	4b67      	ldr	r3, [pc, #412]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194de:	4a68      	ldr	r2, [pc, #416]	@ (8019680 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80194e0:	4013      	ands	r3, r2
 80194e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80194e4:	4b64      	ldr	r3, [pc, #400]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80194e8:	4b63      	ldr	r3, [pc, #396]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194ea:	2180      	movs	r1, #128	@ 0x80
 80194ec:	0309      	lsls	r1, r1, #12
 80194ee:	430a      	orrs	r2, r1
 80194f0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80194f2:	4b61      	ldr	r3, [pc, #388]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80194f6:	4b60      	ldr	r3, [pc, #384]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194f8:	4962      	ldr	r1, [pc, #392]	@ (8019684 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80194fa:	400a      	ands	r2, r1
 80194fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80194fe:	4b5e      	ldr	r3, [pc, #376]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019500:	68fa      	ldr	r2, [r7, #12]
 8019502:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8019504:	68fa      	ldr	r2, [r7, #12]
 8019506:	2380      	movs	r3, #128	@ 0x80
 8019508:	005b      	lsls	r3, r3, #1
 801950a:	4013      	ands	r3, r2
 801950c:	d014      	beq.n	8019538 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801950e:	f7f8 fdad 	bl	801206c <HAL_GetTick>
 8019512:	0003      	movs	r3, r0
 8019514:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8019516:	e009      	b.n	801952c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019518:	f7f8 fda8 	bl	801206c <HAL_GetTick>
 801951c:	0002      	movs	r2, r0
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	1ad3      	subs	r3, r2, r3
 8019522:	4a59      	ldr	r2, [pc, #356]	@ (8019688 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d901      	bls.n	801952c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8019528:	2303      	movs	r3, #3
 801952a:	e0a0      	b.n	801966e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801952c:	4b52      	ldr	r3, [pc, #328]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801952e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019530:	2380      	movs	r3, #128	@ 0x80
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	4013      	ands	r3, r2
 8019536:	d0ef      	beq.n	8019518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	2220      	movs	r2, #32
 801953e:	4013      	ands	r3, r2
 8019540:	d01f      	beq.n	8019582 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	685a      	ldr	r2, [r3, #4]
 8019546:	23c0      	movs	r3, #192	@ 0xc0
 8019548:	029b      	lsls	r3, r3, #10
 801954a:	401a      	ands	r2, r3
 801954c:	23c0      	movs	r3, #192	@ 0xc0
 801954e:	029b      	lsls	r3, r3, #10
 8019550:	429a      	cmp	r2, r3
 8019552:	d10c      	bne.n	801956e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8019554:	4b48      	ldr	r3, [pc, #288]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	4a4c      	ldr	r2, [pc, #304]	@ (801968c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801955a:	4013      	ands	r3, r2
 801955c:	0019      	movs	r1, r3
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	685a      	ldr	r2, [r3, #4]
 8019562:	23c0      	movs	r3, #192	@ 0xc0
 8019564:	039b      	lsls	r3, r3, #14
 8019566:	401a      	ands	r2, r3
 8019568:	4b43      	ldr	r3, [pc, #268]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801956a:	430a      	orrs	r2, r1
 801956c:	601a      	str	r2, [r3, #0]
 801956e:	4b42      	ldr	r3, [pc, #264]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019570:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	685a      	ldr	r2, [r3, #4]
 8019576:	23c0      	movs	r3, #192	@ 0xc0
 8019578:	029b      	lsls	r3, r3, #10
 801957a:	401a      	ands	r2, r3
 801957c:	4b3e      	ldr	r3, [pc, #248]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801957e:	430a      	orrs	r2, r1
 8019580:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8019582:	2317      	movs	r3, #23
 8019584:	18fb      	adds	r3, r7, r3
 8019586:	781b      	ldrb	r3, [r3, #0]
 8019588:	2b01      	cmp	r3, #1
 801958a:	d105      	bne.n	8019598 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801958c:	4b3a      	ldr	r3, [pc, #232]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801958e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019590:	4b39      	ldr	r3, [pc, #228]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019592:	493f      	ldr	r1, [pc, #252]	@ (8019690 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8019594:	400a      	ands	r2, r1
 8019596:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2201      	movs	r2, #1
 801959e:	4013      	ands	r3, r2
 80195a0:	d009      	beq.n	80195b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80195a2:	4b35      	ldr	r3, [pc, #212]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80195a6:	2203      	movs	r2, #3
 80195a8:	4393      	bics	r3, r2
 80195aa:	0019      	movs	r1, r3
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	689a      	ldr	r2, [r3, #8]
 80195b0:	4b31      	ldr	r3, [pc, #196]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195b2:	430a      	orrs	r2, r1
 80195b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	2202      	movs	r2, #2
 80195bc:	4013      	ands	r3, r2
 80195be:	d009      	beq.n	80195d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80195c0:	4b2d      	ldr	r3, [pc, #180]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80195c4:	220c      	movs	r2, #12
 80195c6:	4393      	bics	r3, r2
 80195c8:	0019      	movs	r1, r3
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	68da      	ldr	r2, [r3, #12]
 80195ce:	4b2a      	ldr	r3, [pc, #168]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195d0:	430a      	orrs	r2, r1
 80195d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2204      	movs	r2, #4
 80195da:	4013      	ands	r3, r2
 80195dc:	d009      	beq.n	80195f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80195de:	4b26      	ldr	r3, [pc, #152]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80195e2:	4a2c      	ldr	r2, [pc, #176]	@ (8019694 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80195e4:	4013      	ands	r3, r2
 80195e6:	0019      	movs	r1, r3
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	691a      	ldr	r2, [r3, #16]
 80195ec:	4b22      	ldr	r3, [pc, #136]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195ee:	430a      	orrs	r2, r1
 80195f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	2208      	movs	r2, #8
 80195f8:	4013      	ands	r3, r2
 80195fa:	d009      	beq.n	8019610 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80195fc:	4b1e      	ldr	r3, [pc, #120]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019600:	4a25      	ldr	r2, [pc, #148]	@ (8019698 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8019602:	4013      	ands	r3, r2
 8019604:	0019      	movs	r1, r3
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	695a      	ldr	r2, [r3, #20]
 801960a:	4b1b      	ldr	r3, [pc, #108]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801960c:	430a      	orrs	r2, r1
 801960e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681a      	ldr	r2, [r3, #0]
 8019614:	2380      	movs	r3, #128	@ 0x80
 8019616:	005b      	lsls	r3, r3, #1
 8019618:	4013      	ands	r3, r2
 801961a:	d009      	beq.n	8019630 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801961c:	4b16      	ldr	r3, [pc, #88]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801961e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019620:	4a17      	ldr	r2, [pc, #92]	@ (8019680 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8019622:	4013      	ands	r3, r2
 8019624:	0019      	movs	r1, r3
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	699a      	ldr	r2, [r3, #24]
 801962a:	4b13      	ldr	r3, [pc, #76]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801962c:	430a      	orrs	r2, r1
 801962e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	2240      	movs	r2, #64	@ 0x40
 8019636:	4013      	ands	r3, r2
 8019638:	d009      	beq.n	801964e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801963a:	4b0f      	ldr	r3, [pc, #60]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801963c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801963e:	4a17      	ldr	r2, [pc, #92]	@ (801969c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8019640:	4013      	ands	r3, r2
 8019642:	0019      	movs	r1, r3
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6a1a      	ldr	r2, [r3, #32]
 8019648:	4b0b      	ldr	r3, [pc, #44]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801964a:	430a      	orrs	r2, r1
 801964c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2280      	movs	r2, #128	@ 0x80
 8019654:	4013      	ands	r3, r2
 8019656:	d009      	beq.n	801966c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8019658:	4b07      	ldr	r3, [pc, #28]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801965a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801965c:	4a10      	ldr	r2, [pc, #64]	@ (80196a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801965e:	4013      	ands	r3, r2
 8019660:	0019      	movs	r1, r3
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	69da      	ldr	r2, [r3, #28]
 8019666:	4b04      	ldr	r3, [pc, #16]	@ (8019678 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019668:	430a      	orrs	r2, r1
 801966a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801966c:	2300      	movs	r3, #0
}
 801966e:	0018      	movs	r0, r3
 8019670:	46bd      	mov	sp, r7
 8019672:	b006      	add	sp, #24
 8019674:	bd80      	pop	{r7, pc}
 8019676:	46c0      	nop			@ (mov r8, r8)
 8019678:	40021000 	.word	0x40021000
 801967c:	40007000 	.word	0x40007000
 8019680:	fffcffff 	.word	0xfffcffff
 8019684:	fff7ffff 	.word	0xfff7ffff
 8019688:	00001388 	.word	0x00001388
 801968c:	ffcfffff 	.word	0xffcfffff
 8019690:	efffffff 	.word	0xefffffff
 8019694:	fffff3ff 	.word	0xfffff3ff
 8019698:	ffffcfff 	.word	0xffffcfff
 801969c:	fbffffff 	.word	0xfbffffff
 80196a0:	fff3ffff 	.word	0xfff3ffff

080196a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80196a4:	b5b0      	push	{r4, r5, r7, lr}
 80196a6:	b084      	sub	sp, #16
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80196ac:	230f      	movs	r3, #15
 80196ae:	18fb      	adds	r3, r7, r3
 80196b0:	2201      	movs	r2, #1
 80196b2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d101      	bne.n	80196be <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80196ba:	2301      	movs	r3, #1
 80196bc:	e088      	b.n	80197d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2221      	movs	r2, #33	@ 0x21
 80196c2:	5c9b      	ldrb	r3, [r3, r2]
 80196c4:	b2db      	uxtb	r3, r3
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d107      	bne.n	80196da <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	2220      	movs	r2, #32
 80196ce:	2100      	movs	r1, #0
 80196d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	0018      	movs	r0, r3
 80196d6:	f7f2 fd7f 	bl	800c1d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	2221      	movs	r2, #33	@ 0x21
 80196de:	2102      	movs	r1, #2
 80196e0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	68db      	ldr	r3, [r3, #12]
 80196e8:	2210      	movs	r2, #16
 80196ea:	4013      	ands	r3, r2
 80196ec:	2b10      	cmp	r3, #16
 80196ee:	d05f      	beq.n	80197b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	22ca      	movs	r2, #202	@ 0xca
 80196f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2253      	movs	r2, #83	@ 0x53
 80196fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8019700:	250f      	movs	r5, #15
 8019702:	197c      	adds	r4, r7, r5
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	0018      	movs	r0, r3
 8019708:	f000 fa7c 	bl	8019c04 <RTC_EnterInitMode>
 801970c:	0003      	movs	r3, r0
 801970e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8019710:	0028      	movs	r0, r5
 8019712:	183b      	adds	r3, r7, r0
 8019714:	781b      	ldrb	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d12c      	bne.n	8019774 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	689a      	ldr	r2, [r3, #8]
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	492c      	ldr	r1, [pc, #176]	@ (80197d8 <HAL_RTC_Init+0x134>)
 8019726:	400a      	ands	r2, r1
 8019728:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	6899      	ldr	r1, [r3, #8]
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	685a      	ldr	r2, [r3, #4]
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	691b      	ldr	r3, [r3, #16]
 8019738:	431a      	orrs	r2, r3
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	699b      	ldr	r3, [r3, #24]
 801973e:	431a      	orrs	r2, r3
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	430a      	orrs	r2, r1
 8019746:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	687a      	ldr	r2, [r7, #4]
 801974e:	68d2      	ldr	r2, [r2, #12]
 8019750:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	6919      	ldr	r1, [r3, #16]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	689b      	ldr	r3, [r3, #8]
 801975c:	041a      	lsls	r2, r3, #16
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	430a      	orrs	r2, r1
 8019764:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8019766:	183c      	adds	r4, r7, r0
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	0018      	movs	r0, r3
 801976c:	f000 fa8e 	bl	8019c8c <RTC_ExitInitMode>
 8019770:	0003      	movs	r3, r0
 8019772:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8019774:	230f      	movs	r3, #15
 8019776:	18fb      	adds	r3, r7, r3
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d113      	bne.n	80197a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	2103      	movs	r1, #3
 801978a:	438a      	bics	r2, r1
 801978c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	69da      	ldr	r2, [r3, #28]
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	695b      	ldr	r3, [r3, #20]
 801979c:	431a      	orrs	r2, r3
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	430a      	orrs	r2, r1
 80197a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	22ff      	movs	r2, #255	@ 0xff
 80197ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80197ae:	e003      	b.n	80197b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80197b0:	230f      	movs	r3, #15
 80197b2:	18fb      	adds	r3, r7, r3
 80197b4:	2200      	movs	r2, #0
 80197b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80197b8:	230f      	movs	r3, #15
 80197ba:	18fb      	adds	r3, r7, r3
 80197bc:	781b      	ldrb	r3, [r3, #0]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d103      	bne.n	80197ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2221      	movs	r2, #33	@ 0x21
 80197c6:	2101      	movs	r1, #1
 80197c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80197ca:	230f      	movs	r3, #15
 80197cc:	18fb      	adds	r3, r7, r3
 80197ce:	781b      	ldrb	r3, [r3, #0]
}
 80197d0:	0018      	movs	r0, r3
 80197d2:	46bd      	mov	sp, r7
 80197d4:	b004      	add	sp, #16
 80197d6:	bdb0      	pop	{r4, r5, r7, pc}
 80197d8:	ff8fffbf 	.word	0xff8fffbf

080197dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80197dc:	b5b0      	push	{r4, r5, r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	60f8      	str	r0, [r7, #12]
 80197e4:	60b9      	str	r1, [r7, #8]
 80197e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80197e8:	2300      	movs	r3, #0
 80197ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	2220      	movs	r2, #32
 80197f0:	5c9b      	ldrb	r3, [r3, r2]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d101      	bne.n	80197fa <HAL_RTC_SetTime+0x1e>
 80197f6:	2302      	movs	r3, #2
 80197f8:	e092      	b.n	8019920 <HAL_RTC_SetTime+0x144>
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	2220      	movs	r2, #32
 80197fe:	2101      	movs	r1, #1
 8019800:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	2221      	movs	r2, #33	@ 0x21
 8019806:	2102      	movs	r1, #2
 8019808:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d125      	bne.n	801985c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	689b      	ldr	r3, [r3, #8]
 8019816:	2240      	movs	r2, #64	@ 0x40
 8019818:	4013      	ands	r3, r2
 801981a:	d102      	bne.n	8019822 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	2200      	movs	r2, #0
 8019820:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8019822:	68bb      	ldr	r3, [r7, #8]
 8019824:	781b      	ldrb	r3, [r3, #0]
 8019826:	0018      	movs	r0, r3
 8019828:	f000 fa5a 	bl	8019ce0 <RTC_ByteToBcd2>
 801982c:	0003      	movs	r3, r0
 801982e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	785b      	ldrb	r3, [r3, #1]
 8019834:	0018      	movs	r0, r3
 8019836:	f000 fa53 	bl	8019ce0 <RTC_ByteToBcd2>
 801983a:	0003      	movs	r3, r0
 801983c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801983e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	789b      	ldrb	r3, [r3, #2]
 8019844:	0018      	movs	r0, r3
 8019846:	f000 fa4b 	bl	8019ce0 <RTC_ByteToBcd2>
 801984a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801984c:	0022      	movs	r2, r4
 801984e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	78db      	ldrb	r3, [r3, #3]
 8019854:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8019856:	4313      	orrs	r3, r2
 8019858:	617b      	str	r3, [r7, #20]
 801985a:	e017      	b.n	801988c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	689b      	ldr	r3, [r3, #8]
 8019862:	2240      	movs	r2, #64	@ 0x40
 8019864:	4013      	ands	r3, r2
 8019866:	d102      	bne.n	801986e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	2200      	movs	r2, #0
 801986c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	781b      	ldrb	r3, [r3, #0]
 8019872:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	785b      	ldrb	r3, [r3, #1]
 8019878:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801987a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801987c:	68ba      	ldr	r2, [r7, #8]
 801987e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8019880:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8019882:	68bb      	ldr	r3, [r7, #8]
 8019884:	78db      	ldrb	r3, [r3, #3]
 8019886:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8019888:	4313      	orrs	r3, r2
 801988a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	22ca      	movs	r2, #202	@ 0xca
 8019892:	625a      	str	r2, [r3, #36]	@ 0x24
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	2253      	movs	r2, #83	@ 0x53
 801989a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801989c:	2513      	movs	r5, #19
 801989e:	197c      	adds	r4, r7, r5
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	0018      	movs	r0, r3
 80198a4:	f000 f9ae 	bl	8019c04 <RTC_EnterInitMode>
 80198a8:	0003      	movs	r3, r0
 80198aa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80198ac:	0028      	movs	r0, r5
 80198ae:	183b      	adds	r3, r7, r0
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d120      	bne.n	80198f8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	697a      	ldr	r2, [r7, #20]
 80198bc:	491a      	ldr	r1, [pc, #104]	@ (8019928 <HAL_RTC_SetTime+0x14c>)
 80198be:	400a      	ands	r2, r1
 80198c0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	689a      	ldr	r2, [r3, #8]
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	4917      	ldr	r1, [pc, #92]	@ (801992c <HAL_RTC_SetTime+0x150>)
 80198ce:	400a      	ands	r2, r1
 80198d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	6899      	ldr	r1, [r3, #8]
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	68da      	ldr	r2, [r3, #12]
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	691b      	ldr	r3, [r3, #16]
 80198e0:	431a      	orrs	r2, r3
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	430a      	orrs	r2, r1
 80198e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80198ea:	183c      	adds	r4, r7, r0
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	0018      	movs	r0, r3
 80198f0:	f000 f9cc 	bl	8019c8c <RTC_ExitInitMode>
 80198f4:	0003      	movs	r3, r0
 80198f6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80198f8:	2313      	movs	r3, #19
 80198fa:	18fb      	adds	r3, r7, r3
 80198fc:	781b      	ldrb	r3, [r3, #0]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d103      	bne.n	801990a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	2221      	movs	r2, #33	@ 0x21
 8019906:	2101      	movs	r1, #1
 8019908:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	22ff      	movs	r2, #255	@ 0xff
 8019910:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	2220      	movs	r2, #32
 8019916:	2100      	movs	r1, #0
 8019918:	5499      	strb	r1, [r3, r2]

  return status;
 801991a:	2313      	movs	r3, #19
 801991c:	18fb      	adds	r3, r7, r3
 801991e:	781b      	ldrb	r3, [r3, #0]
}
 8019920:	0018      	movs	r0, r3
 8019922:	46bd      	mov	sp, r7
 8019924:	b006      	add	sp, #24
 8019926:	bdb0      	pop	{r4, r5, r7, pc}
 8019928:	007f7f7f 	.word	0x007f7f7f
 801992c:	fffbffff 	.word	0xfffbffff

08019930 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8019930:	b580      	push	{r7, lr}
 8019932:	b086      	sub	sp, #24
 8019934:	af00      	add	r7, sp, #0
 8019936:	60f8      	str	r0, [r7, #12]
 8019938:	60b9      	str	r1, [r7, #8]
 801993a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801993c:	2300      	movs	r3, #0
 801993e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	691b      	ldr	r3, [r3, #16]
 8019950:	045b      	lsls	r3, r3, #17
 8019952:	0c5a      	lsrs	r2, r3, #17
 8019954:	68bb      	ldr	r3, [r7, #8]
 8019956:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	4a22      	ldr	r2, [pc, #136]	@ (80199e8 <HAL_RTC_GetTime+0xb8>)
 8019960:	4013      	ands	r3, r2
 8019962:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	0c1b      	lsrs	r3, r3, #16
 8019968:	b2db      	uxtb	r3, r3
 801996a:	223f      	movs	r2, #63	@ 0x3f
 801996c:	4013      	ands	r3, r2
 801996e:	b2da      	uxtb	r2, r3
 8019970:	68bb      	ldr	r3, [r7, #8]
 8019972:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	0a1b      	lsrs	r3, r3, #8
 8019978:	b2db      	uxtb	r3, r3
 801997a:	227f      	movs	r2, #127	@ 0x7f
 801997c:	4013      	ands	r3, r2
 801997e:	b2da      	uxtb	r2, r3
 8019980:	68bb      	ldr	r3, [r7, #8]
 8019982:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	b2db      	uxtb	r3, r3
 8019988:	227f      	movs	r2, #127	@ 0x7f
 801998a:	4013      	ands	r3, r2
 801998c:	b2da      	uxtb	r2, r3
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	0d9b      	lsrs	r3, r3, #22
 8019996:	b2db      	uxtb	r3, r3
 8019998:	2201      	movs	r2, #1
 801999a:	4013      	ands	r3, r2
 801999c:	b2da      	uxtb	r2, r3
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d11a      	bne.n	80199de <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80199a8:	68bb      	ldr	r3, [r7, #8]
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	0018      	movs	r0, r3
 80199ae:	f000 f9b8 	bl	8019d22 <RTC_Bcd2ToByte>
 80199b2:	0003      	movs	r3, r0
 80199b4:	001a      	movs	r2, r3
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	785b      	ldrb	r3, [r3, #1]
 80199be:	0018      	movs	r0, r3
 80199c0:	f000 f9af 	bl	8019d22 <RTC_Bcd2ToByte>
 80199c4:	0003      	movs	r3, r0
 80199c6:	001a      	movs	r2, r3
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	789b      	ldrb	r3, [r3, #2]
 80199d0:	0018      	movs	r0, r3
 80199d2:	f000 f9a6 	bl	8019d22 <RTC_Bcd2ToByte>
 80199d6:	0003      	movs	r3, r0
 80199d8:	001a      	movs	r2, r3
 80199da:	68bb      	ldr	r3, [r7, #8]
 80199dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80199de:	2300      	movs	r3, #0
}
 80199e0:	0018      	movs	r0, r3
 80199e2:	46bd      	mov	sp, r7
 80199e4:	b006      	add	sp, #24
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	007f7f7f 	.word	0x007f7f7f

080199ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80199ec:	b5b0      	push	{r4, r5, r7, lr}
 80199ee:	b086      	sub	sp, #24
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	60f8      	str	r0, [r7, #12]
 80199f4:	60b9      	str	r1, [r7, #8]
 80199f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80199f8:	2300      	movs	r3, #0
 80199fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	2220      	movs	r2, #32
 8019a00:	5c9b      	ldrb	r3, [r3, r2]
 8019a02:	2b01      	cmp	r3, #1
 8019a04:	d101      	bne.n	8019a0a <HAL_RTC_SetDate+0x1e>
 8019a06:	2302      	movs	r3, #2
 8019a08:	e07e      	b.n	8019b08 <HAL_RTC_SetDate+0x11c>
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	2220      	movs	r2, #32
 8019a0e:	2101      	movs	r1, #1
 8019a10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2221      	movs	r2, #33	@ 0x21
 8019a16:	2102      	movs	r1, #2
 8019a18:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d10e      	bne.n	8019a3e <HAL_RTC_SetDate+0x52>
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	785b      	ldrb	r3, [r3, #1]
 8019a24:	001a      	movs	r2, r3
 8019a26:	2310      	movs	r3, #16
 8019a28:	4013      	ands	r3, r2
 8019a2a:	d008      	beq.n	8019a3e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	785b      	ldrb	r3, [r3, #1]
 8019a30:	2210      	movs	r2, #16
 8019a32:	4393      	bics	r3, r2
 8019a34:	b2db      	uxtb	r3, r3
 8019a36:	330a      	adds	r3, #10
 8019a38:	b2da      	uxtb	r2, r3
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d11c      	bne.n	8019a7e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	78db      	ldrb	r3, [r3, #3]
 8019a48:	0018      	movs	r0, r3
 8019a4a:	f000 f949 	bl	8019ce0 <RTC_ByteToBcd2>
 8019a4e:	0003      	movs	r3, r0
 8019a50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	785b      	ldrb	r3, [r3, #1]
 8019a56:	0018      	movs	r0, r3
 8019a58:	f000 f942 	bl	8019ce0 <RTC_ByteToBcd2>
 8019a5c:	0003      	movs	r3, r0
 8019a5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019a60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	789b      	ldrb	r3, [r3, #2]
 8019a66:	0018      	movs	r0, r3
 8019a68:	f000 f93a 	bl	8019ce0 <RTC_ByteToBcd2>
 8019a6c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019a6e:	0022      	movs	r2, r4
 8019a70:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8019a72:	68bb      	ldr	r3, [r7, #8]
 8019a74:	781b      	ldrb	r3, [r3, #0]
 8019a76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019a78:	4313      	orrs	r3, r2
 8019a7a:	617b      	str	r3, [r7, #20]
 8019a7c:	e00e      	b.n	8019a9c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019a7e:	68bb      	ldr	r3, [r7, #8]
 8019a80:	78db      	ldrb	r3, [r3, #3]
 8019a82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	785b      	ldrb	r3, [r3, #1]
 8019a88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019a8a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8019a8c:	68ba      	ldr	r2, [r7, #8]
 8019a8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019a90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019a98:	4313      	orrs	r3, r2
 8019a9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	22ca      	movs	r2, #202	@ 0xca
 8019aa2:	625a      	str	r2, [r3, #36]	@ 0x24
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	2253      	movs	r2, #83	@ 0x53
 8019aaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8019aac:	2513      	movs	r5, #19
 8019aae:	197c      	adds	r4, r7, r5
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	0018      	movs	r0, r3
 8019ab4:	f000 f8a6 	bl	8019c04 <RTC_EnterInitMode>
 8019ab8:	0003      	movs	r3, r0
 8019aba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8019abc:	0028      	movs	r0, r5
 8019abe:	183b      	adds	r3, r7, r0
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d10c      	bne.n	8019ae0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	697a      	ldr	r2, [r7, #20]
 8019acc:	4910      	ldr	r1, [pc, #64]	@ (8019b10 <HAL_RTC_SetDate+0x124>)
 8019ace:	400a      	ands	r2, r1
 8019ad0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8019ad2:	183c      	adds	r4, r7, r0
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	0018      	movs	r0, r3
 8019ad8:	f000 f8d8 	bl	8019c8c <RTC_ExitInitMode>
 8019adc:	0003      	movs	r3, r0
 8019ade:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8019ae0:	2313      	movs	r3, #19
 8019ae2:	18fb      	adds	r3, r7, r3
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d103      	bne.n	8019af2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	2221      	movs	r2, #33	@ 0x21
 8019aee:	2101      	movs	r1, #1
 8019af0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	22ff      	movs	r2, #255	@ 0xff
 8019af8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2220      	movs	r2, #32
 8019afe:	2100      	movs	r1, #0
 8019b00:	5499      	strb	r1, [r3, r2]

  return status;
 8019b02:	2313      	movs	r3, #19
 8019b04:	18fb      	adds	r3, r7, r3
 8019b06:	781b      	ldrb	r3, [r3, #0]
}
 8019b08:	0018      	movs	r0, r3
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	b006      	add	sp, #24
 8019b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8019b10:	00ffff3f 	.word	0x00ffff3f

08019b14 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b086      	sub	sp, #24
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8019b20:	2300      	movs	r3, #0
 8019b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	4a21      	ldr	r2, [pc, #132]	@ (8019bb0 <HAL_RTC_GetDate+0x9c>)
 8019b2c:	4013      	ands	r3, r2
 8019b2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	0c1b      	lsrs	r3, r3, #16
 8019b34:	b2da      	uxtb	r2, r3
 8019b36:	68bb      	ldr	r3, [r7, #8]
 8019b38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	0a1b      	lsrs	r3, r3, #8
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	221f      	movs	r2, #31
 8019b42:	4013      	ands	r3, r2
 8019b44:	b2da      	uxtb	r2, r3
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	b2db      	uxtb	r3, r3
 8019b4e:	223f      	movs	r2, #63	@ 0x3f
 8019b50:	4013      	ands	r3, r2
 8019b52:	b2da      	uxtb	r2, r3
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	0b5b      	lsrs	r3, r3, #13
 8019b5c:	b2db      	uxtb	r3, r3
 8019b5e:	2207      	movs	r2, #7
 8019b60:	4013      	ands	r3, r2
 8019b62:	b2da      	uxtb	r2, r3
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d11a      	bne.n	8019ba4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	78db      	ldrb	r3, [r3, #3]
 8019b72:	0018      	movs	r0, r3
 8019b74:	f000 f8d5 	bl	8019d22 <RTC_Bcd2ToByte>
 8019b78:	0003      	movs	r3, r0
 8019b7a:	001a      	movs	r2, r3
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	785b      	ldrb	r3, [r3, #1]
 8019b84:	0018      	movs	r0, r3
 8019b86:	f000 f8cc 	bl	8019d22 <RTC_Bcd2ToByte>
 8019b8a:	0003      	movs	r3, r0
 8019b8c:	001a      	movs	r2, r3
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	789b      	ldrb	r3, [r3, #2]
 8019b96:	0018      	movs	r0, r3
 8019b98:	f000 f8c3 	bl	8019d22 <RTC_Bcd2ToByte>
 8019b9c:	0003      	movs	r3, r0
 8019b9e:	001a      	movs	r2, r3
 8019ba0:	68bb      	ldr	r3, [r7, #8]
 8019ba2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8019ba4:	2300      	movs	r3, #0
}
 8019ba6:	0018      	movs	r0, r3
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	b006      	add	sp, #24
 8019bac:	bd80      	pop	{r7, pc}
 8019bae:	46c0      	nop			@ (mov r8, r8)
 8019bb0:	00ffff3f 	.word	0x00ffff3f

08019bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8019c00 <HAL_RTC_WaitForSynchro+0x4c>)
 8019bc6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019bc8:	f7f8 fa50 	bl	801206c <HAL_GetTick>
 8019bcc:	0003      	movs	r3, r0
 8019bce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019bd0:	e00a      	b.n	8019be8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019bd2:	f7f8 fa4b 	bl	801206c <HAL_GetTick>
 8019bd6:	0002      	movs	r2, r0
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	1ad2      	subs	r2, r2, r3
 8019bdc:	23fa      	movs	r3, #250	@ 0xfa
 8019bde:	009b      	lsls	r3, r3, #2
 8019be0:	429a      	cmp	r2, r3
 8019be2:	d901      	bls.n	8019be8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8019be4:	2303      	movs	r3, #3
 8019be6:	e006      	b.n	8019bf6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	68db      	ldr	r3, [r3, #12]
 8019bee:	2220      	movs	r2, #32
 8019bf0:	4013      	ands	r3, r2
 8019bf2:	d0ee      	beq.n	8019bd2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8019bf4:	2300      	movs	r3, #0
}
 8019bf6:	0018      	movs	r0, r3
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	b004      	add	sp, #16
 8019bfc:	bd80      	pop	{r7, pc}
 8019bfe:	46c0      	nop			@ (mov r8, r8)
 8019c00:	0001ff5f 	.word	0x0001ff5f

08019c04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b084      	sub	sp, #16
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8019c10:	230f      	movs	r3, #15
 8019c12:	18fb      	adds	r3, r7, r3
 8019c14:	2200      	movs	r2, #0
 8019c16:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	68db      	ldr	r3, [r3, #12]
 8019c1e:	2240      	movs	r2, #64	@ 0x40
 8019c20:	4013      	ands	r3, r2
 8019c22:	d12c      	bne.n	8019c7e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	68da      	ldr	r2, [r3, #12]
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2180      	movs	r1, #128	@ 0x80
 8019c30:	430a      	orrs	r2, r1
 8019c32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019c34:	f7f8 fa1a 	bl	801206c <HAL_GetTick>
 8019c38:	0003      	movs	r3, r0
 8019c3a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019c3c:	e014      	b.n	8019c68 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019c3e:	f7f8 fa15 	bl	801206c <HAL_GetTick>
 8019c42:	0002      	movs	r2, r0
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	1ad2      	subs	r2, r2, r3
 8019c48:	200f      	movs	r0, #15
 8019c4a:	183b      	adds	r3, r7, r0
 8019c4c:	1839      	adds	r1, r7, r0
 8019c4e:	7809      	ldrb	r1, [r1, #0]
 8019c50:	7019      	strb	r1, [r3, #0]
 8019c52:	23fa      	movs	r3, #250	@ 0xfa
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d906      	bls.n	8019c68 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2221      	movs	r2, #33	@ 0x21
 8019c5e:	2104      	movs	r1, #4
 8019c60:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8019c62:	183b      	adds	r3, r7, r0
 8019c64:	2201      	movs	r2, #1
 8019c66:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	68db      	ldr	r3, [r3, #12]
 8019c6e:	2240      	movs	r2, #64	@ 0x40
 8019c70:	4013      	ands	r3, r2
 8019c72:	d104      	bne.n	8019c7e <RTC_EnterInitMode+0x7a>
 8019c74:	230f      	movs	r3, #15
 8019c76:	18fb      	adds	r3, r7, r3
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	2b01      	cmp	r3, #1
 8019c7c:	d1df      	bne.n	8019c3e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8019c7e:	230f      	movs	r3, #15
 8019c80:	18fb      	adds	r3, r7, r3
 8019c82:	781b      	ldrb	r3, [r3, #0]
}
 8019c84:	0018      	movs	r0, r3
 8019c86:	46bd      	mov	sp, r7
 8019c88:	b004      	add	sp, #16
 8019c8a:	bd80      	pop	{r7, pc}

08019c8c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8019c8c:	b590      	push	{r4, r7, lr}
 8019c8e:	b085      	sub	sp, #20
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019c94:	240f      	movs	r4, #15
 8019c96:	193b      	adds	r3, r7, r4
 8019c98:	2200      	movs	r2, #0
 8019c9a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	68da      	ldr	r2, [r3, #12]
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	2180      	movs	r1, #128	@ 0x80
 8019ca8:	438a      	bics	r2, r1
 8019caa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	689b      	ldr	r3, [r3, #8]
 8019cb2:	2220      	movs	r2, #32
 8019cb4:	4013      	ands	r3, r2
 8019cb6:	d10c      	bne.n	8019cd2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	0018      	movs	r0, r3
 8019cbc:	f7ff ff7a 	bl	8019bb4 <HAL_RTC_WaitForSynchro>
 8019cc0:	1e03      	subs	r3, r0, #0
 8019cc2:	d006      	beq.n	8019cd2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2221      	movs	r2, #33	@ 0x21
 8019cc8:	2104      	movs	r1, #4
 8019cca:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8019ccc:	193b      	adds	r3, r7, r4
 8019cce:	2201      	movs	r2, #1
 8019cd0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8019cd2:	230f      	movs	r3, #15
 8019cd4:	18fb      	adds	r3, r7, r3
 8019cd6:	781b      	ldrb	r3, [r3, #0]
}
 8019cd8:	0018      	movs	r0, r3
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	b005      	add	sp, #20
 8019cde:	bd90      	pop	{r4, r7, pc}

08019ce0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b084      	sub	sp, #16
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	0002      	movs	r2, r0
 8019ce8:	1dfb      	adds	r3, r7, #7
 8019cea:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8019cec:	2300      	movs	r3, #0
 8019cee:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8019cf0:	e007      	b.n	8019d02 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	3301      	adds	r3, #1
 8019cf6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8019cf8:	1dfb      	adds	r3, r7, #7
 8019cfa:	1dfa      	adds	r2, r7, #7
 8019cfc:	7812      	ldrb	r2, [r2, #0]
 8019cfe:	3a0a      	subs	r2, #10
 8019d00:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8019d02:	1dfb      	adds	r3, r7, #7
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	2b09      	cmp	r3, #9
 8019d08:	d8f3      	bhi.n	8019cf2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	b2db      	uxtb	r3, r3
 8019d0e:	011b      	lsls	r3, r3, #4
 8019d10:	b2da      	uxtb	r2, r3
 8019d12:	1dfb      	adds	r3, r7, #7
 8019d14:	781b      	ldrb	r3, [r3, #0]
 8019d16:	4313      	orrs	r3, r2
 8019d18:	b2db      	uxtb	r3, r3
}
 8019d1a:	0018      	movs	r0, r3
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	b004      	add	sp, #16
 8019d20:	bd80      	pop	{r7, pc}

08019d22 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8019d22:	b580      	push	{r7, lr}
 8019d24:	b084      	sub	sp, #16
 8019d26:	af00      	add	r7, sp, #0
 8019d28:	0002      	movs	r2, r0
 8019d2a:	1dfb      	adds	r3, r7, #7
 8019d2c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8019d32:	1dfb      	adds	r3, r7, #7
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	091b      	lsrs	r3, r3, #4
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	001a      	movs	r2, r3
 8019d3c:	0013      	movs	r3, r2
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	189b      	adds	r3, r3, r2
 8019d42:	005b      	lsls	r3, r3, #1
 8019d44:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	b2da      	uxtb	r2, r3
 8019d4a:	1dfb      	adds	r3, r7, #7
 8019d4c:	781b      	ldrb	r3, [r3, #0]
 8019d4e:	210f      	movs	r1, #15
 8019d50:	400b      	ands	r3, r1
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	18d3      	adds	r3, r2, r3
 8019d56:	b2db      	uxtb	r3, r3
}
 8019d58:	0018      	movs	r0, r3
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	b004      	add	sp, #16
 8019d5e:	bd80      	pop	{r7, pc}

08019d60 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b086      	sub	sp, #24
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	60f8      	str	r0, [r7, #12]
 8019d68:	60b9      	str	r1, [r7, #8]
 8019d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019d6c:	4b64      	ldr	r3, [pc, #400]	@ (8019f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	22fa      	movs	r2, #250	@ 0xfa
 8019d72:	01d1      	lsls	r1, r2, #7
 8019d74:	0018      	movs	r0, r3
 8019d76:	f7e6 fa15 	bl	80001a4 <__udivsi3>
 8019d7a:	0003      	movs	r3, r0
 8019d7c:	001a      	movs	r2, r3
 8019d7e:	0013      	movs	r3, r2
 8019d80:	015b      	lsls	r3, r3, #5
 8019d82:	1a9b      	subs	r3, r3, r2
 8019d84:	009b      	lsls	r3, r3, #2
 8019d86:	189b      	adds	r3, r3, r2
 8019d88:	00db      	lsls	r3, r3, #3
 8019d8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	2220      	movs	r2, #32
 8019d90:	5c9b      	ldrb	r3, [r3, r2]
 8019d92:	2b01      	cmp	r3, #1
 8019d94:	d101      	bne.n	8019d9a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8019d96:	2302      	movs	r3, #2
 8019d98:	e0ad      	b.n	8019ef6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	2220      	movs	r2, #32
 8019d9e:	2101      	movs	r1, #1
 8019da0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	2221      	movs	r2, #33	@ 0x21
 8019da6:	2102      	movs	r1, #2
 8019da8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	22ca      	movs	r2, #202	@ 0xca
 8019db0:	625a      	str	r2, [r3, #36]	@ 0x24
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	2253      	movs	r2, #83	@ 0x53
 8019db8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	689a      	ldr	r2, [r3, #8]
 8019dc0:	2380      	movs	r3, #128	@ 0x80
 8019dc2:	00db      	lsls	r3, r3, #3
 8019dc4:	4013      	ands	r3, r2
 8019dc6:	d019      	beq.n	8019dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8019dc8:	697b      	ldr	r3, [r7, #20]
 8019dca:	3b01      	subs	r3, #1
 8019dcc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8019dce:	697b      	ldr	r3, [r7, #20]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d10d      	bne.n	8019df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	22ff      	movs	r2, #255	@ 0xff
 8019dda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	2221      	movs	r2, #33	@ 0x21
 8019de0:	2103      	movs	r1, #3
 8019de2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	2220      	movs	r2, #32
 8019de8:	2100      	movs	r1, #0
 8019dea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019dec:	2303      	movs	r3, #3
 8019dee:	e082      	b.n	8019ef6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	68db      	ldr	r3, [r3, #12]
 8019df6:	2204      	movs	r2, #4
 8019df8:	4013      	ands	r3, r2
 8019dfa:	d1e5      	bne.n	8019dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	689a      	ldr	r2, [r3, #8]
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	493f      	ldr	r1, [pc, #252]	@ (8019f04 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8019e08:	400a      	ands	r2, r1
 8019e0a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	22ff      	movs	r2, #255	@ 0xff
 8019e14:	401a      	ands	r2, r3
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	493b      	ldr	r1, [pc, #236]	@ (8019f08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8019e1c:	430a      	orrs	r2, r1
 8019e1e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019e20:	4b37      	ldr	r3, [pc, #220]	@ (8019f00 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	22fa      	movs	r2, #250	@ 0xfa
 8019e26:	01d1      	lsls	r1, r2, #7
 8019e28:	0018      	movs	r0, r3
 8019e2a:	f7e6 f9bb 	bl	80001a4 <__udivsi3>
 8019e2e:	0003      	movs	r3, r0
 8019e30:	001a      	movs	r2, r3
 8019e32:	0013      	movs	r3, r2
 8019e34:	015b      	lsls	r3, r3, #5
 8019e36:	1a9b      	subs	r3, r3, r2
 8019e38:	009b      	lsls	r3, r3, #2
 8019e3a:	189b      	adds	r3, r3, r2
 8019e3c:	00db      	lsls	r3, r3, #3
 8019e3e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8019e40:	697b      	ldr	r3, [r7, #20]
 8019e42:	3b01      	subs	r3, #1
 8019e44:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d10d      	bne.n	8019e68 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	22ff      	movs	r2, #255	@ 0xff
 8019e52:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	2221      	movs	r2, #33	@ 0x21
 8019e58:	2103      	movs	r1, #3
 8019e5a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	2220      	movs	r2, #32
 8019e60:	2100      	movs	r1, #0
 8019e62:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8019e64:	2303      	movs	r3, #3
 8019e66:	e046      	b.n	8019ef6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	68db      	ldr	r3, [r3, #12]
 8019e6e:	2204      	movs	r2, #4
 8019e70:	4013      	ands	r3, r2
 8019e72:	d0e5      	beq.n	8019e40 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	689a      	ldr	r2, [r3, #8]
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	2107      	movs	r1, #7
 8019e80:	438a      	bics	r2, r1
 8019e82:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	6899      	ldr	r1, [r3, #8]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	687a      	ldr	r2, [r7, #4]
 8019e90:	430a      	orrs	r2, r1
 8019e92:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	68ba      	ldr	r2, [r7, #8]
 8019e9a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8019e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8019f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019e9e:	681a      	ldr	r2, [r3, #0]
 8019ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8019f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019ea2:	2180      	movs	r1, #128	@ 0x80
 8019ea4:	0349      	lsls	r1, r1, #13
 8019ea6:	430a      	orrs	r2, r1
 8019ea8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8019eaa:	4b18      	ldr	r3, [pc, #96]	@ (8019f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019eac:	689a      	ldr	r2, [r3, #8]
 8019eae:	4b17      	ldr	r3, [pc, #92]	@ (8019f0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019eb0:	2180      	movs	r1, #128	@ 0x80
 8019eb2:	0349      	lsls	r1, r1, #13
 8019eb4:	430a      	orrs	r2, r1
 8019eb6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	689a      	ldr	r2, [r3, #8]
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	2180      	movs	r1, #128	@ 0x80
 8019ec4:	01c9      	lsls	r1, r1, #7
 8019ec6:	430a      	orrs	r2, r1
 8019ec8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	689a      	ldr	r2, [r3, #8]
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2180      	movs	r1, #128	@ 0x80
 8019ed6:	00c9      	lsls	r1, r1, #3
 8019ed8:	430a      	orrs	r2, r1
 8019eda:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	22ff      	movs	r2, #255	@ 0xff
 8019ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	2221      	movs	r2, #33	@ 0x21
 8019ee8:	2101      	movs	r1, #1
 8019eea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	2220      	movs	r2, #32
 8019ef0:	2100      	movs	r1, #0
 8019ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019ef4:	2300      	movs	r3, #0
}
 8019ef6:	0018      	movs	r0, r3
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	b006      	add	sp, #24
 8019efc:	bd80      	pop	{r7, pc}
 8019efe:	46c0      	nop			@ (mov r8, r8)
 8019f00:	200000e0 	.word	0x200000e0
 8019f04:	fffffbff 	.word	0xfffffbff
 8019f08:	fffffb7f 	.word	0xfffffb7f
 8019f0c:	40010400 	.word	0x40010400

08019f10 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b084      	sub	sp, #16
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019f18:	2300      	movs	r3, #0
 8019f1a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2220      	movs	r2, #32
 8019f20:	5c9b      	ldrb	r3, [r3, r2]
 8019f22:	2b01      	cmp	r3, #1
 8019f24:	d101      	bne.n	8019f2a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8019f26:	2302      	movs	r3, #2
 8019f28:	e04e      	b.n	8019fc8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	2220      	movs	r2, #32
 8019f2e:	2101      	movs	r1, #1
 8019f30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2221      	movs	r2, #33	@ 0x21
 8019f36:	2102      	movs	r1, #2
 8019f38:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	22ca      	movs	r2, #202	@ 0xca
 8019f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	2253      	movs	r2, #83	@ 0x53
 8019f48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	689a      	ldr	r2, [r3, #8]
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	491e      	ldr	r1, [pc, #120]	@ (8019fd0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8019f56:	400a      	ands	r2, r1
 8019f58:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	689a      	ldr	r2, [r3, #8]
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	491b      	ldr	r1, [pc, #108]	@ (8019fd4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8019f66:	400a      	ands	r2, r1
 8019f68:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019f6a:	f7f8 f87f 	bl	801206c <HAL_GetTick>
 8019f6e:	0003      	movs	r3, r0
 8019f70:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019f72:	e016      	b.n	8019fa2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019f74:	f7f8 f87a 	bl	801206c <HAL_GetTick>
 8019f78:	0002      	movs	r2, r0
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	1ad2      	subs	r2, r2, r3
 8019f7e:	23fa      	movs	r3, #250	@ 0xfa
 8019f80:	009b      	lsls	r3, r3, #2
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d90d      	bls.n	8019fa2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	22ff      	movs	r2, #255	@ 0xff
 8019f8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	2221      	movs	r2, #33	@ 0x21
 8019f92:	2103      	movs	r1, #3
 8019f94:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	2220      	movs	r2, #32
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8019f9e:	2303      	movs	r3, #3
 8019fa0:	e012      	b.n	8019fc8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	68db      	ldr	r3, [r3, #12]
 8019fa8:	2204      	movs	r2, #4
 8019faa:	4013      	ands	r3, r2
 8019fac:	d0e2      	beq.n	8019f74 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	22ff      	movs	r2, #255	@ 0xff
 8019fb4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	2221      	movs	r2, #33	@ 0x21
 8019fba:	2101      	movs	r1, #1
 8019fbc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	2220      	movs	r2, #32
 8019fc2:	2100      	movs	r1, #0
 8019fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019fc6:	2300      	movs	r3, #0
}
 8019fc8:	0018      	movs	r0, r3
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	b004      	add	sp, #16
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	fffffbff 	.word	0xfffffbff
 8019fd4:	ffffbfff 	.word	0xffffbfff

08019fd8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8019fe0:	4b13      	ldr	r3, [pc, #76]	@ (801a030 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8019fe2:	2280      	movs	r2, #128	@ 0x80
 8019fe4:	0352      	lsls	r2, r2, #13
 8019fe6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	689a      	ldr	r2, [r3, #8]
 8019fee:	2380      	movs	r3, #128	@ 0x80
 8019ff0:	01db      	lsls	r3, r3, #7
 8019ff2:	4013      	ands	r3, r2
 8019ff4:	d014      	beq.n	801a020 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	68da      	ldr	r2, [r3, #12]
 8019ffc:	2380      	movs	r3, #128	@ 0x80
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	4013      	ands	r3, r2
 801a002:	d00d      	beq.n	801a020 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	68db      	ldr	r3, [r3, #12]
 801a00a:	22ff      	movs	r2, #255	@ 0xff
 801a00c:	401a      	ands	r2, r3
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	4908      	ldr	r1, [pc, #32]	@ (801a034 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801a014:	430a      	orrs	r2, r1
 801a016:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	0018      	movs	r0, r3
 801a01c:	f000 f80c 	bl	801a038 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	2221      	movs	r2, #33	@ 0x21
 801a024:	2101      	movs	r1, #1
 801a026:	5499      	strb	r1, [r3, r2]
}
 801a028:	46c0      	nop			@ (mov r8, r8)
 801a02a:	46bd      	mov	sp, r7
 801a02c:	b002      	add	sp, #8
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	40010400 	.word	0x40010400
 801a034:	fffffb7f 	.word	0xfffffb7f

0801a038 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801a040:	46c0      	nop			@ (mov r8, r8)
 801a042:	46bd      	mov	sp, r7
 801a044:	b002      	add	sp, #8
 801a046:	bd80      	pop	{r7, pc}

0801a048 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b086      	sub	sp, #24
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	60f8      	str	r0, [r7, #12]
 801a050:	60b9      	str	r1, [r7, #8]
 801a052:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801a054:	2300      	movs	r3, #0
 801a056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	3350      	adds	r3, #80	@ 0x50
 801a05e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	009b      	lsls	r3, r3, #2
 801a064:	697a      	ldr	r2, [r7, #20]
 801a066:	18d3      	adds	r3, r2, r3
 801a068:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	687a      	ldr	r2, [r7, #4]
 801a06e:	601a      	str	r2, [r3, #0]
}
 801a070:	46c0      	nop			@ (mov r8, r8)
 801a072:	46bd      	mov	sp, r7
 801a074:	b006      	add	sp, #24
 801a076:	bd80      	pop	{r7, pc}

0801a078 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b084      	sub	sp, #16
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
 801a080:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801a082:	2300      	movs	r3, #0
 801a084:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	3350      	adds	r3, #80	@ 0x50
 801a08c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801a08e:	683b      	ldr	r3, [r7, #0]
 801a090:	009b      	lsls	r3, r3, #2
 801a092:	68fa      	ldr	r2, [r7, #12]
 801a094:	18d3      	adds	r3, r2, r3
 801a096:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	681b      	ldr	r3, [r3, #0]
}
 801a09c:	0018      	movs	r0, r3
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	b004      	add	sp, #16
 801a0a2:	bd80      	pop	{r7, pc}

0801a0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d101      	bne.n	801a0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a0b2:	2301      	movs	r3, #1
 801a0b4:	e032      	b.n	801a11c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	2239      	movs	r2, #57	@ 0x39
 801a0ba:	5c9b      	ldrb	r3, [r3, r2]
 801a0bc:	b2db      	uxtb	r3, r3
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d107      	bne.n	801a0d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	2238      	movs	r2, #56	@ 0x38
 801a0c6:	2100      	movs	r1, #0
 801a0c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	0018      	movs	r0, r3
 801a0ce:	f7f7 f8dd 	bl	801128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	2239      	movs	r2, #57	@ 0x39
 801a0d6:	2102      	movs	r1, #2
 801a0d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	681a      	ldr	r2, [r3, #0]
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	3304      	adds	r3, #4
 801a0e2:	0019      	movs	r1, r3
 801a0e4:	0010      	movs	r0, r2
 801a0e6:	f000 fa1d 	bl	801a524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	223e      	movs	r2, #62	@ 0x3e
 801a0ee:	2101      	movs	r1, #1
 801a0f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	223a      	movs	r2, #58	@ 0x3a
 801a0f6:	2101      	movs	r1, #1
 801a0f8:	5499      	strb	r1, [r3, r2]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	223b      	movs	r2, #59	@ 0x3b
 801a0fe:	2101      	movs	r1, #1
 801a100:	5499      	strb	r1, [r3, r2]
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	223c      	movs	r2, #60	@ 0x3c
 801a106:	2101      	movs	r1, #1
 801a108:	5499      	strb	r1, [r3, r2]
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	223d      	movs	r2, #61	@ 0x3d
 801a10e:	2101      	movs	r1, #1
 801a110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2239      	movs	r2, #57	@ 0x39
 801a116:	2101      	movs	r1, #1
 801a118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a11a:	2300      	movs	r3, #0
}
 801a11c:	0018      	movs	r0, r3
 801a11e:	46bd      	mov	sp, r7
 801a120:	b002      	add	sp, #8
 801a122:	bd80      	pop	{r7, pc}

0801a124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b084      	sub	sp, #16
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2239      	movs	r2, #57	@ 0x39
 801a130:	5c9b      	ldrb	r3, [r3, r2]
 801a132:	b2db      	uxtb	r3, r3
 801a134:	2b01      	cmp	r3, #1
 801a136:	d001      	beq.n	801a13c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a138:	2301      	movs	r3, #1
 801a13a:	e033      	b.n	801a1a4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2239      	movs	r2, #57	@ 0x39
 801a140:	2102      	movs	r1, #2
 801a142:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681a      	ldr	r2, [r3, #0]
 801a148:	2380      	movs	r3, #128	@ 0x80
 801a14a:	05db      	lsls	r3, r3, #23
 801a14c:	429a      	cmp	r2, r3
 801a14e:	d00e      	beq.n	801a16e <HAL_TIM_Base_Start+0x4a>
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4a15      	ldr	r2, [pc, #84]	@ (801a1ac <HAL_TIM_Base_Start+0x88>)
 801a156:	4293      	cmp	r3, r2
 801a158:	d009      	beq.n	801a16e <HAL_TIM_Base_Start+0x4a>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	4a14      	ldr	r2, [pc, #80]	@ (801a1b0 <HAL_TIM_Base_Start+0x8c>)
 801a160:	4293      	cmp	r3, r2
 801a162:	d004      	beq.n	801a16e <HAL_TIM_Base_Start+0x4a>
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	4a12      	ldr	r2, [pc, #72]	@ (801a1b4 <HAL_TIM_Base_Start+0x90>)
 801a16a:	4293      	cmp	r3, r2
 801a16c:	d111      	bne.n	801a192 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	689b      	ldr	r3, [r3, #8]
 801a174:	2207      	movs	r2, #7
 801a176:	4013      	ands	r3, r2
 801a178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	2b06      	cmp	r3, #6
 801a17e:	d010      	beq.n	801a1a2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	681a      	ldr	r2, [r3, #0]
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	2101      	movs	r1, #1
 801a18c:	430a      	orrs	r2, r1
 801a18e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a190:	e007      	b.n	801a1a2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	2101      	movs	r1, #1
 801a19e:	430a      	orrs	r2, r1
 801a1a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a1a2:	2300      	movs	r3, #0
}
 801a1a4:	0018      	movs	r0, r3
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	b004      	add	sp, #16
 801a1aa:	bd80      	pop	{r7, pc}
 801a1ac:	40000400 	.word	0x40000400
 801a1b0:	40010800 	.word	0x40010800
 801a1b4:	40011400 	.word	0x40011400

0801a1b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	6a1b      	ldr	r3, [r3, #32]
 801a1c6:	4a0a      	ldr	r2, [pc, #40]	@ (801a1f0 <HAL_TIM_Base_Stop+0x38>)
 801a1c8:	4013      	ands	r3, r2
 801a1ca:	d107      	bne.n	801a1dc <HAL_TIM_Base_Stop+0x24>
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	2101      	movs	r1, #1
 801a1d8:	438a      	bics	r2, r1
 801a1da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2239      	movs	r2, #57	@ 0x39
 801a1e0:	2101      	movs	r1, #1
 801a1e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801a1e4:	2300      	movs	r3, #0
}
 801a1e6:	0018      	movs	r0, r3
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	b002      	add	sp, #8
 801a1ec:	bd80      	pop	{r7, pc}
 801a1ee:	46c0      	nop			@ (mov r8, r8)
 801a1f0:	00001111 	.word	0x00001111

0801a1f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b082      	sub	sp, #8
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d101      	bne.n	801a206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a202:	2301      	movs	r3, #1
 801a204:	e032      	b.n	801a26c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2239      	movs	r2, #57	@ 0x39
 801a20a:	5c9b      	ldrb	r3, [r3, r2]
 801a20c:	b2db      	uxtb	r3, r3
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d107      	bne.n	801a222 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	2238      	movs	r2, #56	@ 0x38
 801a216:	2100      	movs	r1, #0
 801a218:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	0018      	movs	r0, r3
 801a21e:	f7f7 f811 	bl	8011244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	2239      	movs	r2, #57	@ 0x39
 801a226:	2102      	movs	r1, #2
 801a228:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	681a      	ldr	r2, [r3, #0]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	3304      	adds	r3, #4
 801a232:	0019      	movs	r1, r3
 801a234:	0010      	movs	r0, r2
 801a236:	f000 f975 	bl	801a524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	223e      	movs	r2, #62	@ 0x3e
 801a23e:	2101      	movs	r1, #1
 801a240:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	223a      	movs	r2, #58	@ 0x3a
 801a246:	2101      	movs	r1, #1
 801a248:	5499      	strb	r1, [r3, r2]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	223b      	movs	r2, #59	@ 0x3b
 801a24e:	2101      	movs	r1, #1
 801a250:	5499      	strb	r1, [r3, r2]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	223c      	movs	r2, #60	@ 0x3c
 801a256:	2101      	movs	r1, #1
 801a258:	5499      	strb	r1, [r3, r2]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	223d      	movs	r2, #61	@ 0x3d
 801a25e:	2101      	movs	r1, #1
 801a260:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2239      	movs	r2, #57	@ 0x39
 801a266:	2101      	movs	r1, #1
 801a268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a26a:	2300      	movs	r3, #0
}
 801a26c:	0018      	movs	r0, r3
 801a26e:	46bd      	mov	sp, r7
 801a270:	b002      	add	sp, #8
 801a272:	bd80      	pop	{r7, pc}

0801a274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b084      	sub	sp, #16
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
 801a27c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d108      	bne.n	801a296 <HAL_TIM_PWM_Start+0x22>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	223a      	movs	r2, #58	@ 0x3a
 801a288:	5c9b      	ldrb	r3, [r3, r2]
 801a28a:	b2db      	uxtb	r3, r3
 801a28c:	3b01      	subs	r3, #1
 801a28e:	1e5a      	subs	r2, r3, #1
 801a290:	4193      	sbcs	r3, r2
 801a292:	b2db      	uxtb	r3, r3
 801a294:	e01f      	b.n	801a2d6 <HAL_TIM_PWM_Start+0x62>
 801a296:	683b      	ldr	r3, [r7, #0]
 801a298:	2b04      	cmp	r3, #4
 801a29a:	d108      	bne.n	801a2ae <HAL_TIM_PWM_Start+0x3a>
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	223b      	movs	r2, #59	@ 0x3b
 801a2a0:	5c9b      	ldrb	r3, [r3, r2]
 801a2a2:	b2db      	uxtb	r3, r3
 801a2a4:	3b01      	subs	r3, #1
 801a2a6:	1e5a      	subs	r2, r3, #1
 801a2a8:	4193      	sbcs	r3, r2
 801a2aa:	b2db      	uxtb	r3, r3
 801a2ac:	e013      	b.n	801a2d6 <HAL_TIM_PWM_Start+0x62>
 801a2ae:	683b      	ldr	r3, [r7, #0]
 801a2b0:	2b08      	cmp	r3, #8
 801a2b2:	d108      	bne.n	801a2c6 <HAL_TIM_PWM_Start+0x52>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	223c      	movs	r2, #60	@ 0x3c
 801a2b8:	5c9b      	ldrb	r3, [r3, r2]
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	3b01      	subs	r3, #1
 801a2be:	1e5a      	subs	r2, r3, #1
 801a2c0:	4193      	sbcs	r3, r2
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	e007      	b.n	801a2d6 <HAL_TIM_PWM_Start+0x62>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	223d      	movs	r2, #61	@ 0x3d
 801a2ca:	5c9b      	ldrb	r3, [r3, r2]
 801a2cc:	b2db      	uxtb	r3, r3
 801a2ce:	3b01      	subs	r3, #1
 801a2d0:	1e5a      	subs	r2, r3, #1
 801a2d2:	4193      	sbcs	r3, r2
 801a2d4:	b2db      	uxtb	r3, r3
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d001      	beq.n	801a2de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801a2da:	2301      	movs	r3, #1
 801a2dc:	e052      	b.n	801a384 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d104      	bne.n	801a2ee <HAL_TIM_PWM_Start+0x7a>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	223a      	movs	r2, #58	@ 0x3a
 801a2e8:	2102      	movs	r1, #2
 801a2ea:	5499      	strb	r1, [r3, r2]
 801a2ec:	e013      	b.n	801a316 <HAL_TIM_PWM_Start+0xa2>
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	2b04      	cmp	r3, #4
 801a2f2:	d104      	bne.n	801a2fe <HAL_TIM_PWM_Start+0x8a>
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	223b      	movs	r2, #59	@ 0x3b
 801a2f8:	2102      	movs	r1, #2
 801a2fa:	5499      	strb	r1, [r3, r2]
 801a2fc:	e00b      	b.n	801a316 <HAL_TIM_PWM_Start+0xa2>
 801a2fe:	683b      	ldr	r3, [r7, #0]
 801a300:	2b08      	cmp	r3, #8
 801a302:	d104      	bne.n	801a30e <HAL_TIM_PWM_Start+0x9a>
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	223c      	movs	r2, #60	@ 0x3c
 801a308:	2102      	movs	r1, #2
 801a30a:	5499      	strb	r1, [r3, r2]
 801a30c:	e003      	b.n	801a316 <HAL_TIM_PWM_Start+0xa2>
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	223d      	movs	r2, #61	@ 0x3d
 801a312:	2102      	movs	r1, #2
 801a314:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	6839      	ldr	r1, [r7, #0]
 801a31c:	2201      	movs	r2, #1
 801a31e:	0018      	movs	r0, r3
 801a320:	f000 fa62 	bl	801a7e8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681a      	ldr	r2, [r3, #0]
 801a328:	2380      	movs	r3, #128	@ 0x80
 801a32a:	05db      	lsls	r3, r3, #23
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d00e      	beq.n	801a34e <HAL_TIM_PWM_Start+0xda>
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	4a15      	ldr	r2, [pc, #84]	@ (801a38c <HAL_TIM_PWM_Start+0x118>)
 801a336:	4293      	cmp	r3, r2
 801a338:	d009      	beq.n	801a34e <HAL_TIM_PWM_Start+0xda>
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4a14      	ldr	r2, [pc, #80]	@ (801a390 <HAL_TIM_PWM_Start+0x11c>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d004      	beq.n	801a34e <HAL_TIM_PWM_Start+0xda>
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a12      	ldr	r2, [pc, #72]	@ (801a394 <HAL_TIM_PWM_Start+0x120>)
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d111      	bne.n	801a372 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	689b      	ldr	r3, [r3, #8]
 801a354:	2207      	movs	r2, #7
 801a356:	4013      	ands	r3, r2
 801a358:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	2b06      	cmp	r3, #6
 801a35e:	d010      	beq.n	801a382 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	2101      	movs	r1, #1
 801a36c:	430a      	orrs	r2, r1
 801a36e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a370:	e007      	b.n	801a382 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	681a      	ldr	r2, [r3, #0]
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2101      	movs	r1, #1
 801a37e:	430a      	orrs	r2, r1
 801a380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a382:	2300      	movs	r3, #0
}
 801a384:	0018      	movs	r0, r3
 801a386:	46bd      	mov	sp, r7
 801a388:	b004      	add	sp, #16
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	40000400 	.word	0x40000400
 801a390:	40010800 	.word	0x40010800
 801a394:	40011400 	.word	0x40011400

0801a398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b086      	sub	sp, #24
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a3a4:	2317      	movs	r3, #23
 801a3a6:	18fb      	adds	r3, r7, r3
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2238      	movs	r2, #56	@ 0x38
 801a3b0:	5c9b      	ldrb	r3, [r3, r2]
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d101      	bne.n	801a3ba <HAL_TIM_PWM_ConfigChannel+0x22>
 801a3b6:	2302      	movs	r3, #2
 801a3b8:	e0ad      	b.n	801a516 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	2238      	movs	r2, #56	@ 0x38
 801a3be:	2101      	movs	r1, #1
 801a3c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2b0c      	cmp	r3, #12
 801a3c6:	d100      	bne.n	801a3ca <HAL_TIM_PWM_ConfigChannel+0x32>
 801a3c8:	e076      	b.n	801a4b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2b0c      	cmp	r3, #12
 801a3ce:	d900      	bls.n	801a3d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801a3d0:	e095      	b.n	801a4fe <HAL_TIM_PWM_ConfigChannel+0x166>
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	2b08      	cmp	r3, #8
 801a3d6:	d04e      	beq.n	801a476 <HAL_TIM_PWM_ConfigChannel+0xde>
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	2b08      	cmp	r3, #8
 801a3dc:	d900      	bls.n	801a3e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 801a3de:	e08e      	b.n	801a4fe <HAL_TIM_PWM_ConfigChannel+0x166>
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d003      	beq.n	801a3ee <HAL_TIM_PWM_ConfigChannel+0x56>
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	2b04      	cmp	r3, #4
 801a3ea:	d021      	beq.n	801a430 <HAL_TIM_PWM_ConfigChannel+0x98>
 801a3ec:	e087      	b.n	801a4fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	68ba      	ldr	r2, [r7, #8]
 801a3f4:	0011      	movs	r1, r2
 801a3f6:	0018      	movs	r0, r3
 801a3f8:	f000 f8f2 	bl	801a5e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	699a      	ldr	r2, [r3, #24]
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	2108      	movs	r1, #8
 801a408:	430a      	orrs	r2, r1
 801a40a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	699a      	ldr	r2, [r3, #24]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	2104      	movs	r1, #4
 801a418:	438a      	bics	r2, r1
 801a41a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	6999      	ldr	r1, [r3, #24]
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	68da      	ldr	r2, [r3, #12]
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	430a      	orrs	r2, r1
 801a42c:	619a      	str	r2, [r3, #24]
      break;
 801a42e:	e06b      	b.n	801a508 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	68ba      	ldr	r2, [r7, #8]
 801a436:	0011      	movs	r1, r2
 801a438:	0018      	movs	r0, r3
 801a43a:	f000 f90d 	bl	801a658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	699a      	ldr	r2, [r3, #24]
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	2180      	movs	r1, #128	@ 0x80
 801a44a:	0109      	lsls	r1, r1, #4
 801a44c:	430a      	orrs	r2, r1
 801a44e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	699a      	ldr	r2, [r3, #24]
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	4931      	ldr	r1, [pc, #196]	@ (801a520 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a45c:	400a      	ands	r2, r1
 801a45e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	6999      	ldr	r1, [r3, #24]
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	68db      	ldr	r3, [r3, #12]
 801a46a:	021a      	lsls	r2, r3, #8
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	430a      	orrs	r2, r1
 801a472:	619a      	str	r2, [r3, #24]
      break;
 801a474:	e048      	b.n	801a508 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	68ba      	ldr	r2, [r7, #8]
 801a47c:	0011      	movs	r1, r2
 801a47e:	0018      	movs	r0, r3
 801a480:	f000 f92c 	bl	801a6dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	69da      	ldr	r2, [r3, #28]
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2108      	movs	r1, #8
 801a490:	430a      	orrs	r2, r1
 801a492:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	69da      	ldr	r2, [r3, #28]
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2104      	movs	r1, #4
 801a4a0:	438a      	bics	r2, r1
 801a4a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	69d9      	ldr	r1, [r3, #28]
 801a4aa:	68bb      	ldr	r3, [r7, #8]
 801a4ac:	68da      	ldr	r2, [r3, #12]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	430a      	orrs	r2, r1
 801a4b4:	61da      	str	r2, [r3, #28]
      break;
 801a4b6:	e027      	b.n	801a508 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	68ba      	ldr	r2, [r7, #8]
 801a4be:	0011      	movs	r1, r2
 801a4c0:	0018      	movs	r0, r3
 801a4c2:	f000 f94b 	bl	801a75c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	69da      	ldr	r2, [r3, #28]
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2180      	movs	r1, #128	@ 0x80
 801a4d2:	0109      	lsls	r1, r1, #4
 801a4d4:	430a      	orrs	r2, r1
 801a4d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	69da      	ldr	r2, [r3, #28]
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	490f      	ldr	r1, [pc, #60]	@ (801a520 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a4e4:	400a      	ands	r2, r1
 801a4e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	69d9      	ldr	r1, [r3, #28]
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	021a      	lsls	r2, r3, #8
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	430a      	orrs	r2, r1
 801a4fa:	61da      	str	r2, [r3, #28]
      break;
 801a4fc:	e004      	b.n	801a508 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801a4fe:	2317      	movs	r3, #23
 801a500:	18fb      	adds	r3, r7, r3
 801a502:	2201      	movs	r2, #1
 801a504:	701a      	strb	r2, [r3, #0]
      break;
 801a506:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	2238      	movs	r2, #56	@ 0x38
 801a50c:	2100      	movs	r1, #0
 801a50e:	5499      	strb	r1, [r3, r2]

  return status;
 801a510:	2317      	movs	r3, #23
 801a512:	18fb      	adds	r3, r7, r3
 801a514:	781b      	ldrb	r3, [r3, #0]
}
 801a516:	0018      	movs	r0, r3
 801a518:	46bd      	mov	sp, r7
 801a51a:	b006      	add	sp, #24
 801a51c:	bd80      	pop	{r7, pc}
 801a51e:	46c0      	nop			@ (mov r8, r8)
 801a520:	fffffbff 	.word	0xfffffbff

0801a524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b084      	sub	sp, #16
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
 801a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a534:	687a      	ldr	r2, [r7, #4]
 801a536:	2380      	movs	r3, #128	@ 0x80
 801a538:	05db      	lsls	r3, r3, #23
 801a53a:	429a      	cmp	r2, r3
 801a53c:	d00b      	beq.n	801a556 <TIM_Base_SetConfig+0x32>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	4a23      	ldr	r2, [pc, #140]	@ (801a5d0 <TIM_Base_SetConfig+0xac>)
 801a542:	4293      	cmp	r3, r2
 801a544:	d007      	beq.n	801a556 <TIM_Base_SetConfig+0x32>
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	4a22      	ldr	r2, [pc, #136]	@ (801a5d4 <TIM_Base_SetConfig+0xb0>)
 801a54a:	4293      	cmp	r3, r2
 801a54c:	d003      	beq.n	801a556 <TIM_Base_SetConfig+0x32>
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	4a21      	ldr	r2, [pc, #132]	@ (801a5d8 <TIM_Base_SetConfig+0xb4>)
 801a552:	4293      	cmp	r3, r2
 801a554:	d108      	bne.n	801a568 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	2270      	movs	r2, #112	@ 0x70
 801a55a:	4393      	bics	r3, r2
 801a55c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	685b      	ldr	r3, [r3, #4]
 801a562:	68fa      	ldr	r2, [r7, #12]
 801a564:	4313      	orrs	r3, r2
 801a566:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a568:	687a      	ldr	r2, [r7, #4]
 801a56a:	2380      	movs	r3, #128	@ 0x80
 801a56c:	05db      	lsls	r3, r3, #23
 801a56e:	429a      	cmp	r2, r3
 801a570:	d00b      	beq.n	801a58a <TIM_Base_SetConfig+0x66>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	4a16      	ldr	r2, [pc, #88]	@ (801a5d0 <TIM_Base_SetConfig+0xac>)
 801a576:	4293      	cmp	r3, r2
 801a578:	d007      	beq.n	801a58a <TIM_Base_SetConfig+0x66>
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	4a15      	ldr	r2, [pc, #84]	@ (801a5d4 <TIM_Base_SetConfig+0xb0>)
 801a57e:	4293      	cmp	r3, r2
 801a580:	d003      	beq.n	801a58a <TIM_Base_SetConfig+0x66>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	4a14      	ldr	r2, [pc, #80]	@ (801a5d8 <TIM_Base_SetConfig+0xb4>)
 801a586:	4293      	cmp	r3, r2
 801a588:	d108      	bne.n	801a59c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	4a13      	ldr	r2, [pc, #76]	@ (801a5dc <TIM_Base_SetConfig+0xb8>)
 801a58e:	4013      	ands	r3, r2
 801a590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	68db      	ldr	r3, [r3, #12]
 801a596:	68fa      	ldr	r2, [r7, #12]
 801a598:	4313      	orrs	r3, r2
 801a59a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	2280      	movs	r2, #128	@ 0x80
 801a5a0:	4393      	bics	r3, r2
 801a5a2:	001a      	movs	r2, r3
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	691b      	ldr	r3, [r3, #16]
 801a5a8:	4313      	orrs	r3, r2
 801a5aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	68fa      	ldr	r2, [r7, #12]
 801a5b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	689a      	ldr	r2, [r3, #8]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	681a      	ldr	r2, [r3, #0]
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2201      	movs	r2, #1
 801a5c6:	615a      	str	r2, [r3, #20]
}
 801a5c8:	46c0      	nop			@ (mov r8, r8)
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	b004      	add	sp, #16
 801a5ce:	bd80      	pop	{r7, pc}
 801a5d0:	40000400 	.word	0x40000400
 801a5d4:	40010800 	.word	0x40010800
 801a5d8:	40011400 	.word	0x40011400
 801a5dc:	fffffcff 	.word	0xfffffcff

0801a5e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b086      	sub	sp, #24
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6a1b      	ldr	r3, [r3, #32]
 801a5ee:	2201      	movs	r2, #1
 801a5f0:	4393      	bics	r3, r2
 801a5f2:	001a      	movs	r2, r3
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	6a1b      	ldr	r3, [r3, #32]
 801a5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	685b      	ldr	r3, [r3, #4]
 801a602:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	699b      	ldr	r3, [r3, #24]
 801a608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2270      	movs	r2, #112	@ 0x70
 801a60e:	4393      	bics	r3, r2
 801a610:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	2203      	movs	r2, #3
 801a616:	4393      	bics	r3, r2
 801a618:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	68fa      	ldr	r2, [r7, #12]
 801a620:	4313      	orrs	r3, r2
 801a622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a624:	697b      	ldr	r3, [r7, #20]
 801a626:	2202      	movs	r2, #2
 801a628:	4393      	bics	r3, r2
 801a62a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	689b      	ldr	r3, [r3, #8]
 801a630:	697a      	ldr	r2, [r7, #20]
 801a632:	4313      	orrs	r3, r2
 801a634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	693a      	ldr	r2, [r7, #16]
 801a63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	68fa      	ldr	r2, [r7, #12]
 801a640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a642:	683b      	ldr	r3, [r7, #0]
 801a644:	685a      	ldr	r2, [r3, #4]
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	697a      	ldr	r2, [r7, #20]
 801a64e:	621a      	str	r2, [r3, #32]
}
 801a650:	46c0      	nop			@ (mov r8, r8)
 801a652:	46bd      	mov	sp, r7
 801a654:	b006      	add	sp, #24
 801a656:	bd80      	pop	{r7, pc}

0801a658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b086      	sub	sp, #24
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
 801a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6a1b      	ldr	r3, [r3, #32]
 801a666:	2210      	movs	r2, #16
 801a668:	4393      	bics	r3, r2
 801a66a:	001a      	movs	r2, r3
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6a1b      	ldr	r3, [r3, #32]
 801a674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	699b      	ldr	r3, [r3, #24]
 801a680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	4a13      	ldr	r2, [pc, #76]	@ (801a6d4 <TIM_OC2_SetConfig+0x7c>)
 801a686:	4013      	ands	r3, r2
 801a688:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	4a12      	ldr	r2, [pc, #72]	@ (801a6d8 <TIM_OC2_SetConfig+0x80>)
 801a68e:	4013      	ands	r3, r2
 801a690:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	021b      	lsls	r3, r3, #8
 801a698:	68fa      	ldr	r2, [r7, #12]
 801a69a:	4313      	orrs	r3, r2
 801a69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a69e:	697b      	ldr	r3, [r7, #20]
 801a6a0:	2220      	movs	r2, #32
 801a6a2:	4393      	bics	r3, r2
 801a6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	689b      	ldr	r3, [r3, #8]
 801a6aa:	011b      	lsls	r3, r3, #4
 801a6ac:	697a      	ldr	r2, [r7, #20]
 801a6ae:	4313      	orrs	r3, r2
 801a6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	693a      	ldr	r2, [r7, #16]
 801a6b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	68fa      	ldr	r2, [r7, #12]
 801a6bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	685a      	ldr	r2, [r3, #4]
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	697a      	ldr	r2, [r7, #20]
 801a6ca:	621a      	str	r2, [r3, #32]
}
 801a6cc:	46c0      	nop			@ (mov r8, r8)
 801a6ce:	46bd      	mov	sp, r7
 801a6d0:	b006      	add	sp, #24
 801a6d2:	bd80      	pop	{r7, pc}
 801a6d4:	ffff8fff 	.word	0xffff8fff
 801a6d8:	fffffcff 	.word	0xfffffcff

0801a6dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b086      	sub	sp, #24
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	6a1b      	ldr	r3, [r3, #32]
 801a6ea:	4a1a      	ldr	r2, [pc, #104]	@ (801a754 <TIM_OC3_SetConfig+0x78>)
 801a6ec:	401a      	ands	r2, r3
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	6a1b      	ldr	r3, [r3, #32]
 801a6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	69db      	ldr	r3, [r3, #28]
 801a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	2270      	movs	r2, #112	@ 0x70
 801a708:	4393      	bics	r3, r2
 801a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	2203      	movs	r2, #3
 801a710:	4393      	bics	r3, r2
 801a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	68fa      	ldr	r2, [r7, #12]
 801a71a:	4313      	orrs	r3, r2
 801a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	4a0d      	ldr	r2, [pc, #52]	@ (801a758 <TIM_OC3_SetConfig+0x7c>)
 801a722:	4013      	ands	r3, r2
 801a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a726:	683b      	ldr	r3, [r7, #0]
 801a728:	689b      	ldr	r3, [r3, #8]
 801a72a:	021b      	lsls	r3, r3, #8
 801a72c:	697a      	ldr	r2, [r7, #20]
 801a72e:	4313      	orrs	r3, r2
 801a730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	693a      	ldr	r2, [r7, #16]
 801a736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	68fa      	ldr	r2, [r7, #12]
 801a73c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	685a      	ldr	r2, [r3, #4]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	697a      	ldr	r2, [r7, #20]
 801a74a:	621a      	str	r2, [r3, #32]
}
 801a74c:	46c0      	nop			@ (mov r8, r8)
 801a74e:	46bd      	mov	sp, r7
 801a750:	b006      	add	sp, #24
 801a752:	bd80      	pop	{r7, pc}
 801a754:	fffffeff 	.word	0xfffffeff
 801a758:	fffffdff 	.word	0xfffffdff

0801a75c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b086      	sub	sp, #24
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
 801a764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	6a1b      	ldr	r3, [r3, #32]
 801a76a:	4a1b      	ldr	r2, [pc, #108]	@ (801a7d8 <TIM_OC4_SetConfig+0x7c>)
 801a76c:	401a      	ands	r2, r3
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	6a1b      	ldr	r3, [r3, #32]
 801a776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	685b      	ldr	r3, [r3, #4]
 801a77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	69db      	ldr	r3, [r3, #28]
 801a782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	4a15      	ldr	r2, [pc, #84]	@ (801a7dc <TIM_OC4_SetConfig+0x80>)
 801a788:	4013      	ands	r3, r2
 801a78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	4a14      	ldr	r2, [pc, #80]	@ (801a7e0 <TIM_OC4_SetConfig+0x84>)
 801a790:	4013      	ands	r3, r2
 801a792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	021b      	lsls	r3, r3, #8
 801a79a:	68fa      	ldr	r2, [r7, #12]
 801a79c:	4313      	orrs	r3, r2
 801a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a7a0:	697b      	ldr	r3, [r7, #20]
 801a7a2:	4a10      	ldr	r2, [pc, #64]	@ (801a7e4 <TIM_OC4_SetConfig+0x88>)
 801a7a4:	4013      	ands	r3, r2
 801a7a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	689b      	ldr	r3, [r3, #8]
 801a7ac:	031b      	lsls	r3, r3, #12
 801a7ae:	697a      	ldr	r2, [r7, #20]
 801a7b0:	4313      	orrs	r3, r2
 801a7b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	693a      	ldr	r2, [r7, #16]
 801a7b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	68fa      	ldr	r2, [r7, #12]
 801a7be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a7c0:	683b      	ldr	r3, [r7, #0]
 801a7c2:	685a      	ldr	r2, [r3, #4]
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	697a      	ldr	r2, [r7, #20]
 801a7cc:	621a      	str	r2, [r3, #32]
}
 801a7ce:	46c0      	nop			@ (mov r8, r8)
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	b006      	add	sp, #24
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	46c0      	nop			@ (mov r8, r8)
 801a7d8:	ffffefff 	.word	0xffffefff
 801a7dc:	ffff8fff 	.word	0xffff8fff
 801a7e0:	fffffcff 	.word	0xfffffcff
 801a7e4:	ffffdfff 	.word	0xffffdfff

0801a7e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b086      	sub	sp, #24
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	60f8      	str	r0, [r7, #12]
 801a7f0:	60b9      	str	r1, [r7, #8]
 801a7f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	221f      	movs	r2, #31
 801a7f8:	4013      	ands	r3, r2
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	409a      	lsls	r2, r3
 801a7fe:	0013      	movs	r3, r2
 801a800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	6a1b      	ldr	r3, [r3, #32]
 801a806:	697a      	ldr	r2, [r7, #20]
 801a808:	43d2      	mvns	r2, r2
 801a80a:	401a      	ands	r2, r3
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	6a1a      	ldr	r2, [r3, #32]
 801a814:	68bb      	ldr	r3, [r7, #8]
 801a816:	211f      	movs	r1, #31
 801a818:	400b      	ands	r3, r1
 801a81a:	6879      	ldr	r1, [r7, #4]
 801a81c:	4099      	lsls	r1, r3
 801a81e:	000b      	movs	r3, r1
 801a820:	431a      	orrs	r2, r3
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	621a      	str	r2, [r3, #32]
}
 801a826:	46c0      	nop			@ (mov r8, r8)
 801a828:	46bd      	mov	sp, r7
 801a82a:	b006      	add	sp, #24
 801a82c:	bd80      	pop	{r7, pc}
	...

0801a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b084      	sub	sp, #16
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	2238      	movs	r2, #56	@ 0x38
 801a83e:	5c9b      	ldrb	r3, [r3, r2]
 801a840:	2b01      	cmp	r3, #1
 801a842:	d101      	bne.n	801a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a844:	2302      	movs	r3, #2
 801a846:	e047      	b.n	801a8d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2238      	movs	r2, #56	@ 0x38
 801a84c:	2101      	movs	r1, #1
 801a84e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	2239      	movs	r2, #57	@ 0x39
 801a854:	2102      	movs	r1, #2
 801a856:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	689b      	ldr	r3, [r3, #8]
 801a866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2270      	movs	r2, #112	@ 0x70
 801a86c:	4393      	bics	r3, r2
 801a86e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	68fa      	ldr	r2, [r7, #12]
 801a876:	4313      	orrs	r3, r2
 801a878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	68fa      	ldr	r2, [r7, #12]
 801a880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681a      	ldr	r2, [r3, #0]
 801a886:	2380      	movs	r3, #128	@ 0x80
 801a888:	05db      	lsls	r3, r3, #23
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d00e      	beq.n	801a8ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	4a13      	ldr	r2, [pc, #76]	@ (801a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801a894:	4293      	cmp	r3, r2
 801a896:	d009      	beq.n	801a8ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	4a11      	ldr	r2, [pc, #68]	@ (801a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801a89e:	4293      	cmp	r3, r2
 801a8a0:	d004      	beq.n	801a8ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	4a10      	ldr	r2, [pc, #64]	@ (801a8e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801a8a8:	4293      	cmp	r3, r2
 801a8aa:	d10c      	bne.n	801a8c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	2280      	movs	r2, #128	@ 0x80
 801a8b0:	4393      	bics	r3, r2
 801a8b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a8b4:	683b      	ldr	r3, [r7, #0]
 801a8b6:	685b      	ldr	r3, [r3, #4]
 801a8b8:	68ba      	ldr	r2, [r7, #8]
 801a8ba:	4313      	orrs	r3, r2
 801a8bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	68ba      	ldr	r2, [r7, #8]
 801a8c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	2239      	movs	r2, #57	@ 0x39
 801a8ca:	2101      	movs	r1, #1
 801a8cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2238      	movs	r2, #56	@ 0x38
 801a8d2:	2100      	movs	r1, #0
 801a8d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a8d6:	2300      	movs	r3, #0
}
 801a8d8:	0018      	movs	r0, r3
 801a8da:	46bd      	mov	sp, r7
 801a8dc:	b004      	add	sp, #16
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	40000400 	.word	0x40000400
 801a8e4:	40010800 	.word	0x40010800
 801a8e8:	40011400 	.word	0x40011400

0801a8ec <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b082      	sub	sp, #8
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	2238      	movs	r2, #56	@ 0x38
 801a8fa:	5c9b      	ldrb	r3, [r3, r2]
 801a8fc:	2b01      	cmp	r3, #1
 801a8fe:	d101      	bne.n	801a904 <HAL_TIMEx_RemapConfig+0x18>
 801a900:	2302      	movs	r3, #2
 801a902:	e00c      	b.n	801a91e <HAL_TIMEx_RemapConfig+0x32>
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	2238      	movs	r2, #56	@ 0x38
 801a908:	2101      	movs	r1, #1
 801a90a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	683a      	ldr	r2, [r7, #0]
 801a912:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2238      	movs	r2, #56	@ 0x38
 801a918:	2100      	movs	r1, #0
 801a91a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a91c:	2300      	movs	r3, #0
}
 801a91e:	0018      	movs	r0, r3
 801a920:	46bd      	mov	sp, r7
 801a922:	b002      	add	sp, #8
 801a924:	bd80      	pop	{r7, pc}
	...

0801a928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b082      	sub	sp, #8
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d101      	bne.n	801a93a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a936:	2301      	movs	r3, #1
 801a938:	e053      	b.n	801a9e2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d116      	bne.n	801a970 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	2278      	movs	r2, #120	@ 0x78
 801a946:	2100      	movs	r1, #0
 801a948:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	0018      	movs	r0, r3
 801a94e:	f000 fd65 	bl	801b41c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	22b0      	movs	r2, #176	@ 0xb0
 801a956:	589b      	ldr	r3, [r3, r2]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d103      	bne.n	801a964 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	21b0      	movs	r1, #176	@ 0xb0
 801a960:	4a22      	ldr	r2, [pc, #136]	@ (801a9ec <HAL_UART_Init+0xc4>)
 801a962:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	22b0      	movs	r2, #176	@ 0xb0
 801a968:	589b      	ldr	r3, [r3, r2]
 801a96a:	687a      	ldr	r2, [r7, #4]
 801a96c:	0010      	movs	r0, r2
 801a96e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	2224      	movs	r2, #36	@ 0x24
 801a974:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	2101      	movs	r1, #1
 801a982:	438a      	bics	r2, r1
 801a984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	0018      	movs	r0, r3
 801a98a:	f000 fd8b 	bl	801b4a4 <UART_SetConfig>
 801a98e:	0003      	movs	r3, r0
 801a990:	2b01      	cmp	r3, #1
 801a992:	d101      	bne.n	801a998 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801a994:	2301      	movs	r3, #1
 801a996:	e024      	b.n	801a9e2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d003      	beq.n	801a9a8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	0018      	movs	r0, r3
 801a9a4:	f001 f81c 	bl	801b9e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	685a      	ldr	r2, [r3, #4]
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	490f      	ldr	r1, [pc, #60]	@ (801a9f0 <HAL_UART_Init+0xc8>)
 801a9b4:	400a      	ands	r2, r1
 801a9b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	689a      	ldr	r2, [r3, #8]
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	212a      	movs	r1, #42	@ 0x2a
 801a9c4:	438a      	bics	r2, r1
 801a9c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	681a      	ldr	r2, [r3, #0]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	2101      	movs	r1, #1
 801a9d4:	430a      	orrs	r2, r1
 801a9d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	0018      	movs	r0, r3
 801a9dc:	f001 f8b4 	bl	801bb48 <UART_CheckIdleState>
 801a9e0:	0003      	movs	r3, r0
}
 801a9e2:	0018      	movs	r0, r3
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	b002      	add	sp, #8
 801a9e8:	bd80      	pop	{r7, pc}
 801a9ea:	46c0      	nop			@ (mov r8, r8)
 801a9ec:	080114b9 	.word	0x080114b9
 801a9f0:	ffffb7ff 	.word	0xffffb7ff

0801a9f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b08a      	sub	sp, #40	@ 0x28
 801a9f8:	af02      	add	r7, sp, #8
 801a9fa:	60f8      	str	r0, [r7, #12]
 801a9fc:	60b9      	str	r1, [r7, #8]
 801a9fe:	603b      	str	r3, [r7, #0]
 801aa00:	1dbb      	adds	r3, r7, #6
 801aa02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801aa08:	2b20      	cmp	r3, #32
 801aa0a:	d000      	beq.n	801aa0e <HAL_UART_Transmit+0x1a>
 801aa0c:	e08c      	b.n	801ab28 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d003      	beq.n	801aa1c <HAL_UART_Transmit+0x28>
 801aa14:	1dbb      	adds	r3, r7, #6
 801aa16:	881b      	ldrh	r3, [r3, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d101      	bne.n	801aa20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	e084      	b.n	801ab2a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	689a      	ldr	r2, [r3, #8]
 801aa24:	2380      	movs	r3, #128	@ 0x80
 801aa26:	015b      	lsls	r3, r3, #5
 801aa28:	429a      	cmp	r2, r3
 801aa2a:	d109      	bne.n	801aa40 <HAL_UART_Transmit+0x4c>
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	691b      	ldr	r3, [r3, #16]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d105      	bne.n	801aa40 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801aa34:	68bb      	ldr	r3, [r7, #8]
 801aa36:	2201      	movs	r2, #1
 801aa38:	4013      	ands	r3, r2
 801aa3a:	d001      	beq.n	801aa40 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801aa3c:	2301      	movs	r3, #1
 801aa3e:	e074      	b.n	801ab2a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	2284      	movs	r2, #132	@ 0x84
 801aa44:	2100      	movs	r1, #0
 801aa46:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	2221      	movs	r2, #33	@ 0x21
 801aa4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801aa4e:	f7f7 fb0d 	bl	801206c <HAL_GetTick>
 801aa52:	0003      	movs	r3, r0
 801aa54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	1dba      	adds	r2, r7, #6
 801aa5a:	2150      	movs	r1, #80	@ 0x50
 801aa5c:	8812      	ldrh	r2, [r2, #0]
 801aa5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	1dba      	adds	r2, r7, #6
 801aa64:	2152      	movs	r1, #82	@ 0x52
 801aa66:	8812      	ldrh	r2, [r2, #0]
 801aa68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	689a      	ldr	r2, [r3, #8]
 801aa6e:	2380      	movs	r3, #128	@ 0x80
 801aa70:	015b      	lsls	r3, r3, #5
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d108      	bne.n	801aa88 <HAL_UART_Transmit+0x94>
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	691b      	ldr	r3, [r3, #16]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d104      	bne.n	801aa88 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801aa7e:	2300      	movs	r3, #0
 801aa80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	61bb      	str	r3, [r7, #24]
 801aa86:	e003      	b.n	801aa90 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801aa90:	e02f      	b.n	801aaf2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801aa92:	697a      	ldr	r2, [r7, #20]
 801aa94:	68f8      	ldr	r0, [r7, #12]
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	9300      	str	r3, [sp, #0]
 801aa9a:	0013      	movs	r3, r2
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	2180      	movs	r1, #128	@ 0x80
 801aaa0:	f001 f8fa 	bl	801bc98 <UART_WaitOnFlagUntilTimeout>
 801aaa4:	1e03      	subs	r3, r0, #0
 801aaa6:	d004      	beq.n	801aab2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	2220      	movs	r2, #32
 801aaac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801aaae:	2303      	movs	r3, #3
 801aab0:	e03b      	b.n	801ab2a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801aab2:	69fb      	ldr	r3, [r7, #28]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d10b      	bne.n	801aad0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801aab8:	69bb      	ldr	r3, [r7, #24]
 801aaba:	881b      	ldrh	r3, [r3, #0]
 801aabc:	001a      	movs	r2, r3
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	05d2      	lsls	r2, r2, #23
 801aac4:	0dd2      	lsrs	r2, r2, #23
 801aac6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	3302      	adds	r3, #2
 801aacc:	61bb      	str	r3, [r7, #24]
 801aace:	e007      	b.n	801aae0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801aad0:	69fb      	ldr	r3, [r7, #28]
 801aad2:	781a      	ldrb	r2, [r3, #0]
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801aada:	69fb      	ldr	r3, [r7, #28]
 801aadc:	3301      	adds	r3, #1
 801aade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	2252      	movs	r2, #82	@ 0x52
 801aae4:	5a9b      	ldrh	r3, [r3, r2]
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	3b01      	subs	r3, #1
 801aaea:	b299      	uxth	r1, r3
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	2252      	movs	r2, #82	@ 0x52
 801aaf0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	2252      	movs	r2, #82	@ 0x52
 801aaf6:	5a9b      	ldrh	r3, [r3, r2]
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d1c9      	bne.n	801aa92 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801aafe:	697a      	ldr	r2, [r7, #20]
 801ab00:	68f8      	ldr	r0, [r7, #12]
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	9300      	str	r3, [sp, #0]
 801ab06:	0013      	movs	r3, r2
 801ab08:	2200      	movs	r2, #0
 801ab0a:	2140      	movs	r1, #64	@ 0x40
 801ab0c:	f001 f8c4 	bl	801bc98 <UART_WaitOnFlagUntilTimeout>
 801ab10:	1e03      	subs	r3, r0, #0
 801ab12:	d004      	beq.n	801ab1e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	2220      	movs	r2, #32
 801ab18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801ab1a:	2303      	movs	r3, #3
 801ab1c:	e005      	b.n	801ab2a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	2220      	movs	r2, #32
 801ab22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801ab24:	2300      	movs	r3, #0
 801ab26:	e000      	b.n	801ab2a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801ab28:	2302      	movs	r3, #2
  }
}
 801ab2a:	0018      	movs	r0, r3
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	b008      	add	sp, #32
 801ab30:	bd80      	pop	{r7, pc}
	...

0801ab34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b088      	sub	sp, #32
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	60f8      	str	r0, [r7, #12]
 801ab3c:	60b9      	str	r1, [r7, #8]
 801ab3e:	1dbb      	adds	r3, r7, #6
 801ab40:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	2280      	movs	r2, #128	@ 0x80
 801ab46:	589b      	ldr	r3, [r3, r2]
 801ab48:	2b20      	cmp	r3, #32
 801ab4a:	d14a      	bne.n	801abe2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d003      	beq.n	801ab5a <HAL_UART_Receive_IT+0x26>
 801ab52:	1dbb      	adds	r3, r7, #6
 801ab54:	881b      	ldrh	r3, [r3, #0]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d101      	bne.n	801ab5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801ab5a:	2301      	movs	r3, #1
 801ab5c:	e042      	b.n	801abe4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	689a      	ldr	r2, [r3, #8]
 801ab62:	2380      	movs	r3, #128	@ 0x80
 801ab64:	015b      	lsls	r3, r3, #5
 801ab66:	429a      	cmp	r2, r3
 801ab68:	d109      	bne.n	801ab7e <HAL_UART_Receive_IT+0x4a>
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	691b      	ldr	r3, [r3, #16]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d105      	bne.n	801ab7e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801ab72:	68bb      	ldr	r3, [r7, #8]
 801ab74:	2201      	movs	r2, #1
 801ab76:	4013      	ands	r3, r2
 801ab78:	d001      	beq.n	801ab7e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801ab7a:	2301      	movs	r3, #1
 801ab7c:	e032      	b.n	801abe4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	2200      	movs	r2, #0
 801ab82:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	4a18      	ldr	r2, [pc, #96]	@ (801abec <HAL_UART_Receive_IT+0xb8>)
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d020      	beq.n	801abd0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	685a      	ldr	r2, [r3, #4]
 801ab94:	2380      	movs	r3, #128	@ 0x80
 801ab96:	041b      	lsls	r3, r3, #16
 801ab98:	4013      	ands	r3, r2
 801ab9a:	d019      	beq.n	801abd0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab9c:	f3ef 8310 	mrs	r3, PRIMASK
 801aba0:	613b      	str	r3, [r7, #16]
  return(result);
 801aba2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801aba4:	61fb      	str	r3, [r7, #28]
 801aba6:	2301      	movs	r3, #1
 801aba8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	f383 8810 	msr	PRIMASK, r3
}
 801abb0:	46c0      	nop			@ (mov r8, r8)
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	681a      	ldr	r2, [r3, #0]
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2180      	movs	r1, #128	@ 0x80
 801abbe:	04c9      	lsls	r1, r1, #19
 801abc0:	430a      	orrs	r2, r1
 801abc2:	601a      	str	r2, [r3, #0]
 801abc4:	69fb      	ldr	r3, [r7, #28]
 801abc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abc8:	69bb      	ldr	r3, [r7, #24]
 801abca:	f383 8810 	msr	PRIMASK, r3
}
 801abce:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801abd0:	1dbb      	adds	r3, r7, #6
 801abd2:	881a      	ldrh	r2, [r3, #0]
 801abd4:	68b9      	ldr	r1, [r7, #8]
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	0018      	movs	r0, r3
 801abda:	f001 f8c7 	bl	801bd6c <UART_Start_Receive_IT>
 801abde:	0003      	movs	r3, r0
 801abe0:	e000      	b.n	801abe4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801abe2:	2302      	movs	r3, #2
  }
}
 801abe4:	0018      	movs	r0, r3
 801abe6:	46bd      	mov	sp, r7
 801abe8:	b008      	add	sp, #32
 801abea:	bd80      	pop	{r7, pc}
 801abec:	40004800 	.word	0x40004800

0801abf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b088      	sub	sp, #32
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	60f8      	str	r0, [r7, #12]
 801abf8:	60b9      	str	r1, [r7, #8]
 801abfa:	1dbb      	adds	r3, r7, #6
 801abfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac02:	2b20      	cmp	r3, #32
 801ac04:	d000      	beq.n	801ac08 <HAL_UART_Transmit_DMA+0x18>
 801ac06:	e077      	b.n	801acf8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d003      	beq.n	801ac16 <HAL_UART_Transmit_DMA+0x26>
 801ac0e:	1dbb      	adds	r3, r7, #6
 801ac10:	881b      	ldrh	r3, [r3, #0]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d101      	bne.n	801ac1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801ac16:	2301      	movs	r3, #1
 801ac18:	e06f      	b.n	801acfa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	689a      	ldr	r2, [r3, #8]
 801ac1e:	2380      	movs	r3, #128	@ 0x80
 801ac20:	015b      	lsls	r3, r3, #5
 801ac22:	429a      	cmp	r2, r3
 801ac24:	d109      	bne.n	801ac3a <HAL_UART_Transmit_DMA+0x4a>
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	691b      	ldr	r3, [r3, #16]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d105      	bne.n	801ac3a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	2201      	movs	r2, #1
 801ac32:	4013      	ands	r3, r2
 801ac34:	d001      	beq.n	801ac3a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801ac36:	2301      	movs	r3, #1
 801ac38:	e05f      	b.n	801acfa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	68ba      	ldr	r2, [r7, #8]
 801ac3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	1dba      	adds	r2, r7, #6
 801ac44:	2150      	movs	r1, #80	@ 0x50
 801ac46:	8812      	ldrh	r2, [r2, #0]
 801ac48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	1dba      	adds	r2, r7, #6
 801ac4e:	2152      	movs	r1, #82	@ 0x52
 801ac50:	8812      	ldrh	r2, [r2, #0]
 801ac52:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	2284      	movs	r2, #132	@ 0x84
 801ac58:	2100      	movs	r1, #0
 801ac5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	2221      	movs	r2, #33	@ 0x21
 801ac60:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d027      	beq.n	801acba <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac6e:	4a25      	ldr	r2, [pc, #148]	@ (801ad04 <HAL_UART_Transmit_DMA+0x114>)
 801ac70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac76:	4a24      	ldr	r2, [pc, #144]	@ (801ad08 <HAL_UART_Transmit_DMA+0x118>)
 801ac78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac7e:	4a23      	ldr	r2, [pc, #140]	@ (801ad0c <HAL_UART_Transmit_DMA+0x11c>)
 801ac80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac86:	2200      	movs	r2, #0
 801ac88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac92:	0019      	movs	r1, r3
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	3328      	adds	r3, #40	@ 0x28
 801ac9a:	001a      	movs	r2, r3
 801ac9c:	1dbb      	adds	r3, r7, #6
 801ac9e:	881b      	ldrh	r3, [r3, #0]
 801aca0:	f7f7 ff36 	bl	8012b10 <HAL_DMA_Start_IT>
 801aca4:	1e03      	subs	r3, r0, #0
 801aca6:	d008      	beq.n	801acba <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	2284      	movs	r2, #132	@ 0x84
 801acac:	2110      	movs	r1, #16
 801acae:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	2220      	movs	r2, #32
 801acb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801acb6:	2301      	movs	r3, #1
 801acb8:	e01f      	b.n	801acfa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	2240      	movs	r2, #64	@ 0x40
 801acc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acc2:	f3ef 8310 	mrs	r3, PRIMASK
 801acc6:	613b      	str	r3, [r7, #16]
  return(result);
 801acc8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801acca:	61fb      	str	r3, [r7, #28]
 801accc:	2301      	movs	r3, #1
 801acce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acd0:	697b      	ldr	r3, [r7, #20]
 801acd2:	f383 8810 	msr	PRIMASK, r3
}
 801acd6:	46c0      	nop			@ (mov r8, r8)
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	689a      	ldr	r2, [r3, #8]
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	2180      	movs	r1, #128	@ 0x80
 801ace4:	430a      	orrs	r2, r1
 801ace6:	609a      	str	r2, [r3, #8]
 801ace8:	69fb      	ldr	r3, [r7, #28]
 801acea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acec:	69bb      	ldr	r3, [r7, #24]
 801acee:	f383 8810 	msr	PRIMASK, r3
}
 801acf2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801acf4:	2300      	movs	r3, #0
 801acf6:	e000      	b.n	801acfa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801acf8:	2302      	movs	r3, #2
  }
}
 801acfa:	0018      	movs	r0, r3
 801acfc:	46bd      	mov	sp, r7
 801acfe:	b008      	add	sp, #32
 801ad00:	bd80      	pop	{r7, pc}
 801ad02:	46c0      	nop			@ (mov r8, r8)
 801ad04:	0801c151 	.word	0x0801c151
 801ad08:	0801c1ed 	.word	0x0801c1ed
 801ad0c:	0801c38d 	.word	0x0801c38d

0801ad10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b088      	sub	sp, #32
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	1dbb      	adds	r3, r7, #6
 801ad1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	2280      	movs	r2, #128	@ 0x80
 801ad22:	589b      	ldr	r3, [r3, r2]
 801ad24:	2b20      	cmp	r3, #32
 801ad26:	d14a      	bne.n	801adbe <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d003      	beq.n	801ad36 <HAL_UART_Receive_DMA+0x26>
 801ad2e:	1dbb      	adds	r3, r7, #6
 801ad30:	881b      	ldrh	r3, [r3, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d101      	bne.n	801ad3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801ad36:	2301      	movs	r3, #1
 801ad38:	e042      	b.n	801adc0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	689a      	ldr	r2, [r3, #8]
 801ad3e:	2380      	movs	r3, #128	@ 0x80
 801ad40:	015b      	lsls	r3, r3, #5
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d109      	bne.n	801ad5a <HAL_UART_Receive_DMA+0x4a>
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	691b      	ldr	r3, [r3, #16]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d105      	bne.n	801ad5a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801ad4e:	68bb      	ldr	r3, [r7, #8]
 801ad50:	2201      	movs	r2, #1
 801ad52:	4013      	ands	r3, r2
 801ad54:	d001      	beq.n	801ad5a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801ad56:	2301      	movs	r3, #1
 801ad58:	e032      	b.n	801adc0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4a18      	ldr	r2, [pc, #96]	@ (801adc8 <HAL_UART_Receive_DMA+0xb8>)
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d020      	beq.n	801adac <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	685a      	ldr	r2, [r3, #4]
 801ad70:	2380      	movs	r3, #128	@ 0x80
 801ad72:	041b      	lsls	r3, r3, #16
 801ad74:	4013      	ands	r3, r2
 801ad76:	d019      	beq.n	801adac <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad78:	f3ef 8310 	mrs	r3, PRIMASK
 801ad7c:	613b      	str	r3, [r7, #16]
  return(result);
 801ad7e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ad80:	61fb      	str	r3, [r7, #28]
 801ad82:	2301      	movs	r3, #1
 801ad84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	f383 8810 	msr	PRIMASK, r3
}
 801ad8c:	46c0      	nop			@ (mov r8, r8)
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	681a      	ldr	r2, [r3, #0]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	2180      	movs	r1, #128	@ 0x80
 801ad9a:	04c9      	lsls	r1, r1, #19
 801ad9c:	430a      	orrs	r2, r1
 801ad9e:	601a      	str	r2, [r3, #0]
 801ada0:	69fb      	ldr	r3, [r7, #28]
 801ada2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ada4:	69bb      	ldr	r3, [r7, #24]
 801ada6:	f383 8810 	msr	PRIMASK, r3
}
 801adaa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801adac:	1dbb      	adds	r3, r7, #6
 801adae:	881a      	ldrh	r2, [r3, #0]
 801adb0:	68b9      	ldr	r1, [r7, #8]
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	0018      	movs	r0, r3
 801adb6:	f001 f8a3 	bl	801bf00 <UART_Start_Receive_DMA>
 801adba:	0003      	movs	r3, r0
 801adbc:	e000      	b.n	801adc0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801adbe:	2302      	movs	r3, #2
  }
}
 801adc0:	0018      	movs	r0, r3
 801adc2:	46bd      	mov	sp, r7
 801adc4:	b008      	add	sp, #32
 801adc6:	bd80      	pop	{r7, pc}
 801adc8:	40004800 	.word	0x40004800

0801adcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801adcc:	b590      	push	{r4, r7, lr}
 801adce:	b0ab      	sub	sp, #172	@ 0xac
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	69db      	ldr	r3, [r3, #28]
 801adda:	22a4      	movs	r2, #164	@ 0xa4
 801addc:	18b9      	adds	r1, r7, r2
 801adde:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	20a0      	movs	r0, #160	@ 0xa0
 801ade8:	1839      	adds	r1, r7, r0
 801adea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	689b      	ldr	r3, [r3, #8]
 801adf2:	219c      	movs	r1, #156	@ 0x9c
 801adf4:	1879      	adds	r1, r7, r1
 801adf6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801adf8:	0011      	movs	r1, r2
 801adfa:	18bb      	adds	r3, r7, r2
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	4a9c      	ldr	r2, [pc, #624]	@ (801b070 <HAL_UART_IRQHandler+0x2a4>)
 801ae00:	4013      	ands	r3, r2
 801ae02:	2298      	movs	r2, #152	@ 0x98
 801ae04:	18bc      	adds	r4, r7, r2
 801ae06:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801ae08:	18bb      	adds	r3, r7, r2
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d114      	bne.n	801ae3a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ae10:	187b      	adds	r3, r7, r1
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	2220      	movs	r2, #32
 801ae16:	4013      	ands	r3, r2
 801ae18:	d00f      	beq.n	801ae3a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ae1a:	183b      	adds	r3, r7, r0
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	2220      	movs	r2, #32
 801ae20:	4013      	ands	r3, r2
 801ae22:	d00a      	beq.n	801ae3a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d100      	bne.n	801ae2e <HAL_UART_IRQHandler+0x62>
 801ae2c:	e2aa      	b.n	801b384 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae32:	687a      	ldr	r2, [r7, #4]
 801ae34:	0010      	movs	r0, r2
 801ae36:	4798      	blx	r3
      }
      return;
 801ae38:	e2a4      	b.n	801b384 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801ae3a:	2398      	movs	r3, #152	@ 0x98
 801ae3c:	18fb      	adds	r3, r7, r3
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d100      	bne.n	801ae46 <HAL_UART_IRQHandler+0x7a>
 801ae44:	e11a      	b.n	801b07c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ae46:	239c      	movs	r3, #156	@ 0x9c
 801ae48:	18fb      	adds	r3, r7, r3
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	2201      	movs	r2, #1
 801ae4e:	4013      	ands	r3, r2
 801ae50:	d106      	bne.n	801ae60 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ae52:	23a0      	movs	r3, #160	@ 0xa0
 801ae54:	18fb      	adds	r3, r7, r3
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	4a86      	ldr	r2, [pc, #536]	@ (801b074 <HAL_UART_IRQHandler+0x2a8>)
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	d100      	bne.n	801ae60 <HAL_UART_IRQHandler+0x94>
 801ae5e:	e10d      	b.n	801b07c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ae60:	23a4      	movs	r3, #164	@ 0xa4
 801ae62:	18fb      	adds	r3, r7, r3
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	2201      	movs	r2, #1
 801ae68:	4013      	ands	r3, r2
 801ae6a:	d012      	beq.n	801ae92 <HAL_UART_IRQHandler+0xc6>
 801ae6c:	23a0      	movs	r3, #160	@ 0xa0
 801ae6e:	18fb      	adds	r3, r7, r3
 801ae70:	681a      	ldr	r2, [r3, #0]
 801ae72:	2380      	movs	r3, #128	@ 0x80
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	4013      	ands	r3, r2
 801ae78:	d00b      	beq.n	801ae92 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	2201      	movs	r2, #1
 801ae80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	2284      	movs	r2, #132	@ 0x84
 801ae86:	589b      	ldr	r3, [r3, r2]
 801ae88:	2201      	movs	r2, #1
 801ae8a:	431a      	orrs	r2, r3
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	2184      	movs	r1, #132	@ 0x84
 801ae90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ae92:	23a4      	movs	r3, #164	@ 0xa4
 801ae94:	18fb      	adds	r3, r7, r3
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2202      	movs	r2, #2
 801ae9a:	4013      	ands	r3, r2
 801ae9c:	d011      	beq.n	801aec2 <HAL_UART_IRQHandler+0xf6>
 801ae9e:	239c      	movs	r3, #156	@ 0x9c
 801aea0:	18fb      	adds	r3, r7, r3
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	2201      	movs	r2, #1
 801aea6:	4013      	ands	r3, r2
 801aea8:	d00b      	beq.n	801aec2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	2202      	movs	r2, #2
 801aeb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	2284      	movs	r2, #132	@ 0x84
 801aeb6:	589b      	ldr	r3, [r3, r2]
 801aeb8:	2204      	movs	r2, #4
 801aeba:	431a      	orrs	r2, r3
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2184      	movs	r1, #132	@ 0x84
 801aec0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801aec2:	23a4      	movs	r3, #164	@ 0xa4
 801aec4:	18fb      	adds	r3, r7, r3
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	2204      	movs	r2, #4
 801aeca:	4013      	ands	r3, r2
 801aecc:	d011      	beq.n	801aef2 <HAL_UART_IRQHandler+0x126>
 801aece:	239c      	movs	r3, #156	@ 0x9c
 801aed0:	18fb      	adds	r3, r7, r3
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2201      	movs	r2, #1
 801aed6:	4013      	ands	r3, r2
 801aed8:	d00b      	beq.n	801aef2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	2204      	movs	r2, #4
 801aee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	2284      	movs	r2, #132	@ 0x84
 801aee6:	589b      	ldr	r3, [r3, r2]
 801aee8:	2202      	movs	r2, #2
 801aeea:	431a      	orrs	r2, r3
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	2184      	movs	r1, #132	@ 0x84
 801aef0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801aef2:	23a4      	movs	r3, #164	@ 0xa4
 801aef4:	18fb      	adds	r3, r7, r3
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2208      	movs	r2, #8
 801aefa:	4013      	ands	r3, r2
 801aefc:	d017      	beq.n	801af2e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801aefe:	23a0      	movs	r3, #160	@ 0xa0
 801af00:	18fb      	adds	r3, r7, r3
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2220      	movs	r2, #32
 801af06:	4013      	ands	r3, r2
 801af08:	d105      	bne.n	801af16 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801af0a:	239c      	movs	r3, #156	@ 0x9c
 801af0c:	18fb      	adds	r3, r7, r3
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	2201      	movs	r2, #1
 801af12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801af14:	d00b      	beq.n	801af2e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	2208      	movs	r2, #8
 801af1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2284      	movs	r2, #132	@ 0x84
 801af22:	589b      	ldr	r3, [r3, r2]
 801af24:	2208      	movs	r2, #8
 801af26:	431a      	orrs	r2, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2184      	movs	r1, #132	@ 0x84
 801af2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801af2e:	23a4      	movs	r3, #164	@ 0xa4
 801af30:	18fb      	adds	r3, r7, r3
 801af32:	681a      	ldr	r2, [r3, #0]
 801af34:	2380      	movs	r3, #128	@ 0x80
 801af36:	011b      	lsls	r3, r3, #4
 801af38:	4013      	ands	r3, r2
 801af3a:	d013      	beq.n	801af64 <HAL_UART_IRQHandler+0x198>
 801af3c:	23a0      	movs	r3, #160	@ 0xa0
 801af3e:	18fb      	adds	r3, r7, r3
 801af40:	681a      	ldr	r2, [r3, #0]
 801af42:	2380      	movs	r3, #128	@ 0x80
 801af44:	04db      	lsls	r3, r3, #19
 801af46:	4013      	ands	r3, r2
 801af48:	d00c      	beq.n	801af64 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	2280      	movs	r2, #128	@ 0x80
 801af50:	0112      	lsls	r2, r2, #4
 801af52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	2284      	movs	r2, #132	@ 0x84
 801af58:	589b      	ldr	r3, [r3, r2]
 801af5a:	2220      	movs	r2, #32
 801af5c:	431a      	orrs	r2, r3
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	2184      	movs	r1, #132	@ 0x84
 801af62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2284      	movs	r2, #132	@ 0x84
 801af68:	589b      	ldr	r3, [r3, r2]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d100      	bne.n	801af70 <HAL_UART_IRQHandler+0x1a4>
 801af6e:	e20b      	b.n	801b388 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801af70:	23a4      	movs	r3, #164	@ 0xa4
 801af72:	18fb      	adds	r3, r7, r3
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	2220      	movs	r2, #32
 801af78:	4013      	ands	r3, r2
 801af7a:	d00e      	beq.n	801af9a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801af7c:	23a0      	movs	r3, #160	@ 0xa0
 801af7e:	18fb      	adds	r3, r7, r3
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	2220      	movs	r2, #32
 801af84:	4013      	ands	r3, r2
 801af86:	d008      	beq.n	801af9a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d004      	beq.n	801af9a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af94:	687a      	ldr	r2, [r7, #4]
 801af96:	0010      	movs	r0, r2
 801af98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	2284      	movs	r2, #132	@ 0x84
 801af9e:	589b      	ldr	r3, [r3, r2]
 801afa0:	2194      	movs	r1, #148	@ 0x94
 801afa2:	187a      	adds	r2, r7, r1
 801afa4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	689b      	ldr	r3, [r3, #8]
 801afac:	2240      	movs	r2, #64	@ 0x40
 801afae:	4013      	ands	r3, r2
 801afb0:	2b40      	cmp	r3, #64	@ 0x40
 801afb2:	d004      	beq.n	801afbe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801afb4:	187b      	adds	r3, r7, r1
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	2228      	movs	r2, #40	@ 0x28
 801afba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801afbc:	d04b      	beq.n	801b056 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	0018      	movs	r0, r3
 801afc2:	f001 f861 	bl	801c088 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	689b      	ldr	r3, [r3, #8]
 801afcc:	2240      	movs	r2, #64	@ 0x40
 801afce:	4013      	ands	r3, r2
 801afd0:	2b40      	cmp	r3, #64	@ 0x40
 801afd2:	d139      	bne.n	801b048 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afd4:	f3ef 8310 	mrs	r3, PRIMASK
 801afd8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801afda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801afdc:	2090      	movs	r0, #144	@ 0x90
 801afde:	183a      	adds	r2, r7, r0
 801afe0:	6013      	str	r3, [r2, #0]
 801afe2:	2301      	movs	r3, #1
 801afe4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801afe8:	f383 8810 	msr	PRIMASK, r3
}
 801afec:	46c0      	nop			@ (mov r8, r8)
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	689a      	ldr	r2, [r3, #8]
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	2140      	movs	r1, #64	@ 0x40
 801affa:	438a      	bics	r2, r1
 801affc:	609a      	str	r2, [r3, #8]
 801affe:	183b      	adds	r3, r7, r0
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b006:	f383 8810 	msr	PRIMASK, r3
}
 801b00a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b010:	2b00      	cmp	r3, #0
 801b012:	d012      	beq.n	801b03a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b018:	4a17      	ldr	r2, [pc, #92]	@ (801b078 <HAL_UART_IRQHandler+0x2ac>)
 801b01a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b020:	0018      	movs	r0, r3
 801b022:	f7f7 fe1b 	bl	8012c5c <HAL_DMA_Abort_IT>
 801b026:	1e03      	subs	r3, r0, #0
 801b028:	d020      	beq.n	801b06c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b02e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b034:	0018      	movs	r0, r3
 801b036:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b038:	e018      	b.n	801b06c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	2298      	movs	r2, #152	@ 0x98
 801b03e:	589b      	ldr	r3, [r3, r2]
 801b040:	687a      	ldr	r2, [r7, #4]
 801b042:	0010      	movs	r0, r2
 801b044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b046:	e011      	b.n	801b06c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2298      	movs	r2, #152	@ 0x98
 801b04c:	589b      	ldr	r3, [r3, r2]
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	0010      	movs	r0, r2
 801b052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b054:	e00a      	b.n	801b06c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2298      	movs	r2, #152	@ 0x98
 801b05a:	589b      	ldr	r3, [r3, r2]
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	0010      	movs	r0, r2
 801b060:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	2284      	movs	r2, #132	@ 0x84
 801b066:	2100      	movs	r1, #0
 801b068:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801b06a:	e18d      	b.n	801b388 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b06c:	46c0      	nop			@ (mov r8, r8)
    return;
 801b06e:	e18b      	b.n	801b388 <HAL_UART_IRQHandler+0x5bc>
 801b070:	0000080f 	.word	0x0000080f
 801b074:	04000120 	.word	0x04000120
 801b078:	0801c415 	.word	0x0801c415

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b080:	2b01      	cmp	r3, #1
 801b082:	d000      	beq.n	801b086 <HAL_UART_IRQHandler+0x2ba>
 801b084:	e13d      	b.n	801b302 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b086:	23a4      	movs	r3, #164	@ 0xa4
 801b088:	18fb      	adds	r3, r7, r3
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	2210      	movs	r2, #16
 801b08e:	4013      	ands	r3, r2
 801b090:	d100      	bne.n	801b094 <HAL_UART_IRQHandler+0x2c8>
 801b092:	e136      	b.n	801b302 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b094:	23a0      	movs	r3, #160	@ 0xa0
 801b096:	18fb      	adds	r3, r7, r3
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	2210      	movs	r2, #16
 801b09c:	4013      	ands	r3, r2
 801b09e:	d100      	bne.n	801b0a2 <HAL_UART_IRQHandler+0x2d6>
 801b0a0:	e12f      	b.n	801b302 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	2210      	movs	r2, #16
 801b0a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	689b      	ldr	r3, [r3, #8]
 801b0b0:	2240      	movs	r2, #64	@ 0x40
 801b0b2:	4013      	ands	r3, r2
 801b0b4:	2b40      	cmp	r3, #64	@ 0x40
 801b0b6:	d000      	beq.n	801b0ba <HAL_UART_IRQHandler+0x2ee>
 801b0b8:	e0a2      	b.n	801b200 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	685a      	ldr	r2, [r3, #4]
 801b0c2:	217e      	movs	r1, #126	@ 0x7e
 801b0c4:	187b      	adds	r3, r7, r1
 801b0c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801b0c8:	187b      	adds	r3, r7, r1
 801b0ca:	881b      	ldrh	r3, [r3, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d100      	bne.n	801b0d2 <HAL_UART_IRQHandler+0x306>
 801b0d0:	e15c      	b.n	801b38c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	2258      	movs	r2, #88	@ 0x58
 801b0d6:	5a9b      	ldrh	r3, [r3, r2]
 801b0d8:	187a      	adds	r2, r7, r1
 801b0da:	8812      	ldrh	r2, [r2, #0]
 801b0dc:	429a      	cmp	r2, r3
 801b0de:	d300      	bcc.n	801b0e2 <HAL_UART_IRQHandler+0x316>
 801b0e0:	e154      	b.n	801b38c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	187a      	adds	r2, r7, r1
 801b0e6:	215a      	movs	r1, #90	@ 0x5a
 801b0e8:	8812      	ldrh	r2, [r2, #0]
 801b0ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	2220      	movs	r2, #32
 801b0f6:	4013      	ands	r3, r2
 801b0f8:	d16f      	bne.n	801b1da <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b0fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b102:	67bb      	str	r3, [r7, #120]	@ 0x78
 801b104:	2301      	movs	r3, #1
 801b106:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b10a:	f383 8810 	msr	PRIMASK, r3
}
 801b10e:	46c0      	nop			@ (mov r8, r8)
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	681a      	ldr	r2, [r3, #0]
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	49a0      	ldr	r1, [pc, #640]	@ (801b39c <HAL_UART_IRQHandler+0x5d0>)
 801b11c:	400a      	ands	r2, r1
 801b11e:	601a      	str	r2, [r3, #0]
 801b120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b122:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b126:	f383 8810 	msr	PRIMASK, r3
}
 801b12a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b12c:	f3ef 8310 	mrs	r3, PRIMASK
 801b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801b132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b134:	677b      	str	r3, [r7, #116]	@ 0x74
 801b136:	2301      	movs	r3, #1
 801b138:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b13c:	f383 8810 	msr	PRIMASK, r3
}
 801b140:	46c0      	nop			@ (mov r8, r8)
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	689a      	ldr	r2, [r3, #8]
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	2101      	movs	r1, #1
 801b14e:	438a      	bics	r2, r1
 801b150:	609a      	str	r2, [r3, #8]
 801b152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b154:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b158:	f383 8810 	msr	PRIMASK, r3
}
 801b15c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b15e:	f3ef 8310 	mrs	r3, PRIMASK
 801b162:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801b164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b166:	673b      	str	r3, [r7, #112]	@ 0x70
 801b168:	2301      	movs	r3, #1
 801b16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b16e:	f383 8810 	msr	PRIMASK, r3
}
 801b172:	46c0      	nop			@ (mov r8, r8)
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	689a      	ldr	r2, [r3, #8]
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	2140      	movs	r1, #64	@ 0x40
 801b180:	438a      	bics	r2, r1
 801b182:	609a      	str	r2, [r3, #8]
 801b184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b186:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b18a:	f383 8810 	msr	PRIMASK, r3
}
 801b18e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	2280      	movs	r2, #128	@ 0x80
 801b194:	2120      	movs	r1, #32
 801b196:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	2200      	movs	r2, #0
 801b19c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b19e:	f3ef 8310 	mrs	r3, PRIMASK
 801b1a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801b1a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b1a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b1a8:	2301      	movs	r3, #1
 801b1aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b1ae:	f383 8810 	msr	PRIMASK, r3
}
 801b1b2:	46c0      	nop			@ (mov r8, r8)
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	681a      	ldr	r2, [r3, #0]
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	2110      	movs	r1, #16
 801b1c0:	438a      	bics	r2, r1
 801b1c2:	601a      	str	r2, [r3, #0]
 801b1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b1ca:	f383 8810 	msr	PRIMASK, r3
}
 801b1ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b1d4:	0018      	movs	r0, r3
 801b1d6:	f7f7 fd01 	bl	8012bdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	2202      	movs	r2, #2
 801b1de:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	22ac      	movs	r2, #172	@ 0xac
 801b1e4:	589b      	ldr	r3, [r3, r2]
 801b1e6:	687a      	ldr	r2, [r7, #4]
 801b1e8:	2158      	movs	r1, #88	@ 0x58
 801b1ea:	5a51      	ldrh	r1, [r2, r1]
 801b1ec:	687a      	ldr	r2, [r7, #4]
 801b1ee:	205a      	movs	r0, #90	@ 0x5a
 801b1f0:	5a12      	ldrh	r2, [r2, r0]
 801b1f2:	b292      	uxth	r2, r2
 801b1f4:	1a8a      	subs	r2, r1, r2
 801b1f6:	b291      	uxth	r1, r2
 801b1f8:	687a      	ldr	r2, [r7, #4]
 801b1fa:	0010      	movs	r0, r2
 801b1fc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b1fe:	e0c5      	b.n	801b38c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2258      	movs	r2, #88	@ 0x58
 801b204:	5a99      	ldrh	r1, [r3, r2]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	225a      	movs	r2, #90	@ 0x5a
 801b20a:	5a9b      	ldrh	r3, [r3, r2]
 801b20c:	b29a      	uxth	r2, r3
 801b20e:	208e      	movs	r0, #142	@ 0x8e
 801b210:	183b      	adds	r3, r7, r0
 801b212:	1a8a      	subs	r2, r1, r2
 801b214:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	225a      	movs	r2, #90	@ 0x5a
 801b21a:	5a9b      	ldrh	r3, [r3, r2]
 801b21c:	b29b      	uxth	r3, r3
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d100      	bne.n	801b224 <HAL_UART_IRQHandler+0x458>
 801b222:	e0b5      	b.n	801b390 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801b224:	183b      	adds	r3, r7, r0
 801b226:	881b      	ldrh	r3, [r3, #0]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d100      	bne.n	801b22e <HAL_UART_IRQHandler+0x462>
 801b22c:	e0b0      	b.n	801b390 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b22e:	f3ef 8310 	mrs	r3, PRIMASK
 801b232:	60fb      	str	r3, [r7, #12]
  return(result);
 801b234:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b236:	2488      	movs	r4, #136	@ 0x88
 801b238:	193a      	adds	r2, r7, r4
 801b23a:	6013      	str	r3, [r2, #0]
 801b23c:	2301      	movs	r3, #1
 801b23e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b240:	693b      	ldr	r3, [r7, #16]
 801b242:	f383 8810 	msr	PRIMASK, r3
}
 801b246:	46c0      	nop			@ (mov r8, r8)
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	681a      	ldr	r2, [r3, #0]
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	4953      	ldr	r1, [pc, #332]	@ (801b3a0 <HAL_UART_IRQHandler+0x5d4>)
 801b254:	400a      	ands	r2, r1
 801b256:	601a      	str	r2, [r3, #0]
 801b258:	193b      	adds	r3, r7, r4
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	f383 8810 	msr	PRIMASK, r3
}
 801b264:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b266:	f3ef 8310 	mrs	r3, PRIMASK
 801b26a:	61bb      	str	r3, [r7, #24]
  return(result);
 801b26c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b26e:	2484      	movs	r4, #132	@ 0x84
 801b270:	193a      	adds	r2, r7, r4
 801b272:	6013      	str	r3, [r2, #0]
 801b274:	2301      	movs	r3, #1
 801b276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b278:	69fb      	ldr	r3, [r7, #28]
 801b27a:	f383 8810 	msr	PRIMASK, r3
}
 801b27e:	46c0      	nop			@ (mov r8, r8)
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	689a      	ldr	r2, [r3, #8]
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	2101      	movs	r1, #1
 801b28c:	438a      	bics	r2, r1
 801b28e:	609a      	str	r2, [r3, #8]
 801b290:	193b      	adds	r3, r7, r4
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b296:	6a3b      	ldr	r3, [r7, #32]
 801b298:	f383 8810 	msr	PRIMASK, r3
}
 801b29c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	2280      	movs	r2, #128	@ 0x80
 801b2a2:	2120      	movs	r1, #32
 801b2a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801b2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2ba:	2480      	movs	r4, #128	@ 0x80
 801b2bc:	193a      	adds	r2, r7, r4
 801b2be:	6013      	str	r3, [r2, #0]
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2c6:	f383 8810 	msr	PRIMASK, r3
}
 801b2ca:	46c0      	nop			@ (mov r8, r8)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2110      	movs	r1, #16
 801b2d8:	438a      	bics	r2, r1
 801b2da:	601a      	str	r2, [r3, #0]
 801b2dc:	193b      	adds	r3, r7, r4
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2e4:	f383 8810 	msr	PRIMASK, r3
}
 801b2e8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	2202      	movs	r2, #2
 801b2ee:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	22ac      	movs	r2, #172	@ 0xac
 801b2f4:	589b      	ldr	r3, [r3, r2]
 801b2f6:	183a      	adds	r2, r7, r0
 801b2f8:	8811      	ldrh	r1, [r2, #0]
 801b2fa:	687a      	ldr	r2, [r7, #4]
 801b2fc:	0010      	movs	r0, r2
 801b2fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b300:	e046      	b.n	801b390 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b302:	23a4      	movs	r3, #164	@ 0xa4
 801b304:	18fb      	adds	r3, r7, r3
 801b306:	681a      	ldr	r2, [r3, #0]
 801b308:	2380      	movs	r3, #128	@ 0x80
 801b30a:	035b      	lsls	r3, r3, #13
 801b30c:	4013      	ands	r3, r2
 801b30e:	d012      	beq.n	801b336 <HAL_UART_IRQHandler+0x56a>
 801b310:	239c      	movs	r3, #156	@ 0x9c
 801b312:	18fb      	adds	r3, r7, r3
 801b314:	681a      	ldr	r2, [r3, #0]
 801b316:	2380      	movs	r3, #128	@ 0x80
 801b318:	03db      	lsls	r3, r3, #15
 801b31a:	4013      	ands	r3, r2
 801b31c:	d00b      	beq.n	801b336 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	2280      	movs	r2, #128	@ 0x80
 801b324:	0352      	lsls	r2, r2, #13
 801b326:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	22a8      	movs	r2, #168	@ 0xa8
 801b32c:	589b      	ldr	r3, [r3, r2]
 801b32e:	687a      	ldr	r2, [r7, #4]
 801b330:	0010      	movs	r0, r2
 801b332:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b334:	e02f      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b336:	23a4      	movs	r3, #164	@ 0xa4
 801b338:	18fb      	adds	r3, r7, r3
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2280      	movs	r2, #128	@ 0x80
 801b33e:	4013      	ands	r3, r2
 801b340:	d00f      	beq.n	801b362 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b342:	23a0      	movs	r3, #160	@ 0xa0
 801b344:	18fb      	adds	r3, r7, r3
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	2280      	movs	r2, #128	@ 0x80
 801b34a:	4013      	ands	r3, r2
 801b34c:	d009      	beq.n	801b362 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b352:	2b00      	cmp	r3, #0
 801b354:	d01e      	beq.n	801b394 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b35a:	687a      	ldr	r2, [r7, #4]
 801b35c:	0010      	movs	r0, r2
 801b35e:	4798      	blx	r3
    }
    return;
 801b360:	e018      	b.n	801b394 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b362:	23a4      	movs	r3, #164	@ 0xa4
 801b364:	18fb      	adds	r3, r7, r3
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2240      	movs	r2, #64	@ 0x40
 801b36a:	4013      	ands	r3, r2
 801b36c:	d013      	beq.n	801b396 <HAL_UART_IRQHandler+0x5ca>
 801b36e:	23a0      	movs	r3, #160	@ 0xa0
 801b370:	18fb      	adds	r3, r7, r3
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2240      	movs	r2, #64	@ 0x40
 801b376:	4013      	ands	r3, r2
 801b378:	d00d      	beq.n	801b396 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	0018      	movs	r0, r3
 801b37e:	f001 f862 	bl	801c446 <UART_EndTransmit_IT>
    return;
 801b382:	e008      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
      return;
 801b384:	46c0      	nop			@ (mov r8, r8)
 801b386:	e006      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
    return;
 801b388:	46c0      	nop			@ (mov r8, r8)
 801b38a:	e004      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
      return;
 801b38c:	46c0      	nop			@ (mov r8, r8)
 801b38e:	e002      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
      return;
 801b390:	46c0      	nop			@ (mov r8, r8)
 801b392:	e000      	b.n	801b396 <HAL_UART_IRQHandler+0x5ca>
    return;
 801b394:	46c0      	nop			@ (mov r8, r8)
  }

}
 801b396:	46bd      	mov	sp, r7
 801b398:	b02b      	add	sp, #172	@ 0xac
 801b39a:	bd90      	pop	{r4, r7, pc}
 801b39c:	fffffeff 	.word	0xfffffeff
 801b3a0:	fffffedf 	.word	0xfffffedf

0801b3a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b082      	sub	sp, #8
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b3ac:	46c0      	nop			@ (mov r8, r8)
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	b002      	add	sp, #8
 801b3b2:	bd80      	pop	{r7, pc}

0801b3b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b082      	sub	sp, #8
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b3bc:	46c0      	nop			@ (mov r8, r8)
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	b002      	add	sp, #8
 801b3c2:	bd80      	pop	{r7, pc}

0801b3c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b082      	sub	sp, #8
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b3cc:	46c0      	nop			@ (mov r8, r8)
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	b002      	add	sp, #8
 801b3d2:	bd80      	pop	{r7, pc}

0801b3d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b082      	sub	sp, #8
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b3dc:	46c0      	nop			@ (mov r8, r8)
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	b002      	add	sp, #8
 801b3e2:	bd80      	pop	{r7, pc}

0801b3e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b082      	sub	sp, #8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b3ec:	46c0      	nop			@ (mov r8, r8)
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	b002      	add	sp, #8
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b3fc:	46c0      	nop			@ (mov r8, r8)
 801b3fe:	46bd      	mov	sp, r7
 801b400:	b002      	add	sp, #8
 801b402:	bd80      	pop	{r7, pc}

0801b404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
 801b40c:	000a      	movs	r2, r1
 801b40e:	1cbb      	adds	r3, r7, #2
 801b410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b412:	46c0      	nop			@ (mov r8, r8)
 801b414:	46bd      	mov	sp, r7
 801b416:	b002      	add	sp, #8
 801b418:	bd80      	pop	{r7, pc}
	...

0801b41c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b082      	sub	sp, #8
 801b420:	af00      	add	r7, sp, #0
 801b422:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	2188      	movs	r1, #136	@ 0x88
 801b428:	4a14      	ldr	r2, [pc, #80]	@ (801b47c <UART_InitCallbacksToDefault+0x60>)
 801b42a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	218c      	movs	r1, #140	@ 0x8c
 801b430:	4a13      	ldr	r2, [pc, #76]	@ (801b480 <UART_InitCallbacksToDefault+0x64>)
 801b432:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	2190      	movs	r1, #144	@ 0x90
 801b438:	4a12      	ldr	r2, [pc, #72]	@ (801b484 <UART_InitCallbacksToDefault+0x68>)
 801b43a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	2194      	movs	r1, #148	@ 0x94
 801b440:	4a11      	ldr	r2, [pc, #68]	@ (801b488 <UART_InitCallbacksToDefault+0x6c>)
 801b442:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2198      	movs	r1, #152	@ 0x98
 801b448:	4a10      	ldr	r2, [pc, #64]	@ (801b48c <UART_InitCallbacksToDefault+0x70>)
 801b44a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	219c      	movs	r1, #156	@ 0x9c
 801b450:	4a0f      	ldr	r2, [pc, #60]	@ (801b490 <UART_InitCallbacksToDefault+0x74>)
 801b452:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	21a0      	movs	r1, #160	@ 0xa0
 801b458:	4a0e      	ldr	r2, [pc, #56]	@ (801b494 <UART_InitCallbacksToDefault+0x78>)
 801b45a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	21a4      	movs	r1, #164	@ 0xa4
 801b460:	4a0d      	ldr	r2, [pc, #52]	@ (801b498 <UART_InitCallbacksToDefault+0x7c>)
 801b462:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	21a8      	movs	r1, #168	@ 0xa8
 801b468:	4a0c      	ldr	r2, [pc, #48]	@ (801b49c <UART_InitCallbacksToDefault+0x80>)
 801b46a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	21ac      	movs	r1, #172	@ 0xac
 801b470:	4a0b      	ldr	r2, [pc, #44]	@ (801b4a0 <UART_InitCallbacksToDefault+0x84>)
 801b472:	505a      	str	r2, [r3, r1]

}
 801b474:	46c0      	nop			@ (mov r8, r8)
 801b476:	46bd      	mov	sp, r7
 801b478:	b002      	add	sp, #8
 801b47a:	bd80      	pop	{r7, pc}
 801b47c:	0801b3b5 	.word	0x0801b3b5
 801b480:	0801b3a5 	.word	0x0801b3a5
 801b484:	0801b3c5 	.word	0x0801b3c5
 801b488:	0800b1ed 	.word	0x0800b1ed
 801b48c:	080049a9 	.word	0x080049a9
 801b490:	0801b3d5 	.word	0x0801b3d5
 801b494:	0801b3e5 	.word	0x0801b3e5
 801b498:	0801b3f5 	.word	0x0801b3f5
 801b49c:	0801c839 	.word	0x0801c839
 801b4a0:	0801b405 	.word	0x0801b405

0801b4a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b4a4:	b5b0      	push	{r4, r5, r7, lr}
 801b4a6:	b08e      	sub	sp, #56	@ 0x38
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b4ac:	231a      	movs	r3, #26
 801b4ae:	2218      	movs	r2, #24
 801b4b0:	189b      	adds	r3, r3, r2
 801b4b2:	19db      	adds	r3, r3, r7
 801b4b4:	2200      	movs	r2, #0
 801b4b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b4b8:	69fb      	ldr	r3, [r7, #28]
 801b4ba:	689a      	ldr	r2, [r3, #8]
 801b4bc:	69fb      	ldr	r3, [r7, #28]
 801b4be:	691b      	ldr	r3, [r3, #16]
 801b4c0:	431a      	orrs	r2, r3
 801b4c2:	69fb      	ldr	r3, [r7, #28]
 801b4c4:	695b      	ldr	r3, [r3, #20]
 801b4c6:	431a      	orrs	r2, r3
 801b4c8:	69fb      	ldr	r3, [r7, #28]
 801b4ca:	69db      	ldr	r3, [r3, #28]
 801b4cc:	4313      	orrs	r3, r2
 801b4ce:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b4d0:	69fb      	ldr	r3, [r7, #28]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4ac3      	ldr	r2, [pc, #780]	@ (801b7e4 <UART_SetConfig+0x340>)
 801b4d8:	4013      	ands	r3, r2
 801b4da:	0019      	movs	r1, r3
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b4e2:	430a      	orrs	r2, r1
 801b4e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b4e6:	69fb      	ldr	r3, [r7, #28]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	685b      	ldr	r3, [r3, #4]
 801b4ec:	4abe      	ldr	r2, [pc, #760]	@ (801b7e8 <UART_SetConfig+0x344>)
 801b4ee:	4013      	ands	r3, r2
 801b4f0:	0019      	movs	r1, r3
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	68da      	ldr	r2, [r3, #12]
 801b4f6:	69fb      	ldr	r3, [r7, #28]
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	430a      	orrs	r2, r1
 801b4fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b4fe:	69fb      	ldr	r3, [r7, #28]
 801b500:	699b      	ldr	r3, [r3, #24]
 801b502:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b504:	69fb      	ldr	r3, [r7, #28]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	4ab8      	ldr	r2, [pc, #736]	@ (801b7ec <UART_SetConfig+0x348>)
 801b50a:	4293      	cmp	r3, r2
 801b50c:	d004      	beq.n	801b518 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b50e:	69fb      	ldr	r3, [r7, #28]
 801b510:	6a1b      	ldr	r3, [r3, #32]
 801b512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b514:	4313      	orrs	r3, r2
 801b516:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b518:	69fb      	ldr	r3, [r7, #28]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	689b      	ldr	r3, [r3, #8]
 801b51e:	4ab4      	ldr	r2, [pc, #720]	@ (801b7f0 <UART_SetConfig+0x34c>)
 801b520:	4013      	ands	r3, r2
 801b522:	0019      	movs	r1, r3
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b52a:	430a      	orrs	r2, r1
 801b52c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b52e:	69fb      	ldr	r3, [r7, #28]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	4ab0      	ldr	r2, [pc, #704]	@ (801b7f4 <UART_SetConfig+0x350>)
 801b534:	4293      	cmp	r3, r2
 801b536:	d131      	bne.n	801b59c <UART_SetConfig+0xf8>
 801b538:	4baf      	ldr	r3, [pc, #700]	@ (801b7f8 <UART_SetConfig+0x354>)
 801b53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b53c:	2203      	movs	r2, #3
 801b53e:	4013      	ands	r3, r2
 801b540:	2b03      	cmp	r3, #3
 801b542:	d01d      	beq.n	801b580 <UART_SetConfig+0xdc>
 801b544:	d823      	bhi.n	801b58e <UART_SetConfig+0xea>
 801b546:	2b02      	cmp	r3, #2
 801b548:	d00c      	beq.n	801b564 <UART_SetConfig+0xc0>
 801b54a:	d820      	bhi.n	801b58e <UART_SetConfig+0xea>
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d002      	beq.n	801b556 <UART_SetConfig+0xb2>
 801b550:	2b01      	cmp	r3, #1
 801b552:	d00e      	beq.n	801b572 <UART_SetConfig+0xce>
 801b554:	e01b      	b.n	801b58e <UART_SetConfig+0xea>
 801b556:	231b      	movs	r3, #27
 801b558:	2218      	movs	r2, #24
 801b55a:	189b      	adds	r3, r3, r2
 801b55c:	19db      	adds	r3, r3, r7
 801b55e:	2201      	movs	r2, #1
 801b560:	701a      	strb	r2, [r3, #0]
 801b562:	e0b4      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b564:	231b      	movs	r3, #27
 801b566:	2218      	movs	r2, #24
 801b568:	189b      	adds	r3, r3, r2
 801b56a:	19db      	adds	r3, r3, r7
 801b56c:	2202      	movs	r2, #2
 801b56e:	701a      	strb	r2, [r3, #0]
 801b570:	e0ad      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b572:	231b      	movs	r3, #27
 801b574:	2218      	movs	r2, #24
 801b576:	189b      	adds	r3, r3, r2
 801b578:	19db      	adds	r3, r3, r7
 801b57a:	2204      	movs	r2, #4
 801b57c:	701a      	strb	r2, [r3, #0]
 801b57e:	e0a6      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b580:	231b      	movs	r3, #27
 801b582:	2218      	movs	r2, #24
 801b584:	189b      	adds	r3, r3, r2
 801b586:	19db      	adds	r3, r3, r7
 801b588:	2208      	movs	r2, #8
 801b58a:	701a      	strb	r2, [r3, #0]
 801b58c:	e09f      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b58e:	231b      	movs	r3, #27
 801b590:	2218      	movs	r2, #24
 801b592:	189b      	adds	r3, r3, r2
 801b594:	19db      	adds	r3, r3, r7
 801b596:	2210      	movs	r2, #16
 801b598:	701a      	strb	r2, [r3, #0]
 801b59a:	e098      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b59c:	69fb      	ldr	r3, [r7, #28]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	4a96      	ldr	r2, [pc, #600]	@ (801b7fc <UART_SetConfig+0x358>)
 801b5a2:	4293      	cmp	r3, r2
 801b5a4:	d131      	bne.n	801b60a <UART_SetConfig+0x166>
 801b5a6:	4b94      	ldr	r3, [pc, #592]	@ (801b7f8 <UART_SetConfig+0x354>)
 801b5a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5aa:	220c      	movs	r2, #12
 801b5ac:	4013      	ands	r3, r2
 801b5ae:	2b0c      	cmp	r3, #12
 801b5b0:	d01d      	beq.n	801b5ee <UART_SetConfig+0x14a>
 801b5b2:	d823      	bhi.n	801b5fc <UART_SetConfig+0x158>
 801b5b4:	2b08      	cmp	r3, #8
 801b5b6:	d00c      	beq.n	801b5d2 <UART_SetConfig+0x12e>
 801b5b8:	d820      	bhi.n	801b5fc <UART_SetConfig+0x158>
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d002      	beq.n	801b5c4 <UART_SetConfig+0x120>
 801b5be:	2b04      	cmp	r3, #4
 801b5c0:	d00e      	beq.n	801b5e0 <UART_SetConfig+0x13c>
 801b5c2:	e01b      	b.n	801b5fc <UART_SetConfig+0x158>
 801b5c4:	231b      	movs	r3, #27
 801b5c6:	2218      	movs	r2, #24
 801b5c8:	189b      	adds	r3, r3, r2
 801b5ca:	19db      	adds	r3, r3, r7
 801b5cc:	2200      	movs	r2, #0
 801b5ce:	701a      	strb	r2, [r3, #0]
 801b5d0:	e07d      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b5d2:	231b      	movs	r3, #27
 801b5d4:	2218      	movs	r2, #24
 801b5d6:	189b      	adds	r3, r3, r2
 801b5d8:	19db      	adds	r3, r3, r7
 801b5da:	2202      	movs	r2, #2
 801b5dc:	701a      	strb	r2, [r3, #0]
 801b5de:	e076      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b5e0:	231b      	movs	r3, #27
 801b5e2:	2218      	movs	r2, #24
 801b5e4:	189b      	adds	r3, r3, r2
 801b5e6:	19db      	adds	r3, r3, r7
 801b5e8:	2204      	movs	r2, #4
 801b5ea:	701a      	strb	r2, [r3, #0]
 801b5ec:	e06f      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b5ee:	231b      	movs	r3, #27
 801b5f0:	2218      	movs	r2, #24
 801b5f2:	189b      	adds	r3, r3, r2
 801b5f4:	19db      	adds	r3, r3, r7
 801b5f6:	2208      	movs	r2, #8
 801b5f8:	701a      	strb	r2, [r3, #0]
 801b5fa:	e068      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b5fc:	231b      	movs	r3, #27
 801b5fe:	2218      	movs	r2, #24
 801b600:	189b      	adds	r3, r3, r2
 801b602:	19db      	adds	r3, r3, r7
 801b604:	2210      	movs	r2, #16
 801b606:	701a      	strb	r2, [r3, #0]
 801b608:	e061      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	4a7c      	ldr	r2, [pc, #496]	@ (801b800 <UART_SetConfig+0x35c>)
 801b610:	4293      	cmp	r3, r2
 801b612:	d106      	bne.n	801b622 <UART_SetConfig+0x17e>
 801b614:	231b      	movs	r3, #27
 801b616:	2218      	movs	r2, #24
 801b618:	189b      	adds	r3, r3, r2
 801b61a:	19db      	adds	r3, r3, r7
 801b61c:	2200      	movs	r2, #0
 801b61e:	701a      	strb	r2, [r3, #0]
 801b620:	e055      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b622:	69fb      	ldr	r3, [r7, #28]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	4a77      	ldr	r2, [pc, #476]	@ (801b804 <UART_SetConfig+0x360>)
 801b628:	4293      	cmp	r3, r2
 801b62a:	d106      	bne.n	801b63a <UART_SetConfig+0x196>
 801b62c:	231b      	movs	r3, #27
 801b62e:	2218      	movs	r2, #24
 801b630:	189b      	adds	r3, r3, r2
 801b632:	19db      	adds	r3, r3, r7
 801b634:	2200      	movs	r2, #0
 801b636:	701a      	strb	r2, [r3, #0]
 801b638:	e049      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b63a:	69fb      	ldr	r3, [r7, #28]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	4a6b      	ldr	r2, [pc, #428]	@ (801b7ec <UART_SetConfig+0x348>)
 801b640:	4293      	cmp	r3, r2
 801b642:	d13e      	bne.n	801b6c2 <UART_SetConfig+0x21e>
 801b644:	4b6c      	ldr	r3, [pc, #432]	@ (801b7f8 <UART_SetConfig+0x354>)
 801b646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b648:	23c0      	movs	r3, #192	@ 0xc0
 801b64a:	011b      	lsls	r3, r3, #4
 801b64c:	4013      	ands	r3, r2
 801b64e:	22c0      	movs	r2, #192	@ 0xc0
 801b650:	0112      	lsls	r2, r2, #4
 801b652:	4293      	cmp	r3, r2
 801b654:	d027      	beq.n	801b6a6 <UART_SetConfig+0x202>
 801b656:	22c0      	movs	r2, #192	@ 0xc0
 801b658:	0112      	lsls	r2, r2, #4
 801b65a:	4293      	cmp	r3, r2
 801b65c:	d82a      	bhi.n	801b6b4 <UART_SetConfig+0x210>
 801b65e:	2280      	movs	r2, #128	@ 0x80
 801b660:	0112      	lsls	r2, r2, #4
 801b662:	4293      	cmp	r3, r2
 801b664:	d011      	beq.n	801b68a <UART_SetConfig+0x1e6>
 801b666:	2280      	movs	r2, #128	@ 0x80
 801b668:	0112      	lsls	r2, r2, #4
 801b66a:	4293      	cmp	r3, r2
 801b66c:	d822      	bhi.n	801b6b4 <UART_SetConfig+0x210>
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d004      	beq.n	801b67c <UART_SetConfig+0x1d8>
 801b672:	2280      	movs	r2, #128	@ 0x80
 801b674:	00d2      	lsls	r2, r2, #3
 801b676:	4293      	cmp	r3, r2
 801b678:	d00e      	beq.n	801b698 <UART_SetConfig+0x1f4>
 801b67a:	e01b      	b.n	801b6b4 <UART_SetConfig+0x210>
 801b67c:	231b      	movs	r3, #27
 801b67e:	2218      	movs	r2, #24
 801b680:	189b      	adds	r3, r3, r2
 801b682:	19db      	adds	r3, r3, r7
 801b684:	2200      	movs	r2, #0
 801b686:	701a      	strb	r2, [r3, #0]
 801b688:	e021      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b68a:	231b      	movs	r3, #27
 801b68c:	2218      	movs	r2, #24
 801b68e:	189b      	adds	r3, r3, r2
 801b690:	19db      	adds	r3, r3, r7
 801b692:	2202      	movs	r2, #2
 801b694:	701a      	strb	r2, [r3, #0]
 801b696:	e01a      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b698:	231b      	movs	r3, #27
 801b69a:	2218      	movs	r2, #24
 801b69c:	189b      	adds	r3, r3, r2
 801b69e:	19db      	adds	r3, r3, r7
 801b6a0:	2204      	movs	r2, #4
 801b6a2:	701a      	strb	r2, [r3, #0]
 801b6a4:	e013      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b6a6:	231b      	movs	r3, #27
 801b6a8:	2218      	movs	r2, #24
 801b6aa:	189b      	adds	r3, r3, r2
 801b6ac:	19db      	adds	r3, r3, r7
 801b6ae:	2208      	movs	r2, #8
 801b6b0:	701a      	strb	r2, [r3, #0]
 801b6b2:	e00c      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b6b4:	231b      	movs	r3, #27
 801b6b6:	2218      	movs	r2, #24
 801b6b8:	189b      	adds	r3, r3, r2
 801b6ba:	19db      	adds	r3, r3, r7
 801b6bc:	2210      	movs	r2, #16
 801b6be:	701a      	strb	r2, [r3, #0]
 801b6c0:	e005      	b.n	801b6ce <UART_SetConfig+0x22a>
 801b6c2:	231b      	movs	r3, #27
 801b6c4:	2218      	movs	r2, #24
 801b6c6:	189b      	adds	r3, r3, r2
 801b6c8:	19db      	adds	r3, r3, r7
 801b6ca:	2210      	movs	r2, #16
 801b6cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b6ce:	69fb      	ldr	r3, [r7, #28]
 801b6d0:	681b      	ldr	r3, [r3, #0]
 801b6d2:	4a46      	ldr	r2, [pc, #280]	@ (801b7ec <UART_SetConfig+0x348>)
 801b6d4:	4293      	cmp	r3, r2
 801b6d6:	d000      	beq.n	801b6da <UART_SetConfig+0x236>
 801b6d8:	e09a      	b.n	801b810 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b6da:	231b      	movs	r3, #27
 801b6dc:	2218      	movs	r2, #24
 801b6de:	189b      	adds	r3, r3, r2
 801b6e0:	19db      	adds	r3, r3, r7
 801b6e2:	781b      	ldrb	r3, [r3, #0]
 801b6e4:	2b08      	cmp	r3, #8
 801b6e6:	d01d      	beq.n	801b724 <UART_SetConfig+0x280>
 801b6e8:	dc20      	bgt.n	801b72c <UART_SetConfig+0x288>
 801b6ea:	2b04      	cmp	r3, #4
 801b6ec:	d015      	beq.n	801b71a <UART_SetConfig+0x276>
 801b6ee:	dc1d      	bgt.n	801b72c <UART_SetConfig+0x288>
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d002      	beq.n	801b6fa <UART_SetConfig+0x256>
 801b6f4:	2b02      	cmp	r3, #2
 801b6f6:	d005      	beq.n	801b704 <UART_SetConfig+0x260>
 801b6f8:	e018      	b.n	801b72c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b6fa:	f7fd fe4b 	bl	8019394 <HAL_RCC_GetPCLK1Freq>
 801b6fe:	0003      	movs	r3, r0
 801b700:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b702:	e01c      	b.n	801b73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b704:	4b3c      	ldr	r3, [pc, #240]	@ (801b7f8 <UART_SetConfig+0x354>)
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	2210      	movs	r2, #16
 801b70a:	4013      	ands	r3, r2
 801b70c:	d002      	beq.n	801b714 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b70e:	4b3e      	ldr	r3, [pc, #248]	@ (801b808 <UART_SetConfig+0x364>)
 801b710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b712:	e014      	b.n	801b73e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801b714:	4b3d      	ldr	r3, [pc, #244]	@ (801b80c <UART_SetConfig+0x368>)
 801b716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b718:	e011      	b.n	801b73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b71a:	f7fd fd8b 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 801b71e:	0003      	movs	r3, r0
 801b720:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b722:	e00c      	b.n	801b73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b724:	2380      	movs	r3, #128	@ 0x80
 801b726:	021b      	lsls	r3, r3, #8
 801b728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b72a:	e008      	b.n	801b73e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801b72c:	2300      	movs	r3, #0
 801b72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b730:	231a      	movs	r3, #26
 801b732:	2218      	movs	r2, #24
 801b734:	189b      	adds	r3, r3, r2
 801b736:	19db      	adds	r3, r3, r7
 801b738:	2201      	movs	r2, #1
 801b73a:	701a      	strb	r2, [r3, #0]
        break;
 801b73c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b740:	2b00      	cmp	r3, #0
 801b742:	d100      	bne.n	801b746 <UART_SetConfig+0x2a2>
 801b744:	e133      	b.n	801b9ae <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b746:	69fb      	ldr	r3, [r7, #28]
 801b748:	685a      	ldr	r2, [r3, #4]
 801b74a:	0013      	movs	r3, r2
 801b74c:	005b      	lsls	r3, r3, #1
 801b74e:	189b      	adds	r3, r3, r2
 801b750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b752:	429a      	cmp	r2, r3
 801b754:	d305      	bcc.n	801b762 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801b756:	69fb      	ldr	r3, [r7, #28]
 801b758:	685b      	ldr	r3, [r3, #4]
 801b75a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b75c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b75e:	429a      	cmp	r2, r3
 801b760:	d906      	bls.n	801b770 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801b762:	231a      	movs	r3, #26
 801b764:	2218      	movs	r2, #24
 801b766:	189b      	adds	r3, r3, r2
 801b768:	19db      	adds	r3, r3, r7
 801b76a:	2201      	movs	r2, #1
 801b76c:	701a      	strb	r2, [r3, #0]
 801b76e:	e11e      	b.n	801b9ae <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801b770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b772:	613b      	str	r3, [r7, #16]
 801b774:	2300      	movs	r3, #0
 801b776:	617b      	str	r3, [r7, #20]
 801b778:	6939      	ldr	r1, [r7, #16]
 801b77a:	697a      	ldr	r2, [r7, #20]
 801b77c:	000b      	movs	r3, r1
 801b77e:	0e1b      	lsrs	r3, r3, #24
 801b780:	0010      	movs	r0, r2
 801b782:	0205      	lsls	r5, r0, #8
 801b784:	431d      	orrs	r5, r3
 801b786:	000b      	movs	r3, r1
 801b788:	021c      	lsls	r4, r3, #8
 801b78a:	69fb      	ldr	r3, [r7, #28]
 801b78c:	685b      	ldr	r3, [r3, #4]
 801b78e:	085b      	lsrs	r3, r3, #1
 801b790:	60bb      	str	r3, [r7, #8]
 801b792:	2300      	movs	r3, #0
 801b794:	60fb      	str	r3, [r7, #12]
 801b796:	68b8      	ldr	r0, [r7, #8]
 801b798:	68f9      	ldr	r1, [r7, #12]
 801b79a:	1900      	adds	r0, r0, r4
 801b79c:	4169      	adcs	r1, r5
 801b79e:	69fb      	ldr	r3, [r7, #28]
 801b7a0:	685b      	ldr	r3, [r3, #4]
 801b7a2:	603b      	str	r3, [r7, #0]
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	607b      	str	r3, [r7, #4]
 801b7a8:	683a      	ldr	r2, [r7, #0]
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	f7e4 fee8 	bl	8000580 <__aeabi_uldivmod>
 801b7b0:	0002      	movs	r2, r0
 801b7b2:	000b      	movs	r3, r1
 801b7b4:	0013      	movs	r3, r2
 801b7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b7ba:	23c0      	movs	r3, #192	@ 0xc0
 801b7bc:	009b      	lsls	r3, r3, #2
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	d309      	bcc.n	801b7d6 <UART_SetConfig+0x332>
 801b7c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b7c4:	2380      	movs	r3, #128	@ 0x80
 801b7c6:	035b      	lsls	r3, r3, #13
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	d204      	bcs.n	801b7d6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801b7cc:	69fb      	ldr	r3, [r7, #28]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b7d2:	60da      	str	r2, [r3, #12]
 801b7d4:	e0eb      	b.n	801b9ae <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801b7d6:	231a      	movs	r3, #26
 801b7d8:	2218      	movs	r2, #24
 801b7da:	189b      	adds	r3, r3, r2
 801b7dc:	19db      	adds	r3, r3, r7
 801b7de:	2201      	movs	r2, #1
 801b7e0:	701a      	strb	r2, [r3, #0]
 801b7e2:	e0e4      	b.n	801b9ae <UART_SetConfig+0x50a>
 801b7e4:	efff69f3 	.word	0xefff69f3
 801b7e8:	ffffcfff 	.word	0xffffcfff
 801b7ec:	40004800 	.word	0x40004800
 801b7f0:	fffff4ff 	.word	0xfffff4ff
 801b7f4:	40013800 	.word	0x40013800
 801b7f8:	40021000 	.word	0x40021000
 801b7fc:	40004400 	.word	0x40004400
 801b800:	40004c00 	.word	0x40004c00
 801b804:	40005000 	.word	0x40005000
 801b808:	003d0900 	.word	0x003d0900
 801b80c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b810:	69fb      	ldr	r3, [r7, #28]
 801b812:	69da      	ldr	r2, [r3, #28]
 801b814:	2380      	movs	r3, #128	@ 0x80
 801b816:	021b      	lsls	r3, r3, #8
 801b818:	429a      	cmp	r2, r3
 801b81a:	d000      	beq.n	801b81e <UART_SetConfig+0x37a>
 801b81c:	e070      	b.n	801b900 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801b81e:	231b      	movs	r3, #27
 801b820:	2218      	movs	r2, #24
 801b822:	189b      	adds	r3, r3, r2
 801b824:	19db      	adds	r3, r3, r7
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	2b08      	cmp	r3, #8
 801b82a:	d822      	bhi.n	801b872 <UART_SetConfig+0x3ce>
 801b82c:	009a      	lsls	r2, r3, #2
 801b82e:	4b67      	ldr	r3, [pc, #412]	@ (801b9cc <UART_SetConfig+0x528>)
 801b830:	18d3      	adds	r3, r2, r3
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b836:	f7fd fdad 	bl	8019394 <HAL_RCC_GetPCLK1Freq>
 801b83a:	0003      	movs	r3, r0
 801b83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b83e:	e021      	b.n	801b884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b840:	f7fd fdbe 	bl	80193c0 <HAL_RCC_GetPCLK2Freq>
 801b844:	0003      	movs	r3, r0
 801b846:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b848:	e01c      	b.n	801b884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b84a:	4b61      	ldr	r3, [pc, #388]	@ (801b9d0 <UART_SetConfig+0x52c>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	2210      	movs	r2, #16
 801b850:	4013      	ands	r3, r2
 801b852:	d002      	beq.n	801b85a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b854:	4b5f      	ldr	r3, [pc, #380]	@ (801b9d4 <UART_SetConfig+0x530>)
 801b856:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b858:	e014      	b.n	801b884 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801b85a:	4b5f      	ldr	r3, [pc, #380]	@ (801b9d8 <UART_SetConfig+0x534>)
 801b85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b85e:	e011      	b.n	801b884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b860:	f7fd fce8 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 801b864:	0003      	movs	r3, r0
 801b866:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b868:	e00c      	b.n	801b884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b86a:	2380      	movs	r3, #128	@ 0x80
 801b86c:	021b      	lsls	r3, r3, #8
 801b86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b870:	e008      	b.n	801b884 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801b872:	2300      	movs	r3, #0
 801b874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b876:	231a      	movs	r3, #26
 801b878:	2218      	movs	r2, #24
 801b87a:	189b      	adds	r3, r3, r2
 801b87c:	19db      	adds	r3, r3, r7
 801b87e:	2201      	movs	r2, #1
 801b880:	701a      	strb	r2, [r3, #0]
        break;
 801b882:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b886:	2b00      	cmp	r3, #0
 801b888:	d100      	bne.n	801b88c <UART_SetConfig+0x3e8>
 801b88a:	e090      	b.n	801b9ae <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b88e:	005a      	lsls	r2, r3, #1
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	685b      	ldr	r3, [r3, #4]
 801b894:	085b      	lsrs	r3, r3, #1
 801b896:	18d2      	adds	r2, r2, r3
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	0019      	movs	r1, r3
 801b89e:	0010      	movs	r0, r2
 801b8a0:	f7e4 fc80 	bl	80001a4 <__udivsi3>
 801b8a4:	0003      	movs	r3, r0
 801b8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8aa:	2b0f      	cmp	r3, #15
 801b8ac:	d921      	bls.n	801b8f2 <UART_SetConfig+0x44e>
 801b8ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b8b0:	2380      	movs	r3, #128	@ 0x80
 801b8b2:	025b      	lsls	r3, r3, #9
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d21c      	bcs.n	801b8f2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8ba:	b29a      	uxth	r2, r3
 801b8bc:	200e      	movs	r0, #14
 801b8be:	2418      	movs	r4, #24
 801b8c0:	1903      	adds	r3, r0, r4
 801b8c2:	19db      	adds	r3, r3, r7
 801b8c4:	210f      	movs	r1, #15
 801b8c6:	438a      	bics	r2, r1
 801b8c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8cc:	085b      	lsrs	r3, r3, #1
 801b8ce:	b29b      	uxth	r3, r3
 801b8d0:	2207      	movs	r2, #7
 801b8d2:	4013      	ands	r3, r2
 801b8d4:	b299      	uxth	r1, r3
 801b8d6:	1903      	adds	r3, r0, r4
 801b8d8:	19db      	adds	r3, r3, r7
 801b8da:	1902      	adds	r2, r0, r4
 801b8dc:	19d2      	adds	r2, r2, r7
 801b8de:	8812      	ldrh	r2, [r2, #0]
 801b8e0:	430a      	orrs	r2, r1
 801b8e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801b8e4:	69fb      	ldr	r3, [r7, #28]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	1902      	adds	r2, r0, r4
 801b8ea:	19d2      	adds	r2, r2, r7
 801b8ec:	8812      	ldrh	r2, [r2, #0]
 801b8ee:	60da      	str	r2, [r3, #12]
 801b8f0:	e05d      	b.n	801b9ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801b8f2:	231a      	movs	r3, #26
 801b8f4:	2218      	movs	r2, #24
 801b8f6:	189b      	adds	r3, r3, r2
 801b8f8:	19db      	adds	r3, r3, r7
 801b8fa:	2201      	movs	r2, #1
 801b8fc:	701a      	strb	r2, [r3, #0]
 801b8fe:	e056      	b.n	801b9ae <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b900:	231b      	movs	r3, #27
 801b902:	2218      	movs	r2, #24
 801b904:	189b      	adds	r3, r3, r2
 801b906:	19db      	adds	r3, r3, r7
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	2b08      	cmp	r3, #8
 801b90c:	d822      	bhi.n	801b954 <UART_SetConfig+0x4b0>
 801b90e:	009a      	lsls	r2, r3, #2
 801b910:	4b32      	ldr	r3, [pc, #200]	@ (801b9dc <UART_SetConfig+0x538>)
 801b912:	18d3      	adds	r3, r2, r3
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b918:	f7fd fd3c 	bl	8019394 <HAL_RCC_GetPCLK1Freq>
 801b91c:	0003      	movs	r3, r0
 801b91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b920:	e021      	b.n	801b966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b922:	f7fd fd4d 	bl	80193c0 <HAL_RCC_GetPCLK2Freq>
 801b926:	0003      	movs	r3, r0
 801b928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b92a:	e01c      	b.n	801b966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b92c:	4b28      	ldr	r3, [pc, #160]	@ (801b9d0 <UART_SetConfig+0x52c>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	2210      	movs	r2, #16
 801b932:	4013      	ands	r3, r2
 801b934:	d002      	beq.n	801b93c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b936:	4b27      	ldr	r3, [pc, #156]	@ (801b9d4 <UART_SetConfig+0x530>)
 801b938:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b93a:	e014      	b.n	801b966 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801b93c:	4b26      	ldr	r3, [pc, #152]	@ (801b9d8 <UART_SetConfig+0x534>)
 801b93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b940:	e011      	b.n	801b966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b942:	f7fd fc77 	bl	8019234 <HAL_RCC_GetSysClockFreq>
 801b946:	0003      	movs	r3, r0
 801b948:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b94a:	e00c      	b.n	801b966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b94c:	2380      	movs	r3, #128	@ 0x80
 801b94e:	021b      	lsls	r3, r3, #8
 801b950:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b952:	e008      	b.n	801b966 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801b954:	2300      	movs	r3, #0
 801b956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b958:	231a      	movs	r3, #26
 801b95a:	2218      	movs	r2, #24
 801b95c:	189b      	adds	r3, r3, r2
 801b95e:	19db      	adds	r3, r3, r7
 801b960:	2201      	movs	r2, #1
 801b962:	701a      	strb	r2, [r3, #0]
        break;
 801b964:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801b966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d020      	beq.n	801b9ae <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801b96c:	69fb      	ldr	r3, [r7, #28]
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	085a      	lsrs	r2, r3, #1
 801b972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b974:	18d2      	adds	r2, r2, r3
 801b976:	69fb      	ldr	r3, [r7, #28]
 801b978:	685b      	ldr	r3, [r3, #4]
 801b97a:	0019      	movs	r1, r3
 801b97c:	0010      	movs	r0, r2
 801b97e:	f7e4 fc11 	bl	80001a4 <__udivsi3>
 801b982:	0003      	movs	r3, r0
 801b984:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b988:	2b0f      	cmp	r3, #15
 801b98a:	d90a      	bls.n	801b9a2 <UART_SetConfig+0x4fe>
 801b98c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b98e:	2380      	movs	r3, #128	@ 0x80
 801b990:	025b      	lsls	r3, r3, #9
 801b992:	429a      	cmp	r2, r3
 801b994:	d205      	bcs.n	801b9a2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b998:	b29a      	uxth	r2, r3
 801b99a:	69fb      	ldr	r3, [r7, #28]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	60da      	str	r2, [r3, #12]
 801b9a0:	e005      	b.n	801b9ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801b9a2:	231a      	movs	r3, #26
 801b9a4:	2218      	movs	r2, #24
 801b9a6:	189b      	adds	r3, r3, r2
 801b9a8:	19db      	adds	r3, r3, r7
 801b9aa:	2201      	movs	r2, #1
 801b9ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b9ae:	69fb      	ldr	r3, [r7, #28]
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801b9b4:	69fb      	ldr	r3, [r7, #28]
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801b9ba:	231a      	movs	r3, #26
 801b9bc:	2218      	movs	r2, #24
 801b9be:	189b      	adds	r3, r3, r2
 801b9c0:	19db      	adds	r3, r3, r7
 801b9c2:	781b      	ldrb	r3, [r3, #0]
}
 801b9c4:	0018      	movs	r0, r3
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	b00e      	add	sp, #56	@ 0x38
 801b9ca:	bdb0      	pop	{r4, r5, r7, pc}
 801b9cc:	0802b1e4 	.word	0x0802b1e4
 801b9d0:	40021000 	.word	0x40021000
 801b9d4:	003d0900 	.word	0x003d0900
 801b9d8:	00f42400 	.word	0x00f42400
 801b9dc:	0802b208 	.word	0x0802b208

0801b9e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b9e0:	b580      	push	{r7, lr}
 801b9e2:	b082      	sub	sp, #8
 801b9e4:	af00      	add	r7, sp, #0
 801b9e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9ec:	2201      	movs	r2, #1
 801b9ee:	4013      	ands	r3, r2
 801b9f0:	d00b      	beq.n	801ba0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	4a4a      	ldr	r2, [pc, #296]	@ (801bb24 <UART_AdvFeatureConfig+0x144>)
 801b9fa:	4013      	ands	r3, r2
 801b9fc:	0019      	movs	r1, r3
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	430a      	orrs	r2, r1
 801ba08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba0e:	2202      	movs	r2, #2
 801ba10:	4013      	ands	r3, r2
 801ba12:	d00b      	beq.n	801ba2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	685b      	ldr	r3, [r3, #4]
 801ba1a:	4a43      	ldr	r2, [pc, #268]	@ (801bb28 <UART_AdvFeatureConfig+0x148>)
 801ba1c:	4013      	ands	r3, r2
 801ba1e:	0019      	movs	r1, r3
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	430a      	orrs	r2, r1
 801ba2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba30:	2204      	movs	r2, #4
 801ba32:	4013      	ands	r3, r2
 801ba34:	d00b      	beq.n	801ba4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	685b      	ldr	r3, [r3, #4]
 801ba3c:	4a3b      	ldr	r2, [pc, #236]	@ (801bb2c <UART_AdvFeatureConfig+0x14c>)
 801ba3e:	4013      	ands	r3, r2
 801ba40:	0019      	movs	r1, r3
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	430a      	orrs	r2, r1
 801ba4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba52:	2208      	movs	r2, #8
 801ba54:	4013      	ands	r3, r2
 801ba56:	d00b      	beq.n	801ba70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	4a34      	ldr	r2, [pc, #208]	@ (801bb30 <UART_AdvFeatureConfig+0x150>)
 801ba60:	4013      	ands	r3, r2
 801ba62:	0019      	movs	r1, r3
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	430a      	orrs	r2, r1
 801ba6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba74:	2210      	movs	r2, #16
 801ba76:	4013      	ands	r3, r2
 801ba78:	d00b      	beq.n	801ba92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	689b      	ldr	r3, [r3, #8]
 801ba80:	4a2c      	ldr	r2, [pc, #176]	@ (801bb34 <UART_AdvFeatureConfig+0x154>)
 801ba82:	4013      	ands	r3, r2
 801ba84:	0019      	movs	r1, r3
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	430a      	orrs	r2, r1
 801ba90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba96:	2220      	movs	r2, #32
 801ba98:	4013      	ands	r3, r2
 801ba9a:	d00b      	beq.n	801bab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	689b      	ldr	r3, [r3, #8]
 801baa2:	4a25      	ldr	r2, [pc, #148]	@ (801bb38 <UART_AdvFeatureConfig+0x158>)
 801baa4:	4013      	ands	r3, r2
 801baa6:	0019      	movs	r1, r3
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	430a      	orrs	r2, r1
 801bab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab8:	2240      	movs	r2, #64	@ 0x40
 801baba:	4013      	ands	r3, r2
 801babc:	d01d      	beq.n	801bafa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	4a1d      	ldr	r2, [pc, #116]	@ (801bb3c <UART_AdvFeatureConfig+0x15c>)
 801bac6:	4013      	ands	r3, r2
 801bac8:	0019      	movs	r1, r3
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	430a      	orrs	r2, r1
 801bad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bada:	2380      	movs	r3, #128	@ 0x80
 801badc:	035b      	lsls	r3, r3, #13
 801bade:	429a      	cmp	r2, r3
 801bae0:	d10b      	bne.n	801bafa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	685b      	ldr	r3, [r3, #4]
 801bae8:	4a15      	ldr	r2, [pc, #84]	@ (801bb40 <UART_AdvFeatureConfig+0x160>)
 801baea:	4013      	ands	r3, r2
 801baec:	0019      	movs	r1, r3
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	430a      	orrs	r2, r1
 801baf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bafe:	2280      	movs	r2, #128	@ 0x80
 801bb00:	4013      	ands	r3, r2
 801bb02:	d00b      	beq.n	801bb1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	685b      	ldr	r3, [r3, #4]
 801bb0a:	4a0e      	ldr	r2, [pc, #56]	@ (801bb44 <UART_AdvFeatureConfig+0x164>)
 801bb0c:	4013      	ands	r3, r2
 801bb0e:	0019      	movs	r1, r3
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	430a      	orrs	r2, r1
 801bb1a:	605a      	str	r2, [r3, #4]
  }
}
 801bb1c:	46c0      	nop			@ (mov r8, r8)
 801bb1e:	46bd      	mov	sp, r7
 801bb20:	b002      	add	sp, #8
 801bb22:	bd80      	pop	{r7, pc}
 801bb24:	fffdffff 	.word	0xfffdffff
 801bb28:	fffeffff 	.word	0xfffeffff
 801bb2c:	fffbffff 	.word	0xfffbffff
 801bb30:	ffff7fff 	.word	0xffff7fff
 801bb34:	ffffefff 	.word	0xffffefff
 801bb38:	ffffdfff 	.word	0xffffdfff
 801bb3c:	ffefffff 	.word	0xffefffff
 801bb40:	ff9fffff 	.word	0xff9fffff
 801bb44:	fff7ffff 	.word	0xfff7ffff

0801bb48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b092      	sub	sp, #72	@ 0x48
 801bb4c:	af02      	add	r7, sp, #8
 801bb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2284      	movs	r2, #132	@ 0x84
 801bb54:	2100      	movs	r1, #0
 801bb56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bb58:	f7f6 fa88 	bl	801206c <HAL_GetTick>
 801bb5c:	0003      	movs	r3, r0
 801bb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	2208      	movs	r2, #8
 801bb68:	4013      	ands	r3, r2
 801bb6a:	2b08      	cmp	r3, #8
 801bb6c:	d12c      	bne.n	801bbc8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb70:	2280      	movs	r2, #128	@ 0x80
 801bb72:	0391      	lsls	r1, r2, #14
 801bb74:	6878      	ldr	r0, [r7, #4]
 801bb76:	4a46      	ldr	r2, [pc, #280]	@ (801bc90 <UART_CheckIdleState+0x148>)
 801bb78:	9200      	str	r2, [sp, #0]
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	f000 f88c 	bl	801bc98 <UART_WaitOnFlagUntilTimeout>
 801bb80:	1e03      	subs	r3, r0, #0
 801bb82:	d021      	beq.n	801bbc8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb84:	f3ef 8310 	mrs	r3, PRIMASK
 801bb88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801bb8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bb8e:	2301      	movs	r3, #1
 801bb90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb94:	f383 8810 	msr	PRIMASK, r3
}
 801bb98:	46c0      	nop			@ (mov r8, r8)
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	2180      	movs	r1, #128	@ 0x80
 801bba6:	438a      	bics	r2, r1
 801bba8:	601a      	str	r2, [r3, #0]
 801bbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbb0:	f383 8810 	msr	PRIMASK, r3
}
 801bbb4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2220      	movs	r2, #32
 801bbba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	2278      	movs	r2, #120	@ 0x78
 801bbc0:	2100      	movs	r1, #0
 801bbc2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bbc4:	2303      	movs	r3, #3
 801bbc6:	e05f      	b.n	801bc88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	2204      	movs	r2, #4
 801bbd0:	4013      	ands	r3, r2
 801bbd2:	2b04      	cmp	r3, #4
 801bbd4:	d146      	bne.n	801bc64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bbd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbd8:	2280      	movs	r2, #128	@ 0x80
 801bbda:	03d1      	lsls	r1, r2, #15
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	4a2c      	ldr	r2, [pc, #176]	@ (801bc90 <UART_CheckIdleState+0x148>)
 801bbe0:	9200      	str	r2, [sp, #0]
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	f000 f858 	bl	801bc98 <UART_WaitOnFlagUntilTimeout>
 801bbe8:	1e03      	subs	r3, r0, #0
 801bbea:	d03b      	beq.n	801bc64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbec:	f3ef 8310 	mrs	r3, PRIMASK
 801bbf0:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbf2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bbf4:	637b      	str	r3, [r7, #52]	@ 0x34
 801bbf6:	2301      	movs	r3, #1
 801bbf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbfa:	693b      	ldr	r3, [r7, #16]
 801bbfc:	f383 8810 	msr	PRIMASK, r3
}
 801bc00:	46c0      	nop			@ (mov r8, r8)
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	681a      	ldr	r2, [r3, #0]
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	4921      	ldr	r1, [pc, #132]	@ (801bc94 <UART_CheckIdleState+0x14c>)
 801bc0e:	400a      	ands	r2, r1
 801bc10:	601a      	str	r2, [r3, #0]
 801bc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bc14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc16:	697b      	ldr	r3, [r7, #20]
 801bc18:	f383 8810 	msr	PRIMASK, r3
}
 801bc1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc1e:	f3ef 8310 	mrs	r3, PRIMASK
 801bc22:	61bb      	str	r3, [r7, #24]
  return(result);
 801bc24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bc26:	633b      	str	r3, [r7, #48]	@ 0x30
 801bc28:	2301      	movs	r3, #1
 801bc2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc2c:	69fb      	ldr	r3, [r7, #28]
 801bc2e:	f383 8810 	msr	PRIMASK, r3
}
 801bc32:	46c0      	nop			@ (mov r8, r8)
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	689a      	ldr	r2, [r3, #8]
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	2101      	movs	r1, #1
 801bc40:	438a      	bics	r2, r1
 801bc42:	609a      	str	r2, [r3, #8]
 801bc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc48:	6a3b      	ldr	r3, [r7, #32]
 801bc4a:	f383 8810 	msr	PRIMASK, r3
}
 801bc4e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	2280      	movs	r2, #128	@ 0x80
 801bc54:	2120      	movs	r1, #32
 801bc56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	2278      	movs	r2, #120	@ 0x78
 801bc5c:	2100      	movs	r1, #0
 801bc5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bc60:	2303      	movs	r3, #3
 801bc62:	e011      	b.n	801bc88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	2220      	movs	r2, #32
 801bc68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	2280      	movs	r2, #128	@ 0x80
 801bc6e:	2120      	movs	r1, #32
 801bc70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	2200      	movs	r2, #0
 801bc76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	2278      	movs	r2, #120	@ 0x78
 801bc82:	2100      	movs	r1, #0
 801bc84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bc86:	2300      	movs	r3, #0
}
 801bc88:	0018      	movs	r0, r3
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	b010      	add	sp, #64	@ 0x40
 801bc8e:	bd80      	pop	{r7, pc}
 801bc90:	01ffffff 	.word	0x01ffffff
 801bc94:	fffffedf 	.word	0xfffffedf

0801bc98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b084      	sub	sp, #16
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	60f8      	str	r0, [r7, #12]
 801bca0:	60b9      	str	r1, [r7, #8]
 801bca2:	603b      	str	r3, [r7, #0]
 801bca4:	1dfb      	adds	r3, r7, #7
 801bca6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bca8:	e04b      	b.n	801bd42 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bcaa:	69bb      	ldr	r3, [r7, #24]
 801bcac:	3301      	adds	r3, #1
 801bcae:	d048      	beq.n	801bd42 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bcb0:	f7f6 f9dc 	bl	801206c <HAL_GetTick>
 801bcb4:	0002      	movs	r2, r0
 801bcb6:	683b      	ldr	r3, [r7, #0]
 801bcb8:	1ad3      	subs	r3, r2, r3
 801bcba:	69ba      	ldr	r2, [r7, #24]
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d302      	bcc.n	801bcc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 801bcc0:	69bb      	ldr	r3, [r7, #24]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d101      	bne.n	801bcca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801bcc6:	2303      	movs	r3, #3
 801bcc8:	e04b      	b.n	801bd62 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	2204      	movs	r2, #4
 801bcd2:	4013      	ands	r3, r2
 801bcd4:	d035      	beq.n	801bd42 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	69db      	ldr	r3, [r3, #28]
 801bcdc:	2208      	movs	r2, #8
 801bcde:	4013      	ands	r3, r2
 801bce0:	2b08      	cmp	r3, #8
 801bce2:	d111      	bne.n	801bd08 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	2208      	movs	r2, #8
 801bcea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	0018      	movs	r0, r3
 801bcf0:	f000 f9ca 	bl	801c088 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	2284      	movs	r2, #132	@ 0x84
 801bcf8:	2108      	movs	r1, #8
 801bcfa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	2278      	movs	r2, #120	@ 0x78
 801bd00:	2100      	movs	r1, #0
 801bd02:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801bd04:	2301      	movs	r3, #1
 801bd06:	e02c      	b.n	801bd62 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bd08:	68fb      	ldr	r3, [r7, #12]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	69da      	ldr	r2, [r3, #28]
 801bd0e:	2380      	movs	r3, #128	@ 0x80
 801bd10:	011b      	lsls	r3, r3, #4
 801bd12:	401a      	ands	r2, r3
 801bd14:	2380      	movs	r3, #128	@ 0x80
 801bd16:	011b      	lsls	r3, r3, #4
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	d112      	bne.n	801bd42 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bd1c:	68fb      	ldr	r3, [r7, #12]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	2280      	movs	r2, #128	@ 0x80
 801bd22:	0112      	lsls	r2, r2, #4
 801bd24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	0018      	movs	r0, r3
 801bd2a:	f000 f9ad 	bl	801c088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	2284      	movs	r2, #132	@ 0x84
 801bd32:	2120      	movs	r1, #32
 801bd34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	2278      	movs	r2, #120	@ 0x78
 801bd3a:	2100      	movs	r1, #0
 801bd3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801bd3e:	2303      	movs	r3, #3
 801bd40:	e00f      	b.n	801bd62 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	69db      	ldr	r3, [r3, #28]
 801bd48:	68ba      	ldr	r2, [r7, #8]
 801bd4a:	4013      	ands	r3, r2
 801bd4c:	68ba      	ldr	r2, [r7, #8]
 801bd4e:	1ad3      	subs	r3, r2, r3
 801bd50:	425a      	negs	r2, r3
 801bd52:	4153      	adcs	r3, r2
 801bd54:	b2db      	uxtb	r3, r3
 801bd56:	001a      	movs	r2, r3
 801bd58:	1dfb      	adds	r3, r7, #7
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	429a      	cmp	r2, r3
 801bd5e:	d0a4      	beq.n	801bcaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bd60:	2300      	movs	r3, #0
}
 801bd62:	0018      	movs	r0, r3
 801bd64:	46bd      	mov	sp, r7
 801bd66:	b004      	add	sp, #16
 801bd68:	bd80      	pop	{r7, pc}
	...

0801bd6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b090      	sub	sp, #64	@ 0x40
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	60f8      	str	r0, [r7, #12]
 801bd74:	60b9      	str	r1, [r7, #8]
 801bd76:	1dbb      	adds	r3, r7, #6
 801bd78:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	68ba      	ldr	r2, [r7, #8]
 801bd7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	1dba      	adds	r2, r7, #6
 801bd84:	2158      	movs	r1, #88	@ 0x58
 801bd86:	8812      	ldrh	r2, [r2, #0]
 801bd88:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	1dba      	adds	r2, r7, #6
 801bd8e:	215a      	movs	r1, #90	@ 0x5a
 801bd90:	8812      	ldrh	r2, [r2, #0]
 801bd92:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	2200      	movs	r2, #0
 801bd98:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801bd9a:	68fb      	ldr	r3, [r7, #12]
 801bd9c:	689a      	ldr	r2, [r3, #8]
 801bd9e:	2380      	movs	r3, #128	@ 0x80
 801bda0:	015b      	lsls	r3, r3, #5
 801bda2:	429a      	cmp	r2, r3
 801bda4:	d10d      	bne.n	801bdc2 <UART_Start_Receive_IT+0x56>
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	691b      	ldr	r3, [r3, #16]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d104      	bne.n	801bdb8 <UART_Start_Receive_IT+0x4c>
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	225c      	movs	r2, #92	@ 0x5c
 801bdb2:	4950      	ldr	r1, [pc, #320]	@ (801bef4 <UART_Start_Receive_IT+0x188>)
 801bdb4:	5299      	strh	r1, [r3, r2]
 801bdb6:	e02e      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	225c      	movs	r2, #92	@ 0x5c
 801bdbc:	21ff      	movs	r1, #255	@ 0xff
 801bdbe:	5299      	strh	r1, [r3, r2]
 801bdc0:	e029      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	689b      	ldr	r3, [r3, #8]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d10d      	bne.n	801bde6 <UART_Start_Receive_IT+0x7a>
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	691b      	ldr	r3, [r3, #16]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d104      	bne.n	801bddc <UART_Start_Receive_IT+0x70>
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	225c      	movs	r2, #92	@ 0x5c
 801bdd6:	21ff      	movs	r1, #255	@ 0xff
 801bdd8:	5299      	strh	r1, [r3, r2]
 801bdda:	e01c      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	225c      	movs	r2, #92	@ 0x5c
 801bde0:	217f      	movs	r1, #127	@ 0x7f
 801bde2:	5299      	strh	r1, [r3, r2]
 801bde4:	e017      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	689a      	ldr	r2, [r3, #8]
 801bdea:	2380      	movs	r3, #128	@ 0x80
 801bdec:	055b      	lsls	r3, r3, #21
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d10d      	bne.n	801be0e <UART_Start_Receive_IT+0xa2>
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	691b      	ldr	r3, [r3, #16]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d104      	bne.n	801be04 <UART_Start_Receive_IT+0x98>
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	225c      	movs	r2, #92	@ 0x5c
 801bdfe:	217f      	movs	r1, #127	@ 0x7f
 801be00:	5299      	strh	r1, [r3, r2]
 801be02:	e008      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	225c      	movs	r2, #92	@ 0x5c
 801be08:	213f      	movs	r1, #63	@ 0x3f
 801be0a:	5299      	strh	r1, [r3, r2]
 801be0c:	e003      	b.n	801be16 <UART_Start_Receive_IT+0xaa>
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	225c      	movs	r2, #92	@ 0x5c
 801be12:	2100      	movs	r1, #0
 801be14:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	2284      	movs	r2, #132	@ 0x84
 801be1a:	2100      	movs	r1, #0
 801be1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	2280      	movs	r2, #128	@ 0x80
 801be22:	2122      	movs	r1, #34	@ 0x22
 801be24:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be26:	f3ef 8310 	mrs	r3, PRIMASK
 801be2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801be2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801be2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801be30:	2301      	movs	r3, #1
 801be32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be36:	f383 8810 	msr	PRIMASK, r3
}
 801be3a:	46c0      	nop			@ (mov r8, r8)
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	689a      	ldr	r2, [r3, #8]
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	2101      	movs	r1, #1
 801be48:	430a      	orrs	r2, r1
 801be4a:	609a      	str	r2, [r3, #8]
 801be4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be4e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801be52:	f383 8810 	msr	PRIMASK, r3
}
 801be56:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	689a      	ldr	r2, [r3, #8]
 801be5c:	2380      	movs	r3, #128	@ 0x80
 801be5e:	015b      	lsls	r3, r3, #5
 801be60:	429a      	cmp	r2, r3
 801be62:	d107      	bne.n	801be74 <UART_Start_Receive_IT+0x108>
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	691b      	ldr	r3, [r3, #16]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d103      	bne.n	801be74 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801be6c:	68fb      	ldr	r3, [r7, #12]
 801be6e:	4a22      	ldr	r2, [pc, #136]	@ (801bef8 <UART_Start_Receive_IT+0x18c>)
 801be70:	669a      	str	r2, [r3, #104]	@ 0x68
 801be72:	e002      	b.n	801be7a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	4a21      	ldr	r2, [pc, #132]	@ (801befc <UART_Start_Receive_IT+0x190>)
 801be78:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	691b      	ldr	r3, [r3, #16]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d019      	beq.n	801beb6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be82:	f3ef 8310 	mrs	r3, PRIMASK
 801be86:	61fb      	str	r3, [r7, #28]
  return(result);
 801be88:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801be8a:	637b      	str	r3, [r7, #52]	@ 0x34
 801be8c:	2301      	movs	r3, #1
 801be8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be90:	6a3b      	ldr	r3, [r7, #32]
 801be92:	f383 8810 	msr	PRIMASK, r3
}
 801be96:	46c0      	nop			@ (mov r8, r8)
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	2190      	movs	r1, #144	@ 0x90
 801bea4:	0049      	lsls	r1, r1, #1
 801bea6:	430a      	orrs	r2, r1
 801bea8:	601a      	str	r2, [r3, #0]
 801beaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801beac:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801beae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beb0:	f383 8810 	msr	PRIMASK, r3
}
 801beb4:	e018      	b.n	801bee8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801beb6:	f3ef 8310 	mrs	r3, PRIMASK
 801beba:	613b      	str	r3, [r7, #16]
  return(result);
 801bebc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bec0:	2301      	movs	r3, #1
 801bec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bec4:	697b      	ldr	r3, [r7, #20]
 801bec6:	f383 8810 	msr	PRIMASK, r3
}
 801beca:	46c0      	nop			@ (mov r8, r8)
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	681a      	ldr	r2, [r3, #0]
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	2120      	movs	r1, #32
 801bed8:	430a      	orrs	r2, r1
 801beda:	601a      	str	r2, [r3, #0]
 801bedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bede:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bee0:	69bb      	ldr	r3, [r7, #24]
 801bee2:	f383 8810 	msr	PRIMASK, r3
}
 801bee6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801bee8:	2300      	movs	r3, #0
}
 801beea:	0018      	movs	r0, r3
 801beec:	46bd      	mov	sp, r7
 801beee:	b010      	add	sp, #64	@ 0x40
 801bef0:	bd80      	pop	{r7, pc}
 801bef2:	46c0      	nop			@ (mov r8, r8)
 801bef4:	000001ff 	.word	0x000001ff
 801bef8:	0801c66d 	.word	0x0801c66d
 801befc:	0801c4a1 	.word	0x0801c4a1

0801bf00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b090      	sub	sp, #64	@ 0x40
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	60f8      	str	r0, [r7, #12]
 801bf08:	60b9      	str	r1, [r7, #8]
 801bf0a:	1dbb      	adds	r3, r7, #6
 801bf0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	68ba      	ldr	r2, [r7, #8]
 801bf12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	1dba      	adds	r2, r7, #6
 801bf18:	2158      	movs	r1, #88	@ 0x58
 801bf1a:	8812      	ldrh	r2, [r2, #0]
 801bf1c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	2284      	movs	r2, #132	@ 0x84
 801bf22:	2100      	movs	r1, #0
 801bf24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	2280      	movs	r2, #128	@ 0x80
 801bf2a:	2122      	movs	r1, #34	@ 0x22
 801bf2c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d028      	beq.n	801bf88 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf3a:	4a3e      	ldr	r2, [pc, #248]	@ (801c034 <UART_Start_Receive_DMA+0x134>)
 801bf3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf42:	4a3d      	ldr	r2, [pc, #244]	@ (801c038 <UART_Start_Receive_DMA+0x138>)
 801bf44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf4a:	4a3c      	ldr	r2, [pc, #240]	@ (801c03c <UART_Start_Receive_DMA+0x13c>)
 801bf4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf52:	2200      	movs	r2, #0
 801bf54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	3324      	adds	r3, #36	@ 0x24
 801bf60:	0019      	movs	r1, r3
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bf66:	001a      	movs	r2, r3
 801bf68:	1dbb      	adds	r3, r7, #6
 801bf6a:	881b      	ldrh	r3, [r3, #0]
 801bf6c:	f7f6 fdd0 	bl	8012b10 <HAL_DMA_Start_IT>
 801bf70:	1e03      	subs	r3, r0, #0
 801bf72:	d009      	beq.n	801bf88 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	2284      	movs	r2, #132	@ 0x84
 801bf78:	2110      	movs	r1, #16
 801bf7a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	2280      	movs	r2, #128	@ 0x80
 801bf80:	2120      	movs	r1, #32
 801bf82:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801bf84:	2301      	movs	r3, #1
 801bf86:	e050      	b.n	801c02a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	691b      	ldr	r3, [r3, #16]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d019      	beq.n	801bfc4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf90:	f3ef 8310 	mrs	r3, PRIMASK
 801bf94:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bf9a:	2301      	movs	r3, #1
 801bf9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfa0:	f383 8810 	msr	PRIMASK, r3
}
 801bfa4:	46c0      	nop			@ (mov r8, r8)
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	681a      	ldr	r2, [r3, #0]
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	2180      	movs	r1, #128	@ 0x80
 801bfb2:	0049      	lsls	r1, r1, #1
 801bfb4:	430a      	orrs	r2, r1
 801bfb6:	601a      	str	r2, [r3, #0]
 801bfb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfbe:	f383 8810 	msr	PRIMASK, r3
}
 801bfc2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfc4:	f3ef 8310 	mrs	r3, PRIMASK
 801bfc8:	613b      	str	r3, [r7, #16]
  return(result);
 801bfca:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bfcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bfce:	2301      	movs	r3, #1
 801bfd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	f383 8810 	msr	PRIMASK, r3
}
 801bfd8:	46c0      	nop			@ (mov r8, r8)
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	689a      	ldr	r2, [r3, #8]
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	2101      	movs	r1, #1
 801bfe6:	430a      	orrs	r2, r1
 801bfe8:	609a      	str	r2, [r3, #8]
 801bfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfee:	69bb      	ldr	r3, [r7, #24]
 801bff0:	f383 8810 	msr	PRIMASK, r3
}
 801bff4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bff6:	f3ef 8310 	mrs	r3, PRIMASK
 801bffa:	61fb      	str	r3, [r7, #28]
  return(result);
 801bffc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bffe:	637b      	str	r3, [r7, #52]	@ 0x34
 801c000:	2301      	movs	r3, #1
 801c002:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c004:	6a3b      	ldr	r3, [r7, #32]
 801c006:	f383 8810 	msr	PRIMASK, r3
}
 801c00a:	46c0      	nop			@ (mov r8, r8)
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	689a      	ldr	r2, [r3, #8]
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	2140      	movs	r1, #64	@ 0x40
 801c018:	430a      	orrs	r2, r1
 801c01a:	609a      	str	r2, [r3, #8]
 801c01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c01e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c022:	f383 8810 	msr	PRIMASK, r3
}
 801c026:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801c028:	2300      	movs	r3, #0
}
 801c02a:	0018      	movs	r0, r3
 801c02c:	46bd      	mov	sp, r7
 801c02e:	b010      	add	sp, #64	@ 0x40
 801c030:	bd80      	pop	{r7, pc}
 801c032:	46c0      	nop			@ (mov r8, r8)
 801c034:	0801c211 	.word	0x0801c211
 801c038:	0801c345 	.word	0x0801c345
 801c03c:	0801c38d 	.word	0x0801c38d

0801c040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b086      	sub	sp, #24
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c048:	f3ef 8310 	mrs	r3, PRIMASK
 801c04c:	60bb      	str	r3, [r7, #8]
  return(result);
 801c04e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c050:	617b      	str	r3, [r7, #20]
 801c052:	2301      	movs	r3, #1
 801c054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	f383 8810 	msr	PRIMASK, r3
}
 801c05c:	46c0      	nop			@ (mov r8, r8)
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	681a      	ldr	r2, [r3, #0]
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	21c0      	movs	r1, #192	@ 0xc0
 801c06a:	438a      	bics	r2, r1
 801c06c:	601a      	str	r2, [r3, #0]
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c072:	693b      	ldr	r3, [r7, #16]
 801c074:	f383 8810 	msr	PRIMASK, r3
}
 801c078:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	2220      	movs	r2, #32
 801c07e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801c080:	46c0      	nop			@ (mov r8, r8)
 801c082:	46bd      	mov	sp, r7
 801c084:	b006      	add	sp, #24
 801c086:	bd80      	pop	{r7, pc}

0801c088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b08e      	sub	sp, #56	@ 0x38
 801c08c:	af00      	add	r7, sp, #0
 801c08e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c090:	f3ef 8310 	mrs	r3, PRIMASK
 801c094:	617b      	str	r3, [r7, #20]
  return(result);
 801c096:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c098:	637b      	str	r3, [r7, #52]	@ 0x34
 801c09a:	2301      	movs	r3, #1
 801c09c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c09e:	69bb      	ldr	r3, [r7, #24]
 801c0a0:	f383 8810 	msr	PRIMASK, r3
}
 801c0a4:	46c0      	nop			@ (mov r8, r8)
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	681a      	ldr	r2, [r3, #0]
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	4926      	ldr	r1, [pc, #152]	@ (801c14c <UART_EndRxTransfer+0xc4>)
 801c0b2:	400a      	ands	r2, r1
 801c0b4:	601a      	str	r2, [r3, #0]
 801c0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c0b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0ba:	69fb      	ldr	r3, [r7, #28]
 801c0bc:	f383 8810 	msr	PRIMASK, r3
}
 801c0c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0c2:	f3ef 8310 	mrs	r3, PRIMASK
 801c0c6:	623b      	str	r3, [r7, #32]
  return(result);
 801c0c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c0ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801c0cc:	2301      	movs	r3, #1
 801c0ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0d2:	f383 8810 	msr	PRIMASK, r3
}
 801c0d6:	46c0      	nop			@ (mov r8, r8)
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	689a      	ldr	r2, [r3, #8]
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	2101      	movs	r1, #1
 801c0e4:	438a      	bics	r2, r1
 801c0e6:	609a      	str	r2, [r3, #8]
 801c0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ee:	f383 8810 	msr	PRIMASK, r3
}
 801c0f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c0f8:	2b01      	cmp	r3, #1
 801c0fa:	d118      	bne.n	801c12e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0fc:	f3ef 8310 	mrs	r3, PRIMASK
 801c100:	60bb      	str	r3, [r7, #8]
  return(result);
 801c102:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c106:	2301      	movs	r3, #1
 801c108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	f383 8810 	msr	PRIMASK, r3
}
 801c110:	46c0      	nop			@ (mov r8, r8)
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	681a      	ldr	r2, [r3, #0]
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	2110      	movs	r1, #16
 801c11e:	438a      	bics	r2, r1
 801c120:	601a      	str	r2, [r3, #0]
 801c122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c126:	693b      	ldr	r3, [r7, #16]
 801c128:	f383 8810 	msr	PRIMASK, r3
}
 801c12c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	2280      	movs	r2, #128	@ 0x80
 801c132:	2120      	movs	r1, #32
 801c134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	2200      	movs	r2, #0
 801c13a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	2200      	movs	r2, #0
 801c140:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c142:	46c0      	nop			@ (mov r8, r8)
 801c144:	46bd      	mov	sp, r7
 801c146:	b00e      	add	sp, #56	@ 0x38
 801c148:	bd80      	pop	{r7, pc}
 801c14a:	46c0      	nop			@ (mov r8, r8)
 801c14c:	fffffedf 	.word	0xfffffedf

0801c150 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801c150:	b580      	push	{r7, lr}
 801c152:	b08c      	sub	sp, #48	@ 0x30
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c15c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	2220      	movs	r2, #32
 801c166:	4013      	ands	r3, r2
 801c168:	d135      	bne.n	801c1d6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c16c:	2252      	movs	r2, #82	@ 0x52
 801c16e:	2100      	movs	r1, #0
 801c170:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c172:	f3ef 8310 	mrs	r3, PRIMASK
 801c176:	60fb      	str	r3, [r7, #12]
  return(result);
 801c178:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c17a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c17c:	2301      	movs	r3, #1
 801c17e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c180:	693b      	ldr	r3, [r7, #16]
 801c182:	f383 8810 	msr	PRIMASK, r3
}
 801c186:	46c0      	nop			@ (mov r8, r8)
 801c188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	689a      	ldr	r2, [r3, #8]
 801c18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	2180      	movs	r1, #128	@ 0x80
 801c194:	438a      	bics	r2, r1
 801c196:	609a      	str	r2, [r3, #8]
 801c198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c19a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c19c:	697b      	ldr	r3, [r7, #20]
 801c19e:	f383 8810 	msr	PRIMASK, r3
}
 801c1a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1a4:	f3ef 8310 	mrs	r3, PRIMASK
 801c1a8:	61bb      	str	r3, [r7, #24]
  return(result);
 801c1aa:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 801c1ae:	2301      	movs	r3, #1
 801c1b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1b2:	69fb      	ldr	r3, [r7, #28]
 801c1b4:	f383 8810 	msr	PRIMASK, r3
}
 801c1b8:	46c0      	nop			@ (mov r8, r8)
 801c1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	681a      	ldr	r2, [r3, #0]
 801c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	2140      	movs	r1, #64	@ 0x40
 801c1c6:	430a      	orrs	r2, r1
 801c1c8:	601a      	str	r2, [r3, #0]
 801c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1ce:	6a3b      	ldr	r3, [r7, #32]
 801c1d0:	f383 8810 	msr	PRIMASK, r3
}
 801c1d4:	e006      	b.n	801c1e4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801c1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1d8:	228c      	movs	r2, #140	@ 0x8c
 801c1da:	589b      	ldr	r3, [r3, r2]
 801c1dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1de:	0010      	movs	r0, r2
 801c1e0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c1e2:	46c0      	nop			@ (mov r8, r8)
 801c1e4:	46c0      	nop			@ (mov r8, r8)
 801c1e6:	46bd      	mov	sp, r7
 801c1e8:	b00c      	add	sp, #48	@ 0x30
 801c1ea:	bd80      	pop	{r7, pc}

0801c1ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b084      	sub	sp, #16
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2288      	movs	r2, #136	@ 0x88
 801c1fe:	589b      	ldr	r3, [r3, r2]
 801c200:	68fa      	ldr	r2, [r7, #12]
 801c202:	0010      	movs	r0, r2
 801c204:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c206:	46c0      	nop			@ (mov r8, r8)
 801c208:	46bd      	mov	sp, r7
 801c20a:	b004      	add	sp, #16
 801c20c:	bd80      	pop	{r7, pc}
	...

0801c210 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b094      	sub	sp, #80	@ 0x50
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c21c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	2220      	movs	r2, #32
 801c226:	4013      	ands	r3, r2
 801c228:	d16f      	bne.n	801c30a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801c22a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c22c:	225a      	movs	r2, #90	@ 0x5a
 801c22e:	2100      	movs	r1, #0
 801c230:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c232:	f3ef 8310 	mrs	r3, PRIMASK
 801c236:	61bb      	str	r3, [r7, #24]
  return(result);
 801c238:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c23a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c23c:	2301      	movs	r3, #1
 801c23e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c240:	69fb      	ldr	r3, [r7, #28]
 801c242:	f383 8810 	msr	PRIMASK, r3
}
 801c246:	46c0      	nop			@ (mov r8, r8)
 801c248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	681a      	ldr	r2, [r3, #0]
 801c24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	493b      	ldr	r1, [pc, #236]	@ (801c340 <UART_DMAReceiveCplt+0x130>)
 801c254:	400a      	ands	r2, r1
 801c256:	601a      	str	r2, [r3, #0]
 801c258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c25a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c25c:	6a3b      	ldr	r3, [r7, #32]
 801c25e:	f383 8810 	msr	PRIMASK, r3
}
 801c262:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c264:	f3ef 8310 	mrs	r3, PRIMASK
 801c268:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c26c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c26e:	2301      	movs	r3, #1
 801c270:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c274:	f383 8810 	msr	PRIMASK, r3
}
 801c278:	46c0      	nop			@ (mov r8, r8)
 801c27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	689a      	ldr	r2, [r3, #8]
 801c280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	2101      	movs	r1, #1
 801c286:	438a      	bics	r2, r1
 801c288:	609a      	str	r2, [r3, #8]
 801c28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c290:	f383 8810 	msr	PRIMASK, r3
}
 801c294:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c296:	f3ef 8310 	mrs	r3, PRIMASK
 801c29a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c29e:	643b      	str	r3, [r7, #64]	@ 0x40
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c2a6:	f383 8810 	msr	PRIMASK, r3
}
 801c2aa:	46c0      	nop			@ (mov r8, r8)
 801c2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	689a      	ldr	r2, [r3, #8]
 801c2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	2140      	movs	r1, #64	@ 0x40
 801c2b8:	438a      	bics	r2, r1
 801c2ba:	609a      	str	r2, [r3, #8]
 801c2bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c2be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2c2:	f383 8810 	msr	PRIMASK, r3
}
 801c2c6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2ca:	2280      	movs	r2, #128	@ 0x80
 801c2cc:	2120      	movs	r1, #32
 801c2ce:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c2d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c2d4:	2b01      	cmp	r3, #1
 801c2d6:	d118      	bne.n	801c30a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2d8:	f3ef 8310 	mrs	r3, PRIMASK
 801c2dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c2de:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	f383 8810 	msr	PRIMASK, r3
}
 801c2ec:	46c0      	nop			@ (mov r8, r8)
 801c2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	681a      	ldr	r2, [r3, #0]
 801c2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	2110      	movs	r1, #16
 801c2fa:	438a      	bics	r2, r1
 801c2fc:	601a      	str	r2, [r3, #0]
 801c2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c302:	697b      	ldr	r3, [r7, #20]
 801c304:	f383 8810 	msr	PRIMASK, r3
}
 801c308:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c30c:	2200      	movs	r2, #0
 801c30e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c314:	2b01      	cmp	r3, #1
 801c316:	d109      	bne.n	801c32c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801c318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c31a:	22ac      	movs	r2, #172	@ 0xac
 801c31c:	589b      	ldr	r3, [r3, r2]
 801c31e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c320:	2158      	movs	r1, #88	@ 0x58
 801c322:	5a51      	ldrh	r1, [r2, r1]
 801c324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c326:	0010      	movs	r0, r2
 801c328:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c32a:	e005      	b.n	801c338 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801c32c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c32e:	2294      	movs	r2, #148	@ 0x94
 801c330:	589b      	ldr	r3, [r3, r2]
 801c332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c334:	0010      	movs	r0, r2
 801c336:	4798      	blx	r3
}
 801c338:	46c0      	nop			@ (mov r8, r8)
 801c33a:	46bd      	mov	sp, r7
 801c33c:	b014      	add	sp, #80	@ 0x50
 801c33e:	bd80      	pop	{r7, pc}
 801c340:	fffffeff 	.word	0xfffffeff

0801c344 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b084      	sub	sp, #16
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c350:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	2201      	movs	r2, #1
 801c356:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c35c:	2b01      	cmp	r3, #1
 801c35e:	d10b      	bne.n	801c378 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	22ac      	movs	r2, #172	@ 0xac
 801c364:	589b      	ldr	r3, [r3, r2]
 801c366:	68fa      	ldr	r2, [r7, #12]
 801c368:	2158      	movs	r1, #88	@ 0x58
 801c36a:	5a52      	ldrh	r2, [r2, r1]
 801c36c:	0852      	lsrs	r2, r2, #1
 801c36e:	b291      	uxth	r1, r2
 801c370:	68fa      	ldr	r2, [r7, #12]
 801c372:	0010      	movs	r0, r2
 801c374:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c376:	e005      	b.n	801c384 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	2290      	movs	r2, #144	@ 0x90
 801c37c:	589b      	ldr	r3, [r3, r2]
 801c37e:	68fa      	ldr	r2, [r7, #12]
 801c380:	0010      	movs	r0, r2
 801c382:	4798      	blx	r3
}
 801c384:	46c0      	nop			@ (mov r8, r8)
 801c386:	46bd      	mov	sp, r7
 801c388:	b004      	add	sp, #16
 801c38a:	bd80      	pop	{r7, pc}

0801c38c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b086      	sub	sp, #24
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c398:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801c39a:	697b      	ldr	r3, [r7, #20]
 801c39c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c39e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	2280      	movs	r2, #128	@ 0x80
 801c3a4:	589b      	ldr	r3, [r3, r2]
 801c3a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	689b      	ldr	r3, [r3, #8]
 801c3ae:	2280      	movs	r2, #128	@ 0x80
 801c3b0:	4013      	ands	r3, r2
 801c3b2:	2b80      	cmp	r3, #128	@ 0x80
 801c3b4:	d10a      	bne.n	801c3cc <UART_DMAError+0x40>
 801c3b6:	693b      	ldr	r3, [r7, #16]
 801c3b8:	2b21      	cmp	r3, #33	@ 0x21
 801c3ba:	d107      	bne.n	801c3cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801c3bc:	697b      	ldr	r3, [r7, #20]
 801c3be:	2252      	movs	r2, #82	@ 0x52
 801c3c0:	2100      	movs	r1, #0
 801c3c2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801c3c4:	697b      	ldr	r3, [r7, #20]
 801c3c6:	0018      	movs	r0, r3
 801c3c8:	f7ff fe3a 	bl	801c040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801c3cc:	697b      	ldr	r3, [r7, #20]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	689b      	ldr	r3, [r3, #8]
 801c3d2:	2240      	movs	r2, #64	@ 0x40
 801c3d4:	4013      	ands	r3, r2
 801c3d6:	2b40      	cmp	r3, #64	@ 0x40
 801c3d8:	d10a      	bne.n	801c3f0 <UART_DMAError+0x64>
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	2b22      	cmp	r3, #34	@ 0x22
 801c3de:	d107      	bne.n	801c3f0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801c3e0:	697b      	ldr	r3, [r7, #20]
 801c3e2:	225a      	movs	r2, #90	@ 0x5a
 801c3e4:	2100      	movs	r1, #0
 801c3e6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801c3e8:	697b      	ldr	r3, [r7, #20]
 801c3ea:	0018      	movs	r0, r3
 801c3ec:	f7ff fe4c 	bl	801c088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c3f0:	697b      	ldr	r3, [r7, #20]
 801c3f2:	2284      	movs	r2, #132	@ 0x84
 801c3f4:	589b      	ldr	r3, [r3, r2]
 801c3f6:	2210      	movs	r2, #16
 801c3f8:	431a      	orrs	r2, r3
 801c3fa:	697b      	ldr	r3, [r7, #20]
 801c3fc:	2184      	movs	r1, #132	@ 0x84
 801c3fe:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	2298      	movs	r2, #152	@ 0x98
 801c404:	589b      	ldr	r3, [r3, r2]
 801c406:	697a      	ldr	r2, [r7, #20]
 801c408:	0010      	movs	r0, r2
 801c40a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c40c:	46c0      	nop			@ (mov r8, r8)
 801c40e:	46bd      	mov	sp, r7
 801c410:	b006      	add	sp, #24
 801c412:	bd80      	pop	{r7, pc}

0801c414 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b084      	sub	sp, #16
 801c418:	af00      	add	r7, sp, #0
 801c41a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	225a      	movs	r2, #90	@ 0x5a
 801c426:	2100      	movs	r1, #0
 801c428:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	2252      	movs	r2, #82	@ 0x52
 801c42e:	2100      	movs	r1, #0
 801c430:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	2298      	movs	r2, #152	@ 0x98
 801c436:	589b      	ldr	r3, [r3, r2]
 801c438:	68fa      	ldr	r2, [r7, #12]
 801c43a:	0010      	movs	r0, r2
 801c43c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c43e:	46c0      	nop			@ (mov r8, r8)
 801c440:	46bd      	mov	sp, r7
 801c442:	b004      	add	sp, #16
 801c444:	bd80      	pop	{r7, pc}

0801c446 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c446:	b580      	push	{r7, lr}
 801c448:	b086      	sub	sp, #24
 801c44a:	af00      	add	r7, sp, #0
 801c44c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c44e:	f3ef 8310 	mrs	r3, PRIMASK
 801c452:	60bb      	str	r3, [r7, #8]
  return(result);
 801c454:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c456:	617b      	str	r3, [r7, #20]
 801c458:	2301      	movs	r3, #1
 801c45a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	f383 8810 	msr	PRIMASK, r3
}
 801c462:	46c0      	nop			@ (mov r8, r8)
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	2140      	movs	r1, #64	@ 0x40
 801c470:	438a      	bics	r2, r1
 801c472:	601a      	str	r2, [r3, #0]
 801c474:	697b      	ldr	r3, [r7, #20]
 801c476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	f383 8810 	msr	PRIMASK, r3
}
 801c47e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	2220      	movs	r2, #32
 801c484:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	2200      	movs	r2, #0
 801c48a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	228c      	movs	r2, #140	@ 0x8c
 801c490:	589b      	ldr	r3, [r3, r2]
 801c492:	687a      	ldr	r2, [r7, #4]
 801c494:	0010      	movs	r0, r2
 801c496:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c498:	46c0      	nop			@ (mov r8, r8)
 801c49a:	46bd      	mov	sp, r7
 801c49c:	b006      	add	sp, #24
 801c49e:	bd80      	pop	{r7, pc}

0801c4a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b094      	sub	sp, #80	@ 0x50
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c4a8:	204e      	movs	r0, #78	@ 0x4e
 801c4aa:	183b      	adds	r3, r7, r0
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	215c      	movs	r1, #92	@ 0x5c
 801c4b0:	5a52      	ldrh	r2, [r2, r1]
 801c4b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2280      	movs	r2, #128	@ 0x80
 801c4b8:	589b      	ldr	r3, [r3, r2]
 801c4ba:	2b22      	cmp	r3, #34	@ 0x22
 801c4bc:	d000      	beq.n	801c4c0 <UART_RxISR_8BIT+0x20>
 801c4be:	e0c2      	b.n	801c646 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c4c6:	214c      	movs	r1, #76	@ 0x4c
 801c4c8:	187b      	adds	r3, r7, r1
 801c4ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c4cc:	187b      	adds	r3, r7, r1
 801c4ce:	881b      	ldrh	r3, [r3, #0]
 801c4d0:	b2da      	uxtb	r2, r3
 801c4d2:	183b      	adds	r3, r7, r0
 801c4d4:	881b      	ldrh	r3, [r3, #0]
 801c4d6:	b2d9      	uxtb	r1, r3
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4dc:	400a      	ands	r2, r1
 801c4de:	b2d2      	uxtb	r2, r2
 801c4e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c4e6:	1c5a      	adds	r2, r3, #1
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	225a      	movs	r2, #90	@ 0x5a
 801c4f0:	5a9b      	ldrh	r3, [r3, r2]
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	3b01      	subs	r3, #1
 801c4f6:	b299      	uxth	r1, r3
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	225a      	movs	r2, #90	@ 0x5a
 801c4fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	225a      	movs	r2, #90	@ 0x5a
 801c502:	5a9b      	ldrh	r3, [r3, r2]
 801c504:	b29b      	uxth	r3, r3
 801c506:	2b00      	cmp	r3, #0
 801c508:	d000      	beq.n	801c50c <UART_RxISR_8BIT+0x6c>
 801c50a:	e0a4      	b.n	801c656 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c50c:	f3ef 8310 	mrs	r3, PRIMASK
 801c510:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c514:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c516:	2301      	movs	r3, #1
 801c518:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c51c:	f383 8810 	msr	PRIMASK, r3
}
 801c520:	46c0      	nop			@ (mov r8, r8)
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	681a      	ldr	r2, [r3, #0]
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	494c      	ldr	r1, [pc, #304]	@ (801c660 <UART_RxISR_8BIT+0x1c0>)
 801c52e:	400a      	ands	r2, r1
 801c530:	601a      	str	r2, [r3, #0]
 801c532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c538:	f383 8810 	msr	PRIMASK, r3
}
 801c53c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c53e:	f3ef 8310 	mrs	r3, PRIMASK
 801c542:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c546:	647b      	str	r3, [r7, #68]	@ 0x44
 801c548:	2301      	movs	r3, #1
 801c54a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c54e:	f383 8810 	msr	PRIMASK, r3
}
 801c552:	46c0      	nop			@ (mov r8, r8)
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	689a      	ldr	r2, [r3, #8]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	2101      	movs	r1, #1
 801c560:	438a      	bics	r2, r1
 801c562:	609a      	str	r2, [r3, #8]
 801c564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c566:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c56a:	f383 8810 	msr	PRIMASK, r3
}
 801c56e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2280      	movs	r2, #128	@ 0x80
 801c574:	2120      	movs	r1, #32
 801c576:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	2200      	movs	r2, #0
 801c57c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	2200      	movs	r2, #0
 801c582:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	4a36      	ldr	r2, [pc, #216]	@ (801c664 <UART_RxISR_8BIT+0x1c4>)
 801c58a:	4293      	cmp	r3, r2
 801c58c:	d01f      	beq.n	801c5ce <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	685a      	ldr	r2, [r3, #4]
 801c594:	2380      	movs	r3, #128	@ 0x80
 801c596:	041b      	lsls	r3, r3, #16
 801c598:	4013      	ands	r3, r2
 801c59a:	d018      	beq.n	801c5ce <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c59c:	f3ef 8310 	mrs	r3, PRIMASK
 801c5a0:	61bb      	str	r3, [r7, #24]
  return(result);
 801c5a2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c5a4:	643b      	str	r3, [r7, #64]	@ 0x40
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	f383 8810 	msr	PRIMASK, r3
}
 801c5b0:	46c0      	nop			@ (mov r8, r8)
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	681a      	ldr	r2, [r3, #0]
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	492a      	ldr	r1, [pc, #168]	@ (801c668 <UART_RxISR_8BIT+0x1c8>)
 801c5be:	400a      	ands	r2, r1
 801c5c0:	601a      	str	r2, [r3, #0]
 801c5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c5c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5c6:	6a3b      	ldr	r3, [r7, #32]
 801c5c8:	f383 8810 	msr	PRIMASK, r3
}
 801c5cc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c5d2:	2b01      	cmp	r3, #1
 801c5d4:	d130      	bne.n	801c638 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	2200      	movs	r2, #0
 801c5da:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5dc:	f3ef 8310 	mrs	r3, PRIMASK
 801c5e0:	60fb      	str	r3, [r7, #12]
  return(result);
 801c5e2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c5e6:	2301      	movs	r3, #1
 801c5e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	f383 8810 	msr	PRIMASK, r3
}
 801c5f0:	46c0      	nop			@ (mov r8, r8)
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	2110      	movs	r1, #16
 801c5fe:	438a      	bics	r2, r1
 801c600:	601a      	str	r2, [r3, #0]
 801c602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c606:	697b      	ldr	r3, [r7, #20]
 801c608:	f383 8810 	msr	PRIMASK, r3
}
 801c60c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	69db      	ldr	r3, [r3, #28]
 801c614:	2210      	movs	r2, #16
 801c616:	4013      	ands	r3, r2
 801c618:	2b10      	cmp	r3, #16
 801c61a:	d103      	bne.n	801c624 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	2210      	movs	r2, #16
 801c622:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	22ac      	movs	r2, #172	@ 0xac
 801c628:	589b      	ldr	r3, [r3, r2]
 801c62a:	687a      	ldr	r2, [r7, #4]
 801c62c:	2158      	movs	r1, #88	@ 0x58
 801c62e:	5a51      	ldrh	r1, [r2, r1]
 801c630:	687a      	ldr	r2, [r7, #4]
 801c632:	0010      	movs	r0, r2
 801c634:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c636:	e00e      	b.n	801c656 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	2294      	movs	r2, #148	@ 0x94
 801c63c:	589b      	ldr	r3, [r3, r2]
 801c63e:	687a      	ldr	r2, [r7, #4]
 801c640:	0010      	movs	r0, r2
 801c642:	4798      	blx	r3
}
 801c644:	e007      	b.n	801c656 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	699a      	ldr	r2, [r3, #24]
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	2108      	movs	r1, #8
 801c652:	430a      	orrs	r2, r1
 801c654:	619a      	str	r2, [r3, #24]
}
 801c656:	46c0      	nop			@ (mov r8, r8)
 801c658:	46bd      	mov	sp, r7
 801c65a:	b014      	add	sp, #80	@ 0x50
 801c65c:	bd80      	pop	{r7, pc}
 801c65e:	46c0      	nop			@ (mov r8, r8)
 801c660:	fffffedf 	.word	0xfffffedf
 801c664:	40004800 	.word	0x40004800
 801c668:	fbffffff 	.word	0xfbffffff

0801c66c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b094      	sub	sp, #80	@ 0x50
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c674:	204e      	movs	r0, #78	@ 0x4e
 801c676:	183b      	adds	r3, r7, r0
 801c678:	687a      	ldr	r2, [r7, #4]
 801c67a:	215c      	movs	r1, #92	@ 0x5c
 801c67c:	5a52      	ldrh	r2, [r2, r1]
 801c67e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	2280      	movs	r2, #128	@ 0x80
 801c684:	589b      	ldr	r3, [r3, r2]
 801c686:	2b22      	cmp	r3, #34	@ 0x22
 801c688:	d000      	beq.n	801c68c <UART_RxISR_16BIT+0x20>
 801c68a:	e0c2      	b.n	801c812 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c692:	214c      	movs	r1, #76	@ 0x4c
 801c694:	187b      	adds	r3, r7, r1
 801c696:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c69c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801c69e:	187b      	adds	r3, r7, r1
 801c6a0:	183a      	adds	r2, r7, r0
 801c6a2:	881b      	ldrh	r3, [r3, #0]
 801c6a4:	8812      	ldrh	r2, [r2, #0]
 801c6a6:	4013      	ands	r3, r2
 801c6a8:	b29a      	uxth	r2, r3
 801c6aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c6ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c6b2:	1c9a      	adds	r2, r3, #2
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	225a      	movs	r2, #90	@ 0x5a
 801c6bc:	5a9b      	ldrh	r3, [r3, r2]
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	3b01      	subs	r3, #1
 801c6c2:	b299      	uxth	r1, r3
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	225a      	movs	r2, #90	@ 0x5a
 801c6c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	225a      	movs	r2, #90	@ 0x5a
 801c6ce:	5a9b      	ldrh	r3, [r3, r2]
 801c6d0:	b29b      	uxth	r3, r3
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d000      	beq.n	801c6d8 <UART_RxISR_16BIT+0x6c>
 801c6d6:	e0a4      	b.n	801c822 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6d8:	f3ef 8310 	mrs	r3, PRIMASK
 801c6dc:	623b      	str	r3, [r7, #32]
  return(result);
 801c6de:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c6e0:	647b      	str	r3, [r7, #68]	@ 0x44
 801c6e2:	2301      	movs	r3, #1
 801c6e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6e8:	f383 8810 	msr	PRIMASK, r3
}
 801c6ec:	46c0      	nop			@ (mov r8, r8)
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	681a      	ldr	r2, [r3, #0]
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	494c      	ldr	r1, [pc, #304]	@ (801c82c <UART_RxISR_16BIT+0x1c0>)
 801c6fa:	400a      	ands	r2, r1
 801c6fc:	601a      	str	r2, [r3, #0]
 801c6fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c700:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c704:	f383 8810 	msr	PRIMASK, r3
}
 801c708:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c70a:	f3ef 8310 	mrs	r3, PRIMASK
 801c70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c712:	643b      	str	r3, [r7, #64]	@ 0x40
 801c714:	2301      	movs	r3, #1
 801c716:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c71a:	f383 8810 	msr	PRIMASK, r3
}
 801c71e:	46c0      	nop			@ (mov r8, r8)
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	689a      	ldr	r2, [r3, #8]
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	2101      	movs	r1, #1
 801c72c:	438a      	bics	r2, r1
 801c72e:	609a      	str	r2, [r3, #8]
 801c730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c732:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c736:	f383 8810 	msr	PRIMASK, r3
}
 801c73a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	2280      	movs	r2, #128	@ 0x80
 801c740:	2120      	movs	r1, #32
 801c742:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	2200      	movs	r2, #0
 801c748:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2200      	movs	r2, #0
 801c74e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	4a36      	ldr	r2, [pc, #216]	@ (801c830 <UART_RxISR_16BIT+0x1c4>)
 801c756:	4293      	cmp	r3, r2
 801c758:	d01f      	beq.n	801c79a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	685a      	ldr	r2, [r3, #4]
 801c760:	2380      	movs	r3, #128	@ 0x80
 801c762:	041b      	lsls	r3, r3, #16
 801c764:	4013      	ands	r3, r2
 801c766:	d018      	beq.n	801c79a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c768:	f3ef 8310 	mrs	r3, PRIMASK
 801c76c:	617b      	str	r3, [r7, #20]
  return(result);
 801c76e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c772:	2301      	movs	r3, #1
 801c774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c776:	69bb      	ldr	r3, [r7, #24]
 801c778:	f383 8810 	msr	PRIMASK, r3
}
 801c77c:	46c0      	nop			@ (mov r8, r8)
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	681b      	ldr	r3, [r3, #0]
 801c782:	681a      	ldr	r2, [r3, #0]
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	492a      	ldr	r1, [pc, #168]	@ (801c834 <UART_RxISR_16BIT+0x1c8>)
 801c78a:	400a      	ands	r2, r1
 801c78c:	601a      	str	r2, [r3, #0]
 801c78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c792:	69fb      	ldr	r3, [r7, #28]
 801c794:	f383 8810 	msr	PRIMASK, r3
}
 801c798:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c79e:	2b01      	cmp	r3, #1
 801c7a0:	d130      	bne.n	801c804 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7a8:	f3ef 8310 	mrs	r3, PRIMASK
 801c7ac:	60bb      	str	r3, [r7, #8]
  return(result);
 801c7ae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c7b2:	2301      	movs	r3, #1
 801c7b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	f383 8810 	msr	PRIMASK, r3
}
 801c7bc:	46c0      	nop			@ (mov r8, r8)
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	681a      	ldr	r2, [r3, #0]
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	2110      	movs	r1, #16
 801c7ca:	438a      	bics	r2, r1
 801c7cc:	601a      	str	r2, [r3, #0]
 801c7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7d2:	693b      	ldr	r3, [r7, #16]
 801c7d4:	f383 8810 	msr	PRIMASK, r3
}
 801c7d8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	69db      	ldr	r3, [r3, #28]
 801c7e0:	2210      	movs	r2, #16
 801c7e2:	4013      	ands	r3, r2
 801c7e4:	2b10      	cmp	r3, #16
 801c7e6:	d103      	bne.n	801c7f0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	2210      	movs	r2, #16
 801c7ee:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	22ac      	movs	r2, #172	@ 0xac
 801c7f4:	589b      	ldr	r3, [r3, r2]
 801c7f6:	687a      	ldr	r2, [r7, #4]
 801c7f8:	2158      	movs	r1, #88	@ 0x58
 801c7fa:	5a51      	ldrh	r1, [r2, r1]
 801c7fc:	687a      	ldr	r2, [r7, #4]
 801c7fe:	0010      	movs	r0, r2
 801c800:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c802:	e00e      	b.n	801c822 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	2294      	movs	r2, #148	@ 0x94
 801c808:	589b      	ldr	r3, [r3, r2]
 801c80a:	687a      	ldr	r2, [r7, #4]
 801c80c:	0010      	movs	r0, r2
 801c80e:	4798      	blx	r3
}
 801c810:	e007      	b.n	801c822 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	699a      	ldr	r2, [r3, #24]
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	2108      	movs	r1, #8
 801c81e:	430a      	orrs	r2, r1
 801c820:	619a      	str	r2, [r3, #24]
}
 801c822:	46c0      	nop			@ (mov r8, r8)
 801c824:	46bd      	mov	sp, r7
 801c826:	b014      	add	sp, #80	@ 0x50
 801c828:	bd80      	pop	{r7, pc}
 801c82a:	46c0      	nop			@ (mov r8, r8)
 801c82c:	fffffedf 	.word	0xfffffedf
 801c830:	40004800 	.word	0x40004800
 801c834:	fbffffff 	.word	0xfbffffff

0801c838 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c838:	b580      	push	{r7, lr}
 801c83a:	b082      	sub	sp, #8
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c840:	46c0      	nop			@ (mov r8, r8)
 801c842:	46bd      	mov	sp, r7
 801c844:	b002      	add	sp, #8
 801c846:	bd80      	pop	{r7, pc}

0801c848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b084      	sub	sp, #16
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	2244      	movs	r2, #68	@ 0x44
 801c854:	2100      	movs	r1, #0
 801c856:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c858:	4b05      	ldr	r3, [pc, #20]	@ (801c870 <USB_EnableGlobalInt+0x28>)
 801c85a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	b299      	uxth	r1, r3
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	2240      	movs	r2, #64	@ 0x40
 801c864:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c866:	2300      	movs	r3, #0
}
 801c868:	0018      	movs	r0, r3
 801c86a:	46bd      	mov	sp, r7
 801c86c:	b004      	add	sp, #16
 801c86e:	bd80      	pop	{r7, pc}
 801c870:	0000bf80 	.word	0x0000bf80

0801c874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c87c:	4b09      	ldr	r3, [pc, #36]	@ (801c8a4 <USB_DisableGlobalInt+0x30>)
 801c87e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	2240      	movs	r2, #64	@ 0x40
 801c884:	5a9b      	ldrh	r3, [r3, r2]
 801c886:	b29b      	uxth	r3, r3
 801c888:	68fa      	ldr	r2, [r7, #12]
 801c88a:	b292      	uxth	r2, r2
 801c88c:	43d2      	mvns	r2, r2
 801c88e:	b292      	uxth	r2, r2
 801c890:	4013      	ands	r3, r2
 801c892:	b299      	uxth	r1, r3
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	2240      	movs	r2, #64	@ 0x40
 801c898:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c89a:	2300      	movs	r3, #0
}
 801c89c:	0018      	movs	r0, r3
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	b004      	add	sp, #16
 801c8a2:	bd80      	pop	{r7, pc}
 801c8a4:	0000bf80 	.word	0x0000bf80

0801c8a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801c8a8:	b084      	sub	sp, #16
 801c8aa:	b590      	push	{r4, r7, lr}
 801c8ac:	b083      	sub	sp, #12
 801c8ae:	af00      	add	r7, sp, #0
 801c8b0:	6078      	str	r0, [r7, #4]
 801c8b2:	2004      	movs	r0, #4
 801c8b4:	2410      	movs	r4, #16
 801c8b6:	1900      	adds	r0, r0, r4
 801c8b8:	2408      	movs	r4, #8
 801c8ba:	46a4      	mov	ip, r4
 801c8bc:	44bc      	add	ip, r7
 801c8be:	4460      	add	r0, ip
 801c8c0:	6001      	str	r1, [r0, #0]
 801c8c2:	6042      	str	r2, [r0, #4]
 801c8c4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	2240      	movs	r2, #64	@ 0x40
 801c8ca:	2101      	movs	r1, #1
 801c8cc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	2240      	movs	r2, #64	@ 0x40
 801c8d2:	2100      	movs	r1, #0
 801c8d4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	2244      	movs	r2, #68	@ 0x44
 801c8da:	2100      	movs	r1, #0
 801c8dc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	2250      	movs	r2, #80	@ 0x50
 801c8e2:	2100      	movs	r1, #0
 801c8e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c8e6:	2300      	movs	r3, #0
}
 801c8e8:	0018      	movs	r0, r3
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	b003      	add	sp, #12
 801c8ee:	bc90      	pop	{r4, r7}
 801c8f0:	bc08      	pop	{r3}
 801c8f2:	b004      	add	sp, #16
 801c8f4:	4718      	bx	r3
	...

0801c8f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c8f8:	b580      	push	{r7, lr}
 801c8fa:	b09c      	sub	sp, #112	@ 0x70
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
 801c900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801c902:	236f      	movs	r3, #111	@ 0x6f
 801c904:	18fb      	adds	r3, r7, r3
 801c906:	2200      	movs	r2, #0
 801c908:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801c90a:	687a      	ldr	r2, [r7, #4]
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	009b      	lsls	r3, r3, #2
 801c912:	18d3      	adds	r3, r2, r3
 801c914:	881b      	ldrh	r3, [r3, #0]
 801c916:	b29a      	uxth	r2, r3
 801c918:	236c      	movs	r3, #108	@ 0x6c
 801c91a:	18fb      	adds	r3, r7, r3
 801c91c:	49a3      	ldr	r1, [pc, #652]	@ (801cbac <USB_ActivateEndpoint+0x2b4>)
 801c91e:	400a      	ands	r2, r1
 801c920:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801c922:	683b      	ldr	r3, [r7, #0]
 801c924:	78db      	ldrb	r3, [r3, #3]
 801c926:	2b03      	cmp	r3, #3
 801c928:	d017      	beq.n	801c95a <USB_ActivateEndpoint+0x62>
 801c92a:	dc28      	bgt.n	801c97e <USB_ActivateEndpoint+0x86>
 801c92c:	2b02      	cmp	r3, #2
 801c92e:	d00e      	beq.n	801c94e <USB_ActivateEndpoint+0x56>
 801c930:	dc25      	bgt.n	801c97e <USB_ActivateEndpoint+0x86>
 801c932:	2b00      	cmp	r3, #0
 801c934:	d002      	beq.n	801c93c <USB_ActivateEndpoint+0x44>
 801c936:	2b01      	cmp	r3, #1
 801c938:	d018      	beq.n	801c96c <USB_ActivateEndpoint+0x74>
 801c93a:	e020      	b.n	801c97e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801c93c:	226c      	movs	r2, #108	@ 0x6c
 801c93e:	18bb      	adds	r3, r7, r2
 801c940:	18ba      	adds	r2, r7, r2
 801c942:	8812      	ldrh	r2, [r2, #0]
 801c944:	2180      	movs	r1, #128	@ 0x80
 801c946:	0089      	lsls	r1, r1, #2
 801c948:	430a      	orrs	r2, r1
 801c94a:	801a      	strh	r2, [r3, #0]
      break;
 801c94c:	e01c      	b.n	801c988 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801c94e:	226c      	movs	r2, #108	@ 0x6c
 801c950:	18bb      	adds	r3, r7, r2
 801c952:	18ba      	adds	r2, r7, r2
 801c954:	8812      	ldrh	r2, [r2, #0]
 801c956:	801a      	strh	r2, [r3, #0]
      break;
 801c958:	e016      	b.n	801c988 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801c95a:	226c      	movs	r2, #108	@ 0x6c
 801c95c:	18bb      	adds	r3, r7, r2
 801c95e:	18ba      	adds	r2, r7, r2
 801c960:	8812      	ldrh	r2, [r2, #0]
 801c962:	21c0      	movs	r1, #192	@ 0xc0
 801c964:	00c9      	lsls	r1, r1, #3
 801c966:	430a      	orrs	r2, r1
 801c968:	801a      	strh	r2, [r3, #0]
      break;
 801c96a:	e00d      	b.n	801c988 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801c96c:	226c      	movs	r2, #108	@ 0x6c
 801c96e:	18bb      	adds	r3, r7, r2
 801c970:	18ba      	adds	r2, r7, r2
 801c972:	8812      	ldrh	r2, [r2, #0]
 801c974:	2180      	movs	r1, #128	@ 0x80
 801c976:	00c9      	lsls	r1, r1, #3
 801c978:	430a      	orrs	r2, r1
 801c97a:	801a      	strh	r2, [r3, #0]
      break;
 801c97c:	e004      	b.n	801c988 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801c97e:	236f      	movs	r3, #111	@ 0x6f
 801c980:	18fb      	adds	r3, r7, r3
 801c982:	2201      	movs	r2, #1
 801c984:	701a      	strb	r2, [r3, #0]
      break;
 801c986:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801c988:	687a      	ldr	r2, [r7, #4]
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	781b      	ldrb	r3, [r3, #0]
 801c98e:	009b      	lsls	r3, r3, #2
 801c990:	18d3      	adds	r3, r2, r3
 801c992:	226c      	movs	r2, #108	@ 0x6c
 801c994:	18ba      	adds	r2, r7, r2
 801c996:	8812      	ldrh	r2, [r2, #0]
 801c998:	4985      	ldr	r1, [pc, #532]	@ (801cbb0 <USB_ActivateEndpoint+0x2b8>)
 801c99a:	430a      	orrs	r2, r1
 801c99c:	b292      	uxth	r2, r2
 801c99e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801c9a0:	687a      	ldr	r2, [r7, #4]
 801c9a2:	683b      	ldr	r3, [r7, #0]
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	009b      	lsls	r3, r3, #2
 801c9a8:	18d3      	adds	r3, r2, r3
 801c9aa:	881b      	ldrh	r3, [r3, #0]
 801c9ac:	b29b      	uxth	r3, r3
 801c9ae:	b21b      	sxth	r3, r3
 801c9b0:	4a80      	ldr	r2, [pc, #512]	@ (801cbb4 <USB_ActivateEndpoint+0x2bc>)
 801c9b2:	4013      	ands	r3, r2
 801c9b4:	b21a      	sxth	r2, r3
 801c9b6:	683b      	ldr	r3, [r7, #0]
 801c9b8:	781b      	ldrb	r3, [r3, #0]
 801c9ba:	b21b      	sxth	r3, r3
 801c9bc:	4313      	orrs	r3, r2
 801c9be:	b21a      	sxth	r2, r3
 801c9c0:	2166      	movs	r1, #102	@ 0x66
 801c9c2:	187b      	adds	r3, r7, r1
 801c9c4:	801a      	strh	r2, [r3, #0]
 801c9c6:	687a      	ldr	r2, [r7, #4]
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	009b      	lsls	r3, r3, #2
 801c9ce:	18d3      	adds	r3, r2, r3
 801c9d0:	187a      	adds	r2, r7, r1
 801c9d2:	8812      	ldrh	r2, [r2, #0]
 801c9d4:	4976      	ldr	r1, [pc, #472]	@ (801cbb0 <USB_ActivateEndpoint+0x2b8>)
 801c9d6:	430a      	orrs	r2, r1
 801c9d8:	b292      	uxth	r2, r2
 801c9da:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	7b1b      	ldrb	r3, [r3, #12]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d000      	beq.n	801c9e6 <USB_ActivateEndpoint+0xee>
 801c9e4:	e178      	b.n	801ccd8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	785b      	ldrb	r3, [r3, #1]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d100      	bne.n	801c9f0 <USB_ActivateEndpoint+0xf8>
 801c9ee:	e07a      	b.n	801cae6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	61bb      	str	r3, [r7, #24]
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	2250      	movs	r2, #80	@ 0x50
 801c9f8:	5a9b      	ldrh	r3, [r3, r2]
 801c9fa:	b29b      	uxth	r3, r3
 801c9fc:	001a      	movs	r2, r3
 801c9fe:	69bb      	ldr	r3, [r7, #24]
 801ca00:	189b      	adds	r3, r3, r2
 801ca02:	61bb      	str	r3, [r7, #24]
 801ca04:	683b      	ldr	r3, [r7, #0]
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	00da      	lsls	r2, r3, #3
 801ca0a:	69bb      	ldr	r3, [r7, #24]
 801ca0c:	18d3      	adds	r3, r2, r3
 801ca0e:	2280      	movs	r2, #128	@ 0x80
 801ca10:	00d2      	lsls	r2, r2, #3
 801ca12:	4694      	mov	ip, r2
 801ca14:	4463      	add	r3, ip
 801ca16:	617b      	str	r3, [r7, #20]
 801ca18:	683b      	ldr	r3, [r7, #0]
 801ca1a:	88db      	ldrh	r3, [r3, #6]
 801ca1c:	085b      	lsrs	r3, r3, #1
 801ca1e:	b29b      	uxth	r3, r3
 801ca20:	18db      	adds	r3, r3, r3
 801ca22:	b29a      	uxth	r2, r3
 801ca24:	697b      	ldr	r3, [r7, #20]
 801ca26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ca28:	687a      	ldr	r2, [r7, #4]
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	781b      	ldrb	r3, [r3, #0]
 801ca2e:	009b      	lsls	r3, r3, #2
 801ca30:	18d2      	adds	r2, r2, r3
 801ca32:	2112      	movs	r1, #18
 801ca34:	187b      	adds	r3, r7, r1
 801ca36:	8812      	ldrh	r2, [r2, #0]
 801ca38:	801a      	strh	r2, [r3, #0]
 801ca3a:	187b      	adds	r3, r7, r1
 801ca3c:	881b      	ldrh	r3, [r3, #0]
 801ca3e:	2240      	movs	r2, #64	@ 0x40
 801ca40:	4013      	ands	r3, r2
 801ca42:	d016      	beq.n	801ca72 <USB_ActivateEndpoint+0x17a>
 801ca44:	687a      	ldr	r2, [r7, #4]
 801ca46:	683b      	ldr	r3, [r7, #0]
 801ca48:	781b      	ldrb	r3, [r3, #0]
 801ca4a:	009b      	lsls	r3, r3, #2
 801ca4c:	18d3      	adds	r3, r2, r3
 801ca4e:	881b      	ldrh	r3, [r3, #0]
 801ca50:	b29a      	uxth	r2, r3
 801ca52:	2010      	movs	r0, #16
 801ca54:	183b      	adds	r3, r7, r0
 801ca56:	4957      	ldr	r1, [pc, #348]	@ (801cbb4 <USB_ActivateEndpoint+0x2bc>)
 801ca58:	400a      	ands	r2, r1
 801ca5a:	801a      	strh	r2, [r3, #0]
 801ca5c:	687a      	ldr	r2, [r7, #4]
 801ca5e:	683b      	ldr	r3, [r7, #0]
 801ca60:	781b      	ldrb	r3, [r3, #0]
 801ca62:	009b      	lsls	r3, r3, #2
 801ca64:	18d3      	adds	r3, r2, r3
 801ca66:	183a      	adds	r2, r7, r0
 801ca68:	8812      	ldrh	r2, [r2, #0]
 801ca6a:	4953      	ldr	r1, [pc, #332]	@ (801cbb8 <USB_ActivateEndpoint+0x2c0>)
 801ca6c:	430a      	orrs	r2, r1
 801ca6e:	b292      	uxth	r2, r2
 801ca70:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ca72:	683b      	ldr	r3, [r7, #0]
 801ca74:	78db      	ldrb	r3, [r3, #3]
 801ca76:	2b01      	cmp	r3, #1
 801ca78:	d01d      	beq.n	801cab6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ca7a:	687a      	ldr	r2, [r7, #4]
 801ca7c:	683b      	ldr	r3, [r7, #0]
 801ca7e:	781b      	ldrb	r3, [r3, #0]
 801ca80:	009b      	lsls	r3, r3, #2
 801ca82:	18d3      	adds	r3, r2, r3
 801ca84:	881b      	ldrh	r3, [r3, #0]
 801ca86:	b29a      	uxth	r2, r3
 801ca88:	200c      	movs	r0, #12
 801ca8a:	183b      	adds	r3, r7, r0
 801ca8c:	494b      	ldr	r1, [pc, #300]	@ (801cbbc <USB_ActivateEndpoint+0x2c4>)
 801ca8e:	400a      	ands	r2, r1
 801ca90:	801a      	strh	r2, [r3, #0]
 801ca92:	183b      	adds	r3, r7, r0
 801ca94:	183a      	adds	r2, r7, r0
 801ca96:	8812      	ldrh	r2, [r2, #0]
 801ca98:	2120      	movs	r1, #32
 801ca9a:	404a      	eors	r2, r1
 801ca9c:	801a      	strh	r2, [r3, #0]
 801ca9e:	687a      	ldr	r2, [r7, #4]
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	781b      	ldrb	r3, [r3, #0]
 801caa4:	009b      	lsls	r3, r3, #2
 801caa6:	18d3      	adds	r3, r2, r3
 801caa8:	183a      	adds	r2, r7, r0
 801caaa:	8812      	ldrh	r2, [r2, #0]
 801caac:	4940      	ldr	r1, [pc, #256]	@ (801cbb0 <USB_ActivateEndpoint+0x2b8>)
 801caae:	430a      	orrs	r2, r1
 801cab0:	b292      	uxth	r2, r2
 801cab2:	801a      	strh	r2, [r3, #0]
 801cab4:	e2b4      	b.n	801d020 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	781b      	ldrb	r3, [r3, #0]
 801cabc:	009b      	lsls	r3, r3, #2
 801cabe:	18d3      	adds	r3, r2, r3
 801cac0:	881b      	ldrh	r3, [r3, #0]
 801cac2:	b29a      	uxth	r2, r3
 801cac4:	200e      	movs	r0, #14
 801cac6:	183b      	adds	r3, r7, r0
 801cac8:	493c      	ldr	r1, [pc, #240]	@ (801cbbc <USB_ActivateEndpoint+0x2c4>)
 801caca:	400a      	ands	r2, r1
 801cacc:	801a      	strh	r2, [r3, #0]
 801cace:	687a      	ldr	r2, [r7, #4]
 801cad0:	683b      	ldr	r3, [r7, #0]
 801cad2:	781b      	ldrb	r3, [r3, #0]
 801cad4:	009b      	lsls	r3, r3, #2
 801cad6:	18d3      	adds	r3, r2, r3
 801cad8:	183a      	adds	r2, r7, r0
 801cada:	8812      	ldrh	r2, [r2, #0]
 801cadc:	4934      	ldr	r1, [pc, #208]	@ (801cbb0 <USB_ActivateEndpoint+0x2b8>)
 801cade:	430a      	orrs	r2, r1
 801cae0:	b292      	uxth	r2, r2
 801cae2:	801a      	strh	r2, [r3, #0]
 801cae4:	e29c      	b.n	801d020 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	633b      	str	r3, [r7, #48]	@ 0x30
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	2250      	movs	r2, #80	@ 0x50
 801caee:	5a9b      	ldrh	r3, [r3, r2]
 801caf0:	b29b      	uxth	r3, r3
 801caf2:	001a      	movs	r2, r3
 801caf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caf6:	189b      	adds	r3, r3, r2
 801caf8:	633b      	str	r3, [r7, #48]	@ 0x30
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	00da      	lsls	r2, r3, #3
 801cb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb02:	18d3      	adds	r3, r2, r3
 801cb04:	4a2e      	ldr	r2, [pc, #184]	@ (801cbc0 <USB_ActivateEndpoint+0x2c8>)
 801cb06:	4694      	mov	ip, r2
 801cb08:	4463      	add	r3, ip
 801cb0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cb0c:	683b      	ldr	r3, [r7, #0]
 801cb0e:	88db      	ldrh	r3, [r3, #6]
 801cb10:	085b      	lsrs	r3, r3, #1
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	18db      	adds	r3, r3, r3
 801cb16:	b29a      	uxth	r2, r3
 801cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	2250      	movs	r2, #80	@ 0x50
 801cb24:	5a9b      	ldrh	r3, [r3, r2]
 801cb26:	b29b      	uxth	r3, r3
 801cb28:	001a      	movs	r2, r3
 801cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb2c:	189b      	adds	r3, r3, r2
 801cb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	781b      	ldrb	r3, [r3, #0]
 801cb34:	00da      	lsls	r2, r3, #3
 801cb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cb38:	18d3      	adds	r3, r2, r3
 801cb3a:	4a22      	ldr	r2, [pc, #136]	@ (801cbc4 <USB_ActivateEndpoint+0x2cc>)
 801cb3c:	4694      	mov	ip, r2
 801cb3e:	4463      	add	r3, ip
 801cb40:	627b      	str	r3, [r7, #36]	@ 0x24
 801cb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb44:	881b      	ldrh	r3, [r3, #0]
 801cb46:	b29b      	uxth	r3, r3
 801cb48:	059b      	lsls	r3, r3, #22
 801cb4a:	0d9b      	lsrs	r3, r3, #22
 801cb4c:	b29a      	uxth	r2, r3
 801cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb50:	801a      	strh	r2, [r3, #0]
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	691b      	ldr	r3, [r3, #16]
 801cb56:	2b3e      	cmp	r3, #62	@ 0x3e
 801cb58:	d91a      	bls.n	801cb90 <USB_ActivateEndpoint+0x298>
 801cb5a:	683b      	ldr	r3, [r7, #0]
 801cb5c:	691b      	ldr	r3, [r3, #16]
 801cb5e:	095b      	lsrs	r3, r3, #5
 801cb60:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cb62:	683b      	ldr	r3, [r7, #0]
 801cb64:	691b      	ldr	r3, [r3, #16]
 801cb66:	221f      	movs	r2, #31
 801cb68:	4013      	ands	r3, r2
 801cb6a:	d102      	bne.n	801cb72 <USB_ActivateEndpoint+0x27a>
 801cb6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cb6e:	3b01      	subs	r3, #1
 801cb70:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb74:	881b      	ldrh	r3, [r3, #0]
 801cb76:	b29a      	uxth	r2, r3
 801cb78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	029b      	lsls	r3, r3, #10
 801cb7e:	b29b      	uxth	r3, r3
 801cb80:	4313      	orrs	r3, r2
 801cb82:	b29b      	uxth	r3, r3
 801cb84:	4a10      	ldr	r2, [pc, #64]	@ (801cbc8 <USB_ActivateEndpoint+0x2d0>)
 801cb86:	4313      	orrs	r3, r2
 801cb88:	b29a      	uxth	r2, r3
 801cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb8c:	801a      	strh	r2, [r3, #0]
 801cb8e:	e034      	b.n	801cbfa <USB_ActivateEndpoint+0x302>
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	691b      	ldr	r3, [r3, #16]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d119      	bne.n	801cbcc <USB_ActivateEndpoint+0x2d4>
 801cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb9a:	881b      	ldrh	r3, [r3, #0]
 801cb9c:	b29b      	uxth	r3, r3
 801cb9e:	4a0a      	ldr	r2, [pc, #40]	@ (801cbc8 <USB_ActivateEndpoint+0x2d0>)
 801cba0:	4313      	orrs	r3, r2
 801cba2:	b29a      	uxth	r2, r3
 801cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba6:	801a      	strh	r2, [r3, #0]
 801cba8:	e027      	b.n	801cbfa <USB_ActivateEndpoint+0x302>
 801cbaa:	46c0      	nop			@ (mov r8, r8)
 801cbac:	ffff898f 	.word	0xffff898f
 801cbb0:	ffff8080 	.word	0xffff8080
 801cbb4:	ffff8f8f 	.word	0xffff8f8f
 801cbb8:	ffff80c0 	.word	0xffff80c0
 801cbbc:	ffff8fbf 	.word	0xffff8fbf
 801cbc0:	00000404 	.word	0x00000404
 801cbc4:	00000406 	.word	0x00000406
 801cbc8:	ffff8000 	.word	0xffff8000
 801cbcc:	683b      	ldr	r3, [r7, #0]
 801cbce:	691b      	ldr	r3, [r3, #16]
 801cbd0:	085b      	lsrs	r3, r3, #1
 801cbd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	691b      	ldr	r3, [r3, #16]
 801cbd8:	2201      	movs	r2, #1
 801cbda:	4013      	ands	r3, r2
 801cbdc:	d002      	beq.n	801cbe4 <USB_ActivateEndpoint+0x2ec>
 801cbde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbe0:	3301      	adds	r3, #1
 801cbe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbe6:	881b      	ldrh	r3, [r3, #0]
 801cbe8:	b29a      	uxth	r2, r3
 801cbea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbec:	b29b      	uxth	r3, r3
 801cbee:	029b      	lsls	r3, r3, #10
 801cbf0:	b29b      	uxth	r3, r3
 801cbf2:	4313      	orrs	r3, r2
 801cbf4:	b29a      	uxth	r2, r3
 801cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cbfa:	687a      	ldr	r2, [r7, #4]
 801cbfc:	683b      	ldr	r3, [r7, #0]
 801cbfe:	781b      	ldrb	r3, [r3, #0]
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	18d2      	adds	r2, r2, r3
 801cc04:	2122      	movs	r1, #34	@ 0x22
 801cc06:	187b      	adds	r3, r7, r1
 801cc08:	8812      	ldrh	r2, [r2, #0]
 801cc0a:	801a      	strh	r2, [r3, #0]
 801cc0c:	187b      	adds	r3, r7, r1
 801cc0e:	881a      	ldrh	r2, [r3, #0]
 801cc10:	2380      	movs	r3, #128	@ 0x80
 801cc12:	01db      	lsls	r3, r3, #7
 801cc14:	4013      	ands	r3, r2
 801cc16:	d016      	beq.n	801cc46 <USB_ActivateEndpoint+0x34e>
 801cc18:	687a      	ldr	r2, [r7, #4]
 801cc1a:	683b      	ldr	r3, [r7, #0]
 801cc1c:	781b      	ldrb	r3, [r3, #0]
 801cc1e:	009b      	lsls	r3, r3, #2
 801cc20:	18d3      	adds	r3, r2, r3
 801cc22:	881b      	ldrh	r3, [r3, #0]
 801cc24:	b29a      	uxth	r2, r3
 801cc26:	2020      	movs	r0, #32
 801cc28:	183b      	adds	r3, r7, r0
 801cc2a:	49dd      	ldr	r1, [pc, #884]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801cc2c:	400a      	ands	r2, r1
 801cc2e:	801a      	strh	r2, [r3, #0]
 801cc30:	687a      	ldr	r2, [r7, #4]
 801cc32:	683b      	ldr	r3, [r7, #0]
 801cc34:	781b      	ldrb	r3, [r3, #0]
 801cc36:	009b      	lsls	r3, r3, #2
 801cc38:	18d3      	adds	r3, r2, r3
 801cc3a:	183a      	adds	r2, r7, r0
 801cc3c:	8812      	ldrh	r2, [r2, #0]
 801cc3e:	49d9      	ldr	r1, [pc, #868]	@ (801cfa4 <USB_ActivateEndpoint+0x6ac>)
 801cc40:	430a      	orrs	r2, r1
 801cc42:	b292      	uxth	r2, r2
 801cc44:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	781b      	ldrb	r3, [r3, #0]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d125      	bne.n	801cc9a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801cc4e:	687a      	ldr	r2, [r7, #4]
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	009b      	lsls	r3, r3, #2
 801cc56:	18d3      	adds	r3, r2, r3
 801cc58:	881b      	ldrh	r3, [r3, #0]
 801cc5a:	b29a      	uxth	r2, r3
 801cc5c:	201c      	movs	r0, #28
 801cc5e:	183b      	adds	r3, r7, r0
 801cc60:	49d1      	ldr	r1, [pc, #836]	@ (801cfa8 <USB_ActivateEndpoint+0x6b0>)
 801cc62:	400a      	ands	r2, r1
 801cc64:	801a      	strh	r2, [r3, #0]
 801cc66:	183b      	adds	r3, r7, r0
 801cc68:	183a      	adds	r2, r7, r0
 801cc6a:	8812      	ldrh	r2, [r2, #0]
 801cc6c:	2180      	movs	r1, #128	@ 0x80
 801cc6e:	0149      	lsls	r1, r1, #5
 801cc70:	404a      	eors	r2, r1
 801cc72:	801a      	strh	r2, [r3, #0]
 801cc74:	183b      	adds	r3, r7, r0
 801cc76:	183a      	adds	r2, r7, r0
 801cc78:	8812      	ldrh	r2, [r2, #0]
 801cc7a:	2180      	movs	r1, #128	@ 0x80
 801cc7c:	0189      	lsls	r1, r1, #6
 801cc7e:	404a      	eors	r2, r1
 801cc80:	801a      	strh	r2, [r3, #0]
 801cc82:	687a      	ldr	r2, [r7, #4]
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	781b      	ldrb	r3, [r3, #0]
 801cc88:	009b      	lsls	r3, r3, #2
 801cc8a:	18d3      	adds	r3, r2, r3
 801cc8c:	183a      	adds	r2, r7, r0
 801cc8e:	8812      	ldrh	r2, [r2, #0]
 801cc90:	49c6      	ldr	r1, [pc, #792]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801cc92:	430a      	orrs	r2, r1
 801cc94:	b292      	uxth	r2, r2
 801cc96:	801a      	strh	r2, [r3, #0]
 801cc98:	e1c2      	b.n	801d020 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801cc9a:	687a      	ldr	r2, [r7, #4]
 801cc9c:	683b      	ldr	r3, [r7, #0]
 801cc9e:	781b      	ldrb	r3, [r3, #0]
 801cca0:	009b      	lsls	r3, r3, #2
 801cca2:	18d3      	adds	r3, r2, r3
 801cca4:	881b      	ldrh	r3, [r3, #0]
 801cca6:	b29a      	uxth	r2, r3
 801cca8:	201e      	movs	r0, #30
 801ccaa:	183b      	adds	r3, r7, r0
 801ccac:	49be      	ldr	r1, [pc, #760]	@ (801cfa8 <USB_ActivateEndpoint+0x6b0>)
 801ccae:	400a      	ands	r2, r1
 801ccb0:	801a      	strh	r2, [r3, #0]
 801ccb2:	183b      	adds	r3, r7, r0
 801ccb4:	183a      	adds	r2, r7, r0
 801ccb6:	8812      	ldrh	r2, [r2, #0]
 801ccb8:	2180      	movs	r1, #128	@ 0x80
 801ccba:	0189      	lsls	r1, r1, #6
 801ccbc:	404a      	eors	r2, r1
 801ccbe:	801a      	strh	r2, [r3, #0]
 801ccc0:	687a      	ldr	r2, [r7, #4]
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	009b      	lsls	r3, r3, #2
 801ccc8:	18d3      	adds	r3, r2, r3
 801ccca:	183a      	adds	r2, r7, r0
 801cccc:	8812      	ldrh	r2, [r2, #0]
 801ccce:	49b7      	ldr	r1, [pc, #732]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801ccd0:	430a      	orrs	r2, r1
 801ccd2:	b292      	uxth	r2, r2
 801ccd4:	801a      	strh	r2, [r3, #0]
 801ccd6:	e1a3      	b.n	801d020 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801ccd8:	683b      	ldr	r3, [r7, #0]
 801ccda:	78db      	ldrb	r3, [r3, #3]
 801ccdc:	2b02      	cmp	r3, #2
 801ccde:	d117      	bne.n	801cd10 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801cce0:	687a      	ldr	r2, [r7, #4]
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	781b      	ldrb	r3, [r3, #0]
 801cce6:	009b      	lsls	r3, r3, #2
 801cce8:	18d3      	adds	r3, r2, r3
 801ccea:	881b      	ldrh	r3, [r3, #0]
 801ccec:	b29a      	uxth	r2, r3
 801ccee:	2062      	movs	r0, #98	@ 0x62
 801ccf0:	183b      	adds	r3, r7, r0
 801ccf2:	49ab      	ldr	r1, [pc, #684]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801ccf4:	400a      	ands	r2, r1
 801ccf6:	801a      	strh	r2, [r3, #0]
 801ccf8:	687a      	ldr	r2, [r7, #4]
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	781b      	ldrb	r3, [r3, #0]
 801ccfe:	009b      	lsls	r3, r3, #2
 801cd00:	18d3      	adds	r3, r2, r3
 801cd02:	183a      	adds	r2, r7, r0
 801cd04:	8812      	ldrh	r2, [r2, #0]
 801cd06:	49aa      	ldr	r1, [pc, #680]	@ (801cfb0 <USB_ActivateEndpoint+0x6b8>)
 801cd08:	430a      	orrs	r2, r1
 801cd0a:	b292      	uxth	r2, r2
 801cd0c:	801a      	strh	r2, [r3, #0]
 801cd0e:	e016      	b.n	801cd3e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801cd10:	687a      	ldr	r2, [r7, #4]
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	781b      	ldrb	r3, [r3, #0]
 801cd16:	009b      	lsls	r3, r3, #2
 801cd18:	18d3      	adds	r3, r2, r3
 801cd1a:	881b      	ldrh	r3, [r3, #0]
 801cd1c:	b29a      	uxth	r2, r3
 801cd1e:	2064      	movs	r0, #100	@ 0x64
 801cd20:	183b      	adds	r3, r7, r0
 801cd22:	49a4      	ldr	r1, [pc, #656]	@ (801cfb4 <USB_ActivateEndpoint+0x6bc>)
 801cd24:	400a      	ands	r2, r1
 801cd26:	801a      	strh	r2, [r3, #0]
 801cd28:	687a      	ldr	r2, [r7, #4]
 801cd2a:	683b      	ldr	r3, [r7, #0]
 801cd2c:	781b      	ldrb	r3, [r3, #0]
 801cd2e:	009b      	lsls	r3, r3, #2
 801cd30:	18d3      	adds	r3, r2, r3
 801cd32:	183a      	adds	r2, r7, r0
 801cd34:	8812      	ldrh	r2, [r2, #0]
 801cd36:	499d      	ldr	r1, [pc, #628]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801cd38:	430a      	orrs	r2, r1
 801cd3a:	b292      	uxth	r2, r2
 801cd3c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	2250      	movs	r2, #80	@ 0x50
 801cd46:	5a9b      	ldrh	r3, [r3, r2]
 801cd48:	b29b      	uxth	r3, r3
 801cd4a:	001a      	movs	r2, r3
 801cd4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cd4e:	189b      	adds	r3, r3, r2
 801cd50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cd52:	683b      	ldr	r3, [r7, #0]
 801cd54:	781b      	ldrb	r3, [r3, #0]
 801cd56:	00da      	lsls	r2, r3, #3
 801cd58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cd5a:	18d3      	adds	r3, r2, r3
 801cd5c:	2280      	movs	r2, #128	@ 0x80
 801cd5e:	00d2      	lsls	r2, r2, #3
 801cd60:	4694      	mov	ip, r2
 801cd62:	4463      	add	r3, ip
 801cd64:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cd66:	683b      	ldr	r3, [r7, #0]
 801cd68:	891b      	ldrh	r3, [r3, #8]
 801cd6a:	085b      	lsrs	r3, r3, #1
 801cd6c:	b29b      	uxth	r3, r3
 801cd6e:	18db      	adds	r3, r3, r3
 801cd70:	b29a      	uxth	r2, r3
 801cd72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cd74:	801a      	strh	r2, [r3, #0]
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	657b      	str	r3, [r7, #84]	@ 0x54
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	2250      	movs	r2, #80	@ 0x50
 801cd7e:	5a9b      	ldrh	r3, [r3, r2]
 801cd80:	b29b      	uxth	r3, r3
 801cd82:	001a      	movs	r2, r3
 801cd84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd86:	189b      	adds	r3, r3, r2
 801cd88:	657b      	str	r3, [r7, #84]	@ 0x54
 801cd8a:	683b      	ldr	r3, [r7, #0]
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	00da      	lsls	r2, r3, #3
 801cd90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd92:	18d3      	adds	r3, r2, r3
 801cd94:	4a88      	ldr	r2, [pc, #544]	@ (801cfb8 <USB_ActivateEndpoint+0x6c0>)
 801cd96:	4694      	mov	ip, r2
 801cd98:	4463      	add	r3, ip
 801cd9a:	653b      	str	r3, [r7, #80]	@ 0x50
 801cd9c:	683b      	ldr	r3, [r7, #0]
 801cd9e:	895b      	ldrh	r3, [r3, #10]
 801cda0:	085b      	lsrs	r3, r3, #1
 801cda2:	b29b      	uxth	r3, r3
 801cda4:	18db      	adds	r3, r3, r3
 801cda6:	b29a      	uxth	r2, r3
 801cda8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cdaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	785b      	ldrb	r3, [r3, #1]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d000      	beq.n	801cdb6 <USB_ActivateEndpoint+0x4be>
 801cdb4:	e087      	b.n	801cec6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cdb6:	687a      	ldr	r2, [r7, #4]
 801cdb8:	683b      	ldr	r3, [r7, #0]
 801cdba:	781b      	ldrb	r3, [r3, #0]
 801cdbc:	009b      	lsls	r3, r3, #2
 801cdbe:	18d2      	adds	r2, r2, r3
 801cdc0:	2140      	movs	r1, #64	@ 0x40
 801cdc2:	187b      	adds	r3, r7, r1
 801cdc4:	8812      	ldrh	r2, [r2, #0]
 801cdc6:	801a      	strh	r2, [r3, #0]
 801cdc8:	187b      	adds	r3, r7, r1
 801cdca:	881a      	ldrh	r2, [r3, #0]
 801cdcc:	2380      	movs	r3, #128	@ 0x80
 801cdce:	01db      	lsls	r3, r3, #7
 801cdd0:	4013      	ands	r3, r2
 801cdd2:	d016      	beq.n	801ce02 <USB_ActivateEndpoint+0x50a>
 801cdd4:	687a      	ldr	r2, [r7, #4]
 801cdd6:	683b      	ldr	r3, [r7, #0]
 801cdd8:	781b      	ldrb	r3, [r3, #0]
 801cdda:	009b      	lsls	r3, r3, #2
 801cddc:	18d3      	adds	r3, r2, r3
 801cdde:	881b      	ldrh	r3, [r3, #0]
 801cde0:	b29a      	uxth	r2, r3
 801cde2:	203e      	movs	r0, #62	@ 0x3e
 801cde4:	183b      	adds	r3, r7, r0
 801cde6:	496e      	ldr	r1, [pc, #440]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801cde8:	400a      	ands	r2, r1
 801cdea:	801a      	strh	r2, [r3, #0]
 801cdec:	687a      	ldr	r2, [r7, #4]
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	781b      	ldrb	r3, [r3, #0]
 801cdf2:	009b      	lsls	r3, r3, #2
 801cdf4:	18d3      	adds	r3, r2, r3
 801cdf6:	183a      	adds	r2, r7, r0
 801cdf8:	8812      	ldrh	r2, [r2, #0]
 801cdfa:	496a      	ldr	r1, [pc, #424]	@ (801cfa4 <USB_ActivateEndpoint+0x6ac>)
 801cdfc:	430a      	orrs	r2, r1
 801cdfe:	b292      	uxth	r2, r2
 801ce00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ce02:	687a      	ldr	r2, [r7, #4]
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	781b      	ldrb	r3, [r3, #0]
 801ce08:	009b      	lsls	r3, r3, #2
 801ce0a:	18d2      	adds	r2, r2, r3
 801ce0c:	213c      	movs	r1, #60	@ 0x3c
 801ce0e:	187b      	adds	r3, r7, r1
 801ce10:	8812      	ldrh	r2, [r2, #0]
 801ce12:	801a      	strh	r2, [r3, #0]
 801ce14:	187b      	adds	r3, r7, r1
 801ce16:	881b      	ldrh	r3, [r3, #0]
 801ce18:	2240      	movs	r2, #64	@ 0x40
 801ce1a:	4013      	ands	r3, r2
 801ce1c:	d016      	beq.n	801ce4c <USB_ActivateEndpoint+0x554>
 801ce1e:	687a      	ldr	r2, [r7, #4]
 801ce20:	683b      	ldr	r3, [r7, #0]
 801ce22:	781b      	ldrb	r3, [r3, #0]
 801ce24:	009b      	lsls	r3, r3, #2
 801ce26:	18d3      	adds	r3, r2, r3
 801ce28:	881b      	ldrh	r3, [r3, #0]
 801ce2a:	b29a      	uxth	r2, r3
 801ce2c:	203a      	movs	r0, #58	@ 0x3a
 801ce2e:	183b      	adds	r3, r7, r0
 801ce30:	495b      	ldr	r1, [pc, #364]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801ce32:	400a      	ands	r2, r1
 801ce34:	801a      	strh	r2, [r3, #0]
 801ce36:	687a      	ldr	r2, [r7, #4]
 801ce38:	683b      	ldr	r3, [r7, #0]
 801ce3a:	781b      	ldrb	r3, [r3, #0]
 801ce3c:	009b      	lsls	r3, r3, #2
 801ce3e:	18d3      	adds	r3, r2, r3
 801ce40:	183a      	adds	r2, r7, r0
 801ce42:	8812      	ldrh	r2, [r2, #0]
 801ce44:	495d      	ldr	r1, [pc, #372]	@ (801cfbc <USB_ActivateEndpoint+0x6c4>)
 801ce46:	430a      	orrs	r2, r1
 801ce48:	b292      	uxth	r2, r2
 801ce4a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ce4c:	687a      	ldr	r2, [r7, #4]
 801ce4e:	683b      	ldr	r3, [r7, #0]
 801ce50:	781b      	ldrb	r3, [r3, #0]
 801ce52:	009b      	lsls	r3, r3, #2
 801ce54:	18d3      	adds	r3, r2, r3
 801ce56:	881b      	ldrh	r3, [r3, #0]
 801ce58:	b29a      	uxth	r2, r3
 801ce5a:	2038      	movs	r0, #56	@ 0x38
 801ce5c:	183b      	adds	r3, r7, r0
 801ce5e:	4952      	ldr	r1, [pc, #328]	@ (801cfa8 <USB_ActivateEndpoint+0x6b0>)
 801ce60:	400a      	ands	r2, r1
 801ce62:	801a      	strh	r2, [r3, #0]
 801ce64:	183b      	adds	r3, r7, r0
 801ce66:	183a      	adds	r2, r7, r0
 801ce68:	8812      	ldrh	r2, [r2, #0]
 801ce6a:	2180      	movs	r1, #128	@ 0x80
 801ce6c:	0149      	lsls	r1, r1, #5
 801ce6e:	404a      	eors	r2, r1
 801ce70:	801a      	strh	r2, [r3, #0]
 801ce72:	183b      	adds	r3, r7, r0
 801ce74:	183a      	adds	r2, r7, r0
 801ce76:	8812      	ldrh	r2, [r2, #0]
 801ce78:	2180      	movs	r1, #128	@ 0x80
 801ce7a:	0189      	lsls	r1, r1, #6
 801ce7c:	404a      	eors	r2, r1
 801ce7e:	801a      	strh	r2, [r3, #0]
 801ce80:	687a      	ldr	r2, [r7, #4]
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	781b      	ldrb	r3, [r3, #0]
 801ce86:	009b      	lsls	r3, r3, #2
 801ce88:	18d3      	adds	r3, r2, r3
 801ce8a:	183a      	adds	r2, r7, r0
 801ce8c:	8812      	ldrh	r2, [r2, #0]
 801ce8e:	4947      	ldr	r1, [pc, #284]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801ce90:	430a      	orrs	r2, r1
 801ce92:	b292      	uxth	r2, r2
 801ce94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ce96:	687a      	ldr	r2, [r7, #4]
 801ce98:	683b      	ldr	r3, [r7, #0]
 801ce9a:	781b      	ldrb	r3, [r3, #0]
 801ce9c:	009b      	lsls	r3, r3, #2
 801ce9e:	18d3      	adds	r3, r2, r3
 801cea0:	881b      	ldrh	r3, [r3, #0]
 801cea2:	b29a      	uxth	r2, r3
 801cea4:	2036      	movs	r0, #54	@ 0x36
 801cea6:	183b      	adds	r3, r7, r0
 801cea8:	4945      	ldr	r1, [pc, #276]	@ (801cfc0 <USB_ActivateEndpoint+0x6c8>)
 801ceaa:	400a      	ands	r2, r1
 801ceac:	801a      	strh	r2, [r3, #0]
 801ceae:	687a      	ldr	r2, [r7, #4]
 801ceb0:	683b      	ldr	r3, [r7, #0]
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	009b      	lsls	r3, r3, #2
 801ceb6:	18d3      	adds	r3, r2, r3
 801ceb8:	183a      	adds	r2, r7, r0
 801ceba:	8812      	ldrh	r2, [r2, #0]
 801cebc:	493b      	ldr	r1, [pc, #236]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801cebe:	430a      	orrs	r2, r1
 801cec0:	b292      	uxth	r2, r2
 801cec2:	801a      	strh	r2, [r3, #0]
 801cec4:	e0ac      	b.n	801d020 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cec6:	687a      	ldr	r2, [r7, #4]
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	781b      	ldrb	r3, [r3, #0]
 801cecc:	009b      	lsls	r3, r3, #2
 801cece:	18d2      	adds	r2, r2, r3
 801ced0:	214e      	movs	r1, #78	@ 0x4e
 801ced2:	187b      	adds	r3, r7, r1
 801ced4:	8812      	ldrh	r2, [r2, #0]
 801ced6:	801a      	strh	r2, [r3, #0]
 801ced8:	187b      	adds	r3, r7, r1
 801ceda:	881a      	ldrh	r2, [r3, #0]
 801cedc:	2380      	movs	r3, #128	@ 0x80
 801cede:	01db      	lsls	r3, r3, #7
 801cee0:	4013      	ands	r3, r2
 801cee2:	d016      	beq.n	801cf12 <USB_ActivateEndpoint+0x61a>
 801cee4:	687a      	ldr	r2, [r7, #4]
 801cee6:	683b      	ldr	r3, [r7, #0]
 801cee8:	781b      	ldrb	r3, [r3, #0]
 801ceea:	009b      	lsls	r3, r3, #2
 801ceec:	18d3      	adds	r3, r2, r3
 801ceee:	881b      	ldrh	r3, [r3, #0]
 801cef0:	b29a      	uxth	r2, r3
 801cef2:	204c      	movs	r0, #76	@ 0x4c
 801cef4:	183b      	adds	r3, r7, r0
 801cef6:	492a      	ldr	r1, [pc, #168]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801cef8:	400a      	ands	r2, r1
 801cefa:	801a      	strh	r2, [r3, #0]
 801cefc:	687a      	ldr	r2, [r7, #4]
 801cefe:	683b      	ldr	r3, [r7, #0]
 801cf00:	781b      	ldrb	r3, [r3, #0]
 801cf02:	009b      	lsls	r3, r3, #2
 801cf04:	18d3      	adds	r3, r2, r3
 801cf06:	183a      	adds	r2, r7, r0
 801cf08:	8812      	ldrh	r2, [r2, #0]
 801cf0a:	4926      	ldr	r1, [pc, #152]	@ (801cfa4 <USB_ActivateEndpoint+0x6ac>)
 801cf0c:	430a      	orrs	r2, r1
 801cf0e:	b292      	uxth	r2, r2
 801cf10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801cf12:	687a      	ldr	r2, [r7, #4]
 801cf14:	683b      	ldr	r3, [r7, #0]
 801cf16:	781b      	ldrb	r3, [r3, #0]
 801cf18:	009b      	lsls	r3, r3, #2
 801cf1a:	18d2      	adds	r2, r2, r3
 801cf1c:	214a      	movs	r1, #74	@ 0x4a
 801cf1e:	187b      	adds	r3, r7, r1
 801cf20:	8812      	ldrh	r2, [r2, #0]
 801cf22:	801a      	strh	r2, [r3, #0]
 801cf24:	187b      	adds	r3, r7, r1
 801cf26:	881b      	ldrh	r3, [r3, #0]
 801cf28:	2240      	movs	r2, #64	@ 0x40
 801cf2a:	4013      	ands	r3, r2
 801cf2c:	d016      	beq.n	801cf5c <USB_ActivateEndpoint+0x664>
 801cf2e:	687a      	ldr	r2, [r7, #4]
 801cf30:	683b      	ldr	r3, [r7, #0]
 801cf32:	781b      	ldrb	r3, [r3, #0]
 801cf34:	009b      	lsls	r3, r3, #2
 801cf36:	18d3      	adds	r3, r2, r3
 801cf38:	881b      	ldrh	r3, [r3, #0]
 801cf3a:	b29a      	uxth	r2, r3
 801cf3c:	2048      	movs	r0, #72	@ 0x48
 801cf3e:	183b      	adds	r3, r7, r0
 801cf40:	4917      	ldr	r1, [pc, #92]	@ (801cfa0 <USB_ActivateEndpoint+0x6a8>)
 801cf42:	400a      	ands	r2, r1
 801cf44:	801a      	strh	r2, [r3, #0]
 801cf46:	687a      	ldr	r2, [r7, #4]
 801cf48:	683b      	ldr	r3, [r7, #0]
 801cf4a:	781b      	ldrb	r3, [r3, #0]
 801cf4c:	009b      	lsls	r3, r3, #2
 801cf4e:	18d3      	adds	r3, r2, r3
 801cf50:	183a      	adds	r2, r7, r0
 801cf52:	8812      	ldrh	r2, [r2, #0]
 801cf54:	4919      	ldr	r1, [pc, #100]	@ (801cfbc <USB_ActivateEndpoint+0x6c4>)
 801cf56:	430a      	orrs	r2, r1
 801cf58:	b292      	uxth	r2, r2
 801cf5a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801cf5c:	683b      	ldr	r3, [r7, #0]
 801cf5e:	78db      	ldrb	r3, [r3, #3]
 801cf60:	2b01      	cmp	r3, #1
 801cf62:	d02f      	beq.n	801cfc4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801cf64:	687a      	ldr	r2, [r7, #4]
 801cf66:	683b      	ldr	r3, [r7, #0]
 801cf68:	781b      	ldrb	r3, [r3, #0]
 801cf6a:	009b      	lsls	r3, r3, #2
 801cf6c:	18d3      	adds	r3, r2, r3
 801cf6e:	881b      	ldrh	r3, [r3, #0]
 801cf70:	b29a      	uxth	r2, r3
 801cf72:	2044      	movs	r0, #68	@ 0x44
 801cf74:	183b      	adds	r3, r7, r0
 801cf76:	4912      	ldr	r1, [pc, #72]	@ (801cfc0 <USB_ActivateEndpoint+0x6c8>)
 801cf78:	400a      	ands	r2, r1
 801cf7a:	801a      	strh	r2, [r3, #0]
 801cf7c:	183b      	adds	r3, r7, r0
 801cf7e:	183a      	adds	r2, r7, r0
 801cf80:	8812      	ldrh	r2, [r2, #0]
 801cf82:	2120      	movs	r1, #32
 801cf84:	404a      	eors	r2, r1
 801cf86:	801a      	strh	r2, [r3, #0]
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	009b      	lsls	r3, r3, #2
 801cf90:	18d3      	adds	r3, r2, r3
 801cf92:	183a      	adds	r2, r7, r0
 801cf94:	8812      	ldrh	r2, [r2, #0]
 801cf96:	4905      	ldr	r1, [pc, #20]	@ (801cfac <USB_ActivateEndpoint+0x6b4>)
 801cf98:	430a      	orrs	r2, r1
 801cf9a:	b292      	uxth	r2, r2
 801cf9c:	801a      	strh	r2, [r3, #0]
 801cf9e:	e028      	b.n	801cff2 <USB_ActivateEndpoint+0x6fa>
 801cfa0:	ffff8f8f 	.word	0xffff8f8f
 801cfa4:	ffffc080 	.word	0xffffc080
 801cfa8:	ffffbf8f 	.word	0xffffbf8f
 801cfac:	ffff8080 	.word	0xffff8080
 801cfb0:	ffff8180 	.word	0xffff8180
 801cfb4:	ffff8e8f 	.word	0xffff8e8f
 801cfb8:	00000404 	.word	0x00000404
 801cfbc:	ffff80c0 	.word	0xffff80c0
 801cfc0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cfc4:	687a      	ldr	r2, [r7, #4]
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	781b      	ldrb	r3, [r3, #0]
 801cfca:	009b      	lsls	r3, r3, #2
 801cfcc:	18d3      	adds	r3, r2, r3
 801cfce:	881b      	ldrh	r3, [r3, #0]
 801cfd0:	b29a      	uxth	r2, r3
 801cfd2:	2046      	movs	r0, #70	@ 0x46
 801cfd4:	183b      	adds	r3, r7, r0
 801cfd6:	4916      	ldr	r1, [pc, #88]	@ (801d030 <USB_ActivateEndpoint+0x738>)
 801cfd8:	400a      	ands	r2, r1
 801cfda:	801a      	strh	r2, [r3, #0]
 801cfdc:	687a      	ldr	r2, [r7, #4]
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	781b      	ldrb	r3, [r3, #0]
 801cfe2:	009b      	lsls	r3, r3, #2
 801cfe4:	18d3      	adds	r3, r2, r3
 801cfe6:	183a      	adds	r2, r7, r0
 801cfe8:	8812      	ldrh	r2, [r2, #0]
 801cfea:	4912      	ldr	r1, [pc, #72]	@ (801d034 <USB_ActivateEndpoint+0x73c>)
 801cfec:	430a      	orrs	r2, r1
 801cfee:	b292      	uxth	r2, r2
 801cff0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801cff2:	687a      	ldr	r2, [r7, #4]
 801cff4:	683b      	ldr	r3, [r7, #0]
 801cff6:	781b      	ldrb	r3, [r3, #0]
 801cff8:	009b      	lsls	r3, r3, #2
 801cffa:	18d3      	adds	r3, r2, r3
 801cffc:	881b      	ldrh	r3, [r3, #0]
 801cffe:	b29a      	uxth	r2, r3
 801d000:	2042      	movs	r0, #66	@ 0x42
 801d002:	183b      	adds	r3, r7, r0
 801d004:	490c      	ldr	r1, [pc, #48]	@ (801d038 <USB_ActivateEndpoint+0x740>)
 801d006:	400a      	ands	r2, r1
 801d008:	801a      	strh	r2, [r3, #0]
 801d00a:	687a      	ldr	r2, [r7, #4]
 801d00c:	683b      	ldr	r3, [r7, #0]
 801d00e:	781b      	ldrb	r3, [r3, #0]
 801d010:	009b      	lsls	r3, r3, #2
 801d012:	18d3      	adds	r3, r2, r3
 801d014:	183a      	adds	r2, r7, r0
 801d016:	8812      	ldrh	r2, [r2, #0]
 801d018:	4906      	ldr	r1, [pc, #24]	@ (801d034 <USB_ActivateEndpoint+0x73c>)
 801d01a:	430a      	orrs	r2, r1
 801d01c:	b292      	uxth	r2, r2
 801d01e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801d020:	236f      	movs	r3, #111	@ 0x6f
 801d022:	18fb      	adds	r3, r7, r3
 801d024:	781b      	ldrb	r3, [r3, #0]
}
 801d026:	0018      	movs	r0, r3
 801d028:	46bd      	mov	sp, r7
 801d02a:	b01c      	add	sp, #112	@ 0x70
 801d02c:	bd80      	pop	{r7, pc}
 801d02e:	46c0      	nop			@ (mov r8, r8)
 801d030:	ffff8fbf 	.word	0xffff8fbf
 801d034:	ffff8080 	.word	0xffff8080
 801d038:	ffffbf8f 	.word	0xffffbf8f

0801d03c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b08c      	sub	sp, #48	@ 0x30
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
 801d044:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	7b1b      	ldrb	r3, [r3, #12]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d000      	beq.n	801d050 <USB_DeactivateEndpoint+0x14>
 801d04e:	e07e      	b.n	801d14e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	785b      	ldrb	r3, [r3, #1]
 801d054:	2b00      	cmp	r3, #0
 801d056:	d03c      	beq.n	801d0d2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d058:	687a      	ldr	r2, [r7, #4]
 801d05a:	683b      	ldr	r3, [r7, #0]
 801d05c:	781b      	ldrb	r3, [r3, #0]
 801d05e:	009b      	lsls	r3, r3, #2
 801d060:	18d2      	adds	r2, r2, r3
 801d062:	210c      	movs	r1, #12
 801d064:	187b      	adds	r3, r7, r1
 801d066:	8812      	ldrh	r2, [r2, #0]
 801d068:	801a      	strh	r2, [r3, #0]
 801d06a:	187b      	adds	r3, r7, r1
 801d06c:	881b      	ldrh	r3, [r3, #0]
 801d06e:	2240      	movs	r2, #64	@ 0x40
 801d070:	4013      	ands	r3, r2
 801d072:	d016      	beq.n	801d0a2 <USB_DeactivateEndpoint+0x66>
 801d074:	687a      	ldr	r2, [r7, #4]
 801d076:	683b      	ldr	r3, [r7, #0]
 801d078:	781b      	ldrb	r3, [r3, #0]
 801d07a:	009b      	lsls	r3, r3, #2
 801d07c:	18d3      	adds	r3, r2, r3
 801d07e:	881b      	ldrh	r3, [r3, #0]
 801d080:	b29a      	uxth	r2, r3
 801d082:	200a      	movs	r0, #10
 801d084:	183b      	adds	r3, r7, r0
 801d086:	49c7      	ldr	r1, [pc, #796]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d088:	400a      	ands	r2, r1
 801d08a:	801a      	strh	r2, [r3, #0]
 801d08c:	687a      	ldr	r2, [r7, #4]
 801d08e:	683b      	ldr	r3, [r7, #0]
 801d090:	781b      	ldrb	r3, [r3, #0]
 801d092:	009b      	lsls	r3, r3, #2
 801d094:	18d3      	adds	r3, r2, r3
 801d096:	183a      	adds	r2, r7, r0
 801d098:	8812      	ldrh	r2, [r2, #0]
 801d09a:	49c3      	ldr	r1, [pc, #780]	@ (801d3a8 <USB_DeactivateEndpoint+0x36c>)
 801d09c:	430a      	orrs	r2, r1
 801d09e:	b292      	uxth	r2, r2
 801d0a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d0a2:	687a      	ldr	r2, [r7, #4]
 801d0a4:	683b      	ldr	r3, [r7, #0]
 801d0a6:	781b      	ldrb	r3, [r3, #0]
 801d0a8:	009b      	lsls	r3, r3, #2
 801d0aa:	18d3      	adds	r3, r2, r3
 801d0ac:	881b      	ldrh	r3, [r3, #0]
 801d0ae:	b29a      	uxth	r2, r3
 801d0b0:	2008      	movs	r0, #8
 801d0b2:	183b      	adds	r3, r7, r0
 801d0b4:	49bd      	ldr	r1, [pc, #756]	@ (801d3ac <USB_DeactivateEndpoint+0x370>)
 801d0b6:	400a      	ands	r2, r1
 801d0b8:	801a      	strh	r2, [r3, #0]
 801d0ba:	687a      	ldr	r2, [r7, #4]
 801d0bc:	683b      	ldr	r3, [r7, #0]
 801d0be:	781b      	ldrb	r3, [r3, #0]
 801d0c0:	009b      	lsls	r3, r3, #2
 801d0c2:	18d3      	adds	r3, r2, r3
 801d0c4:	183a      	adds	r2, r7, r0
 801d0c6:	8812      	ldrh	r2, [r2, #0]
 801d0c8:	49b9      	ldr	r1, [pc, #740]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d0ca:	430a      	orrs	r2, r1
 801d0cc:	b292      	uxth	r2, r2
 801d0ce:	801a      	strh	r2, [r3, #0]
 801d0d0:	e163      	b.n	801d39a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d0d2:	687a      	ldr	r2, [r7, #4]
 801d0d4:	683b      	ldr	r3, [r7, #0]
 801d0d6:	781b      	ldrb	r3, [r3, #0]
 801d0d8:	009b      	lsls	r3, r3, #2
 801d0da:	18d2      	adds	r2, r2, r3
 801d0dc:	2112      	movs	r1, #18
 801d0de:	187b      	adds	r3, r7, r1
 801d0e0:	8812      	ldrh	r2, [r2, #0]
 801d0e2:	801a      	strh	r2, [r3, #0]
 801d0e4:	187b      	adds	r3, r7, r1
 801d0e6:	881a      	ldrh	r2, [r3, #0]
 801d0e8:	2380      	movs	r3, #128	@ 0x80
 801d0ea:	01db      	lsls	r3, r3, #7
 801d0ec:	4013      	ands	r3, r2
 801d0ee:	d016      	beq.n	801d11e <USB_DeactivateEndpoint+0xe2>
 801d0f0:	687a      	ldr	r2, [r7, #4]
 801d0f2:	683b      	ldr	r3, [r7, #0]
 801d0f4:	781b      	ldrb	r3, [r3, #0]
 801d0f6:	009b      	lsls	r3, r3, #2
 801d0f8:	18d3      	adds	r3, r2, r3
 801d0fa:	881b      	ldrh	r3, [r3, #0]
 801d0fc:	b29a      	uxth	r2, r3
 801d0fe:	2010      	movs	r0, #16
 801d100:	183b      	adds	r3, r7, r0
 801d102:	49a8      	ldr	r1, [pc, #672]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d104:	400a      	ands	r2, r1
 801d106:	801a      	strh	r2, [r3, #0]
 801d108:	687a      	ldr	r2, [r7, #4]
 801d10a:	683b      	ldr	r3, [r7, #0]
 801d10c:	781b      	ldrb	r3, [r3, #0]
 801d10e:	009b      	lsls	r3, r3, #2
 801d110:	18d3      	adds	r3, r2, r3
 801d112:	183a      	adds	r2, r7, r0
 801d114:	8812      	ldrh	r2, [r2, #0]
 801d116:	49a7      	ldr	r1, [pc, #668]	@ (801d3b4 <USB_DeactivateEndpoint+0x378>)
 801d118:	430a      	orrs	r2, r1
 801d11a:	b292      	uxth	r2, r2
 801d11c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d11e:	687a      	ldr	r2, [r7, #4]
 801d120:	683b      	ldr	r3, [r7, #0]
 801d122:	781b      	ldrb	r3, [r3, #0]
 801d124:	009b      	lsls	r3, r3, #2
 801d126:	18d3      	adds	r3, r2, r3
 801d128:	881b      	ldrh	r3, [r3, #0]
 801d12a:	b29a      	uxth	r2, r3
 801d12c:	200e      	movs	r0, #14
 801d12e:	183b      	adds	r3, r7, r0
 801d130:	49a1      	ldr	r1, [pc, #644]	@ (801d3b8 <USB_DeactivateEndpoint+0x37c>)
 801d132:	400a      	ands	r2, r1
 801d134:	801a      	strh	r2, [r3, #0]
 801d136:	687a      	ldr	r2, [r7, #4]
 801d138:	683b      	ldr	r3, [r7, #0]
 801d13a:	781b      	ldrb	r3, [r3, #0]
 801d13c:	009b      	lsls	r3, r3, #2
 801d13e:	18d3      	adds	r3, r2, r3
 801d140:	183a      	adds	r2, r7, r0
 801d142:	8812      	ldrh	r2, [r2, #0]
 801d144:	499a      	ldr	r1, [pc, #616]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d146:	430a      	orrs	r2, r1
 801d148:	b292      	uxth	r2, r2
 801d14a:	801a      	strh	r2, [r3, #0]
 801d14c:	e125      	b.n	801d39a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	785b      	ldrb	r3, [r3, #1]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d000      	beq.n	801d158 <USB_DeactivateEndpoint+0x11c>
 801d156:	e090      	b.n	801d27a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d158:	687a      	ldr	r2, [r7, #4]
 801d15a:	683b      	ldr	r3, [r7, #0]
 801d15c:	781b      	ldrb	r3, [r3, #0]
 801d15e:	009b      	lsls	r3, r3, #2
 801d160:	18d2      	adds	r2, r2, r3
 801d162:	2120      	movs	r1, #32
 801d164:	187b      	adds	r3, r7, r1
 801d166:	8812      	ldrh	r2, [r2, #0]
 801d168:	801a      	strh	r2, [r3, #0]
 801d16a:	187b      	adds	r3, r7, r1
 801d16c:	881a      	ldrh	r2, [r3, #0]
 801d16e:	2380      	movs	r3, #128	@ 0x80
 801d170:	01db      	lsls	r3, r3, #7
 801d172:	4013      	ands	r3, r2
 801d174:	d016      	beq.n	801d1a4 <USB_DeactivateEndpoint+0x168>
 801d176:	687a      	ldr	r2, [r7, #4]
 801d178:	683b      	ldr	r3, [r7, #0]
 801d17a:	781b      	ldrb	r3, [r3, #0]
 801d17c:	009b      	lsls	r3, r3, #2
 801d17e:	18d3      	adds	r3, r2, r3
 801d180:	881b      	ldrh	r3, [r3, #0]
 801d182:	b29a      	uxth	r2, r3
 801d184:	201e      	movs	r0, #30
 801d186:	183b      	adds	r3, r7, r0
 801d188:	4986      	ldr	r1, [pc, #536]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d18a:	400a      	ands	r2, r1
 801d18c:	801a      	strh	r2, [r3, #0]
 801d18e:	687a      	ldr	r2, [r7, #4]
 801d190:	683b      	ldr	r3, [r7, #0]
 801d192:	781b      	ldrb	r3, [r3, #0]
 801d194:	009b      	lsls	r3, r3, #2
 801d196:	18d3      	adds	r3, r2, r3
 801d198:	183a      	adds	r2, r7, r0
 801d19a:	8812      	ldrh	r2, [r2, #0]
 801d19c:	4985      	ldr	r1, [pc, #532]	@ (801d3b4 <USB_DeactivateEndpoint+0x378>)
 801d19e:	430a      	orrs	r2, r1
 801d1a0:	b292      	uxth	r2, r2
 801d1a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d1a4:	687a      	ldr	r2, [r7, #4]
 801d1a6:	683b      	ldr	r3, [r7, #0]
 801d1a8:	781b      	ldrb	r3, [r3, #0]
 801d1aa:	009b      	lsls	r3, r3, #2
 801d1ac:	18d2      	adds	r2, r2, r3
 801d1ae:	211c      	movs	r1, #28
 801d1b0:	187b      	adds	r3, r7, r1
 801d1b2:	8812      	ldrh	r2, [r2, #0]
 801d1b4:	801a      	strh	r2, [r3, #0]
 801d1b6:	187b      	adds	r3, r7, r1
 801d1b8:	881b      	ldrh	r3, [r3, #0]
 801d1ba:	2240      	movs	r2, #64	@ 0x40
 801d1bc:	4013      	ands	r3, r2
 801d1be:	d016      	beq.n	801d1ee <USB_DeactivateEndpoint+0x1b2>
 801d1c0:	687a      	ldr	r2, [r7, #4]
 801d1c2:	683b      	ldr	r3, [r7, #0]
 801d1c4:	781b      	ldrb	r3, [r3, #0]
 801d1c6:	009b      	lsls	r3, r3, #2
 801d1c8:	18d3      	adds	r3, r2, r3
 801d1ca:	881b      	ldrh	r3, [r3, #0]
 801d1cc:	b29a      	uxth	r2, r3
 801d1ce:	201a      	movs	r0, #26
 801d1d0:	183b      	adds	r3, r7, r0
 801d1d2:	4974      	ldr	r1, [pc, #464]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d1d4:	400a      	ands	r2, r1
 801d1d6:	801a      	strh	r2, [r3, #0]
 801d1d8:	687a      	ldr	r2, [r7, #4]
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	781b      	ldrb	r3, [r3, #0]
 801d1de:	009b      	lsls	r3, r3, #2
 801d1e0:	18d3      	adds	r3, r2, r3
 801d1e2:	183a      	adds	r2, r7, r0
 801d1e4:	8812      	ldrh	r2, [r2, #0]
 801d1e6:	4970      	ldr	r1, [pc, #448]	@ (801d3a8 <USB_DeactivateEndpoint+0x36c>)
 801d1e8:	430a      	orrs	r2, r1
 801d1ea:	b292      	uxth	r2, r2
 801d1ec:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801d1ee:	687a      	ldr	r2, [r7, #4]
 801d1f0:	683b      	ldr	r3, [r7, #0]
 801d1f2:	781b      	ldrb	r3, [r3, #0]
 801d1f4:	009b      	lsls	r3, r3, #2
 801d1f6:	18d3      	adds	r3, r2, r3
 801d1f8:	881b      	ldrh	r3, [r3, #0]
 801d1fa:	b29a      	uxth	r2, r3
 801d1fc:	2018      	movs	r0, #24
 801d1fe:	183b      	adds	r3, r7, r0
 801d200:	4968      	ldr	r1, [pc, #416]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d202:	400a      	ands	r2, r1
 801d204:	801a      	strh	r2, [r3, #0]
 801d206:	687a      	ldr	r2, [r7, #4]
 801d208:	683b      	ldr	r3, [r7, #0]
 801d20a:	781b      	ldrb	r3, [r3, #0]
 801d20c:	009b      	lsls	r3, r3, #2
 801d20e:	18d3      	adds	r3, r2, r3
 801d210:	183a      	adds	r2, r7, r0
 801d212:	8812      	ldrh	r2, [r2, #0]
 801d214:	4964      	ldr	r1, [pc, #400]	@ (801d3a8 <USB_DeactivateEndpoint+0x36c>)
 801d216:	430a      	orrs	r2, r1
 801d218:	b292      	uxth	r2, r2
 801d21a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d21c:	687a      	ldr	r2, [r7, #4]
 801d21e:	683b      	ldr	r3, [r7, #0]
 801d220:	781b      	ldrb	r3, [r3, #0]
 801d222:	009b      	lsls	r3, r3, #2
 801d224:	18d3      	adds	r3, r2, r3
 801d226:	881b      	ldrh	r3, [r3, #0]
 801d228:	b29a      	uxth	r2, r3
 801d22a:	2016      	movs	r0, #22
 801d22c:	183b      	adds	r3, r7, r0
 801d22e:	4962      	ldr	r1, [pc, #392]	@ (801d3b8 <USB_DeactivateEndpoint+0x37c>)
 801d230:	400a      	ands	r2, r1
 801d232:	801a      	strh	r2, [r3, #0]
 801d234:	687a      	ldr	r2, [r7, #4]
 801d236:	683b      	ldr	r3, [r7, #0]
 801d238:	781b      	ldrb	r3, [r3, #0]
 801d23a:	009b      	lsls	r3, r3, #2
 801d23c:	18d3      	adds	r3, r2, r3
 801d23e:	183a      	adds	r2, r7, r0
 801d240:	8812      	ldrh	r2, [r2, #0]
 801d242:	495b      	ldr	r1, [pc, #364]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d244:	430a      	orrs	r2, r1
 801d246:	b292      	uxth	r2, r2
 801d248:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d24a:	687a      	ldr	r2, [r7, #4]
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	781b      	ldrb	r3, [r3, #0]
 801d250:	009b      	lsls	r3, r3, #2
 801d252:	18d3      	adds	r3, r2, r3
 801d254:	881b      	ldrh	r3, [r3, #0]
 801d256:	b29a      	uxth	r2, r3
 801d258:	2014      	movs	r0, #20
 801d25a:	183b      	adds	r3, r7, r0
 801d25c:	4953      	ldr	r1, [pc, #332]	@ (801d3ac <USB_DeactivateEndpoint+0x370>)
 801d25e:	400a      	ands	r2, r1
 801d260:	801a      	strh	r2, [r3, #0]
 801d262:	687a      	ldr	r2, [r7, #4]
 801d264:	683b      	ldr	r3, [r7, #0]
 801d266:	781b      	ldrb	r3, [r3, #0]
 801d268:	009b      	lsls	r3, r3, #2
 801d26a:	18d3      	adds	r3, r2, r3
 801d26c:	183a      	adds	r2, r7, r0
 801d26e:	8812      	ldrh	r2, [r2, #0]
 801d270:	494f      	ldr	r1, [pc, #316]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d272:	430a      	orrs	r2, r1
 801d274:	b292      	uxth	r2, r2
 801d276:	801a      	strh	r2, [r3, #0]
 801d278:	e08f      	b.n	801d39a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d27a:	687a      	ldr	r2, [r7, #4]
 801d27c:	683b      	ldr	r3, [r7, #0]
 801d27e:	781b      	ldrb	r3, [r3, #0]
 801d280:	009b      	lsls	r3, r3, #2
 801d282:	18d2      	adds	r2, r2, r3
 801d284:	212e      	movs	r1, #46	@ 0x2e
 801d286:	187b      	adds	r3, r7, r1
 801d288:	8812      	ldrh	r2, [r2, #0]
 801d28a:	801a      	strh	r2, [r3, #0]
 801d28c:	187b      	adds	r3, r7, r1
 801d28e:	881a      	ldrh	r2, [r3, #0]
 801d290:	2380      	movs	r3, #128	@ 0x80
 801d292:	01db      	lsls	r3, r3, #7
 801d294:	4013      	ands	r3, r2
 801d296:	d016      	beq.n	801d2c6 <USB_DeactivateEndpoint+0x28a>
 801d298:	687a      	ldr	r2, [r7, #4]
 801d29a:	683b      	ldr	r3, [r7, #0]
 801d29c:	781b      	ldrb	r3, [r3, #0]
 801d29e:	009b      	lsls	r3, r3, #2
 801d2a0:	18d3      	adds	r3, r2, r3
 801d2a2:	881b      	ldrh	r3, [r3, #0]
 801d2a4:	b29a      	uxth	r2, r3
 801d2a6:	202c      	movs	r0, #44	@ 0x2c
 801d2a8:	183b      	adds	r3, r7, r0
 801d2aa:	493e      	ldr	r1, [pc, #248]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d2ac:	400a      	ands	r2, r1
 801d2ae:	801a      	strh	r2, [r3, #0]
 801d2b0:	687a      	ldr	r2, [r7, #4]
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	781b      	ldrb	r3, [r3, #0]
 801d2b6:	009b      	lsls	r3, r3, #2
 801d2b8:	18d3      	adds	r3, r2, r3
 801d2ba:	183a      	adds	r2, r7, r0
 801d2bc:	8812      	ldrh	r2, [r2, #0]
 801d2be:	493d      	ldr	r1, [pc, #244]	@ (801d3b4 <USB_DeactivateEndpoint+0x378>)
 801d2c0:	430a      	orrs	r2, r1
 801d2c2:	b292      	uxth	r2, r2
 801d2c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d2c6:	687a      	ldr	r2, [r7, #4]
 801d2c8:	683b      	ldr	r3, [r7, #0]
 801d2ca:	781b      	ldrb	r3, [r3, #0]
 801d2cc:	009b      	lsls	r3, r3, #2
 801d2ce:	18d2      	adds	r2, r2, r3
 801d2d0:	212a      	movs	r1, #42	@ 0x2a
 801d2d2:	187b      	adds	r3, r7, r1
 801d2d4:	8812      	ldrh	r2, [r2, #0]
 801d2d6:	801a      	strh	r2, [r3, #0]
 801d2d8:	187b      	adds	r3, r7, r1
 801d2da:	881b      	ldrh	r3, [r3, #0]
 801d2dc:	2240      	movs	r2, #64	@ 0x40
 801d2de:	4013      	ands	r3, r2
 801d2e0:	d016      	beq.n	801d310 <USB_DeactivateEndpoint+0x2d4>
 801d2e2:	687a      	ldr	r2, [r7, #4]
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	781b      	ldrb	r3, [r3, #0]
 801d2e8:	009b      	lsls	r3, r3, #2
 801d2ea:	18d3      	adds	r3, r2, r3
 801d2ec:	881b      	ldrh	r3, [r3, #0]
 801d2ee:	b29a      	uxth	r2, r3
 801d2f0:	2028      	movs	r0, #40	@ 0x28
 801d2f2:	183b      	adds	r3, r7, r0
 801d2f4:	492b      	ldr	r1, [pc, #172]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d2f6:	400a      	ands	r2, r1
 801d2f8:	801a      	strh	r2, [r3, #0]
 801d2fa:	687a      	ldr	r2, [r7, #4]
 801d2fc:	683b      	ldr	r3, [r7, #0]
 801d2fe:	781b      	ldrb	r3, [r3, #0]
 801d300:	009b      	lsls	r3, r3, #2
 801d302:	18d3      	adds	r3, r2, r3
 801d304:	183a      	adds	r2, r7, r0
 801d306:	8812      	ldrh	r2, [r2, #0]
 801d308:	4927      	ldr	r1, [pc, #156]	@ (801d3a8 <USB_DeactivateEndpoint+0x36c>)
 801d30a:	430a      	orrs	r2, r1
 801d30c:	b292      	uxth	r2, r2
 801d30e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801d310:	687a      	ldr	r2, [r7, #4]
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	781b      	ldrb	r3, [r3, #0]
 801d316:	009b      	lsls	r3, r3, #2
 801d318:	18d3      	adds	r3, r2, r3
 801d31a:	881b      	ldrh	r3, [r3, #0]
 801d31c:	b29a      	uxth	r2, r3
 801d31e:	2026      	movs	r0, #38	@ 0x26
 801d320:	183b      	adds	r3, r7, r0
 801d322:	4920      	ldr	r1, [pc, #128]	@ (801d3a4 <USB_DeactivateEndpoint+0x368>)
 801d324:	400a      	ands	r2, r1
 801d326:	801a      	strh	r2, [r3, #0]
 801d328:	687a      	ldr	r2, [r7, #4]
 801d32a:	683b      	ldr	r3, [r7, #0]
 801d32c:	781b      	ldrb	r3, [r3, #0]
 801d32e:	009b      	lsls	r3, r3, #2
 801d330:	18d3      	adds	r3, r2, r3
 801d332:	183a      	adds	r2, r7, r0
 801d334:	8812      	ldrh	r2, [r2, #0]
 801d336:	491f      	ldr	r1, [pc, #124]	@ (801d3b4 <USB_DeactivateEndpoint+0x378>)
 801d338:	430a      	orrs	r2, r1
 801d33a:	b292      	uxth	r2, r2
 801d33c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d33e:	687a      	ldr	r2, [r7, #4]
 801d340:	683b      	ldr	r3, [r7, #0]
 801d342:	781b      	ldrb	r3, [r3, #0]
 801d344:	009b      	lsls	r3, r3, #2
 801d346:	18d3      	adds	r3, r2, r3
 801d348:	881b      	ldrh	r3, [r3, #0]
 801d34a:	b29a      	uxth	r2, r3
 801d34c:	2024      	movs	r0, #36	@ 0x24
 801d34e:	183b      	adds	r3, r7, r0
 801d350:	4916      	ldr	r1, [pc, #88]	@ (801d3ac <USB_DeactivateEndpoint+0x370>)
 801d352:	400a      	ands	r2, r1
 801d354:	801a      	strh	r2, [r3, #0]
 801d356:	687a      	ldr	r2, [r7, #4]
 801d358:	683b      	ldr	r3, [r7, #0]
 801d35a:	781b      	ldrb	r3, [r3, #0]
 801d35c:	009b      	lsls	r3, r3, #2
 801d35e:	18d3      	adds	r3, r2, r3
 801d360:	183a      	adds	r2, r7, r0
 801d362:	8812      	ldrh	r2, [r2, #0]
 801d364:	4912      	ldr	r1, [pc, #72]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d366:	430a      	orrs	r2, r1
 801d368:	b292      	uxth	r2, r2
 801d36a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d36c:	687a      	ldr	r2, [r7, #4]
 801d36e:	683b      	ldr	r3, [r7, #0]
 801d370:	781b      	ldrb	r3, [r3, #0]
 801d372:	009b      	lsls	r3, r3, #2
 801d374:	18d3      	adds	r3, r2, r3
 801d376:	881b      	ldrh	r3, [r3, #0]
 801d378:	b29a      	uxth	r2, r3
 801d37a:	2022      	movs	r0, #34	@ 0x22
 801d37c:	183b      	adds	r3, r7, r0
 801d37e:	490e      	ldr	r1, [pc, #56]	@ (801d3b8 <USB_DeactivateEndpoint+0x37c>)
 801d380:	400a      	ands	r2, r1
 801d382:	801a      	strh	r2, [r3, #0]
 801d384:	687a      	ldr	r2, [r7, #4]
 801d386:	683b      	ldr	r3, [r7, #0]
 801d388:	781b      	ldrb	r3, [r3, #0]
 801d38a:	009b      	lsls	r3, r3, #2
 801d38c:	18d3      	adds	r3, r2, r3
 801d38e:	183a      	adds	r2, r7, r0
 801d390:	8812      	ldrh	r2, [r2, #0]
 801d392:	4907      	ldr	r1, [pc, #28]	@ (801d3b0 <USB_DeactivateEndpoint+0x374>)
 801d394:	430a      	orrs	r2, r1
 801d396:	b292      	uxth	r2, r2
 801d398:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801d39a:	2300      	movs	r3, #0
}
 801d39c:	0018      	movs	r0, r3
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	b00c      	add	sp, #48	@ 0x30
 801d3a2:	bd80      	pop	{r7, pc}
 801d3a4:	ffff8f8f 	.word	0xffff8f8f
 801d3a8:	ffff80c0 	.word	0xffff80c0
 801d3ac:	ffff8fbf 	.word	0xffff8fbf
 801d3b0:	ffff8080 	.word	0xffff8080
 801d3b4:	ffffc080 	.word	0xffffc080
 801d3b8:	ffffbf8f 	.word	0xffffbf8f

0801d3bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d3bc:	b590      	push	{r4, r7, lr}
 801d3be:	b0c3      	sub	sp, #268	@ 0x10c
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	6078      	str	r0, [r7, #4]
 801d3c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801d3c6:	683b      	ldr	r3, [r7, #0]
 801d3c8:	785b      	ldrb	r3, [r3, #1]
 801d3ca:	2b01      	cmp	r3, #1
 801d3cc:	d001      	beq.n	801d3d2 <USB_EPStartXfer+0x16>
 801d3ce:	f000 fd2d 	bl	801de2c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801d3d2:	683b      	ldr	r3, [r7, #0]
 801d3d4:	699a      	ldr	r2, [r3, #24]
 801d3d6:	683b      	ldr	r3, [r7, #0]
 801d3d8:	691b      	ldr	r3, [r3, #16]
 801d3da:	429a      	cmp	r2, r3
 801d3dc:	d905      	bls.n	801d3ea <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801d3de:	683b      	ldr	r3, [r7, #0]
 801d3e0:	691b      	ldr	r3, [r3, #16]
 801d3e2:	1d7a      	adds	r2, r7, #5
 801d3e4:	32ff      	adds	r2, #255	@ 0xff
 801d3e6:	6013      	str	r3, [r2, #0]
 801d3e8:	e004      	b.n	801d3f4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801d3ea:	683b      	ldr	r3, [r7, #0]
 801d3ec:	699b      	ldr	r3, [r3, #24]
 801d3ee:	1d7a      	adds	r2, r7, #5
 801d3f0:	32ff      	adds	r2, #255	@ 0xff
 801d3f2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801d3f4:	683b      	ldr	r3, [r7, #0]
 801d3f6:	7b1b      	ldrb	r3, [r3, #12]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d125      	bne.n	801d448 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801d3fc:	683b      	ldr	r3, [r7, #0]
 801d3fe:	6959      	ldr	r1, [r3, #20]
 801d400:	683b      	ldr	r3, [r7, #0]
 801d402:	88da      	ldrh	r2, [r3, #6]
 801d404:	1d7b      	adds	r3, r7, #5
 801d406:	33ff      	adds	r3, #255	@ 0xff
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	6878      	ldr	r0, [r7, #4]
 801d40e:	f001 fa47 	bl	801e8a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	613b      	str	r3, [r7, #16]
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	2250      	movs	r2, #80	@ 0x50
 801d41a:	5a9b      	ldrh	r3, [r3, r2]
 801d41c:	b29b      	uxth	r3, r3
 801d41e:	001a      	movs	r2, r3
 801d420:	693b      	ldr	r3, [r7, #16]
 801d422:	189b      	adds	r3, r3, r2
 801d424:	613b      	str	r3, [r7, #16]
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	781b      	ldrb	r3, [r3, #0]
 801d42a:	00da      	lsls	r2, r3, #3
 801d42c:	693b      	ldr	r3, [r7, #16]
 801d42e:	18d3      	adds	r3, r2, r3
 801d430:	4ad7      	ldr	r2, [pc, #860]	@ (801d790 <USB_EPStartXfer+0x3d4>)
 801d432:	4694      	mov	ip, r2
 801d434:	4463      	add	r3, ip
 801d436:	60fb      	str	r3, [r7, #12]
 801d438:	1d7b      	adds	r3, r7, #5
 801d43a:	33ff      	adds	r3, #255	@ 0xff
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	b29a      	uxth	r2, r3
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	801a      	strh	r2, [r3, #0]
 801d444:	f000 fccd 	bl	801dde2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801d448:	683b      	ldr	r3, [r7, #0]
 801d44a:	78db      	ldrb	r3, [r3, #3]
 801d44c:	2b02      	cmp	r3, #2
 801d44e:	d000      	beq.n	801d452 <USB_EPStartXfer+0x96>
 801d450:	e362      	b.n	801db18 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	6a1a      	ldr	r2, [r3, #32]
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	691b      	ldr	r3, [r3, #16]
 801d45a:	429a      	cmp	r2, r3
 801d45c:	d800      	bhi.n	801d460 <USB_EPStartXfer+0xa4>
 801d45e:	e309      	b.n	801da74 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801d460:	687a      	ldr	r2, [r7, #4]
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	781b      	ldrb	r3, [r3, #0]
 801d466:	009b      	lsls	r3, r3, #2
 801d468:	18d3      	adds	r3, r2, r3
 801d46a:	881b      	ldrh	r3, [r3, #0]
 801d46c:	b29a      	uxth	r2, r3
 801d46e:	2056      	movs	r0, #86	@ 0x56
 801d470:	183b      	adds	r3, r7, r0
 801d472:	49c8      	ldr	r1, [pc, #800]	@ (801d794 <USB_EPStartXfer+0x3d8>)
 801d474:	400a      	ands	r2, r1
 801d476:	801a      	strh	r2, [r3, #0]
 801d478:	687a      	ldr	r2, [r7, #4]
 801d47a:	683b      	ldr	r3, [r7, #0]
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	009b      	lsls	r3, r3, #2
 801d480:	18d3      	adds	r3, r2, r3
 801d482:	183a      	adds	r2, r7, r0
 801d484:	8812      	ldrh	r2, [r2, #0]
 801d486:	49c4      	ldr	r1, [pc, #784]	@ (801d798 <USB_EPStartXfer+0x3dc>)
 801d488:	430a      	orrs	r2, r1
 801d48a:	b292      	uxth	r2, r2
 801d48c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801d48e:	683b      	ldr	r3, [r7, #0]
 801d490:	6a1a      	ldr	r2, [r3, #32]
 801d492:	1d7b      	adds	r3, r7, #5
 801d494:	33ff      	adds	r3, #255	@ 0xff
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	1ad2      	subs	r2, r2, r3
 801d49a:	683b      	ldr	r3, [r7, #0]
 801d49c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801d49e:	687a      	ldr	r2, [r7, #4]
 801d4a0:	683b      	ldr	r3, [r7, #0]
 801d4a2:	781b      	ldrb	r3, [r3, #0]
 801d4a4:	009b      	lsls	r3, r3, #2
 801d4a6:	18d3      	adds	r3, r2, r3
 801d4a8:	881b      	ldrh	r3, [r3, #0]
 801d4aa:	b29b      	uxth	r3, r3
 801d4ac:	001a      	movs	r2, r3
 801d4ae:	2340      	movs	r3, #64	@ 0x40
 801d4b0:	4013      	ands	r3, r2
 801d4b2:	d100      	bne.n	801d4b6 <USB_EPStartXfer+0xfa>
 801d4b4:	e176      	b.n	801d7a4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	633b      	str	r3, [r7, #48]	@ 0x30
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	785b      	ldrb	r3, [r3, #1]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d000      	beq.n	801d4c4 <USB_EPStartXfer+0x108>
 801d4c2:	e074      	b.n	801d5ae <USB_EPStartXfer+0x1f2>
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2250      	movs	r2, #80	@ 0x50
 801d4cc:	5a9b      	ldrh	r3, [r3, r2]
 801d4ce:	b29b      	uxth	r3, r3
 801d4d0:	001a      	movs	r2, r3
 801d4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4d4:	189b      	adds	r3, r3, r2
 801d4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d4d8:	683b      	ldr	r3, [r7, #0]
 801d4da:	781b      	ldrb	r3, [r3, #0]
 801d4dc:	00da      	lsls	r2, r3, #3
 801d4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4e0:	18d3      	adds	r3, r2, r3
 801d4e2:	4aae      	ldr	r2, [pc, #696]	@ (801d79c <USB_EPStartXfer+0x3e0>)
 801d4e4:	4694      	mov	ip, r2
 801d4e6:	4463      	add	r3, ip
 801d4e8:	627b      	str	r3, [r7, #36]	@ 0x24
 801d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4ec:	881b      	ldrh	r3, [r3, #0]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	059b      	lsls	r3, r3, #22
 801d4f2:	0d9b      	lsrs	r3, r3, #22
 801d4f4:	b29a      	uxth	r2, r3
 801d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4f8:	801a      	strh	r2, [r3, #0]
 801d4fa:	1d7b      	adds	r3, r7, #5
 801d4fc:	33ff      	adds	r3, #255	@ 0xff
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	2b3e      	cmp	r3, #62	@ 0x3e
 801d502:	d924      	bls.n	801d54e <USB_EPStartXfer+0x192>
 801d504:	1d7b      	adds	r3, r7, #5
 801d506:	33ff      	adds	r3, #255	@ 0xff
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	095b      	lsrs	r3, r3, #5
 801d50c:	1c7a      	adds	r2, r7, #1
 801d50e:	32ff      	adds	r2, #255	@ 0xff
 801d510:	6013      	str	r3, [r2, #0]
 801d512:	1d7b      	adds	r3, r7, #5
 801d514:	33ff      	adds	r3, #255	@ 0xff
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	221f      	movs	r2, #31
 801d51a:	4013      	ands	r3, r2
 801d51c:	d106      	bne.n	801d52c <USB_EPStartXfer+0x170>
 801d51e:	1c7b      	adds	r3, r7, #1
 801d520:	33ff      	adds	r3, #255	@ 0xff
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	3b01      	subs	r3, #1
 801d526:	1c7a      	adds	r2, r7, #1
 801d528:	32ff      	adds	r2, #255	@ 0xff
 801d52a:	6013      	str	r3, [r2, #0]
 801d52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d52e:	881b      	ldrh	r3, [r3, #0]
 801d530:	b29a      	uxth	r2, r3
 801d532:	1c7b      	adds	r3, r7, #1
 801d534:	33ff      	adds	r3, #255	@ 0xff
 801d536:	681b      	ldr	r3, [r3, #0]
 801d538:	b29b      	uxth	r3, r3
 801d53a:	029b      	lsls	r3, r3, #10
 801d53c:	b29b      	uxth	r3, r3
 801d53e:	4313      	orrs	r3, r2
 801d540:	b29b      	uxth	r3, r3
 801d542:	4a97      	ldr	r2, [pc, #604]	@ (801d7a0 <USB_EPStartXfer+0x3e4>)
 801d544:	4313      	orrs	r3, r2
 801d546:	b29a      	uxth	r2, r3
 801d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d54a:	801a      	strh	r2, [r3, #0]
 801d54c:	e04a      	b.n	801d5e4 <USB_EPStartXfer+0x228>
 801d54e:	1d7b      	adds	r3, r7, #5
 801d550:	33ff      	adds	r3, #255	@ 0xff
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d108      	bne.n	801d56a <USB_EPStartXfer+0x1ae>
 801d558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d55a:	881b      	ldrh	r3, [r3, #0]
 801d55c:	b29b      	uxth	r3, r3
 801d55e:	4a90      	ldr	r2, [pc, #576]	@ (801d7a0 <USB_EPStartXfer+0x3e4>)
 801d560:	4313      	orrs	r3, r2
 801d562:	b29a      	uxth	r2, r3
 801d564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d566:	801a      	strh	r2, [r3, #0]
 801d568:	e03c      	b.n	801d5e4 <USB_EPStartXfer+0x228>
 801d56a:	1d7b      	adds	r3, r7, #5
 801d56c:	33ff      	adds	r3, #255	@ 0xff
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	085b      	lsrs	r3, r3, #1
 801d572:	1c7a      	adds	r2, r7, #1
 801d574:	32ff      	adds	r2, #255	@ 0xff
 801d576:	6013      	str	r3, [r2, #0]
 801d578:	1d7b      	adds	r3, r7, #5
 801d57a:	33ff      	adds	r3, #255	@ 0xff
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	2201      	movs	r2, #1
 801d580:	4013      	ands	r3, r2
 801d582:	d006      	beq.n	801d592 <USB_EPStartXfer+0x1d6>
 801d584:	1c7b      	adds	r3, r7, #1
 801d586:	33ff      	adds	r3, #255	@ 0xff
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	3301      	adds	r3, #1
 801d58c:	1c7a      	adds	r2, r7, #1
 801d58e:	32ff      	adds	r2, #255	@ 0xff
 801d590:	6013      	str	r3, [r2, #0]
 801d592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d594:	881b      	ldrh	r3, [r3, #0]
 801d596:	b29a      	uxth	r2, r3
 801d598:	1c7b      	adds	r3, r7, #1
 801d59a:	33ff      	adds	r3, #255	@ 0xff
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	b29b      	uxth	r3, r3
 801d5a0:	029b      	lsls	r3, r3, #10
 801d5a2:	b29b      	uxth	r3, r3
 801d5a4:	4313      	orrs	r3, r2
 801d5a6:	b29a      	uxth	r2, r3
 801d5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5aa:	801a      	strh	r2, [r3, #0]
 801d5ac:	e01a      	b.n	801d5e4 <USB_EPStartXfer+0x228>
 801d5ae:	683b      	ldr	r3, [r7, #0]
 801d5b0:	785b      	ldrb	r3, [r3, #1]
 801d5b2:	2b01      	cmp	r3, #1
 801d5b4:	d116      	bne.n	801d5e4 <USB_EPStartXfer+0x228>
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	2250      	movs	r2, #80	@ 0x50
 801d5ba:	5a9b      	ldrh	r3, [r3, r2]
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	001a      	movs	r2, r3
 801d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5c2:	189b      	adds	r3, r3, r2
 801d5c4:	633b      	str	r3, [r7, #48]	@ 0x30
 801d5c6:	683b      	ldr	r3, [r7, #0]
 801d5c8:	781b      	ldrb	r3, [r3, #0]
 801d5ca:	00da      	lsls	r2, r3, #3
 801d5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5ce:	18d3      	adds	r3, r2, r3
 801d5d0:	4a72      	ldr	r2, [pc, #456]	@ (801d79c <USB_EPStartXfer+0x3e0>)
 801d5d2:	4694      	mov	ip, r2
 801d5d4:	4463      	add	r3, ip
 801d5d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d5d8:	1d7b      	adds	r3, r7, #5
 801d5da:	33ff      	adds	r3, #255	@ 0xff
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	b29a      	uxth	r2, r3
 801d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801d5e4:	2076      	movs	r0, #118	@ 0x76
 801d5e6:	183b      	adds	r3, r7, r0
 801d5e8:	683a      	ldr	r2, [r7, #0]
 801d5ea:	8952      	ldrh	r2, [r2, #10]
 801d5ec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	6959      	ldr	r1, [r3, #20]
 801d5f2:	1d7b      	adds	r3, r7, #5
 801d5f4:	33ff      	adds	r3, #255	@ 0xff
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	b29c      	uxth	r4, r3
 801d5fa:	183b      	adds	r3, r7, r0
 801d5fc:	881a      	ldrh	r2, [r3, #0]
 801d5fe:	6878      	ldr	r0, [r7, #4]
 801d600:	0023      	movs	r3, r4
 801d602:	f001 f94d 	bl	801e8a0 <USB_WritePMA>
            ep->xfer_buff += len;
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	695a      	ldr	r2, [r3, #20]
 801d60a:	1d7b      	adds	r3, r7, #5
 801d60c:	33ff      	adds	r3, #255	@ 0xff
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	18d2      	adds	r2, r2, r3
 801d612:	683b      	ldr	r3, [r7, #0]
 801d614:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d616:	683b      	ldr	r3, [r7, #0]
 801d618:	6a1a      	ldr	r2, [r3, #32]
 801d61a:	683b      	ldr	r3, [r7, #0]
 801d61c:	691b      	ldr	r3, [r3, #16]
 801d61e:	429a      	cmp	r2, r3
 801d620:	d908      	bls.n	801d634 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801d622:	683b      	ldr	r3, [r7, #0]
 801d624:	6a1a      	ldr	r2, [r3, #32]
 801d626:	1d7b      	adds	r3, r7, #5
 801d628:	33ff      	adds	r3, #255	@ 0xff
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	1ad2      	subs	r2, r2, r3
 801d62e:	683b      	ldr	r3, [r7, #0]
 801d630:	621a      	str	r2, [r3, #32]
 801d632:	e007      	b.n	801d644 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801d634:	683b      	ldr	r3, [r7, #0]
 801d636:	6a1b      	ldr	r3, [r3, #32]
 801d638:	1d7a      	adds	r2, r7, #5
 801d63a:	32ff      	adds	r2, #255	@ 0xff
 801d63c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	2200      	movs	r2, #0
 801d642:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d644:	683b      	ldr	r3, [r7, #0]
 801d646:	785b      	ldrb	r3, [r3, #1]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d000      	beq.n	801d64e <USB_EPStartXfer+0x292>
 801d64c:	e070      	b.n	801d730 <USB_EPStartXfer+0x374>
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	61bb      	str	r3, [r7, #24]
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	2250      	movs	r2, #80	@ 0x50
 801d656:	5a9b      	ldrh	r3, [r3, r2]
 801d658:	b29b      	uxth	r3, r3
 801d65a:	001a      	movs	r2, r3
 801d65c:	69bb      	ldr	r3, [r7, #24]
 801d65e:	189b      	adds	r3, r3, r2
 801d660:	61bb      	str	r3, [r7, #24]
 801d662:	683b      	ldr	r3, [r7, #0]
 801d664:	781b      	ldrb	r3, [r3, #0]
 801d666:	00da      	lsls	r2, r3, #3
 801d668:	69bb      	ldr	r3, [r7, #24]
 801d66a:	18d3      	adds	r3, r2, r3
 801d66c:	4a48      	ldr	r2, [pc, #288]	@ (801d790 <USB_EPStartXfer+0x3d4>)
 801d66e:	4694      	mov	ip, r2
 801d670:	4463      	add	r3, ip
 801d672:	617b      	str	r3, [r7, #20]
 801d674:	697b      	ldr	r3, [r7, #20]
 801d676:	881b      	ldrh	r3, [r3, #0]
 801d678:	b29b      	uxth	r3, r3
 801d67a:	059b      	lsls	r3, r3, #22
 801d67c:	0d9b      	lsrs	r3, r3, #22
 801d67e:	b29a      	uxth	r2, r3
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	801a      	strh	r2, [r3, #0]
 801d684:	1d7b      	adds	r3, r7, #5
 801d686:	33ff      	adds	r3, #255	@ 0xff
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	2b3e      	cmp	r3, #62	@ 0x3e
 801d68c:	d922      	bls.n	801d6d4 <USB_EPStartXfer+0x318>
 801d68e:	1d7b      	adds	r3, r7, #5
 801d690:	33ff      	adds	r3, #255	@ 0xff
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	095b      	lsrs	r3, r3, #5
 801d696:	21fc      	movs	r1, #252	@ 0xfc
 801d698:	187a      	adds	r2, r7, r1
 801d69a:	6013      	str	r3, [r2, #0]
 801d69c:	1d7b      	adds	r3, r7, #5
 801d69e:	33ff      	adds	r3, #255	@ 0xff
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	221f      	movs	r2, #31
 801d6a4:	4013      	ands	r3, r2
 801d6a6:	d104      	bne.n	801d6b2 <USB_EPStartXfer+0x2f6>
 801d6a8:	187b      	adds	r3, r7, r1
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	3b01      	subs	r3, #1
 801d6ae:	187a      	adds	r2, r7, r1
 801d6b0:	6013      	str	r3, [r2, #0]
 801d6b2:	697b      	ldr	r3, [r7, #20]
 801d6b4:	881b      	ldrh	r3, [r3, #0]
 801d6b6:	b29a      	uxth	r2, r3
 801d6b8:	23fc      	movs	r3, #252	@ 0xfc
 801d6ba:	18fb      	adds	r3, r7, r3
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	029b      	lsls	r3, r3, #10
 801d6c2:	b29b      	uxth	r3, r3
 801d6c4:	4313      	orrs	r3, r2
 801d6c6:	b29b      	uxth	r3, r3
 801d6c8:	4a35      	ldr	r2, [pc, #212]	@ (801d7a0 <USB_EPStartXfer+0x3e4>)
 801d6ca:	4313      	orrs	r3, r2
 801d6cc:	b29a      	uxth	r2, r3
 801d6ce:	697b      	ldr	r3, [r7, #20]
 801d6d0:	801a      	strh	r2, [r3, #0]
 801d6d2:	e04a      	b.n	801d76a <USB_EPStartXfer+0x3ae>
 801d6d4:	1d7b      	adds	r3, r7, #5
 801d6d6:	33ff      	adds	r3, #255	@ 0xff
 801d6d8:	681b      	ldr	r3, [r3, #0]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d108      	bne.n	801d6f0 <USB_EPStartXfer+0x334>
 801d6de:	697b      	ldr	r3, [r7, #20]
 801d6e0:	881b      	ldrh	r3, [r3, #0]
 801d6e2:	b29b      	uxth	r3, r3
 801d6e4:	4a2e      	ldr	r2, [pc, #184]	@ (801d7a0 <USB_EPStartXfer+0x3e4>)
 801d6e6:	4313      	orrs	r3, r2
 801d6e8:	b29a      	uxth	r2, r3
 801d6ea:	697b      	ldr	r3, [r7, #20]
 801d6ec:	801a      	strh	r2, [r3, #0]
 801d6ee:	e03c      	b.n	801d76a <USB_EPStartXfer+0x3ae>
 801d6f0:	1d7b      	adds	r3, r7, #5
 801d6f2:	33ff      	adds	r3, #255	@ 0xff
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	085b      	lsrs	r3, r3, #1
 801d6f8:	21fc      	movs	r1, #252	@ 0xfc
 801d6fa:	187a      	adds	r2, r7, r1
 801d6fc:	6013      	str	r3, [r2, #0]
 801d6fe:	1d7b      	adds	r3, r7, #5
 801d700:	33ff      	adds	r3, #255	@ 0xff
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	2201      	movs	r2, #1
 801d706:	4013      	ands	r3, r2
 801d708:	d004      	beq.n	801d714 <USB_EPStartXfer+0x358>
 801d70a:	187b      	adds	r3, r7, r1
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	3301      	adds	r3, #1
 801d710:	187a      	adds	r2, r7, r1
 801d712:	6013      	str	r3, [r2, #0]
 801d714:	697b      	ldr	r3, [r7, #20]
 801d716:	881b      	ldrh	r3, [r3, #0]
 801d718:	b29a      	uxth	r2, r3
 801d71a:	23fc      	movs	r3, #252	@ 0xfc
 801d71c:	18fb      	adds	r3, r7, r3
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	b29b      	uxth	r3, r3
 801d722:	029b      	lsls	r3, r3, #10
 801d724:	b29b      	uxth	r3, r3
 801d726:	4313      	orrs	r3, r2
 801d728:	b29a      	uxth	r2, r3
 801d72a:	697b      	ldr	r3, [r7, #20]
 801d72c:	801a      	strh	r2, [r3, #0]
 801d72e:	e01c      	b.n	801d76a <USB_EPStartXfer+0x3ae>
 801d730:	683b      	ldr	r3, [r7, #0]
 801d732:	785b      	ldrb	r3, [r3, #1]
 801d734:	2b01      	cmp	r3, #1
 801d736:	d118      	bne.n	801d76a <USB_EPStartXfer+0x3ae>
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	623b      	str	r3, [r7, #32]
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	2250      	movs	r2, #80	@ 0x50
 801d740:	5a9b      	ldrh	r3, [r3, r2]
 801d742:	b29b      	uxth	r3, r3
 801d744:	001a      	movs	r2, r3
 801d746:	6a3b      	ldr	r3, [r7, #32]
 801d748:	189b      	adds	r3, r3, r2
 801d74a:	623b      	str	r3, [r7, #32]
 801d74c:	683b      	ldr	r3, [r7, #0]
 801d74e:	781b      	ldrb	r3, [r3, #0]
 801d750:	00da      	lsls	r2, r3, #3
 801d752:	6a3b      	ldr	r3, [r7, #32]
 801d754:	18d3      	adds	r3, r2, r3
 801d756:	4a0e      	ldr	r2, [pc, #56]	@ (801d790 <USB_EPStartXfer+0x3d4>)
 801d758:	4694      	mov	ip, r2
 801d75a:	4463      	add	r3, ip
 801d75c:	61fb      	str	r3, [r7, #28]
 801d75e:	1d7b      	adds	r3, r7, #5
 801d760:	33ff      	adds	r3, #255	@ 0xff
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	b29a      	uxth	r2, r3
 801d766:	69fb      	ldr	r3, [r7, #28]
 801d768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d76a:	2076      	movs	r0, #118	@ 0x76
 801d76c:	183b      	adds	r3, r7, r0
 801d76e:	683a      	ldr	r2, [r7, #0]
 801d770:	8912      	ldrh	r2, [r2, #8]
 801d772:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d774:	683b      	ldr	r3, [r7, #0]
 801d776:	6959      	ldr	r1, [r3, #20]
 801d778:	1d7b      	adds	r3, r7, #5
 801d77a:	33ff      	adds	r3, #255	@ 0xff
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	b29c      	uxth	r4, r3
 801d780:	183b      	adds	r3, r7, r0
 801d782:	881a      	ldrh	r2, [r3, #0]
 801d784:	6878      	ldr	r0, [r7, #4]
 801d786:	0023      	movs	r3, r4
 801d788:	f001 f88a 	bl	801e8a0 <USB_WritePMA>
 801d78c:	e329      	b.n	801dde2 <USB_EPStartXfer+0xa26>
 801d78e:	46c0      	nop			@ (mov r8, r8)
 801d790:	00000402 	.word	0x00000402
 801d794:	ffff8f8f 	.word	0xffff8f8f
 801d798:	ffff8180 	.word	0xffff8180
 801d79c:	00000406 	.word	0x00000406
 801d7a0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d7a4:	683b      	ldr	r3, [r7, #0]
 801d7a6:	785b      	ldrb	r3, [r3, #1]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d000      	beq.n	801d7ae <USB_EPStartXfer+0x3f2>
 801d7ac:	e070      	b.n	801d890 <USB_EPStartXfer+0x4d4>
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	2250      	movs	r2, #80	@ 0x50
 801d7b6:	5a9b      	ldrh	r3, [r3, r2]
 801d7b8:	b29b      	uxth	r3, r3
 801d7ba:	001a      	movs	r2, r3
 801d7bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d7be:	189b      	adds	r3, r3, r2
 801d7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	781b      	ldrb	r3, [r3, #0]
 801d7c6:	00da      	lsls	r2, r3, #3
 801d7c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d7ca:	18d3      	adds	r3, r2, r3
 801d7cc:	4acd      	ldr	r2, [pc, #820]	@ (801db04 <USB_EPStartXfer+0x748>)
 801d7ce:	4694      	mov	ip, r2
 801d7d0:	4463      	add	r3, ip
 801d7d2:	647b      	str	r3, [r7, #68]	@ 0x44
 801d7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d7d6:	881b      	ldrh	r3, [r3, #0]
 801d7d8:	b29b      	uxth	r3, r3
 801d7da:	059b      	lsls	r3, r3, #22
 801d7dc:	0d9b      	lsrs	r3, r3, #22
 801d7de:	b29a      	uxth	r2, r3
 801d7e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d7e2:	801a      	strh	r2, [r3, #0]
 801d7e4:	1d7b      	adds	r3, r7, #5
 801d7e6:	33ff      	adds	r3, #255	@ 0xff
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	2b3e      	cmp	r3, #62	@ 0x3e
 801d7ec:	d922      	bls.n	801d834 <USB_EPStartXfer+0x478>
 801d7ee:	1d7b      	adds	r3, r7, #5
 801d7f0:	33ff      	adds	r3, #255	@ 0xff
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	095b      	lsrs	r3, r3, #5
 801d7f6:	21f8      	movs	r1, #248	@ 0xf8
 801d7f8:	187a      	adds	r2, r7, r1
 801d7fa:	6013      	str	r3, [r2, #0]
 801d7fc:	1d7b      	adds	r3, r7, #5
 801d7fe:	33ff      	adds	r3, #255	@ 0xff
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	221f      	movs	r2, #31
 801d804:	4013      	ands	r3, r2
 801d806:	d104      	bne.n	801d812 <USB_EPStartXfer+0x456>
 801d808:	187b      	adds	r3, r7, r1
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	3b01      	subs	r3, #1
 801d80e:	187a      	adds	r2, r7, r1
 801d810:	6013      	str	r3, [r2, #0]
 801d812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d814:	881b      	ldrh	r3, [r3, #0]
 801d816:	b29a      	uxth	r2, r3
 801d818:	23f8      	movs	r3, #248	@ 0xf8
 801d81a:	18fb      	adds	r3, r7, r3
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	b29b      	uxth	r3, r3
 801d820:	029b      	lsls	r3, r3, #10
 801d822:	b29b      	uxth	r3, r3
 801d824:	4313      	orrs	r3, r2
 801d826:	b29b      	uxth	r3, r3
 801d828:	4ab7      	ldr	r2, [pc, #732]	@ (801db08 <USB_EPStartXfer+0x74c>)
 801d82a:	4313      	orrs	r3, r2
 801d82c:	b29a      	uxth	r2, r3
 801d82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d830:	801a      	strh	r2, [r3, #0]
 801d832:	e04a      	b.n	801d8ca <USB_EPStartXfer+0x50e>
 801d834:	1d7b      	adds	r3, r7, #5
 801d836:	33ff      	adds	r3, #255	@ 0xff
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d108      	bne.n	801d850 <USB_EPStartXfer+0x494>
 801d83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d840:	881b      	ldrh	r3, [r3, #0]
 801d842:	b29b      	uxth	r3, r3
 801d844:	4ab0      	ldr	r2, [pc, #704]	@ (801db08 <USB_EPStartXfer+0x74c>)
 801d846:	4313      	orrs	r3, r2
 801d848:	b29a      	uxth	r2, r3
 801d84a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d84c:	801a      	strh	r2, [r3, #0]
 801d84e:	e03c      	b.n	801d8ca <USB_EPStartXfer+0x50e>
 801d850:	1d7b      	adds	r3, r7, #5
 801d852:	33ff      	adds	r3, #255	@ 0xff
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	085b      	lsrs	r3, r3, #1
 801d858:	21f8      	movs	r1, #248	@ 0xf8
 801d85a:	187a      	adds	r2, r7, r1
 801d85c:	6013      	str	r3, [r2, #0]
 801d85e:	1d7b      	adds	r3, r7, #5
 801d860:	33ff      	adds	r3, #255	@ 0xff
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	2201      	movs	r2, #1
 801d866:	4013      	ands	r3, r2
 801d868:	d004      	beq.n	801d874 <USB_EPStartXfer+0x4b8>
 801d86a:	187b      	adds	r3, r7, r1
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	3301      	adds	r3, #1
 801d870:	187a      	adds	r2, r7, r1
 801d872:	6013      	str	r3, [r2, #0]
 801d874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d876:	881b      	ldrh	r3, [r3, #0]
 801d878:	b29a      	uxth	r2, r3
 801d87a:	23f8      	movs	r3, #248	@ 0xf8
 801d87c:	18fb      	adds	r3, r7, r3
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	b29b      	uxth	r3, r3
 801d882:	029b      	lsls	r3, r3, #10
 801d884:	b29b      	uxth	r3, r3
 801d886:	4313      	orrs	r3, r2
 801d888:	b29a      	uxth	r2, r3
 801d88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d88c:	801a      	strh	r2, [r3, #0]
 801d88e:	e01c      	b.n	801d8ca <USB_EPStartXfer+0x50e>
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	785b      	ldrb	r3, [r3, #1]
 801d894:	2b01      	cmp	r3, #1
 801d896:	d118      	bne.n	801d8ca <USB_EPStartXfer+0x50e>
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	653b      	str	r3, [r7, #80]	@ 0x50
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	2250      	movs	r2, #80	@ 0x50
 801d8a0:	5a9b      	ldrh	r3, [r3, r2]
 801d8a2:	b29b      	uxth	r3, r3
 801d8a4:	001a      	movs	r2, r3
 801d8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d8a8:	189b      	adds	r3, r3, r2
 801d8aa:	653b      	str	r3, [r7, #80]	@ 0x50
 801d8ac:	683b      	ldr	r3, [r7, #0]
 801d8ae:	781b      	ldrb	r3, [r3, #0]
 801d8b0:	00da      	lsls	r2, r3, #3
 801d8b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d8b4:	18d3      	adds	r3, r2, r3
 801d8b6:	4a93      	ldr	r2, [pc, #588]	@ (801db04 <USB_EPStartXfer+0x748>)
 801d8b8:	4694      	mov	ip, r2
 801d8ba:	4463      	add	r3, ip
 801d8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d8be:	1d7b      	adds	r3, r7, #5
 801d8c0:	33ff      	adds	r3, #255	@ 0xff
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	b29a      	uxth	r2, r3
 801d8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d8ca:	2076      	movs	r0, #118	@ 0x76
 801d8cc:	183b      	adds	r3, r7, r0
 801d8ce:	683a      	ldr	r2, [r7, #0]
 801d8d0:	8912      	ldrh	r2, [r2, #8]
 801d8d2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	6959      	ldr	r1, [r3, #20]
 801d8d8:	1d7b      	adds	r3, r7, #5
 801d8da:	33ff      	adds	r3, #255	@ 0xff
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	b29c      	uxth	r4, r3
 801d8e0:	183b      	adds	r3, r7, r0
 801d8e2:	881a      	ldrh	r2, [r3, #0]
 801d8e4:	6878      	ldr	r0, [r7, #4]
 801d8e6:	0023      	movs	r3, r4
 801d8e8:	f000 ffda 	bl	801e8a0 <USB_WritePMA>
            ep->xfer_buff += len;
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	695a      	ldr	r2, [r3, #20]
 801d8f0:	1d7b      	adds	r3, r7, #5
 801d8f2:	33ff      	adds	r3, #255	@ 0xff
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	18d2      	adds	r2, r2, r3
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	6a1a      	ldr	r2, [r3, #32]
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	691b      	ldr	r3, [r3, #16]
 801d904:	429a      	cmp	r2, r3
 801d906:	d908      	bls.n	801d91a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801d908:	683b      	ldr	r3, [r7, #0]
 801d90a:	6a1a      	ldr	r2, [r3, #32]
 801d90c:	1d7b      	adds	r3, r7, #5
 801d90e:	33ff      	adds	r3, #255	@ 0xff
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	1ad2      	subs	r2, r2, r3
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	621a      	str	r2, [r3, #32]
 801d918:	e007      	b.n	801d92a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801d91a:	683b      	ldr	r3, [r7, #0]
 801d91c:	6a1b      	ldr	r3, [r3, #32]
 801d91e:	1d7a      	adds	r2, r7, #5
 801d920:	32ff      	adds	r2, #255	@ 0xff
 801d922:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d924:	683b      	ldr	r3, [r7, #0]
 801d926:	2200      	movs	r2, #0
 801d928:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	643b      	str	r3, [r7, #64]	@ 0x40
 801d92e:	683b      	ldr	r3, [r7, #0]
 801d930:	785b      	ldrb	r3, [r3, #1]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d000      	beq.n	801d938 <USB_EPStartXfer+0x57c>
 801d936:	e070      	b.n	801da1a <USB_EPStartXfer+0x65e>
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	2250      	movs	r2, #80	@ 0x50
 801d940:	5a9b      	ldrh	r3, [r3, r2]
 801d942:	b29b      	uxth	r3, r3
 801d944:	001a      	movs	r2, r3
 801d946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d948:	189b      	adds	r3, r3, r2
 801d94a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d94c:	683b      	ldr	r3, [r7, #0]
 801d94e:	781b      	ldrb	r3, [r3, #0]
 801d950:	00da      	lsls	r2, r3, #3
 801d952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d954:	18d3      	adds	r3, r2, r3
 801d956:	4a6d      	ldr	r2, [pc, #436]	@ (801db0c <USB_EPStartXfer+0x750>)
 801d958:	4694      	mov	ip, r2
 801d95a:	4463      	add	r3, ip
 801d95c:	637b      	str	r3, [r7, #52]	@ 0x34
 801d95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d960:	881b      	ldrh	r3, [r3, #0]
 801d962:	b29b      	uxth	r3, r3
 801d964:	059b      	lsls	r3, r3, #22
 801d966:	0d9b      	lsrs	r3, r3, #22
 801d968:	b29a      	uxth	r2, r3
 801d96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d96c:	801a      	strh	r2, [r3, #0]
 801d96e:	1d7b      	adds	r3, r7, #5
 801d970:	33ff      	adds	r3, #255	@ 0xff
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	2b3e      	cmp	r3, #62	@ 0x3e
 801d976:	d922      	bls.n	801d9be <USB_EPStartXfer+0x602>
 801d978:	1d7b      	adds	r3, r7, #5
 801d97a:	33ff      	adds	r3, #255	@ 0xff
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	095b      	lsrs	r3, r3, #5
 801d980:	21f4      	movs	r1, #244	@ 0xf4
 801d982:	187a      	adds	r2, r7, r1
 801d984:	6013      	str	r3, [r2, #0]
 801d986:	1d7b      	adds	r3, r7, #5
 801d988:	33ff      	adds	r3, #255	@ 0xff
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	221f      	movs	r2, #31
 801d98e:	4013      	ands	r3, r2
 801d990:	d104      	bne.n	801d99c <USB_EPStartXfer+0x5e0>
 801d992:	187b      	adds	r3, r7, r1
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	3b01      	subs	r3, #1
 801d998:	187a      	adds	r2, r7, r1
 801d99a:	6013      	str	r3, [r2, #0]
 801d99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d99e:	881b      	ldrh	r3, [r3, #0]
 801d9a0:	b29a      	uxth	r2, r3
 801d9a2:	23f4      	movs	r3, #244	@ 0xf4
 801d9a4:	18fb      	adds	r3, r7, r3
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	029b      	lsls	r3, r3, #10
 801d9ac:	b29b      	uxth	r3, r3
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	b29b      	uxth	r3, r3
 801d9b2:	4a55      	ldr	r2, [pc, #340]	@ (801db08 <USB_EPStartXfer+0x74c>)
 801d9b4:	4313      	orrs	r3, r2
 801d9b6:	b29a      	uxth	r2, r3
 801d9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9ba:	801a      	strh	r2, [r3, #0]
 801d9bc:	e048      	b.n	801da50 <USB_EPStartXfer+0x694>
 801d9be:	1d7b      	adds	r3, r7, #5
 801d9c0:	33ff      	adds	r3, #255	@ 0xff
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d108      	bne.n	801d9da <USB_EPStartXfer+0x61e>
 801d9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9ca:	881b      	ldrh	r3, [r3, #0]
 801d9cc:	b29b      	uxth	r3, r3
 801d9ce:	4a4e      	ldr	r2, [pc, #312]	@ (801db08 <USB_EPStartXfer+0x74c>)
 801d9d0:	4313      	orrs	r3, r2
 801d9d2:	b29a      	uxth	r2, r3
 801d9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9d6:	801a      	strh	r2, [r3, #0]
 801d9d8:	e03a      	b.n	801da50 <USB_EPStartXfer+0x694>
 801d9da:	1d7b      	adds	r3, r7, #5
 801d9dc:	33ff      	adds	r3, #255	@ 0xff
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	085b      	lsrs	r3, r3, #1
 801d9e2:	21f4      	movs	r1, #244	@ 0xf4
 801d9e4:	187a      	adds	r2, r7, r1
 801d9e6:	6013      	str	r3, [r2, #0]
 801d9e8:	1d7b      	adds	r3, r7, #5
 801d9ea:	33ff      	adds	r3, #255	@ 0xff
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	2201      	movs	r2, #1
 801d9f0:	4013      	ands	r3, r2
 801d9f2:	d004      	beq.n	801d9fe <USB_EPStartXfer+0x642>
 801d9f4:	187b      	adds	r3, r7, r1
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	3301      	adds	r3, #1
 801d9fa:	187a      	adds	r2, r7, r1
 801d9fc:	6013      	str	r3, [r2, #0]
 801d9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da00:	881b      	ldrh	r3, [r3, #0]
 801da02:	b29a      	uxth	r2, r3
 801da04:	23f4      	movs	r3, #244	@ 0xf4
 801da06:	18fb      	adds	r3, r7, r3
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	b29b      	uxth	r3, r3
 801da0c:	029b      	lsls	r3, r3, #10
 801da0e:	b29b      	uxth	r3, r3
 801da10:	4313      	orrs	r3, r2
 801da12:	b29a      	uxth	r2, r3
 801da14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da16:	801a      	strh	r2, [r3, #0]
 801da18:	e01a      	b.n	801da50 <USB_EPStartXfer+0x694>
 801da1a:	683b      	ldr	r3, [r7, #0]
 801da1c:	785b      	ldrb	r3, [r3, #1]
 801da1e:	2b01      	cmp	r3, #1
 801da20:	d116      	bne.n	801da50 <USB_EPStartXfer+0x694>
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	2250      	movs	r2, #80	@ 0x50
 801da26:	5a9b      	ldrh	r3, [r3, r2]
 801da28:	b29b      	uxth	r3, r3
 801da2a:	001a      	movs	r2, r3
 801da2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da2e:	189b      	adds	r3, r3, r2
 801da30:	643b      	str	r3, [r7, #64]	@ 0x40
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	781b      	ldrb	r3, [r3, #0]
 801da36:	00da      	lsls	r2, r3, #3
 801da38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801da3a:	18d3      	adds	r3, r2, r3
 801da3c:	4a33      	ldr	r2, [pc, #204]	@ (801db0c <USB_EPStartXfer+0x750>)
 801da3e:	4694      	mov	ip, r2
 801da40:	4463      	add	r3, ip
 801da42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801da44:	1d7b      	adds	r3, r7, #5
 801da46:	33ff      	adds	r3, #255	@ 0xff
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	b29a      	uxth	r2, r3
 801da4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801da50:	2076      	movs	r0, #118	@ 0x76
 801da52:	183b      	adds	r3, r7, r0
 801da54:	683a      	ldr	r2, [r7, #0]
 801da56:	8952      	ldrh	r2, [r2, #10]
 801da58:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801da5a:	683b      	ldr	r3, [r7, #0]
 801da5c:	6959      	ldr	r1, [r3, #20]
 801da5e:	1d7b      	adds	r3, r7, #5
 801da60:	33ff      	adds	r3, #255	@ 0xff
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	b29c      	uxth	r4, r3
 801da66:	183b      	adds	r3, r7, r0
 801da68:	881a      	ldrh	r2, [r3, #0]
 801da6a:	6878      	ldr	r0, [r7, #4]
 801da6c:	0023      	movs	r3, r4
 801da6e:	f000 ff17 	bl	801e8a0 <USB_WritePMA>
 801da72:	e1b6      	b.n	801dde2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	6a1b      	ldr	r3, [r3, #32]
 801da78:	1d7a      	adds	r2, r7, #5
 801da7a:	32ff      	adds	r2, #255	@ 0xff
 801da7c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801da7e:	687a      	ldr	r2, [r7, #4]
 801da80:	683b      	ldr	r3, [r7, #0]
 801da82:	781b      	ldrb	r3, [r3, #0]
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	18d3      	adds	r3, r2, r3
 801da88:	881b      	ldrh	r3, [r3, #0]
 801da8a:	b29a      	uxth	r2, r3
 801da8c:	2062      	movs	r0, #98	@ 0x62
 801da8e:	183b      	adds	r3, r7, r0
 801da90:	491f      	ldr	r1, [pc, #124]	@ (801db10 <USB_EPStartXfer+0x754>)
 801da92:	400a      	ands	r2, r1
 801da94:	801a      	strh	r2, [r3, #0]
 801da96:	687a      	ldr	r2, [r7, #4]
 801da98:	683b      	ldr	r3, [r7, #0]
 801da9a:	781b      	ldrb	r3, [r3, #0]
 801da9c:	009b      	lsls	r3, r3, #2
 801da9e:	18d3      	adds	r3, r2, r3
 801daa0:	183a      	adds	r2, r7, r0
 801daa2:	8812      	ldrh	r2, [r2, #0]
 801daa4:	491b      	ldr	r1, [pc, #108]	@ (801db14 <USB_EPStartXfer+0x758>)
 801daa6:	430a      	orrs	r2, r1
 801daa8:	b292      	uxth	r2, r2
 801daaa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	2250      	movs	r2, #80	@ 0x50
 801dab4:	5a9b      	ldrh	r3, [r3, r2]
 801dab6:	b29b      	uxth	r3, r3
 801dab8:	001a      	movs	r2, r3
 801daba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dabc:	189b      	adds	r3, r3, r2
 801dabe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801dac0:	683b      	ldr	r3, [r7, #0]
 801dac2:	781b      	ldrb	r3, [r3, #0]
 801dac4:	00da      	lsls	r2, r3, #3
 801dac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801dac8:	18d3      	adds	r3, r2, r3
 801daca:	4a0e      	ldr	r2, [pc, #56]	@ (801db04 <USB_EPStartXfer+0x748>)
 801dacc:	4694      	mov	ip, r2
 801dace:	4463      	add	r3, ip
 801dad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801dad2:	1d7b      	adds	r3, r7, #5
 801dad4:	33ff      	adds	r3, #255	@ 0xff
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	b29a      	uxth	r2, r3
 801dada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dadc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801dade:	2076      	movs	r0, #118	@ 0x76
 801dae0:	183b      	adds	r3, r7, r0
 801dae2:	683a      	ldr	r2, [r7, #0]
 801dae4:	8912      	ldrh	r2, [r2, #8]
 801dae6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dae8:	683b      	ldr	r3, [r7, #0]
 801daea:	6959      	ldr	r1, [r3, #20]
 801daec:	1d7b      	adds	r3, r7, #5
 801daee:	33ff      	adds	r3, #255	@ 0xff
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	b29c      	uxth	r4, r3
 801daf4:	183b      	adds	r3, r7, r0
 801daf6:	881a      	ldrh	r2, [r3, #0]
 801daf8:	6878      	ldr	r0, [r7, #4]
 801dafa:	0023      	movs	r3, r4
 801dafc:	f000 fed0 	bl	801e8a0 <USB_WritePMA>
 801db00:	e16f      	b.n	801dde2 <USB_EPStartXfer+0xa26>
 801db02:	46c0      	nop			@ (mov r8, r8)
 801db04:	00000402 	.word	0x00000402
 801db08:	ffff8000 	.word	0xffff8000
 801db0c:	00000406 	.word	0x00000406
 801db10:	ffff8e8f 	.word	0xffff8e8f
 801db14:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801db18:	683b      	ldr	r3, [r7, #0]
 801db1a:	6a1a      	ldr	r2, [r3, #32]
 801db1c:	1d7b      	adds	r3, r7, #5
 801db1e:	33ff      	adds	r3, #255	@ 0xff
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	1ad2      	subs	r2, r2, r3
 801db24:	683b      	ldr	r3, [r7, #0]
 801db26:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801db28:	687a      	ldr	r2, [r7, #4]
 801db2a:	683b      	ldr	r3, [r7, #0]
 801db2c:	781b      	ldrb	r3, [r3, #0]
 801db2e:	009b      	lsls	r3, r3, #2
 801db30:	18d3      	adds	r3, r2, r3
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	b29b      	uxth	r3, r3
 801db36:	001a      	movs	r2, r3
 801db38:	2340      	movs	r3, #64	@ 0x40
 801db3a:	4013      	ands	r3, r2
 801db3c:	d100      	bne.n	801db40 <USB_EPStartXfer+0x784>
 801db3e:	e0a4      	b.n	801dc8a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	673b      	str	r3, [r7, #112]	@ 0x70
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	785b      	ldrb	r3, [r3, #1]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d000      	beq.n	801db4e <USB_EPStartXfer+0x792>
 801db4c:	e070      	b.n	801dc30 <USB_EPStartXfer+0x874>
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	66bb      	str	r3, [r7, #104]	@ 0x68
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	2250      	movs	r2, #80	@ 0x50
 801db56:	5a9b      	ldrh	r3, [r3, r2]
 801db58:	b29b      	uxth	r3, r3
 801db5a:	001a      	movs	r2, r3
 801db5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801db5e:	189b      	adds	r3, r3, r2
 801db60:	66bb      	str	r3, [r7, #104]	@ 0x68
 801db62:	683b      	ldr	r3, [r7, #0]
 801db64:	781b      	ldrb	r3, [r3, #0]
 801db66:	00da      	lsls	r2, r3, #3
 801db68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801db6a:	18d3      	adds	r3, r2, r3
 801db6c:	4abc      	ldr	r2, [pc, #752]	@ (801de60 <USB_EPStartXfer+0xaa4>)
 801db6e:	4694      	mov	ip, r2
 801db70:	4463      	add	r3, ip
 801db72:	667b      	str	r3, [r7, #100]	@ 0x64
 801db74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801db76:	881b      	ldrh	r3, [r3, #0]
 801db78:	b29b      	uxth	r3, r3
 801db7a:	059b      	lsls	r3, r3, #22
 801db7c:	0d9b      	lsrs	r3, r3, #22
 801db7e:	b29a      	uxth	r2, r3
 801db80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801db82:	801a      	strh	r2, [r3, #0]
 801db84:	1d7b      	adds	r3, r7, #5
 801db86:	33ff      	adds	r3, #255	@ 0xff
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	2b3e      	cmp	r3, #62	@ 0x3e
 801db8c:	d922      	bls.n	801dbd4 <USB_EPStartXfer+0x818>
 801db8e:	1d7b      	adds	r3, r7, #5
 801db90:	33ff      	adds	r3, #255	@ 0xff
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	095b      	lsrs	r3, r3, #5
 801db96:	21f0      	movs	r1, #240	@ 0xf0
 801db98:	187a      	adds	r2, r7, r1
 801db9a:	6013      	str	r3, [r2, #0]
 801db9c:	1d7b      	adds	r3, r7, #5
 801db9e:	33ff      	adds	r3, #255	@ 0xff
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	221f      	movs	r2, #31
 801dba4:	4013      	ands	r3, r2
 801dba6:	d104      	bne.n	801dbb2 <USB_EPStartXfer+0x7f6>
 801dba8:	187b      	adds	r3, r7, r1
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	3b01      	subs	r3, #1
 801dbae:	187a      	adds	r2, r7, r1
 801dbb0:	6013      	str	r3, [r2, #0]
 801dbb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbb4:	881b      	ldrh	r3, [r3, #0]
 801dbb6:	b29a      	uxth	r2, r3
 801dbb8:	23f0      	movs	r3, #240	@ 0xf0
 801dbba:	18fb      	adds	r3, r7, r3
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	b29b      	uxth	r3, r3
 801dbc0:	029b      	lsls	r3, r3, #10
 801dbc2:	b29b      	uxth	r3, r3
 801dbc4:	4313      	orrs	r3, r2
 801dbc6:	b29b      	uxth	r3, r3
 801dbc8:	4aa6      	ldr	r2, [pc, #664]	@ (801de64 <USB_EPStartXfer+0xaa8>)
 801dbca:	4313      	orrs	r3, r2
 801dbcc:	b29a      	uxth	r2, r3
 801dbce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbd0:	801a      	strh	r2, [r3, #0]
 801dbd2:	e048      	b.n	801dc66 <USB_EPStartXfer+0x8aa>
 801dbd4:	1d7b      	adds	r3, r7, #5
 801dbd6:	33ff      	adds	r3, #255	@ 0xff
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d108      	bne.n	801dbf0 <USB_EPStartXfer+0x834>
 801dbde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbe0:	881b      	ldrh	r3, [r3, #0]
 801dbe2:	b29b      	uxth	r3, r3
 801dbe4:	4a9f      	ldr	r2, [pc, #636]	@ (801de64 <USB_EPStartXfer+0xaa8>)
 801dbe6:	4313      	orrs	r3, r2
 801dbe8:	b29a      	uxth	r2, r3
 801dbea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbec:	801a      	strh	r2, [r3, #0]
 801dbee:	e03a      	b.n	801dc66 <USB_EPStartXfer+0x8aa>
 801dbf0:	1d7b      	adds	r3, r7, #5
 801dbf2:	33ff      	adds	r3, #255	@ 0xff
 801dbf4:	681b      	ldr	r3, [r3, #0]
 801dbf6:	085b      	lsrs	r3, r3, #1
 801dbf8:	21f0      	movs	r1, #240	@ 0xf0
 801dbfa:	187a      	adds	r2, r7, r1
 801dbfc:	6013      	str	r3, [r2, #0]
 801dbfe:	1d7b      	adds	r3, r7, #5
 801dc00:	33ff      	adds	r3, #255	@ 0xff
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	2201      	movs	r2, #1
 801dc06:	4013      	ands	r3, r2
 801dc08:	d004      	beq.n	801dc14 <USB_EPStartXfer+0x858>
 801dc0a:	187b      	adds	r3, r7, r1
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	3301      	adds	r3, #1
 801dc10:	187a      	adds	r2, r7, r1
 801dc12:	6013      	str	r3, [r2, #0]
 801dc14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc16:	881b      	ldrh	r3, [r3, #0]
 801dc18:	b29a      	uxth	r2, r3
 801dc1a:	23f0      	movs	r3, #240	@ 0xf0
 801dc1c:	18fb      	adds	r3, r7, r3
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	b29b      	uxth	r3, r3
 801dc22:	029b      	lsls	r3, r3, #10
 801dc24:	b29b      	uxth	r3, r3
 801dc26:	4313      	orrs	r3, r2
 801dc28:	b29a      	uxth	r2, r3
 801dc2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc2c:	801a      	strh	r2, [r3, #0]
 801dc2e:	e01a      	b.n	801dc66 <USB_EPStartXfer+0x8aa>
 801dc30:	683b      	ldr	r3, [r7, #0]
 801dc32:	785b      	ldrb	r3, [r3, #1]
 801dc34:	2b01      	cmp	r3, #1
 801dc36:	d116      	bne.n	801dc66 <USB_EPStartXfer+0x8aa>
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	2250      	movs	r2, #80	@ 0x50
 801dc3c:	5a9b      	ldrh	r3, [r3, r2]
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	001a      	movs	r2, r3
 801dc42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dc44:	189b      	adds	r3, r3, r2
 801dc46:	673b      	str	r3, [r7, #112]	@ 0x70
 801dc48:	683b      	ldr	r3, [r7, #0]
 801dc4a:	781b      	ldrb	r3, [r3, #0]
 801dc4c:	00da      	lsls	r2, r3, #3
 801dc4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dc50:	18d3      	adds	r3, r2, r3
 801dc52:	4a83      	ldr	r2, [pc, #524]	@ (801de60 <USB_EPStartXfer+0xaa4>)
 801dc54:	4694      	mov	ip, r2
 801dc56:	4463      	add	r3, ip
 801dc58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dc5a:	1d7b      	adds	r3, r7, #5
 801dc5c:	33ff      	adds	r3, #255	@ 0xff
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	b29a      	uxth	r2, r3
 801dc62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dc64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801dc66:	2076      	movs	r0, #118	@ 0x76
 801dc68:	183b      	adds	r3, r7, r0
 801dc6a:	683a      	ldr	r2, [r7, #0]
 801dc6c:	8952      	ldrh	r2, [r2, #10]
 801dc6e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	6959      	ldr	r1, [r3, #20]
 801dc74:	1d7b      	adds	r3, r7, #5
 801dc76:	33ff      	adds	r3, #255	@ 0xff
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	b29c      	uxth	r4, r3
 801dc7c:	183b      	adds	r3, r7, r0
 801dc7e:	881a      	ldrh	r2, [r3, #0]
 801dc80:	6878      	ldr	r0, [r7, #4]
 801dc82:	0023      	movs	r3, r4
 801dc84:	f000 fe0c 	bl	801e8a0 <USB_WritePMA>
 801dc88:	e0ab      	b.n	801dde2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801dc8a:	683b      	ldr	r3, [r7, #0]
 801dc8c:	785b      	ldrb	r3, [r3, #1]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d000      	beq.n	801dc94 <USB_EPStartXfer+0x8d8>
 801dc92:	e070      	b.n	801dd76 <USB_EPStartXfer+0x9ba>
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	2250      	movs	r2, #80	@ 0x50
 801dc9c:	5a9b      	ldrh	r3, [r3, r2]
 801dc9e:	b29b      	uxth	r3, r3
 801dca0:	001a      	movs	r2, r3
 801dca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dca4:	189b      	adds	r3, r3, r2
 801dca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dca8:	683b      	ldr	r3, [r7, #0]
 801dcaa:	781b      	ldrb	r3, [r3, #0]
 801dcac:	00da      	lsls	r2, r3, #3
 801dcae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dcb0:	18d3      	adds	r3, r2, r3
 801dcb2:	4a6d      	ldr	r2, [pc, #436]	@ (801de68 <USB_EPStartXfer+0xaac>)
 801dcb4:	4694      	mov	ip, r2
 801dcb6:	4463      	add	r3, ip
 801dcb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dcba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcbc:	881b      	ldrh	r3, [r3, #0]
 801dcbe:	b29b      	uxth	r3, r3
 801dcc0:	059b      	lsls	r3, r3, #22
 801dcc2:	0d9b      	lsrs	r3, r3, #22
 801dcc4:	b29a      	uxth	r2, r3
 801dcc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcc8:	801a      	strh	r2, [r3, #0]
 801dcca:	1d7b      	adds	r3, r7, #5
 801dccc:	33ff      	adds	r3, #255	@ 0xff
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	2b3e      	cmp	r3, #62	@ 0x3e
 801dcd2:	d922      	bls.n	801dd1a <USB_EPStartXfer+0x95e>
 801dcd4:	1d7b      	adds	r3, r7, #5
 801dcd6:	33ff      	adds	r3, #255	@ 0xff
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	095b      	lsrs	r3, r3, #5
 801dcdc:	21ec      	movs	r1, #236	@ 0xec
 801dcde:	187a      	adds	r2, r7, r1
 801dce0:	6013      	str	r3, [r2, #0]
 801dce2:	1d7b      	adds	r3, r7, #5
 801dce4:	33ff      	adds	r3, #255	@ 0xff
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	221f      	movs	r2, #31
 801dcea:	4013      	ands	r3, r2
 801dcec:	d104      	bne.n	801dcf8 <USB_EPStartXfer+0x93c>
 801dcee:	187b      	adds	r3, r7, r1
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	3b01      	subs	r3, #1
 801dcf4:	187a      	adds	r2, r7, r1
 801dcf6:	6013      	str	r3, [r2, #0]
 801dcf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dcfa:	881b      	ldrh	r3, [r3, #0]
 801dcfc:	b29a      	uxth	r2, r3
 801dcfe:	23ec      	movs	r3, #236	@ 0xec
 801dd00:	18fb      	adds	r3, r7, r3
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	b29b      	uxth	r3, r3
 801dd06:	029b      	lsls	r3, r3, #10
 801dd08:	b29b      	uxth	r3, r3
 801dd0a:	4313      	orrs	r3, r2
 801dd0c:	b29b      	uxth	r3, r3
 801dd0e:	4a55      	ldr	r2, [pc, #340]	@ (801de64 <USB_EPStartXfer+0xaa8>)
 801dd10:	4313      	orrs	r3, r2
 801dd12:	b29a      	uxth	r2, r3
 801dd14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd16:	801a      	strh	r2, [r3, #0]
 801dd18:	e052      	b.n	801ddc0 <USB_EPStartXfer+0xa04>
 801dd1a:	1d7b      	adds	r3, r7, #5
 801dd1c:	33ff      	adds	r3, #255	@ 0xff
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d108      	bne.n	801dd36 <USB_EPStartXfer+0x97a>
 801dd24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd26:	881b      	ldrh	r3, [r3, #0]
 801dd28:	b29b      	uxth	r3, r3
 801dd2a:	4a4e      	ldr	r2, [pc, #312]	@ (801de64 <USB_EPStartXfer+0xaa8>)
 801dd2c:	4313      	orrs	r3, r2
 801dd2e:	b29a      	uxth	r2, r3
 801dd30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd32:	801a      	strh	r2, [r3, #0]
 801dd34:	e044      	b.n	801ddc0 <USB_EPStartXfer+0xa04>
 801dd36:	1d7b      	adds	r3, r7, #5
 801dd38:	33ff      	adds	r3, #255	@ 0xff
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	085b      	lsrs	r3, r3, #1
 801dd3e:	21ec      	movs	r1, #236	@ 0xec
 801dd40:	187a      	adds	r2, r7, r1
 801dd42:	6013      	str	r3, [r2, #0]
 801dd44:	1d7b      	adds	r3, r7, #5
 801dd46:	33ff      	adds	r3, #255	@ 0xff
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	2201      	movs	r2, #1
 801dd4c:	4013      	ands	r3, r2
 801dd4e:	d004      	beq.n	801dd5a <USB_EPStartXfer+0x99e>
 801dd50:	187b      	adds	r3, r7, r1
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	3301      	adds	r3, #1
 801dd56:	187a      	adds	r2, r7, r1
 801dd58:	6013      	str	r3, [r2, #0]
 801dd5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd5c:	881b      	ldrh	r3, [r3, #0]
 801dd5e:	b29a      	uxth	r2, r3
 801dd60:	23ec      	movs	r3, #236	@ 0xec
 801dd62:	18fb      	adds	r3, r7, r3
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	b29b      	uxth	r3, r3
 801dd68:	029b      	lsls	r3, r3, #10
 801dd6a:	b29b      	uxth	r3, r3
 801dd6c:	4313      	orrs	r3, r2
 801dd6e:	b29a      	uxth	r2, r3
 801dd70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd72:	801a      	strh	r2, [r3, #0]
 801dd74:	e024      	b.n	801ddc0 <USB_EPStartXfer+0xa04>
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	785b      	ldrb	r3, [r3, #1]
 801dd7a:	2b01      	cmp	r3, #1
 801dd7c:	d120      	bne.n	801ddc0 <USB_EPStartXfer+0xa04>
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	2184      	movs	r1, #132	@ 0x84
 801dd82:	187a      	adds	r2, r7, r1
 801dd84:	6013      	str	r3, [r2, #0]
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	2250      	movs	r2, #80	@ 0x50
 801dd8a:	5a9b      	ldrh	r3, [r3, r2]
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	001a      	movs	r2, r3
 801dd90:	187b      	adds	r3, r7, r1
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	189b      	adds	r3, r3, r2
 801dd96:	187a      	adds	r2, r7, r1
 801dd98:	6013      	str	r3, [r2, #0]
 801dd9a:	683b      	ldr	r3, [r7, #0]
 801dd9c:	781b      	ldrb	r3, [r3, #0]
 801dd9e:	00da      	lsls	r2, r3, #3
 801dda0:	187b      	adds	r3, r7, r1
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	18d3      	adds	r3, r2, r3
 801dda6:	4a30      	ldr	r2, [pc, #192]	@ (801de68 <USB_EPStartXfer+0xaac>)
 801dda8:	4694      	mov	ip, r2
 801ddaa:	4463      	add	r3, ip
 801ddac:	2180      	movs	r1, #128	@ 0x80
 801ddae:	187a      	adds	r2, r7, r1
 801ddb0:	6013      	str	r3, [r2, #0]
 801ddb2:	1d7b      	adds	r3, r7, #5
 801ddb4:	33ff      	adds	r3, #255	@ 0xff
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	b29a      	uxth	r2, r3
 801ddba:	187b      	adds	r3, r7, r1
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ddc0:	2076      	movs	r0, #118	@ 0x76
 801ddc2:	183b      	adds	r3, r7, r0
 801ddc4:	683a      	ldr	r2, [r7, #0]
 801ddc6:	8912      	ldrh	r2, [r2, #8]
 801ddc8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ddca:	683b      	ldr	r3, [r7, #0]
 801ddcc:	6959      	ldr	r1, [r3, #20]
 801ddce:	1d7b      	adds	r3, r7, #5
 801ddd0:	33ff      	adds	r3, #255	@ 0xff
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	b29c      	uxth	r4, r3
 801ddd6:	183b      	adds	r3, r7, r0
 801ddd8:	881a      	ldrh	r2, [r3, #0]
 801ddda:	6878      	ldr	r0, [r7, #4]
 801dddc:	0023      	movs	r3, r4
 801ddde:	f000 fd5f 	bl	801e8a0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801dde2:	687a      	ldr	r2, [r7, #4]
 801dde4:	683b      	ldr	r3, [r7, #0]
 801dde6:	781b      	ldrb	r3, [r3, #0]
 801dde8:	009b      	lsls	r3, r3, #2
 801ddea:	18d3      	adds	r3, r2, r3
 801ddec:	881b      	ldrh	r3, [r3, #0]
 801ddee:	b29a      	uxth	r2, r3
 801ddf0:	200a      	movs	r0, #10
 801ddf2:	183b      	adds	r3, r7, r0
 801ddf4:	491d      	ldr	r1, [pc, #116]	@ (801de6c <USB_EPStartXfer+0xab0>)
 801ddf6:	400a      	ands	r2, r1
 801ddf8:	801a      	strh	r2, [r3, #0]
 801ddfa:	183b      	adds	r3, r7, r0
 801ddfc:	183a      	adds	r2, r7, r0
 801ddfe:	8812      	ldrh	r2, [r2, #0]
 801de00:	2110      	movs	r1, #16
 801de02:	404a      	eors	r2, r1
 801de04:	801a      	strh	r2, [r3, #0]
 801de06:	183b      	adds	r3, r7, r0
 801de08:	183a      	adds	r2, r7, r0
 801de0a:	8812      	ldrh	r2, [r2, #0]
 801de0c:	2120      	movs	r1, #32
 801de0e:	404a      	eors	r2, r1
 801de10:	801a      	strh	r2, [r3, #0]
 801de12:	687a      	ldr	r2, [r7, #4]
 801de14:	683b      	ldr	r3, [r7, #0]
 801de16:	781b      	ldrb	r3, [r3, #0]
 801de18:	009b      	lsls	r3, r3, #2
 801de1a:	18d3      	adds	r3, r2, r3
 801de1c:	183a      	adds	r2, r7, r0
 801de1e:	8812      	ldrh	r2, [r2, #0]
 801de20:	4913      	ldr	r1, [pc, #76]	@ (801de70 <USB_EPStartXfer+0xab4>)
 801de22:	430a      	orrs	r2, r1
 801de24:	b292      	uxth	r2, r2
 801de26:	801a      	strh	r2, [r3, #0]
 801de28:	f000 fbf4 	bl	801e614 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	7b1b      	ldrb	r3, [r3, #12]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d000      	beq.n	801de36 <USB_EPStartXfer+0xa7a>
 801de34:	e0a9      	b.n	801df8a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801de36:	683b      	ldr	r3, [r7, #0]
 801de38:	699a      	ldr	r2, [r3, #24]
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	691b      	ldr	r3, [r3, #16]
 801de3e:	429a      	cmp	r2, r3
 801de40:	d918      	bls.n	801de74 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801de42:	683b      	ldr	r3, [r7, #0]
 801de44:	691b      	ldr	r3, [r3, #16]
 801de46:	1d7a      	adds	r2, r7, #5
 801de48:	32ff      	adds	r2, #255	@ 0xff
 801de4a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	699a      	ldr	r2, [r3, #24]
 801de50:	1d7b      	adds	r3, r7, #5
 801de52:	33ff      	adds	r3, #255	@ 0xff
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	1ad2      	subs	r2, r2, r3
 801de58:	683b      	ldr	r3, [r7, #0]
 801de5a:	619a      	str	r2, [r3, #24]
 801de5c:	e012      	b.n	801de84 <USB_EPStartXfer+0xac8>
 801de5e:	46c0      	nop			@ (mov r8, r8)
 801de60:	00000406 	.word	0x00000406
 801de64:	ffff8000 	.word	0xffff8000
 801de68:	00000402 	.word	0x00000402
 801de6c:	ffff8fbf 	.word	0xffff8fbf
 801de70:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801de74:	683b      	ldr	r3, [r7, #0]
 801de76:	699b      	ldr	r3, [r3, #24]
 801de78:	1d7a      	adds	r2, r7, #5
 801de7a:	32ff      	adds	r2, #255	@ 0xff
 801de7c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	2200      	movs	r2, #0
 801de82:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	2190      	movs	r1, #144	@ 0x90
 801de88:	187a      	adds	r2, r7, r1
 801de8a:	6013      	str	r3, [r2, #0]
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	2250      	movs	r2, #80	@ 0x50
 801de90:	5a9b      	ldrh	r3, [r3, r2]
 801de92:	b29b      	uxth	r3, r3
 801de94:	001a      	movs	r2, r3
 801de96:	187b      	adds	r3, r7, r1
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	189b      	adds	r3, r3, r2
 801de9c:	187a      	adds	r2, r7, r1
 801de9e:	6013      	str	r3, [r2, #0]
 801dea0:	683b      	ldr	r3, [r7, #0]
 801dea2:	781b      	ldrb	r3, [r3, #0]
 801dea4:	00da      	lsls	r2, r3, #3
 801dea6:	187b      	adds	r3, r7, r1
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	18d3      	adds	r3, r2, r3
 801deac:	4acf      	ldr	r2, [pc, #828]	@ (801e1ec <USB_EPStartXfer+0xe30>)
 801deae:	4694      	mov	ip, r2
 801deb0:	4463      	add	r3, ip
 801deb2:	218c      	movs	r1, #140	@ 0x8c
 801deb4:	187a      	adds	r2, r7, r1
 801deb6:	6013      	str	r3, [r2, #0]
 801deb8:	187b      	adds	r3, r7, r1
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	881b      	ldrh	r3, [r3, #0]
 801debe:	b29b      	uxth	r3, r3
 801dec0:	059b      	lsls	r3, r3, #22
 801dec2:	0d9b      	lsrs	r3, r3, #22
 801dec4:	b29a      	uxth	r2, r3
 801dec6:	187b      	adds	r3, r7, r1
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	801a      	strh	r2, [r3, #0]
 801decc:	1d7b      	adds	r3, r7, #5
 801dece:	33ff      	adds	r3, #255	@ 0xff
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	2b3e      	cmp	r3, #62	@ 0x3e
 801ded4:	d925      	bls.n	801df22 <USB_EPStartXfer+0xb66>
 801ded6:	1d7b      	adds	r3, r7, #5
 801ded8:	33ff      	adds	r3, #255	@ 0xff
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	095b      	lsrs	r3, r3, #5
 801dede:	21e8      	movs	r1, #232	@ 0xe8
 801dee0:	187a      	adds	r2, r7, r1
 801dee2:	6013      	str	r3, [r2, #0]
 801dee4:	1d7b      	adds	r3, r7, #5
 801dee6:	33ff      	adds	r3, #255	@ 0xff
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	221f      	movs	r2, #31
 801deec:	4013      	ands	r3, r2
 801deee:	d104      	bne.n	801defa <USB_EPStartXfer+0xb3e>
 801def0:	187b      	adds	r3, r7, r1
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	3b01      	subs	r3, #1
 801def6:	187a      	adds	r2, r7, r1
 801def8:	6013      	str	r3, [r2, #0]
 801defa:	218c      	movs	r1, #140	@ 0x8c
 801defc:	187b      	adds	r3, r7, r1
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	881b      	ldrh	r3, [r3, #0]
 801df02:	b29a      	uxth	r2, r3
 801df04:	23e8      	movs	r3, #232	@ 0xe8
 801df06:	18fb      	adds	r3, r7, r3
 801df08:	681b      	ldr	r3, [r3, #0]
 801df0a:	b29b      	uxth	r3, r3
 801df0c:	029b      	lsls	r3, r3, #10
 801df0e:	b29b      	uxth	r3, r3
 801df10:	4313      	orrs	r3, r2
 801df12:	b29b      	uxth	r3, r3
 801df14:	4ab6      	ldr	r2, [pc, #728]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801df16:	4313      	orrs	r3, r2
 801df18:	b29a      	uxth	r2, r3
 801df1a:	187b      	adds	r3, r7, r1
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	801a      	strh	r2, [r3, #0]
 801df20:	e353      	b.n	801e5ca <USB_EPStartXfer+0x120e>
 801df22:	1d7b      	adds	r3, r7, #5
 801df24:	33ff      	adds	r3, #255	@ 0xff
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d10b      	bne.n	801df44 <USB_EPStartXfer+0xb88>
 801df2c:	218c      	movs	r1, #140	@ 0x8c
 801df2e:	187b      	adds	r3, r7, r1
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	881b      	ldrh	r3, [r3, #0]
 801df34:	b29b      	uxth	r3, r3
 801df36:	4aae      	ldr	r2, [pc, #696]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801df38:	4313      	orrs	r3, r2
 801df3a:	b29a      	uxth	r2, r3
 801df3c:	187b      	adds	r3, r7, r1
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	801a      	strh	r2, [r3, #0]
 801df42:	e342      	b.n	801e5ca <USB_EPStartXfer+0x120e>
 801df44:	1d7b      	adds	r3, r7, #5
 801df46:	33ff      	adds	r3, #255	@ 0xff
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	085b      	lsrs	r3, r3, #1
 801df4c:	21e8      	movs	r1, #232	@ 0xe8
 801df4e:	187a      	adds	r2, r7, r1
 801df50:	6013      	str	r3, [r2, #0]
 801df52:	1d7b      	adds	r3, r7, #5
 801df54:	33ff      	adds	r3, #255	@ 0xff
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	2201      	movs	r2, #1
 801df5a:	4013      	ands	r3, r2
 801df5c:	d004      	beq.n	801df68 <USB_EPStartXfer+0xbac>
 801df5e:	187b      	adds	r3, r7, r1
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	3301      	adds	r3, #1
 801df64:	187a      	adds	r2, r7, r1
 801df66:	6013      	str	r3, [r2, #0]
 801df68:	218c      	movs	r1, #140	@ 0x8c
 801df6a:	187b      	adds	r3, r7, r1
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	881b      	ldrh	r3, [r3, #0]
 801df70:	b29a      	uxth	r2, r3
 801df72:	23e8      	movs	r3, #232	@ 0xe8
 801df74:	18fb      	adds	r3, r7, r3
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	b29b      	uxth	r3, r3
 801df7a:	029b      	lsls	r3, r3, #10
 801df7c:	b29b      	uxth	r3, r3
 801df7e:	4313      	orrs	r3, r2
 801df80:	b29a      	uxth	r2, r3
 801df82:	187b      	adds	r3, r7, r1
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	801a      	strh	r2, [r3, #0]
 801df88:	e31f      	b.n	801e5ca <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801df8a:	683b      	ldr	r3, [r7, #0]
 801df8c:	78db      	ldrb	r3, [r3, #3]
 801df8e:	2b02      	cmp	r3, #2
 801df90:	d000      	beq.n	801df94 <USB_EPStartXfer+0xbd8>
 801df92:	e191      	b.n	801e2b8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	785b      	ldrb	r3, [r3, #1]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d000      	beq.n	801df9e <USB_EPStartXfer+0xbe2>
 801df9c:	e07c      	b.n	801e098 <USB_EPStartXfer+0xcdc>
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	21ac      	movs	r1, #172	@ 0xac
 801dfa2:	187a      	adds	r2, r7, r1
 801dfa4:	6013      	str	r3, [r2, #0]
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	2250      	movs	r2, #80	@ 0x50
 801dfaa:	5a9b      	ldrh	r3, [r3, r2]
 801dfac:	b29b      	uxth	r3, r3
 801dfae:	001a      	movs	r2, r3
 801dfb0:	187b      	adds	r3, r7, r1
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	189b      	adds	r3, r3, r2
 801dfb6:	187a      	adds	r2, r7, r1
 801dfb8:	6013      	str	r3, [r2, #0]
 801dfba:	683b      	ldr	r3, [r7, #0]
 801dfbc:	781b      	ldrb	r3, [r3, #0]
 801dfbe:	00da      	lsls	r2, r3, #3
 801dfc0:	187b      	adds	r3, r7, r1
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	18d3      	adds	r3, r2, r3
 801dfc6:	4a8b      	ldr	r2, [pc, #556]	@ (801e1f4 <USB_EPStartXfer+0xe38>)
 801dfc8:	4694      	mov	ip, r2
 801dfca:	4463      	add	r3, ip
 801dfcc:	21a8      	movs	r1, #168	@ 0xa8
 801dfce:	187a      	adds	r2, r7, r1
 801dfd0:	6013      	str	r3, [r2, #0]
 801dfd2:	187b      	adds	r3, r7, r1
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	881b      	ldrh	r3, [r3, #0]
 801dfd8:	b29b      	uxth	r3, r3
 801dfda:	059b      	lsls	r3, r3, #22
 801dfdc:	0d9b      	lsrs	r3, r3, #22
 801dfde:	b29a      	uxth	r2, r3
 801dfe0:	187b      	adds	r3, r7, r1
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	801a      	strh	r2, [r3, #0]
 801dfe6:	683b      	ldr	r3, [r7, #0]
 801dfe8:	691b      	ldr	r3, [r3, #16]
 801dfea:	2b3e      	cmp	r3, #62	@ 0x3e
 801dfec:	d923      	bls.n	801e036 <USB_EPStartXfer+0xc7a>
 801dfee:	683b      	ldr	r3, [r7, #0]
 801dff0:	691b      	ldr	r3, [r3, #16]
 801dff2:	095b      	lsrs	r3, r3, #5
 801dff4:	21e4      	movs	r1, #228	@ 0xe4
 801dff6:	187a      	adds	r2, r7, r1
 801dff8:	6013      	str	r3, [r2, #0]
 801dffa:	683b      	ldr	r3, [r7, #0]
 801dffc:	691b      	ldr	r3, [r3, #16]
 801dffe:	221f      	movs	r2, #31
 801e000:	4013      	ands	r3, r2
 801e002:	d104      	bne.n	801e00e <USB_EPStartXfer+0xc52>
 801e004:	187b      	adds	r3, r7, r1
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	3b01      	subs	r3, #1
 801e00a:	187a      	adds	r2, r7, r1
 801e00c:	6013      	str	r3, [r2, #0]
 801e00e:	21a8      	movs	r1, #168	@ 0xa8
 801e010:	187b      	adds	r3, r7, r1
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	881b      	ldrh	r3, [r3, #0]
 801e016:	b29a      	uxth	r2, r3
 801e018:	23e4      	movs	r3, #228	@ 0xe4
 801e01a:	18fb      	adds	r3, r7, r3
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	b29b      	uxth	r3, r3
 801e020:	029b      	lsls	r3, r3, #10
 801e022:	b29b      	uxth	r3, r3
 801e024:	4313      	orrs	r3, r2
 801e026:	b29b      	uxth	r3, r3
 801e028:	4a71      	ldr	r2, [pc, #452]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801e02a:	4313      	orrs	r3, r2
 801e02c:	b29a      	uxth	r2, r3
 801e02e:	187b      	adds	r3, r7, r1
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	801a      	strh	r2, [r3, #0]
 801e034:	e054      	b.n	801e0e0 <USB_EPStartXfer+0xd24>
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	691b      	ldr	r3, [r3, #16]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d10b      	bne.n	801e056 <USB_EPStartXfer+0xc9a>
 801e03e:	21a8      	movs	r1, #168	@ 0xa8
 801e040:	187b      	adds	r3, r7, r1
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	881b      	ldrh	r3, [r3, #0]
 801e046:	b29b      	uxth	r3, r3
 801e048:	4a69      	ldr	r2, [pc, #420]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801e04a:	4313      	orrs	r3, r2
 801e04c:	b29a      	uxth	r2, r3
 801e04e:	187b      	adds	r3, r7, r1
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	801a      	strh	r2, [r3, #0]
 801e054:	e044      	b.n	801e0e0 <USB_EPStartXfer+0xd24>
 801e056:	683b      	ldr	r3, [r7, #0]
 801e058:	691b      	ldr	r3, [r3, #16]
 801e05a:	085b      	lsrs	r3, r3, #1
 801e05c:	21e4      	movs	r1, #228	@ 0xe4
 801e05e:	187a      	adds	r2, r7, r1
 801e060:	6013      	str	r3, [r2, #0]
 801e062:	683b      	ldr	r3, [r7, #0]
 801e064:	691b      	ldr	r3, [r3, #16]
 801e066:	2201      	movs	r2, #1
 801e068:	4013      	ands	r3, r2
 801e06a:	d004      	beq.n	801e076 <USB_EPStartXfer+0xcba>
 801e06c:	187b      	adds	r3, r7, r1
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	3301      	adds	r3, #1
 801e072:	187a      	adds	r2, r7, r1
 801e074:	6013      	str	r3, [r2, #0]
 801e076:	21a8      	movs	r1, #168	@ 0xa8
 801e078:	187b      	adds	r3, r7, r1
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	881b      	ldrh	r3, [r3, #0]
 801e07e:	b29a      	uxth	r2, r3
 801e080:	23e4      	movs	r3, #228	@ 0xe4
 801e082:	18fb      	adds	r3, r7, r3
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	b29b      	uxth	r3, r3
 801e088:	029b      	lsls	r3, r3, #10
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	4313      	orrs	r3, r2
 801e08e:	b29a      	uxth	r2, r3
 801e090:	187b      	adds	r3, r7, r1
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	801a      	strh	r2, [r3, #0]
 801e096:	e023      	b.n	801e0e0 <USB_EPStartXfer+0xd24>
 801e098:	683b      	ldr	r3, [r7, #0]
 801e09a:	785b      	ldrb	r3, [r3, #1]
 801e09c:	2b01      	cmp	r3, #1
 801e09e:	d11f      	bne.n	801e0e0 <USB_EPStartXfer+0xd24>
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	21b4      	movs	r1, #180	@ 0xb4
 801e0a4:	187a      	adds	r2, r7, r1
 801e0a6:	6013      	str	r3, [r2, #0]
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	2250      	movs	r2, #80	@ 0x50
 801e0ac:	5a9b      	ldrh	r3, [r3, r2]
 801e0ae:	b29b      	uxth	r3, r3
 801e0b0:	001a      	movs	r2, r3
 801e0b2:	187b      	adds	r3, r7, r1
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	189b      	adds	r3, r3, r2
 801e0b8:	187a      	adds	r2, r7, r1
 801e0ba:	6013      	str	r3, [r2, #0]
 801e0bc:	683b      	ldr	r3, [r7, #0]
 801e0be:	781b      	ldrb	r3, [r3, #0]
 801e0c0:	00da      	lsls	r2, r3, #3
 801e0c2:	187b      	adds	r3, r7, r1
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	18d3      	adds	r3, r2, r3
 801e0c8:	4a4a      	ldr	r2, [pc, #296]	@ (801e1f4 <USB_EPStartXfer+0xe38>)
 801e0ca:	4694      	mov	ip, r2
 801e0cc:	4463      	add	r3, ip
 801e0ce:	21b0      	movs	r1, #176	@ 0xb0
 801e0d0:	187a      	adds	r2, r7, r1
 801e0d2:	6013      	str	r3, [r2, #0]
 801e0d4:	683b      	ldr	r3, [r7, #0]
 801e0d6:	691b      	ldr	r3, [r3, #16]
 801e0d8:	b29a      	uxth	r2, r3
 801e0da:	187b      	adds	r3, r7, r1
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	801a      	strh	r2, [r3, #0]
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	22a4      	movs	r2, #164	@ 0xa4
 801e0e4:	18ba      	adds	r2, r7, r2
 801e0e6:	6013      	str	r3, [r2, #0]
 801e0e8:	683b      	ldr	r3, [r7, #0]
 801e0ea:	785b      	ldrb	r3, [r3, #1]
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d000      	beq.n	801e0f2 <USB_EPStartXfer+0xd36>
 801e0f0:	e082      	b.n	801e1f8 <USB_EPStartXfer+0xe3c>
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	219c      	movs	r1, #156	@ 0x9c
 801e0f6:	187a      	adds	r2, r7, r1
 801e0f8:	6013      	str	r3, [r2, #0]
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	2250      	movs	r2, #80	@ 0x50
 801e0fe:	5a9b      	ldrh	r3, [r3, r2]
 801e100:	b29b      	uxth	r3, r3
 801e102:	001a      	movs	r2, r3
 801e104:	187b      	adds	r3, r7, r1
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	189b      	adds	r3, r3, r2
 801e10a:	187a      	adds	r2, r7, r1
 801e10c:	6013      	str	r3, [r2, #0]
 801e10e:	683b      	ldr	r3, [r7, #0]
 801e110:	781b      	ldrb	r3, [r3, #0]
 801e112:	00da      	lsls	r2, r3, #3
 801e114:	187b      	adds	r3, r7, r1
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	18d3      	adds	r3, r2, r3
 801e11a:	4a34      	ldr	r2, [pc, #208]	@ (801e1ec <USB_EPStartXfer+0xe30>)
 801e11c:	4694      	mov	ip, r2
 801e11e:	4463      	add	r3, ip
 801e120:	2198      	movs	r1, #152	@ 0x98
 801e122:	187a      	adds	r2, r7, r1
 801e124:	6013      	str	r3, [r2, #0]
 801e126:	187b      	adds	r3, r7, r1
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	881b      	ldrh	r3, [r3, #0]
 801e12c:	b29b      	uxth	r3, r3
 801e12e:	059b      	lsls	r3, r3, #22
 801e130:	0d9b      	lsrs	r3, r3, #22
 801e132:	b29a      	uxth	r2, r3
 801e134:	187b      	adds	r3, r7, r1
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	801a      	strh	r2, [r3, #0]
 801e13a:	683b      	ldr	r3, [r7, #0]
 801e13c:	691b      	ldr	r3, [r3, #16]
 801e13e:	2b3e      	cmp	r3, #62	@ 0x3e
 801e140:	d923      	bls.n	801e18a <USB_EPStartXfer+0xdce>
 801e142:	683b      	ldr	r3, [r7, #0]
 801e144:	691b      	ldr	r3, [r3, #16]
 801e146:	095b      	lsrs	r3, r3, #5
 801e148:	21e0      	movs	r1, #224	@ 0xe0
 801e14a:	187a      	adds	r2, r7, r1
 801e14c:	6013      	str	r3, [r2, #0]
 801e14e:	683b      	ldr	r3, [r7, #0]
 801e150:	691b      	ldr	r3, [r3, #16]
 801e152:	221f      	movs	r2, #31
 801e154:	4013      	ands	r3, r2
 801e156:	d104      	bne.n	801e162 <USB_EPStartXfer+0xda6>
 801e158:	187b      	adds	r3, r7, r1
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	3b01      	subs	r3, #1
 801e15e:	187a      	adds	r2, r7, r1
 801e160:	6013      	str	r3, [r2, #0]
 801e162:	2198      	movs	r1, #152	@ 0x98
 801e164:	187b      	adds	r3, r7, r1
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	881b      	ldrh	r3, [r3, #0]
 801e16a:	b29a      	uxth	r2, r3
 801e16c:	23e0      	movs	r3, #224	@ 0xe0
 801e16e:	18fb      	adds	r3, r7, r3
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	b29b      	uxth	r3, r3
 801e174:	029b      	lsls	r3, r3, #10
 801e176:	b29b      	uxth	r3, r3
 801e178:	4313      	orrs	r3, r2
 801e17a:	b29b      	uxth	r3, r3
 801e17c:	4a1c      	ldr	r2, [pc, #112]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801e17e:	4313      	orrs	r3, r2
 801e180:	b29a      	uxth	r2, r3
 801e182:	187b      	adds	r3, r7, r1
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	801a      	strh	r2, [r3, #0]
 801e188:	e057      	b.n	801e23a <USB_EPStartXfer+0xe7e>
 801e18a:	683b      	ldr	r3, [r7, #0]
 801e18c:	691b      	ldr	r3, [r3, #16]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d10b      	bne.n	801e1aa <USB_EPStartXfer+0xdee>
 801e192:	2198      	movs	r1, #152	@ 0x98
 801e194:	187b      	adds	r3, r7, r1
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	881b      	ldrh	r3, [r3, #0]
 801e19a:	b29b      	uxth	r3, r3
 801e19c:	4a14      	ldr	r2, [pc, #80]	@ (801e1f0 <USB_EPStartXfer+0xe34>)
 801e19e:	4313      	orrs	r3, r2
 801e1a0:	b29a      	uxth	r2, r3
 801e1a2:	187b      	adds	r3, r7, r1
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	801a      	strh	r2, [r3, #0]
 801e1a8:	e047      	b.n	801e23a <USB_EPStartXfer+0xe7e>
 801e1aa:	683b      	ldr	r3, [r7, #0]
 801e1ac:	691b      	ldr	r3, [r3, #16]
 801e1ae:	085b      	lsrs	r3, r3, #1
 801e1b0:	21e0      	movs	r1, #224	@ 0xe0
 801e1b2:	187a      	adds	r2, r7, r1
 801e1b4:	6013      	str	r3, [r2, #0]
 801e1b6:	683b      	ldr	r3, [r7, #0]
 801e1b8:	691b      	ldr	r3, [r3, #16]
 801e1ba:	2201      	movs	r2, #1
 801e1bc:	4013      	ands	r3, r2
 801e1be:	d004      	beq.n	801e1ca <USB_EPStartXfer+0xe0e>
 801e1c0:	187b      	adds	r3, r7, r1
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	3301      	adds	r3, #1
 801e1c6:	187a      	adds	r2, r7, r1
 801e1c8:	6013      	str	r3, [r2, #0]
 801e1ca:	2198      	movs	r1, #152	@ 0x98
 801e1cc:	187b      	adds	r3, r7, r1
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	881b      	ldrh	r3, [r3, #0]
 801e1d2:	b29a      	uxth	r2, r3
 801e1d4:	23e0      	movs	r3, #224	@ 0xe0
 801e1d6:	18fb      	adds	r3, r7, r3
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	b29b      	uxth	r3, r3
 801e1dc:	029b      	lsls	r3, r3, #10
 801e1de:	b29b      	uxth	r3, r3
 801e1e0:	4313      	orrs	r3, r2
 801e1e2:	b29a      	uxth	r2, r3
 801e1e4:	187b      	adds	r3, r7, r1
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	801a      	strh	r2, [r3, #0]
 801e1ea:	e026      	b.n	801e23a <USB_EPStartXfer+0xe7e>
 801e1ec:	00000406 	.word	0x00000406
 801e1f0:	ffff8000 	.word	0xffff8000
 801e1f4:	00000402 	.word	0x00000402
 801e1f8:	683b      	ldr	r3, [r7, #0]
 801e1fa:	785b      	ldrb	r3, [r3, #1]
 801e1fc:	2b01      	cmp	r3, #1
 801e1fe:	d11c      	bne.n	801e23a <USB_EPStartXfer+0xe7e>
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2250      	movs	r2, #80	@ 0x50
 801e204:	5a9b      	ldrh	r3, [r3, r2]
 801e206:	b29b      	uxth	r3, r3
 801e208:	001a      	movs	r2, r3
 801e20a:	21a4      	movs	r1, #164	@ 0xa4
 801e20c:	187b      	adds	r3, r7, r1
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	189b      	adds	r3, r3, r2
 801e212:	187a      	adds	r2, r7, r1
 801e214:	6013      	str	r3, [r2, #0]
 801e216:	683b      	ldr	r3, [r7, #0]
 801e218:	781b      	ldrb	r3, [r3, #0]
 801e21a:	00da      	lsls	r2, r3, #3
 801e21c:	187b      	adds	r3, r7, r1
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	18d3      	adds	r3, r2, r3
 801e222:	4ad2      	ldr	r2, [pc, #840]	@ (801e56c <USB_EPStartXfer+0x11b0>)
 801e224:	4694      	mov	ip, r2
 801e226:	4463      	add	r3, ip
 801e228:	21a0      	movs	r1, #160	@ 0xa0
 801e22a:	187a      	adds	r2, r7, r1
 801e22c:	6013      	str	r3, [r2, #0]
 801e22e:	683b      	ldr	r3, [r7, #0]
 801e230:	691b      	ldr	r3, [r3, #16]
 801e232:	b29a      	uxth	r2, r3
 801e234:	187b      	adds	r3, r7, r1
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	69db      	ldr	r3, [r3, #28]
 801e23e:	2b00      	cmp	r3, #0
 801e240:	d100      	bne.n	801e244 <USB_EPStartXfer+0xe88>
 801e242:	e1c2      	b.n	801e5ca <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801e244:	687a      	ldr	r2, [r7, #4]
 801e246:	683b      	ldr	r3, [r7, #0]
 801e248:	781b      	ldrb	r3, [r3, #0]
 801e24a:	009b      	lsls	r3, r3, #2
 801e24c:	18d2      	adds	r2, r2, r3
 801e24e:	2196      	movs	r1, #150	@ 0x96
 801e250:	187b      	adds	r3, r7, r1
 801e252:	8812      	ldrh	r2, [r2, #0]
 801e254:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e256:	187b      	adds	r3, r7, r1
 801e258:	881a      	ldrh	r2, [r3, #0]
 801e25a:	2380      	movs	r3, #128	@ 0x80
 801e25c:	01db      	lsls	r3, r3, #7
 801e25e:	4013      	ands	r3, r2
 801e260:	d004      	beq.n	801e26c <USB_EPStartXfer+0xeb0>
 801e262:	187b      	adds	r3, r7, r1
 801e264:	881b      	ldrh	r3, [r3, #0]
 801e266:	2240      	movs	r2, #64	@ 0x40
 801e268:	4013      	ands	r3, r2
 801e26a:	d10d      	bne.n	801e288 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e26c:	2196      	movs	r1, #150	@ 0x96
 801e26e:	187b      	adds	r3, r7, r1
 801e270:	881a      	ldrh	r2, [r3, #0]
 801e272:	2380      	movs	r3, #128	@ 0x80
 801e274:	01db      	lsls	r3, r3, #7
 801e276:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e278:	d000      	beq.n	801e27c <USB_EPStartXfer+0xec0>
 801e27a:	e1a6      	b.n	801e5ca <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e27c:	187b      	adds	r3, r7, r1
 801e27e:	881b      	ldrh	r3, [r3, #0]
 801e280:	2240      	movs	r2, #64	@ 0x40
 801e282:	4013      	ands	r3, r2
 801e284:	d000      	beq.n	801e288 <USB_EPStartXfer+0xecc>
 801e286:	e1a0      	b.n	801e5ca <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801e288:	687a      	ldr	r2, [r7, #4]
 801e28a:	683b      	ldr	r3, [r7, #0]
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	009b      	lsls	r3, r3, #2
 801e290:	18d3      	adds	r3, r2, r3
 801e292:	881b      	ldrh	r3, [r3, #0]
 801e294:	b29a      	uxth	r2, r3
 801e296:	2094      	movs	r0, #148	@ 0x94
 801e298:	183b      	adds	r3, r7, r0
 801e29a:	49b5      	ldr	r1, [pc, #724]	@ (801e570 <USB_EPStartXfer+0x11b4>)
 801e29c:	400a      	ands	r2, r1
 801e29e:	801a      	strh	r2, [r3, #0]
 801e2a0:	687a      	ldr	r2, [r7, #4]
 801e2a2:	683b      	ldr	r3, [r7, #0]
 801e2a4:	781b      	ldrb	r3, [r3, #0]
 801e2a6:	009b      	lsls	r3, r3, #2
 801e2a8:	18d3      	adds	r3, r2, r3
 801e2aa:	183a      	adds	r2, r7, r0
 801e2ac:	8812      	ldrh	r2, [r2, #0]
 801e2ae:	49b1      	ldr	r1, [pc, #708]	@ (801e574 <USB_EPStartXfer+0x11b8>)
 801e2b0:	430a      	orrs	r2, r1
 801e2b2:	b292      	uxth	r2, r2
 801e2b4:	801a      	strh	r2, [r3, #0]
 801e2b6:	e188      	b.n	801e5ca <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801e2b8:	683b      	ldr	r3, [r7, #0]
 801e2ba:	78db      	ldrb	r3, [r3, #3]
 801e2bc:	2b01      	cmp	r3, #1
 801e2be:	d000      	beq.n	801e2c2 <USB_EPStartXfer+0xf06>
 801e2c0:	e181      	b.n	801e5c6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801e2c2:	683b      	ldr	r3, [r7, #0]
 801e2c4:	699a      	ldr	r2, [r3, #24]
 801e2c6:	683b      	ldr	r3, [r7, #0]
 801e2c8:	691b      	ldr	r3, [r3, #16]
 801e2ca:	429a      	cmp	r2, r3
 801e2cc:	d90d      	bls.n	801e2ea <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801e2ce:	683b      	ldr	r3, [r7, #0]
 801e2d0:	691b      	ldr	r3, [r3, #16]
 801e2d2:	1d7a      	adds	r2, r7, #5
 801e2d4:	32ff      	adds	r2, #255	@ 0xff
 801e2d6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801e2d8:	683b      	ldr	r3, [r7, #0]
 801e2da:	699a      	ldr	r2, [r3, #24]
 801e2dc:	1d7b      	adds	r3, r7, #5
 801e2de:	33ff      	adds	r3, #255	@ 0xff
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	1ad2      	subs	r2, r2, r3
 801e2e4:	683b      	ldr	r3, [r7, #0]
 801e2e6:	619a      	str	r2, [r3, #24]
 801e2e8:	e007      	b.n	801e2fa <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801e2ea:	683b      	ldr	r3, [r7, #0]
 801e2ec:	699b      	ldr	r3, [r3, #24]
 801e2ee:	1d7a      	adds	r2, r7, #5
 801e2f0:	32ff      	adds	r2, #255	@ 0xff
 801e2f2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801e2f4:	683b      	ldr	r3, [r7, #0]
 801e2f6:	2200      	movs	r2, #0
 801e2f8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801e2fa:	683b      	ldr	r3, [r7, #0]
 801e2fc:	785b      	ldrb	r3, [r3, #1]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d000      	beq.n	801e304 <USB_EPStartXfer+0xf48>
 801e302:	e082      	b.n	801e40a <USB_EPStartXfer+0x104e>
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	21cc      	movs	r1, #204	@ 0xcc
 801e308:	187a      	adds	r2, r7, r1
 801e30a:	6013      	str	r3, [r2, #0]
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	2250      	movs	r2, #80	@ 0x50
 801e310:	5a9b      	ldrh	r3, [r3, r2]
 801e312:	b29b      	uxth	r3, r3
 801e314:	001a      	movs	r2, r3
 801e316:	187b      	adds	r3, r7, r1
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	189b      	adds	r3, r3, r2
 801e31c:	187a      	adds	r2, r7, r1
 801e31e:	6013      	str	r3, [r2, #0]
 801e320:	683b      	ldr	r3, [r7, #0]
 801e322:	781b      	ldrb	r3, [r3, #0]
 801e324:	00da      	lsls	r2, r3, #3
 801e326:	187b      	adds	r3, r7, r1
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	18d3      	adds	r3, r2, r3
 801e32c:	4a92      	ldr	r2, [pc, #584]	@ (801e578 <USB_EPStartXfer+0x11bc>)
 801e32e:	4694      	mov	ip, r2
 801e330:	4463      	add	r3, ip
 801e332:	21c8      	movs	r1, #200	@ 0xc8
 801e334:	187a      	adds	r2, r7, r1
 801e336:	6013      	str	r3, [r2, #0]
 801e338:	187b      	adds	r3, r7, r1
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	881b      	ldrh	r3, [r3, #0]
 801e33e:	b29b      	uxth	r3, r3
 801e340:	059b      	lsls	r3, r3, #22
 801e342:	0d9b      	lsrs	r3, r3, #22
 801e344:	b29a      	uxth	r2, r3
 801e346:	187b      	adds	r3, r7, r1
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	801a      	strh	r2, [r3, #0]
 801e34c:	1d7b      	adds	r3, r7, #5
 801e34e:	33ff      	adds	r3, #255	@ 0xff
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	2b3e      	cmp	r3, #62	@ 0x3e
 801e354:	d925      	bls.n	801e3a2 <USB_EPStartXfer+0xfe6>
 801e356:	1d7b      	adds	r3, r7, #5
 801e358:	33ff      	adds	r3, #255	@ 0xff
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	095b      	lsrs	r3, r3, #5
 801e35e:	21dc      	movs	r1, #220	@ 0xdc
 801e360:	187a      	adds	r2, r7, r1
 801e362:	6013      	str	r3, [r2, #0]
 801e364:	1d7b      	adds	r3, r7, #5
 801e366:	33ff      	adds	r3, #255	@ 0xff
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	221f      	movs	r2, #31
 801e36c:	4013      	ands	r3, r2
 801e36e:	d104      	bne.n	801e37a <USB_EPStartXfer+0xfbe>
 801e370:	187b      	adds	r3, r7, r1
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	3b01      	subs	r3, #1
 801e376:	187a      	adds	r2, r7, r1
 801e378:	6013      	str	r3, [r2, #0]
 801e37a:	21c8      	movs	r1, #200	@ 0xc8
 801e37c:	187b      	adds	r3, r7, r1
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	881b      	ldrh	r3, [r3, #0]
 801e382:	b29a      	uxth	r2, r3
 801e384:	23dc      	movs	r3, #220	@ 0xdc
 801e386:	18fb      	adds	r3, r7, r3
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	b29b      	uxth	r3, r3
 801e38c:	029b      	lsls	r3, r3, #10
 801e38e:	b29b      	uxth	r3, r3
 801e390:	4313      	orrs	r3, r2
 801e392:	b29b      	uxth	r3, r3
 801e394:	4a79      	ldr	r2, [pc, #484]	@ (801e57c <USB_EPStartXfer+0x11c0>)
 801e396:	4313      	orrs	r3, r2
 801e398:	b29a      	uxth	r2, r3
 801e39a:	187b      	adds	r3, r7, r1
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	801a      	strh	r2, [r3, #0]
 801e3a0:	e058      	b.n	801e454 <USB_EPStartXfer+0x1098>
 801e3a2:	1d7b      	adds	r3, r7, #5
 801e3a4:	33ff      	adds	r3, #255	@ 0xff
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d10b      	bne.n	801e3c4 <USB_EPStartXfer+0x1008>
 801e3ac:	21c8      	movs	r1, #200	@ 0xc8
 801e3ae:	187b      	adds	r3, r7, r1
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	881b      	ldrh	r3, [r3, #0]
 801e3b4:	b29b      	uxth	r3, r3
 801e3b6:	4a71      	ldr	r2, [pc, #452]	@ (801e57c <USB_EPStartXfer+0x11c0>)
 801e3b8:	4313      	orrs	r3, r2
 801e3ba:	b29a      	uxth	r2, r3
 801e3bc:	187b      	adds	r3, r7, r1
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	801a      	strh	r2, [r3, #0]
 801e3c2:	e047      	b.n	801e454 <USB_EPStartXfer+0x1098>
 801e3c4:	1d7b      	adds	r3, r7, #5
 801e3c6:	33ff      	adds	r3, #255	@ 0xff
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	085b      	lsrs	r3, r3, #1
 801e3cc:	21dc      	movs	r1, #220	@ 0xdc
 801e3ce:	187a      	adds	r2, r7, r1
 801e3d0:	6013      	str	r3, [r2, #0]
 801e3d2:	1d7b      	adds	r3, r7, #5
 801e3d4:	33ff      	adds	r3, #255	@ 0xff
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	2201      	movs	r2, #1
 801e3da:	4013      	ands	r3, r2
 801e3dc:	d004      	beq.n	801e3e8 <USB_EPStartXfer+0x102c>
 801e3de:	187b      	adds	r3, r7, r1
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	3301      	adds	r3, #1
 801e3e4:	187a      	adds	r2, r7, r1
 801e3e6:	6013      	str	r3, [r2, #0]
 801e3e8:	21c8      	movs	r1, #200	@ 0xc8
 801e3ea:	187b      	adds	r3, r7, r1
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	881b      	ldrh	r3, [r3, #0]
 801e3f0:	b29a      	uxth	r2, r3
 801e3f2:	23dc      	movs	r3, #220	@ 0xdc
 801e3f4:	18fb      	adds	r3, r7, r3
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	b29b      	uxth	r3, r3
 801e3fa:	029b      	lsls	r3, r3, #10
 801e3fc:	b29b      	uxth	r3, r3
 801e3fe:	4313      	orrs	r3, r2
 801e400:	b29a      	uxth	r2, r3
 801e402:	187b      	adds	r3, r7, r1
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	801a      	strh	r2, [r3, #0]
 801e408:	e024      	b.n	801e454 <USB_EPStartXfer+0x1098>
 801e40a:	683b      	ldr	r3, [r7, #0]
 801e40c:	785b      	ldrb	r3, [r3, #1]
 801e40e:	2b01      	cmp	r3, #1
 801e410:	d120      	bne.n	801e454 <USB_EPStartXfer+0x1098>
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	21d4      	movs	r1, #212	@ 0xd4
 801e416:	187a      	adds	r2, r7, r1
 801e418:	6013      	str	r3, [r2, #0]
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2250      	movs	r2, #80	@ 0x50
 801e41e:	5a9b      	ldrh	r3, [r3, r2]
 801e420:	b29b      	uxth	r3, r3
 801e422:	001a      	movs	r2, r3
 801e424:	187b      	adds	r3, r7, r1
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	189b      	adds	r3, r3, r2
 801e42a:	187a      	adds	r2, r7, r1
 801e42c:	6013      	str	r3, [r2, #0]
 801e42e:	683b      	ldr	r3, [r7, #0]
 801e430:	781b      	ldrb	r3, [r3, #0]
 801e432:	00da      	lsls	r2, r3, #3
 801e434:	187b      	adds	r3, r7, r1
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	18d3      	adds	r3, r2, r3
 801e43a:	4a4f      	ldr	r2, [pc, #316]	@ (801e578 <USB_EPStartXfer+0x11bc>)
 801e43c:	4694      	mov	ip, r2
 801e43e:	4463      	add	r3, ip
 801e440:	21d0      	movs	r1, #208	@ 0xd0
 801e442:	187a      	adds	r2, r7, r1
 801e444:	6013      	str	r3, [r2, #0]
 801e446:	1d7b      	adds	r3, r7, #5
 801e448:	33ff      	adds	r3, #255	@ 0xff
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	b29a      	uxth	r2, r3
 801e44e:	187b      	adds	r3, r7, r1
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	801a      	strh	r2, [r3, #0]
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	22c4      	movs	r2, #196	@ 0xc4
 801e458:	18ba      	adds	r2, r7, r2
 801e45a:	6013      	str	r3, [r2, #0]
 801e45c:	683b      	ldr	r3, [r7, #0]
 801e45e:	785b      	ldrb	r3, [r3, #1]
 801e460:	2b00      	cmp	r3, #0
 801e462:	d000      	beq.n	801e466 <USB_EPStartXfer+0x10aa>
 801e464:	e08c      	b.n	801e580 <USB_EPStartXfer+0x11c4>
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	21bc      	movs	r1, #188	@ 0xbc
 801e46a:	187a      	adds	r2, r7, r1
 801e46c:	6013      	str	r3, [r2, #0]
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	2250      	movs	r2, #80	@ 0x50
 801e472:	5a9b      	ldrh	r3, [r3, r2]
 801e474:	b29b      	uxth	r3, r3
 801e476:	001a      	movs	r2, r3
 801e478:	187b      	adds	r3, r7, r1
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	189b      	adds	r3, r3, r2
 801e47e:	187a      	adds	r2, r7, r1
 801e480:	6013      	str	r3, [r2, #0]
 801e482:	683b      	ldr	r3, [r7, #0]
 801e484:	781b      	ldrb	r3, [r3, #0]
 801e486:	00da      	lsls	r2, r3, #3
 801e488:	187b      	adds	r3, r7, r1
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	18d3      	adds	r3, r2, r3
 801e48e:	4a37      	ldr	r2, [pc, #220]	@ (801e56c <USB_EPStartXfer+0x11b0>)
 801e490:	4694      	mov	ip, r2
 801e492:	4463      	add	r3, ip
 801e494:	21b8      	movs	r1, #184	@ 0xb8
 801e496:	187a      	adds	r2, r7, r1
 801e498:	6013      	str	r3, [r2, #0]
 801e49a:	187b      	adds	r3, r7, r1
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	881b      	ldrh	r3, [r3, #0]
 801e4a0:	b29b      	uxth	r3, r3
 801e4a2:	059b      	lsls	r3, r3, #22
 801e4a4:	0d9b      	lsrs	r3, r3, #22
 801e4a6:	b29a      	uxth	r2, r3
 801e4a8:	187b      	adds	r3, r7, r1
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	801a      	strh	r2, [r3, #0]
 801e4ae:	1d7b      	adds	r3, r7, #5
 801e4b0:	33ff      	adds	r3, #255	@ 0xff
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	2b3e      	cmp	r3, #62	@ 0x3e
 801e4b6:	d925      	bls.n	801e504 <USB_EPStartXfer+0x1148>
 801e4b8:	1d7b      	adds	r3, r7, #5
 801e4ba:	33ff      	adds	r3, #255	@ 0xff
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	095b      	lsrs	r3, r3, #5
 801e4c0:	21d8      	movs	r1, #216	@ 0xd8
 801e4c2:	187a      	adds	r2, r7, r1
 801e4c4:	6013      	str	r3, [r2, #0]
 801e4c6:	1d7b      	adds	r3, r7, #5
 801e4c8:	33ff      	adds	r3, #255	@ 0xff
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	221f      	movs	r2, #31
 801e4ce:	4013      	ands	r3, r2
 801e4d0:	d104      	bne.n	801e4dc <USB_EPStartXfer+0x1120>
 801e4d2:	187b      	adds	r3, r7, r1
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	3b01      	subs	r3, #1
 801e4d8:	187a      	adds	r2, r7, r1
 801e4da:	6013      	str	r3, [r2, #0]
 801e4dc:	21b8      	movs	r1, #184	@ 0xb8
 801e4de:	187b      	adds	r3, r7, r1
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	881b      	ldrh	r3, [r3, #0]
 801e4e4:	b29a      	uxth	r2, r3
 801e4e6:	23d8      	movs	r3, #216	@ 0xd8
 801e4e8:	18fb      	adds	r3, r7, r3
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	b29b      	uxth	r3, r3
 801e4ee:	029b      	lsls	r3, r3, #10
 801e4f0:	b29b      	uxth	r3, r3
 801e4f2:	4313      	orrs	r3, r2
 801e4f4:	b29b      	uxth	r3, r3
 801e4f6:	4a21      	ldr	r2, [pc, #132]	@ (801e57c <USB_EPStartXfer+0x11c0>)
 801e4f8:	4313      	orrs	r3, r2
 801e4fa:	b29a      	uxth	r2, r3
 801e4fc:	187b      	adds	r3, r7, r1
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	801a      	strh	r2, [r3, #0]
 801e502:	e062      	b.n	801e5ca <USB_EPStartXfer+0x120e>
 801e504:	1d7b      	adds	r3, r7, #5
 801e506:	33ff      	adds	r3, #255	@ 0xff
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d10b      	bne.n	801e526 <USB_EPStartXfer+0x116a>
 801e50e:	21b8      	movs	r1, #184	@ 0xb8
 801e510:	187b      	adds	r3, r7, r1
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	881b      	ldrh	r3, [r3, #0]
 801e516:	b29b      	uxth	r3, r3
 801e518:	4a18      	ldr	r2, [pc, #96]	@ (801e57c <USB_EPStartXfer+0x11c0>)
 801e51a:	4313      	orrs	r3, r2
 801e51c:	b29a      	uxth	r2, r3
 801e51e:	187b      	adds	r3, r7, r1
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	801a      	strh	r2, [r3, #0]
 801e524:	e051      	b.n	801e5ca <USB_EPStartXfer+0x120e>
 801e526:	1d7b      	adds	r3, r7, #5
 801e528:	33ff      	adds	r3, #255	@ 0xff
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	085b      	lsrs	r3, r3, #1
 801e52e:	21d8      	movs	r1, #216	@ 0xd8
 801e530:	187a      	adds	r2, r7, r1
 801e532:	6013      	str	r3, [r2, #0]
 801e534:	1d7b      	adds	r3, r7, #5
 801e536:	33ff      	adds	r3, #255	@ 0xff
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	2201      	movs	r2, #1
 801e53c:	4013      	ands	r3, r2
 801e53e:	d004      	beq.n	801e54a <USB_EPStartXfer+0x118e>
 801e540:	187b      	adds	r3, r7, r1
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	3301      	adds	r3, #1
 801e546:	187a      	adds	r2, r7, r1
 801e548:	6013      	str	r3, [r2, #0]
 801e54a:	21b8      	movs	r1, #184	@ 0xb8
 801e54c:	187b      	adds	r3, r7, r1
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	881b      	ldrh	r3, [r3, #0]
 801e552:	b29a      	uxth	r2, r3
 801e554:	23d8      	movs	r3, #216	@ 0xd8
 801e556:	18fb      	adds	r3, r7, r3
 801e558:	681b      	ldr	r3, [r3, #0]
 801e55a:	b29b      	uxth	r3, r3
 801e55c:	029b      	lsls	r3, r3, #10
 801e55e:	b29b      	uxth	r3, r3
 801e560:	4313      	orrs	r3, r2
 801e562:	b29a      	uxth	r2, r3
 801e564:	187b      	adds	r3, r7, r1
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	801a      	strh	r2, [r3, #0]
 801e56a:	e02e      	b.n	801e5ca <USB_EPStartXfer+0x120e>
 801e56c:	00000406 	.word	0x00000406
 801e570:	ffff8f8f 	.word	0xffff8f8f
 801e574:	ffff80c0 	.word	0xffff80c0
 801e578:	00000402 	.word	0x00000402
 801e57c:	ffff8000 	.word	0xffff8000
 801e580:	683b      	ldr	r3, [r7, #0]
 801e582:	785b      	ldrb	r3, [r3, #1]
 801e584:	2b01      	cmp	r3, #1
 801e586:	d120      	bne.n	801e5ca <USB_EPStartXfer+0x120e>
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	2250      	movs	r2, #80	@ 0x50
 801e58c:	5a9b      	ldrh	r3, [r3, r2]
 801e58e:	b29b      	uxth	r3, r3
 801e590:	001a      	movs	r2, r3
 801e592:	21c4      	movs	r1, #196	@ 0xc4
 801e594:	187b      	adds	r3, r7, r1
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	189b      	adds	r3, r3, r2
 801e59a:	187a      	adds	r2, r7, r1
 801e59c:	6013      	str	r3, [r2, #0]
 801e59e:	683b      	ldr	r3, [r7, #0]
 801e5a0:	781b      	ldrb	r3, [r3, #0]
 801e5a2:	00da      	lsls	r2, r3, #3
 801e5a4:	187b      	adds	r3, r7, r1
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	18d3      	adds	r3, r2, r3
 801e5aa:	4a1d      	ldr	r2, [pc, #116]	@ (801e620 <USB_EPStartXfer+0x1264>)
 801e5ac:	4694      	mov	ip, r2
 801e5ae:	4463      	add	r3, ip
 801e5b0:	21c0      	movs	r1, #192	@ 0xc0
 801e5b2:	187a      	adds	r2, r7, r1
 801e5b4:	6013      	str	r3, [r2, #0]
 801e5b6:	1d7b      	adds	r3, r7, #5
 801e5b8:	33ff      	adds	r3, #255	@ 0xff
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	b29a      	uxth	r2, r3
 801e5be:	187b      	adds	r3, r7, r1
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	801a      	strh	r2, [r3, #0]
 801e5c4:	e001      	b.n	801e5ca <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801e5c6:	2301      	movs	r3, #1
 801e5c8:	e025      	b.n	801e616 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e5ca:	687a      	ldr	r2, [r7, #4]
 801e5cc:	683b      	ldr	r3, [r7, #0]
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	009b      	lsls	r3, r3, #2
 801e5d2:	18d3      	adds	r3, r2, r3
 801e5d4:	881b      	ldrh	r3, [r3, #0]
 801e5d6:	b29a      	uxth	r2, r3
 801e5d8:	208a      	movs	r0, #138	@ 0x8a
 801e5da:	183b      	adds	r3, r7, r0
 801e5dc:	4911      	ldr	r1, [pc, #68]	@ (801e624 <USB_EPStartXfer+0x1268>)
 801e5de:	400a      	ands	r2, r1
 801e5e0:	801a      	strh	r2, [r3, #0]
 801e5e2:	183b      	adds	r3, r7, r0
 801e5e4:	183a      	adds	r2, r7, r0
 801e5e6:	8812      	ldrh	r2, [r2, #0]
 801e5e8:	2180      	movs	r1, #128	@ 0x80
 801e5ea:	0149      	lsls	r1, r1, #5
 801e5ec:	404a      	eors	r2, r1
 801e5ee:	801a      	strh	r2, [r3, #0]
 801e5f0:	183b      	adds	r3, r7, r0
 801e5f2:	183a      	adds	r2, r7, r0
 801e5f4:	8812      	ldrh	r2, [r2, #0]
 801e5f6:	2180      	movs	r1, #128	@ 0x80
 801e5f8:	0189      	lsls	r1, r1, #6
 801e5fa:	404a      	eors	r2, r1
 801e5fc:	801a      	strh	r2, [r3, #0]
 801e5fe:	687a      	ldr	r2, [r7, #4]
 801e600:	683b      	ldr	r3, [r7, #0]
 801e602:	781b      	ldrb	r3, [r3, #0]
 801e604:	009b      	lsls	r3, r3, #2
 801e606:	18d3      	adds	r3, r2, r3
 801e608:	183a      	adds	r2, r7, r0
 801e60a:	8812      	ldrh	r2, [r2, #0]
 801e60c:	4906      	ldr	r1, [pc, #24]	@ (801e628 <USB_EPStartXfer+0x126c>)
 801e60e:	430a      	orrs	r2, r1
 801e610:	b292      	uxth	r2, r2
 801e612:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e614:	2300      	movs	r3, #0
}
 801e616:	0018      	movs	r0, r3
 801e618:	46bd      	mov	sp, r7
 801e61a:	b043      	add	sp, #268	@ 0x10c
 801e61c:	bd90      	pop	{r4, r7, pc}
 801e61e:	46c0      	nop			@ (mov r8, r8)
 801e620:	00000406 	.word	0x00000406
 801e624:	ffffbf8f 	.word	0xffffbf8f
 801e628:	ffff8080 	.word	0xffff8080

0801e62c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	b084      	sub	sp, #16
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
 801e634:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801e636:	683b      	ldr	r3, [r7, #0]
 801e638:	785b      	ldrb	r3, [r3, #1]
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d01d      	beq.n	801e67a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801e63e:	687a      	ldr	r2, [r7, #4]
 801e640:	683b      	ldr	r3, [r7, #0]
 801e642:	781b      	ldrb	r3, [r3, #0]
 801e644:	009b      	lsls	r3, r3, #2
 801e646:	18d3      	adds	r3, r2, r3
 801e648:	881b      	ldrh	r3, [r3, #0]
 801e64a:	b29a      	uxth	r2, r3
 801e64c:	200c      	movs	r0, #12
 801e64e:	183b      	adds	r3, r7, r0
 801e650:	491b      	ldr	r1, [pc, #108]	@ (801e6c0 <USB_EPSetStall+0x94>)
 801e652:	400a      	ands	r2, r1
 801e654:	801a      	strh	r2, [r3, #0]
 801e656:	183b      	adds	r3, r7, r0
 801e658:	183a      	adds	r2, r7, r0
 801e65a:	8812      	ldrh	r2, [r2, #0]
 801e65c:	2110      	movs	r1, #16
 801e65e:	404a      	eors	r2, r1
 801e660:	801a      	strh	r2, [r3, #0]
 801e662:	687a      	ldr	r2, [r7, #4]
 801e664:	683b      	ldr	r3, [r7, #0]
 801e666:	781b      	ldrb	r3, [r3, #0]
 801e668:	009b      	lsls	r3, r3, #2
 801e66a:	18d3      	adds	r3, r2, r3
 801e66c:	183a      	adds	r2, r7, r0
 801e66e:	8812      	ldrh	r2, [r2, #0]
 801e670:	4914      	ldr	r1, [pc, #80]	@ (801e6c4 <USB_EPSetStall+0x98>)
 801e672:	430a      	orrs	r2, r1
 801e674:	b292      	uxth	r2, r2
 801e676:	801a      	strh	r2, [r3, #0]
 801e678:	e01d      	b.n	801e6b6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801e67a:	687a      	ldr	r2, [r7, #4]
 801e67c:	683b      	ldr	r3, [r7, #0]
 801e67e:	781b      	ldrb	r3, [r3, #0]
 801e680:	009b      	lsls	r3, r3, #2
 801e682:	18d3      	adds	r3, r2, r3
 801e684:	881b      	ldrh	r3, [r3, #0]
 801e686:	b29a      	uxth	r2, r3
 801e688:	200e      	movs	r0, #14
 801e68a:	183b      	adds	r3, r7, r0
 801e68c:	490e      	ldr	r1, [pc, #56]	@ (801e6c8 <USB_EPSetStall+0x9c>)
 801e68e:	400a      	ands	r2, r1
 801e690:	801a      	strh	r2, [r3, #0]
 801e692:	183b      	adds	r3, r7, r0
 801e694:	183a      	adds	r2, r7, r0
 801e696:	8812      	ldrh	r2, [r2, #0]
 801e698:	2180      	movs	r1, #128	@ 0x80
 801e69a:	0149      	lsls	r1, r1, #5
 801e69c:	404a      	eors	r2, r1
 801e69e:	801a      	strh	r2, [r3, #0]
 801e6a0:	687a      	ldr	r2, [r7, #4]
 801e6a2:	683b      	ldr	r3, [r7, #0]
 801e6a4:	781b      	ldrb	r3, [r3, #0]
 801e6a6:	009b      	lsls	r3, r3, #2
 801e6a8:	18d3      	adds	r3, r2, r3
 801e6aa:	183a      	adds	r2, r7, r0
 801e6ac:	8812      	ldrh	r2, [r2, #0]
 801e6ae:	4905      	ldr	r1, [pc, #20]	@ (801e6c4 <USB_EPSetStall+0x98>)
 801e6b0:	430a      	orrs	r2, r1
 801e6b2:	b292      	uxth	r2, r2
 801e6b4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e6b6:	2300      	movs	r3, #0
}
 801e6b8:	0018      	movs	r0, r3
 801e6ba:	46bd      	mov	sp, r7
 801e6bc:	b004      	add	sp, #16
 801e6be:	bd80      	pop	{r7, pc}
 801e6c0:	ffff8fbf 	.word	0xffff8fbf
 801e6c4:	ffff8080 	.word	0xffff8080
 801e6c8:	ffffbf8f 	.word	0xffffbf8f

0801e6cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e6cc:	b580      	push	{r7, lr}
 801e6ce:	b086      	sub	sp, #24
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
 801e6d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e6d6:	683b      	ldr	r3, [r7, #0]
 801e6d8:	7b1b      	ldrb	r3, [r3, #12]
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d000      	beq.n	801e6e0 <USB_EPClearStall+0x14>
 801e6de:	e095      	b.n	801e80c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801e6e0:	683b      	ldr	r3, [r7, #0]
 801e6e2:	785b      	ldrb	r3, [r3, #1]
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d046      	beq.n	801e776 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e6e8:	687a      	ldr	r2, [r7, #4]
 801e6ea:	683b      	ldr	r3, [r7, #0]
 801e6ec:	781b      	ldrb	r3, [r3, #0]
 801e6ee:	009b      	lsls	r3, r3, #2
 801e6f0:	18d2      	adds	r2, r2, r3
 801e6f2:	2110      	movs	r1, #16
 801e6f4:	187b      	adds	r3, r7, r1
 801e6f6:	8812      	ldrh	r2, [r2, #0]
 801e6f8:	801a      	strh	r2, [r3, #0]
 801e6fa:	187b      	adds	r3, r7, r1
 801e6fc:	881b      	ldrh	r3, [r3, #0]
 801e6fe:	2240      	movs	r2, #64	@ 0x40
 801e700:	4013      	ands	r3, r2
 801e702:	d016      	beq.n	801e732 <USB_EPClearStall+0x66>
 801e704:	687a      	ldr	r2, [r7, #4]
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	781b      	ldrb	r3, [r3, #0]
 801e70a:	009b      	lsls	r3, r3, #2
 801e70c:	18d3      	adds	r3, r2, r3
 801e70e:	881b      	ldrh	r3, [r3, #0]
 801e710:	b29a      	uxth	r2, r3
 801e712:	200e      	movs	r0, #14
 801e714:	183b      	adds	r3, r7, r0
 801e716:	4940      	ldr	r1, [pc, #256]	@ (801e818 <USB_EPClearStall+0x14c>)
 801e718:	400a      	ands	r2, r1
 801e71a:	801a      	strh	r2, [r3, #0]
 801e71c:	687a      	ldr	r2, [r7, #4]
 801e71e:	683b      	ldr	r3, [r7, #0]
 801e720:	781b      	ldrb	r3, [r3, #0]
 801e722:	009b      	lsls	r3, r3, #2
 801e724:	18d3      	adds	r3, r2, r3
 801e726:	183a      	adds	r2, r7, r0
 801e728:	8812      	ldrh	r2, [r2, #0]
 801e72a:	493c      	ldr	r1, [pc, #240]	@ (801e81c <USB_EPClearStall+0x150>)
 801e72c:	430a      	orrs	r2, r1
 801e72e:	b292      	uxth	r2, r2
 801e730:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e732:	683b      	ldr	r3, [r7, #0]
 801e734:	78db      	ldrb	r3, [r3, #3]
 801e736:	2b01      	cmp	r3, #1
 801e738:	d068      	beq.n	801e80c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e73a:	687a      	ldr	r2, [r7, #4]
 801e73c:	683b      	ldr	r3, [r7, #0]
 801e73e:	781b      	ldrb	r3, [r3, #0]
 801e740:	009b      	lsls	r3, r3, #2
 801e742:	18d3      	adds	r3, r2, r3
 801e744:	881b      	ldrh	r3, [r3, #0]
 801e746:	b29a      	uxth	r2, r3
 801e748:	200c      	movs	r0, #12
 801e74a:	183b      	adds	r3, r7, r0
 801e74c:	4934      	ldr	r1, [pc, #208]	@ (801e820 <USB_EPClearStall+0x154>)
 801e74e:	400a      	ands	r2, r1
 801e750:	801a      	strh	r2, [r3, #0]
 801e752:	183b      	adds	r3, r7, r0
 801e754:	183a      	adds	r2, r7, r0
 801e756:	8812      	ldrh	r2, [r2, #0]
 801e758:	2120      	movs	r1, #32
 801e75a:	404a      	eors	r2, r1
 801e75c:	801a      	strh	r2, [r3, #0]
 801e75e:	687a      	ldr	r2, [r7, #4]
 801e760:	683b      	ldr	r3, [r7, #0]
 801e762:	781b      	ldrb	r3, [r3, #0]
 801e764:	009b      	lsls	r3, r3, #2
 801e766:	18d3      	adds	r3, r2, r3
 801e768:	183a      	adds	r2, r7, r0
 801e76a:	8812      	ldrh	r2, [r2, #0]
 801e76c:	492d      	ldr	r1, [pc, #180]	@ (801e824 <USB_EPClearStall+0x158>)
 801e76e:	430a      	orrs	r2, r1
 801e770:	b292      	uxth	r2, r2
 801e772:	801a      	strh	r2, [r3, #0]
 801e774:	e04a      	b.n	801e80c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e776:	687a      	ldr	r2, [r7, #4]
 801e778:	683b      	ldr	r3, [r7, #0]
 801e77a:	781b      	ldrb	r3, [r3, #0]
 801e77c:	009b      	lsls	r3, r3, #2
 801e77e:	18d2      	adds	r2, r2, r3
 801e780:	2116      	movs	r1, #22
 801e782:	187b      	adds	r3, r7, r1
 801e784:	8812      	ldrh	r2, [r2, #0]
 801e786:	801a      	strh	r2, [r3, #0]
 801e788:	187b      	adds	r3, r7, r1
 801e78a:	881a      	ldrh	r2, [r3, #0]
 801e78c:	2380      	movs	r3, #128	@ 0x80
 801e78e:	01db      	lsls	r3, r3, #7
 801e790:	4013      	ands	r3, r2
 801e792:	d016      	beq.n	801e7c2 <USB_EPClearStall+0xf6>
 801e794:	687a      	ldr	r2, [r7, #4]
 801e796:	683b      	ldr	r3, [r7, #0]
 801e798:	781b      	ldrb	r3, [r3, #0]
 801e79a:	009b      	lsls	r3, r3, #2
 801e79c:	18d3      	adds	r3, r2, r3
 801e79e:	881b      	ldrh	r3, [r3, #0]
 801e7a0:	b29a      	uxth	r2, r3
 801e7a2:	2014      	movs	r0, #20
 801e7a4:	183b      	adds	r3, r7, r0
 801e7a6:	491c      	ldr	r1, [pc, #112]	@ (801e818 <USB_EPClearStall+0x14c>)
 801e7a8:	400a      	ands	r2, r1
 801e7aa:	801a      	strh	r2, [r3, #0]
 801e7ac:	687a      	ldr	r2, [r7, #4]
 801e7ae:	683b      	ldr	r3, [r7, #0]
 801e7b0:	781b      	ldrb	r3, [r3, #0]
 801e7b2:	009b      	lsls	r3, r3, #2
 801e7b4:	18d3      	adds	r3, r2, r3
 801e7b6:	183a      	adds	r2, r7, r0
 801e7b8:	8812      	ldrh	r2, [r2, #0]
 801e7ba:	491b      	ldr	r1, [pc, #108]	@ (801e828 <USB_EPClearStall+0x15c>)
 801e7bc:	430a      	orrs	r2, r1
 801e7be:	b292      	uxth	r2, r2
 801e7c0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e7c2:	687a      	ldr	r2, [r7, #4]
 801e7c4:	683b      	ldr	r3, [r7, #0]
 801e7c6:	781b      	ldrb	r3, [r3, #0]
 801e7c8:	009b      	lsls	r3, r3, #2
 801e7ca:	18d3      	adds	r3, r2, r3
 801e7cc:	881b      	ldrh	r3, [r3, #0]
 801e7ce:	b29a      	uxth	r2, r3
 801e7d0:	2012      	movs	r0, #18
 801e7d2:	183b      	adds	r3, r7, r0
 801e7d4:	4915      	ldr	r1, [pc, #84]	@ (801e82c <USB_EPClearStall+0x160>)
 801e7d6:	400a      	ands	r2, r1
 801e7d8:	801a      	strh	r2, [r3, #0]
 801e7da:	183b      	adds	r3, r7, r0
 801e7dc:	183a      	adds	r2, r7, r0
 801e7de:	8812      	ldrh	r2, [r2, #0]
 801e7e0:	2180      	movs	r1, #128	@ 0x80
 801e7e2:	0149      	lsls	r1, r1, #5
 801e7e4:	404a      	eors	r2, r1
 801e7e6:	801a      	strh	r2, [r3, #0]
 801e7e8:	183b      	adds	r3, r7, r0
 801e7ea:	183a      	adds	r2, r7, r0
 801e7ec:	8812      	ldrh	r2, [r2, #0]
 801e7ee:	2180      	movs	r1, #128	@ 0x80
 801e7f0:	0189      	lsls	r1, r1, #6
 801e7f2:	404a      	eors	r2, r1
 801e7f4:	801a      	strh	r2, [r3, #0]
 801e7f6:	687a      	ldr	r2, [r7, #4]
 801e7f8:	683b      	ldr	r3, [r7, #0]
 801e7fa:	781b      	ldrb	r3, [r3, #0]
 801e7fc:	009b      	lsls	r3, r3, #2
 801e7fe:	18d3      	adds	r3, r2, r3
 801e800:	183a      	adds	r2, r7, r0
 801e802:	8812      	ldrh	r2, [r2, #0]
 801e804:	4907      	ldr	r1, [pc, #28]	@ (801e824 <USB_EPClearStall+0x158>)
 801e806:	430a      	orrs	r2, r1
 801e808:	b292      	uxth	r2, r2
 801e80a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801e80c:	2300      	movs	r3, #0
}
 801e80e:	0018      	movs	r0, r3
 801e810:	46bd      	mov	sp, r7
 801e812:	b006      	add	sp, #24
 801e814:	bd80      	pop	{r7, pc}
 801e816:	46c0      	nop			@ (mov r8, r8)
 801e818:	ffff8f8f 	.word	0xffff8f8f
 801e81c:	ffff80c0 	.word	0xffff80c0
 801e820:	ffff8fbf 	.word	0xffff8fbf
 801e824:	ffff8080 	.word	0xffff8080
 801e828:	ffffc080 	.word	0xffffc080
 801e82c:	ffffbf8f 	.word	0xffffbf8f

0801e830 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b082      	sub	sp, #8
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
 801e838:	000a      	movs	r2, r1
 801e83a:	1cfb      	adds	r3, r7, #3
 801e83c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801e83e:	1cfb      	adds	r3, r7, #3
 801e840:	781b      	ldrb	r3, [r3, #0]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d103      	bne.n	801e84e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	224c      	movs	r2, #76	@ 0x4c
 801e84a:	2180      	movs	r1, #128	@ 0x80
 801e84c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801e84e:	2300      	movs	r3, #0
}
 801e850:	0018      	movs	r0, r3
 801e852:	46bd      	mov	sp, r7
 801e854:	b002      	add	sp, #8
 801e856:	bd80      	pop	{r7, pc}

0801e858 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801e858:	b580      	push	{r7, lr}
 801e85a:	b082      	sub	sp, #8
 801e85c:	af00      	add	r7, sp, #0
 801e85e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	2258      	movs	r2, #88	@ 0x58
 801e864:	5a9b      	ldrh	r3, [r3, r2]
 801e866:	b29b      	uxth	r3, r3
 801e868:	4a05      	ldr	r2, [pc, #20]	@ (801e880 <USB_DevConnect+0x28>)
 801e86a:	4313      	orrs	r3, r2
 801e86c:	b299      	uxth	r1, r3
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	2258      	movs	r2, #88	@ 0x58
 801e872:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e874:	2300      	movs	r3, #0
}
 801e876:	0018      	movs	r0, r3
 801e878:	46bd      	mov	sp, r7
 801e87a:	b002      	add	sp, #8
 801e87c:	bd80      	pop	{r7, pc}
 801e87e:	46c0      	nop			@ (mov r8, r8)
 801e880:	ffff8000 	.word	0xffff8000

0801e884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801e884:	b580      	push	{r7, lr}
 801e886:	b084      	sub	sp, #16
 801e888:	af00      	add	r7, sp, #0
 801e88a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	2244      	movs	r2, #68	@ 0x44
 801e890:	5a9b      	ldrh	r3, [r3, r2]
 801e892:	b29b      	uxth	r3, r3
 801e894:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801e896:	68fb      	ldr	r3, [r7, #12]
}
 801e898:	0018      	movs	r0, r3
 801e89a:	46bd      	mov	sp, r7
 801e89c:	b004      	add	sp, #16
 801e89e:	bd80      	pop	{r7, pc}

0801e8a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e8a0:	b580      	push	{r7, lr}
 801e8a2:	b08a      	sub	sp, #40	@ 0x28
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	60f8      	str	r0, [r7, #12]
 801e8a8:	60b9      	str	r1, [r7, #8]
 801e8aa:	0019      	movs	r1, r3
 801e8ac:	1dbb      	adds	r3, r7, #6
 801e8ae:	801a      	strh	r2, [r3, #0]
 801e8b0:	1d3b      	adds	r3, r7, #4
 801e8b2:	1c0a      	adds	r2, r1, #0
 801e8b4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801e8b6:	1d3b      	adds	r3, r7, #4
 801e8b8:	881b      	ldrh	r3, [r3, #0]
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	085b      	lsrs	r3, r3, #1
 801e8be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e8c4:	68bb      	ldr	r3, [r7, #8]
 801e8c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e8c8:	1dbb      	adds	r3, r7, #6
 801e8ca:	881a      	ldrh	r2, [r3, #0]
 801e8cc:	697b      	ldr	r3, [r7, #20]
 801e8ce:	18d3      	adds	r3, r2, r3
 801e8d0:	2280      	movs	r2, #128	@ 0x80
 801e8d2:	00d2      	lsls	r2, r2, #3
 801e8d4:	4694      	mov	ip, r2
 801e8d6:	4463      	add	r3, ip
 801e8d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e8da:	69bb      	ldr	r3, [r7, #24]
 801e8dc:	627b      	str	r3, [r7, #36]	@ 0x24
 801e8de:	e020      	b.n	801e922 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801e8e0:	69fb      	ldr	r3, [r7, #28]
 801e8e2:	781a      	ldrb	r2, [r3, #0]
 801e8e4:	2112      	movs	r1, #18
 801e8e6:	187b      	adds	r3, r7, r1
 801e8e8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801e8ea:	69fb      	ldr	r3, [r7, #28]
 801e8ec:	3301      	adds	r3, #1
 801e8ee:	781b      	ldrb	r3, [r3, #0]
 801e8f0:	021b      	lsls	r3, r3, #8
 801e8f2:	b21a      	sxth	r2, r3
 801e8f4:	187b      	adds	r3, r7, r1
 801e8f6:	2000      	movs	r0, #0
 801e8f8:	5e1b      	ldrsh	r3, [r3, r0]
 801e8fa:	4313      	orrs	r3, r2
 801e8fc:	b21a      	sxth	r2, r3
 801e8fe:	187b      	adds	r3, r7, r1
 801e900:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801e902:	6a3b      	ldr	r3, [r7, #32]
 801e904:	187a      	adds	r2, r7, r1
 801e906:	8812      	ldrh	r2, [r2, #0]
 801e908:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801e90a:	6a3b      	ldr	r3, [r7, #32]
 801e90c:	3302      	adds	r3, #2
 801e90e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801e910:	69fb      	ldr	r3, [r7, #28]
 801e912:	3301      	adds	r3, #1
 801e914:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801e916:	69fb      	ldr	r3, [r7, #28]
 801e918:	3301      	adds	r3, #1
 801e91a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801e91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e91e:	3b01      	subs	r3, #1
 801e920:	627b      	str	r3, [r7, #36]	@ 0x24
 801e922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e924:	2b00      	cmp	r3, #0
 801e926:	d1db      	bne.n	801e8e0 <USB_WritePMA+0x40>
  }
}
 801e928:	46c0      	nop			@ (mov r8, r8)
 801e92a:	46c0      	nop			@ (mov r8, r8)
 801e92c:	46bd      	mov	sp, r7
 801e92e:	b00a      	add	sp, #40	@ 0x28
 801e930:	bd80      	pop	{r7, pc}

0801e932 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e932:	b580      	push	{r7, lr}
 801e934:	b08a      	sub	sp, #40	@ 0x28
 801e936:	af00      	add	r7, sp, #0
 801e938:	60f8      	str	r0, [r7, #12]
 801e93a:	60b9      	str	r1, [r7, #8]
 801e93c:	0019      	movs	r1, r3
 801e93e:	1dbb      	adds	r3, r7, #6
 801e940:	801a      	strh	r2, [r3, #0]
 801e942:	1d3b      	adds	r3, r7, #4
 801e944:	1c0a      	adds	r2, r1, #0
 801e946:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801e948:	1d3b      	adds	r3, r7, #4
 801e94a:	881b      	ldrh	r3, [r3, #0]
 801e94c:	085b      	lsrs	r3, r3, #1
 801e94e:	b29b      	uxth	r3, r3
 801e950:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e956:	68bb      	ldr	r3, [r7, #8]
 801e958:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e95a:	1dbb      	adds	r3, r7, #6
 801e95c:	881a      	ldrh	r2, [r3, #0]
 801e95e:	697b      	ldr	r3, [r7, #20]
 801e960:	18d3      	adds	r3, r2, r3
 801e962:	2280      	movs	r2, #128	@ 0x80
 801e964:	00d2      	lsls	r2, r2, #3
 801e966:	4694      	mov	ip, r2
 801e968:	4463      	add	r3, ip
 801e96a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e96c:	69bb      	ldr	r3, [r7, #24]
 801e96e:	627b      	str	r3, [r7, #36]	@ 0x24
 801e970:	e018      	b.n	801e9a4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801e972:	6a3b      	ldr	r3, [r7, #32]
 801e974:	881b      	ldrh	r3, [r3, #0]
 801e976:	b29b      	uxth	r3, r3
 801e978:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801e97a:	6a3b      	ldr	r3, [r7, #32]
 801e97c:	3302      	adds	r3, #2
 801e97e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801e980:	693b      	ldr	r3, [r7, #16]
 801e982:	b2da      	uxtb	r2, r3
 801e984:	69fb      	ldr	r3, [r7, #28]
 801e986:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801e988:	69fb      	ldr	r3, [r7, #28]
 801e98a:	3301      	adds	r3, #1
 801e98c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801e98e:	693b      	ldr	r3, [r7, #16]
 801e990:	0a1b      	lsrs	r3, r3, #8
 801e992:	b2da      	uxtb	r2, r3
 801e994:	69fb      	ldr	r3, [r7, #28]
 801e996:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801e998:	69fb      	ldr	r3, [r7, #28]
 801e99a:	3301      	adds	r3, #1
 801e99c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a0:	3b01      	subs	r3, #1
 801e9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d1e3      	bne.n	801e972 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801e9aa:	1d3b      	adds	r3, r7, #4
 801e9ac:	881b      	ldrh	r3, [r3, #0]
 801e9ae:	2201      	movs	r2, #1
 801e9b0:	4013      	ands	r3, r2
 801e9b2:	b29b      	uxth	r3, r3
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d007      	beq.n	801e9c8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801e9b8:	6a3b      	ldr	r3, [r7, #32]
 801e9ba:	881b      	ldrh	r3, [r3, #0]
 801e9bc:	b29b      	uxth	r3, r3
 801e9be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801e9c0:	693b      	ldr	r3, [r7, #16]
 801e9c2:	b2da      	uxtb	r2, r3
 801e9c4:	69fb      	ldr	r3, [r7, #28]
 801e9c6:	701a      	strb	r2, [r3, #0]
  }
}
 801e9c8:	46c0      	nop			@ (mov r8, r8)
 801e9ca:	46bd      	mov	sp, r7
 801e9cc:	b00a      	add	sp, #40	@ 0x28
 801e9ce:	bd80      	pop	{r7, pc}

0801e9d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b084      	sub	sp, #16
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
 801e9d8:	000a      	movs	r2, r1
 801e9da:	1cfb      	adds	r3, r7, #3
 801e9dc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801e9de:	230f      	movs	r3, #15
 801e9e0:	18fb      	adds	r3, r7, r3
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	7c1b      	ldrb	r3, [r3, #16]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d116      	bne.n	801ea1c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801e9ee:	2380      	movs	r3, #128	@ 0x80
 801e9f0:	009b      	lsls	r3, r3, #2
 801e9f2:	6878      	ldr	r0, [r7, #4]
 801e9f4:	2202      	movs	r2, #2
 801e9f6:	2181      	movs	r1, #129	@ 0x81
 801e9f8:	f002 f8eb 	bl	8020bd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2201      	movs	r2, #1
 801ea00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801ea02:	2380      	movs	r3, #128	@ 0x80
 801ea04:	009b      	lsls	r3, r3, #2
 801ea06:	6878      	ldr	r0, [r7, #4]
 801ea08:	2202      	movs	r2, #2
 801ea0a:	2101      	movs	r1, #1
 801ea0c:	f002 f8e1 	bl	8020bd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ea10:	687a      	ldr	r2, [r7, #4]
 801ea12:	23b6      	movs	r3, #182	@ 0xb6
 801ea14:	005b      	lsls	r3, r3, #1
 801ea16:	2101      	movs	r1, #1
 801ea18:	50d1      	str	r1, [r2, r3]
 801ea1a:	e013      	b.n	801ea44 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801ea1c:	6878      	ldr	r0, [r7, #4]
 801ea1e:	2340      	movs	r3, #64	@ 0x40
 801ea20:	2202      	movs	r2, #2
 801ea22:	2181      	movs	r1, #129	@ 0x81
 801ea24:	f002 f8d5 	bl	8020bd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	2201      	movs	r2, #1
 801ea2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801ea2e:	6878      	ldr	r0, [r7, #4]
 801ea30:	2340      	movs	r3, #64	@ 0x40
 801ea32:	2202      	movs	r2, #2
 801ea34:	2101      	movs	r1, #1
 801ea36:	f002 f8cc 	bl	8020bd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ea3a:	687a      	ldr	r2, [r7, #4]
 801ea3c:	23b6      	movs	r3, #182	@ 0xb6
 801ea3e:	005b      	lsls	r3, r3, #1
 801ea40:	2101      	movs	r1, #1
 801ea42:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801ea44:	6878      	ldr	r0, [r7, #4]
 801ea46:	2308      	movs	r3, #8
 801ea48:	2203      	movs	r2, #3
 801ea4a:	2182      	movs	r1, #130	@ 0x82
 801ea4c:	f002 f8c1 	bl	8020bd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	2201      	movs	r2, #1
 801ea54:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801ea56:	2387      	movs	r3, #135	@ 0x87
 801ea58:	009b      	lsls	r3, r3, #2
 801ea5a:	0018      	movs	r0, r3
 801ea5c:	f002 fa52 	bl	8020f04 <USBD_static_malloc>
 801ea60:	0001      	movs	r1, r0
 801ea62:	687a      	ldr	r2, [r7, #4]
 801ea64:	23ae      	movs	r3, #174	@ 0xae
 801ea66:	009b      	lsls	r3, r3, #2
 801ea68:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801ea6a:	687a      	ldr	r2, [r7, #4]
 801ea6c:	23ae      	movs	r3, #174	@ 0xae
 801ea6e:	009b      	lsls	r3, r3, #2
 801ea70:	58d3      	ldr	r3, [r2, r3]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d104      	bne.n	801ea80 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801ea76:	230f      	movs	r3, #15
 801ea78:	18fb      	adds	r3, r7, r3
 801ea7a:	2201      	movs	r2, #1
 801ea7c:	701a      	strb	r2, [r3, #0]
 801ea7e:	e02c      	b.n	801eada <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ea80:	687a      	ldr	r2, [r7, #4]
 801ea82:	23ae      	movs	r3, #174	@ 0xae
 801ea84:	009b      	lsls	r3, r3, #2
 801ea86:	58d3      	ldr	r3, [r2, r3]
 801ea88:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801ea8a:	687a      	ldr	r2, [r7, #4]
 801ea8c:	23af      	movs	r3, #175	@ 0xaf
 801ea8e:	009b      	lsls	r3, r3, #2
 801ea90:	58d3      	ldr	r3, [r2, r3]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801ea96:	68ba      	ldr	r2, [r7, #8]
 801ea98:	2385      	movs	r3, #133	@ 0x85
 801ea9a:	009b      	lsls	r3, r3, #2
 801ea9c:	2100      	movs	r1, #0
 801ea9e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801eaa0:	68ba      	ldr	r2, [r7, #8]
 801eaa2:	2386      	movs	r3, #134	@ 0x86
 801eaa4:	009b      	lsls	r3, r3, #2
 801eaa6:	2100      	movs	r1, #0
 801eaa8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	7c1b      	ldrb	r3, [r3, #16]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d10a      	bne.n	801eac8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eab2:	68ba      	ldr	r2, [r7, #8]
 801eab4:	2381      	movs	r3, #129	@ 0x81
 801eab6:	009b      	lsls	r3, r3, #2
 801eab8:	58d2      	ldr	r2, [r2, r3]
 801eaba:	2380      	movs	r3, #128	@ 0x80
 801eabc:	009b      	lsls	r3, r3, #2
 801eabe:	6878      	ldr	r0, [r7, #4]
 801eac0:	2101      	movs	r1, #1
 801eac2:	f002 f9d1 	bl	8020e68 <USBD_LL_PrepareReceive>
 801eac6:	e008      	b.n	801eada <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eac8:	68ba      	ldr	r2, [r7, #8]
 801eaca:	2381      	movs	r3, #129	@ 0x81
 801eacc:	009b      	lsls	r3, r3, #2
 801eace:	58d2      	ldr	r2, [r2, r3]
 801ead0:	6878      	ldr	r0, [r7, #4]
 801ead2:	2340      	movs	r3, #64	@ 0x40
 801ead4:	2101      	movs	r1, #1
 801ead6:	f002 f9c7 	bl	8020e68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801eada:	230f      	movs	r3, #15
 801eadc:	18fb      	adds	r3, r7, r3
 801eade:	781b      	ldrb	r3, [r3, #0]
}
 801eae0:	0018      	movs	r0, r3
 801eae2:	46bd      	mov	sp, r7
 801eae4:	b004      	add	sp, #16
 801eae6:	bd80      	pop	{r7, pc}

0801eae8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801eae8:	b580      	push	{r7, lr}
 801eaea:	b084      	sub	sp, #16
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
 801eaf0:	000a      	movs	r2, r1
 801eaf2:	1cfb      	adds	r3, r7, #3
 801eaf4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801eaf6:	230f      	movs	r3, #15
 801eaf8:	18fb      	adds	r3, r7, r3
 801eafa:	2200      	movs	r2, #0
 801eafc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	2181      	movs	r1, #129	@ 0x81
 801eb02:	0018      	movs	r0, r3
 801eb04:	f002 f89c 	bl	8020c40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	2200      	movs	r2, #0
 801eb0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	2101      	movs	r1, #1
 801eb12:	0018      	movs	r0, r3
 801eb14:	f002 f894 	bl	8020c40 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801eb18:	687a      	ldr	r2, [r7, #4]
 801eb1a:	23b6      	movs	r3, #182	@ 0xb6
 801eb1c:	005b      	lsls	r3, r3, #1
 801eb1e:	2100      	movs	r1, #0
 801eb20:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	2182      	movs	r1, #130	@ 0x82
 801eb26:	0018      	movs	r0, r3
 801eb28:	f002 f88a 	bl	8020c40 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	2200      	movs	r2, #0
 801eb30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801eb32:	687a      	ldr	r2, [r7, #4]
 801eb34:	23ae      	movs	r3, #174	@ 0xae
 801eb36:	009b      	lsls	r3, r3, #2
 801eb38:	58d3      	ldr	r3, [r2, r3]
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d011      	beq.n	801eb62 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	23af      	movs	r3, #175	@ 0xaf
 801eb42:	009b      	lsls	r3, r3, #2
 801eb44:	58d3      	ldr	r3, [r2, r3]
 801eb46:	685b      	ldr	r3, [r3, #4]
 801eb48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801eb4a:	687a      	ldr	r2, [r7, #4]
 801eb4c:	23ae      	movs	r3, #174	@ 0xae
 801eb4e:	009b      	lsls	r3, r3, #2
 801eb50:	58d3      	ldr	r3, [r2, r3]
 801eb52:	0018      	movs	r0, r3
 801eb54:	f002 f9e2 	bl	8020f1c <USBD_static_free>
    pdev->pClassData = NULL;
 801eb58:	687a      	ldr	r2, [r7, #4]
 801eb5a:	23ae      	movs	r3, #174	@ 0xae
 801eb5c:	009b      	lsls	r3, r3, #2
 801eb5e:	2100      	movs	r1, #0
 801eb60:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801eb62:	230f      	movs	r3, #15
 801eb64:	18fb      	adds	r3, r7, r3
 801eb66:	781b      	ldrb	r3, [r3, #0]
}
 801eb68:	0018      	movs	r0, r3
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	b004      	add	sp, #16
 801eb6e:	bd80      	pop	{r7, pc}

0801eb70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b086      	sub	sp, #24
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
 801eb78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eb7a:	687a      	ldr	r2, [r7, #4]
 801eb7c:	23ae      	movs	r3, #174	@ 0xae
 801eb7e:	009b      	lsls	r3, r3, #2
 801eb80:	58d3      	ldr	r3, [r2, r3]
 801eb82:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801eb84:	230f      	movs	r3, #15
 801eb86:	18fb      	adds	r3, r7, r3
 801eb88:	2200      	movs	r2, #0
 801eb8a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801eb8c:	230c      	movs	r3, #12
 801eb8e:	18fb      	adds	r3, r7, r3
 801eb90:	2200      	movs	r2, #0
 801eb92:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801eb94:	2317      	movs	r3, #23
 801eb96:	18fb      	adds	r3, r7, r3
 801eb98:	2200      	movs	r2, #0
 801eb9a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801eb9c:	683b      	ldr	r3, [r7, #0]
 801eb9e:	781b      	ldrb	r3, [r3, #0]
 801eba0:	001a      	movs	r2, r3
 801eba2:	2360      	movs	r3, #96	@ 0x60
 801eba4:	4013      	ands	r3, r2
 801eba6:	d03d      	beq.n	801ec24 <USBD_CDC_Setup+0xb4>
 801eba8:	2b20      	cmp	r3, #32
 801ebaa:	d000      	beq.n	801ebae <USBD_CDC_Setup+0x3e>
 801ebac:	e094      	b.n	801ecd8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	88db      	ldrh	r3, [r3, #6]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d02b      	beq.n	801ec0e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801ebb6:	683b      	ldr	r3, [r7, #0]
 801ebb8:	781b      	ldrb	r3, [r3, #0]
 801ebba:	b25b      	sxtb	r3, r3
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	da12      	bge.n	801ebe6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ebc0:	687a      	ldr	r2, [r7, #4]
 801ebc2:	23af      	movs	r3, #175	@ 0xaf
 801ebc4:	009b      	lsls	r3, r3, #2
 801ebc6:	58d3      	ldr	r3, [r2, r3]
 801ebc8:	689b      	ldr	r3, [r3, #8]
 801ebca:	683a      	ldr	r2, [r7, #0]
 801ebcc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801ebce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ebd0:	683a      	ldr	r2, [r7, #0]
 801ebd2:	88d2      	ldrh	r2, [r2, #6]
 801ebd4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ebd6:	6939      	ldr	r1, [r7, #16]
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	88da      	ldrh	r2, [r3, #6]
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	0018      	movs	r0, r3
 801ebe0:	f001 fbaf 	bl	8020342 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801ebe4:	e083      	b.n	801ecee <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801ebe6:	683b      	ldr	r3, [r7, #0]
 801ebe8:	7859      	ldrb	r1, [r3, #1]
 801ebea:	693a      	ldr	r2, [r7, #16]
 801ebec:	2380      	movs	r3, #128	@ 0x80
 801ebee:	009b      	lsls	r3, r3, #2
 801ebf0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801ebf2:	683b      	ldr	r3, [r7, #0]
 801ebf4:	88db      	ldrh	r3, [r3, #6]
 801ebf6:	b2d9      	uxtb	r1, r3
 801ebf8:	693b      	ldr	r3, [r7, #16]
 801ebfa:	4a40      	ldr	r2, [pc, #256]	@ (801ecfc <USBD_CDC_Setup+0x18c>)
 801ebfc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ebfe:	6939      	ldr	r1, [r7, #16]
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	88da      	ldrh	r2, [r3, #6]
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	0018      	movs	r0, r3
 801ec08:	f001 fbce 	bl	80203a8 <USBD_CtlPrepareRx>
      break;
 801ec0c:	e06f      	b.n	801ecee <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec0e:	687a      	ldr	r2, [r7, #4]
 801ec10:	23af      	movs	r3, #175	@ 0xaf
 801ec12:	009b      	lsls	r3, r3, #2
 801ec14:	58d3      	ldr	r3, [r2, r3]
 801ec16:	689b      	ldr	r3, [r3, #8]
 801ec18:	683a      	ldr	r2, [r7, #0]
 801ec1a:	7850      	ldrb	r0, [r2, #1]
 801ec1c:	6839      	ldr	r1, [r7, #0]
 801ec1e:	2200      	movs	r2, #0
 801ec20:	4798      	blx	r3
      break;
 801ec22:	e064      	b.n	801ecee <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ec24:	683b      	ldr	r3, [r7, #0]
 801ec26:	785b      	ldrb	r3, [r3, #1]
 801ec28:	2b0b      	cmp	r3, #11
 801ec2a:	d037      	beq.n	801ec9c <USBD_CDC_Setup+0x12c>
 801ec2c:	dc47      	bgt.n	801ecbe <USBD_CDC_Setup+0x14e>
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d002      	beq.n	801ec38 <USBD_CDC_Setup+0xc8>
 801ec32:	2b0a      	cmp	r3, #10
 801ec34:	d019      	beq.n	801ec6a <USBD_CDC_Setup+0xfa>
 801ec36:	e042      	b.n	801ecbe <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec38:	687a      	ldr	r2, [r7, #4]
 801ec3a:	23a7      	movs	r3, #167	@ 0xa7
 801ec3c:	009b      	lsls	r3, r3, #2
 801ec3e:	5cd3      	ldrb	r3, [r2, r3]
 801ec40:	2b03      	cmp	r3, #3
 801ec42:	d107      	bne.n	801ec54 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801ec44:	230c      	movs	r3, #12
 801ec46:	18f9      	adds	r1, r7, r3
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	2202      	movs	r2, #2
 801ec4c:	0018      	movs	r0, r3
 801ec4e:	f001 fb78 	bl	8020342 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ec52:	e040      	b.n	801ecd6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ec54:	683a      	ldr	r2, [r7, #0]
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	0011      	movs	r1, r2
 801ec5a:	0018      	movs	r0, r3
 801ec5c:	f001 faf3 	bl	8020246 <USBD_CtlError>
            ret = USBD_FAIL;
 801ec60:	2317      	movs	r3, #23
 801ec62:	18fb      	adds	r3, r7, r3
 801ec64:	2202      	movs	r2, #2
 801ec66:	701a      	strb	r2, [r3, #0]
          break;
 801ec68:	e035      	b.n	801ecd6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ec6a:	687a      	ldr	r2, [r7, #4]
 801ec6c:	23a7      	movs	r3, #167	@ 0xa7
 801ec6e:	009b      	lsls	r3, r3, #2
 801ec70:	5cd3      	ldrb	r3, [r2, r3]
 801ec72:	2b03      	cmp	r3, #3
 801ec74:	d107      	bne.n	801ec86 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801ec76:	230f      	movs	r3, #15
 801ec78:	18f9      	adds	r1, r7, r3
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	2201      	movs	r2, #1
 801ec7e:	0018      	movs	r0, r3
 801ec80:	f001 fb5f 	bl	8020342 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ec84:	e027      	b.n	801ecd6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ec86:	683a      	ldr	r2, [r7, #0]
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	0011      	movs	r1, r2
 801ec8c:	0018      	movs	r0, r3
 801ec8e:	f001 fada 	bl	8020246 <USBD_CtlError>
            ret = USBD_FAIL;
 801ec92:	2317      	movs	r3, #23
 801ec94:	18fb      	adds	r3, r7, r3
 801ec96:	2202      	movs	r2, #2
 801ec98:	701a      	strb	r2, [r3, #0]
          break;
 801ec9a:	e01c      	b.n	801ecd6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ec9c:	687a      	ldr	r2, [r7, #4]
 801ec9e:	23a7      	movs	r3, #167	@ 0xa7
 801eca0:	009b      	lsls	r3, r3, #2
 801eca2:	5cd3      	ldrb	r3, [r2, r3]
 801eca4:	2b03      	cmp	r3, #3
 801eca6:	d015      	beq.n	801ecd4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801eca8:	683a      	ldr	r2, [r7, #0]
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	0011      	movs	r1, r2
 801ecae:	0018      	movs	r0, r3
 801ecb0:	f001 fac9 	bl	8020246 <USBD_CtlError>
            ret = USBD_FAIL;
 801ecb4:	2317      	movs	r3, #23
 801ecb6:	18fb      	adds	r3, r7, r3
 801ecb8:	2202      	movs	r2, #2
 801ecba:	701a      	strb	r2, [r3, #0]
          }
          break;
 801ecbc:	e00a      	b.n	801ecd4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801ecbe:	683a      	ldr	r2, [r7, #0]
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	0011      	movs	r1, r2
 801ecc4:	0018      	movs	r0, r3
 801ecc6:	f001 fabe 	bl	8020246 <USBD_CtlError>
          ret = USBD_FAIL;
 801ecca:	2317      	movs	r3, #23
 801eccc:	18fb      	adds	r3, r7, r3
 801ecce:	2202      	movs	r2, #2
 801ecd0:	701a      	strb	r2, [r3, #0]
          break;
 801ecd2:	e000      	b.n	801ecd6 <USBD_CDC_Setup+0x166>
          break;
 801ecd4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ecd6:	e00a      	b.n	801ecee <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801ecd8:	683a      	ldr	r2, [r7, #0]
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	0011      	movs	r1, r2
 801ecde:	0018      	movs	r0, r3
 801ece0:	f001 fab1 	bl	8020246 <USBD_CtlError>
      ret = USBD_FAIL;
 801ece4:	2317      	movs	r3, #23
 801ece6:	18fb      	adds	r3, r7, r3
 801ece8:	2202      	movs	r2, #2
 801ecea:	701a      	strb	r2, [r3, #0]
      break;
 801ecec:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ecee:	2317      	movs	r3, #23
 801ecf0:	18fb      	adds	r3, r7, r3
 801ecf2:	781b      	ldrb	r3, [r3, #0]
}
 801ecf4:	0018      	movs	r0, r3
 801ecf6:	46bd      	mov	sp, r7
 801ecf8:	b006      	add	sp, #24
 801ecfa:	bd80      	pop	{r7, pc}
 801ecfc:	00000201 	.word	0x00000201

0801ed00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ed00:	b580      	push	{r7, lr}
 801ed02:	b084      	sub	sp, #16
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	6078      	str	r0, [r7, #4]
 801ed08:	000a      	movs	r2, r1
 801ed0a:	1cfb      	adds	r3, r7, #3
 801ed0c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ed0e:	687a      	ldr	r2, [r7, #4]
 801ed10:	23ae      	movs	r3, #174	@ 0xae
 801ed12:	009b      	lsls	r3, r3, #2
 801ed14:	58d3      	ldr	r3, [r2, r3]
 801ed16:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801ed18:	687a      	ldr	r2, [r7, #4]
 801ed1a:	23b0      	movs	r3, #176	@ 0xb0
 801ed1c:	009b      	lsls	r3, r3, #2
 801ed1e:	58d3      	ldr	r3, [r2, r3]
 801ed20:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801ed22:	687a      	ldr	r2, [r7, #4]
 801ed24:	23ae      	movs	r3, #174	@ 0xae
 801ed26:	009b      	lsls	r3, r3, #2
 801ed28:	58d3      	ldr	r3, [r2, r3]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d03e      	beq.n	801edac <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801ed2e:	1cfb      	adds	r3, r7, #3
 801ed30:	781a      	ldrb	r2, [r3, #0]
 801ed32:	6879      	ldr	r1, [r7, #4]
 801ed34:	0013      	movs	r3, r2
 801ed36:	009b      	lsls	r3, r3, #2
 801ed38:	189b      	adds	r3, r3, r2
 801ed3a:	009b      	lsls	r3, r3, #2
 801ed3c:	18cb      	adds	r3, r1, r3
 801ed3e:	331c      	adds	r3, #28
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d02b      	beq.n	801ed9e <USBD_CDC_DataIn+0x9e>
 801ed46:	1cfb      	adds	r3, r7, #3
 801ed48:	781a      	ldrb	r2, [r3, #0]
 801ed4a:	6879      	ldr	r1, [r7, #4]
 801ed4c:	0013      	movs	r3, r2
 801ed4e:	009b      	lsls	r3, r3, #2
 801ed50:	189b      	adds	r3, r3, r2
 801ed52:	009b      	lsls	r3, r3, #2
 801ed54:	18cb      	adds	r3, r1, r3
 801ed56:	331c      	adds	r3, #28
 801ed58:	6818      	ldr	r0, [r3, #0]
 801ed5a:	1cfb      	adds	r3, r7, #3
 801ed5c:	781a      	ldrb	r2, [r3, #0]
 801ed5e:	68b9      	ldr	r1, [r7, #8]
 801ed60:	0013      	movs	r3, r2
 801ed62:	009b      	lsls	r3, r3, #2
 801ed64:	189b      	adds	r3, r3, r2
 801ed66:	00db      	lsls	r3, r3, #3
 801ed68:	18cb      	adds	r3, r1, r3
 801ed6a:	3338      	adds	r3, #56	@ 0x38
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	0019      	movs	r1, r3
 801ed70:	f7e1 fa9e 	bl	80002b0 <__aeabi_uidivmod>
 801ed74:	1e0b      	subs	r3, r1, #0
 801ed76:	d112      	bne.n	801ed9e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ed78:	1cfb      	adds	r3, r7, #3
 801ed7a:	781a      	ldrb	r2, [r3, #0]
 801ed7c:	6879      	ldr	r1, [r7, #4]
 801ed7e:	0013      	movs	r3, r2
 801ed80:	009b      	lsls	r3, r3, #2
 801ed82:	189b      	adds	r3, r3, r2
 801ed84:	009b      	lsls	r3, r3, #2
 801ed86:	18cb      	adds	r3, r1, r3
 801ed88:	331c      	adds	r3, #28
 801ed8a:	2200      	movs	r2, #0
 801ed8c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ed8e:	1cfb      	adds	r3, r7, #3
 801ed90:	7819      	ldrb	r1, [r3, #0]
 801ed92:	6878      	ldr	r0, [r7, #4]
 801ed94:	2300      	movs	r3, #0
 801ed96:	2200      	movs	r2, #0
 801ed98:	f002 f82f 	bl	8020dfa <USBD_LL_Transmit>
 801ed9c:	e004      	b.n	801eda8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ed9e:	68fa      	ldr	r2, [r7, #12]
 801eda0:	2385      	movs	r3, #133	@ 0x85
 801eda2:	009b      	lsls	r3, r3, #2
 801eda4:	2100      	movs	r1, #0
 801eda6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801eda8:	2300      	movs	r3, #0
 801edaa:	e000      	b.n	801edae <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801edac:	2302      	movs	r3, #2
  }
}
 801edae:	0018      	movs	r0, r3
 801edb0:	46bd      	mov	sp, r7
 801edb2:	b004      	add	sp, #16
 801edb4:	bd80      	pop	{r7, pc}

0801edb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801edb6:	b580      	push	{r7, lr}
 801edb8:	b084      	sub	sp, #16
 801edba:	af00      	add	r7, sp, #0
 801edbc:	6078      	str	r0, [r7, #4]
 801edbe:	000a      	movs	r2, r1
 801edc0:	1cfb      	adds	r3, r7, #3
 801edc2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801edc4:	687a      	ldr	r2, [r7, #4]
 801edc6:	23ae      	movs	r3, #174	@ 0xae
 801edc8:	009b      	lsls	r3, r3, #2
 801edca:	58d3      	ldr	r3, [r2, r3]
 801edcc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801edce:	1cfb      	adds	r3, r7, #3
 801edd0:	781a      	ldrb	r2, [r3, #0]
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	0011      	movs	r1, r2
 801edd6:	0018      	movs	r0, r3
 801edd8:	f002 f87d 	bl	8020ed6 <USBD_LL_GetRxDataSize>
 801eddc:	0001      	movs	r1, r0
 801edde:	68fa      	ldr	r2, [r7, #12]
 801ede0:	2383      	movs	r3, #131	@ 0x83
 801ede2:	009b      	lsls	r3, r3, #2
 801ede4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ede6:	687a      	ldr	r2, [r7, #4]
 801ede8:	23ae      	movs	r3, #174	@ 0xae
 801edea:	009b      	lsls	r3, r3, #2
 801edec:	58d3      	ldr	r3, [r2, r3]
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d011      	beq.n	801ee16 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801edf2:	687a      	ldr	r2, [r7, #4]
 801edf4:	23af      	movs	r3, #175	@ 0xaf
 801edf6:	009b      	lsls	r3, r3, #2
 801edf8:	58d3      	ldr	r3, [r2, r3]
 801edfa:	68da      	ldr	r2, [r3, #12]
 801edfc:	68f9      	ldr	r1, [r7, #12]
 801edfe:	2381      	movs	r3, #129	@ 0x81
 801ee00:	009b      	lsls	r3, r3, #2
 801ee02:	58c8      	ldr	r0, [r1, r3]
 801ee04:	68fb      	ldr	r3, [r7, #12]
 801ee06:	2183      	movs	r1, #131	@ 0x83
 801ee08:	0089      	lsls	r1, r1, #2
 801ee0a:	468c      	mov	ip, r1
 801ee0c:	4463      	add	r3, ip
 801ee0e:	0019      	movs	r1, r3
 801ee10:	4790      	blx	r2

    return USBD_OK;
 801ee12:	2300      	movs	r3, #0
 801ee14:	e000      	b.n	801ee18 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801ee16:	2302      	movs	r3, #2
  }
}
 801ee18:	0018      	movs	r0, r3
 801ee1a:	46bd      	mov	sp, r7
 801ee1c:	b004      	add	sp, #16
 801ee1e:	bd80      	pop	{r7, pc}

0801ee20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ee20:	b590      	push	{r4, r7, lr}
 801ee22:	b085      	sub	sp, #20
 801ee24:	af00      	add	r7, sp, #0
 801ee26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ee28:	687a      	ldr	r2, [r7, #4]
 801ee2a:	23ae      	movs	r3, #174	@ 0xae
 801ee2c:	009b      	lsls	r3, r3, #2
 801ee2e:	58d3      	ldr	r3, [r2, r3]
 801ee30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ee32:	687a      	ldr	r2, [r7, #4]
 801ee34:	23af      	movs	r3, #175	@ 0xaf
 801ee36:	009b      	lsls	r3, r3, #2
 801ee38:	58d3      	ldr	r3, [r2, r3]
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d018      	beq.n	801ee70 <USBD_CDC_EP0_RxReady+0x50>
 801ee3e:	68fa      	ldr	r2, [r7, #12]
 801ee40:	2380      	movs	r3, #128	@ 0x80
 801ee42:	009b      	lsls	r3, r3, #2
 801ee44:	5cd3      	ldrb	r3, [r2, r3]
 801ee46:	2bff      	cmp	r3, #255	@ 0xff
 801ee48:	d012      	beq.n	801ee70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ee4a:	687a      	ldr	r2, [r7, #4]
 801ee4c:	23af      	movs	r3, #175	@ 0xaf
 801ee4e:	009b      	lsls	r3, r3, #2
 801ee50:	58d3      	ldr	r3, [r2, r3]
 801ee52:	689b      	ldr	r3, [r3, #8]
 801ee54:	68f9      	ldr	r1, [r7, #12]
 801ee56:	2280      	movs	r2, #128	@ 0x80
 801ee58:	0092      	lsls	r2, r2, #2
 801ee5a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ee5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ee5e:	68fa      	ldr	r2, [r7, #12]
 801ee60:	4c06      	ldr	r4, [pc, #24]	@ (801ee7c <USBD_CDC_EP0_RxReady+0x5c>)
 801ee62:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ee64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ee66:	68fa      	ldr	r2, [r7, #12]
 801ee68:	2380      	movs	r3, #128	@ 0x80
 801ee6a:	009b      	lsls	r3, r3, #2
 801ee6c:	21ff      	movs	r1, #255	@ 0xff
 801ee6e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ee70:	2300      	movs	r3, #0
}
 801ee72:	0018      	movs	r0, r3
 801ee74:	46bd      	mov	sp, r7
 801ee76:	b005      	add	sp, #20
 801ee78:	bd90      	pop	{r4, r7, pc}
 801ee7a:	46c0      	nop			@ (mov r8, r8)
 801ee7c:	00000201 	.word	0x00000201

0801ee80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ee80:	b580      	push	{r7, lr}
 801ee82:	b082      	sub	sp, #8
 801ee84:	af00      	add	r7, sp, #0
 801ee86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ee88:	687b      	ldr	r3, [r7, #4]
 801ee8a:	2243      	movs	r2, #67	@ 0x43
 801ee8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ee8e:	4b02      	ldr	r3, [pc, #8]	@ (801ee98 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ee90:	0018      	movs	r0, r3
 801ee92:	46bd      	mov	sp, r7
 801ee94:	b002      	add	sp, #8
 801ee96:	bd80      	pop	{r7, pc}
 801ee98:	20000180 	.word	0x20000180

0801ee9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ee9c:	b580      	push	{r7, lr}
 801ee9e:	b082      	sub	sp, #8
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	2243      	movs	r2, #67	@ 0x43
 801eea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801eeaa:	4b02      	ldr	r3, [pc, #8]	@ (801eeb4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801eeac:	0018      	movs	r0, r3
 801eeae:	46bd      	mov	sp, r7
 801eeb0:	b002      	add	sp, #8
 801eeb2:	bd80      	pop	{r7, pc}
 801eeb4:	2000013c 	.word	0x2000013c

0801eeb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801eeb8:	b580      	push	{r7, lr}
 801eeba:	b082      	sub	sp, #8
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	2243      	movs	r2, #67	@ 0x43
 801eec4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801eec6:	4b02      	ldr	r3, [pc, #8]	@ (801eed0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801eec8:	0018      	movs	r0, r3
 801eeca:	46bd      	mov	sp, r7
 801eecc:	b002      	add	sp, #8
 801eece:	bd80      	pop	{r7, pc}
 801eed0:	200001c4 	.word	0x200001c4

0801eed4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801eed4:	b580      	push	{r7, lr}
 801eed6:	b082      	sub	sp, #8
 801eed8:	af00      	add	r7, sp, #0
 801eeda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	220a      	movs	r2, #10
 801eee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801eee2:	4b02      	ldr	r3, [pc, #8]	@ (801eeec <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801eee4:	0018      	movs	r0, r3
 801eee6:	46bd      	mov	sp, r7
 801eee8:	b002      	add	sp, #8
 801eeea:	bd80      	pop	{r7, pc}
 801eeec:	200000f8 	.word	0x200000f8

0801eef0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801eef0:	b580      	push	{r7, lr}
 801eef2:	b084      	sub	sp, #16
 801eef4:	af00      	add	r7, sp, #0
 801eef6:	6078      	str	r0, [r7, #4]
 801eef8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801eefa:	200f      	movs	r0, #15
 801eefc:	183b      	adds	r3, r7, r0
 801eefe:	2202      	movs	r2, #2
 801ef00:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d007      	beq.n	801ef18 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ef08:	687a      	ldr	r2, [r7, #4]
 801ef0a:	23af      	movs	r3, #175	@ 0xaf
 801ef0c:	009b      	lsls	r3, r3, #2
 801ef0e:	6839      	ldr	r1, [r7, #0]
 801ef10:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ef12:	183b      	adds	r3, r7, r0
 801ef14:	2200      	movs	r2, #0
 801ef16:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801ef18:	230f      	movs	r3, #15
 801ef1a:	18fb      	adds	r3, r7, r3
 801ef1c:	781b      	ldrb	r3, [r3, #0]
}
 801ef1e:	0018      	movs	r0, r3
 801ef20:	46bd      	mov	sp, r7
 801ef22:	b004      	add	sp, #16
 801ef24:	bd80      	pop	{r7, pc}

0801ef26 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801ef26:	b580      	push	{r7, lr}
 801ef28:	b086      	sub	sp, #24
 801ef2a:	af00      	add	r7, sp, #0
 801ef2c:	60f8      	str	r0, [r7, #12]
 801ef2e:	60b9      	str	r1, [r7, #8]
 801ef30:	1dbb      	adds	r3, r7, #6
 801ef32:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ef34:	68fa      	ldr	r2, [r7, #12]
 801ef36:	23ae      	movs	r3, #174	@ 0xae
 801ef38:	009b      	lsls	r3, r3, #2
 801ef3a:	58d3      	ldr	r3, [r2, r3]
 801ef3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801ef3e:	697a      	ldr	r2, [r7, #20]
 801ef40:	2382      	movs	r3, #130	@ 0x82
 801ef42:	009b      	lsls	r3, r3, #2
 801ef44:	68b9      	ldr	r1, [r7, #8]
 801ef46:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801ef48:	1dbb      	adds	r3, r7, #6
 801ef4a:	8819      	ldrh	r1, [r3, #0]
 801ef4c:	697a      	ldr	r2, [r7, #20]
 801ef4e:	2384      	movs	r3, #132	@ 0x84
 801ef50:	009b      	lsls	r3, r3, #2
 801ef52:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ef54:	2300      	movs	r3, #0
}
 801ef56:	0018      	movs	r0, r3
 801ef58:	46bd      	mov	sp, r7
 801ef5a:	b006      	add	sp, #24
 801ef5c:	bd80      	pop	{r7, pc}

0801ef5e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801ef5e:	b580      	push	{r7, lr}
 801ef60:	b084      	sub	sp, #16
 801ef62:	af00      	add	r7, sp, #0
 801ef64:	6078      	str	r0, [r7, #4]
 801ef66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ef68:	687a      	ldr	r2, [r7, #4]
 801ef6a:	23ae      	movs	r3, #174	@ 0xae
 801ef6c:	009b      	lsls	r3, r3, #2
 801ef6e:	58d3      	ldr	r3, [r2, r3]
 801ef70:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801ef72:	68fa      	ldr	r2, [r7, #12]
 801ef74:	2381      	movs	r3, #129	@ 0x81
 801ef76:	009b      	lsls	r3, r3, #2
 801ef78:	6839      	ldr	r1, [r7, #0]
 801ef7a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ef7c:	2300      	movs	r3, #0
}
 801ef7e:	0018      	movs	r0, r3
 801ef80:	46bd      	mov	sp, r7
 801ef82:	b004      	add	sp, #16
 801ef84:	bd80      	pop	{r7, pc}

0801ef86 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801ef86:	b580      	push	{r7, lr}
 801ef88:	b084      	sub	sp, #16
 801ef8a:	af00      	add	r7, sp, #0
 801ef8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ef8e:	687a      	ldr	r2, [r7, #4]
 801ef90:	23ae      	movs	r3, #174	@ 0xae
 801ef92:	009b      	lsls	r3, r3, #2
 801ef94:	58d3      	ldr	r3, [r2, r3]
 801ef96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801ef98:	687a      	ldr	r2, [r7, #4]
 801ef9a:	23ae      	movs	r3, #174	@ 0xae
 801ef9c:	009b      	lsls	r3, r3, #2
 801ef9e:	58d3      	ldr	r3, [r2, r3]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d022      	beq.n	801efea <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801efa4:	68fa      	ldr	r2, [r7, #12]
 801efa6:	2385      	movs	r3, #133	@ 0x85
 801efa8:	009b      	lsls	r3, r3, #2
 801efaa:	58d3      	ldr	r3, [r2, r3]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d11a      	bne.n	801efe6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801efb0:	68fa      	ldr	r2, [r7, #12]
 801efb2:	2385      	movs	r3, #133	@ 0x85
 801efb4:	009b      	lsls	r3, r3, #2
 801efb6:	2101      	movs	r1, #1
 801efb8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801efba:	68fa      	ldr	r2, [r7, #12]
 801efbc:	2384      	movs	r3, #132	@ 0x84
 801efbe:	009b      	lsls	r3, r3, #2
 801efc0:	58d2      	ldr	r2, [r2, r3]
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801efc6:	68fa      	ldr	r2, [r7, #12]
 801efc8:	2382      	movs	r3, #130	@ 0x82
 801efca:	009b      	lsls	r3, r3, #2
 801efcc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801efce:	68fa      	ldr	r2, [r7, #12]
 801efd0:	2384      	movs	r3, #132	@ 0x84
 801efd2:	009b      	lsls	r3, r3, #2
 801efd4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801efd6:	b29b      	uxth	r3, r3
 801efd8:	6878      	ldr	r0, [r7, #4]
 801efda:	000a      	movs	r2, r1
 801efdc:	2181      	movs	r1, #129	@ 0x81
 801efde:	f001 ff0c 	bl	8020dfa <USBD_LL_Transmit>

      return USBD_OK;
 801efe2:	2300      	movs	r3, #0
 801efe4:	e002      	b.n	801efec <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801efe6:	2301      	movs	r3, #1
 801efe8:	e000      	b.n	801efec <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801efea:	2302      	movs	r3, #2
  }
}
 801efec:	0018      	movs	r0, r3
 801efee:	46bd      	mov	sp, r7
 801eff0:	b004      	add	sp, #16
 801eff2:	bd80      	pop	{r7, pc}

0801eff4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801eff4:	b580      	push	{r7, lr}
 801eff6:	b084      	sub	sp, #16
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801effc:	687a      	ldr	r2, [r7, #4]
 801effe:	23ae      	movs	r3, #174	@ 0xae
 801f000:	009b      	lsls	r3, r3, #2
 801f002:	58d3      	ldr	r3, [r2, r3]
 801f004:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801f006:	687a      	ldr	r2, [r7, #4]
 801f008:	23ae      	movs	r3, #174	@ 0xae
 801f00a:	009b      	lsls	r3, r3, #2
 801f00c:	58d3      	ldr	r3, [r2, r3]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d019      	beq.n	801f046 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	7c1b      	ldrb	r3, [r3, #16]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d10a      	bne.n	801f030 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f01a:	68fa      	ldr	r2, [r7, #12]
 801f01c:	2381      	movs	r3, #129	@ 0x81
 801f01e:	009b      	lsls	r3, r3, #2
 801f020:	58d2      	ldr	r2, [r2, r3]
 801f022:	2380      	movs	r3, #128	@ 0x80
 801f024:	009b      	lsls	r3, r3, #2
 801f026:	6878      	ldr	r0, [r7, #4]
 801f028:	2101      	movs	r1, #1
 801f02a:	f001 ff1d 	bl	8020e68 <USBD_LL_PrepareReceive>
 801f02e:	e008      	b.n	801f042 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f030:	68fa      	ldr	r2, [r7, #12]
 801f032:	2381      	movs	r3, #129	@ 0x81
 801f034:	009b      	lsls	r3, r3, #2
 801f036:	58d2      	ldr	r2, [r2, r3]
 801f038:	6878      	ldr	r0, [r7, #4]
 801f03a:	2340      	movs	r3, #64	@ 0x40
 801f03c:	2101      	movs	r1, #1
 801f03e:	f001 ff13 	bl	8020e68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801f042:	2300      	movs	r3, #0
 801f044:	e000      	b.n	801f048 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801f046:	2302      	movs	r3, #2
  }
}
 801f048:	0018      	movs	r0, r3
 801f04a:	46bd      	mov	sp, r7
 801f04c:	b004      	add	sp, #16
 801f04e:	bd80      	pop	{r7, pc}

0801f050 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b084      	sub	sp, #16
 801f054:	af00      	add	r7, sp, #0
 801f056:	60f8      	str	r0, [r7, #12]
 801f058:	60b9      	str	r1, [r7, #8]
 801f05a:	1dfb      	adds	r3, r7, #7
 801f05c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d101      	bne.n	801f068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801f064:	2302      	movs	r3, #2
 801f066:	e020      	b.n	801f0aa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801f068:	68fa      	ldr	r2, [r7, #12]
 801f06a:	23ad      	movs	r3, #173	@ 0xad
 801f06c:	009b      	lsls	r3, r3, #2
 801f06e:	58d3      	ldr	r3, [r2, r3]
 801f070:	2b00      	cmp	r3, #0
 801f072:	d004      	beq.n	801f07e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801f074:	68fa      	ldr	r2, [r7, #12]
 801f076:	23ad      	movs	r3, #173	@ 0xad
 801f078:	009b      	lsls	r3, r3, #2
 801f07a:	2100      	movs	r1, #0
 801f07c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801f07e:	68bb      	ldr	r3, [r7, #8]
 801f080:	2b00      	cmp	r3, #0
 801f082:	d004      	beq.n	801f08e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801f084:	68fa      	ldr	r2, [r7, #12]
 801f086:	23ac      	movs	r3, #172	@ 0xac
 801f088:	009b      	lsls	r3, r3, #2
 801f08a:	68b9      	ldr	r1, [r7, #8]
 801f08c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f08e:	68fa      	ldr	r2, [r7, #12]
 801f090:	23a7      	movs	r3, #167	@ 0xa7
 801f092:	009b      	lsls	r3, r3, #2
 801f094:	2101      	movs	r1, #1
 801f096:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	1dfa      	adds	r2, r7, #7
 801f09c:	7812      	ldrb	r2, [r2, #0]
 801f09e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	0018      	movs	r0, r3
 801f0a4:	f001 fd0c 	bl	8020ac0 <USBD_LL_Init>

  return USBD_OK;
 801f0a8:	2300      	movs	r3, #0
}
 801f0aa:	0018      	movs	r0, r3
 801f0ac:	46bd      	mov	sp, r7
 801f0ae:	b004      	add	sp, #16
 801f0b0:	bd80      	pop	{r7, pc}

0801f0b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801f0b2:	b580      	push	{r7, lr}
 801f0b4:	b084      	sub	sp, #16
 801f0b6:	af00      	add	r7, sp, #0
 801f0b8:	6078      	str	r0, [r7, #4]
 801f0ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801f0bc:	200f      	movs	r0, #15
 801f0be:	183b      	adds	r3, r7, r0
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801f0c4:	683b      	ldr	r3, [r7, #0]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d008      	beq.n	801f0dc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801f0ca:	687a      	ldr	r2, [r7, #4]
 801f0cc:	23ad      	movs	r3, #173	@ 0xad
 801f0ce:	009b      	lsls	r3, r3, #2
 801f0d0:	6839      	ldr	r1, [r7, #0]
 801f0d2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801f0d4:	183b      	adds	r3, r7, r0
 801f0d6:	2200      	movs	r2, #0
 801f0d8:	701a      	strb	r2, [r3, #0]
 801f0da:	e003      	b.n	801f0e4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801f0dc:	230f      	movs	r3, #15
 801f0de:	18fb      	adds	r3, r7, r3
 801f0e0:	2202      	movs	r2, #2
 801f0e2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801f0e4:	230f      	movs	r3, #15
 801f0e6:	18fb      	adds	r3, r7, r3
 801f0e8:	781b      	ldrb	r3, [r3, #0]
}
 801f0ea:	0018      	movs	r0, r3
 801f0ec:	46bd      	mov	sp, r7
 801f0ee:	b004      	add	sp, #16
 801f0f0:	bd80      	pop	{r7, pc}

0801f0f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801f0f2:	b580      	push	{r7, lr}
 801f0f4:	b082      	sub	sp, #8
 801f0f6:	af00      	add	r7, sp, #0
 801f0f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	0018      	movs	r0, r3
 801f0fe:	f001 fd43 	bl	8020b88 <USBD_LL_Start>

  return USBD_OK;
 801f102:	2300      	movs	r3, #0
}
 801f104:	0018      	movs	r0, r3
 801f106:	46bd      	mov	sp, r7
 801f108:	b002      	add	sp, #8
 801f10a:	bd80      	pop	{r7, pc}

0801f10c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801f10c:	b580      	push	{r7, lr}
 801f10e:	b082      	sub	sp, #8
 801f110:	af00      	add	r7, sp, #0
 801f112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801f114:	2300      	movs	r3, #0
}
 801f116:	0018      	movs	r0, r3
 801f118:	46bd      	mov	sp, r7
 801f11a:	b002      	add	sp, #8
 801f11c:	bd80      	pop	{r7, pc}

0801f11e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f11e:	b590      	push	{r4, r7, lr}
 801f120:	b085      	sub	sp, #20
 801f122:	af00      	add	r7, sp, #0
 801f124:	6078      	str	r0, [r7, #4]
 801f126:	000a      	movs	r2, r1
 801f128:	1cfb      	adds	r3, r7, #3
 801f12a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801f12c:	240f      	movs	r4, #15
 801f12e:	193b      	adds	r3, r7, r4
 801f130:	2202      	movs	r2, #2
 801f132:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801f134:	687a      	ldr	r2, [r7, #4]
 801f136:	23ad      	movs	r3, #173	@ 0xad
 801f138:	009b      	lsls	r3, r3, #2
 801f13a:	58d3      	ldr	r3, [r2, r3]
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	d00e      	beq.n	801f15e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801f140:	687a      	ldr	r2, [r7, #4]
 801f142:	23ad      	movs	r3, #173	@ 0xad
 801f144:	009b      	lsls	r3, r3, #2
 801f146:	58d3      	ldr	r3, [r2, r3]
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	1cfa      	adds	r2, r7, #3
 801f14c:	7811      	ldrb	r1, [r2, #0]
 801f14e:	687a      	ldr	r2, [r7, #4]
 801f150:	0010      	movs	r0, r2
 801f152:	4798      	blx	r3
 801f154:	1e03      	subs	r3, r0, #0
 801f156:	d102      	bne.n	801f15e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801f158:	193b      	adds	r3, r7, r4
 801f15a:	2200      	movs	r2, #0
 801f15c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801f15e:	230f      	movs	r3, #15
 801f160:	18fb      	adds	r3, r7, r3
 801f162:	781b      	ldrb	r3, [r3, #0]
}
 801f164:	0018      	movs	r0, r3
 801f166:	46bd      	mov	sp, r7
 801f168:	b005      	add	sp, #20
 801f16a:	bd90      	pop	{r4, r7, pc}

0801f16c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f16c:	b580      	push	{r7, lr}
 801f16e:	b082      	sub	sp, #8
 801f170:	af00      	add	r7, sp, #0
 801f172:	6078      	str	r0, [r7, #4]
 801f174:	000a      	movs	r2, r1
 801f176:	1cfb      	adds	r3, r7, #3
 801f178:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801f17a:	687a      	ldr	r2, [r7, #4]
 801f17c:	23ad      	movs	r3, #173	@ 0xad
 801f17e:	009b      	lsls	r3, r3, #2
 801f180:	58d3      	ldr	r3, [r2, r3]
 801f182:	685b      	ldr	r3, [r3, #4]
 801f184:	1cfa      	adds	r2, r7, #3
 801f186:	7811      	ldrb	r1, [r2, #0]
 801f188:	687a      	ldr	r2, [r7, #4]
 801f18a:	0010      	movs	r0, r2
 801f18c:	4798      	blx	r3

  return USBD_OK;
 801f18e:	2300      	movs	r3, #0
}
 801f190:	0018      	movs	r0, r3
 801f192:	46bd      	mov	sp, r7
 801f194:	b002      	add	sp, #8
 801f196:	bd80      	pop	{r7, pc}

0801f198 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801f198:	b580      	push	{r7, lr}
 801f19a:	b082      	sub	sp, #8
 801f19c:	af00      	add	r7, sp, #0
 801f19e:	6078      	str	r0, [r7, #4]
 801f1a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	22aa      	movs	r2, #170	@ 0xaa
 801f1a6:	0092      	lsls	r2, r2, #2
 801f1a8:	4694      	mov	ip, r2
 801f1aa:	4463      	add	r3, ip
 801f1ac:	683a      	ldr	r2, [r7, #0]
 801f1ae:	0011      	movs	r1, r2
 801f1b0:	0018      	movs	r0, r3
 801f1b2:	f001 f810 	bl	80201d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801f1b6:	687a      	ldr	r2, [r7, #4]
 801f1b8:	23a5      	movs	r3, #165	@ 0xa5
 801f1ba:	009b      	lsls	r3, r3, #2
 801f1bc:	2101      	movs	r1, #1
 801f1be:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	4a23      	ldr	r2, [pc, #140]	@ (801f250 <USBD_LL_SetupStage+0xb8>)
 801f1c4:	5a9b      	ldrh	r3, [r3, r2]
 801f1c6:	0019      	movs	r1, r3
 801f1c8:	687a      	ldr	r2, [r7, #4]
 801f1ca:	23a6      	movs	r3, #166	@ 0xa6
 801f1cc:	009b      	lsls	r3, r3, #2
 801f1ce:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801f1d0:	687a      	ldr	r2, [r7, #4]
 801f1d2:	23aa      	movs	r3, #170	@ 0xaa
 801f1d4:	009b      	lsls	r3, r3, #2
 801f1d6:	5cd3      	ldrb	r3, [r2, r3]
 801f1d8:	001a      	movs	r2, r3
 801f1da:	231f      	movs	r3, #31
 801f1dc:	4013      	ands	r3, r2
 801f1de:	2b02      	cmp	r3, #2
 801f1e0:	d019      	beq.n	801f216 <USBD_LL_SetupStage+0x7e>
 801f1e2:	d822      	bhi.n	801f22a <USBD_LL_SetupStage+0x92>
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d002      	beq.n	801f1ee <USBD_LL_SetupStage+0x56>
 801f1e8:	2b01      	cmp	r3, #1
 801f1ea:	d00a      	beq.n	801f202 <USBD_LL_SetupStage+0x6a>
 801f1ec:	e01d      	b.n	801f22a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	22aa      	movs	r2, #170	@ 0xaa
 801f1f2:	0092      	lsls	r2, r2, #2
 801f1f4:	189a      	adds	r2, r3, r2
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	0011      	movs	r1, r2
 801f1fa:	0018      	movs	r0, r3
 801f1fc:	f000 fa10 	bl	801f620 <USBD_StdDevReq>
      break;
 801f200:	e020      	b.n	801f244 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	22aa      	movs	r2, #170	@ 0xaa
 801f206:	0092      	lsls	r2, r2, #2
 801f208:	189a      	adds	r2, r3, r2
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	0011      	movs	r1, r2
 801f20e:	0018      	movs	r0, r3
 801f210:	f000 fa78 	bl	801f704 <USBD_StdItfReq>
      break;
 801f214:	e016      	b.n	801f244 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801f216:	687b      	ldr	r3, [r7, #4]
 801f218:	22aa      	movs	r2, #170	@ 0xaa
 801f21a:	0092      	lsls	r2, r2, #2
 801f21c:	189a      	adds	r2, r3, r2
 801f21e:	687b      	ldr	r3, [r7, #4]
 801f220:	0011      	movs	r1, r2
 801f222:	0018      	movs	r0, r3
 801f224:	f000 fac5 	bl	801f7b2 <USBD_StdEPReq>
      break;
 801f228:	e00c      	b.n	801f244 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801f22a:	687a      	ldr	r2, [r7, #4]
 801f22c:	23aa      	movs	r3, #170	@ 0xaa
 801f22e:	009b      	lsls	r3, r3, #2
 801f230:	5cd3      	ldrb	r3, [r2, r3]
 801f232:	227f      	movs	r2, #127	@ 0x7f
 801f234:	4393      	bics	r3, r2
 801f236:	b2da      	uxtb	r2, r3
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	0011      	movs	r1, r2
 801f23c:	0018      	movs	r0, r3
 801f23e:	f001 fd2a 	bl	8020c96 <USBD_LL_StallEP>
      break;
 801f242:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f244:	2300      	movs	r3, #0
}
 801f246:	0018      	movs	r0, r3
 801f248:	46bd      	mov	sp, r7
 801f24a:	b002      	add	sp, #8
 801f24c:	bd80      	pop	{r7, pc}
 801f24e:	46c0      	nop			@ (mov r8, r8)
 801f250:	000002ae 	.word	0x000002ae

0801f254 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801f254:	b580      	push	{r7, lr}
 801f256:	b086      	sub	sp, #24
 801f258:	af00      	add	r7, sp, #0
 801f25a:	60f8      	str	r0, [r7, #12]
 801f25c:	607a      	str	r2, [r7, #4]
 801f25e:	200b      	movs	r0, #11
 801f260:	183b      	adds	r3, r7, r0
 801f262:	1c0a      	adds	r2, r1, #0
 801f264:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f266:	183b      	adds	r3, r7, r0
 801f268:	781b      	ldrb	r3, [r3, #0]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d154      	bne.n	801f318 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	3355      	adds	r3, #85	@ 0x55
 801f272:	33ff      	adds	r3, #255	@ 0xff
 801f274:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801f276:	68fa      	ldr	r2, [r7, #12]
 801f278:	23a5      	movs	r3, #165	@ 0xa5
 801f27a:	009b      	lsls	r3, r3, #2
 801f27c:	58d3      	ldr	r3, [r2, r3]
 801f27e:	2b03      	cmp	r3, #3
 801f280:	d139      	bne.n	801f2f6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801f282:	697b      	ldr	r3, [r7, #20]
 801f284:	68da      	ldr	r2, [r3, #12]
 801f286:	697b      	ldr	r3, [r7, #20]
 801f288:	691b      	ldr	r3, [r3, #16]
 801f28a:	429a      	cmp	r2, r3
 801f28c:	d919      	bls.n	801f2c2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	68da      	ldr	r2, [r3, #12]
 801f292:	697b      	ldr	r3, [r7, #20]
 801f294:	691b      	ldr	r3, [r3, #16]
 801f296:	1ad2      	subs	r2, r2, r3
 801f298:	697b      	ldr	r3, [r7, #20]
 801f29a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	68da      	ldr	r2, [r3, #12]
 801f2a0:	697b      	ldr	r3, [r7, #20]
 801f2a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	d203      	bcs.n	801f2b0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f2a8:	697b      	ldr	r3, [r7, #20]
 801f2aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801f2ac:	b29b      	uxth	r3, r3
 801f2ae:	e002      	b.n	801f2b6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f2b0:	697b      	ldr	r3, [r7, #20]
 801f2b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f2b4:	b29b      	uxth	r3, r3
 801f2b6:	6879      	ldr	r1, [r7, #4]
 801f2b8:	68f8      	ldr	r0, [r7, #12]
 801f2ba:	001a      	movs	r2, r3
 801f2bc:	f001 f898 	bl	80203f0 <USBD_CtlContinueRx>
 801f2c0:	e045      	b.n	801f34e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f2c2:	68fa      	ldr	r2, [r7, #12]
 801f2c4:	23ad      	movs	r3, #173	@ 0xad
 801f2c6:	009b      	lsls	r3, r3, #2
 801f2c8:	58d3      	ldr	r3, [r2, r3]
 801f2ca:	691b      	ldr	r3, [r3, #16]
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d00d      	beq.n	801f2ec <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f2d0:	68fa      	ldr	r2, [r7, #12]
 801f2d2:	23a7      	movs	r3, #167	@ 0xa7
 801f2d4:	009b      	lsls	r3, r3, #2
 801f2d6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f2d8:	2b03      	cmp	r3, #3
 801f2da:	d107      	bne.n	801f2ec <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801f2dc:	68fa      	ldr	r2, [r7, #12]
 801f2de:	23ad      	movs	r3, #173	@ 0xad
 801f2e0:	009b      	lsls	r3, r3, #2
 801f2e2:	58d3      	ldr	r3, [r2, r3]
 801f2e4:	691b      	ldr	r3, [r3, #16]
 801f2e6:	68fa      	ldr	r2, [r7, #12]
 801f2e8:	0010      	movs	r0, r2
 801f2ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	0018      	movs	r0, r3
 801f2f0:	f001 f891 	bl	8020416 <USBD_CtlSendStatus>
 801f2f4:	e02b      	b.n	801f34e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801f2f6:	68fa      	ldr	r2, [r7, #12]
 801f2f8:	23a5      	movs	r3, #165	@ 0xa5
 801f2fa:	009b      	lsls	r3, r3, #2
 801f2fc:	58d3      	ldr	r3, [r2, r3]
 801f2fe:	2b05      	cmp	r3, #5
 801f300:	d125      	bne.n	801f34e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801f302:	68fa      	ldr	r2, [r7, #12]
 801f304:	23a5      	movs	r3, #165	@ 0xa5
 801f306:	009b      	lsls	r3, r3, #2
 801f308:	2100      	movs	r1, #0
 801f30a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	2100      	movs	r1, #0
 801f310:	0018      	movs	r0, r3
 801f312:	f001 fcc0 	bl	8020c96 <USBD_LL_StallEP>
 801f316:	e01a      	b.n	801f34e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801f318:	68fa      	ldr	r2, [r7, #12]
 801f31a:	23ad      	movs	r3, #173	@ 0xad
 801f31c:	009b      	lsls	r3, r3, #2
 801f31e:	58d3      	ldr	r3, [r2, r3]
 801f320:	699b      	ldr	r3, [r3, #24]
 801f322:	2b00      	cmp	r3, #0
 801f324:	d011      	beq.n	801f34a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f326:	68fa      	ldr	r2, [r7, #12]
 801f328:	23a7      	movs	r3, #167	@ 0xa7
 801f32a:	009b      	lsls	r3, r3, #2
 801f32c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801f32e:	2b03      	cmp	r3, #3
 801f330:	d10b      	bne.n	801f34a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801f332:	68fa      	ldr	r2, [r7, #12]
 801f334:	23ad      	movs	r3, #173	@ 0xad
 801f336:	009b      	lsls	r3, r3, #2
 801f338:	58d3      	ldr	r3, [r2, r3]
 801f33a:	699b      	ldr	r3, [r3, #24]
 801f33c:	220b      	movs	r2, #11
 801f33e:	18ba      	adds	r2, r7, r2
 801f340:	7811      	ldrb	r1, [r2, #0]
 801f342:	68fa      	ldr	r2, [r7, #12]
 801f344:	0010      	movs	r0, r2
 801f346:	4798      	blx	r3
 801f348:	e001      	b.n	801f34e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f34a:	2302      	movs	r3, #2
 801f34c:	e000      	b.n	801f350 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801f34e:	2300      	movs	r3, #0
}
 801f350:	0018      	movs	r0, r3
 801f352:	46bd      	mov	sp, r7
 801f354:	b006      	add	sp, #24
 801f356:	bd80      	pop	{r7, pc}

0801f358 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801f358:	b580      	push	{r7, lr}
 801f35a:	b086      	sub	sp, #24
 801f35c:	af00      	add	r7, sp, #0
 801f35e:	60f8      	str	r0, [r7, #12]
 801f360:	607a      	str	r2, [r7, #4]
 801f362:	200b      	movs	r0, #11
 801f364:	183b      	adds	r3, r7, r0
 801f366:	1c0a      	adds	r2, r1, #0
 801f368:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f36a:	183b      	adds	r3, r7, r0
 801f36c:	781b      	ldrb	r3, [r3, #0]
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d000      	beq.n	801f374 <USBD_LL_DataInStage+0x1c>
 801f372:	e08e      	b.n	801f492 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	3314      	adds	r3, #20
 801f378:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801f37a:	68fa      	ldr	r2, [r7, #12]
 801f37c:	23a5      	movs	r3, #165	@ 0xa5
 801f37e:	009b      	lsls	r3, r3, #2
 801f380:	58d3      	ldr	r3, [r2, r3]
 801f382:	2b02      	cmp	r3, #2
 801f384:	d164      	bne.n	801f450 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801f386:	697b      	ldr	r3, [r7, #20]
 801f388:	68da      	ldr	r2, [r3, #12]
 801f38a:	697b      	ldr	r3, [r7, #20]
 801f38c:	691b      	ldr	r3, [r3, #16]
 801f38e:	429a      	cmp	r2, r3
 801f390:	d915      	bls.n	801f3be <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801f392:	697b      	ldr	r3, [r7, #20]
 801f394:	68da      	ldr	r2, [r3, #12]
 801f396:	697b      	ldr	r3, [r7, #20]
 801f398:	691b      	ldr	r3, [r3, #16]
 801f39a:	1ad2      	subs	r2, r2, r3
 801f39c:	697b      	ldr	r3, [r7, #20]
 801f39e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801f3a0:	697b      	ldr	r3, [r7, #20]
 801f3a2:	68db      	ldr	r3, [r3, #12]
 801f3a4:	b29a      	uxth	r2, r3
 801f3a6:	6879      	ldr	r1, [r7, #4]
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	0018      	movs	r0, r3
 801f3ac:	f000 ffe9 	bl	8020382 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f3b0:	68f8      	ldr	r0, [r7, #12]
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	2200      	movs	r2, #0
 801f3b6:	2100      	movs	r1, #0
 801f3b8:	f001 fd56 	bl	8020e68 <USBD_LL_PrepareReceive>
 801f3bc:	e059      	b.n	801f472 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f3be:	697b      	ldr	r3, [r7, #20]
 801f3c0:	689a      	ldr	r2, [r3, #8]
 801f3c2:	697b      	ldr	r3, [r7, #20]
 801f3c4:	691b      	ldr	r3, [r3, #16]
 801f3c6:	0019      	movs	r1, r3
 801f3c8:	0010      	movs	r0, r2
 801f3ca:	f7e0 ff71 	bl	80002b0 <__aeabi_uidivmod>
 801f3ce:	1e0b      	subs	r3, r1, #0
 801f3d0:	d11f      	bne.n	801f412 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	689a      	ldr	r2, [r3, #8]
 801f3d6:	697b      	ldr	r3, [r7, #20]
 801f3d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f3da:	429a      	cmp	r2, r3
 801f3dc:	d319      	bcc.n	801f412 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801f3de:	697b      	ldr	r3, [r7, #20]
 801f3e0:	689a      	ldr	r2, [r3, #8]
 801f3e2:	68f9      	ldr	r1, [r7, #12]
 801f3e4:	23a6      	movs	r3, #166	@ 0xa6
 801f3e6:	009b      	lsls	r3, r3, #2
 801f3e8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801f3ea:	429a      	cmp	r2, r3
 801f3ec:	d211      	bcs.n	801f412 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	2200      	movs	r2, #0
 801f3f2:	2100      	movs	r1, #0
 801f3f4:	0018      	movs	r0, r3
 801f3f6:	f000 ffc4 	bl	8020382 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801f3fa:	68fa      	ldr	r2, [r7, #12]
 801f3fc:	23a6      	movs	r3, #166	@ 0xa6
 801f3fe:	009b      	lsls	r3, r3, #2
 801f400:	2100      	movs	r1, #0
 801f402:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f404:	68f8      	ldr	r0, [r7, #12]
 801f406:	2300      	movs	r3, #0
 801f408:	2200      	movs	r2, #0
 801f40a:	2100      	movs	r1, #0
 801f40c:	f001 fd2c 	bl	8020e68 <USBD_LL_PrepareReceive>
 801f410:	e02f      	b.n	801f472 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f412:	68fa      	ldr	r2, [r7, #12]
 801f414:	23ad      	movs	r3, #173	@ 0xad
 801f416:	009b      	lsls	r3, r3, #2
 801f418:	58d3      	ldr	r3, [r2, r3]
 801f41a:	68db      	ldr	r3, [r3, #12]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	d00d      	beq.n	801f43c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f420:	68fa      	ldr	r2, [r7, #12]
 801f422:	23a7      	movs	r3, #167	@ 0xa7
 801f424:	009b      	lsls	r3, r3, #2
 801f426:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f428:	2b03      	cmp	r3, #3
 801f42a:	d107      	bne.n	801f43c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801f42c:	68fa      	ldr	r2, [r7, #12]
 801f42e:	23ad      	movs	r3, #173	@ 0xad
 801f430:	009b      	lsls	r3, r3, #2
 801f432:	58d3      	ldr	r3, [r2, r3]
 801f434:	68db      	ldr	r3, [r3, #12]
 801f436:	68fa      	ldr	r2, [r7, #12]
 801f438:	0010      	movs	r0, r2
 801f43a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	2180      	movs	r1, #128	@ 0x80
 801f440:	0018      	movs	r0, r3
 801f442:	f001 fc28 	bl	8020c96 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	0018      	movs	r0, r3
 801f44a:	f000 fff8 	bl	802043e <USBD_CtlReceiveStatus>
 801f44e:	e010      	b.n	801f472 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f450:	68fa      	ldr	r2, [r7, #12]
 801f452:	23a5      	movs	r3, #165	@ 0xa5
 801f454:	009b      	lsls	r3, r3, #2
 801f456:	58d3      	ldr	r3, [r2, r3]
 801f458:	2b04      	cmp	r3, #4
 801f45a:	d005      	beq.n	801f468 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801f45c:	68fa      	ldr	r2, [r7, #12]
 801f45e:	23a5      	movs	r3, #165	@ 0xa5
 801f460:	009b      	lsls	r3, r3, #2
 801f462:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f464:	2b00      	cmp	r3, #0
 801f466:	d104      	bne.n	801f472 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	2180      	movs	r1, #128	@ 0x80
 801f46c:	0018      	movs	r0, r3
 801f46e:	f001 fc12 	bl	8020c96 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801f472:	68fa      	ldr	r2, [r7, #12]
 801f474:	23a8      	movs	r3, #168	@ 0xa8
 801f476:	009b      	lsls	r3, r3, #2
 801f478:	5cd3      	ldrb	r3, [r2, r3]
 801f47a:	2b01      	cmp	r3, #1
 801f47c:	d124      	bne.n	801f4c8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801f47e:	68fb      	ldr	r3, [r7, #12]
 801f480:	0018      	movs	r0, r3
 801f482:	f7ff fe43 	bl	801f10c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801f486:	68fa      	ldr	r2, [r7, #12]
 801f488:	23a8      	movs	r3, #168	@ 0xa8
 801f48a:	009b      	lsls	r3, r3, #2
 801f48c:	2100      	movs	r1, #0
 801f48e:	54d1      	strb	r1, [r2, r3]
 801f490:	e01a      	b.n	801f4c8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801f492:	68fa      	ldr	r2, [r7, #12]
 801f494:	23ad      	movs	r3, #173	@ 0xad
 801f496:	009b      	lsls	r3, r3, #2
 801f498:	58d3      	ldr	r3, [r2, r3]
 801f49a:	695b      	ldr	r3, [r3, #20]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d011      	beq.n	801f4c4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f4a0:	68fa      	ldr	r2, [r7, #12]
 801f4a2:	23a7      	movs	r3, #167	@ 0xa7
 801f4a4:	009b      	lsls	r3, r3, #2
 801f4a6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801f4a8:	2b03      	cmp	r3, #3
 801f4aa:	d10b      	bne.n	801f4c4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801f4ac:	68fa      	ldr	r2, [r7, #12]
 801f4ae:	23ad      	movs	r3, #173	@ 0xad
 801f4b0:	009b      	lsls	r3, r3, #2
 801f4b2:	58d3      	ldr	r3, [r2, r3]
 801f4b4:	695b      	ldr	r3, [r3, #20]
 801f4b6:	220b      	movs	r2, #11
 801f4b8:	18ba      	adds	r2, r7, r2
 801f4ba:	7811      	ldrb	r1, [r2, #0]
 801f4bc:	68fa      	ldr	r2, [r7, #12]
 801f4be:	0010      	movs	r0, r2
 801f4c0:	4798      	blx	r3
 801f4c2:	e001      	b.n	801f4c8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f4c4:	2302      	movs	r3, #2
 801f4c6:	e000      	b.n	801f4ca <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801f4c8:	2300      	movs	r3, #0
}
 801f4ca:	0018      	movs	r0, r3
 801f4cc:	46bd      	mov	sp, r7
 801f4ce:	b006      	add	sp, #24
 801f4d0:	bd80      	pop	{r7, pc}

0801f4d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801f4d2:	b580      	push	{r7, lr}
 801f4d4:	b082      	sub	sp, #8
 801f4d6:	af00      	add	r7, sp, #0
 801f4d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f4da:	6878      	ldr	r0, [r7, #4]
 801f4dc:	2340      	movs	r3, #64	@ 0x40
 801f4de:	2200      	movs	r2, #0
 801f4e0:	2100      	movs	r1, #0
 801f4e2:	f001 fb76 	bl	8020bd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801f4e6:	687a      	ldr	r2, [r7, #4]
 801f4e8:	23ac      	movs	r3, #172	@ 0xac
 801f4ea:	005b      	lsls	r3, r3, #1
 801f4ec:	2101      	movs	r1, #1
 801f4ee:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801f4f0:	687a      	ldr	r2, [r7, #4]
 801f4f2:	23b2      	movs	r3, #178	@ 0xb2
 801f4f4:	005b      	lsls	r3, r3, #1
 801f4f6:	2140      	movs	r1, #64	@ 0x40
 801f4f8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f4fa:	6878      	ldr	r0, [r7, #4]
 801f4fc:	2340      	movs	r3, #64	@ 0x40
 801f4fe:	2200      	movs	r2, #0
 801f500:	2180      	movs	r1, #128	@ 0x80
 801f502:	f001 fb66 	bl	8020bd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	2201      	movs	r2, #1
 801f50a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	2240      	movs	r2, #64	@ 0x40
 801f510:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f512:	687a      	ldr	r2, [r7, #4]
 801f514:	23a7      	movs	r3, #167	@ 0xa7
 801f516:	009b      	lsls	r3, r3, #2
 801f518:	2101      	movs	r1, #1
 801f51a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801f51c:	687a      	ldr	r2, [r7, #4]
 801f51e:	23a5      	movs	r3, #165	@ 0xa5
 801f520:	009b      	lsls	r3, r3, #2
 801f522:	2100      	movs	r1, #0
 801f524:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	2200      	movs	r2, #0
 801f52a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801f52c:	687a      	ldr	r2, [r7, #4]
 801f52e:	23a9      	movs	r3, #169	@ 0xa9
 801f530:	009b      	lsls	r3, r3, #2
 801f532:	2100      	movs	r1, #0
 801f534:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801f536:	687a      	ldr	r2, [r7, #4]
 801f538:	23ae      	movs	r3, #174	@ 0xae
 801f53a:	009b      	lsls	r3, r3, #2
 801f53c:	58d3      	ldr	r3, [r2, r3]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d00a      	beq.n	801f558 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801f542:	687a      	ldr	r2, [r7, #4]
 801f544:	23ad      	movs	r3, #173	@ 0xad
 801f546:	009b      	lsls	r3, r3, #2
 801f548:	58d3      	ldr	r3, [r2, r3]
 801f54a:	685a      	ldr	r2, [r3, #4]
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	685b      	ldr	r3, [r3, #4]
 801f550:	b2d9      	uxtb	r1, r3
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	0018      	movs	r0, r3
 801f556:	4790      	blx	r2
  }

  return USBD_OK;
 801f558:	2300      	movs	r3, #0
}
 801f55a:	0018      	movs	r0, r3
 801f55c:	46bd      	mov	sp, r7
 801f55e:	b002      	add	sp, #8
 801f560:	bd80      	pop	{r7, pc}

0801f562 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801f562:	b580      	push	{r7, lr}
 801f564:	b082      	sub	sp, #8
 801f566:	af00      	add	r7, sp, #0
 801f568:	6078      	str	r0, [r7, #4]
 801f56a:	000a      	movs	r2, r1
 801f56c:	1cfb      	adds	r3, r7, #3
 801f56e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	1cfa      	adds	r2, r7, #3
 801f574:	7812      	ldrb	r2, [r2, #0]
 801f576:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801f578:	2300      	movs	r3, #0
}
 801f57a:	0018      	movs	r0, r3
 801f57c:	46bd      	mov	sp, r7
 801f57e:	b002      	add	sp, #8
 801f580:	bd80      	pop	{r7, pc}
	...

0801f584 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801f584:	b580      	push	{r7, lr}
 801f586:	b082      	sub	sp, #8
 801f588:	af00      	add	r7, sp, #0
 801f58a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801f58c:	687a      	ldr	r2, [r7, #4]
 801f58e:	23a7      	movs	r3, #167	@ 0xa7
 801f590:	009b      	lsls	r3, r3, #2
 801f592:	5cd1      	ldrb	r1, [r2, r3]
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	4a06      	ldr	r2, [pc, #24]	@ (801f5b0 <USBD_LL_Suspend+0x2c>)
 801f598:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801f59a:	687a      	ldr	r2, [r7, #4]
 801f59c:	23a7      	movs	r3, #167	@ 0xa7
 801f59e:	009b      	lsls	r3, r3, #2
 801f5a0:	2104      	movs	r1, #4
 801f5a2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801f5a4:	2300      	movs	r3, #0
}
 801f5a6:	0018      	movs	r0, r3
 801f5a8:	46bd      	mov	sp, r7
 801f5aa:	b002      	add	sp, #8
 801f5ac:	bd80      	pop	{r7, pc}
 801f5ae:	46c0      	nop			@ (mov r8, r8)
 801f5b0:	0000029d 	.word	0x0000029d

0801f5b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	b082      	sub	sp, #8
 801f5b8:	af00      	add	r7, sp, #0
 801f5ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801f5bc:	687a      	ldr	r2, [r7, #4]
 801f5be:	23a7      	movs	r3, #167	@ 0xa7
 801f5c0:	009b      	lsls	r3, r3, #2
 801f5c2:	5cd3      	ldrb	r3, [r2, r3]
 801f5c4:	2b04      	cmp	r3, #4
 801f5c6:	d106      	bne.n	801f5d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	4a05      	ldr	r2, [pc, #20]	@ (801f5e0 <USBD_LL_Resume+0x2c>)
 801f5cc:	5c99      	ldrb	r1, [r3, r2]
 801f5ce:	687a      	ldr	r2, [r7, #4]
 801f5d0:	23a7      	movs	r3, #167	@ 0xa7
 801f5d2:	009b      	lsls	r3, r3, #2
 801f5d4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801f5d6:	2300      	movs	r3, #0
}
 801f5d8:	0018      	movs	r0, r3
 801f5da:	46bd      	mov	sp, r7
 801f5dc:	b002      	add	sp, #8
 801f5de:	bd80      	pop	{r7, pc}
 801f5e0:	0000029d 	.word	0x0000029d

0801f5e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801f5e4:	b580      	push	{r7, lr}
 801f5e6:	b082      	sub	sp, #8
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f5ec:	687a      	ldr	r2, [r7, #4]
 801f5ee:	23a7      	movs	r3, #167	@ 0xa7
 801f5f0:	009b      	lsls	r3, r3, #2
 801f5f2:	5cd3      	ldrb	r3, [r2, r3]
 801f5f4:	2b03      	cmp	r3, #3
 801f5f6:	d10e      	bne.n	801f616 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801f5f8:	687a      	ldr	r2, [r7, #4]
 801f5fa:	23ad      	movs	r3, #173	@ 0xad
 801f5fc:	009b      	lsls	r3, r3, #2
 801f5fe:	58d3      	ldr	r3, [r2, r3]
 801f600:	69db      	ldr	r3, [r3, #28]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d007      	beq.n	801f616 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801f606:	687a      	ldr	r2, [r7, #4]
 801f608:	23ad      	movs	r3, #173	@ 0xad
 801f60a:	009b      	lsls	r3, r3, #2
 801f60c:	58d3      	ldr	r3, [r2, r3]
 801f60e:	69db      	ldr	r3, [r3, #28]
 801f610:	687a      	ldr	r2, [r7, #4]
 801f612:	0010      	movs	r0, r2
 801f614:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801f616:	2300      	movs	r3, #0
}
 801f618:	0018      	movs	r0, r3
 801f61a:	46bd      	mov	sp, r7
 801f61c:	b002      	add	sp, #8
 801f61e:	bd80      	pop	{r7, pc}

0801f620 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801f620:	b580      	push	{r7, lr}
 801f622:	b084      	sub	sp, #16
 801f624:	af00      	add	r7, sp, #0
 801f626:	6078      	str	r0, [r7, #4]
 801f628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f62a:	230f      	movs	r3, #15
 801f62c:	18fb      	adds	r3, r7, r3
 801f62e:	2200      	movs	r2, #0
 801f630:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	781b      	ldrb	r3, [r3, #0]
 801f636:	001a      	movs	r2, r3
 801f638:	2360      	movs	r3, #96	@ 0x60
 801f63a:	4013      	ands	r3, r2
 801f63c:	2b40      	cmp	r3, #64	@ 0x40
 801f63e:	d004      	beq.n	801f64a <USBD_StdDevReq+0x2a>
 801f640:	d84f      	bhi.n	801f6e2 <USBD_StdDevReq+0xc2>
 801f642:	2b00      	cmp	r3, #0
 801f644:	d00b      	beq.n	801f65e <USBD_StdDevReq+0x3e>
 801f646:	2b20      	cmp	r3, #32
 801f648:	d14b      	bne.n	801f6e2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f64a:	687a      	ldr	r2, [r7, #4]
 801f64c:	23ad      	movs	r3, #173	@ 0xad
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	58d3      	ldr	r3, [r2, r3]
 801f652:	689b      	ldr	r3, [r3, #8]
 801f654:	6839      	ldr	r1, [r7, #0]
 801f656:	687a      	ldr	r2, [r7, #4]
 801f658:	0010      	movs	r0, r2
 801f65a:	4798      	blx	r3
      break;
 801f65c:	e048      	b.n	801f6f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	785b      	ldrb	r3, [r3, #1]
 801f662:	2b09      	cmp	r3, #9
 801f664:	d835      	bhi.n	801f6d2 <USBD_StdDevReq+0xb2>
 801f666:	009a      	lsls	r2, r3, #2
 801f668:	4b25      	ldr	r3, [pc, #148]	@ (801f700 <USBD_StdDevReq+0xe0>)
 801f66a:	18d3      	adds	r3, r2, r3
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801f670:	683a      	ldr	r2, [r7, #0]
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	0011      	movs	r1, r2
 801f676:	0018      	movs	r0, r3
 801f678:	f000 fa52 	bl	801fb20 <USBD_GetDescriptor>
          break;
 801f67c:	e030      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801f67e:	683a      	ldr	r2, [r7, #0]
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	0011      	movs	r1, r2
 801f684:	0018      	movs	r0, r3
 801f686:	f000 fbfd 	bl	801fe84 <USBD_SetAddress>
          break;
 801f68a:	e029      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801f68c:	683a      	ldr	r2, [r7, #0]
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	0011      	movs	r1, r2
 801f692:	0018      	movs	r0, r3
 801f694:	f000 fc4a 	bl	801ff2c <USBD_SetConfig>
          break;
 801f698:	e022      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801f69a:	683a      	ldr	r2, [r7, #0]
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	0011      	movs	r1, r2
 801f6a0:	0018      	movs	r0, r3
 801f6a2:	f000 fce7 	bl	8020074 <USBD_GetConfig>
          break;
 801f6a6:	e01b      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801f6a8:	683a      	ldr	r2, [r7, #0]
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	0011      	movs	r1, r2
 801f6ae:	0018      	movs	r0, r3
 801f6b0:	f000 fd1b 	bl	80200ea <USBD_GetStatus>
          break;
 801f6b4:	e014      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801f6b6:	683a      	ldr	r2, [r7, #0]
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	0011      	movs	r1, r2
 801f6bc:	0018      	movs	r0, r3
 801f6be:	f000 fd4e 	bl	802015e <USBD_SetFeature>
          break;
 801f6c2:	e00d      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801f6c4:	683a      	ldr	r2, [r7, #0]
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	0011      	movs	r1, r2
 801f6ca:	0018      	movs	r0, r3
 801f6cc:	f000 fd5d 	bl	802018a <USBD_ClrFeature>
          break;
 801f6d0:	e006      	b.n	801f6e0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801f6d2:	683a      	ldr	r2, [r7, #0]
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	0011      	movs	r1, r2
 801f6d8:	0018      	movs	r0, r3
 801f6da:	f000 fdb4 	bl	8020246 <USBD_CtlError>
          break;
 801f6de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f6e0:	e006      	b.n	801f6f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801f6e2:	683a      	ldr	r2, [r7, #0]
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	0011      	movs	r1, r2
 801f6e8:	0018      	movs	r0, r3
 801f6ea:	f000 fdac 	bl	8020246 <USBD_CtlError>
      break;
 801f6ee:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801f6f0:	230f      	movs	r3, #15
 801f6f2:	18fb      	adds	r3, r7, r3
 801f6f4:	781b      	ldrb	r3, [r3, #0]
}
 801f6f6:	0018      	movs	r0, r3
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	b004      	add	sp, #16
 801f6fc:	bd80      	pop	{r7, pc}
 801f6fe:	46c0      	nop			@ (mov r8, r8)
 801f700:	0802b22c 	.word	0x0802b22c

0801f704 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801f704:	b5b0      	push	{r4, r5, r7, lr}
 801f706:	b084      	sub	sp, #16
 801f708:	af00      	add	r7, sp, #0
 801f70a:	6078      	str	r0, [r7, #4]
 801f70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f70e:	230f      	movs	r3, #15
 801f710:	18fb      	adds	r3, r7, r3
 801f712:	2200      	movs	r2, #0
 801f714:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	781b      	ldrb	r3, [r3, #0]
 801f71a:	001a      	movs	r2, r3
 801f71c:	2360      	movs	r3, #96	@ 0x60
 801f71e:	4013      	ands	r3, r2
 801f720:	2b40      	cmp	r3, #64	@ 0x40
 801f722:	d004      	beq.n	801f72e <USBD_StdItfReq+0x2a>
 801f724:	d839      	bhi.n	801f79a <USBD_StdItfReq+0x96>
 801f726:	2b00      	cmp	r3, #0
 801f728:	d001      	beq.n	801f72e <USBD_StdItfReq+0x2a>
 801f72a:	2b20      	cmp	r3, #32
 801f72c:	d135      	bne.n	801f79a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801f72e:	687a      	ldr	r2, [r7, #4]
 801f730:	23a7      	movs	r3, #167	@ 0xa7
 801f732:	009b      	lsls	r3, r3, #2
 801f734:	5cd3      	ldrb	r3, [r2, r3]
 801f736:	3b01      	subs	r3, #1
 801f738:	2b02      	cmp	r3, #2
 801f73a:	d825      	bhi.n	801f788 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801f73c:	683b      	ldr	r3, [r7, #0]
 801f73e:	889b      	ldrh	r3, [r3, #4]
 801f740:	b2db      	uxtb	r3, r3
 801f742:	2b01      	cmp	r3, #1
 801f744:	d819      	bhi.n	801f77a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f746:	687a      	ldr	r2, [r7, #4]
 801f748:	23ad      	movs	r3, #173	@ 0xad
 801f74a:	009b      	lsls	r3, r3, #2
 801f74c:	58d3      	ldr	r3, [r2, r3]
 801f74e:	689b      	ldr	r3, [r3, #8]
 801f750:	250f      	movs	r5, #15
 801f752:	197c      	adds	r4, r7, r5
 801f754:	6839      	ldr	r1, [r7, #0]
 801f756:	687a      	ldr	r2, [r7, #4]
 801f758:	0010      	movs	r0, r2
 801f75a:	4798      	blx	r3
 801f75c:	0003      	movs	r3, r0
 801f75e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801f760:	683b      	ldr	r3, [r7, #0]
 801f762:	88db      	ldrh	r3, [r3, #6]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d116      	bne.n	801f796 <USBD_StdItfReq+0x92>
 801f768:	197b      	adds	r3, r7, r5
 801f76a:	781b      	ldrb	r3, [r3, #0]
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d112      	bne.n	801f796 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	0018      	movs	r0, r3
 801f774:	f000 fe4f 	bl	8020416 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801f778:	e00d      	b.n	801f796 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801f77a:	683a      	ldr	r2, [r7, #0]
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	0011      	movs	r1, r2
 801f780:	0018      	movs	r0, r3
 801f782:	f000 fd60 	bl	8020246 <USBD_CtlError>
          break;
 801f786:	e006      	b.n	801f796 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801f788:	683a      	ldr	r2, [r7, #0]
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	0011      	movs	r1, r2
 801f78e:	0018      	movs	r0, r3
 801f790:	f000 fd59 	bl	8020246 <USBD_CtlError>
          break;
 801f794:	e000      	b.n	801f798 <USBD_StdItfReq+0x94>
          break;
 801f796:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f798:	e006      	b.n	801f7a8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801f79a:	683a      	ldr	r2, [r7, #0]
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	0011      	movs	r1, r2
 801f7a0:	0018      	movs	r0, r3
 801f7a2:	f000 fd50 	bl	8020246 <USBD_CtlError>
      break;
 801f7a6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f7a8:	2300      	movs	r3, #0
}
 801f7aa:	0018      	movs	r0, r3
 801f7ac:	46bd      	mov	sp, r7
 801f7ae:	b004      	add	sp, #16
 801f7b0:	bdb0      	pop	{r4, r5, r7, pc}

0801f7b2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801f7b2:	b5b0      	push	{r4, r5, r7, lr}
 801f7b4:	b084      	sub	sp, #16
 801f7b6:	af00      	add	r7, sp, #0
 801f7b8:	6078      	str	r0, [r7, #4]
 801f7ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801f7bc:	230f      	movs	r3, #15
 801f7be:	18fb      	adds	r3, r7, r3
 801f7c0:	2200      	movs	r2, #0
 801f7c2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801f7c4:	683b      	ldr	r3, [r7, #0]
 801f7c6:	889a      	ldrh	r2, [r3, #4]
 801f7c8:	230e      	movs	r3, #14
 801f7ca:	18fb      	adds	r3, r7, r3
 801f7cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	781b      	ldrb	r3, [r3, #0]
 801f7d2:	001a      	movs	r2, r3
 801f7d4:	2360      	movs	r3, #96	@ 0x60
 801f7d6:	4013      	ands	r3, r2
 801f7d8:	2b40      	cmp	r3, #64	@ 0x40
 801f7da:	d006      	beq.n	801f7ea <USBD_StdEPReq+0x38>
 801f7dc:	d900      	bls.n	801f7e0 <USBD_StdEPReq+0x2e>
 801f7de:	e190      	b.n	801fb02 <USBD_StdEPReq+0x350>
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d00c      	beq.n	801f7fe <USBD_StdEPReq+0x4c>
 801f7e4:	2b20      	cmp	r3, #32
 801f7e6:	d000      	beq.n	801f7ea <USBD_StdEPReq+0x38>
 801f7e8:	e18b      	b.n	801fb02 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f7ea:	687a      	ldr	r2, [r7, #4]
 801f7ec:	23ad      	movs	r3, #173	@ 0xad
 801f7ee:	009b      	lsls	r3, r3, #2
 801f7f0:	58d3      	ldr	r3, [r2, r3]
 801f7f2:	689b      	ldr	r3, [r3, #8]
 801f7f4:	6839      	ldr	r1, [r7, #0]
 801f7f6:	687a      	ldr	r2, [r7, #4]
 801f7f8:	0010      	movs	r0, r2
 801f7fa:	4798      	blx	r3
      break;
 801f7fc:	e188      	b.n	801fb10 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801f7fe:	683b      	ldr	r3, [r7, #0]
 801f800:	781b      	ldrb	r3, [r3, #0]
 801f802:	001a      	movs	r2, r3
 801f804:	2360      	movs	r3, #96	@ 0x60
 801f806:	4013      	ands	r3, r2
 801f808:	2b20      	cmp	r3, #32
 801f80a:	d10f      	bne.n	801f82c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f80c:	687a      	ldr	r2, [r7, #4]
 801f80e:	23ad      	movs	r3, #173	@ 0xad
 801f810:	009b      	lsls	r3, r3, #2
 801f812:	58d3      	ldr	r3, [r2, r3]
 801f814:	689b      	ldr	r3, [r3, #8]
 801f816:	250f      	movs	r5, #15
 801f818:	197c      	adds	r4, r7, r5
 801f81a:	6839      	ldr	r1, [r7, #0]
 801f81c:	687a      	ldr	r2, [r7, #4]
 801f81e:	0010      	movs	r0, r2
 801f820:	4798      	blx	r3
 801f822:	0003      	movs	r3, r0
 801f824:	7023      	strb	r3, [r4, #0]

        return ret;
 801f826:	197b      	adds	r3, r7, r5
 801f828:	781b      	ldrb	r3, [r3, #0]
 801f82a:	e174      	b.n	801fb16 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801f82c:	683b      	ldr	r3, [r7, #0]
 801f82e:	785b      	ldrb	r3, [r3, #1]
 801f830:	2b03      	cmp	r3, #3
 801f832:	d007      	beq.n	801f844 <USBD_StdEPReq+0x92>
 801f834:	dd00      	ble.n	801f838 <USBD_StdEPReq+0x86>
 801f836:	e15c      	b.n	801faf2 <USBD_StdEPReq+0x340>
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d100      	bne.n	801f83e <USBD_StdEPReq+0x8c>
 801f83c:	e092      	b.n	801f964 <USBD_StdEPReq+0x1b2>
 801f83e:	2b01      	cmp	r3, #1
 801f840:	d04b      	beq.n	801f8da <USBD_StdEPReq+0x128>
 801f842:	e156      	b.n	801faf2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801f844:	687a      	ldr	r2, [r7, #4]
 801f846:	23a7      	movs	r3, #167	@ 0xa7
 801f848:	009b      	lsls	r3, r3, #2
 801f84a:	5cd3      	ldrb	r3, [r2, r3]
 801f84c:	2b02      	cmp	r3, #2
 801f84e:	d002      	beq.n	801f856 <USBD_StdEPReq+0xa4>
 801f850:	2b03      	cmp	r3, #3
 801f852:	d01d      	beq.n	801f890 <USBD_StdEPReq+0xde>
 801f854:	e039      	b.n	801f8ca <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f856:	220e      	movs	r2, #14
 801f858:	18bb      	adds	r3, r7, r2
 801f85a:	781b      	ldrb	r3, [r3, #0]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d010      	beq.n	801f882 <USBD_StdEPReq+0xd0>
 801f860:	18bb      	adds	r3, r7, r2
 801f862:	781b      	ldrb	r3, [r3, #0]
 801f864:	2b80      	cmp	r3, #128	@ 0x80
 801f866:	d00c      	beq.n	801f882 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f868:	18bb      	adds	r3, r7, r2
 801f86a:	781a      	ldrb	r2, [r3, #0]
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	0011      	movs	r1, r2
 801f870:	0018      	movs	r0, r3
 801f872:	f001 fa10 	bl	8020c96 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	2180      	movs	r1, #128	@ 0x80
 801f87a:	0018      	movs	r0, r3
 801f87c:	f001 fa0b 	bl	8020c96 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f880:	e02a      	b.n	801f8d8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801f882:	683a      	ldr	r2, [r7, #0]
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	0011      	movs	r1, r2
 801f888:	0018      	movs	r0, r3
 801f88a:	f000 fcdc 	bl	8020246 <USBD_CtlError>
              break;
 801f88e:	e023      	b.n	801f8d8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	885b      	ldrh	r3, [r3, #2]
 801f894:	2b00      	cmp	r3, #0
 801f896:	d113      	bne.n	801f8c0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801f898:	220e      	movs	r2, #14
 801f89a:	18bb      	adds	r3, r7, r2
 801f89c:	781b      	ldrb	r3, [r3, #0]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d00e      	beq.n	801f8c0 <USBD_StdEPReq+0x10e>
 801f8a2:	18bb      	adds	r3, r7, r2
 801f8a4:	781b      	ldrb	r3, [r3, #0]
 801f8a6:	2b80      	cmp	r3, #128	@ 0x80
 801f8a8:	d00a      	beq.n	801f8c0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801f8aa:	683b      	ldr	r3, [r7, #0]
 801f8ac:	88db      	ldrh	r3, [r3, #6]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d106      	bne.n	801f8c0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801f8b2:	18bb      	adds	r3, r7, r2
 801f8b4:	781a      	ldrb	r2, [r3, #0]
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	0011      	movs	r1, r2
 801f8ba:	0018      	movs	r0, r3
 801f8bc:	f001 f9eb 	bl	8020c96 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	0018      	movs	r0, r3
 801f8c4:	f000 fda7 	bl	8020416 <USBD_CtlSendStatus>

              break;
 801f8c8:	e006      	b.n	801f8d8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801f8ca:	683a      	ldr	r2, [r7, #0]
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	0011      	movs	r1, r2
 801f8d0:	0018      	movs	r0, r3
 801f8d2:	f000 fcb8 	bl	8020246 <USBD_CtlError>
              break;
 801f8d6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f8d8:	e112      	b.n	801fb00 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801f8da:	687a      	ldr	r2, [r7, #4]
 801f8dc:	23a7      	movs	r3, #167	@ 0xa7
 801f8de:	009b      	lsls	r3, r3, #2
 801f8e0:	5cd3      	ldrb	r3, [r2, r3]
 801f8e2:	2b02      	cmp	r3, #2
 801f8e4:	d002      	beq.n	801f8ec <USBD_StdEPReq+0x13a>
 801f8e6:	2b03      	cmp	r3, #3
 801f8e8:	d01d      	beq.n	801f926 <USBD_StdEPReq+0x174>
 801f8ea:	e032      	b.n	801f952 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f8ec:	220e      	movs	r2, #14
 801f8ee:	18bb      	adds	r3, r7, r2
 801f8f0:	781b      	ldrb	r3, [r3, #0]
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d010      	beq.n	801f918 <USBD_StdEPReq+0x166>
 801f8f6:	18bb      	adds	r3, r7, r2
 801f8f8:	781b      	ldrb	r3, [r3, #0]
 801f8fa:	2b80      	cmp	r3, #128	@ 0x80
 801f8fc:	d00c      	beq.n	801f918 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f8fe:	18bb      	adds	r3, r7, r2
 801f900:	781a      	ldrb	r2, [r3, #0]
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	0011      	movs	r1, r2
 801f906:	0018      	movs	r0, r3
 801f908:	f001 f9c5 	bl	8020c96 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	2180      	movs	r1, #128	@ 0x80
 801f910:	0018      	movs	r0, r3
 801f912:	f001 f9c0 	bl	8020c96 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f916:	e024      	b.n	801f962 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801f918:	683a      	ldr	r2, [r7, #0]
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	0011      	movs	r1, r2
 801f91e:	0018      	movs	r0, r3
 801f920:	f000 fc91 	bl	8020246 <USBD_CtlError>
              break;
 801f924:	e01d      	b.n	801f962 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	885b      	ldrh	r3, [r3, #2]
 801f92a:	2b00      	cmp	r3, #0
 801f92c:	d118      	bne.n	801f960 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801f92e:	210e      	movs	r1, #14
 801f930:	187b      	adds	r3, r7, r1
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	227f      	movs	r2, #127	@ 0x7f
 801f936:	4013      	ands	r3, r2
 801f938:	d006      	beq.n	801f948 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801f93a:	187b      	adds	r3, r7, r1
 801f93c:	781a      	ldrb	r2, [r3, #0]
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	0011      	movs	r1, r2
 801f942:	0018      	movs	r0, r3
 801f944:	f001 f9d2 	bl	8020cec <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	0018      	movs	r0, r3
 801f94c:	f000 fd63 	bl	8020416 <USBD_CtlSendStatus>
              }
              break;
 801f950:	e006      	b.n	801f960 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801f952:	683a      	ldr	r2, [r7, #0]
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	0011      	movs	r1, r2
 801f958:	0018      	movs	r0, r3
 801f95a:	f000 fc74 	bl	8020246 <USBD_CtlError>
              break;
 801f95e:	e000      	b.n	801f962 <USBD_StdEPReq+0x1b0>
              break;
 801f960:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f962:	e0cd      	b.n	801fb00 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801f964:	687a      	ldr	r2, [r7, #4]
 801f966:	23a7      	movs	r3, #167	@ 0xa7
 801f968:	009b      	lsls	r3, r3, #2
 801f96a:	5cd3      	ldrb	r3, [r2, r3]
 801f96c:	2b02      	cmp	r3, #2
 801f96e:	d002      	beq.n	801f976 <USBD_StdEPReq+0x1c4>
 801f970:	2b03      	cmp	r3, #3
 801f972:	d03c      	beq.n	801f9ee <USBD_StdEPReq+0x23c>
 801f974:	e0b5      	b.n	801fae2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f976:	220e      	movs	r2, #14
 801f978:	18bb      	adds	r3, r7, r2
 801f97a:	781b      	ldrb	r3, [r3, #0]
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d00a      	beq.n	801f996 <USBD_StdEPReq+0x1e4>
 801f980:	18bb      	adds	r3, r7, r2
 801f982:	781b      	ldrb	r3, [r3, #0]
 801f984:	2b80      	cmp	r3, #128	@ 0x80
 801f986:	d006      	beq.n	801f996 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801f988:	683a      	ldr	r2, [r7, #0]
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	0011      	movs	r1, r2
 801f98e:	0018      	movs	r0, r3
 801f990:	f000 fc59 	bl	8020246 <USBD_CtlError>
                break;
 801f994:	e0ac      	b.n	801faf0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801f996:	220e      	movs	r2, #14
 801f998:	18bb      	adds	r3, r7, r2
 801f99a:	781b      	ldrb	r3, [r3, #0]
 801f99c:	b25b      	sxtb	r3, r3
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	da0c      	bge.n	801f9bc <USBD_StdEPReq+0x20a>
 801f9a2:	18bb      	adds	r3, r7, r2
 801f9a4:	781b      	ldrb	r3, [r3, #0]
 801f9a6:	227f      	movs	r2, #127	@ 0x7f
 801f9a8:	401a      	ands	r2, r3
 801f9aa:	0013      	movs	r3, r2
 801f9ac:	009b      	lsls	r3, r3, #2
 801f9ae:	189b      	adds	r3, r3, r2
 801f9b0:	009b      	lsls	r3, r3, #2
 801f9b2:	3310      	adds	r3, #16
 801f9b4:	687a      	ldr	r2, [r7, #4]
 801f9b6:	18d3      	adds	r3, r2, r3
 801f9b8:	3304      	adds	r3, #4
 801f9ba:	e00d      	b.n	801f9d8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801f9bc:	230e      	movs	r3, #14
 801f9be:	18fb      	adds	r3, r7, r3
 801f9c0:	781b      	ldrb	r3, [r3, #0]
 801f9c2:	227f      	movs	r2, #127	@ 0x7f
 801f9c4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801f9c6:	0013      	movs	r3, r2
 801f9c8:	009b      	lsls	r3, r3, #2
 801f9ca:	189b      	adds	r3, r3, r2
 801f9cc:	009b      	lsls	r3, r3, #2
 801f9ce:	3351      	adds	r3, #81	@ 0x51
 801f9d0:	33ff      	adds	r3, #255	@ 0xff
 801f9d2:	687a      	ldr	r2, [r7, #4]
 801f9d4:	18d3      	adds	r3, r2, r3
 801f9d6:	3304      	adds	r3, #4
 801f9d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801f9da:	68bb      	ldr	r3, [r7, #8]
 801f9dc:	2200      	movs	r2, #0
 801f9de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801f9e0:	68b9      	ldr	r1, [r7, #8]
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	2202      	movs	r2, #2
 801f9e6:	0018      	movs	r0, r3
 801f9e8:	f000 fcab 	bl	8020342 <USBD_CtlSendData>
              break;
 801f9ec:	e080      	b.n	801faf0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801f9ee:	220e      	movs	r2, #14
 801f9f0:	18bb      	adds	r3, r7, r2
 801f9f2:	781b      	ldrb	r3, [r3, #0]
 801f9f4:	b25b      	sxtb	r3, r3
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	da14      	bge.n	801fa24 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801f9fa:	18bb      	adds	r3, r7, r2
 801f9fc:	781b      	ldrb	r3, [r3, #0]
 801f9fe:	220f      	movs	r2, #15
 801fa00:	401a      	ands	r2, r3
 801fa02:	6879      	ldr	r1, [r7, #4]
 801fa04:	0013      	movs	r3, r2
 801fa06:	009b      	lsls	r3, r3, #2
 801fa08:	189b      	adds	r3, r3, r2
 801fa0a:	009b      	lsls	r3, r3, #2
 801fa0c:	18cb      	adds	r3, r1, r3
 801fa0e:	3318      	adds	r3, #24
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d11e      	bne.n	801fa54 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801fa16:	683a      	ldr	r2, [r7, #0]
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	0011      	movs	r1, r2
 801fa1c:	0018      	movs	r0, r3
 801fa1e:	f000 fc12 	bl	8020246 <USBD_CtlError>
                  break;
 801fa22:	e065      	b.n	801faf0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801fa24:	230e      	movs	r3, #14
 801fa26:	18fb      	adds	r3, r7, r3
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	220f      	movs	r2, #15
 801fa2c:	401a      	ands	r2, r3
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	23ac      	movs	r3, #172	@ 0xac
 801fa32:	0059      	lsls	r1, r3, #1
 801fa34:	0013      	movs	r3, r2
 801fa36:	009b      	lsls	r3, r3, #2
 801fa38:	189b      	adds	r3, r3, r2
 801fa3a:	009b      	lsls	r3, r3, #2
 801fa3c:	18c3      	adds	r3, r0, r3
 801fa3e:	185b      	adds	r3, r3, r1
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d106      	bne.n	801fa54 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801fa46:	683a      	ldr	r2, [r7, #0]
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	0011      	movs	r1, r2
 801fa4c:	0018      	movs	r0, r3
 801fa4e:	f000 fbfa 	bl	8020246 <USBD_CtlError>
                  break;
 801fa52:	e04d      	b.n	801faf0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa54:	220e      	movs	r2, #14
 801fa56:	18bb      	adds	r3, r7, r2
 801fa58:	781b      	ldrb	r3, [r3, #0]
 801fa5a:	b25b      	sxtb	r3, r3
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	da0c      	bge.n	801fa7a <USBD_StdEPReq+0x2c8>
 801fa60:	18bb      	adds	r3, r7, r2
 801fa62:	781b      	ldrb	r3, [r3, #0]
 801fa64:	227f      	movs	r2, #127	@ 0x7f
 801fa66:	401a      	ands	r2, r3
 801fa68:	0013      	movs	r3, r2
 801fa6a:	009b      	lsls	r3, r3, #2
 801fa6c:	189b      	adds	r3, r3, r2
 801fa6e:	009b      	lsls	r3, r3, #2
 801fa70:	3310      	adds	r3, #16
 801fa72:	687a      	ldr	r2, [r7, #4]
 801fa74:	18d3      	adds	r3, r2, r3
 801fa76:	3304      	adds	r3, #4
 801fa78:	e00d      	b.n	801fa96 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801fa7a:	230e      	movs	r3, #14
 801fa7c:	18fb      	adds	r3, r7, r3
 801fa7e:	781b      	ldrb	r3, [r3, #0]
 801fa80:	227f      	movs	r2, #127	@ 0x7f
 801fa82:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa84:	0013      	movs	r3, r2
 801fa86:	009b      	lsls	r3, r3, #2
 801fa88:	189b      	adds	r3, r3, r2
 801fa8a:	009b      	lsls	r3, r3, #2
 801fa8c:	3351      	adds	r3, #81	@ 0x51
 801fa8e:	33ff      	adds	r3, #255	@ 0xff
 801fa90:	687a      	ldr	r2, [r7, #4]
 801fa92:	18d3      	adds	r3, r2, r3
 801fa94:	3304      	adds	r3, #4
 801fa96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801fa98:	220e      	movs	r2, #14
 801fa9a:	18bb      	adds	r3, r7, r2
 801fa9c:	781b      	ldrb	r3, [r3, #0]
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	d003      	beq.n	801faaa <USBD_StdEPReq+0x2f8>
 801faa2:	18bb      	adds	r3, r7, r2
 801faa4:	781b      	ldrb	r3, [r3, #0]
 801faa6:	2b80      	cmp	r3, #128	@ 0x80
 801faa8:	d103      	bne.n	801fab2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801faaa:	68bb      	ldr	r3, [r7, #8]
 801faac:	2200      	movs	r2, #0
 801faae:	601a      	str	r2, [r3, #0]
 801fab0:	e010      	b.n	801fad4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801fab2:	230e      	movs	r3, #14
 801fab4:	18fb      	adds	r3, r7, r3
 801fab6:	781a      	ldrb	r2, [r3, #0]
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	0011      	movs	r1, r2
 801fabc:	0018      	movs	r0, r3
 801fabe:	f001 f940 	bl	8020d42 <USBD_LL_IsStallEP>
 801fac2:	1e03      	subs	r3, r0, #0
 801fac4:	d003      	beq.n	801face <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801fac6:	68bb      	ldr	r3, [r7, #8]
 801fac8:	2201      	movs	r2, #1
 801faca:	601a      	str	r2, [r3, #0]
 801facc:	e002      	b.n	801fad4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801face:	68bb      	ldr	r3, [r7, #8]
 801fad0:	2200      	movs	r2, #0
 801fad2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801fad4:	68b9      	ldr	r1, [r7, #8]
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	2202      	movs	r2, #2
 801fada:	0018      	movs	r0, r3
 801fadc:	f000 fc31 	bl	8020342 <USBD_CtlSendData>
              break;
 801fae0:	e006      	b.n	801faf0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801fae2:	683a      	ldr	r2, [r7, #0]
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	0011      	movs	r1, r2
 801fae8:	0018      	movs	r0, r3
 801faea:	f000 fbac 	bl	8020246 <USBD_CtlError>
              break;
 801faee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801faf0:	e006      	b.n	801fb00 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801faf2:	683a      	ldr	r2, [r7, #0]
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	0011      	movs	r1, r2
 801faf8:	0018      	movs	r0, r3
 801fafa:	f000 fba4 	bl	8020246 <USBD_CtlError>
          break;
 801fafe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801fb00:	e006      	b.n	801fb10 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801fb02:	683a      	ldr	r2, [r7, #0]
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	0011      	movs	r1, r2
 801fb08:	0018      	movs	r0, r3
 801fb0a:	f000 fb9c 	bl	8020246 <USBD_CtlError>
      break;
 801fb0e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801fb10:	230f      	movs	r3, #15
 801fb12:	18fb      	adds	r3, r7, r3
 801fb14:	781b      	ldrb	r3, [r3, #0]
}
 801fb16:	0018      	movs	r0, r3
 801fb18:	46bd      	mov	sp, r7
 801fb1a:	b004      	add	sp, #16
 801fb1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801fb20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801fb20:	b580      	push	{r7, lr}
 801fb22:	b084      	sub	sp, #16
 801fb24:	af00      	add	r7, sp, #0
 801fb26:	6078      	str	r0, [r7, #4]
 801fb28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801fb2a:	2308      	movs	r3, #8
 801fb2c:	18fb      	adds	r3, r7, r3
 801fb2e:	2200      	movs	r2, #0
 801fb30:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801fb32:	2300      	movs	r3, #0
 801fb34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801fb36:	230b      	movs	r3, #11
 801fb38:	18fb      	adds	r3, r7, r3
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801fb3e:	683b      	ldr	r3, [r7, #0]
 801fb40:	885b      	ldrh	r3, [r3, #2]
 801fb42:	0a1b      	lsrs	r3, r3, #8
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	2b07      	cmp	r3, #7
 801fb48:	d900      	bls.n	801fb4c <USBD_GetDescriptor+0x2c>
 801fb4a:	e159      	b.n	801fe00 <USBD_GetDescriptor+0x2e0>
 801fb4c:	009a      	lsls	r2, r3, #2
 801fb4e:	4bcb      	ldr	r3, [pc, #812]	@ (801fe7c <USBD_GetDescriptor+0x35c>)
 801fb50:	18d3      	adds	r3, r2, r3
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801fb56:	687a      	ldr	r2, [r7, #4]
 801fb58:	23ac      	movs	r3, #172	@ 0xac
 801fb5a:	009b      	lsls	r3, r3, #2
 801fb5c:	58d3      	ldr	r3, [r2, r3]
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	687a      	ldr	r2, [r7, #4]
 801fb62:	7c12      	ldrb	r2, [r2, #16]
 801fb64:	2108      	movs	r1, #8
 801fb66:	1879      	adds	r1, r7, r1
 801fb68:	0010      	movs	r0, r2
 801fb6a:	4798      	blx	r3
 801fb6c:	0003      	movs	r3, r0
 801fb6e:	60fb      	str	r3, [r7, #12]
      break;
 801fb70:	e153      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fb72:	687b      	ldr	r3, [r7, #4]
 801fb74:	7c1b      	ldrb	r3, [r3, #16]
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d10f      	bne.n	801fb9a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801fb7a:	687a      	ldr	r2, [r7, #4]
 801fb7c:	23ad      	movs	r3, #173	@ 0xad
 801fb7e:	009b      	lsls	r3, r3, #2
 801fb80:	58d3      	ldr	r3, [r2, r3]
 801fb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb84:	2208      	movs	r2, #8
 801fb86:	18ba      	adds	r2, r7, r2
 801fb88:	0010      	movs	r0, r2
 801fb8a:	4798      	blx	r3
 801fb8c:	0003      	movs	r3, r0
 801fb8e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	3301      	adds	r3, #1
 801fb94:	2202      	movs	r2, #2
 801fb96:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801fb98:	e13f      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801fb9a:	687a      	ldr	r2, [r7, #4]
 801fb9c:	23ad      	movs	r3, #173	@ 0xad
 801fb9e:	009b      	lsls	r3, r3, #2
 801fba0:	58d3      	ldr	r3, [r2, r3]
 801fba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fba4:	2208      	movs	r2, #8
 801fba6:	18ba      	adds	r2, r7, r2
 801fba8:	0010      	movs	r0, r2
 801fbaa:	4798      	blx	r3
 801fbac:	0003      	movs	r3, r0
 801fbae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	2202      	movs	r2, #2
 801fbb6:	701a      	strb	r2, [r3, #0]
      break;
 801fbb8:	e12f      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801fbba:	683b      	ldr	r3, [r7, #0]
 801fbbc:	885b      	ldrh	r3, [r3, #2]
 801fbbe:	b2db      	uxtb	r3, r3
 801fbc0:	2b05      	cmp	r3, #5
 801fbc2:	d900      	bls.n	801fbc6 <USBD_GetDescriptor+0xa6>
 801fbc4:	e0d0      	b.n	801fd68 <USBD_GetDescriptor+0x248>
 801fbc6:	009a      	lsls	r2, r3, #2
 801fbc8:	4bad      	ldr	r3, [pc, #692]	@ (801fe80 <USBD_GetDescriptor+0x360>)
 801fbca:	18d3      	adds	r3, r2, r3
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801fbd0:	687a      	ldr	r2, [r7, #4]
 801fbd2:	23ac      	movs	r3, #172	@ 0xac
 801fbd4:	009b      	lsls	r3, r3, #2
 801fbd6:	58d3      	ldr	r3, [r2, r3]
 801fbd8:	685b      	ldr	r3, [r3, #4]
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d00d      	beq.n	801fbfa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801fbde:	687a      	ldr	r2, [r7, #4]
 801fbe0:	23ac      	movs	r3, #172	@ 0xac
 801fbe2:	009b      	lsls	r3, r3, #2
 801fbe4:	58d3      	ldr	r3, [r2, r3]
 801fbe6:	685b      	ldr	r3, [r3, #4]
 801fbe8:	687a      	ldr	r2, [r7, #4]
 801fbea:	7c12      	ldrb	r2, [r2, #16]
 801fbec:	2108      	movs	r1, #8
 801fbee:	1879      	adds	r1, r7, r1
 801fbf0:	0010      	movs	r0, r2
 801fbf2:	4798      	blx	r3
 801fbf4:	0003      	movs	r3, r0
 801fbf6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fbf8:	e0c3      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fbfa:	683a      	ldr	r2, [r7, #0]
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	0011      	movs	r1, r2
 801fc00:	0018      	movs	r0, r3
 801fc02:	f000 fb20 	bl	8020246 <USBD_CtlError>
            err++;
 801fc06:	210b      	movs	r1, #11
 801fc08:	187b      	adds	r3, r7, r1
 801fc0a:	781a      	ldrb	r2, [r3, #0]
 801fc0c:	187b      	adds	r3, r7, r1
 801fc0e:	3201      	adds	r2, #1
 801fc10:	701a      	strb	r2, [r3, #0]
          break;
 801fc12:	e0b6      	b.n	801fd82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801fc14:	687a      	ldr	r2, [r7, #4]
 801fc16:	23ac      	movs	r3, #172	@ 0xac
 801fc18:	009b      	lsls	r3, r3, #2
 801fc1a:	58d3      	ldr	r3, [r2, r3]
 801fc1c:	689b      	ldr	r3, [r3, #8]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d00d      	beq.n	801fc3e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	23ac      	movs	r3, #172	@ 0xac
 801fc26:	009b      	lsls	r3, r3, #2
 801fc28:	58d3      	ldr	r3, [r2, r3]
 801fc2a:	689b      	ldr	r3, [r3, #8]
 801fc2c:	687a      	ldr	r2, [r7, #4]
 801fc2e:	7c12      	ldrb	r2, [r2, #16]
 801fc30:	2108      	movs	r1, #8
 801fc32:	1879      	adds	r1, r7, r1
 801fc34:	0010      	movs	r0, r2
 801fc36:	4798      	blx	r3
 801fc38:	0003      	movs	r3, r0
 801fc3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fc3c:	e0a1      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fc3e:	683a      	ldr	r2, [r7, #0]
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	0011      	movs	r1, r2
 801fc44:	0018      	movs	r0, r3
 801fc46:	f000 fafe 	bl	8020246 <USBD_CtlError>
            err++;
 801fc4a:	210b      	movs	r1, #11
 801fc4c:	187b      	adds	r3, r7, r1
 801fc4e:	781a      	ldrb	r2, [r3, #0]
 801fc50:	187b      	adds	r3, r7, r1
 801fc52:	3201      	adds	r2, #1
 801fc54:	701a      	strb	r2, [r3, #0]
          break;
 801fc56:	e094      	b.n	801fd82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801fc58:	687a      	ldr	r2, [r7, #4]
 801fc5a:	23ac      	movs	r3, #172	@ 0xac
 801fc5c:	009b      	lsls	r3, r3, #2
 801fc5e:	58d3      	ldr	r3, [r2, r3]
 801fc60:	68db      	ldr	r3, [r3, #12]
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d00d      	beq.n	801fc82 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	23ac      	movs	r3, #172	@ 0xac
 801fc6a:	009b      	lsls	r3, r3, #2
 801fc6c:	58d3      	ldr	r3, [r2, r3]
 801fc6e:	68db      	ldr	r3, [r3, #12]
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	7c12      	ldrb	r2, [r2, #16]
 801fc74:	2108      	movs	r1, #8
 801fc76:	1879      	adds	r1, r7, r1
 801fc78:	0010      	movs	r0, r2
 801fc7a:	4798      	blx	r3
 801fc7c:	0003      	movs	r3, r0
 801fc7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fc80:	e07f      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fc82:	683a      	ldr	r2, [r7, #0]
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	0011      	movs	r1, r2
 801fc88:	0018      	movs	r0, r3
 801fc8a:	f000 fadc 	bl	8020246 <USBD_CtlError>
            err++;
 801fc8e:	210b      	movs	r1, #11
 801fc90:	187b      	adds	r3, r7, r1
 801fc92:	781a      	ldrb	r2, [r3, #0]
 801fc94:	187b      	adds	r3, r7, r1
 801fc96:	3201      	adds	r2, #1
 801fc98:	701a      	strb	r2, [r3, #0]
          break;
 801fc9a:	e072      	b.n	801fd82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801fc9c:	687a      	ldr	r2, [r7, #4]
 801fc9e:	23ac      	movs	r3, #172	@ 0xac
 801fca0:	009b      	lsls	r3, r3, #2
 801fca2:	58d3      	ldr	r3, [r2, r3]
 801fca4:	691b      	ldr	r3, [r3, #16]
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d00d      	beq.n	801fcc6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	23ac      	movs	r3, #172	@ 0xac
 801fcae:	009b      	lsls	r3, r3, #2
 801fcb0:	58d3      	ldr	r3, [r2, r3]
 801fcb2:	691b      	ldr	r3, [r3, #16]
 801fcb4:	687a      	ldr	r2, [r7, #4]
 801fcb6:	7c12      	ldrb	r2, [r2, #16]
 801fcb8:	2108      	movs	r1, #8
 801fcba:	1879      	adds	r1, r7, r1
 801fcbc:	0010      	movs	r0, r2
 801fcbe:	4798      	blx	r3
 801fcc0:	0003      	movs	r3, r0
 801fcc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fcc4:	e05d      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fcc6:	683a      	ldr	r2, [r7, #0]
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	0011      	movs	r1, r2
 801fccc:	0018      	movs	r0, r3
 801fcce:	f000 faba 	bl	8020246 <USBD_CtlError>
            err++;
 801fcd2:	210b      	movs	r1, #11
 801fcd4:	187b      	adds	r3, r7, r1
 801fcd6:	781a      	ldrb	r2, [r3, #0]
 801fcd8:	187b      	adds	r3, r7, r1
 801fcda:	3201      	adds	r2, #1
 801fcdc:	701a      	strb	r2, [r3, #0]
          break;
 801fcde:	e050      	b.n	801fd82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801fce0:	687a      	ldr	r2, [r7, #4]
 801fce2:	23ac      	movs	r3, #172	@ 0xac
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	58d3      	ldr	r3, [r2, r3]
 801fce8:	695b      	ldr	r3, [r3, #20]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d00d      	beq.n	801fd0a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	23ac      	movs	r3, #172	@ 0xac
 801fcf2:	009b      	lsls	r3, r3, #2
 801fcf4:	58d3      	ldr	r3, [r2, r3]
 801fcf6:	695b      	ldr	r3, [r3, #20]
 801fcf8:	687a      	ldr	r2, [r7, #4]
 801fcfa:	7c12      	ldrb	r2, [r2, #16]
 801fcfc:	2108      	movs	r1, #8
 801fcfe:	1879      	adds	r1, r7, r1
 801fd00:	0010      	movs	r0, r2
 801fd02:	4798      	blx	r3
 801fd04:	0003      	movs	r3, r0
 801fd06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd08:	e03b      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd0a:	683a      	ldr	r2, [r7, #0]
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	0011      	movs	r1, r2
 801fd10:	0018      	movs	r0, r3
 801fd12:	f000 fa98 	bl	8020246 <USBD_CtlError>
            err++;
 801fd16:	210b      	movs	r1, #11
 801fd18:	187b      	adds	r3, r7, r1
 801fd1a:	781a      	ldrb	r2, [r3, #0]
 801fd1c:	187b      	adds	r3, r7, r1
 801fd1e:	3201      	adds	r2, #1
 801fd20:	701a      	strb	r2, [r3, #0]
          break;
 801fd22:	e02e      	b.n	801fd82 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801fd24:	687a      	ldr	r2, [r7, #4]
 801fd26:	23ac      	movs	r3, #172	@ 0xac
 801fd28:	009b      	lsls	r3, r3, #2
 801fd2a:	58d3      	ldr	r3, [r2, r3]
 801fd2c:	699b      	ldr	r3, [r3, #24]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d00d      	beq.n	801fd4e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801fd32:	687a      	ldr	r2, [r7, #4]
 801fd34:	23ac      	movs	r3, #172	@ 0xac
 801fd36:	009b      	lsls	r3, r3, #2
 801fd38:	58d3      	ldr	r3, [r2, r3]
 801fd3a:	699b      	ldr	r3, [r3, #24]
 801fd3c:	687a      	ldr	r2, [r7, #4]
 801fd3e:	7c12      	ldrb	r2, [r2, #16]
 801fd40:	2108      	movs	r1, #8
 801fd42:	1879      	adds	r1, r7, r1
 801fd44:	0010      	movs	r0, r2
 801fd46:	4798      	blx	r3
 801fd48:	0003      	movs	r3, r0
 801fd4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd4c:	e019      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd4e:	683a      	ldr	r2, [r7, #0]
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	0011      	movs	r1, r2
 801fd54:	0018      	movs	r0, r3
 801fd56:	f000 fa76 	bl	8020246 <USBD_CtlError>
            err++;
 801fd5a:	210b      	movs	r1, #11
 801fd5c:	187b      	adds	r3, r7, r1
 801fd5e:	781a      	ldrb	r2, [r3, #0]
 801fd60:	187b      	adds	r3, r7, r1
 801fd62:	3201      	adds	r2, #1
 801fd64:	701a      	strb	r2, [r3, #0]
          break;
 801fd66:	e00c      	b.n	801fd82 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801fd68:	683a      	ldr	r2, [r7, #0]
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	0011      	movs	r1, r2
 801fd6e:	0018      	movs	r0, r3
 801fd70:	f000 fa69 	bl	8020246 <USBD_CtlError>
          err++;
 801fd74:	210b      	movs	r1, #11
 801fd76:	187b      	adds	r3, r7, r1
 801fd78:	781a      	ldrb	r2, [r3, #0]
 801fd7a:	187b      	adds	r3, r7, r1
 801fd7c:	3201      	adds	r2, #1
 801fd7e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801fd80:	e04b      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>
 801fd82:	e04a      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	7c1b      	ldrb	r3, [r3, #16]
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d10b      	bne.n	801fda4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801fd8c:	687a      	ldr	r2, [r7, #4]
 801fd8e:	23ad      	movs	r3, #173	@ 0xad
 801fd90:	009b      	lsls	r3, r3, #2
 801fd92:	58d3      	ldr	r3, [r2, r3]
 801fd94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd96:	2208      	movs	r2, #8
 801fd98:	18ba      	adds	r2, r7, r2
 801fd9a:	0010      	movs	r0, r2
 801fd9c:	4798      	blx	r3
 801fd9e:	0003      	movs	r3, r0
 801fda0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fda2:	e03a      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fda4:	683a      	ldr	r2, [r7, #0]
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	0011      	movs	r1, r2
 801fdaa:	0018      	movs	r0, r3
 801fdac:	f000 fa4b 	bl	8020246 <USBD_CtlError>
        err++;
 801fdb0:	210b      	movs	r1, #11
 801fdb2:	187b      	adds	r3, r7, r1
 801fdb4:	781a      	ldrb	r2, [r3, #0]
 801fdb6:	187b      	adds	r3, r7, r1
 801fdb8:	3201      	adds	r2, #1
 801fdba:	701a      	strb	r2, [r3, #0]
      break;
 801fdbc:	e02d      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	7c1b      	ldrb	r3, [r3, #16]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d10f      	bne.n	801fde6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801fdc6:	687a      	ldr	r2, [r7, #4]
 801fdc8:	23ad      	movs	r3, #173	@ 0xad
 801fdca:	009b      	lsls	r3, r3, #2
 801fdcc:	58d3      	ldr	r3, [r2, r3]
 801fdce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fdd0:	2208      	movs	r2, #8
 801fdd2:	18ba      	adds	r2, r7, r2
 801fdd4:	0010      	movs	r0, r2
 801fdd6:	4798      	blx	r3
 801fdd8:	0003      	movs	r3, r0
 801fdda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801fddc:	68fb      	ldr	r3, [r7, #12]
 801fdde:	3301      	adds	r3, #1
 801fde0:	2207      	movs	r2, #7
 801fde2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fde4:	e019      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fde6:	683a      	ldr	r2, [r7, #0]
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	0011      	movs	r1, r2
 801fdec:	0018      	movs	r0, r3
 801fdee:	f000 fa2a 	bl	8020246 <USBD_CtlError>
        err++;
 801fdf2:	210b      	movs	r1, #11
 801fdf4:	187b      	adds	r3, r7, r1
 801fdf6:	781a      	ldrb	r2, [r3, #0]
 801fdf8:	187b      	adds	r3, r7, r1
 801fdfa:	3201      	adds	r2, #1
 801fdfc:	701a      	strb	r2, [r3, #0]
      break;
 801fdfe:	e00c      	b.n	801fe1a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801fe00:	683a      	ldr	r2, [r7, #0]
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	0011      	movs	r1, r2
 801fe06:	0018      	movs	r0, r3
 801fe08:	f000 fa1d 	bl	8020246 <USBD_CtlError>
      err++;
 801fe0c:	210b      	movs	r1, #11
 801fe0e:	187b      	adds	r3, r7, r1
 801fe10:	781a      	ldrb	r2, [r3, #0]
 801fe12:	187b      	adds	r3, r7, r1
 801fe14:	3201      	adds	r2, #1
 801fe16:	701a      	strb	r2, [r3, #0]
      break;
 801fe18:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801fe1a:	230b      	movs	r3, #11
 801fe1c:	18fb      	adds	r3, r7, r3
 801fe1e:	781b      	ldrb	r3, [r3, #0]
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d127      	bne.n	801fe74 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801fe24:	2108      	movs	r1, #8
 801fe26:	187b      	adds	r3, r7, r1
 801fe28:	881b      	ldrh	r3, [r3, #0]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d019      	beq.n	801fe62 <USBD_GetDescriptor+0x342>
 801fe2e:	683b      	ldr	r3, [r7, #0]
 801fe30:	88db      	ldrh	r3, [r3, #6]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d015      	beq.n	801fe62 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801fe36:	683b      	ldr	r3, [r7, #0]
 801fe38:	88da      	ldrh	r2, [r3, #6]
 801fe3a:	187b      	adds	r3, r7, r1
 801fe3c:	881b      	ldrh	r3, [r3, #0]
 801fe3e:	1c18      	adds	r0, r3, #0
 801fe40:	1c11      	adds	r1, r2, #0
 801fe42:	b28a      	uxth	r2, r1
 801fe44:	b283      	uxth	r3, r0
 801fe46:	429a      	cmp	r2, r3
 801fe48:	d900      	bls.n	801fe4c <USBD_GetDescriptor+0x32c>
 801fe4a:	1c01      	adds	r1, r0, #0
 801fe4c:	b28a      	uxth	r2, r1
 801fe4e:	2108      	movs	r1, #8
 801fe50:	187b      	adds	r3, r7, r1
 801fe52:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801fe54:	187b      	adds	r3, r7, r1
 801fe56:	881a      	ldrh	r2, [r3, #0]
 801fe58:	68f9      	ldr	r1, [r7, #12]
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	0018      	movs	r0, r3
 801fe5e:	f000 fa70 	bl	8020342 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801fe62:	683b      	ldr	r3, [r7, #0]
 801fe64:	88db      	ldrh	r3, [r3, #6]
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d105      	bne.n	801fe76 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	0018      	movs	r0, r3
 801fe6e:	f000 fad2 	bl	8020416 <USBD_CtlSendStatus>
 801fe72:	e000      	b.n	801fe76 <USBD_GetDescriptor+0x356>
    return;
 801fe74:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801fe76:	46bd      	mov	sp, r7
 801fe78:	b004      	add	sp, #16
 801fe7a:	bd80      	pop	{r7, pc}
 801fe7c:	0802b254 	.word	0x0802b254
 801fe80:	0802b274 	.word	0x0802b274

0801fe84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801fe84:	b590      	push	{r4, r7, lr}
 801fe86:	b085      	sub	sp, #20
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	6078      	str	r0, [r7, #4]
 801fe8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801fe8e:	683b      	ldr	r3, [r7, #0]
 801fe90:	889b      	ldrh	r3, [r3, #4]
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d13d      	bne.n	801ff12 <USBD_SetAddress+0x8e>
 801fe96:	683b      	ldr	r3, [r7, #0]
 801fe98:	88db      	ldrh	r3, [r3, #6]
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d139      	bne.n	801ff12 <USBD_SetAddress+0x8e>
 801fe9e:	683b      	ldr	r3, [r7, #0]
 801fea0:	885b      	ldrh	r3, [r3, #2]
 801fea2:	2b7f      	cmp	r3, #127	@ 0x7f
 801fea4:	d835      	bhi.n	801ff12 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801fea6:	683b      	ldr	r3, [r7, #0]
 801fea8:	885b      	ldrh	r3, [r3, #2]
 801feaa:	b2da      	uxtb	r2, r3
 801feac:	230f      	movs	r3, #15
 801feae:	18fb      	adds	r3, r7, r3
 801feb0:	217f      	movs	r1, #127	@ 0x7f
 801feb2:	400a      	ands	r2, r1
 801feb4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801feb6:	687a      	ldr	r2, [r7, #4]
 801feb8:	23a7      	movs	r3, #167	@ 0xa7
 801feba:	009b      	lsls	r3, r3, #2
 801febc:	5cd3      	ldrb	r3, [r2, r3]
 801febe:	2b03      	cmp	r3, #3
 801fec0:	d106      	bne.n	801fed0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801fec2:	683a      	ldr	r2, [r7, #0]
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	0011      	movs	r1, r2
 801fec8:	0018      	movs	r0, r3
 801feca:	f000 f9bc 	bl	8020246 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fece:	e027      	b.n	801ff20 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	240f      	movs	r4, #15
 801fed4:	193a      	adds	r2, r7, r4
 801fed6:	4914      	ldr	r1, [pc, #80]	@ (801ff28 <USBD_SetAddress+0xa4>)
 801fed8:	7812      	ldrb	r2, [r2, #0]
 801feda:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801fedc:	193b      	adds	r3, r7, r4
 801fede:	781a      	ldrb	r2, [r3, #0]
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	0011      	movs	r1, r2
 801fee4:	0018      	movs	r0, r3
 801fee6:	f000 ff5d 	bl	8020da4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	0018      	movs	r0, r3
 801feee:	f000 fa92 	bl	8020416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801fef2:	193b      	adds	r3, r7, r4
 801fef4:	781b      	ldrb	r3, [r3, #0]
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d005      	beq.n	801ff06 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801fefa:	687a      	ldr	r2, [r7, #4]
 801fefc:	23a7      	movs	r3, #167	@ 0xa7
 801fefe:	009b      	lsls	r3, r3, #2
 801ff00:	2102      	movs	r1, #2
 801ff02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff04:	e00c      	b.n	801ff20 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ff06:	687a      	ldr	r2, [r7, #4]
 801ff08:	23a7      	movs	r3, #167	@ 0xa7
 801ff0a:	009b      	lsls	r3, r3, #2
 801ff0c:	2101      	movs	r1, #1
 801ff0e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff10:	e006      	b.n	801ff20 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ff12:	683a      	ldr	r2, [r7, #0]
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	0011      	movs	r1, r2
 801ff18:	0018      	movs	r0, r3
 801ff1a:	f000 f994 	bl	8020246 <USBD_CtlError>
  }
}
 801ff1e:	46c0      	nop			@ (mov r8, r8)
 801ff20:	46c0      	nop			@ (mov r8, r8)
 801ff22:	46bd      	mov	sp, r7
 801ff24:	b005      	add	sp, #20
 801ff26:	bd90      	pop	{r4, r7, pc}
 801ff28:	0000029e 	.word	0x0000029e

0801ff2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ff2c:	b580      	push	{r7, lr}
 801ff2e:	b082      	sub	sp, #8
 801ff30:	af00      	add	r7, sp, #0
 801ff32:	6078      	str	r0, [r7, #4]
 801ff34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ff36:	683b      	ldr	r3, [r7, #0]
 801ff38:	885b      	ldrh	r3, [r3, #2]
 801ff3a:	b2da      	uxtb	r2, r3
 801ff3c:	4b4c      	ldr	r3, [pc, #304]	@ (8020070 <USBD_SetConfig+0x144>)
 801ff3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ff40:	4b4b      	ldr	r3, [pc, #300]	@ (8020070 <USBD_SetConfig+0x144>)
 801ff42:	781b      	ldrb	r3, [r3, #0]
 801ff44:	2b01      	cmp	r3, #1
 801ff46:	d906      	bls.n	801ff56 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ff48:	683a      	ldr	r2, [r7, #0]
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	0011      	movs	r1, r2
 801ff4e:	0018      	movs	r0, r3
 801ff50:	f000 f979 	bl	8020246 <USBD_CtlError>
 801ff54:	e088      	b.n	8020068 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ff56:	687a      	ldr	r2, [r7, #4]
 801ff58:	23a7      	movs	r3, #167	@ 0xa7
 801ff5a:	009b      	lsls	r3, r3, #2
 801ff5c:	5cd3      	ldrb	r3, [r2, r3]
 801ff5e:	2b02      	cmp	r3, #2
 801ff60:	d002      	beq.n	801ff68 <USBD_SetConfig+0x3c>
 801ff62:	2b03      	cmp	r3, #3
 801ff64:	d029      	beq.n	801ffba <USBD_SetConfig+0x8e>
 801ff66:	e071      	b.n	802004c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801ff68:	4b41      	ldr	r3, [pc, #260]	@ (8020070 <USBD_SetConfig+0x144>)
 801ff6a:	781b      	ldrb	r3, [r3, #0]
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d01f      	beq.n	801ffb0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801ff70:	4b3f      	ldr	r3, [pc, #252]	@ (8020070 <USBD_SetConfig+0x144>)
 801ff72:	781b      	ldrb	r3, [r3, #0]
 801ff74:	001a      	movs	r2, r3
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ff7a:	687a      	ldr	r2, [r7, #4]
 801ff7c:	23a7      	movs	r3, #167	@ 0xa7
 801ff7e:	009b      	lsls	r3, r3, #2
 801ff80:	2103      	movs	r1, #3
 801ff82:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ff84:	4b3a      	ldr	r3, [pc, #232]	@ (8020070 <USBD_SetConfig+0x144>)
 801ff86:	781a      	ldrb	r2, [r3, #0]
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	0011      	movs	r1, r2
 801ff8c:	0018      	movs	r0, r3
 801ff8e:	f7ff f8c6 	bl	801f11e <USBD_SetClassConfig>
 801ff92:	0003      	movs	r3, r0
 801ff94:	2b02      	cmp	r3, #2
 801ff96:	d106      	bne.n	801ffa6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801ff98:	683a      	ldr	r2, [r7, #0]
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	0011      	movs	r1, r2
 801ff9e:	0018      	movs	r0, r3
 801ffa0:	f000 f951 	bl	8020246 <USBD_CtlError>
            return;
 801ffa4:	e060      	b.n	8020068 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	0018      	movs	r0, r3
 801ffaa:	f000 fa34 	bl	8020416 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ffae:	e05b      	b.n	8020068 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	0018      	movs	r0, r3
 801ffb4:	f000 fa2f 	bl	8020416 <USBD_CtlSendStatus>
        break;
 801ffb8:	e056      	b.n	8020068 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ffba:	4b2d      	ldr	r3, [pc, #180]	@ (8020070 <USBD_SetConfig+0x144>)
 801ffbc:	781b      	ldrb	r3, [r3, #0]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d115      	bne.n	801ffee <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ffc2:	687a      	ldr	r2, [r7, #4]
 801ffc4:	23a7      	movs	r3, #167	@ 0xa7
 801ffc6:	009b      	lsls	r3, r3, #2
 801ffc8:	2102      	movs	r1, #2
 801ffca:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ffcc:	4b28      	ldr	r3, [pc, #160]	@ (8020070 <USBD_SetConfig+0x144>)
 801ffce:	781b      	ldrb	r3, [r3, #0]
 801ffd0:	001a      	movs	r2, r3
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801ffd6:	4b26      	ldr	r3, [pc, #152]	@ (8020070 <USBD_SetConfig+0x144>)
 801ffd8:	781a      	ldrb	r2, [r3, #0]
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	0011      	movs	r1, r2
 801ffde:	0018      	movs	r0, r3
 801ffe0:	f7ff f8c4 	bl	801f16c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	0018      	movs	r0, r3
 801ffe8:	f000 fa15 	bl	8020416 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ffec:	e03c      	b.n	8020068 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801ffee:	4b20      	ldr	r3, [pc, #128]	@ (8020070 <USBD_SetConfig+0x144>)
 801fff0:	781b      	ldrb	r3, [r3, #0]
 801fff2:	001a      	movs	r2, r3
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	685b      	ldr	r3, [r3, #4]
 801fff8:	429a      	cmp	r2, r3
 801fffa:	d022      	beq.n	8020042 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	685b      	ldr	r3, [r3, #4]
 8020000:	b2da      	uxtb	r2, r3
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	0011      	movs	r1, r2
 8020006:	0018      	movs	r0, r3
 8020008:	f7ff f8b0 	bl	801f16c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 802000c:	4b18      	ldr	r3, [pc, #96]	@ (8020070 <USBD_SetConfig+0x144>)
 802000e:	781b      	ldrb	r3, [r3, #0]
 8020010:	001a      	movs	r2, r3
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8020016:	4b16      	ldr	r3, [pc, #88]	@ (8020070 <USBD_SetConfig+0x144>)
 8020018:	781a      	ldrb	r2, [r3, #0]
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	0011      	movs	r1, r2
 802001e:	0018      	movs	r0, r3
 8020020:	f7ff f87d 	bl	801f11e <USBD_SetClassConfig>
 8020024:	0003      	movs	r3, r0
 8020026:	2b02      	cmp	r3, #2
 8020028:	d106      	bne.n	8020038 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 802002a:	683a      	ldr	r2, [r7, #0]
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	0011      	movs	r1, r2
 8020030:	0018      	movs	r0, r3
 8020032:	f000 f908 	bl	8020246 <USBD_CtlError>
            return;
 8020036:	e017      	b.n	8020068 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	0018      	movs	r0, r3
 802003c:	f000 f9eb 	bl	8020416 <USBD_CtlSendStatus>
        break;
 8020040:	e012      	b.n	8020068 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	0018      	movs	r0, r3
 8020046:	f000 f9e6 	bl	8020416 <USBD_CtlSendStatus>
        break;
 802004a:	e00d      	b.n	8020068 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 802004c:	683a      	ldr	r2, [r7, #0]
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	0011      	movs	r1, r2
 8020052:	0018      	movs	r0, r3
 8020054:	f000 f8f7 	bl	8020246 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8020058:	4b05      	ldr	r3, [pc, #20]	@ (8020070 <USBD_SetConfig+0x144>)
 802005a:	781a      	ldrb	r2, [r3, #0]
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	0011      	movs	r1, r2
 8020060:	0018      	movs	r0, r3
 8020062:	f7ff f883 	bl	801f16c <USBD_ClrClassConfig>
        break;
 8020066:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8020068:	46bd      	mov	sp, r7
 802006a:	b002      	add	sp, #8
 802006c:	bd80      	pop	{r7, pc}
 802006e:	46c0      	nop			@ (mov r8, r8)
 8020070:	20002208 	.word	0x20002208

08020074 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020074:	b580      	push	{r7, lr}
 8020076:	b082      	sub	sp, #8
 8020078:	af00      	add	r7, sp, #0
 802007a:	6078      	str	r0, [r7, #4]
 802007c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802007e:	683b      	ldr	r3, [r7, #0]
 8020080:	88db      	ldrh	r3, [r3, #6]
 8020082:	2b01      	cmp	r3, #1
 8020084:	d006      	beq.n	8020094 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8020086:	683a      	ldr	r2, [r7, #0]
 8020088:	687b      	ldr	r3, [r7, #4]
 802008a:	0011      	movs	r1, r2
 802008c:	0018      	movs	r0, r3
 802008e:	f000 f8da 	bl	8020246 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8020092:	e026      	b.n	80200e2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8020094:	687a      	ldr	r2, [r7, #4]
 8020096:	23a7      	movs	r3, #167	@ 0xa7
 8020098:	009b      	lsls	r3, r3, #2
 802009a:	5cd3      	ldrb	r3, [r2, r3]
 802009c:	2b02      	cmp	r3, #2
 802009e:	dc02      	bgt.n	80200a6 <USBD_GetConfig+0x32>
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	dc03      	bgt.n	80200ac <USBD_GetConfig+0x38>
 80200a4:	e016      	b.n	80200d4 <USBD_GetConfig+0x60>
 80200a6:	2b03      	cmp	r3, #3
 80200a8:	d00c      	beq.n	80200c4 <USBD_GetConfig+0x50>
 80200aa:	e013      	b.n	80200d4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	2200      	movs	r2, #0
 80200b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	3308      	adds	r3, #8
 80200b6:	0019      	movs	r1, r3
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2201      	movs	r2, #1
 80200bc:	0018      	movs	r0, r3
 80200be:	f000 f940 	bl	8020342 <USBD_CtlSendData>
        break;
 80200c2:	e00e      	b.n	80200e2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	1d19      	adds	r1, r3, #4
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	2201      	movs	r2, #1
 80200cc:	0018      	movs	r0, r3
 80200ce:	f000 f938 	bl	8020342 <USBD_CtlSendData>
        break;
 80200d2:	e006      	b.n	80200e2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80200d4:	683a      	ldr	r2, [r7, #0]
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	0011      	movs	r1, r2
 80200da:	0018      	movs	r0, r3
 80200dc:	f000 f8b3 	bl	8020246 <USBD_CtlError>
        break;
 80200e0:	46c0      	nop			@ (mov r8, r8)
}
 80200e2:	46c0      	nop			@ (mov r8, r8)
 80200e4:	46bd      	mov	sp, r7
 80200e6:	b002      	add	sp, #8
 80200e8:	bd80      	pop	{r7, pc}

080200ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80200ea:	b580      	push	{r7, lr}
 80200ec:	b082      	sub	sp, #8
 80200ee:	af00      	add	r7, sp, #0
 80200f0:	6078      	str	r0, [r7, #4]
 80200f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80200f4:	687a      	ldr	r2, [r7, #4]
 80200f6:	23a7      	movs	r3, #167	@ 0xa7
 80200f8:	009b      	lsls	r3, r3, #2
 80200fa:	5cd3      	ldrb	r3, [r2, r3]
 80200fc:	3b01      	subs	r3, #1
 80200fe:	2b02      	cmp	r3, #2
 8020100:	d822      	bhi.n	8020148 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	88db      	ldrh	r3, [r3, #6]
 8020106:	2b02      	cmp	r3, #2
 8020108:	d006      	beq.n	8020118 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 802010a:	683a      	ldr	r2, [r7, #0]
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	0011      	movs	r1, r2
 8020110:	0018      	movs	r0, r3
 8020112:	f000 f898 	bl	8020246 <USBD_CtlError>
        break;
 8020116:	e01e      	b.n	8020156 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	2201      	movs	r2, #1
 802011c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 802011e:	687a      	ldr	r2, [r7, #4]
 8020120:	23a9      	movs	r3, #169	@ 0xa9
 8020122:	009b      	lsls	r3, r3, #2
 8020124:	58d3      	ldr	r3, [r2, r3]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d005      	beq.n	8020136 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	68db      	ldr	r3, [r3, #12]
 802012e:	2202      	movs	r2, #2
 8020130:	431a      	orrs	r2, r3
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	330c      	adds	r3, #12
 802013a:	0019      	movs	r1, r3
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	2202      	movs	r2, #2
 8020140:	0018      	movs	r0, r3
 8020142:	f000 f8fe 	bl	8020342 <USBD_CtlSendData>
      break;
 8020146:	e006      	b.n	8020156 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8020148:	683a      	ldr	r2, [r7, #0]
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	0011      	movs	r1, r2
 802014e:	0018      	movs	r0, r3
 8020150:	f000 f879 	bl	8020246 <USBD_CtlError>
      break;
 8020154:	46c0      	nop			@ (mov r8, r8)
  }
}
 8020156:	46c0      	nop			@ (mov r8, r8)
 8020158:	46bd      	mov	sp, r7
 802015a:	b002      	add	sp, #8
 802015c:	bd80      	pop	{r7, pc}

0802015e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802015e:	b580      	push	{r7, lr}
 8020160:	b082      	sub	sp, #8
 8020162:	af00      	add	r7, sp, #0
 8020164:	6078      	str	r0, [r7, #4]
 8020166:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	885b      	ldrh	r3, [r3, #2]
 802016c:	2b01      	cmp	r3, #1
 802016e:	d108      	bne.n	8020182 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8020170:	687a      	ldr	r2, [r7, #4]
 8020172:	23a9      	movs	r3, #169	@ 0xa9
 8020174:	009b      	lsls	r3, r3, #2
 8020176:	2101      	movs	r1, #1
 8020178:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	0018      	movs	r0, r3
 802017e:	f000 f94a 	bl	8020416 <USBD_CtlSendStatus>
  }
}
 8020182:	46c0      	nop			@ (mov r8, r8)
 8020184:	46bd      	mov	sp, r7
 8020186:	b002      	add	sp, #8
 8020188:	bd80      	pop	{r7, pc}

0802018a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802018a:	b580      	push	{r7, lr}
 802018c:	b082      	sub	sp, #8
 802018e:	af00      	add	r7, sp, #0
 8020190:	6078      	str	r0, [r7, #4]
 8020192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8020194:	687a      	ldr	r2, [r7, #4]
 8020196:	23a7      	movs	r3, #167	@ 0xa7
 8020198:	009b      	lsls	r3, r3, #2
 802019a:	5cd3      	ldrb	r3, [r2, r3]
 802019c:	3b01      	subs	r3, #1
 802019e:	2b02      	cmp	r3, #2
 80201a0:	d80d      	bhi.n	80201be <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80201a2:	683b      	ldr	r3, [r7, #0]
 80201a4:	885b      	ldrh	r3, [r3, #2]
 80201a6:	2b01      	cmp	r3, #1
 80201a8:	d110      	bne.n	80201cc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80201aa:	687a      	ldr	r2, [r7, #4]
 80201ac:	23a9      	movs	r3, #169	@ 0xa9
 80201ae:	009b      	lsls	r3, r3, #2
 80201b0:	2100      	movs	r1, #0
 80201b2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	0018      	movs	r0, r3
 80201b8:	f000 f92d 	bl	8020416 <USBD_CtlSendStatus>
      }
      break;
 80201bc:	e006      	b.n	80201cc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80201be:	683a      	ldr	r2, [r7, #0]
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	0011      	movs	r1, r2
 80201c4:	0018      	movs	r0, r3
 80201c6:	f000 f83e 	bl	8020246 <USBD_CtlError>
      break;
 80201ca:	e000      	b.n	80201ce <USBD_ClrFeature+0x44>
      break;
 80201cc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80201ce:	46c0      	nop			@ (mov r8, r8)
 80201d0:	46bd      	mov	sp, r7
 80201d2:	b002      	add	sp, #8
 80201d4:	bd80      	pop	{r7, pc}

080201d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80201d6:	b580      	push	{r7, lr}
 80201d8:	b082      	sub	sp, #8
 80201da:	af00      	add	r7, sp, #0
 80201dc:	6078      	str	r0, [r7, #4]
 80201de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80201e0:	683b      	ldr	r3, [r7, #0]
 80201e2:	781a      	ldrb	r2, [r3, #0]
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80201e8:	683b      	ldr	r3, [r7, #0]
 80201ea:	785a      	ldrb	r2, [r3, #1]
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80201f0:	683b      	ldr	r3, [r7, #0]
 80201f2:	3302      	adds	r3, #2
 80201f4:	781b      	ldrb	r3, [r3, #0]
 80201f6:	001a      	movs	r2, r3
 80201f8:	683b      	ldr	r3, [r7, #0]
 80201fa:	3303      	adds	r3, #3
 80201fc:	781b      	ldrb	r3, [r3, #0]
 80201fe:	021b      	lsls	r3, r3, #8
 8020200:	b29b      	uxth	r3, r3
 8020202:	18d3      	adds	r3, r2, r3
 8020204:	b29a      	uxth	r2, r3
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 802020a:	683b      	ldr	r3, [r7, #0]
 802020c:	3304      	adds	r3, #4
 802020e:	781b      	ldrb	r3, [r3, #0]
 8020210:	001a      	movs	r2, r3
 8020212:	683b      	ldr	r3, [r7, #0]
 8020214:	3305      	adds	r3, #5
 8020216:	781b      	ldrb	r3, [r3, #0]
 8020218:	021b      	lsls	r3, r3, #8
 802021a:	b29b      	uxth	r3, r3
 802021c:	18d3      	adds	r3, r2, r3
 802021e:	b29a      	uxth	r2, r3
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8020224:	683b      	ldr	r3, [r7, #0]
 8020226:	3306      	adds	r3, #6
 8020228:	781b      	ldrb	r3, [r3, #0]
 802022a:	001a      	movs	r2, r3
 802022c:	683b      	ldr	r3, [r7, #0]
 802022e:	3307      	adds	r3, #7
 8020230:	781b      	ldrb	r3, [r3, #0]
 8020232:	021b      	lsls	r3, r3, #8
 8020234:	b29b      	uxth	r3, r3
 8020236:	18d3      	adds	r3, r2, r3
 8020238:	b29a      	uxth	r2, r3
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	80da      	strh	r2, [r3, #6]

}
 802023e:	46c0      	nop			@ (mov r8, r8)
 8020240:	46bd      	mov	sp, r7
 8020242:	b002      	add	sp, #8
 8020244:	bd80      	pop	{r7, pc}

08020246 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8020246:	b580      	push	{r7, lr}
 8020248:	b082      	sub	sp, #8
 802024a:	af00      	add	r7, sp, #0
 802024c:	6078      	str	r0, [r7, #4]
 802024e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	2180      	movs	r1, #128	@ 0x80
 8020254:	0018      	movs	r0, r3
 8020256:	f000 fd1e 	bl	8020c96 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	2100      	movs	r1, #0
 802025e:	0018      	movs	r0, r3
 8020260:	f000 fd19 	bl	8020c96 <USBD_LL_StallEP>
}
 8020264:	46c0      	nop			@ (mov r8, r8)
 8020266:	46bd      	mov	sp, r7
 8020268:	b002      	add	sp, #8
 802026a:	bd80      	pop	{r7, pc}

0802026c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802026c:	b590      	push	{r4, r7, lr}
 802026e:	b087      	sub	sp, #28
 8020270:	af00      	add	r7, sp, #0
 8020272:	60f8      	str	r0, [r7, #12]
 8020274:	60b9      	str	r1, [r7, #8]
 8020276:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8020278:	2417      	movs	r4, #23
 802027a:	193b      	adds	r3, r7, r4
 802027c:	2200      	movs	r2, #0
 802027e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d03c      	beq.n	8020300 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	0018      	movs	r0, r3
 802028a:	f000 f83d 	bl	8020308 <USBD_GetLen>
 802028e:	0003      	movs	r3, r0
 8020290:	3301      	adds	r3, #1
 8020292:	b29b      	uxth	r3, r3
 8020294:	18db      	adds	r3, r3, r3
 8020296:	b29a      	uxth	r2, r3
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 802029c:	193b      	adds	r3, r7, r4
 802029e:	781b      	ldrb	r3, [r3, #0]
 80202a0:	193a      	adds	r2, r7, r4
 80202a2:	1c59      	adds	r1, r3, #1
 80202a4:	7011      	strb	r1, [r2, #0]
 80202a6:	001a      	movs	r2, r3
 80202a8:	68bb      	ldr	r3, [r7, #8]
 80202aa:	189b      	adds	r3, r3, r2
 80202ac:	687a      	ldr	r2, [r7, #4]
 80202ae:	7812      	ldrb	r2, [r2, #0]
 80202b0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80202b2:	193b      	adds	r3, r7, r4
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	193a      	adds	r2, r7, r4
 80202b8:	1c59      	adds	r1, r3, #1
 80202ba:	7011      	strb	r1, [r2, #0]
 80202bc:	001a      	movs	r2, r3
 80202be:	68bb      	ldr	r3, [r7, #8]
 80202c0:	189b      	adds	r3, r3, r2
 80202c2:	2203      	movs	r2, #3
 80202c4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80202c6:	e017      	b.n	80202f8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80202c8:	68fb      	ldr	r3, [r7, #12]
 80202ca:	1c5a      	adds	r2, r3, #1
 80202cc:	60fa      	str	r2, [r7, #12]
 80202ce:	2417      	movs	r4, #23
 80202d0:	193a      	adds	r2, r7, r4
 80202d2:	7812      	ldrb	r2, [r2, #0]
 80202d4:	1939      	adds	r1, r7, r4
 80202d6:	1c50      	adds	r0, r2, #1
 80202d8:	7008      	strb	r0, [r1, #0]
 80202da:	0011      	movs	r1, r2
 80202dc:	68ba      	ldr	r2, [r7, #8]
 80202de:	1852      	adds	r2, r2, r1
 80202e0:	781b      	ldrb	r3, [r3, #0]
 80202e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80202e4:	193b      	adds	r3, r7, r4
 80202e6:	781b      	ldrb	r3, [r3, #0]
 80202e8:	193a      	adds	r2, r7, r4
 80202ea:	1c59      	adds	r1, r3, #1
 80202ec:	7011      	strb	r1, [r2, #0]
 80202ee:	001a      	movs	r2, r3
 80202f0:	68bb      	ldr	r3, [r7, #8]
 80202f2:	189b      	adds	r3, r3, r2
 80202f4:	2200      	movs	r2, #0
 80202f6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80202f8:	68fb      	ldr	r3, [r7, #12]
 80202fa:	781b      	ldrb	r3, [r3, #0]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d1e3      	bne.n	80202c8 <USBD_GetString+0x5c>
    }
  }
}
 8020300:	46c0      	nop			@ (mov r8, r8)
 8020302:	46bd      	mov	sp, r7
 8020304:	b007      	add	sp, #28
 8020306:	bd90      	pop	{r4, r7, pc}

08020308 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8020308:	b580      	push	{r7, lr}
 802030a:	b084      	sub	sp, #16
 802030c:	af00      	add	r7, sp, #0
 802030e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8020310:	230f      	movs	r3, #15
 8020312:	18fb      	adds	r3, r7, r3
 8020314:	2200      	movs	r2, #0
 8020316:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8020318:	e008      	b.n	802032c <USBD_GetLen+0x24>
  {
    len++;
 802031a:	210f      	movs	r1, #15
 802031c:	187b      	adds	r3, r7, r1
 802031e:	781a      	ldrb	r2, [r3, #0]
 8020320:	187b      	adds	r3, r7, r1
 8020322:	3201      	adds	r2, #1
 8020324:	701a      	strb	r2, [r3, #0]
    buf++;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	3301      	adds	r3, #1
 802032a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	781b      	ldrb	r3, [r3, #0]
 8020330:	2b00      	cmp	r3, #0
 8020332:	d1f2      	bne.n	802031a <USBD_GetLen+0x12>
  }

  return len;
 8020334:	230f      	movs	r3, #15
 8020336:	18fb      	adds	r3, r7, r3
 8020338:	781b      	ldrb	r3, [r3, #0]
}
 802033a:	0018      	movs	r0, r3
 802033c:	46bd      	mov	sp, r7
 802033e:	b004      	add	sp, #16
 8020340:	bd80      	pop	{r7, pc}

08020342 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8020342:	b580      	push	{r7, lr}
 8020344:	b084      	sub	sp, #16
 8020346:	af00      	add	r7, sp, #0
 8020348:	60f8      	str	r0, [r7, #12]
 802034a:	60b9      	str	r1, [r7, #8]
 802034c:	1dbb      	adds	r3, r7, #6
 802034e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8020350:	68fa      	ldr	r2, [r7, #12]
 8020352:	23a5      	movs	r3, #165	@ 0xa5
 8020354:	009b      	lsls	r3, r3, #2
 8020356:	2102      	movs	r1, #2
 8020358:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 802035a:	1dbb      	adds	r3, r7, #6
 802035c:	881a      	ldrh	r2, [r3, #0]
 802035e:	68fb      	ldr	r3, [r7, #12]
 8020360:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8020362:	1dbb      	adds	r3, r7, #6
 8020364:	881a      	ldrh	r2, [r3, #0]
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802036a:	1dbb      	adds	r3, r7, #6
 802036c:	881b      	ldrh	r3, [r3, #0]
 802036e:	68ba      	ldr	r2, [r7, #8]
 8020370:	68f8      	ldr	r0, [r7, #12]
 8020372:	2100      	movs	r1, #0
 8020374:	f000 fd41 	bl	8020dfa <USBD_LL_Transmit>

  return USBD_OK;
 8020378:	2300      	movs	r3, #0
}
 802037a:	0018      	movs	r0, r3
 802037c:	46bd      	mov	sp, r7
 802037e:	b004      	add	sp, #16
 8020380:	bd80      	pop	{r7, pc}

08020382 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8020382:	b580      	push	{r7, lr}
 8020384:	b084      	sub	sp, #16
 8020386:	af00      	add	r7, sp, #0
 8020388:	60f8      	str	r0, [r7, #12]
 802038a:	60b9      	str	r1, [r7, #8]
 802038c:	1dbb      	adds	r3, r7, #6
 802038e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8020390:	1dbb      	adds	r3, r7, #6
 8020392:	881b      	ldrh	r3, [r3, #0]
 8020394:	68ba      	ldr	r2, [r7, #8]
 8020396:	68f8      	ldr	r0, [r7, #12]
 8020398:	2100      	movs	r1, #0
 802039a:	f000 fd2e 	bl	8020dfa <USBD_LL_Transmit>

  return USBD_OK;
 802039e:	2300      	movs	r3, #0
}
 80203a0:	0018      	movs	r0, r3
 80203a2:	46bd      	mov	sp, r7
 80203a4:	b004      	add	sp, #16
 80203a6:	bd80      	pop	{r7, pc}

080203a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80203a8:	b580      	push	{r7, lr}
 80203aa:	b084      	sub	sp, #16
 80203ac:	af00      	add	r7, sp, #0
 80203ae:	60f8      	str	r0, [r7, #12]
 80203b0:	60b9      	str	r1, [r7, #8]
 80203b2:	1dbb      	adds	r3, r7, #6
 80203b4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80203b6:	68fa      	ldr	r2, [r7, #12]
 80203b8:	23a5      	movs	r3, #165	@ 0xa5
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	2103      	movs	r1, #3
 80203be:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80203c0:	1dbb      	adds	r3, r7, #6
 80203c2:	8819      	ldrh	r1, [r3, #0]
 80203c4:	68fa      	ldr	r2, [r7, #12]
 80203c6:	23ae      	movs	r3, #174	@ 0xae
 80203c8:	005b      	lsls	r3, r3, #1
 80203ca:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80203cc:	1dbb      	adds	r3, r7, #6
 80203ce:	8819      	ldrh	r1, [r3, #0]
 80203d0:	68fa      	ldr	r2, [r7, #12]
 80203d2:	23b0      	movs	r3, #176	@ 0xb0
 80203d4:	005b      	lsls	r3, r3, #1
 80203d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80203d8:	1dbb      	adds	r3, r7, #6
 80203da:	881b      	ldrh	r3, [r3, #0]
 80203dc:	68ba      	ldr	r2, [r7, #8]
 80203de:	68f8      	ldr	r0, [r7, #12]
 80203e0:	2100      	movs	r1, #0
 80203e2:	f000 fd41 	bl	8020e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80203e6:	2300      	movs	r3, #0
}
 80203e8:	0018      	movs	r0, r3
 80203ea:	46bd      	mov	sp, r7
 80203ec:	b004      	add	sp, #16
 80203ee:	bd80      	pop	{r7, pc}

080203f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80203f0:	b580      	push	{r7, lr}
 80203f2:	b084      	sub	sp, #16
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	60f8      	str	r0, [r7, #12]
 80203f8:	60b9      	str	r1, [r7, #8]
 80203fa:	1dbb      	adds	r3, r7, #6
 80203fc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80203fe:	1dbb      	adds	r3, r7, #6
 8020400:	881b      	ldrh	r3, [r3, #0]
 8020402:	68ba      	ldr	r2, [r7, #8]
 8020404:	68f8      	ldr	r0, [r7, #12]
 8020406:	2100      	movs	r1, #0
 8020408:	f000 fd2e 	bl	8020e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802040c:	2300      	movs	r3, #0
}
 802040e:	0018      	movs	r0, r3
 8020410:	46bd      	mov	sp, r7
 8020412:	b004      	add	sp, #16
 8020414:	bd80      	pop	{r7, pc}

08020416 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8020416:	b580      	push	{r7, lr}
 8020418:	b082      	sub	sp, #8
 802041a:	af00      	add	r7, sp, #0
 802041c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802041e:	687a      	ldr	r2, [r7, #4]
 8020420:	23a5      	movs	r3, #165	@ 0xa5
 8020422:	009b      	lsls	r3, r3, #2
 8020424:	2104      	movs	r1, #4
 8020426:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8020428:	6878      	ldr	r0, [r7, #4]
 802042a:	2300      	movs	r3, #0
 802042c:	2200      	movs	r2, #0
 802042e:	2100      	movs	r1, #0
 8020430:	f000 fce3 	bl	8020dfa <USBD_LL_Transmit>

  return USBD_OK;
 8020434:	2300      	movs	r3, #0
}
 8020436:	0018      	movs	r0, r3
 8020438:	46bd      	mov	sp, r7
 802043a:	b002      	add	sp, #8
 802043c:	bd80      	pop	{r7, pc}

0802043e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802043e:	b580      	push	{r7, lr}
 8020440:	b082      	sub	sp, #8
 8020442:	af00      	add	r7, sp, #0
 8020444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8020446:	687a      	ldr	r2, [r7, #4]
 8020448:	23a5      	movs	r3, #165	@ 0xa5
 802044a:	009b      	lsls	r3, r3, #2
 802044c:	2105      	movs	r1, #5
 802044e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020450:	6878      	ldr	r0, [r7, #4]
 8020452:	2300      	movs	r3, #0
 8020454:	2200      	movs	r2, #0
 8020456:	2100      	movs	r1, #0
 8020458:	f000 fd06 	bl	8020e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802045c:	2300      	movs	r3, #0
}
 802045e:	0018      	movs	r0, r3
 8020460:	46bd      	mov	sp, r7
 8020462:	b002      	add	sp, #8
 8020464:	bd80      	pop	{r7, pc}
	...

08020468 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8020468:	b580      	push	{r7, lr}
 802046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802046c:	4914      	ldr	r1, [pc, #80]	@ (80204c0 <MX_USB_DEVICE_Init+0x58>)
 802046e:	4b15      	ldr	r3, [pc, #84]	@ (80204c4 <MX_USB_DEVICE_Init+0x5c>)
 8020470:	2200      	movs	r2, #0
 8020472:	0018      	movs	r0, r3
 8020474:	f7fe fdec 	bl	801f050 <USBD_Init>
 8020478:	1e03      	subs	r3, r0, #0
 802047a:	d001      	beq.n	8020480 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802047c:	f7ea feec 	bl	800b258 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020480:	4a11      	ldr	r2, [pc, #68]	@ (80204c8 <MX_USB_DEVICE_Init+0x60>)
 8020482:	4b10      	ldr	r3, [pc, #64]	@ (80204c4 <MX_USB_DEVICE_Init+0x5c>)
 8020484:	0011      	movs	r1, r2
 8020486:	0018      	movs	r0, r3
 8020488:	f7fe fe13 	bl	801f0b2 <USBD_RegisterClass>
 802048c:	1e03      	subs	r3, r0, #0
 802048e:	d001      	beq.n	8020494 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8020490:	f7ea fee2 	bl	800b258 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8020494:	4a0d      	ldr	r2, [pc, #52]	@ (80204cc <MX_USB_DEVICE_Init+0x64>)
 8020496:	4b0b      	ldr	r3, [pc, #44]	@ (80204c4 <MX_USB_DEVICE_Init+0x5c>)
 8020498:	0011      	movs	r1, r2
 802049a:	0018      	movs	r0, r3
 802049c:	f7fe fd28 	bl	801eef0 <USBD_CDC_RegisterInterface>
 80204a0:	1e03      	subs	r3, r0, #0
 80204a2:	d001      	beq.n	80204a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80204a4:	f7ea fed8 	bl	800b258 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80204a8:	4b06      	ldr	r3, [pc, #24]	@ (80204c4 <MX_USB_DEVICE_Init+0x5c>)
 80204aa:	0018      	movs	r0, r3
 80204ac:	f7fe fe21 	bl	801f0f2 <USBD_Start>
 80204b0:	1e03      	subs	r3, r0, #0
 80204b2:	d001      	beq.n	80204b8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80204b4:	f7ea fed0 	bl	800b258 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80204b8:	46c0      	nop			@ (mov r8, r8)
 80204ba:	46bd      	mov	sp, r7
 80204bc:	bd80      	pop	{r7, pc}
 80204be:	46c0      	nop			@ (mov r8, r8)
 80204c0:	20000218 	.word	0x20000218
 80204c4:	2000220c 	.word	0x2000220c
 80204c8:	20000104 	.word	0x20000104
 80204cc:	20000208 	.word	0x20000208

080204d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80204d0:	b580      	push	{r7, lr}
 80204d2:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80204d4:	4907      	ldr	r1, [pc, #28]	@ (80204f4 <CDC_Init_FS+0x24>)
 80204d6:	4b08      	ldr	r3, [pc, #32]	@ (80204f8 <CDC_Init_FS+0x28>)
 80204d8:	2200      	movs	r2, #0
 80204da:	0018      	movs	r0, r3
 80204dc:	f7fe fd23 	bl	801ef26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80204e0:	4a06      	ldr	r2, [pc, #24]	@ (80204fc <CDC_Init_FS+0x2c>)
 80204e2:	4b05      	ldr	r3, [pc, #20]	@ (80204f8 <CDC_Init_FS+0x28>)
 80204e4:	0011      	movs	r1, r2
 80204e6:	0018      	movs	r0, r3
 80204e8:	f7fe fd39 	bl	801ef5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80204ec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80204ee:	0018      	movs	r0, r3
 80204f0:	46bd      	mov	sp, r7
 80204f2:	bd80      	pop	{r7, pc}
 80204f4:	20002990 	.word	0x20002990
 80204f8:	2000220c 	.word	0x2000220c
 80204fc:	20002590 	.word	0x20002590

08020500 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020500:	b580      	push	{r7, lr}
 8020502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8020504:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8020506:	0018      	movs	r0, r3
 8020508:	46bd      	mov	sp, r7
 802050a:	bd80      	pop	{r7, pc}

0802050c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802050c:	b580      	push	{r7, lr}
 802050e:	b082      	sub	sp, #8
 8020510:	af00      	add	r7, sp, #0
 8020512:	6039      	str	r1, [r7, #0]
 8020514:	0011      	movs	r1, r2
 8020516:	1dfb      	adds	r3, r7, #7
 8020518:	1c02      	adds	r2, r0, #0
 802051a:	701a      	strb	r2, [r3, #0]
 802051c:	1d3b      	adds	r3, r7, #4
 802051e:	1c0a      	adds	r2, r1, #0
 8020520:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8020522:	1dfb      	adds	r3, r7, #7
 8020524:	781b      	ldrb	r3, [r3, #0]
 8020526:	2b23      	cmp	r3, #35	@ 0x23
 8020528:	d804      	bhi.n	8020534 <CDC_Control_FS+0x28>
 802052a:	009a      	lsls	r2, r3, #2
 802052c:	4b04      	ldr	r3, [pc, #16]	@ (8020540 <CDC_Control_FS+0x34>)
 802052e:	18d3      	adds	r3, r2, r3
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8020534:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8020536:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8020538:	0018      	movs	r0, r3
 802053a:	46bd      	mov	sp, r7
 802053c:	b002      	add	sp, #8
 802053e:	bd80      	pop	{r7, pc}
 8020540:	0802b28c 	.word	0x0802b28c

08020544 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8020544:	b580      	push	{r7, lr}
 8020546:	b082      	sub	sp, #8
 8020548:	af00      	add	r7, sp, #0
 802054a:	6078      	str	r0, [r7, #4]
 802054c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 802054e:	4b12      	ldr	r3, [pc, #72]	@ (8020598 <CDC_Receive_FS+0x54>)
 8020550:	781b      	ldrb	r3, [r3, #0]
 8020552:	2b00      	cmp	r3, #0
 8020554:	d013      	beq.n	802057e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8020556:	683b      	ldr	r3, [r7, #0]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	b29a      	uxth	r2, r3
 802055c:	2301      	movs	r3, #1
 802055e:	425b      	negs	r3, r3
 8020560:	6879      	ldr	r1, [r7, #4]
 8020562:	480e      	ldr	r0, [pc, #56]	@ (802059c <CDC_Receive_FS+0x58>)
 8020564:	f7fa fa46 	bl	801a9f4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8020568:	687a      	ldr	r2, [r7, #4]
 802056a:	4b0d      	ldr	r3, [pc, #52]	@ (80205a0 <CDC_Receive_FS+0x5c>)
 802056c:	0011      	movs	r1, r2
 802056e:	0018      	movs	r0, r3
 8020570:	f7fe fcf5 	bl	801ef5e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020574:	4b0a      	ldr	r3, [pc, #40]	@ (80205a0 <CDC_Receive_FS+0x5c>)
 8020576:	0018      	movs	r0, r3
 8020578:	f7fe fd3c 	bl	801eff4 <USBD_CDC_ReceivePacket>
 802057c:	e006      	b.n	802058c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	681a      	ldr	r2, [r3, #0]
 8020582:	4b08      	ldr	r3, [pc, #32]	@ (80205a4 <CDC_Receive_FS+0x60>)
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	18d2      	adds	r2, r2, r3
 8020588:	4b06      	ldr	r3, [pc, #24]	@ (80205a4 <CDC_Receive_FS+0x60>)
 802058a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 802058c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802058e:	0018      	movs	r0, r3
 8020590:	46bd      	mov	sp, r7
 8020592:	b002      	add	sp, #8
 8020594:	bd80      	pop	{r7, pc}
 8020596:	46c0      	nop			@ (mov r8, r8)
 8020598:	200024d0 	.word	0x200024d0
 802059c:	200024d4 	.word	0x200024d4
 80205a0:	2000220c 	.word	0x2000220c
 80205a4:	2000258c 	.word	0x2000258c

080205a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80205a8:	b5b0      	push	{r4, r5, r7, lr}
 80205aa:	b084      	sub	sp, #16
 80205ac:	af00      	add	r7, sp, #0
 80205ae:	6078      	str	r0, [r7, #4]
 80205b0:	000a      	movs	r2, r1
 80205b2:	1cbb      	adds	r3, r7, #2
 80205b4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80205b6:	230f      	movs	r3, #15
 80205b8:	18fb      	adds	r3, r7, r3
 80205ba:	2200      	movs	r2, #0
 80205bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80205be:	4a11      	ldr	r2, [pc, #68]	@ (8020604 <CDC_Transmit_FS+0x5c>)
 80205c0:	23ae      	movs	r3, #174	@ 0xae
 80205c2:	009b      	lsls	r3, r3, #2
 80205c4:	58d3      	ldr	r3, [r2, r3]
 80205c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80205c8:	68ba      	ldr	r2, [r7, #8]
 80205ca:	2385      	movs	r3, #133	@ 0x85
 80205cc:	009b      	lsls	r3, r3, #2
 80205ce:	58d3      	ldr	r3, [r2, r3]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d001      	beq.n	80205d8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80205d4:	2301      	movs	r3, #1
 80205d6:	e010      	b.n	80205fa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80205d8:	1cbb      	adds	r3, r7, #2
 80205da:	881a      	ldrh	r2, [r3, #0]
 80205dc:	6879      	ldr	r1, [r7, #4]
 80205de:	4b09      	ldr	r3, [pc, #36]	@ (8020604 <CDC_Transmit_FS+0x5c>)
 80205e0:	0018      	movs	r0, r3
 80205e2:	f7fe fca0 	bl	801ef26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80205e6:	250f      	movs	r5, #15
 80205e8:	197c      	adds	r4, r7, r5
 80205ea:	4b06      	ldr	r3, [pc, #24]	@ (8020604 <CDC_Transmit_FS+0x5c>)
 80205ec:	0018      	movs	r0, r3
 80205ee:	f7fe fcca 	bl	801ef86 <USBD_CDC_TransmitPacket>
 80205f2:	0003      	movs	r3, r0
 80205f4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80205f6:	197b      	adds	r3, r7, r5
 80205f8:	781b      	ldrb	r3, [r3, #0]
}
 80205fa:	0018      	movs	r0, r3
 80205fc:	46bd      	mov	sp, r7
 80205fe:	b004      	add	sp, #16
 8020600:	bdb0      	pop	{r4, r5, r7, pc}
 8020602:	46c0      	nop			@ (mov r8, r8)
 8020604:	2000220c 	.word	0x2000220c

08020608 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8020608:	b580      	push	{r7, lr}
 802060a:	af00      	add	r7, sp, #0
  ESPProg = true;
 802060c:	4b02      	ldr	r3, [pc, #8]	@ (8020618 <EnableESPProg+0x10>)
 802060e:	2201      	movs	r2, #1
 8020610:	701a      	strb	r2, [r3, #0]
}
 8020612:	46c0      	nop			@ (mov r8, r8)
 8020614:	46bd      	mov	sp, r7
 8020616:	bd80      	pop	{r7, pc}
 8020618:	200024d0 	.word	0x200024d0

0802061c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 802061c:	b580      	push	{r7, lr}
 802061e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8020620:	4b01      	ldr	r3, [pc, #4]	@ (8020628 <GetUsbRxPointer+0xc>)
}
 8020622:	0018      	movs	r0, r3
 8020624:	46bd      	mov	sp, r7
 8020626:	bd80      	pop	{r7, pc}
 8020628:	20002590 	.word	0x20002590

0802062c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 802062c:	b580      	push	{r7, lr}
 802062e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8020630:	4b07      	ldr	r3, [pc, #28]	@ (8020650 <ResetUsbRxDataSize+0x24>)
 8020632:	2200      	movs	r2, #0
 8020634:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8020636:	4a07      	ldr	r2, [pc, #28]	@ (8020654 <ResetUsbRxDataSize+0x28>)
 8020638:	4b07      	ldr	r3, [pc, #28]	@ (8020658 <ResetUsbRxDataSize+0x2c>)
 802063a:	0011      	movs	r1, r2
 802063c:	0018      	movs	r0, r3
 802063e:	f7fe fc8e 	bl	801ef5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020642:	4b05      	ldr	r3, [pc, #20]	@ (8020658 <ResetUsbRxDataSize+0x2c>)
 8020644:	0018      	movs	r0, r3
 8020646:	f7fe fcd5 	bl	801eff4 <USBD_CDC_ReceivePacket>
}
 802064a:	46c0      	nop			@ (mov r8, r8)
 802064c:	46bd      	mov	sp, r7
 802064e:	bd80      	pop	{r7, pc}
 8020650:	2000258c 	.word	0x2000258c
 8020654:	20002590 	.word	0x20002590
 8020658:	2000220c 	.word	0x2000220c

0802065c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 802065c:	b580      	push	{r7, lr}
 802065e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8020660:	4b02      	ldr	r3, [pc, #8]	@ (802066c <GetUsbRxDataSize+0x10>)
 8020662:	681b      	ldr	r3, [r3, #0]
}
 8020664:	0018      	movs	r0, r3
 8020666:	46bd      	mov	sp, r7
 8020668:	bd80      	pop	{r7, pc}
 802066a:	46c0      	nop			@ (mov r8, r8)
 802066c:	2000258c 	.word	0x2000258c

08020670 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8020670:	b580      	push	{r7, lr}
 8020672:	b082      	sub	sp, #8
 8020674:	af00      	add	r7, sp, #0
 8020676:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8020678:	687a      	ldr	r2, [r7, #4]
 802067a:	4b07      	ldr	r3, [pc, #28]	@ (8020698 <GetUsbRxNextChunk+0x28>)
 802067c:	18d2      	adds	r2, r2, r3
 802067e:	4b07      	ldr	r3, [pc, #28]	@ (802069c <GetUsbRxNextChunk+0x2c>)
 8020680:	0011      	movs	r1, r2
 8020682:	0018      	movs	r0, r3
 8020684:	f7fe fc6b 	bl	801ef5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020688:	4b04      	ldr	r3, [pc, #16]	@ (802069c <GetUsbRxNextChunk+0x2c>)
 802068a:	0018      	movs	r0, r3
 802068c:	f7fe fcb2 	bl	801eff4 <USBD_CDC_ReceivePacket>
}
 8020690:	46c0      	nop			@ (mov r8, r8)
 8020692:	46bd      	mov	sp, r7
 8020694:	b002      	add	sp, #8
 8020696:	bd80      	pop	{r7, pc}
 8020698:	20002590 	.word	0x20002590
 802069c:	2000220c 	.word	0x2000220c

080206a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206a0:	b580      	push	{r7, lr}
 80206a2:	b082      	sub	sp, #8
 80206a4:	af00      	add	r7, sp, #0
 80206a6:	0002      	movs	r2, r0
 80206a8:	6039      	str	r1, [r7, #0]
 80206aa:	1dfb      	adds	r3, r7, #7
 80206ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80206ae:	683b      	ldr	r3, [r7, #0]
 80206b0:	2212      	movs	r2, #18
 80206b2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80206b4:	4b02      	ldr	r3, [pc, #8]	@ (80206c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80206b6:	0018      	movs	r0, r3
 80206b8:	46bd      	mov	sp, r7
 80206ba:	b002      	add	sp, #8
 80206bc:	bd80      	pop	{r7, pc}
 80206be:	46c0      	nop			@ (mov r8, r8)
 80206c0:	20000234 	.word	0x20000234

080206c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206c4:	b580      	push	{r7, lr}
 80206c6:	b082      	sub	sp, #8
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	0002      	movs	r2, r0
 80206cc:	6039      	str	r1, [r7, #0]
 80206ce:	1dfb      	adds	r3, r7, #7
 80206d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80206d2:	683b      	ldr	r3, [r7, #0]
 80206d4:	2204      	movs	r2, #4
 80206d6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80206d8:	4b02      	ldr	r3, [pc, #8]	@ (80206e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80206da:	0018      	movs	r0, r3
 80206dc:	46bd      	mov	sp, r7
 80206de:	b002      	add	sp, #8
 80206e0:	bd80      	pop	{r7, pc}
 80206e2:	46c0      	nop			@ (mov r8, r8)
 80206e4:	20000248 	.word	0x20000248

080206e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	b082      	sub	sp, #8
 80206ec:	af00      	add	r7, sp, #0
 80206ee:	0002      	movs	r2, r0
 80206f0:	6039      	str	r1, [r7, #0]
 80206f2:	1dfb      	adds	r3, r7, #7
 80206f4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80206f6:	1dfb      	adds	r3, r7, #7
 80206f8:	781b      	ldrb	r3, [r3, #0]
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d106      	bne.n	802070c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80206fe:	683a      	ldr	r2, [r7, #0]
 8020700:	4908      	ldr	r1, [pc, #32]	@ (8020724 <USBD_FS_ProductStrDescriptor+0x3c>)
 8020702:	4b09      	ldr	r3, [pc, #36]	@ (8020728 <USBD_FS_ProductStrDescriptor+0x40>)
 8020704:	0018      	movs	r0, r3
 8020706:	f7ff fdb1 	bl	802026c <USBD_GetString>
 802070a:	e005      	b.n	8020718 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802070c:	683a      	ldr	r2, [r7, #0]
 802070e:	4905      	ldr	r1, [pc, #20]	@ (8020724 <USBD_FS_ProductStrDescriptor+0x3c>)
 8020710:	4b05      	ldr	r3, [pc, #20]	@ (8020728 <USBD_FS_ProductStrDescriptor+0x40>)
 8020712:	0018      	movs	r0, r3
 8020714:	f7ff fdaa 	bl	802026c <USBD_GetString>
  }
  return USBD_StrDesc;
 8020718:	4b02      	ldr	r3, [pc, #8]	@ (8020724 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802071a:	0018      	movs	r0, r3
 802071c:	46bd      	mov	sp, r7
 802071e:	b002      	add	sp, #8
 8020720:	bd80      	pop	{r7, pc}
 8020722:	46c0      	nop			@ (mov r8, r8)
 8020724:	20002d90 	.word	0x20002d90
 8020728:	0802ac80 	.word	0x0802ac80

0802072c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802072c:	b580      	push	{r7, lr}
 802072e:	b082      	sub	sp, #8
 8020730:	af00      	add	r7, sp, #0
 8020732:	0002      	movs	r2, r0
 8020734:	6039      	str	r1, [r7, #0]
 8020736:	1dfb      	adds	r3, r7, #7
 8020738:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802073a:	683a      	ldr	r2, [r7, #0]
 802073c:	4904      	ldr	r1, [pc, #16]	@ (8020750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802073e:	4b05      	ldr	r3, [pc, #20]	@ (8020754 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8020740:	0018      	movs	r0, r3
 8020742:	f7ff fd93 	bl	802026c <USBD_GetString>
  return USBD_StrDesc;
 8020746:	4b02      	ldr	r3, [pc, #8]	@ (8020750 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8020748:	0018      	movs	r0, r3
 802074a:	46bd      	mov	sp, r7
 802074c:	b002      	add	sp, #8
 802074e:	bd80      	pop	{r7, pc}
 8020750:	20002d90 	.word	0x20002d90
 8020754:	0802ac98 	.word	0x0802ac98

08020758 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020758:	b580      	push	{r7, lr}
 802075a:	b082      	sub	sp, #8
 802075c:	af00      	add	r7, sp, #0
 802075e:	0002      	movs	r2, r0
 8020760:	6039      	str	r1, [r7, #0]
 8020762:	1dfb      	adds	r3, r7, #7
 8020764:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8020766:	683b      	ldr	r3, [r7, #0]
 8020768:	221a      	movs	r2, #26
 802076a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802076c:	f000 f84c 	bl	8020808 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8020770:	4b02      	ldr	r3, [pc, #8]	@ (802077c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8020772:	0018      	movs	r0, r3
 8020774:	46bd      	mov	sp, r7
 8020776:	b002      	add	sp, #8
 8020778:	bd80      	pop	{r7, pc}
 802077a:	46c0      	nop			@ (mov r8, r8)
 802077c:	2000024c 	.word	0x2000024c

08020780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b082      	sub	sp, #8
 8020784:	af00      	add	r7, sp, #0
 8020786:	0002      	movs	r2, r0
 8020788:	6039      	str	r1, [r7, #0]
 802078a:	1dfb      	adds	r3, r7, #7
 802078c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 802078e:	1dfb      	adds	r3, r7, #7
 8020790:	781b      	ldrb	r3, [r3, #0]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d106      	bne.n	80207a4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8020796:	683a      	ldr	r2, [r7, #0]
 8020798:	4908      	ldr	r1, [pc, #32]	@ (80207bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 802079a:	4b09      	ldr	r3, [pc, #36]	@ (80207c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 802079c:	0018      	movs	r0, r3
 802079e:	f7ff fd65 	bl	802026c <USBD_GetString>
 80207a2:	e005      	b.n	80207b0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80207a4:	683a      	ldr	r2, [r7, #0]
 80207a6:	4905      	ldr	r1, [pc, #20]	@ (80207bc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80207a8:	4b05      	ldr	r3, [pc, #20]	@ (80207c0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80207aa:	0018      	movs	r0, r3
 80207ac:	f7ff fd5e 	bl	802026c <USBD_GetString>
  }
  return USBD_StrDesc;
 80207b0:	4b02      	ldr	r3, [pc, #8]	@ (80207bc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80207b2:	0018      	movs	r0, r3
 80207b4:	46bd      	mov	sp, r7
 80207b6:	b002      	add	sp, #8
 80207b8:	bd80      	pop	{r7, pc}
 80207ba:	46c0      	nop			@ (mov r8, r8)
 80207bc:	20002d90 	.word	0x20002d90
 80207c0:	0802acac 	.word	0x0802acac

080207c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	0002      	movs	r2, r0
 80207cc:	6039      	str	r1, [r7, #0]
 80207ce:	1dfb      	adds	r3, r7, #7
 80207d0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80207d2:	1dfb      	adds	r3, r7, #7
 80207d4:	781b      	ldrb	r3, [r3, #0]
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d106      	bne.n	80207e8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80207da:	683a      	ldr	r2, [r7, #0]
 80207dc:	4908      	ldr	r1, [pc, #32]	@ (8020800 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80207de:	4b09      	ldr	r3, [pc, #36]	@ (8020804 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80207e0:	0018      	movs	r0, r3
 80207e2:	f7ff fd43 	bl	802026c <USBD_GetString>
 80207e6:	e005      	b.n	80207f4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80207e8:	683a      	ldr	r2, [r7, #0]
 80207ea:	4905      	ldr	r1, [pc, #20]	@ (8020800 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80207ec:	4b05      	ldr	r3, [pc, #20]	@ (8020804 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80207ee:	0018      	movs	r0, r3
 80207f0:	f7ff fd3c 	bl	802026c <USBD_GetString>
  }
  return USBD_StrDesc;
 80207f4:	4b02      	ldr	r3, [pc, #8]	@ (8020800 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80207f6:	0018      	movs	r0, r3
 80207f8:	46bd      	mov	sp, r7
 80207fa:	b002      	add	sp, #8
 80207fc:	bd80      	pop	{r7, pc}
 80207fe:	46c0      	nop			@ (mov r8, r8)
 8020800:	20002d90 	.word	0x20002d90
 8020804:	0802acb8 	.word	0x0802acb8

08020808 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020808:	b580      	push	{r7, lr}
 802080a:	b084      	sub	sp, #16
 802080c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802080e:	4b10      	ldr	r3, [pc, #64]	@ (8020850 <Get_SerialNum+0x48>)
 8020810:	681b      	ldr	r3, [r3, #0]
 8020812:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020814:	4b0f      	ldr	r3, [pc, #60]	@ (8020854 <Get_SerialNum+0x4c>)
 8020816:	681b      	ldr	r3, [r3, #0]
 8020818:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802081a:	4b0f      	ldr	r3, [pc, #60]	@ (8020858 <Get_SerialNum+0x50>)
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8020820:	68fa      	ldr	r2, [r7, #12]
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	18d3      	adds	r3, r2, r3
 8020826:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8020828:	68fb      	ldr	r3, [r7, #12]
 802082a:	2b00      	cmp	r3, #0
 802082c:	d00b      	beq.n	8020846 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802082e:	490b      	ldr	r1, [pc, #44]	@ (802085c <Get_SerialNum+0x54>)
 8020830:	68fb      	ldr	r3, [r7, #12]
 8020832:	2208      	movs	r2, #8
 8020834:	0018      	movs	r0, r3
 8020836:	f000 f815 	bl	8020864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802083a:	4909      	ldr	r1, [pc, #36]	@ (8020860 <Get_SerialNum+0x58>)
 802083c:	68bb      	ldr	r3, [r7, #8]
 802083e:	2204      	movs	r2, #4
 8020840:	0018      	movs	r0, r3
 8020842:	f000 f80f 	bl	8020864 <IntToUnicode>
  }
}
 8020846:	46c0      	nop			@ (mov r8, r8)
 8020848:	46bd      	mov	sp, r7
 802084a:	b004      	add	sp, #16
 802084c:	bd80      	pop	{r7, pc}
 802084e:	46c0      	nop			@ (mov r8, r8)
 8020850:	1ff80050 	.word	0x1ff80050
 8020854:	1ff80054 	.word	0x1ff80054
 8020858:	1ff80058 	.word	0x1ff80058
 802085c:	2000024e 	.word	0x2000024e
 8020860:	2000025e 	.word	0x2000025e

08020864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b086      	sub	sp, #24
 8020868:	af00      	add	r7, sp, #0
 802086a:	60f8      	str	r0, [r7, #12]
 802086c:	60b9      	str	r1, [r7, #8]
 802086e:	1dfb      	adds	r3, r7, #7
 8020870:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8020872:	2117      	movs	r1, #23
 8020874:	187b      	adds	r3, r7, r1
 8020876:	2200      	movs	r2, #0
 8020878:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802087a:	187b      	adds	r3, r7, r1
 802087c:	2200      	movs	r2, #0
 802087e:	701a      	strb	r2, [r3, #0]
 8020880:	e02f      	b.n	80208e2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	0f1b      	lsrs	r3, r3, #28
 8020886:	2b09      	cmp	r3, #9
 8020888:	d80d      	bhi.n	80208a6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802088a:	68fb      	ldr	r3, [r7, #12]
 802088c:	0f1b      	lsrs	r3, r3, #28
 802088e:	b2da      	uxtb	r2, r3
 8020890:	2317      	movs	r3, #23
 8020892:	18fb      	adds	r3, r7, r3
 8020894:	781b      	ldrb	r3, [r3, #0]
 8020896:	005b      	lsls	r3, r3, #1
 8020898:	0019      	movs	r1, r3
 802089a:	68bb      	ldr	r3, [r7, #8]
 802089c:	185b      	adds	r3, r3, r1
 802089e:	3230      	adds	r2, #48	@ 0x30
 80208a0:	b2d2      	uxtb	r2, r2
 80208a2:	701a      	strb	r2, [r3, #0]
 80208a4:	e00c      	b.n	80208c0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80208a6:	68fb      	ldr	r3, [r7, #12]
 80208a8:	0f1b      	lsrs	r3, r3, #28
 80208aa:	b2da      	uxtb	r2, r3
 80208ac:	2317      	movs	r3, #23
 80208ae:	18fb      	adds	r3, r7, r3
 80208b0:	781b      	ldrb	r3, [r3, #0]
 80208b2:	005b      	lsls	r3, r3, #1
 80208b4:	0019      	movs	r1, r3
 80208b6:	68bb      	ldr	r3, [r7, #8]
 80208b8:	185b      	adds	r3, r3, r1
 80208ba:	3237      	adds	r2, #55	@ 0x37
 80208bc:	b2d2      	uxtb	r2, r2
 80208be:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	011b      	lsls	r3, r3, #4
 80208c4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80208c6:	2117      	movs	r1, #23
 80208c8:	187b      	adds	r3, r7, r1
 80208ca:	781b      	ldrb	r3, [r3, #0]
 80208cc:	005b      	lsls	r3, r3, #1
 80208ce:	3301      	adds	r3, #1
 80208d0:	68ba      	ldr	r2, [r7, #8]
 80208d2:	18d3      	adds	r3, r2, r3
 80208d4:	2200      	movs	r2, #0
 80208d6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80208d8:	187b      	adds	r3, r7, r1
 80208da:	781a      	ldrb	r2, [r3, #0]
 80208dc:	187b      	adds	r3, r7, r1
 80208de:	3201      	adds	r2, #1
 80208e0:	701a      	strb	r2, [r3, #0]
 80208e2:	2317      	movs	r3, #23
 80208e4:	18fa      	adds	r2, r7, r3
 80208e6:	1dfb      	adds	r3, r7, #7
 80208e8:	7812      	ldrb	r2, [r2, #0]
 80208ea:	781b      	ldrb	r3, [r3, #0]
 80208ec:	429a      	cmp	r2, r3
 80208ee:	d3c8      	bcc.n	8020882 <IntToUnicode+0x1e>
  }
}
 80208f0:	46c0      	nop			@ (mov r8, r8)
 80208f2:	46c0      	nop			@ (mov r8, r8)
 80208f4:	46bd      	mov	sp, r7
 80208f6:	b006      	add	sp, #24
 80208f8:	bd80      	pop	{r7, pc}
	...

080208fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b082      	sub	sp, #8
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	4a0a      	ldr	r2, [pc, #40]	@ (8020934 <HAL_PCD_MspInit+0x38>)
 802090a:	4293      	cmp	r3, r2
 802090c:	d10e      	bne.n	802092c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 802090e:	4b0a      	ldr	r3, [pc, #40]	@ (8020938 <HAL_PCD_MspInit+0x3c>)
 8020910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020912:	4b09      	ldr	r3, [pc, #36]	@ (8020938 <HAL_PCD_MspInit+0x3c>)
 8020914:	2180      	movs	r1, #128	@ 0x80
 8020916:	0409      	lsls	r1, r1, #16
 8020918:	430a      	orrs	r2, r1
 802091a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 802091c:	2200      	movs	r2, #0
 802091e:	2100      	movs	r1, #0
 8020920:	201f      	movs	r0, #31
 8020922:	f7f2 f847 	bl	80129b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8020926:	201f      	movs	r0, #31
 8020928:	f7f2 f859 	bl	80129de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 802092c:	46c0      	nop			@ (mov r8, r8)
 802092e:	46bd      	mov	sp, r7
 8020930:	b002      	add	sp, #8
 8020932:	bd80      	pop	{r7, pc}
 8020934:	40005c00 	.word	0x40005c00
 8020938:	40021000 	.word	0x40021000

0802093c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b082      	sub	sp, #8
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8020944:	687a      	ldr	r2, [r7, #4]
 8020946:	23bc      	movs	r3, #188	@ 0xbc
 8020948:	009b      	lsls	r3, r3, #2
 802094a:	58d2      	ldr	r2, [r2, r3]
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	21ac      	movs	r1, #172	@ 0xac
 8020950:	0089      	lsls	r1, r1, #2
 8020952:	468c      	mov	ip, r1
 8020954:	4463      	add	r3, ip
 8020956:	0019      	movs	r1, r3
 8020958:	0010      	movs	r0, r2
 802095a:	f7fe fc1d 	bl	801f198 <USBD_LL_SetupStage>
}
 802095e:	46c0      	nop			@ (mov r8, r8)
 8020960:	46bd      	mov	sp, r7
 8020962:	b002      	add	sp, #8
 8020964:	bd80      	pop	{r7, pc}

08020966 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020966:	b590      	push	{r4, r7, lr}
 8020968:	b083      	sub	sp, #12
 802096a:	af00      	add	r7, sp, #0
 802096c:	6078      	str	r0, [r7, #4]
 802096e:	000a      	movs	r2, r1
 8020970:	1cfb      	adds	r3, r7, #3
 8020972:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020974:	687a      	ldr	r2, [r7, #4]
 8020976:	23bc      	movs	r3, #188	@ 0xbc
 8020978:	009b      	lsls	r3, r3, #2
 802097a:	58d4      	ldr	r4, [r2, r3]
 802097c:	1cfb      	adds	r3, r7, #3
 802097e:	781a      	ldrb	r2, [r3, #0]
 8020980:	6878      	ldr	r0, [r7, #4]
 8020982:	23be      	movs	r3, #190	@ 0xbe
 8020984:	0059      	lsls	r1, r3, #1
 8020986:	0013      	movs	r3, r2
 8020988:	009b      	lsls	r3, r3, #2
 802098a:	189b      	adds	r3, r3, r2
 802098c:	00db      	lsls	r3, r3, #3
 802098e:	18c3      	adds	r3, r0, r3
 8020990:	185b      	adds	r3, r3, r1
 8020992:	681a      	ldr	r2, [r3, #0]
 8020994:	1cfb      	adds	r3, r7, #3
 8020996:	781b      	ldrb	r3, [r3, #0]
 8020998:	0019      	movs	r1, r3
 802099a:	0020      	movs	r0, r4
 802099c:	f7fe fc5a 	bl	801f254 <USBD_LL_DataOutStage>
}
 80209a0:	46c0      	nop			@ (mov r8, r8)
 80209a2:	46bd      	mov	sp, r7
 80209a4:	b003      	add	sp, #12
 80209a6:	bd90      	pop	{r4, r7, pc}

080209a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	b082      	sub	sp, #8
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
 80209b0:	000a      	movs	r2, r1
 80209b2:	1cfb      	adds	r3, r7, #3
 80209b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80209b6:	687a      	ldr	r2, [r7, #4]
 80209b8:	23bc      	movs	r3, #188	@ 0xbc
 80209ba:	009b      	lsls	r3, r3, #2
 80209bc:	58d0      	ldr	r0, [r2, r3]
 80209be:	1cfb      	adds	r3, r7, #3
 80209c0:	781a      	ldrb	r2, [r3, #0]
 80209c2:	6879      	ldr	r1, [r7, #4]
 80209c4:	0013      	movs	r3, r2
 80209c6:	009b      	lsls	r3, r3, #2
 80209c8:	189b      	adds	r3, r3, r2
 80209ca:	00db      	lsls	r3, r3, #3
 80209cc:	18cb      	adds	r3, r1, r3
 80209ce:	333c      	adds	r3, #60	@ 0x3c
 80209d0:	681a      	ldr	r2, [r3, #0]
 80209d2:	1cfb      	adds	r3, r7, #3
 80209d4:	781b      	ldrb	r3, [r3, #0]
 80209d6:	0019      	movs	r1, r3
 80209d8:	f7fe fcbe 	bl	801f358 <USBD_LL_DataInStage>
}
 80209dc:	46c0      	nop			@ (mov r8, r8)
 80209de:	46bd      	mov	sp, r7
 80209e0:	b002      	add	sp, #8
 80209e2:	bd80      	pop	{r7, pc}

080209e4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209e4:	b580      	push	{r7, lr}
 80209e6:	b082      	sub	sp, #8
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80209ec:	687a      	ldr	r2, [r7, #4]
 80209ee:	23bc      	movs	r3, #188	@ 0xbc
 80209f0:	009b      	lsls	r3, r3, #2
 80209f2:	58d3      	ldr	r3, [r2, r3]
 80209f4:	0018      	movs	r0, r3
 80209f6:	f7fe fdf5 	bl	801f5e4 <USBD_LL_SOF>
}
 80209fa:	46c0      	nop			@ (mov r8, r8)
 80209fc:	46bd      	mov	sp, r7
 80209fe:	b002      	add	sp, #8
 8020a00:	bd80      	pop	{r7, pc}

08020a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a02:	b580      	push	{r7, lr}
 8020a04:	b084      	sub	sp, #16
 8020a06:	af00      	add	r7, sp, #0
 8020a08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8020a0a:	230f      	movs	r3, #15
 8020a0c:	18fb      	adds	r3, r7, r3
 8020a0e:	2201      	movs	r2, #1
 8020a10:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	689b      	ldr	r3, [r3, #8]
 8020a16:	2b02      	cmp	r3, #2
 8020a18:	d001      	beq.n	8020a1e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8020a1a:	f7ea fc1d 	bl	800b258 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020a1e:	687a      	ldr	r2, [r7, #4]
 8020a20:	23bc      	movs	r3, #188	@ 0xbc
 8020a22:	009b      	lsls	r3, r3, #2
 8020a24:	58d2      	ldr	r2, [r2, r3]
 8020a26:	230f      	movs	r3, #15
 8020a28:	18fb      	adds	r3, r7, r3
 8020a2a:	781b      	ldrb	r3, [r3, #0]
 8020a2c:	0019      	movs	r1, r3
 8020a2e:	0010      	movs	r0, r2
 8020a30:	f7fe fd97 	bl	801f562 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8020a34:	687a      	ldr	r2, [r7, #4]
 8020a36:	23bc      	movs	r3, #188	@ 0xbc
 8020a38:	009b      	lsls	r3, r3, #2
 8020a3a:	58d3      	ldr	r3, [r2, r3]
 8020a3c:	0018      	movs	r0, r3
 8020a3e:	f7fe fd48 	bl	801f4d2 <USBD_LL_Reset>
}
 8020a42:	46c0      	nop			@ (mov r8, r8)
 8020a44:	46bd      	mov	sp, r7
 8020a46:	b004      	add	sp, #16
 8020a48:	bd80      	pop	{r7, pc}
	...

08020a4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a4c:	b580      	push	{r7, lr}
 8020a4e:	b082      	sub	sp, #8
 8020a50:	af00      	add	r7, sp, #0
 8020a52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020a54:	687a      	ldr	r2, [r7, #4]
 8020a56:	23bc      	movs	r3, #188	@ 0xbc
 8020a58:	009b      	lsls	r3, r3, #2
 8020a5a:	58d3      	ldr	r3, [r2, r3]
 8020a5c:	0018      	movs	r0, r3
 8020a5e:	f7fe fd91 	bl	801f584 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	699b      	ldr	r3, [r3, #24]
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d005      	beq.n	8020a76 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020a6a:	4b05      	ldr	r3, [pc, #20]	@ (8020a80 <HAL_PCD_SuspendCallback+0x34>)
 8020a6c:	691a      	ldr	r2, [r3, #16]
 8020a6e:	4b04      	ldr	r3, [pc, #16]	@ (8020a80 <HAL_PCD_SuspendCallback+0x34>)
 8020a70:	2106      	movs	r1, #6
 8020a72:	430a      	orrs	r2, r1
 8020a74:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8020a76:	46c0      	nop			@ (mov r8, r8)
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	b002      	add	sp, #8
 8020a7c:	bd80      	pop	{r7, pc}
 8020a7e:	46c0      	nop			@ (mov r8, r8)
 8020a80:	e000ed00 	.word	0xe000ed00

08020a84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a84:	b580      	push	{r7, lr}
 8020a86:	b082      	sub	sp, #8
 8020a88:	af00      	add	r7, sp, #0
 8020a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	699b      	ldr	r3, [r3, #24]
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d007      	beq.n	8020aa4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020a94:	4b09      	ldr	r3, [pc, #36]	@ (8020abc <HAL_PCD_ResumeCallback+0x38>)
 8020a96:	691a      	ldr	r2, [r3, #16]
 8020a98:	4b08      	ldr	r3, [pc, #32]	@ (8020abc <HAL_PCD_ResumeCallback+0x38>)
 8020a9a:	2106      	movs	r1, #6
 8020a9c:	438a      	bics	r2, r1
 8020a9e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8020aa0:	f000 fa44 	bl	8020f2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020aa4:	687a      	ldr	r2, [r7, #4]
 8020aa6:	23bc      	movs	r3, #188	@ 0xbc
 8020aa8:	009b      	lsls	r3, r3, #2
 8020aaa:	58d3      	ldr	r3, [r2, r3]
 8020aac:	0018      	movs	r0, r3
 8020aae:	f7fe fd81 	bl	801f5b4 <USBD_LL_Resume>
}
 8020ab2:	46c0      	nop			@ (mov r8, r8)
 8020ab4:	46bd      	mov	sp, r7
 8020ab6:	b002      	add	sp, #8
 8020ab8:	bd80      	pop	{r7, pc}
 8020aba:	46c0      	nop			@ (mov r8, r8)
 8020abc:	e000ed00 	.word	0xe000ed00

08020ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b082      	sub	sp, #8
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8020ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020aca:	23bc      	movs	r3, #188	@ 0xbc
 8020acc:	009b      	lsls	r3, r3, #2
 8020ace:	6879      	ldr	r1, [r7, #4]
 8020ad0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8020ad2:	687a      	ldr	r2, [r7, #4]
 8020ad4:	23b0      	movs	r3, #176	@ 0xb0
 8020ad6:	009b      	lsls	r3, r3, #2
 8020ad8:	4929      	ldr	r1, [pc, #164]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020ada:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8020adc:	4b28      	ldr	r3, [pc, #160]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020ade:	4a29      	ldr	r2, [pc, #164]	@ (8020b84 <USBD_LL_Init+0xc4>)
 8020ae0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8020ae2:	4b27      	ldr	r3, [pc, #156]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020ae4:	2208      	movs	r2, #8
 8020ae6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8020ae8:	4b25      	ldr	r3, [pc, #148]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020aea:	2202      	movs	r2, #2
 8020aec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020aee:	4b24      	ldr	r3, [pc, #144]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020af0:	2202      	movs	r2, #2
 8020af2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8020af4:	4b22      	ldr	r3, [pc, #136]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020af6:	2200      	movs	r2, #0
 8020af8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8020afa:	4b21      	ldr	r3, [pc, #132]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020afc:	2200      	movs	r2, #0
 8020afe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8020b00:	4b1f      	ldr	r3, [pc, #124]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020b02:	2200      	movs	r2, #0
 8020b04:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8020b06:	4b1e      	ldr	r3, [pc, #120]	@ (8020b80 <USBD_LL_Init+0xc0>)
 8020b08:	0018      	movs	r0, r3
 8020b0a:	f7f5 ff95 	bl	8016a38 <HAL_PCD_Init>
 8020b0e:	1e03      	subs	r3, r0, #0
 8020b10:	d001      	beq.n	8020b16 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8020b12:	f7ea fba1 	bl	800b258 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8020b16:	687a      	ldr	r2, [r7, #4]
 8020b18:	23b0      	movs	r3, #176	@ 0xb0
 8020b1a:	009b      	lsls	r3, r3, #2
 8020b1c:	58d0      	ldr	r0, [r2, r3]
 8020b1e:	2318      	movs	r3, #24
 8020b20:	2200      	movs	r2, #0
 8020b22:	2100      	movs	r1, #0
 8020b24:	f7f7 fd56 	bl	80185d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8020b28:	687a      	ldr	r2, [r7, #4]
 8020b2a:	23b0      	movs	r3, #176	@ 0xb0
 8020b2c:	009b      	lsls	r3, r3, #2
 8020b2e:	58d0      	ldr	r0, [r2, r3]
 8020b30:	2358      	movs	r3, #88	@ 0x58
 8020b32:	2200      	movs	r2, #0
 8020b34:	2180      	movs	r1, #128	@ 0x80
 8020b36:	f7f7 fd4d 	bl	80185d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8020b3a:	687a      	ldr	r2, [r7, #4]
 8020b3c:	23b0      	movs	r3, #176	@ 0xb0
 8020b3e:	009b      	lsls	r3, r3, #2
 8020b40:	58d0      	ldr	r0, [r2, r3]
 8020b42:	23c0      	movs	r3, #192	@ 0xc0
 8020b44:	2200      	movs	r2, #0
 8020b46:	2181      	movs	r1, #129	@ 0x81
 8020b48:	f7f7 fd44 	bl	80185d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8020b4c:	687a      	ldr	r2, [r7, #4]
 8020b4e:	23b0      	movs	r3, #176	@ 0xb0
 8020b50:	009b      	lsls	r3, r3, #2
 8020b52:	58d0      	ldr	r0, [r2, r3]
 8020b54:	2388      	movs	r3, #136	@ 0x88
 8020b56:	005b      	lsls	r3, r3, #1
 8020b58:	2200      	movs	r2, #0
 8020b5a:	2101      	movs	r1, #1
 8020b5c:	f7f7 fd3a 	bl	80185d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8020b60:	687a      	ldr	r2, [r7, #4]
 8020b62:	23b0      	movs	r3, #176	@ 0xb0
 8020b64:	009b      	lsls	r3, r3, #2
 8020b66:	58d0      	ldr	r0, [r2, r3]
 8020b68:	2380      	movs	r3, #128	@ 0x80
 8020b6a:	005b      	lsls	r3, r3, #1
 8020b6c:	2200      	movs	r2, #0
 8020b6e:	2182      	movs	r1, #130	@ 0x82
 8020b70:	f7f7 fd30 	bl	80185d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8020b74:	2300      	movs	r3, #0
}
 8020b76:	0018      	movs	r0, r3
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	b002      	add	sp, #8
 8020b7c:	bd80      	pop	{r7, pc}
 8020b7e:	46c0      	nop			@ (mov r8, r8)
 8020b80:	20002f90 	.word	0x20002f90
 8020b84:	40005c00 	.word	0x40005c00

08020b88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b8a:	b085      	sub	sp, #20
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020b90:	210f      	movs	r1, #15
 8020b92:	187b      	adds	r3, r7, r1
 8020b94:	2200      	movs	r2, #0
 8020b96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020b98:	260e      	movs	r6, #14
 8020b9a:	19bb      	adds	r3, r7, r6
 8020b9c:	2200      	movs	r2, #0
 8020b9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020ba0:	687a      	ldr	r2, [r7, #4]
 8020ba2:	23b0      	movs	r3, #176	@ 0xb0
 8020ba4:	009b      	lsls	r3, r3, #2
 8020ba6:	58d3      	ldr	r3, [r2, r3]
 8020ba8:	000d      	movs	r5, r1
 8020baa:	187c      	adds	r4, r7, r1
 8020bac:	0018      	movs	r0, r3
 8020bae:	f7f6 f843 	bl	8016c38 <HAL_PCD_Start>
 8020bb2:	0003      	movs	r3, r0
 8020bb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020bb6:	19bc      	adds	r4, r7, r6
 8020bb8:	197b      	adds	r3, r7, r5
 8020bba:	781b      	ldrb	r3, [r3, #0]
 8020bbc:	0018      	movs	r0, r3
 8020bbe:	f000 f9bc 	bl	8020f3a <USBD_Get_USB_Status>
 8020bc2:	0003      	movs	r3, r0
 8020bc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020bc6:	19bb      	adds	r3, r7, r6
 8020bc8:	781b      	ldrb	r3, [r3, #0]
}
 8020bca:	0018      	movs	r0, r3
 8020bcc:	46bd      	mov	sp, r7
 8020bce:	b005      	add	sp, #20
 8020bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020bd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020bd4:	b085      	sub	sp, #20
 8020bd6:	af00      	add	r7, sp, #0
 8020bd8:	6078      	str	r0, [r7, #4]
 8020bda:	000c      	movs	r4, r1
 8020bdc:	0010      	movs	r0, r2
 8020bde:	0019      	movs	r1, r3
 8020be0:	1cfb      	adds	r3, r7, #3
 8020be2:	1c22      	adds	r2, r4, #0
 8020be4:	701a      	strb	r2, [r3, #0]
 8020be6:	1cbb      	adds	r3, r7, #2
 8020be8:	1c02      	adds	r2, r0, #0
 8020bea:	701a      	strb	r2, [r3, #0]
 8020bec:	003b      	movs	r3, r7
 8020bee:	1c0a      	adds	r2, r1, #0
 8020bf0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020bf2:	260f      	movs	r6, #15
 8020bf4:	19bb      	adds	r3, r7, r6
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020bfa:	250e      	movs	r5, #14
 8020bfc:	197b      	adds	r3, r7, r5
 8020bfe:	2200      	movs	r2, #0
 8020c00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020c02:	687a      	ldr	r2, [r7, #4]
 8020c04:	23b0      	movs	r3, #176	@ 0xb0
 8020c06:	009b      	lsls	r3, r3, #2
 8020c08:	58d0      	ldr	r0, [r2, r3]
 8020c0a:	19bc      	adds	r4, r7, r6
 8020c0c:	1cbb      	adds	r3, r7, #2
 8020c0e:	781d      	ldrb	r5, [r3, #0]
 8020c10:	003b      	movs	r3, r7
 8020c12:	881a      	ldrh	r2, [r3, #0]
 8020c14:	1cfb      	adds	r3, r7, #3
 8020c16:	7819      	ldrb	r1, [r3, #0]
 8020c18:	002b      	movs	r3, r5
 8020c1a:	f7f6 f9a2 	bl	8016f62 <HAL_PCD_EP_Open>
 8020c1e:	0003      	movs	r3, r0
 8020c20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c22:	250e      	movs	r5, #14
 8020c24:	197c      	adds	r4, r7, r5
 8020c26:	19bb      	adds	r3, r7, r6
 8020c28:	781b      	ldrb	r3, [r3, #0]
 8020c2a:	0018      	movs	r0, r3
 8020c2c:	f000 f985 	bl	8020f3a <USBD_Get_USB_Status>
 8020c30:	0003      	movs	r3, r0
 8020c32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020c34:	197b      	adds	r3, r7, r5
 8020c36:	781b      	ldrb	r3, [r3, #0]
}
 8020c38:	0018      	movs	r0, r3
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	b005      	add	sp, #20
 8020c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020c40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c42:	b085      	sub	sp, #20
 8020c44:	af00      	add	r7, sp, #0
 8020c46:	6078      	str	r0, [r7, #4]
 8020c48:	000a      	movs	r2, r1
 8020c4a:	1cfb      	adds	r3, r7, #3
 8020c4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c4e:	210f      	movs	r1, #15
 8020c50:	187b      	adds	r3, r7, r1
 8020c52:	2200      	movs	r2, #0
 8020c54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c56:	260e      	movs	r6, #14
 8020c58:	19bb      	adds	r3, r7, r6
 8020c5a:	2200      	movs	r2, #0
 8020c5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020c5e:	687a      	ldr	r2, [r7, #4]
 8020c60:	23b0      	movs	r3, #176	@ 0xb0
 8020c62:	009b      	lsls	r3, r3, #2
 8020c64:	58d2      	ldr	r2, [r2, r3]
 8020c66:	000d      	movs	r5, r1
 8020c68:	187c      	adds	r4, r7, r1
 8020c6a:	1cfb      	adds	r3, r7, #3
 8020c6c:	781b      	ldrb	r3, [r3, #0]
 8020c6e:	0019      	movs	r1, r3
 8020c70:	0010      	movs	r0, r2
 8020c72:	f7f6 f9e5 	bl	8017040 <HAL_PCD_EP_Close>
 8020c76:	0003      	movs	r3, r0
 8020c78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c7a:	19bc      	adds	r4, r7, r6
 8020c7c:	197b      	adds	r3, r7, r5
 8020c7e:	781b      	ldrb	r3, [r3, #0]
 8020c80:	0018      	movs	r0, r3
 8020c82:	f000 f95a 	bl	8020f3a <USBD_Get_USB_Status>
 8020c86:	0003      	movs	r3, r0
 8020c88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020c8a:	19bb      	adds	r3, r7, r6
 8020c8c:	781b      	ldrb	r3, [r3, #0]
}
 8020c8e:	0018      	movs	r0, r3
 8020c90:	46bd      	mov	sp, r7
 8020c92:	b005      	add	sp, #20
 8020c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020c96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c98:	b085      	sub	sp, #20
 8020c9a:	af00      	add	r7, sp, #0
 8020c9c:	6078      	str	r0, [r7, #4]
 8020c9e:	000a      	movs	r2, r1
 8020ca0:	1cfb      	adds	r3, r7, #3
 8020ca2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ca4:	210f      	movs	r1, #15
 8020ca6:	187b      	adds	r3, r7, r1
 8020ca8:	2200      	movs	r2, #0
 8020caa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020cac:	260e      	movs	r6, #14
 8020cae:	19bb      	adds	r3, r7, r6
 8020cb0:	2200      	movs	r2, #0
 8020cb2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020cb4:	687a      	ldr	r2, [r7, #4]
 8020cb6:	23b0      	movs	r3, #176	@ 0xb0
 8020cb8:	009b      	lsls	r3, r3, #2
 8020cba:	58d2      	ldr	r2, [r2, r3]
 8020cbc:	000d      	movs	r5, r1
 8020cbe:	187c      	adds	r4, r7, r1
 8020cc0:	1cfb      	adds	r3, r7, #3
 8020cc2:	781b      	ldrb	r3, [r3, #0]
 8020cc4:	0019      	movs	r1, r3
 8020cc6:	0010      	movs	r0, r2
 8020cc8:	f7f6 fa97 	bl	80171fa <HAL_PCD_EP_SetStall>
 8020ccc:	0003      	movs	r3, r0
 8020cce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020cd0:	19bc      	adds	r4, r7, r6
 8020cd2:	197b      	adds	r3, r7, r5
 8020cd4:	781b      	ldrb	r3, [r3, #0]
 8020cd6:	0018      	movs	r0, r3
 8020cd8:	f000 f92f 	bl	8020f3a <USBD_Get_USB_Status>
 8020cdc:	0003      	movs	r3, r0
 8020cde:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020ce0:	19bb      	adds	r3, r7, r6
 8020ce2:	781b      	ldrb	r3, [r3, #0]
}
 8020ce4:	0018      	movs	r0, r3
 8020ce6:	46bd      	mov	sp, r7
 8020ce8:	b005      	add	sp, #20
 8020cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020cec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cee:	b085      	sub	sp, #20
 8020cf0:	af00      	add	r7, sp, #0
 8020cf2:	6078      	str	r0, [r7, #4]
 8020cf4:	000a      	movs	r2, r1
 8020cf6:	1cfb      	adds	r3, r7, #3
 8020cf8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020cfa:	210f      	movs	r1, #15
 8020cfc:	187b      	adds	r3, r7, r1
 8020cfe:	2200      	movs	r2, #0
 8020d00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d02:	260e      	movs	r6, #14
 8020d04:	19bb      	adds	r3, r7, r6
 8020d06:	2200      	movs	r2, #0
 8020d08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020d0a:	687a      	ldr	r2, [r7, #4]
 8020d0c:	23b0      	movs	r3, #176	@ 0xb0
 8020d0e:	009b      	lsls	r3, r3, #2
 8020d10:	58d2      	ldr	r2, [r2, r3]
 8020d12:	000d      	movs	r5, r1
 8020d14:	187c      	adds	r4, r7, r1
 8020d16:	1cfb      	adds	r3, r7, #3
 8020d18:	781b      	ldrb	r3, [r3, #0]
 8020d1a:	0019      	movs	r1, r3
 8020d1c:	0010      	movs	r0, r2
 8020d1e:	f7f6 fac8 	bl	80172b2 <HAL_PCD_EP_ClrStall>
 8020d22:	0003      	movs	r3, r0
 8020d24:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d26:	19bc      	adds	r4, r7, r6
 8020d28:	197b      	adds	r3, r7, r5
 8020d2a:	781b      	ldrb	r3, [r3, #0]
 8020d2c:	0018      	movs	r0, r3
 8020d2e:	f000 f904 	bl	8020f3a <USBD_Get_USB_Status>
 8020d32:	0003      	movs	r3, r0
 8020d34:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020d36:	19bb      	adds	r3, r7, r6
 8020d38:	781b      	ldrb	r3, [r3, #0]
}
 8020d3a:	0018      	movs	r0, r3
 8020d3c:	46bd      	mov	sp, r7
 8020d3e:	b005      	add	sp, #20
 8020d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d42 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d42:	b580      	push	{r7, lr}
 8020d44:	b084      	sub	sp, #16
 8020d46:	af00      	add	r7, sp, #0
 8020d48:	6078      	str	r0, [r7, #4]
 8020d4a:	000a      	movs	r2, r1
 8020d4c:	1cfb      	adds	r3, r7, #3
 8020d4e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020d50:	687a      	ldr	r2, [r7, #4]
 8020d52:	23b0      	movs	r3, #176	@ 0xb0
 8020d54:	009b      	lsls	r3, r3, #2
 8020d56:	58d3      	ldr	r3, [r2, r3]
 8020d58:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020d5a:	1cfb      	adds	r3, r7, #3
 8020d5c:	781b      	ldrb	r3, [r3, #0]
 8020d5e:	b25b      	sxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	da0d      	bge.n	8020d80 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020d64:	1cfb      	adds	r3, r7, #3
 8020d66:	781b      	ldrb	r3, [r3, #0]
 8020d68:	227f      	movs	r2, #127	@ 0x7f
 8020d6a:	4013      	ands	r3, r2
 8020d6c:	68f9      	ldr	r1, [r7, #12]
 8020d6e:	1c5a      	adds	r2, r3, #1
 8020d70:	0013      	movs	r3, r2
 8020d72:	009b      	lsls	r3, r3, #2
 8020d74:	189b      	adds	r3, r3, r2
 8020d76:	00db      	lsls	r3, r3, #3
 8020d78:	18cb      	adds	r3, r1, r3
 8020d7a:	3302      	adds	r3, #2
 8020d7c:	781b      	ldrb	r3, [r3, #0]
 8020d7e:	e00d      	b.n	8020d9c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020d80:	1cfb      	adds	r3, r7, #3
 8020d82:	781b      	ldrb	r3, [r3, #0]
 8020d84:	227f      	movs	r2, #127	@ 0x7f
 8020d86:	401a      	ands	r2, r3
 8020d88:	68f8      	ldr	r0, [r7, #12]
 8020d8a:	23b5      	movs	r3, #181	@ 0xb5
 8020d8c:	0059      	lsls	r1, r3, #1
 8020d8e:	0013      	movs	r3, r2
 8020d90:	009b      	lsls	r3, r3, #2
 8020d92:	189b      	adds	r3, r3, r2
 8020d94:	00db      	lsls	r3, r3, #3
 8020d96:	18c3      	adds	r3, r0, r3
 8020d98:	185b      	adds	r3, r3, r1
 8020d9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020d9c:	0018      	movs	r0, r3
 8020d9e:	46bd      	mov	sp, r7
 8020da0:	b004      	add	sp, #16
 8020da2:	bd80      	pop	{r7, pc}

08020da4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020da6:	b085      	sub	sp, #20
 8020da8:	af00      	add	r7, sp, #0
 8020daa:	6078      	str	r0, [r7, #4]
 8020dac:	000a      	movs	r2, r1
 8020dae:	1cfb      	adds	r3, r7, #3
 8020db0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020db2:	210f      	movs	r1, #15
 8020db4:	187b      	adds	r3, r7, r1
 8020db6:	2200      	movs	r2, #0
 8020db8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020dba:	260e      	movs	r6, #14
 8020dbc:	19bb      	adds	r3, r7, r6
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020dc2:	687a      	ldr	r2, [r7, #4]
 8020dc4:	23b0      	movs	r3, #176	@ 0xb0
 8020dc6:	009b      	lsls	r3, r3, #2
 8020dc8:	58d2      	ldr	r2, [r2, r3]
 8020dca:	000d      	movs	r5, r1
 8020dcc:	187c      	adds	r4, r7, r1
 8020dce:	1cfb      	adds	r3, r7, #3
 8020dd0:	781b      	ldrb	r3, [r3, #0]
 8020dd2:	0019      	movs	r1, r3
 8020dd4:	0010      	movs	r0, r2
 8020dd6:	f7f6 f899 	bl	8016f0c <HAL_PCD_SetAddress>
 8020dda:	0003      	movs	r3, r0
 8020ddc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020dde:	19bc      	adds	r4, r7, r6
 8020de0:	197b      	adds	r3, r7, r5
 8020de2:	781b      	ldrb	r3, [r3, #0]
 8020de4:	0018      	movs	r0, r3
 8020de6:	f000 f8a8 	bl	8020f3a <USBD_Get_USB_Status>
 8020dea:	0003      	movs	r3, r0
 8020dec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020dee:	19bb      	adds	r3, r7, r6
 8020df0:	781b      	ldrb	r3, [r3, #0]
}
 8020df2:	0018      	movs	r0, r3
 8020df4:	46bd      	mov	sp, r7
 8020df6:	b005      	add	sp, #20
 8020df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020dfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dfc:	b087      	sub	sp, #28
 8020dfe:	af00      	add	r7, sp, #0
 8020e00:	60f8      	str	r0, [r7, #12]
 8020e02:	0008      	movs	r0, r1
 8020e04:	607a      	str	r2, [r7, #4]
 8020e06:	0019      	movs	r1, r3
 8020e08:	230b      	movs	r3, #11
 8020e0a:	18fb      	adds	r3, r7, r3
 8020e0c:	1c02      	adds	r2, r0, #0
 8020e0e:	701a      	strb	r2, [r3, #0]
 8020e10:	2408      	movs	r4, #8
 8020e12:	193b      	adds	r3, r7, r4
 8020e14:	1c0a      	adds	r2, r1, #0
 8020e16:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e18:	2117      	movs	r1, #23
 8020e1a:	187b      	adds	r3, r7, r1
 8020e1c:	2200      	movs	r2, #0
 8020e1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e20:	2516      	movs	r5, #22
 8020e22:	197b      	adds	r3, r7, r5
 8020e24:	2200      	movs	r2, #0
 8020e26:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020e28:	68fa      	ldr	r2, [r7, #12]
 8020e2a:	23b0      	movs	r3, #176	@ 0xb0
 8020e2c:	009b      	lsls	r3, r3, #2
 8020e2e:	58d0      	ldr	r0, [r2, r3]
 8020e30:	193b      	adds	r3, r7, r4
 8020e32:	881d      	ldrh	r5, [r3, #0]
 8020e34:	000e      	movs	r6, r1
 8020e36:	187c      	adds	r4, r7, r1
 8020e38:	687a      	ldr	r2, [r7, #4]
 8020e3a:	230b      	movs	r3, #11
 8020e3c:	18fb      	adds	r3, r7, r3
 8020e3e:	7819      	ldrb	r1, [r3, #0]
 8020e40:	002b      	movs	r3, r5
 8020e42:	f7f6 f99e 	bl	8017182 <HAL_PCD_EP_Transmit>
 8020e46:	0003      	movs	r3, r0
 8020e48:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e4a:	2516      	movs	r5, #22
 8020e4c:	197c      	adds	r4, r7, r5
 8020e4e:	19bb      	adds	r3, r7, r6
 8020e50:	781b      	ldrb	r3, [r3, #0]
 8020e52:	0018      	movs	r0, r3
 8020e54:	f000 f871 	bl	8020f3a <USBD_Get_USB_Status>
 8020e58:	0003      	movs	r3, r0
 8020e5a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020e5c:	197b      	adds	r3, r7, r5
 8020e5e:	781b      	ldrb	r3, [r3, #0]
}
 8020e60:	0018      	movs	r0, r3
 8020e62:	46bd      	mov	sp, r7
 8020e64:	b007      	add	sp, #28
 8020e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020e68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e6a:	b087      	sub	sp, #28
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	60f8      	str	r0, [r7, #12]
 8020e70:	0008      	movs	r0, r1
 8020e72:	607a      	str	r2, [r7, #4]
 8020e74:	0019      	movs	r1, r3
 8020e76:	230b      	movs	r3, #11
 8020e78:	18fb      	adds	r3, r7, r3
 8020e7a:	1c02      	adds	r2, r0, #0
 8020e7c:	701a      	strb	r2, [r3, #0]
 8020e7e:	2408      	movs	r4, #8
 8020e80:	193b      	adds	r3, r7, r4
 8020e82:	1c0a      	adds	r2, r1, #0
 8020e84:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e86:	2117      	movs	r1, #23
 8020e88:	187b      	adds	r3, r7, r1
 8020e8a:	2200      	movs	r2, #0
 8020e8c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e8e:	2516      	movs	r5, #22
 8020e90:	197b      	adds	r3, r7, r5
 8020e92:	2200      	movs	r2, #0
 8020e94:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020e96:	68fa      	ldr	r2, [r7, #12]
 8020e98:	23b0      	movs	r3, #176	@ 0xb0
 8020e9a:	009b      	lsls	r3, r3, #2
 8020e9c:	58d0      	ldr	r0, [r2, r3]
 8020e9e:	193b      	adds	r3, r7, r4
 8020ea0:	881d      	ldrh	r5, [r3, #0]
 8020ea2:	000e      	movs	r6, r1
 8020ea4:	187c      	adds	r4, r7, r1
 8020ea6:	687a      	ldr	r2, [r7, #4]
 8020ea8:	230b      	movs	r3, #11
 8020eaa:	18fb      	adds	r3, r7, r3
 8020eac:	7819      	ldrb	r1, [r3, #0]
 8020eae:	002b      	movs	r3, r5
 8020eb0:	f7f6 f917 	bl	80170e2 <HAL_PCD_EP_Receive>
 8020eb4:	0003      	movs	r3, r0
 8020eb6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020eb8:	2516      	movs	r5, #22
 8020eba:	197c      	adds	r4, r7, r5
 8020ebc:	19bb      	adds	r3, r7, r6
 8020ebe:	781b      	ldrb	r3, [r3, #0]
 8020ec0:	0018      	movs	r0, r3
 8020ec2:	f000 f83a 	bl	8020f3a <USBD_Get_USB_Status>
 8020ec6:	0003      	movs	r3, r0
 8020ec8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020eca:	197b      	adds	r3, r7, r5
 8020ecc:	781b      	ldrb	r3, [r3, #0]
}
 8020ece:	0018      	movs	r0, r3
 8020ed0:	46bd      	mov	sp, r7
 8020ed2:	b007      	add	sp, #28
 8020ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020ed6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020ed6:	b580      	push	{r7, lr}
 8020ed8:	b082      	sub	sp, #8
 8020eda:	af00      	add	r7, sp, #0
 8020edc:	6078      	str	r0, [r7, #4]
 8020ede:	000a      	movs	r2, r1
 8020ee0:	1cfb      	adds	r3, r7, #3
 8020ee2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020ee4:	687a      	ldr	r2, [r7, #4]
 8020ee6:	23b0      	movs	r3, #176	@ 0xb0
 8020ee8:	009b      	lsls	r3, r3, #2
 8020eea:	58d2      	ldr	r2, [r2, r3]
 8020eec:	1cfb      	adds	r3, r7, #3
 8020eee:	781b      	ldrb	r3, [r3, #0]
 8020ef0:	0019      	movs	r1, r3
 8020ef2:	0010      	movs	r0, r2
 8020ef4:	f7f6 f92c 	bl	8017150 <HAL_PCD_EP_GetRxCount>
 8020ef8:	0003      	movs	r3, r0
}
 8020efa:	0018      	movs	r0, r3
 8020efc:	46bd      	mov	sp, r7
 8020efe:	b002      	add	sp, #8
 8020f00:	bd80      	pop	{r7, pc}
	...

08020f04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020f0c:	4b02      	ldr	r3, [pc, #8]	@ (8020f18 <USBD_static_malloc+0x14>)
}
 8020f0e:	0018      	movs	r0, r3
 8020f10:	46bd      	mov	sp, r7
 8020f12:	b002      	add	sp, #8
 8020f14:	bd80      	pop	{r7, pc}
 8020f16:	46c0      	nop			@ (mov r8, r8)
 8020f18:	20003284 	.word	0x20003284

08020f1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b082      	sub	sp, #8
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]

}
 8020f24:	46c0      	nop			@ (mov r8, r8)
 8020f26:	46bd      	mov	sp, r7
 8020f28:	b002      	add	sp, #8
 8020f2a:	bd80      	pop	{r7, pc}

08020f2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8020f2c:	b580      	push	{r7, lr}
 8020f2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8020f30:	f7ea f842 	bl	800afb8 <SystemClock_Config>
}
 8020f34:	46c0      	nop			@ (mov r8, r8)
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}

08020f3a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020f3a:	b580      	push	{r7, lr}
 8020f3c:	b084      	sub	sp, #16
 8020f3e:	af00      	add	r7, sp, #0
 8020f40:	0002      	movs	r2, r0
 8020f42:	1dfb      	adds	r3, r7, #7
 8020f44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020f46:	230f      	movs	r3, #15
 8020f48:	18fb      	adds	r3, r7, r3
 8020f4a:	2200      	movs	r2, #0
 8020f4c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8020f4e:	1dfb      	adds	r3, r7, #7
 8020f50:	781b      	ldrb	r3, [r3, #0]
 8020f52:	2b03      	cmp	r3, #3
 8020f54:	d017      	beq.n	8020f86 <USBD_Get_USB_Status+0x4c>
 8020f56:	dc1b      	bgt.n	8020f90 <USBD_Get_USB_Status+0x56>
 8020f58:	2b02      	cmp	r3, #2
 8020f5a:	d00f      	beq.n	8020f7c <USBD_Get_USB_Status+0x42>
 8020f5c:	dc18      	bgt.n	8020f90 <USBD_Get_USB_Status+0x56>
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d002      	beq.n	8020f68 <USBD_Get_USB_Status+0x2e>
 8020f62:	2b01      	cmp	r3, #1
 8020f64:	d005      	beq.n	8020f72 <USBD_Get_USB_Status+0x38>
 8020f66:	e013      	b.n	8020f90 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020f68:	230f      	movs	r3, #15
 8020f6a:	18fb      	adds	r3, r7, r3
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	701a      	strb	r2, [r3, #0]
    break;
 8020f70:	e013      	b.n	8020f9a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020f72:	230f      	movs	r3, #15
 8020f74:	18fb      	adds	r3, r7, r3
 8020f76:	2202      	movs	r2, #2
 8020f78:	701a      	strb	r2, [r3, #0]
    break;
 8020f7a:	e00e      	b.n	8020f9a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020f7c:	230f      	movs	r3, #15
 8020f7e:	18fb      	adds	r3, r7, r3
 8020f80:	2201      	movs	r2, #1
 8020f82:	701a      	strb	r2, [r3, #0]
    break;
 8020f84:	e009      	b.n	8020f9a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8020f86:	230f      	movs	r3, #15
 8020f88:	18fb      	adds	r3, r7, r3
 8020f8a:	2202      	movs	r2, #2
 8020f8c:	701a      	strb	r2, [r3, #0]
    break;
 8020f8e:	e004      	b.n	8020f9a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8020f90:	230f      	movs	r3, #15
 8020f92:	18fb      	adds	r3, r7, r3
 8020f94:	2202      	movs	r2, #2
 8020f96:	701a      	strb	r2, [r3, #0]
    break;
 8020f98:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8020f9a:	230f      	movs	r3, #15
 8020f9c:	18fb      	adds	r3, r7, r3
 8020f9e:	781b      	ldrb	r3, [r3, #0]
}
 8020fa0:	0018      	movs	r0, r3
 8020fa2:	46bd      	mov	sp, r7
 8020fa4:	b004      	add	sp, #16
 8020fa6:	bd80      	pop	{r7, pc}

08020fa8 <arm_cfft_radix4by2_q31>:
 8020fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020faa:	465f      	mov	r7, fp
 8020fac:	4656      	mov	r6, sl
 8020fae:	464d      	mov	r5, r9
 8020fb0:	4644      	mov	r4, r8
 8020fb2:	000b      	movs	r3, r1
 8020fb4:	b4f0      	push	{r4, r5, r6, r7}
 8020fb6:	085b      	lsrs	r3, r3, #1
 8020fb8:	b08f      	sub	sp, #60	@ 0x3c
 8020fba:	910a      	str	r1, [sp, #40]	@ 0x28
 8020fbc:	0007      	movs	r7, r0
 8020fbe:	9009      	str	r0, [sp, #36]	@ 0x24
 8020fc0:	0011      	movs	r1, r2
 8020fc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020fc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d100      	bne.n	8020fcc <arm_cfft_radix4by2_q31+0x24>
 8020fca:	e0a0      	b.n	802110e <arm_cfft_radix4by2_q31+0x166>
 8020fcc:	0002      	movs	r2, r0
 8020fce:	00db      	lsls	r3, r3, #3
 8020fd0:	3204      	adds	r2, #4
 8020fd2:	4691      	mov	r9, r2
 8020fd4:	4698      	mov	r8, r3
 8020fd6:	000a      	movs	r2, r1
 8020fd8:	464e      	mov	r6, r9
 8020fda:	4442      	add	r2, r8
 8020fdc:	4699      	mov	r9, r3
 8020fde:	4688      	mov	r8, r1
 8020fe0:	9208      	str	r2, [sp, #32]
 8020fe2:	900d      	str	r0, [sp, #52]	@ 0x34
 8020fe4:	4643      	mov	r3, r8
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	469b      	mov	fp, r3
 8020fea:	4643      	mov	r3, r8
 8020fec:	685b      	ldr	r3, [r3, #4]
 8020fee:	469a      	mov	sl, r3
 8020ff0:	683b      	ldr	r3, [r7, #0]
 8020ff2:	109c      	asrs	r4, r3, #2
 8020ff4:	464b      	mov	r3, r9
 8020ff6:	58fb      	ldr	r3, [r7, r3]
 8020ff8:	109a      	asrs	r2, r3, #2
 8020ffa:	18a3      	adds	r3, r4, r2
 8020ffc:	603b      	str	r3, [r7, #0]
 8020ffe:	6833      	ldr	r3, [r6, #0]
 8021000:	1aa4      	subs	r4, r4, r2
 8021002:	109d      	asrs	r5, r3, #2
 8021004:	464b      	mov	r3, r9
 8021006:	58f3      	ldr	r3, [r6, r3]
 8021008:	17e2      	asrs	r2, r4, #31
 802100a:	109b      	asrs	r3, r3, #2
 802100c:	18e9      	adds	r1, r5, r3
 802100e:	6031      	str	r1, [r6, #0]
 8021010:	0011      	movs	r1, r2
 8021012:	465a      	mov	r2, fp
 8021014:	17d2      	asrs	r2, r2, #31
 8021016:	0010      	movs	r0, r2
 8021018:	4652      	mov	r2, sl
 802101a:	1aed      	subs	r5, r5, r3
 802101c:	17eb      	asrs	r3, r5, #31
 802101e:	17d2      	asrs	r2, r2, #31
 8021020:	9307      	str	r3, [sp, #28]
 8021022:	9204      	str	r2, [sp, #16]
 8021024:	0003      	movs	r3, r0
 8021026:	465a      	mov	r2, fp
 8021028:	9006      	str	r0, [sp, #24]
 802102a:	0020      	movs	r0, r4
 802102c:	9105      	str	r1, [sp, #20]
 802102e:	f7df fac7 	bl	80005c0 <__aeabi_lmul>
 8021032:	2280      	movs	r2, #128	@ 0x80
 8021034:	2300      	movs	r3, #0
 8021036:	0612      	lsls	r2, r2, #24
 8021038:	1880      	adds	r0, r0, r2
 802103a:	4159      	adcs	r1, r3
 802103c:	2300      	movs	r3, #0
 802103e:	9101      	str	r1, [sp, #4]
 8021040:	9300      	str	r3, [sp, #0]
 8021042:	4652      	mov	r2, sl
 8021044:	9b04      	ldr	r3, [sp, #16]
 8021046:	0028      	movs	r0, r5
 8021048:	17e9      	asrs	r1, r5, #31
 802104a:	f7df fab9 	bl	80005c0 <__aeabi_lmul>
 802104e:	9a00      	ldr	r2, [sp, #0]
 8021050:	9b01      	ldr	r3, [sp, #4]
 8021052:	1880      	adds	r0, r0, r2
 8021054:	4159      	adcs	r1, r3
 8021056:	2280      	movs	r2, #128	@ 0x80
 8021058:	2300      	movs	r3, #0
 802105a:	0612      	lsls	r2, r2, #24
 802105c:	1880      	adds	r0, r0, r2
 802105e:	4159      	adcs	r1, r3
 8021060:	464a      	mov	r2, r9
 8021062:	004b      	lsls	r3, r1, #1
 8021064:	50bb      	str	r3, [r7, r2]
 8021066:	4658      	mov	r0, fp
 8021068:	002a      	movs	r2, r5
 802106a:	9b07      	ldr	r3, [sp, #28]
 802106c:	9906      	ldr	r1, [sp, #24]
 802106e:	f7df faa7 	bl	80005c0 <__aeabi_lmul>
 8021072:	2280      	movs	r2, #128	@ 0x80
 8021074:	2300      	movs	r3, #0
 8021076:	0612      	lsls	r2, r2, #24
 8021078:	1880      	adds	r0, r0, r2
 802107a:	4159      	adcs	r1, r3
 802107c:	2000      	movs	r0, #0
 802107e:	9103      	str	r1, [sp, #12]
 8021080:	9002      	str	r0, [sp, #8]
 8021082:	4652      	mov	r2, sl
 8021084:	9b04      	ldr	r3, [sp, #16]
 8021086:	0020      	movs	r0, r4
 8021088:	9905      	ldr	r1, [sp, #20]
 802108a:	f7df fa99 	bl	80005c0 <__aeabi_lmul>
 802108e:	9a02      	ldr	r2, [sp, #8]
 8021090:	9b03      	ldr	r3, [sp, #12]
 8021092:	1a12      	subs	r2, r2, r0
 8021094:	418b      	sbcs	r3, r1
 8021096:	2080      	movs	r0, #128	@ 0x80
 8021098:	2100      	movs	r1, #0
 802109a:	0600      	lsls	r0, r0, #24
 802109c:	1812      	adds	r2, r2, r0
 802109e:	414b      	adcs	r3, r1
 80210a0:	464a      	mov	r2, r9
 80210a2:	005b      	lsls	r3, r3, #1
 80210a4:	50b3      	str	r3, [r6, r2]
 80210a6:	2308      	movs	r3, #8
 80210a8:	469c      	mov	ip, r3
 80210aa:	9b08      	ldr	r3, [sp, #32]
 80210ac:	44e0      	add	r8, ip
 80210ae:	3708      	adds	r7, #8
 80210b0:	3608      	adds	r6, #8
 80210b2:	4598      	cmp	r8, r3
 80210b4:	d196      	bne.n	8020fe4 <arm_cfft_radix4by2_q31+0x3c>
 80210b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80210b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80210ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80210bc:	2302      	movs	r3, #2
 80210be:	003a      	movs	r2, r7
 80210c0:	0029      	movs	r1, r5
 80210c2:	0020      	movs	r0, r4
 80210c4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80210c6:	f000 f957 	bl	8021378 <arm_radix4_butterfly_q31>
 80210ca:	46a4      	mov	ip, r4
 80210cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80210ce:	2302      	movs	r3, #2
 80210d0:	0088      	lsls	r0, r1, #2
 80210d2:	4460      	add	r0, ip
 80210d4:	003a      	movs	r2, r7
 80210d6:	0029      	movs	r1, r5
 80210d8:	f000 f94e 	bl	8021378 <arm_radix4_butterfly_q31>
 80210dc:	46a4      	mov	ip, r4
 80210de:	0128      	lsls	r0, r5, #4
 80210e0:	4460      	add	r0, ip
 80210e2:	6833      	ldr	r3, [r6, #0]
 80210e4:	005b      	lsls	r3, r3, #1
 80210e6:	6033      	str	r3, [r6, #0]
 80210e8:	6873      	ldr	r3, [r6, #4]
 80210ea:	005b      	lsls	r3, r3, #1
 80210ec:	6073      	str	r3, [r6, #4]
 80210ee:	68b3      	ldr	r3, [r6, #8]
 80210f0:	005b      	lsls	r3, r3, #1
 80210f2:	60b3      	str	r3, [r6, #8]
 80210f4:	68f3      	ldr	r3, [r6, #12]
 80210f6:	005b      	lsls	r3, r3, #1
 80210f8:	60f3      	str	r3, [r6, #12]
 80210fa:	3610      	adds	r6, #16
 80210fc:	42b0      	cmp	r0, r6
 80210fe:	d1f0      	bne.n	80210e2 <arm_cfft_radix4by2_q31+0x13a>
 8021100:	b00f      	add	sp, #60	@ 0x3c
 8021102:	bc3c      	pop	{r2, r3, r4, r5}
 8021104:	4690      	mov	r8, r2
 8021106:	4699      	mov	r9, r3
 8021108:	46a2      	mov	sl, r4
 802110a:	46ab      	mov	fp, r5
 802110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802110e:	2302      	movs	r3, #2
 8021110:	2100      	movs	r1, #0
 8021112:	0015      	movs	r5, r2
 8021114:	f000 f930 	bl	8021378 <arm_radix4_butterfly_q31>
 8021118:	46bc      	mov	ip, r7
 802111a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802111c:	002a      	movs	r2, r5
 802111e:	0098      	lsls	r0, r3, #2
 8021120:	4460      	add	r0, ip
 8021122:	2302      	movs	r3, #2
 8021124:	2100      	movs	r1, #0
 8021126:	f000 f927 	bl	8021378 <arm_radix4_butterfly_q31>
 802112a:	e7e9      	b.n	8021100 <arm_cfft_radix4by2_q31+0x158>

0802112c <arm_cfft_radix4by2_inverse_q31>:
 802112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802112e:	465f      	mov	r7, fp
 8021130:	4656      	mov	r6, sl
 8021132:	464d      	mov	r5, r9
 8021134:	4644      	mov	r4, r8
 8021136:	000b      	movs	r3, r1
 8021138:	b4f0      	push	{r4, r5, r6, r7}
 802113a:	085b      	lsrs	r3, r3, #1
 802113c:	b08f      	sub	sp, #60	@ 0x3c
 802113e:	910a      	str	r1, [sp, #40]	@ 0x28
 8021140:	0007      	movs	r7, r0
 8021142:	9009      	str	r0, [sp, #36]	@ 0x24
 8021144:	0011      	movs	r1, r2
 8021146:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021148:	930c      	str	r3, [sp, #48]	@ 0x30
 802114a:	2b00      	cmp	r3, #0
 802114c:	d100      	bne.n	8021150 <arm_cfft_radix4by2_inverse_q31+0x24>
 802114e:	e0a0      	b.n	8021292 <arm_cfft_radix4by2_inverse_q31+0x166>
 8021150:	0002      	movs	r2, r0
 8021152:	00db      	lsls	r3, r3, #3
 8021154:	3204      	adds	r2, #4
 8021156:	4691      	mov	r9, r2
 8021158:	4698      	mov	r8, r3
 802115a:	000a      	movs	r2, r1
 802115c:	464e      	mov	r6, r9
 802115e:	4442      	add	r2, r8
 8021160:	4699      	mov	r9, r3
 8021162:	4688      	mov	r8, r1
 8021164:	9208      	str	r2, [sp, #32]
 8021166:	900d      	str	r0, [sp, #52]	@ 0x34
 8021168:	4643      	mov	r3, r8
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	469b      	mov	fp, r3
 802116e:	4643      	mov	r3, r8
 8021170:	685b      	ldr	r3, [r3, #4]
 8021172:	469a      	mov	sl, r3
 8021174:	683b      	ldr	r3, [r7, #0]
 8021176:	109c      	asrs	r4, r3, #2
 8021178:	464b      	mov	r3, r9
 802117a:	58fb      	ldr	r3, [r7, r3]
 802117c:	109a      	asrs	r2, r3, #2
 802117e:	18a3      	adds	r3, r4, r2
 8021180:	603b      	str	r3, [r7, #0]
 8021182:	6833      	ldr	r3, [r6, #0]
 8021184:	1aa4      	subs	r4, r4, r2
 8021186:	109d      	asrs	r5, r3, #2
 8021188:	464b      	mov	r3, r9
 802118a:	58f3      	ldr	r3, [r6, r3]
 802118c:	17e2      	asrs	r2, r4, #31
 802118e:	109b      	asrs	r3, r3, #2
 8021190:	18e9      	adds	r1, r5, r3
 8021192:	6031      	str	r1, [r6, #0]
 8021194:	0011      	movs	r1, r2
 8021196:	465a      	mov	r2, fp
 8021198:	17d2      	asrs	r2, r2, #31
 802119a:	0010      	movs	r0, r2
 802119c:	4652      	mov	r2, sl
 802119e:	1aed      	subs	r5, r5, r3
 80211a0:	17eb      	asrs	r3, r5, #31
 80211a2:	17d2      	asrs	r2, r2, #31
 80211a4:	9307      	str	r3, [sp, #28]
 80211a6:	9204      	str	r2, [sp, #16]
 80211a8:	0003      	movs	r3, r0
 80211aa:	465a      	mov	r2, fp
 80211ac:	9006      	str	r0, [sp, #24]
 80211ae:	0020      	movs	r0, r4
 80211b0:	9105      	str	r1, [sp, #20]
 80211b2:	f7df fa05 	bl	80005c0 <__aeabi_lmul>
 80211b6:	2280      	movs	r2, #128	@ 0x80
 80211b8:	2300      	movs	r3, #0
 80211ba:	0612      	lsls	r2, r2, #24
 80211bc:	1880      	adds	r0, r0, r2
 80211be:	4159      	adcs	r1, r3
 80211c0:	2300      	movs	r3, #0
 80211c2:	9101      	str	r1, [sp, #4]
 80211c4:	9300      	str	r3, [sp, #0]
 80211c6:	4652      	mov	r2, sl
 80211c8:	9b04      	ldr	r3, [sp, #16]
 80211ca:	0028      	movs	r0, r5
 80211cc:	17e9      	asrs	r1, r5, #31
 80211ce:	f7df f9f7 	bl	80005c0 <__aeabi_lmul>
 80211d2:	9a00      	ldr	r2, [sp, #0]
 80211d4:	9b01      	ldr	r3, [sp, #4]
 80211d6:	1a12      	subs	r2, r2, r0
 80211d8:	418b      	sbcs	r3, r1
 80211da:	2080      	movs	r0, #128	@ 0x80
 80211dc:	2100      	movs	r1, #0
 80211de:	0600      	lsls	r0, r0, #24
 80211e0:	1812      	adds	r2, r2, r0
 80211e2:	414b      	adcs	r3, r1
 80211e4:	464a      	mov	r2, r9
 80211e6:	005b      	lsls	r3, r3, #1
 80211e8:	50bb      	str	r3, [r7, r2]
 80211ea:	4658      	mov	r0, fp
 80211ec:	002a      	movs	r2, r5
 80211ee:	9b07      	ldr	r3, [sp, #28]
 80211f0:	9906      	ldr	r1, [sp, #24]
 80211f2:	f7df f9e5 	bl	80005c0 <__aeabi_lmul>
 80211f6:	2280      	movs	r2, #128	@ 0x80
 80211f8:	2300      	movs	r3, #0
 80211fa:	0612      	lsls	r2, r2, #24
 80211fc:	1880      	adds	r0, r0, r2
 80211fe:	4159      	adcs	r1, r3
 8021200:	2000      	movs	r0, #0
 8021202:	9103      	str	r1, [sp, #12]
 8021204:	9002      	str	r0, [sp, #8]
 8021206:	4652      	mov	r2, sl
 8021208:	9b04      	ldr	r3, [sp, #16]
 802120a:	0020      	movs	r0, r4
 802120c:	9905      	ldr	r1, [sp, #20]
 802120e:	f7df f9d7 	bl	80005c0 <__aeabi_lmul>
 8021212:	9b02      	ldr	r3, [sp, #8]
 8021214:	9c03      	ldr	r4, [sp, #12]
 8021216:	18c0      	adds	r0, r0, r3
 8021218:	4161      	adcs	r1, r4
 802121a:	2380      	movs	r3, #128	@ 0x80
 802121c:	2400      	movs	r4, #0
 802121e:	061b      	lsls	r3, r3, #24
 8021220:	18c0      	adds	r0, r0, r3
 8021222:	4161      	adcs	r1, r4
 8021224:	464a      	mov	r2, r9
 8021226:	004b      	lsls	r3, r1, #1
 8021228:	50b3      	str	r3, [r6, r2]
 802122a:	2308      	movs	r3, #8
 802122c:	469c      	mov	ip, r3
 802122e:	9b08      	ldr	r3, [sp, #32]
 8021230:	44e0      	add	r8, ip
 8021232:	3708      	adds	r7, #8
 8021234:	3608      	adds	r6, #8
 8021236:	4598      	cmp	r8, r3
 8021238:	d196      	bne.n	8021168 <arm_cfft_radix4by2_inverse_q31+0x3c>
 802123a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802123c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802123e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021240:	2302      	movs	r3, #2
 8021242:	003a      	movs	r2, r7
 8021244:	0029      	movs	r1, r5
 8021246:	0020      	movs	r0, r4
 8021248:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802124a:	f000 fb3b 	bl	80218c4 <arm_radix4_butterfly_inverse_q31>
 802124e:	46a4      	mov	ip, r4
 8021250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021252:	2302      	movs	r3, #2
 8021254:	0088      	lsls	r0, r1, #2
 8021256:	4460      	add	r0, ip
 8021258:	003a      	movs	r2, r7
 802125a:	0029      	movs	r1, r5
 802125c:	f000 fb32 	bl	80218c4 <arm_radix4_butterfly_inverse_q31>
 8021260:	46a4      	mov	ip, r4
 8021262:	0128      	lsls	r0, r5, #4
 8021264:	4460      	add	r0, ip
 8021266:	6833      	ldr	r3, [r6, #0]
 8021268:	005b      	lsls	r3, r3, #1
 802126a:	6033      	str	r3, [r6, #0]
 802126c:	6873      	ldr	r3, [r6, #4]
 802126e:	005b      	lsls	r3, r3, #1
 8021270:	6073      	str	r3, [r6, #4]
 8021272:	68b3      	ldr	r3, [r6, #8]
 8021274:	005b      	lsls	r3, r3, #1
 8021276:	60b3      	str	r3, [r6, #8]
 8021278:	68f3      	ldr	r3, [r6, #12]
 802127a:	005b      	lsls	r3, r3, #1
 802127c:	60f3      	str	r3, [r6, #12]
 802127e:	3610      	adds	r6, #16
 8021280:	42b0      	cmp	r0, r6
 8021282:	d1f0      	bne.n	8021266 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8021284:	b00f      	add	sp, #60	@ 0x3c
 8021286:	bc3c      	pop	{r2, r3, r4, r5}
 8021288:	4690      	mov	r8, r2
 802128a:	4699      	mov	r9, r3
 802128c:	46a2      	mov	sl, r4
 802128e:	46ab      	mov	fp, r5
 8021290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021292:	2302      	movs	r3, #2
 8021294:	2100      	movs	r1, #0
 8021296:	0015      	movs	r5, r2
 8021298:	f000 fb14 	bl	80218c4 <arm_radix4_butterfly_inverse_q31>
 802129c:	46bc      	mov	ip, r7
 802129e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80212a0:	002a      	movs	r2, r5
 80212a2:	0098      	lsls	r0, r3, #2
 80212a4:	4460      	add	r0, ip
 80212a6:	2302      	movs	r3, #2
 80212a8:	2100      	movs	r1, #0
 80212aa:	f000 fb0b 	bl	80218c4 <arm_radix4_butterfly_inverse_q31>
 80212ae:	e7e9      	b.n	8021284 <arm_cfft_radix4by2_inverse_q31+0x158>

080212b0 <arm_cfft_q31>:
 80212b0:	b570      	push	{r4, r5, r6, lr}
 80212b2:	001e      	movs	r6, r3
 80212b4:	2380      	movs	r3, #128	@ 0x80
 80212b6:	000d      	movs	r5, r1
 80212b8:	0004      	movs	r4, r0
 80212ba:	8801      	ldrh	r1, [r0, #0]
 80212bc:	005b      	lsls	r3, r3, #1
 80212be:	2a01      	cmp	r2, #1
 80212c0:	d028      	beq.n	8021314 <arm_cfft_q31+0x64>
 80212c2:	4299      	cmp	r1, r3
 80212c4:	d020      	beq.n	8021308 <arm_cfft_q31+0x58>
 80212c6:	d812      	bhi.n	80212ee <arm_cfft_q31+0x3e>
 80212c8:	2920      	cmp	r1, #32
 80212ca:	d004      	beq.n	80212d6 <arm_cfft_q31+0x26>
 80212cc:	d949      	bls.n	8021362 <arm_cfft_q31+0xb2>
 80212ce:	2940      	cmp	r1, #64	@ 0x40
 80212d0:	d01a      	beq.n	8021308 <arm_cfft_q31+0x58>
 80212d2:	2980      	cmp	r1, #128	@ 0x80
 80212d4:	d103      	bne.n	80212de <arm_cfft_q31+0x2e>
 80212d6:	6862      	ldr	r2, [r4, #4]
 80212d8:	0028      	movs	r0, r5
 80212da:	f7ff fe65 	bl	8020fa8 <arm_cfft_radix4by2_q31>
 80212de:	2e00      	cmp	r6, #0
 80212e0:	d004      	beq.n	80212ec <arm_cfft_q31+0x3c>
 80212e2:	68a2      	ldr	r2, [r4, #8]
 80212e4:	89a1      	ldrh	r1, [r4, #12]
 80212e6:	0028      	movs	r0, r5
 80212e8:	f7de ff0e 	bl	8000108 <arm_bitreversal_32>
 80212ec:	bd70      	pop	{r4, r5, r6, pc}
 80212ee:	2380      	movs	r3, #128	@ 0x80
 80212f0:	00db      	lsls	r3, r3, #3
 80212f2:	4299      	cmp	r1, r3
 80212f4:	d008      	beq.n	8021308 <arm_cfft_q31+0x58>
 80212f6:	d92f      	bls.n	8021358 <arm_cfft_q31+0xa8>
 80212f8:	2380      	movs	r3, #128	@ 0x80
 80212fa:	011b      	lsls	r3, r3, #4
 80212fc:	4299      	cmp	r1, r3
 80212fe:	d0ea      	beq.n	80212d6 <arm_cfft_q31+0x26>
 8021300:	2380      	movs	r3, #128	@ 0x80
 8021302:	015b      	lsls	r3, r3, #5
 8021304:	4299      	cmp	r1, r3
 8021306:	d1ea      	bne.n	80212de <arm_cfft_q31+0x2e>
 8021308:	2301      	movs	r3, #1
 802130a:	6862      	ldr	r2, [r4, #4]
 802130c:	0028      	movs	r0, r5
 802130e:	f000 f833 	bl	8021378 <arm_radix4_butterfly_q31>
 8021312:	e7e4      	b.n	80212de <arm_cfft_q31+0x2e>
 8021314:	4299      	cmp	r1, r3
 8021316:	d019      	beq.n	802134c <arm_cfft_q31+0x9c>
 8021318:	d80b      	bhi.n	8021332 <arm_cfft_q31+0x82>
 802131a:	2920      	cmp	r1, #32
 802131c:	d004      	beq.n	8021328 <arm_cfft_q31+0x78>
 802131e:	d928      	bls.n	8021372 <arm_cfft_q31+0xc2>
 8021320:	2940      	cmp	r1, #64	@ 0x40
 8021322:	d013      	beq.n	802134c <arm_cfft_q31+0x9c>
 8021324:	2980      	cmp	r1, #128	@ 0x80
 8021326:	d1da      	bne.n	80212de <arm_cfft_q31+0x2e>
 8021328:	6862      	ldr	r2, [r4, #4]
 802132a:	0028      	movs	r0, r5
 802132c:	f7ff fefe 	bl	802112c <arm_cfft_radix4by2_inverse_q31>
 8021330:	e7d5      	b.n	80212de <arm_cfft_q31+0x2e>
 8021332:	2380      	movs	r3, #128	@ 0x80
 8021334:	00db      	lsls	r3, r3, #3
 8021336:	4299      	cmp	r1, r3
 8021338:	d008      	beq.n	802134c <arm_cfft_q31+0x9c>
 802133a:	d915      	bls.n	8021368 <arm_cfft_q31+0xb8>
 802133c:	2380      	movs	r3, #128	@ 0x80
 802133e:	011b      	lsls	r3, r3, #4
 8021340:	4299      	cmp	r1, r3
 8021342:	d0f1      	beq.n	8021328 <arm_cfft_q31+0x78>
 8021344:	2380      	movs	r3, #128	@ 0x80
 8021346:	015b      	lsls	r3, r3, #5
 8021348:	4299      	cmp	r1, r3
 802134a:	d1c8      	bne.n	80212de <arm_cfft_q31+0x2e>
 802134c:	2301      	movs	r3, #1
 802134e:	6862      	ldr	r2, [r4, #4]
 8021350:	0028      	movs	r0, r5
 8021352:	f000 fab7 	bl	80218c4 <arm_radix4_butterfly_inverse_q31>
 8021356:	e7c2      	b.n	80212de <arm_cfft_q31+0x2e>
 8021358:	2380      	movs	r3, #128	@ 0x80
 802135a:	009b      	lsls	r3, r3, #2
 802135c:	4299      	cmp	r1, r3
 802135e:	d0ba      	beq.n	80212d6 <arm_cfft_q31+0x26>
 8021360:	e7bd      	b.n	80212de <arm_cfft_q31+0x2e>
 8021362:	2910      	cmp	r1, #16
 8021364:	d1bb      	bne.n	80212de <arm_cfft_q31+0x2e>
 8021366:	e7cf      	b.n	8021308 <arm_cfft_q31+0x58>
 8021368:	2380      	movs	r3, #128	@ 0x80
 802136a:	009b      	lsls	r3, r3, #2
 802136c:	4299      	cmp	r1, r3
 802136e:	d0db      	beq.n	8021328 <arm_cfft_q31+0x78>
 8021370:	e7b5      	b.n	80212de <arm_cfft_q31+0x2e>
 8021372:	2910      	cmp	r1, #16
 8021374:	d1b3      	bne.n	80212de <arm_cfft_q31+0x2e>
 8021376:	e7e9      	b.n	802134c <arm_cfft_q31+0x9c>

08021378 <arm_radix4_butterfly_q31>:
 8021378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802137a:	464d      	mov	r5, r9
 802137c:	4644      	mov	r4, r8
 802137e:	465f      	mov	r7, fp
 8021380:	4656      	mov	r6, sl
 8021382:	469c      	mov	ip, r3
 8021384:	b4f0      	push	{r4, r5, r6, r7}
 8021386:	b0a7      	sub	sp, #156	@ 0x9c
 8021388:	9114      	str	r1, [sp, #80]	@ 0x50
 802138a:	0889      	lsrs	r1, r1, #2
 802138c:	9310      	str	r3, [sp, #64]	@ 0x40
 802138e:	00cb      	lsls	r3, r1, #3
 8021390:	0015      	movs	r5, r2
 8021392:	9223      	str	r2, [sp, #140]	@ 0x8c
 8021394:	18c2      	adds	r2, r0, r3
 8021396:	000c      	movs	r4, r1
 8021398:	469a      	mov	sl, r3
 802139a:	9124      	str	r1, [sp, #144]	@ 0x90
 802139c:	18d1      	adds	r1, r2, r3
 802139e:	4663      	mov	r3, ip
 80213a0:	468b      	mov	fp, r1
 80213a2:	0119      	lsls	r1, r3, #4
 80213a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80213a6:	00d9      	lsls	r1, r3, #3
 80213a8:	005b      	lsls	r3, r3, #1
 80213aa:	4463      	add	r3, ip
 80213ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80213ae:	00d9      	lsls	r1, r3, #3
 80213b0:	465b      	mov	r3, fp
 80213b2:	44da      	add	sl, fp
 80213b4:	4690      	mov	r8, r2
 80213b6:	4683      	mov	fp, r0
 80213b8:	4699      	mov	r9, r3
 80213ba:	9022      	str	r0, [sp, #136]	@ 0x88
 80213bc:	9025      	str	r0, [sp, #148]	@ 0x94
 80213be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80213c0:	9502      	str	r5, [sp, #8]
 80213c2:	9500      	str	r5, [sp, #0]
 80213c4:	9501      	str	r5, [sp, #4]
 80213c6:	9407      	str	r4, [sp, #28]
 80213c8:	465b      	mov	r3, fp
 80213ca:	681b      	ldr	r3, [r3, #0]
 80213cc:	4642      	mov	r2, r8
 80213ce:	111c      	asrs	r4, r3, #4
 80213d0:	464b      	mov	r3, r9
 80213d2:	4658      	mov	r0, fp
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	6812      	ldr	r2, [r2, #0]
 80213d8:	111b      	asrs	r3, r3, #4
 80213da:	18e7      	adds	r7, r4, r3
 80213dc:	1ae3      	subs	r3, r4, r3
 80213de:	1114      	asrs	r4, r2, #4
 80213e0:	4652      	mov	r2, sl
 80213e2:	6840      	ldr	r0, [r0, #4]
 80213e4:	6812      	ldr	r2, [r2, #0]
 80213e6:	1105      	asrs	r5, r0, #4
 80213e8:	4648      	mov	r0, r9
 80213ea:	9303      	str	r3, [sp, #12]
 80213ec:	1113      	asrs	r3, r2, #4
 80213ee:	18e2      	adds	r2, r4, r3
 80213f0:	465c      	mov	r4, fp
 80213f2:	6840      	ldr	r0, [r0, #4]
 80213f4:	1103      	asrs	r3, r0, #4
 80213f6:	18ee      	adds	r6, r5, r3
 80213f8:	1ae8      	subs	r0, r5, r3
 80213fa:	18bb      	adds	r3, r7, r2
 80213fc:	6023      	str	r3, [r4, #0]
 80213fe:	4644      	mov	r4, r8
 8021400:	6864      	ldr	r4, [r4, #4]
 8021402:	9004      	str	r0, [sp, #16]
 8021404:	1125      	asrs	r5, r4, #4
 8021406:	4654      	mov	r4, sl
 8021408:	6864      	ldr	r4, [r4, #4]
 802140a:	1123      	asrs	r3, r4, #4
 802140c:	465c      	mov	r4, fp
 802140e:	18eb      	adds	r3, r5, r3
 8021410:	18f1      	adds	r1, r6, r3
 8021412:	6061      	str	r1, [r4, #4]
 8021414:	4655      	mov	r5, sl
 8021416:	4644      	mov	r4, r8
 8021418:	686d      	ldr	r5, [r5, #4]
 802141a:	6864      	ldr	r4, [r4, #4]
 802141c:	1129      	asrs	r1, r5, #4
 802141e:	1124      	asrs	r4, r4, #4
 8021420:	1a64      	subs	r4, r4, r1
 8021422:	4641      	mov	r1, r8
 8021424:	6809      	ldr	r1, [r1, #0]
 8021426:	9405      	str	r4, [sp, #20]
 8021428:	1108      	asrs	r0, r1, #4
 802142a:	4651      	mov	r1, sl
 802142c:	6809      	ldr	r1, [r1, #0]
 802142e:	1abc      	subs	r4, r7, r2
 8021430:	1109      	asrs	r1, r1, #4
 8021432:	1a41      	subs	r1, r0, r1
 8021434:	17e2      	asrs	r2, r4, #31
 8021436:	9106      	str	r1, [sp, #24]
 8021438:	0011      	movs	r1, r2
 802143a:	9a01      	ldr	r2, [sp, #4]
 802143c:	9108      	str	r1, [sp, #32]
 802143e:	6817      	ldr	r7, [r2, #0]
 8021440:	17fd      	asrs	r5, r7, #31
 8021442:	0028      	movs	r0, r5
 8021444:	1af5      	subs	r5, r6, r3
 8021446:	17ee      	asrs	r6, r5, #31
 8021448:	960a      	str	r6, [sp, #40]	@ 0x28
 802144a:	6856      	ldr	r6, [r2, #4]
 802144c:	9009      	str	r0, [sp, #36]	@ 0x24
 802144e:	17f3      	asrs	r3, r6, #31
 8021450:	003a      	movs	r2, r7
 8021452:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021454:	0003      	movs	r3, r0
 8021456:	0020      	movs	r0, r4
 8021458:	f7df f8b2 	bl	80005c0 <__aeabi_lmul>
 802145c:	0032      	movs	r2, r6
 802145e:	17f3      	asrs	r3, r6, #31
 8021460:	910c      	str	r1, [sp, #48]	@ 0x30
 8021462:	0028      	movs	r0, r5
 8021464:	17e9      	asrs	r1, r5, #31
 8021466:	f7df f8ab 	bl	80005c0 <__aeabi_lmul>
 802146a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802146c:	002a      	movs	r2, r5
 802146e:	4684      	mov	ip, r0
 8021470:	4640      	mov	r0, r8
 8021472:	4461      	add	r1, ip
 8021474:	0049      	lsls	r1, r1, #1
 8021476:	6001      	str	r1, [r0, #0]
 8021478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802147a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802147c:	0038      	movs	r0, r7
 802147e:	f7df f89f 	bl	80005c0 <__aeabi_lmul>
 8021482:	0032      	movs	r2, r6
 8021484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021486:	000d      	movs	r5, r1
 8021488:	0020      	movs	r0, r4
 802148a:	9908      	ldr	r1, [sp, #32]
 802148c:	f7df f898 	bl	80005c0 <__aeabi_lmul>
 8021490:	4646      	mov	r6, r8
 8021492:	1a6d      	subs	r5, r5, r1
 8021494:	006d      	lsls	r5, r5, #1
 8021496:	6075      	str	r5, [r6, #4]
 8021498:	9903      	ldr	r1, [sp, #12]
 802149a:	9d05      	ldr	r5, [sp, #20]
 802149c:	000c      	movs	r4, r1
 802149e:	46ac      	mov	ip, r5
 80214a0:	4464      	add	r4, ip
 80214a2:	17e6      	asrs	r6, r4, #31
 80214a4:	0031      	movs	r1, r6
 80214a6:	9b00      	ldr	r3, [sp, #0]
 80214a8:	9804      	ldr	r0, [sp, #16]
 80214aa:	681e      	ldr	r6, [r3, #0]
 80214ac:	17f7      	asrs	r7, r6, #31
 80214ae:	9709      	str	r7, [sp, #36]	@ 0x24
 80214b0:	9f06      	ldr	r7, [sp, #24]
 80214b2:	0032      	movs	r2, r6
 80214b4:	1bc7      	subs	r7, r0, r7
 80214b6:	17fd      	asrs	r5, r7, #31
 80214b8:	950a      	str	r5, [sp, #40]	@ 0x28
 80214ba:	685d      	ldr	r5, [r3, #4]
 80214bc:	17f3      	asrs	r3, r6, #31
 80214be:	17e8      	asrs	r0, r5, #31
 80214c0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80214c2:	0020      	movs	r0, r4
 80214c4:	9108      	str	r1, [sp, #32]
 80214c6:	f7df f87b 	bl	80005c0 <__aeabi_lmul>
 80214ca:	002a      	movs	r2, r5
 80214cc:	17eb      	asrs	r3, r5, #31
 80214ce:	910c      	str	r1, [sp, #48]	@ 0x30
 80214d0:	0038      	movs	r0, r7
 80214d2:	17f9      	asrs	r1, r7, #31
 80214d4:	f7df f874 	bl	80005c0 <__aeabi_lmul>
 80214d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80214da:	003a      	movs	r2, r7
 80214dc:	4684      	mov	ip, r0
 80214de:	4648      	mov	r0, r9
 80214e0:	4461      	add	r1, ip
 80214e2:	0049      	lsls	r1, r1, #1
 80214e4:	6001      	str	r1, [r0, #0]
 80214e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80214e8:	0030      	movs	r0, r6
 80214ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80214ec:	f7df f868 	bl	80005c0 <__aeabi_lmul>
 80214f0:	002a      	movs	r2, r5
 80214f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80214f4:	000e      	movs	r6, r1
 80214f6:	0020      	movs	r0, r4
 80214f8:	9908      	ldr	r1, [sp, #32]
 80214fa:	f7df f861 	bl	80005c0 <__aeabi_lmul>
 80214fe:	464c      	mov	r4, r9
 8021500:	9d05      	ldr	r5, [sp, #20]
 8021502:	1a76      	subs	r6, r6, r1
 8021504:	9903      	ldr	r1, [sp, #12]
 8021506:	0076      	lsls	r6, r6, #1
 8021508:	6066      	str	r6, [r4, #4]
 802150a:	1b4c      	subs	r4, r1, r5
 802150c:	9e06      	ldr	r6, [sp, #24]
 802150e:	17e1      	asrs	r1, r4, #31
 8021510:	9103      	str	r1, [sp, #12]
 8021512:	9902      	ldr	r1, [sp, #8]
 8021514:	46b4      	mov	ip, r6
 8021516:	680f      	ldr	r7, [r1, #0]
 8021518:	9804      	ldr	r0, [sp, #16]
 802151a:	17fd      	asrs	r5, r7, #31
 802151c:	002b      	movs	r3, r5
 802151e:	684e      	ldr	r6, [r1, #4]
 8021520:	4460      	add	r0, ip
 8021522:	0005      	movs	r5, r0
 8021524:	17c0      	asrs	r0, r0, #31
 8021526:	9005      	str	r0, [sp, #20]
 8021528:	17f0      	asrs	r0, r6, #31
 802152a:	9006      	str	r0, [sp, #24]
 802152c:	003a      	movs	r2, r7
 802152e:	0020      	movs	r0, r4
 8021530:	17e1      	asrs	r1, r4, #31
 8021532:	9304      	str	r3, [sp, #16]
 8021534:	f7df f844 	bl	80005c0 <__aeabi_lmul>
 8021538:	0032      	movs	r2, r6
 802153a:	9108      	str	r1, [sp, #32]
 802153c:	17f3      	asrs	r3, r6, #31
 802153e:	0028      	movs	r0, r5
 8021540:	17e9      	asrs	r1, r5, #31
 8021542:	f7df f83d 	bl	80005c0 <__aeabi_lmul>
 8021546:	9808      	ldr	r0, [sp, #32]
 8021548:	002a      	movs	r2, r5
 802154a:	4684      	mov	ip, r0
 802154c:	4650      	mov	r0, sl
 802154e:	4461      	add	r1, ip
 8021550:	0049      	lsls	r1, r1, #1
 8021552:	6001      	str	r1, [r0, #0]
 8021554:	9b05      	ldr	r3, [sp, #20]
 8021556:	9904      	ldr	r1, [sp, #16]
 8021558:	0038      	movs	r0, r7
 802155a:	f7df f831 	bl	80005c0 <__aeabi_lmul>
 802155e:	0020      	movs	r0, r4
 8021560:	2408      	movs	r4, #8
 8021562:	000d      	movs	r5, r1
 8021564:	0032      	movs	r2, r6
 8021566:	9b06      	ldr	r3, [sp, #24]
 8021568:	9903      	ldr	r1, [sp, #12]
 802156a:	f7df f829 	bl	80005c0 <__aeabi_lmul>
 802156e:	46a4      	mov	ip, r4
 8021570:	4650      	mov	r0, sl
 8021572:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021574:	44e3      	add	fp, ip
 8021576:	44e0      	add	r8, ip
 8021578:	44e1      	add	r9, ip
 802157a:	44e2      	add	sl, ip
 802157c:	46a4      	mov	ip, r4
 802157e:	1a6d      	subs	r5, r5, r1
 8021580:	006d      	lsls	r5, r5, #1
 8021582:	9a01      	ldr	r2, [sp, #4]
 8021584:	6045      	str	r5, [r0, #4]
 8021586:	9807      	ldr	r0, [sp, #28]
 8021588:	4462      	add	r2, ip
 802158a:	3801      	subs	r0, #1
 802158c:	9201      	str	r2, [sp, #4]
 802158e:	9007      	str	r0, [sp, #28]
 8021590:	9b00      	ldr	r3, [sp, #0]
 8021592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021594:	9902      	ldr	r1, [sp, #8]
 8021596:	4694      	mov	ip, r2
 8021598:	4463      	add	r3, ip
 802159a:	9300      	str	r3, [sp, #0]
 802159c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802159e:	469c      	mov	ip, r3
 80215a0:	4461      	add	r1, ip
 80215a2:	9102      	str	r1, [sp, #8]
 80215a4:	2800      	cmp	r0, #0
 80215a6:	d000      	beq.n	80215aa <arm_radix4_butterfly_q31+0x232>
 80215a8:	e70e      	b.n	80213c8 <arm_radix4_butterfly_q31+0x50>
 80215aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80215ac:	009b      	lsls	r3, r3, #2
 80215ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 80215b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80215b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80215b6:	2b04      	cmp	r3, #4
 80215b8:	d800      	bhi.n	80215bc <arm_radix4_butterfly_q31+0x244>
 80215ba:	e180      	b.n	80218be <arm_radix4_butterfly_q31+0x546>
 80215bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80215be:	0893      	lsrs	r3, r2, #2
 80215c0:	1e59      	subs	r1, r3, #1
 80215c2:	9321      	str	r3, [sp, #132]	@ 0x84
 80215c4:	00db      	lsls	r3, r3, #3
 80215c6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80215c8:	00d3      	lsls	r3, r2, #3
 80215ca:	9300      	str	r3, [sp, #0]
 80215cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80215ce:	911a      	str	r1, [sp, #104]	@ 0x68
 80215d0:	00da      	lsls	r2, r3, #3
 80215d2:	921e      	str	r2, [sp, #120]	@ 0x78
 80215d4:	011a      	lsls	r2, r3, #4
 80215d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80215d8:	001a      	movs	r2, r3
 80215da:	4694      	mov	ip, r2
 80215dc:	005b      	lsls	r3, r3, #1
 80215de:	4463      	add	r3, ip
 80215e0:	00db      	lsls	r3, r3, #3
 80215e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80215e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80215e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80215e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80215ea:	9318      	str	r3, [sp, #96]	@ 0x60
 80215ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80215ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80215f0:	2300      	movs	r3, #0
 80215f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80215f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215f6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80215f8:	681a      	ldr	r2, [r3, #0]
 80215fa:	685b      	ldr	r3, [r3, #4]
 80215fc:	9205      	str	r2, [sp, #20]
 80215fe:	9306      	str	r3, [sp, #24]
 8021600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021602:	468c      	mov	ip, r1
 8021604:	681a      	ldr	r2, [r3, #0]
 8021606:	685b      	ldr	r3, [r3, #4]
 8021608:	9207      	str	r2, [sp, #28]
 802160a:	9308      	str	r3, [sp, #32]
 802160c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802160e:	681a      	ldr	r2, [r3, #0]
 8021610:	685b      	ldr	r3, [r3, #4]
 8021612:	9209      	str	r2, [sp, #36]	@ 0x24
 8021614:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021616:	930a      	str	r3, [sp, #40]	@ 0x28
 8021618:	0013      	movs	r3, r2
 802161a:	4463      	add	r3, ip
 802161c:	4698      	mov	r8, r3
 802161e:	0013      	movs	r3, r2
 8021620:	4442      	add	r2, r8
 8021622:	4691      	mov	r9, r2
 8021624:	001a      	movs	r2, r3
 8021626:	444a      	add	r2, r9
 8021628:	4692      	mov	sl, r2
 802162a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802162c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802162e:	4293      	cmp	r3, r2
 8021630:	d800      	bhi.n	8021634 <arm_radix4_butterfly_q31+0x2bc>
 8021632:	e0dd      	b.n	80217f0 <arm_radix4_butterfly_q31+0x478>
 8021634:	4694      	mov	ip, r2
 8021636:	468b      	mov	fp, r1
 8021638:	4644      	mov	r4, r8
 802163a:	4655      	mov	r5, sl
 802163c:	9b07      	ldr	r3, [sp, #28]
 802163e:	17db      	asrs	r3, r3, #31
 8021640:	930c      	str	r3, [sp, #48]	@ 0x30
 8021642:	9b08      	ldr	r3, [sp, #32]
 8021644:	17db      	asrs	r3, r3, #31
 8021646:	930d      	str	r3, [sp, #52]	@ 0x34
 8021648:	9b05      	ldr	r3, [sp, #20]
 802164a:	17db      	asrs	r3, r3, #31
 802164c:	930e      	str	r3, [sp, #56]	@ 0x38
 802164e:	9b06      	ldr	r3, [sp, #24]
 8021650:	17db      	asrs	r3, r3, #31
 8021652:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021656:	17db      	asrs	r3, r3, #31
 8021658:	9310      	str	r3, [sp, #64]	@ 0x40
 802165a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802165c:	17db      	asrs	r3, r3, #31
 802165e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021660:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021662:	4463      	add	r3, ip
 8021664:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021666:	465b      	mov	r3, fp
 8021668:	4659      	mov	r1, fp
 802166a:	681a      	ldr	r2, [r3, #0]
 802166c:	464b      	mov	r3, r9
 802166e:	684f      	ldr	r7, [r1, #4]
 8021670:	4649      	mov	r1, r9
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	18d6      	adds	r6, r2, r3
 8021676:	1ad3      	subs	r3, r2, r3
 8021678:	9301      	str	r3, [sp, #4]
 802167a:	684b      	ldr	r3, [r1, #4]
 802167c:	18f8      	adds	r0, r7, r3
 802167e:	1af9      	subs	r1, r7, r3
 8021680:	6827      	ldr	r7, [r4, #0]
 8021682:	9102      	str	r1, [sp, #8]
 8021684:	003a      	movs	r2, r7
 8021686:	682f      	ldr	r7, [r5, #0]
 8021688:	46bc      	mov	ip, r7
 802168a:	465f      	mov	r7, fp
 802168c:	4462      	add	r2, ip
 802168e:	18b3      	adds	r3, r6, r2
 8021690:	109b      	asrs	r3, r3, #2
 8021692:	603b      	str	r3, [r7, #0]
 8021694:	6867      	ldr	r7, [r4, #4]
 8021696:	1ab6      	subs	r6, r6, r2
 8021698:	46b8      	mov	r8, r7
 802169a:	686f      	ldr	r7, [r5, #4]
 802169c:	17f2      	asrs	r2, r6, #31
 802169e:	46bc      	mov	ip, r7
 80216a0:	44e0      	add	r8, ip
 80216a2:	4643      	mov	r3, r8
 80216a4:	465f      	mov	r7, fp
 80216a6:	18c1      	adds	r1, r0, r3
 80216a8:	1089      	asrs	r1, r1, #2
 80216aa:	6079      	str	r1, [r7, #4]
 80216ac:	9900      	ldr	r1, [sp, #0]
 80216ae:	4690      	mov	r8, r2
 80216b0:	468c      	mov	ip, r1
 80216b2:	6867      	ldr	r7, [r4, #4]
 80216b4:	6869      	ldr	r1, [r5, #4]
 80216b6:	44e3      	add	fp, ip
 80216b8:	1a7f      	subs	r7, r7, r1
 80216ba:	9703      	str	r7, [sp, #12]
 80216bc:	6829      	ldr	r1, [r5, #0]
 80216be:	6827      	ldr	r7, [r4, #0]
 80216c0:	1a7f      	subs	r7, r7, r1
 80216c2:	9704      	str	r7, [sp, #16]
 80216c4:	1ac7      	subs	r7, r0, r3
 80216c6:	17fa      	asrs	r2, r7, #31
 80216c8:	4692      	mov	sl, r2
 80216ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80216cc:	9a07      	ldr	r2, [sp, #28]
 80216ce:	0030      	movs	r0, r6
 80216d0:	4641      	mov	r1, r8
 80216d2:	f7de ff75 	bl	80005c0 <__aeabi_lmul>
 80216d6:	9a08      	ldr	r2, [sp, #32]
 80216d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216da:	9112      	str	r1, [sp, #72]	@ 0x48
 80216dc:	0038      	movs	r0, r7
 80216de:	4651      	mov	r1, sl
 80216e0:	f7de ff6e 	bl	80005c0 <__aeabi_lmul>
 80216e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80216e6:	9a07      	ldr	r2, [sp, #28]
 80216e8:	4684      	mov	ip, r0
 80216ea:	4461      	add	r1, ip
 80216ec:	1049      	asrs	r1, r1, #1
 80216ee:	6021      	str	r1, [r4, #0]
 80216f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80216f2:	0038      	movs	r0, r7
 80216f4:	4651      	mov	r1, sl
 80216f6:	f7de ff63 	bl	80005c0 <__aeabi_lmul>
 80216fa:	9a08      	ldr	r2, [sp, #32]
 80216fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216fe:	000f      	movs	r7, r1
 8021700:	0030      	movs	r0, r6
 8021702:	4641      	mov	r1, r8
 8021704:	f7de ff5c 	bl	80005c0 <__aeabi_lmul>
 8021708:	9b00      	ldr	r3, [sp, #0]
 802170a:	9a01      	ldr	r2, [sp, #4]
 802170c:	469c      	mov	ip, r3
 802170e:	9803      	ldr	r0, [sp, #12]
 8021710:	1a7f      	subs	r7, r7, r1
 8021712:	107f      	asrs	r7, r7, #1
 8021714:	6067      	str	r7, [r4, #4]
 8021716:	0016      	movs	r6, r2
 8021718:	4464      	add	r4, ip
 802171a:	4684      	mov	ip, r0
 802171c:	4466      	add	r6, ip
 802171e:	17f2      	asrs	r2, r6, #31
 8021720:	4690      	mov	r8, r2
 8021722:	9902      	ldr	r1, [sp, #8]
 8021724:	9f04      	ldr	r7, [sp, #16]
 8021726:	0030      	movs	r0, r6
 8021728:	1bcf      	subs	r7, r1, r7
 802172a:	17fa      	asrs	r2, r7, #31
 802172c:	4692      	mov	sl, r2
 802172e:	4641      	mov	r1, r8
 8021730:	9a05      	ldr	r2, [sp, #20]
 8021732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021734:	f7de ff44 	bl	80005c0 <__aeabi_lmul>
 8021738:	9a06      	ldr	r2, [sp, #24]
 802173a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802173c:	9112      	str	r1, [sp, #72]	@ 0x48
 802173e:	0038      	movs	r0, r7
 8021740:	4651      	mov	r1, sl
 8021742:	f7de ff3d 	bl	80005c0 <__aeabi_lmul>
 8021746:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021748:	9a05      	ldr	r2, [sp, #20]
 802174a:	4684      	mov	ip, r0
 802174c:	4648      	mov	r0, r9
 802174e:	4461      	add	r1, ip
 8021750:	1049      	asrs	r1, r1, #1
 8021752:	6001      	str	r1, [r0, #0]
 8021754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021756:	0038      	movs	r0, r7
 8021758:	4651      	mov	r1, sl
 802175a:	f7de ff31 	bl	80005c0 <__aeabi_lmul>
 802175e:	9a06      	ldr	r2, [sp, #24]
 8021760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021762:	000f      	movs	r7, r1
 8021764:	0030      	movs	r0, r6
 8021766:	4641      	mov	r1, r8
 8021768:	f7de ff2a 	bl	80005c0 <__aeabi_lmul>
 802176c:	464e      	mov	r6, r9
 802176e:	9a00      	ldr	r2, [sp, #0]
 8021770:	9b01      	ldr	r3, [sp, #4]
 8021772:	4694      	mov	ip, r2
 8021774:	9803      	ldr	r0, [sp, #12]
 8021776:	1a7f      	subs	r7, r7, r1
 8021778:	107f      	asrs	r7, r7, #1
 802177a:	6077      	str	r7, [r6, #4]
 802177c:	1a1e      	subs	r6, r3, r0
 802177e:	9b04      	ldr	r3, [sp, #16]
 8021780:	44e1      	add	r9, ip
 8021782:	469c      	mov	ip, r3
 8021784:	17f0      	asrs	r0, r6, #31
 8021786:	4680      	mov	r8, r0
 8021788:	9902      	ldr	r1, [sp, #8]
 802178a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802178c:	4461      	add	r1, ip
 802178e:	17cb      	asrs	r3, r1, #31
 8021790:	000f      	movs	r7, r1
 8021792:	469a      	mov	sl, r3
 8021794:	0030      	movs	r0, r6
 8021796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021798:	4641      	mov	r1, r8
 802179a:	f7de ff11 	bl	80005c0 <__aeabi_lmul>
 802179e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80217a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80217a2:	9101      	str	r1, [sp, #4]
 80217a4:	0038      	movs	r0, r7
 80217a6:	4651      	mov	r1, sl
 80217a8:	f7de ff0a 	bl	80005c0 <__aeabi_lmul>
 80217ac:	9801      	ldr	r0, [sp, #4]
 80217ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80217b0:	4684      	mov	ip, r0
 80217b2:	4461      	add	r1, ip
 80217b4:	1049      	asrs	r1, r1, #1
 80217b6:	6029      	str	r1, [r5, #0]
 80217b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80217ba:	0038      	movs	r0, r7
 80217bc:	4651      	mov	r1, sl
 80217be:	f7de feff 	bl	80005c0 <__aeabi_lmul>
 80217c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80217c4:	000f      	movs	r7, r1
 80217c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80217c8:	0030      	movs	r0, r6
 80217ca:	4641      	mov	r1, r8
 80217cc:	f7de fef8 	bl	80005c0 <__aeabi_lmul>
 80217d0:	1a7f      	subs	r7, r7, r1
 80217d2:	107f      	asrs	r7, r7, #1
 80217d4:	606f      	str	r7, [r5, #4]
 80217d6:	9a00      	ldr	r2, [sp, #0]
 80217d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80217da:	4694      	mov	ip, r2
 80217dc:	4465      	add	r5, ip
 80217de:	468c      	mov	ip, r1
 80217e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80217e2:	0013      	movs	r3, r2
 80217e4:	4462      	add	r2, ip
 80217e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80217e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80217ea:	429a      	cmp	r2, r3
 80217ec:	d900      	bls.n	80217f0 <arm_radix4_butterfly_q31+0x478>
 80217ee:	e73a      	b.n	8021666 <arm_radix4_butterfly_q31+0x2ee>
 80217f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80217f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80217f4:	468c      	mov	ip, r1
 80217f6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80217f8:	4462      	add	r2, ip
 80217fa:	468c      	mov	ip, r1
 80217fc:	9216      	str	r2, [sp, #88]	@ 0x58
 80217fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021800:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021802:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021804:	4462      	add	r2, ip
 8021806:	468c      	mov	ip, r1
 8021808:	9219      	str	r2, [sp, #100]	@ 0x64
 802180a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802180c:	3301      	adds	r3, #1
 802180e:	4462      	add	r2, ip
 8021810:	9218      	str	r2, [sp, #96]	@ 0x60
 8021812:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021814:	9315      	str	r3, [sp, #84]	@ 0x54
 8021816:	3208      	adds	r2, #8
 8021818:	9217      	str	r2, [sp, #92]	@ 0x5c
 802181a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802181c:	4293      	cmp	r3, r2
 802181e:	d800      	bhi.n	8021822 <arm_radix4_butterfly_q31+0x4aa>
 8021820:	e6e8      	b.n	80215f4 <arm_radix4_butterfly_q31+0x27c>
 8021822:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021824:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021826:	009b      	lsls	r3, r3, #2
 8021828:	931f      	str	r3, [sp, #124]	@ 0x7c
 802182a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802182c:	9213      	str	r2, [sp, #76]	@ 0x4c
 802182e:	089b      	lsrs	r3, r3, #2
 8021830:	9320      	str	r3, [sp, #128]	@ 0x80
 8021832:	2b04      	cmp	r3, #4
 8021834:	d900      	bls.n	8021838 <arm_radix4_butterfly_q31+0x4c0>
 8021836:	e6c1      	b.n	80215bc <arm_radix4_butterfly_q31+0x244>
 8021838:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802183a:	469a      	mov	sl, r3
 802183c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802183e:	691c      	ldr	r4, [r3, #16]
 8021840:	685a      	ldr	r2, [r3, #4]
 8021842:	46a1      	mov	r9, r4
 8021844:	4690      	mov	r8, r2
 8021846:	6819      	ldr	r1, [r3, #0]
 8021848:	689a      	ldr	r2, [r3, #8]
 802184a:	699f      	ldr	r7, [r3, #24]
 802184c:	188d      	adds	r5, r1, r2
 802184e:	444d      	add	r5, r9
 8021850:	19ed      	adds	r5, r5, r7
 8021852:	69de      	ldr	r6, [r3, #28]
 8021854:	601d      	str	r5, [r3, #0]
 8021856:	4645      	mov	r5, r8
 8021858:	46b4      	mov	ip, r6
 802185a:	68d8      	ldr	r0, [r3, #12]
 802185c:	695c      	ldr	r4, [r3, #20]
 802185e:	182d      	adds	r5, r5, r0
 8021860:	192d      	adds	r5, r5, r4
 8021862:	4465      	add	r5, ip
 8021864:	605d      	str	r5, [r3, #4]
 8021866:	1a8d      	subs	r5, r1, r2
 8021868:	444d      	add	r5, r9
 802186a:	1bed      	subs	r5, r5, r7
 802186c:	609d      	str	r5, [r3, #8]
 802186e:	4645      	mov	r5, r8
 8021870:	1a2d      	subs	r5, r5, r0
 8021872:	192d      	adds	r5, r5, r4
 8021874:	1bad      	subs	r5, r5, r6
 8021876:	464e      	mov	r6, r9
 8021878:	60dd      	str	r5, [r3, #12]
 802187a:	180d      	adds	r5, r1, r0
 802187c:	1bad      	subs	r5, r5, r6
 802187e:	4666      	mov	r6, ip
 8021880:	1bad      	subs	r5, r5, r6
 8021882:	611d      	str	r5, [r3, #16]
 8021884:	4645      	mov	r5, r8
 8021886:	1aad      	subs	r5, r5, r2
 8021888:	4442      	add	r2, r8
 802188a:	1b12      	subs	r2, r2, r4
 802188c:	1bd2      	subs	r2, r2, r7
 802188e:	1a08      	subs	r0, r1, r0
 8021890:	61da      	str	r2, [r3, #28]
 8021892:	4649      	mov	r1, r9
 8021894:	2201      	movs	r2, #1
 8021896:	1a41      	subs	r1, r0, r1
 8021898:	4252      	negs	r2, r2
 802189a:	4461      	add	r1, ip
 802189c:	4694      	mov	ip, r2
 802189e:	44e2      	add	sl, ip
 80218a0:	4652      	mov	r2, sl
 80218a2:	1b2d      	subs	r5, r5, r4
 80218a4:	19ed      	adds	r5, r5, r7
 80218a6:	615d      	str	r5, [r3, #20]
 80218a8:	6199      	str	r1, [r3, #24]
 80218aa:	3320      	adds	r3, #32
 80218ac:	2a00      	cmp	r2, #0
 80218ae:	d1c6      	bne.n	802183e <arm_radix4_butterfly_q31+0x4c6>
 80218b0:	b027      	add	sp, #156	@ 0x9c
 80218b2:	bc3c      	pop	{r2, r3, r4, r5}
 80218b4:	4690      	mov	r8, r2
 80218b6:	4699      	mov	r9, r3
 80218b8:	46a2      	mov	sl, r4
 80218ba:	46ab      	mov	fp, r5
 80218bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218be:	469a      	mov	sl, r3
 80218c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80218c2:	e7bc      	b.n	802183e <arm_radix4_butterfly_q31+0x4c6>

080218c4 <arm_radix4_butterfly_inverse_q31>:
 80218c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218c6:	464d      	mov	r5, r9
 80218c8:	4644      	mov	r4, r8
 80218ca:	465f      	mov	r7, fp
 80218cc:	4656      	mov	r6, sl
 80218ce:	b4f0      	push	{r4, r5, r6, r7}
 80218d0:	b0a7      	sub	sp, #156	@ 0x9c
 80218d2:	469c      	mov	ip, r3
 80218d4:	9114      	str	r1, [sp, #80]	@ 0x50
 80218d6:	0889      	lsrs	r1, r1, #2
 80218d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80218da:	00cb      	lsls	r3, r1, #3
 80218dc:	0015      	movs	r5, r2
 80218de:	9223      	str	r2, [sp, #140]	@ 0x8c
 80218e0:	18c2      	adds	r2, r0, r3
 80218e2:	000c      	movs	r4, r1
 80218e4:	9124      	str	r1, [sp, #144]	@ 0x90
 80218e6:	18d1      	adds	r1, r2, r3
 80218e8:	468b      	mov	fp, r1
 80218ea:	469a      	mov	sl, r3
 80218ec:	4663      	mov	r3, ip
 80218ee:	44da      	add	sl, fp
 80218f0:	46d0      	mov	r8, sl
 80218f2:	4681      	mov	r9, r0
 80218f4:	4692      	mov	sl, r2
 80218f6:	0119      	lsls	r1, r3, #4
 80218f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80218fa:	00d9      	lsls	r1, r3, #3
 80218fc:	005b      	lsls	r3, r3, #1
 80218fe:	4463      	add	r3, ip
 8021900:	910e      	str	r1, [sp, #56]	@ 0x38
 8021902:	00d9      	lsls	r1, r3, #3
 8021904:	9022      	str	r0, [sp, #136]	@ 0x88
 8021906:	9025      	str	r0, [sp, #148]	@ 0x94
 8021908:	910f      	str	r1, [sp, #60]	@ 0x3c
 802190a:	9502      	str	r5, [sp, #8]
 802190c:	9500      	str	r5, [sp, #0]
 802190e:	9501      	str	r5, [sp, #4]
 8021910:	9409      	str	r4, [sp, #36]	@ 0x24
 8021912:	464b      	mov	r3, r9
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	4652      	mov	r2, sl
 8021918:	111c      	asrs	r4, r3, #4
 802191a:	465b      	mov	r3, fp
 802191c:	4648      	mov	r0, r9
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	6812      	ldr	r2, [r2, #0]
 8021922:	6840      	ldr	r0, [r0, #4]
 8021924:	111b      	asrs	r3, r3, #4
 8021926:	18e7      	adds	r7, r4, r3
 8021928:	1ae3      	subs	r3, r4, r3
 802192a:	1114      	asrs	r4, r2, #4
 802192c:	4642      	mov	r2, r8
 802192e:	1105      	asrs	r5, r0, #4
 8021930:	4658      	mov	r0, fp
 8021932:	6812      	ldr	r2, [r2, #0]
 8021934:	6840      	ldr	r0, [r0, #4]
 8021936:	9303      	str	r3, [sp, #12]
 8021938:	1113      	asrs	r3, r2, #4
 802193a:	18e2      	adds	r2, r4, r3
 802193c:	1103      	asrs	r3, r0, #4
 802193e:	18ee      	adds	r6, r5, r3
 8021940:	1ae8      	subs	r0, r5, r3
 8021942:	464d      	mov	r5, r9
 8021944:	18bb      	adds	r3, r7, r2
 8021946:	602b      	str	r3, [r5, #0]
 8021948:	4641      	mov	r1, r8
 802194a:	4655      	mov	r5, sl
 802194c:	6849      	ldr	r1, [r1, #4]
 802194e:	686d      	ldr	r5, [r5, #4]
 8021950:	110b      	asrs	r3, r1, #4
 8021952:	112d      	asrs	r5, r5, #4
 8021954:	18eb      	adds	r3, r5, r3
 8021956:	464d      	mov	r5, r9
 8021958:	18f1      	adds	r1, r6, r3
 802195a:	6069      	str	r1, [r5, #4]
 802195c:	4655      	mov	r5, sl
 802195e:	686d      	ldr	r5, [r5, #4]
 8021960:	9004      	str	r0, [sp, #16]
 8021962:	112c      	asrs	r4, r5, #4
 8021964:	4645      	mov	r5, r8
 8021966:	686d      	ldr	r5, [r5, #4]
 8021968:	1129      	asrs	r1, r5, #4
 802196a:	1a65      	subs	r5, r4, r1
 802196c:	4651      	mov	r1, sl
 802196e:	6809      	ldr	r1, [r1, #0]
 8021970:	1abc      	subs	r4, r7, r2
 8021972:	1108      	asrs	r0, r1, #4
 8021974:	4641      	mov	r1, r8
 8021976:	17e2      	asrs	r2, r4, #31
 8021978:	6809      	ldr	r1, [r1, #0]
 802197a:	9207      	str	r2, [sp, #28]
 802197c:	9a01      	ldr	r2, [sp, #4]
 802197e:	1109      	asrs	r1, r1, #4
 8021980:	6817      	ldr	r7, [r2, #0]
 8021982:	1a41      	subs	r1, r0, r1
 8021984:	9106      	str	r1, [sp, #24]
 8021986:	0039      	movs	r1, r7
 8021988:	17ff      	asrs	r7, r7, #31
 802198a:	0038      	movs	r0, r7
 802198c:	9505      	str	r5, [sp, #20]
 802198e:	1af5      	subs	r5, r6, r3
 8021990:	17ef      	asrs	r7, r5, #31
 8021992:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021994:	6857      	ldr	r7, [r2, #4]
 8021996:	0003      	movs	r3, r0
 8021998:	17fe      	asrs	r6, r7, #31
 802199a:	000a      	movs	r2, r1
 802199c:	9108      	str	r1, [sp, #32]
 802199e:	900a      	str	r0, [sp, #40]	@ 0x28
 80219a0:	17e1      	asrs	r1, r4, #31
 80219a2:	0020      	movs	r0, r4
 80219a4:	960c      	str	r6, [sp, #48]	@ 0x30
 80219a6:	f7de fe0b 	bl	80005c0 <__aeabi_lmul>
 80219aa:	003a      	movs	r2, r7
 80219ac:	17fb      	asrs	r3, r7, #31
 80219ae:	000e      	movs	r6, r1
 80219b0:	0028      	movs	r0, r5
 80219b2:	17e9      	asrs	r1, r5, #31
 80219b4:	f7de fe04 	bl	80005c0 <__aeabi_lmul>
 80219b8:	4653      	mov	r3, sl
 80219ba:	1a76      	subs	r6, r6, r1
 80219bc:	0076      	lsls	r6, r6, #1
 80219be:	601e      	str	r6, [r3, #0]
 80219c0:	002a      	movs	r2, r5
 80219c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219c4:	9808      	ldr	r0, [sp, #32]
 80219c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80219c8:	f7de fdfa 	bl	80005c0 <__aeabi_lmul>
 80219cc:	003a      	movs	r2, r7
 80219ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80219d0:	000d      	movs	r5, r1
 80219d2:	0020      	movs	r0, r4
 80219d4:	9907      	ldr	r1, [sp, #28]
 80219d6:	f7de fdf3 	bl	80005c0 <__aeabi_lmul>
 80219da:	4657      	mov	r7, sl
 80219dc:	186d      	adds	r5, r5, r1
 80219de:	006d      	lsls	r5, r5, #1
 80219e0:	607d      	str	r5, [r7, #4]
 80219e2:	9b03      	ldr	r3, [sp, #12]
 80219e4:	9e06      	ldr	r6, [sp, #24]
 80219e6:	9d05      	ldr	r5, [sp, #20]
 80219e8:	46b4      	mov	ip, r6
 80219ea:	1b5d      	subs	r5, r3, r5
 80219ec:	9b00      	ldr	r3, [sp, #0]
 80219ee:	17ef      	asrs	r7, r5, #31
 80219f0:	0039      	movs	r1, r7
 80219f2:	681f      	ldr	r7, [r3, #0]
 80219f4:	17fc      	asrs	r4, r7, #31
 80219f6:	0020      	movs	r0, r4
 80219f8:	9c04      	ldr	r4, [sp, #16]
 80219fa:	4464      	add	r4, ip
 80219fc:	17e6      	asrs	r6, r4, #31
 80219fe:	9407      	str	r4, [sp, #28]
 8021a00:	9608      	str	r6, [sp, #32]
 8021a02:	685e      	ldr	r6, [r3, #4]
 8021a04:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021a06:	17f2      	asrs	r2, r6, #31
 8021a08:	0003      	movs	r3, r0
 8021a0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8021a0c:	0028      	movs	r0, r5
 8021a0e:	003a      	movs	r2, r7
 8021a10:	910a      	str	r1, [sp, #40]	@ 0x28
 8021a12:	f7de fdd5 	bl	80005c0 <__aeabi_lmul>
 8021a16:	0032      	movs	r2, r6
 8021a18:	17f3      	asrs	r3, r6, #31
 8021a1a:	9807      	ldr	r0, [sp, #28]
 8021a1c:	000c      	movs	r4, r1
 8021a1e:	9908      	ldr	r1, [sp, #32]
 8021a20:	f7de fdce 	bl	80005c0 <__aeabi_lmul>
 8021a24:	4658      	mov	r0, fp
 8021a26:	1a64      	subs	r4, r4, r1
 8021a28:	0064      	lsls	r4, r4, #1
 8021a2a:	9a07      	ldr	r2, [sp, #28]
 8021a2c:	6004      	str	r4, [r0, #0]
 8021a2e:	9b08      	ldr	r3, [sp, #32]
 8021a30:	0038      	movs	r0, r7
 8021a32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021a34:	f7de fdc4 	bl	80005c0 <__aeabi_lmul>
 8021a38:	0032      	movs	r2, r6
 8021a3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021a3c:	000c      	movs	r4, r1
 8021a3e:	0028      	movs	r0, r5
 8021a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021a42:	f7de fdbd 	bl	80005c0 <__aeabi_lmul>
 8021a46:	9d05      	ldr	r5, [sp, #20]
 8021a48:	465f      	mov	r7, fp
 8021a4a:	46ac      	mov	ip, r5
 8021a4c:	1864      	adds	r4, r4, r1
 8021a4e:	9903      	ldr	r1, [sp, #12]
 8021a50:	0064      	lsls	r4, r4, #1
 8021a52:	4461      	add	r1, ip
 8021a54:	607c      	str	r4, [r7, #4]
 8021a56:	000c      	movs	r4, r1
 8021a58:	17c9      	asrs	r1, r1, #31
 8021a5a:	9105      	str	r1, [sp, #20]
 8021a5c:	9902      	ldr	r1, [sp, #8]
 8021a5e:	9804      	ldr	r0, [sp, #16]
 8021a60:	680d      	ldr	r5, [r1, #0]
 8021a62:	9e06      	ldr	r6, [sp, #24]
 8021a64:	002b      	movs	r3, r5
 8021a66:	17ed      	asrs	r5, r5, #31
 8021a68:	684f      	ldr	r7, [r1, #4]
 8021a6a:	9503      	str	r5, [sp, #12]
 8021a6c:	1b85      	subs	r5, r0, r6
 8021a6e:	17e8      	asrs	r0, r5, #31
 8021a70:	001a      	movs	r2, r3
 8021a72:	9006      	str	r0, [sp, #24]
 8021a74:	17fe      	asrs	r6, r7, #31
 8021a76:	9304      	str	r3, [sp, #16]
 8021a78:	0020      	movs	r0, r4
 8021a7a:	9b03      	ldr	r3, [sp, #12]
 8021a7c:	17e1      	asrs	r1, r4, #31
 8021a7e:	9607      	str	r6, [sp, #28]
 8021a80:	f7de fd9e 	bl	80005c0 <__aeabi_lmul>
 8021a84:	003a      	movs	r2, r7
 8021a86:	000e      	movs	r6, r1
 8021a88:	17fb      	asrs	r3, r7, #31
 8021a8a:	0028      	movs	r0, r5
 8021a8c:	17e9      	asrs	r1, r5, #31
 8021a8e:	f7de fd97 	bl	80005c0 <__aeabi_lmul>
 8021a92:	4640      	mov	r0, r8
 8021a94:	1a76      	subs	r6, r6, r1
 8021a96:	0076      	lsls	r6, r6, #1
 8021a98:	002a      	movs	r2, r5
 8021a9a:	9b06      	ldr	r3, [sp, #24]
 8021a9c:	6006      	str	r6, [r0, #0]
 8021a9e:	9903      	ldr	r1, [sp, #12]
 8021aa0:	9804      	ldr	r0, [sp, #16]
 8021aa2:	f7de fd8d 	bl	80005c0 <__aeabi_lmul>
 8021aa6:	0020      	movs	r0, r4
 8021aa8:	2408      	movs	r4, #8
 8021aaa:	9b07      	ldr	r3, [sp, #28]
 8021aac:	000d      	movs	r5, r1
 8021aae:	003a      	movs	r2, r7
 8021ab0:	9905      	ldr	r1, [sp, #20]
 8021ab2:	f7de fd85 	bl	80005c0 <__aeabi_lmul>
 8021ab6:	4640      	mov	r0, r8
 8021ab8:	46a4      	mov	ip, r4
 8021aba:	186d      	adds	r5, r5, r1
 8021abc:	006d      	lsls	r5, r5, #1
 8021abe:	6045      	str	r5, [r0, #4]
 8021ac0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021ac2:	44e1      	add	r9, ip
 8021ac4:	3801      	subs	r0, #1
 8021ac6:	9009      	str	r0, [sp, #36]	@ 0x24
 8021ac8:	9a01      	ldr	r2, [sp, #4]
 8021aca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021acc:	44e2      	add	sl, ip
 8021ace:	44e3      	add	fp, ip
 8021ad0:	44e0      	add	r8, ip
 8021ad2:	46a4      	mov	ip, r4
 8021ad4:	4462      	add	r2, ip
 8021ad6:	9201      	str	r2, [sp, #4]
 8021ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021ada:	9b00      	ldr	r3, [sp, #0]
 8021adc:	4694      	mov	ip, r2
 8021ade:	4463      	add	r3, ip
 8021ae0:	9300      	str	r3, [sp, #0]
 8021ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ae4:	9902      	ldr	r1, [sp, #8]
 8021ae6:	469c      	mov	ip, r3
 8021ae8:	4461      	add	r1, ip
 8021aea:	9102      	str	r1, [sp, #8]
 8021aec:	2800      	cmp	r0, #0
 8021aee:	d000      	beq.n	8021af2 <arm_radix4_butterfly_inverse_q31+0x22e>
 8021af0:	e70f      	b.n	8021912 <arm_radix4_butterfly_inverse_q31+0x4e>
 8021af2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021af4:	009b      	lsls	r3, r3, #2
 8021af6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021af8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021afa:	9320      	str	r3, [sp, #128]	@ 0x80
 8021afc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021afe:	2b04      	cmp	r3, #4
 8021b00:	d800      	bhi.n	8021b04 <arm_radix4_butterfly_inverse_q31+0x240>
 8021b02:	e17c      	b.n	8021dfe <arm_radix4_butterfly_inverse_q31+0x53a>
 8021b04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b06:	0893      	lsrs	r3, r2, #2
 8021b08:	1e59      	subs	r1, r3, #1
 8021b0a:	9321      	str	r3, [sp, #132]	@ 0x84
 8021b0c:	00db      	lsls	r3, r3, #3
 8021b0e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021b10:	00d3      	lsls	r3, r2, #3
 8021b12:	9300      	str	r3, [sp, #0]
 8021b14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021b16:	911a      	str	r1, [sp, #104]	@ 0x68
 8021b18:	00da      	lsls	r2, r3, #3
 8021b1a:	921e      	str	r2, [sp, #120]	@ 0x78
 8021b1c:	011a      	lsls	r2, r3, #4
 8021b1e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021b20:	001a      	movs	r2, r3
 8021b22:	4694      	mov	ip, r2
 8021b24:	005b      	lsls	r3, r3, #1
 8021b26:	4463      	add	r3, ip
 8021b28:	00db      	lsls	r3, r3, #3
 8021b2a:	931c      	str	r3, [sp, #112]	@ 0x70
 8021b2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021b2e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021b30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021b32:	9318      	str	r3, [sp, #96]	@ 0x60
 8021b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8021b36:	9316      	str	r3, [sp, #88]	@ 0x58
 8021b38:	2300      	movs	r3, #0
 8021b3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8021b3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021b3e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021b40:	681a      	ldr	r2, [r3, #0]
 8021b42:	685b      	ldr	r3, [r3, #4]
 8021b44:	9205      	str	r2, [sp, #20]
 8021b46:	9306      	str	r3, [sp, #24]
 8021b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021b4a:	468c      	mov	ip, r1
 8021b4c:	681a      	ldr	r2, [r3, #0]
 8021b4e:	685b      	ldr	r3, [r3, #4]
 8021b50:	9207      	str	r2, [sp, #28]
 8021b52:	9308      	str	r3, [sp, #32]
 8021b54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021b56:	681a      	ldr	r2, [r3, #0]
 8021b58:	685b      	ldr	r3, [r3, #4]
 8021b5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b5c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b60:	0013      	movs	r3, r2
 8021b62:	4463      	add	r3, ip
 8021b64:	4698      	mov	r8, r3
 8021b66:	0013      	movs	r3, r2
 8021b68:	4442      	add	r2, r8
 8021b6a:	4691      	mov	r9, r2
 8021b6c:	001a      	movs	r2, r3
 8021b6e:	444a      	add	r2, r9
 8021b70:	4692      	mov	sl, r2
 8021b72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021b74:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021b76:	4293      	cmp	r3, r2
 8021b78:	d800      	bhi.n	8021b7c <arm_radix4_butterfly_inverse_q31+0x2b8>
 8021b7a:	e0d9      	b.n	8021d30 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021b7c:	4694      	mov	ip, r2
 8021b7e:	4644      	mov	r4, r8
 8021b80:	4655      	mov	r5, sl
 8021b82:	4688      	mov	r8, r1
 8021b84:	9b07      	ldr	r3, [sp, #28]
 8021b86:	17db      	asrs	r3, r3, #31
 8021b88:	930c      	str	r3, [sp, #48]	@ 0x30
 8021b8a:	9b08      	ldr	r3, [sp, #32]
 8021b8c:	17db      	asrs	r3, r3, #31
 8021b8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b90:	9b05      	ldr	r3, [sp, #20]
 8021b92:	17db      	asrs	r3, r3, #31
 8021b94:	930e      	str	r3, [sp, #56]	@ 0x38
 8021b96:	9b06      	ldr	r3, [sp, #24]
 8021b98:	17db      	asrs	r3, r3, #31
 8021b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b9e:	17db      	asrs	r3, r3, #31
 8021ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8021ba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021ba4:	17db      	asrs	r3, r3, #31
 8021ba6:	9311      	str	r3, [sp, #68]	@ 0x44
 8021ba8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021baa:	4463      	add	r3, ip
 8021bac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021bae:	4643      	mov	r3, r8
 8021bb0:	4641      	mov	r1, r8
 8021bb2:	681a      	ldr	r2, [r3, #0]
 8021bb4:	464b      	mov	r3, r9
 8021bb6:	684f      	ldr	r7, [r1, #4]
 8021bb8:	4649      	mov	r1, r9
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	18d6      	adds	r6, r2, r3
 8021bbe:	1ad3      	subs	r3, r2, r3
 8021bc0:	9301      	str	r3, [sp, #4]
 8021bc2:	684b      	ldr	r3, [r1, #4]
 8021bc4:	1af9      	subs	r1, r7, r3
 8021bc6:	9102      	str	r1, [sp, #8]
 8021bc8:	6829      	ldr	r1, [r5, #0]
 8021bca:	18f8      	adds	r0, r7, r3
 8021bcc:	468c      	mov	ip, r1
 8021bce:	6827      	ldr	r7, [r4, #0]
 8021bd0:	4467      	add	r7, ip
 8021bd2:	003a      	movs	r2, r7
 8021bd4:	19f3      	adds	r3, r6, r7
 8021bd6:	4647      	mov	r7, r8
 8021bd8:	109b      	asrs	r3, r3, #2
 8021bda:	603b      	str	r3, [r7, #0]
 8021bdc:	6869      	ldr	r1, [r5, #4]
 8021bde:	6867      	ldr	r7, [r4, #4]
 8021be0:	468c      	mov	ip, r1
 8021be2:	4467      	add	r7, ip
 8021be4:	003b      	movs	r3, r7
 8021be6:	19c1      	adds	r1, r0, r7
 8021be8:	4647      	mov	r7, r8
 8021bea:	1ab6      	subs	r6, r6, r2
 8021bec:	1089      	asrs	r1, r1, #2
 8021bee:	6079      	str	r1, [r7, #4]
 8021bf0:	17f2      	asrs	r2, r6, #31
 8021bf2:	9900      	ldr	r1, [sp, #0]
 8021bf4:	4692      	mov	sl, r2
 8021bf6:	468c      	mov	ip, r1
 8021bf8:	6867      	ldr	r7, [r4, #4]
 8021bfa:	6869      	ldr	r1, [r5, #4]
 8021bfc:	44e0      	add	r8, ip
 8021bfe:	1a7f      	subs	r7, r7, r1
 8021c00:	9703      	str	r7, [sp, #12]
 8021c02:	6821      	ldr	r1, [r4, #0]
 8021c04:	682f      	ldr	r7, [r5, #0]
 8021c06:	1bc9      	subs	r1, r1, r7
 8021c08:	1ac7      	subs	r7, r0, r3
 8021c0a:	17fa      	asrs	r2, r7, #31
 8021c0c:	4693      	mov	fp, r2
 8021c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c10:	9a07      	ldr	r2, [sp, #28]
 8021c12:	9104      	str	r1, [sp, #16]
 8021c14:	0030      	movs	r0, r6
 8021c16:	4651      	mov	r1, sl
 8021c18:	f7de fcd2 	bl	80005c0 <__aeabi_lmul>
 8021c1c:	9a08      	ldr	r2, [sp, #32]
 8021c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c20:	9112      	str	r1, [sp, #72]	@ 0x48
 8021c22:	0038      	movs	r0, r7
 8021c24:	4659      	mov	r1, fp
 8021c26:	f7de fccb 	bl	80005c0 <__aeabi_lmul>
 8021c2a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021c2c:	9a07      	ldr	r2, [sp, #28]
 8021c2e:	1a41      	subs	r1, r0, r1
 8021c30:	1049      	asrs	r1, r1, #1
 8021c32:	6021      	str	r1, [r4, #0]
 8021c34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c36:	0038      	movs	r0, r7
 8021c38:	4659      	mov	r1, fp
 8021c3a:	f7de fcc1 	bl	80005c0 <__aeabi_lmul>
 8021c3e:	9a08      	ldr	r2, [sp, #32]
 8021c40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c42:	000f      	movs	r7, r1
 8021c44:	0030      	movs	r0, r6
 8021c46:	4651      	mov	r1, sl
 8021c48:	f7de fcba 	bl	80005c0 <__aeabi_lmul>
 8021c4c:	9b00      	ldr	r3, [sp, #0]
 8021c4e:	187f      	adds	r7, r7, r1
 8021c50:	469c      	mov	ip, r3
 8021c52:	107f      	asrs	r7, r7, #1
 8021c54:	6067      	str	r7, [r4, #4]
 8021c56:	9a01      	ldr	r2, [sp, #4]
 8021c58:	9f03      	ldr	r7, [sp, #12]
 8021c5a:	9802      	ldr	r0, [sp, #8]
 8021c5c:	1bd7      	subs	r7, r2, r7
 8021c5e:	17fe      	asrs	r6, r7, #31
 8021c60:	0031      	movs	r1, r6
 8021c62:	9e04      	ldr	r6, [sp, #16]
 8021c64:	4682      	mov	sl, r0
 8021c66:	4464      	add	r4, ip
 8021c68:	46b4      	mov	ip, r6
 8021c6a:	44e2      	add	sl, ip
 8021c6c:	4652      	mov	r2, sl
 8021c6e:	17d2      	asrs	r2, r2, #31
 8021c70:	4693      	mov	fp, r2
 8021c72:	0038      	movs	r0, r7
 8021c74:	9a05      	ldr	r2, [sp, #20]
 8021c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c78:	9112      	str	r1, [sp, #72]	@ 0x48
 8021c7a:	f7de fca1 	bl	80005c0 <__aeabi_lmul>
 8021c7e:	9a06      	ldr	r2, [sp, #24]
 8021c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021c82:	000e      	movs	r6, r1
 8021c84:	4650      	mov	r0, sl
 8021c86:	4659      	mov	r1, fp
 8021c88:	f7de fc9a 	bl	80005c0 <__aeabi_lmul>
 8021c8c:	4648      	mov	r0, r9
 8021c8e:	1a76      	subs	r6, r6, r1
 8021c90:	1076      	asrs	r6, r6, #1
 8021c92:	6006      	str	r6, [r0, #0]
 8021c94:	9a05      	ldr	r2, [sp, #20]
 8021c96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021c98:	4650      	mov	r0, sl
 8021c9a:	4659      	mov	r1, fp
 8021c9c:	f7de fc90 	bl	80005c0 <__aeabi_lmul>
 8021ca0:	9a06      	ldr	r2, [sp, #24]
 8021ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ca4:	000e      	movs	r6, r1
 8021ca6:	0038      	movs	r0, r7
 8021ca8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021caa:	f7de fc89 	bl	80005c0 <__aeabi_lmul>
 8021cae:	9a00      	ldr	r2, [sp, #0]
 8021cb0:	9f03      	ldr	r7, [sp, #12]
 8021cb2:	4694      	mov	ip, r2
 8021cb4:	1876      	adds	r6, r6, r1
 8021cb6:	4649      	mov	r1, r9
 8021cb8:	44e1      	add	r9, ip
 8021cba:	46bc      	mov	ip, r7
 8021cbc:	9b01      	ldr	r3, [sp, #4]
 8021cbe:	1076      	asrs	r6, r6, #1
 8021cc0:	4463      	add	r3, ip
 8021cc2:	17df      	asrs	r7, r3, #31
 8021cc4:	604e      	str	r6, [r1, #4]
 8021cc6:	46ba      	mov	sl, r7
 8021cc8:	001e      	movs	r6, r3
 8021cca:	9802      	ldr	r0, [sp, #8]
 8021ccc:	9b04      	ldr	r3, [sp, #16]
 8021cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021cd0:	1ac7      	subs	r7, r0, r3
 8021cd2:	17fb      	asrs	r3, r7, #31
 8021cd4:	469b      	mov	fp, r3
 8021cd6:	0030      	movs	r0, r6
 8021cd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cda:	4651      	mov	r1, sl
 8021cdc:	f7de fc70 	bl	80005c0 <__aeabi_lmul>
 8021ce0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ce2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021ce4:	9101      	str	r1, [sp, #4]
 8021ce6:	0038      	movs	r0, r7
 8021ce8:	4659      	mov	r1, fp
 8021cea:	f7de fc69 	bl	80005c0 <__aeabi_lmul>
 8021cee:	9801      	ldr	r0, [sp, #4]
 8021cf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021cf2:	1a41      	subs	r1, r0, r1
 8021cf4:	1049      	asrs	r1, r1, #1
 8021cf6:	6029      	str	r1, [r5, #0]
 8021cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cfa:	0038      	movs	r0, r7
 8021cfc:	4659      	mov	r1, fp
 8021cfe:	f7de fc5f 	bl	80005c0 <__aeabi_lmul>
 8021d02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d04:	000f      	movs	r7, r1
 8021d06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d08:	0030      	movs	r0, r6
 8021d0a:	4651      	mov	r1, sl
 8021d0c:	f7de fc58 	bl	80005c0 <__aeabi_lmul>
 8021d10:	187f      	adds	r7, r7, r1
 8021d12:	107f      	asrs	r7, r7, #1
 8021d14:	606f      	str	r7, [r5, #4]
 8021d16:	9a00      	ldr	r2, [sp, #0]
 8021d18:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021d1a:	4694      	mov	ip, r2
 8021d1c:	4465      	add	r5, ip
 8021d1e:	468c      	mov	ip, r1
 8021d20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021d22:	0013      	movs	r3, r2
 8021d24:	4462      	add	r2, ip
 8021d26:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021d28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021d2a:	429a      	cmp	r2, r3
 8021d2c:	d900      	bls.n	8021d30 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021d2e:	e73e      	b.n	8021bae <arm_radix4_butterfly_inverse_q31+0x2ea>
 8021d30:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021d32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021d34:	468c      	mov	ip, r1
 8021d36:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8021d38:	4462      	add	r2, ip
 8021d3a:	468c      	mov	ip, r1
 8021d3c:	9216      	str	r2, [sp, #88]	@ 0x58
 8021d3e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021d40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021d44:	4462      	add	r2, ip
 8021d46:	468c      	mov	ip, r1
 8021d48:	9219      	str	r2, [sp, #100]	@ 0x64
 8021d4a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021d4c:	3301      	adds	r3, #1
 8021d4e:	4462      	add	r2, ip
 8021d50:	9218      	str	r2, [sp, #96]	@ 0x60
 8021d52:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021d54:	9315      	str	r3, [sp, #84]	@ 0x54
 8021d56:	3208      	adds	r2, #8
 8021d58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8021d5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	d800      	bhi.n	8021d62 <arm_radix4_butterfly_inverse_q31+0x49e>
 8021d60:	e6ec      	b.n	8021b3c <arm_radix4_butterfly_inverse_q31+0x278>
 8021d62:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021d64:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021d66:	009b      	lsls	r3, r3, #2
 8021d68:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021d6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021d6c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021d6e:	089b      	lsrs	r3, r3, #2
 8021d70:	9320      	str	r3, [sp, #128]	@ 0x80
 8021d72:	2b04      	cmp	r3, #4
 8021d74:	d900      	bls.n	8021d78 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8021d76:	e6c5      	b.n	8021b04 <arm_radix4_butterfly_inverse_q31+0x240>
 8021d78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021d7a:	469a      	mov	sl, r3
 8021d7c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021d7e:	681a      	ldr	r2, [r3, #0]
 8021d80:	6918      	ldr	r0, [r3, #16]
 8021d82:	4691      	mov	r9, r2
 8021d84:	464c      	mov	r4, r9
 8021d86:	4680      	mov	r8, r0
 8021d88:	69de      	ldr	r6, [r3, #28]
 8021d8a:	689d      	ldr	r5, [r3, #8]
 8021d8c:	46b4      	mov	ip, r6
 8021d8e:	6998      	ldr	r0, [r3, #24]
 8021d90:	1964      	adds	r4, r4, r5
 8021d92:	6859      	ldr	r1, [r3, #4]
 8021d94:	68da      	ldr	r2, [r3, #12]
 8021d96:	4444      	add	r4, r8
 8021d98:	695f      	ldr	r7, [r3, #20]
 8021d9a:	1824      	adds	r4, r4, r0
 8021d9c:	601c      	str	r4, [r3, #0]
 8021d9e:	188c      	adds	r4, r1, r2
 8021da0:	19e4      	adds	r4, r4, r7
 8021da2:	4464      	add	r4, ip
 8021da4:	605c      	str	r4, [r3, #4]
 8021da6:	464c      	mov	r4, r9
 8021da8:	1b64      	subs	r4, r4, r5
 8021daa:	4444      	add	r4, r8
 8021dac:	1a24      	subs	r4, r4, r0
 8021dae:	609c      	str	r4, [r3, #8]
 8021db0:	1a8c      	subs	r4, r1, r2
 8021db2:	19e4      	adds	r4, r4, r7
 8021db4:	1ba4      	subs	r4, r4, r6
 8021db6:	60dc      	str	r4, [r3, #12]
 8021db8:	464c      	mov	r4, r9
 8021dba:	4646      	mov	r6, r8
 8021dbc:	1aa4      	subs	r4, r4, r2
 8021dbe:	1ba4      	subs	r4, r4, r6
 8021dc0:	4464      	add	r4, ip
 8021dc2:	611c      	str	r4, [r3, #16]
 8021dc4:	194c      	adds	r4, r1, r5
 8021dc6:	1be4      	subs	r4, r4, r7
 8021dc8:	1a24      	subs	r4, r4, r0
 8021dca:	615c      	str	r4, [r3, #20]
 8021dcc:	4644      	mov	r4, r8
 8021dce:	4666      	mov	r6, ip
 8021dd0:	444a      	add	r2, r9
 8021dd2:	1b12      	subs	r2, r2, r4
 8021dd4:	1b92      	subs	r2, r2, r6
 8021dd6:	619a      	str	r2, [r3, #24]
 8021dd8:	1b4a      	subs	r2, r1, r5
 8021dda:	1bd1      	subs	r1, r2, r7
 8021ddc:	2201      	movs	r2, #1
 8021dde:	4252      	negs	r2, r2
 8021de0:	4694      	mov	ip, r2
 8021de2:	44e2      	add	sl, ip
 8021de4:	4652      	mov	r2, sl
 8021de6:	1809      	adds	r1, r1, r0
 8021de8:	61d9      	str	r1, [r3, #28]
 8021dea:	3320      	adds	r3, #32
 8021dec:	2a00      	cmp	r2, #0
 8021dee:	d1c6      	bne.n	8021d7e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8021df0:	b027      	add	sp, #156	@ 0x9c
 8021df2:	bc3c      	pop	{r2, r3, r4, r5}
 8021df4:	4690      	mov	r8, r2
 8021df6:	4699      	mov	r9, r3
 8021df8:	46a2      	mov	sl, r4
 8021dfa:	46ab      	mov	fp, r5
 8021dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dfe:	469a      	mov	sl, r3
 8021e00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e02:	e7bc      	b.n	8021d7e <arm_radix4_butterfly_inverse_q31+0x4ba>

08021e04 <arm_cmplx_mag_squared_q31>:
 8021e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e06:	464f      	mov	r7, r9
 8021e08:	4646      	mov	r6, r8
 8021e0a:	0004      	movs	r4, r0
 8021e0c:	b4c0      	push	{r6, r7}
 8021e0e:	0016      	movs	r6, r2
 8021e10:	000f      	movs	r7, r1
 8021e12:	2a00      	cmp	r2, #0
 8021e14:	d018      	beq.n	8021e48 <arm_cmplx_mag_squared_q31+0x44>
 8021e16:	6823      	ldr	r3, [r4, #0]
 8021e18:	6822      	ldr	r2, [r4, #0]
 8021e1a:	17d9      	asrs	r1, r3, #31
 8021e1c:	6863      	ldr	r3, [r4, #4]
 8021e1e:	0010      	movs	r0, r2
 8021e20:	4698      	mov	r8, r3
 8021e22:	17db      	asrs	r3, r3, #31
 8021e24:	4699      	mov	r9, r3
 8021e26:	000b      	movs	r3, r1
 8021e28:	f7de fbca 	bl	80005c0 <__aeabi_lmul>
 8021e2c:	4642      	mov	r2, r8
 8021e2e:	104d      	asrs	r5, r1, #1
 8021e30:	464b      	mov	r3, r9
 8021e32:	4640      	mov	r0, r8
 8021e34:	4649      	mov	r1, r9
 8021e36:	f7de fbc3 	bl	80005c0 <__aeabi_lmul>
 8021e3a:	1049      	asrs	r1, r1, #1
 8021e3c:	1869      	adds	r1, r5, r1
 8021e3e:	3e01      	subs	r6, #1
 8021e40:	c702      	stmia	r7!, {r1}
 8021e42:	3408      	adds	r4, #8
 8021e44:	2e00      	cmp	r6, #0
 8021e46:	d1e6      	bne.n	8021e16 <arm_cmplx_mag_squared_q31+0x12>
 8021e48:	bc0c      	pop	{r2, r3}
 8021e4a:	4690      	mov	r8, r2
 8021e4c:	4699      	mov	r9, r3
 8021e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021e50 <arm_mult_q31>:
 8021e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e52:	4646      	mov	r6, r8
 8021e54:	464f      	mov	r7, r9
 8021e56:	4690      	mov	r8, r2
 8021e58:	b4c0      	push	{r6, r7}
 8021e5a:	001d      	movs	r5, r3
 8021e5c:	0006      	movs	r6, r0
 8021e5e:	000f      	movs	r7, r1
 8021e60:	2400      	movs	r4, #0
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d020      	beq.n	8021ea8 <arm_mult_q31+0x58>
 8021e66:	4b12      	ldr	r3, [pc, #72]	@ (8021eb0 <arm_mult_q31+0x60>)
 8021e68:	4699      	mov	r9, r3
 8021e6a:	e007      	b.n	8021e7c <arm_mult_q31+0x2c>
 8021e6c:	464b      	mov	r3, r9
 8021e6e:	4059      	eors	r1, r3
 8021e70:	4643      	mov	r3, r8
 8021e72:	3d01      	subs	r5, #1
 8021e74:	5119      	str	r1, [r3, r4]
 8021e76:	3404      	adds	r4, #4
 8021e78:	2d00      	cmp	r5, #0
 8021e7a:	d015      	beq.n	8021ea8 <arm_mult_q31+0x58>
 8021e7c:	5933      	ldr	r3, [r6, r4]
 8021e7e:	593a      	ldr	r2, [r7, r4]
 8021e80:	17d9      	asrs	r1, r3, #31
 8021e82:	593b      	ldr	r3, [r7, r4]
 8021e84:	5930      	ldr	r0, [r6, r4]
 8021e86:	17db      	asrs	r3, r3, #31
 8021e88:	f7de fb9a 	bl	80005c0 <__aeabi_lmul>
 8021e8c:	004b      	lsls	r3, r1, #1
 8021e8e:	0fc0      	lsrs	r0, r0, #31
 8021e90:	4318      	orrs	r0, r3
 8021e92:	17c9      	asrs	r1, r1, #31
 8021e94:	17c3      	asrs	r3, r0, #31
 8021e96:	428b      	cmp	r3, r1
 8021e98:	d1e8      	bne.n	8021e6c <arm_mult_q31+0x1c>
 8021e9a:	0001      	movs	r1, r0
 8021e9c:	4643      	mov	r3, r8
 8021e9e:	3d01      	subs	r5, #1
 8021ea0:	5119      	str	r1, [r3, r4]
 8021ea2:	3404      	adds	r4, #4
 8021ea4:	2d00      	cmp	r5, #0
 8021ea6:	d1e9      	bne.n	8021e7c <arm_mult_q31+0x2c>
 8021ea8:	bc0c      	pop	{r2, r3}
 8021eaa:	4690      	mov	r8, r2
 8021eac:	4699      	mov	r9, r3
 8021eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021eb0:	7fffffff 	.word	0x7fffffff

08021eb4 <arm_add_q31>:
 8021eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021eb6:	465f      	mov	r7, fp
 8021eb8:	4656      	mov	r6, sl
 8021eba:	464d      	mov	r5, r9
 8021ebc:	4644      	mov	r4, r8
 8021ebe:	b4f0      	push	{r4, r5, r6, r7}
 8021ec0:	4693      	mov	fp, r2
 8021ec2:	b083      	sub	sp, #12
 8021ec4:	4681      	mov	r9, r0
 8021ec6:	468a      	mov	sl, r1
 8021ec8:	4698      	mov	r8, r3
 8021eca:	2200      	movs	r2, #0
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d020      	beq.n	8021f12 <arm_add_q31+0x5e>
 8021ed0:	4649      	mov	r1, r9
 8021ed2:	4653      	mov	r3, sl
 8021ed4:	588e      	ldr	r6, [r1, r2]
 8021ed6:	589b      	ldr	r3, [r3, r2]
 8021ed8:	17f7      	asrs	r7, r6, #31
 8021eda:	001c      	movs	r4, r3
 8021edc:	0030      	movs	r0, r6
 8021ede:	0039      	movs	r1, r7
 8021ee0:	17dd      	asrs	r5, r3, #31
 8021ee2:	46b4      	mov	ip, r6
 8021ee4:	1900      	adds	r0, r0, r4
 8021ee6:	4169      	adcs	r1, r5
 8021ee8:	4463      	add	r3, ip
 8021eea:	9000      	str	r0, [sp, #0]
 8021eec:	9101      	str	r1, [sp, #4]
 8021eee:	17d9      	asrs	r1, r3, #31
 8021ef0:	468c      	mov	ip, r1
 8021ef2:	9901      	ldr	r1, [sp, #4]
 8021ef4:	458c      	cmp	ip, r1
 8021ef6:	d002      	beq.n	8021efe <arm_add_q31+0x4a>
 8021ef8:	17cb      	asrs	r3, r1, #31
 8021efa:	4909      	ldr	r1, [pc, #36]	@ (8021f20 <arm_add_q31+0x6c>)
 8021efc:	404b      	eors	r3, r1
 8021efe:	4659      	mov	r1, fp
 8021f00:	508b      	str	r3, [r1, r2]
 8021f02:	2301      	movs	r3, #1
 8021f04:	425b      	negs	r3, r3
 8021f06:	469c      	mov	ip, r3
 8021f08:	44e0      	add	r8, ip
 8021f0a:	4643      	mov	r3, r8
 8021f0c:	3204      	adds	r2, #4
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d1de      	bne.n	8021ed0 <arm_add_q31+0x1c>
 8021f12:	b003      	add	sp, #12
 8021f14:	bc3c      	pop	{r2, r3, r4, r5}
 8021f16:	4690      	mov	r8, r2
 8021f18:	4699      	mov	r9, r3
 8021f1a:	46a2      	mov	sl, r4
 8021f1c:	46ab      	mov	fp, r5
 8021f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f20:	7fffffff 	.word	0x7fffffff

08021f24 <atof>:
 8021f24:	b510      	push	{r4, lr}
 8021f26:	2100      	movs	r1, #0
 8021f28:	f000 fe12 	bl	8022b50 <strtod>
 8021f2c:	bd10      	pop	{r4, pc}

08021f2e <atoi>:
 8021f2e:	b510      	push	{r4, lr}
 8021f30:	220a      	movs	r2, #10
 8021f32:	2100      	movs	r1, #0
 8021f34:	f000 fea4 	bl	8022c80 <strtol>
 8021f38:	bd10      	pop	{r4, pc}
	...

08021f3c <sulp>:
 8021f3c:	b570      	push	{r4, r5, r6, lr}
 8021f3e:	0016      	movs	r6, r2
 8021f40:	000d      	movs	r5, r1
 8021f42:	f003 fd15 	bl	8025970 <__ulp>
 8021f46:	2e00      	cmp	r6, #0
 8021f48:	d00d      	beq.n	8021f66 <sulp+0x2a>
 8021f4a:	236b      	movs	r3, #107	@ 0x6b
 8021f4c:	006a      	lsls	r2, r5, #1
 8021f4e:	0d52      	lsrs	r2, r2, #21
 8021f50:	1a9b      	subs	r3, r3, r2
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	dd07      	ble.n	8021f66 <sulp+0x2a>
 8021f56:	2400      	movs	r4, #0
 8021f58:	4a03      	ldr	r2, [pc, #12]	@ (8021f68 <sulp+0x2c>)
 8021f5a:	051b      	lsls	r3, r3, #20
 8021f5c:	189d      	adds	r5, r3, r2
 8021f5e:	002b      	movs	r3, r5
 8021f60:	0022      	movs	r2, r4
 8021f62:	f7e0 fb6b 	bl	800263c <__aeabi_dmul>
 8021f66:	bd70      	pop	{r4, r5, r6, pc}
 8021f68:	3ff00000 	.word	0x3ff00000

08021f6c <_strtod_l>:
 8021f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f6e:	b0a3      	sub	sp, #140	@ 0x8c
 8021f70:	921b      	str	r2, [sp, #108]	@ 0x6c
 8021f72:	2200      	movs	r2, #0
 8021f74:	2600      	movs	r6, #0
 8021f76:	2700      	movs	r7, #0
 8021f78:	9005      	str	r0, [sp, #20]
 8021f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f7c:	921e      	str	r2, [sp, #120]	@ 0x78
 8021f7e:	911d      	str	r1, [sp, #116]	@ 0x74
 8021f80:	780a      	ldrb	r2, [r1, #0]
 8021f82:	2a2b      	cmp	r2, #43	@ 0x2b
 8021f84:	d053      	beq.n	802202e <_strtod_l+0xc2>
 8021f86:	d83f      	bhi.n	8022008 <_strtod_l+0x9c>
 8021f88:	2a0d      	cmp	r2, #13
 8021f8a:	d839      	bhi.n	8022000 <_strtod_l+0x94>
 8021f8c:	2a08      	cmp	r2, #8
 8021f8e:	d839      	bhi.n	8022004 <_strtod_l+0x98>
 8021f90:	2a00      	cmp	r2, #0
 8021f92:	d042      	beq.n	802201a <_strtod_l+0xae>
 8021f94:	2200      	movs	r2, #0
 8021f96:	9212      	str	r2, [sp, #72]	@ 0x48
 8021f98:	2100      	movs	r1, #0
 8021f9a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8021f9c:	910c      	str	r1, [sp, #48]	@ 0x30
 8021f9e:	782a      	ldrb	r2, [r5, #0]
 8021fa0:	2a30      	cmp	r2, #48	@ 0x30
 8021fa2:	d000      	beq.n	8021fa6 <_strtod_l+0x3a>
 8021fa4:	e083      	b.n	80220ae <_strtod_l+0x142>
 8021fa6:	786a      	ldrb	r2, [r5, #1]
 8021fa8:	3120      	adds	r1, #32
 8021faa:	438a      	bics	r2, r1
 8021fac:	2a58      	cmp	r2, #88	@ 0x58
 8021fae:	d000      	beq.n	8021fb2 <_strtod_l+0x46>
 8021fb0:	e073      	b.n	802209a <_strtod_l+0x12e>
 8021fb2:	9302      	str	r3, [sp, #8]
 8021fb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021fb6:	4a95      	ldr	r2, [pc, #596]	@ (802220c <_strtod_l+0x2a0>)
 8021fb8:	9301      	str	r3, [sp, #4]
 8021fba:	ab1e      	add	r3, sp, #120	@ 0x78
 8021fbc:	9300      	str	r3, [sp, #0]
 8021fbe:	9805      	ldr	r0, [sp, #20]
 8021fc0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021fc2:	a91d      	add	r1, sp, #116	@ 0x74
 8021fc4:	f002 fd84 	bl	8024ad0 <__gethex>
 8021fc8:	230f      	movs	r3, #15
 8021fca:	0002      	movs	r2, r0
 8021fcc:	401a      	ands	r2, r3
 8021fce:	0004      	movs	r4, r0
 8021fd0:	9206      	str	r2, [sp, #24]
 8021fd2:	4218      	tst	r0, r3
 8021fd4:	d005      	beq.n	8021fe2 <_strtod_l+0x76>
 8021fd6:	2a06      	cmp	r2, #6
 8021fd8:	d12b      	bne.n	8022032 <_strtod_l+0xc6>
 8021fda:	2300      	movs	r3, #0
 8021fdc:	3501      	adds	r5, #1
 8021fde:	951d      	str	r5, [sp, #116]	@ 0x74
 8021fe0:	9312      	str	r3, [sp, #72]	@ 0x48
 8021fe2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d002      	beq.n	8021fee <_strtod_l+0x82>
 8021fe8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021fea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021fec:	6013      	str	r3, [r2, #0]
 8021fee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d019      	beq.n	8022028 <_strtod_l+0xbc>
 8021ff4:	2380      	movs	r3, #128	@ 0x80
 8021ff6:	0030      	movs	r0, r6
 8021ff8:	061b      	lsls	r3, r3, #24
 8021ffa:	18f9      	adds	r1, r7, r3
 8021ffc:	b023      	add	sp, #140	@ 0x8c
 8021ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022000:	2a20      	cmp	r2, #32
 8022002:	d1c7      	bne.n	8021f94 <_strtod_l+0x28>
 8022004:	3101      	adds	r1, #1
 8022006:	e7ba      	b.n	8021f7e <_strtod_l+0x12>
 8022008:	2a2d      	cmp	r2, #45	@ 0x2d
 802200a:	d1c3      	bne.n	8021f94 <_strtod_l+0x28>
 802200c:	3a2c      	subs	r2, #44	@ 0x2c
 802200e:	9212      	str	r2, [sp, #72]	@ 0x48
 8022010:	1c4a      	adds	r2, r1, #1
 8022012:	921d      	str	r2, [sp, #116]	@ 0x74
 8022014:	784a      	ldrb	r2, [r1, #1]
 8022016:	2a00      	cmp	r2, #0
 8022018:	d1be      	bne.n	8021f98 <_strtod_l+0x2c>
 802201a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802201c:	931d      	str	r3, [sp, #116]	@ 0x74
 802201e:	2300      	movs	r3, #0
 8022020:	9312      	str	r3, [sp, #72]	@ 0x48
 8022022:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022024:	2b00      	cmp	r3, #0
 8022026:	d1df      	bne.n	8021fe8 <_strtod_l+0x7c>
 8022028:	0030      	movs	r0, r6
 802202a:	0039      	movs	r1, r7
 802202c:	e7e6      	b.n	8021ffc <_strtod_l+0x90>
 802202e:	2200      	movs	r2, #0
 8022030:	e7ed      	b.n	802200e <_strtod_l+0xa2>
 8022032:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022034:	2a00      	cmp	r2, #0
 8022036:	d007      	beq.n	8022048 <_strtod_l+0xdc>
 8022038:	2135      	movs	r1, #53	@ 0x35
 802203a:	a820      	add	r0, sp, #128	@ 0x80
 802203c:	f003 fd8e 	bl	8025b5c <__copybits>
 8022040:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022042:	9805      	ldr	r0, [sp, #20]
 8022044:	f003 f948 	bl	80252d8 <_Bfree>
 8022048:	9806      	ldr	r0, [sp, #24]
 802204a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802204c:	3801      	subs	r0, #1
 802204e:	2804      	cmp	r0, #4
 8022050:	d806      	bhi.n	8022060 <_strtod_l+0xf4>
 8022052:	f7de f893 	bl	800017c <__gnu_thumb1_case_uqi>
 8022056:	0312      	.short	0x0312
 8022058:	1e1c      	.short	0x1e1c
 802205a:	12          	.byte	0x12
 802205b:	00          	.byte	0x00
 802205c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802205e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8022060:	05e4      	lsls	r4, r4, #23
 8022062:	d502      	bpl.n	802206a <_strtod_l+0xfe>
 8022064:	2380      	movs	r3, #128	@ 0x80
 8022066:	061b      	lsls	r3, r3, #24
 8022068:	431f      	orrs	r7, r3
 802206a:	4b69      	ldr	r3, [pc, #420]	@ (8022210 <_strtod_l+0x2a4>)
 802206c:	423b      	tst	r3, r7
 802206e:	d1b8      	bne.n	8021fe2 <_strtod_l+0x76>
 8022070:	f001 fdb2 	bl	8023bd8 <__errno>
 8022074:	2322      	movs	r3, #34	@ 0x22
 8022076:	6003      	str	r3, [r0, #0]
 8022078:	e7b3      	b.n	8021fe2 <_strtod_l+0x76>
 802207a:	4966      	ldr	r1, [pc, #408]	@ (8022214 <_strtod_l+0x2a8>)
 802207c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802207e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8022080:	400a      	ands	r2, r1
 8022082:	4965      	ldr	r1, [pc, #404]	@ (8022218 <_strtod_l+0x2ac>)
 8022084:	185b      	adds	r3, r3, r1
 8022086:	051b      	lsls	r3, r3, #20
 8022088:	431a      	orrs	r2, r3
 802208a:	0017      	movs	r7, r2
 802208c:	e7e8      	b.n	8022060 <_strtod_l+0xf4>
 802208e:	4f60      	ldr	r7, [pc, #384]	@ (8022210 <_strtod_l+0x2a4>)
 8022090:	e7e6      	b.n	8022060 <_strtod_l+0xf4>
 8022092:	2601      	movs	r6, #1
 8022094:	4f61      	ldr	r7, [pc, #388]	@ (802221c <_strtod_l+0x2b0>)
 8022096:	4276      	negs	r6, r6
 8022098:	e7e2      	b.n	8022060 <_strtod_l+0xf4>
 802209a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802209c:	1c5a      	adds	r2, r3, #1
 802209e:	921d      	str	r2, [sp, #116]	@ 0x74
 80220a0:	785b      	ldrb	r3, [r3, #1]
 80220a2:	2b30      	cmp	r3, #48	@ 0x30
 80220a4:	d0f9      	beq.n	802209a <_strtod_l+0x12e>
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d09b      	beq.n	8021fe2 <_strtod_l+0x76>
 80220aa:	2301      	movs	r3, #1
 80220ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80220ae:	2500      	movs	r5, #0
 80220b0:	220a      	movs	r2, #10
 80220b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80220b4:	950d      	str	r5, [sp, #52]	@ 0x34
 80220b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80220b8:	9508      	str	r5, [sp, #32]
 80220ba:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80220bc:	7804      	ldrb	r4, [r0, #0]
 80220be:	0023      	movs	r3, r4
 80220c0:	3b30      	subs	r3, #48	@ 0x30
 80220c2:	b2d9      	uxtb	r1, r3
 80220c4:	2909      	cmp	r1, #9
 80220c6:	d927      	bls.n	8022118 <_strtod_l+0x1ac>
 80220c8:	2201      	movs	r2, #1
 80220ca:	4955      	ldr	r1, [pc, #340]	@ (8022220 <_strtod_l+0x2b4>)
 80220cc:	f001 fcf6 	bl	8023abc <strncmp>
 80220d0:	2800      	cmp	r0, #0
 80220d2:	d031      	beq.n	8022138 <_strtod_l+0x1cc>
 80220d4:	2000      	movs	r0, #0
 80220d6:	0023      	movs	r3, r4
 80220d8:	4684      	mov	ip, r0
 80220da:	9a08      	ldr	r2, [sp, #32]
 80220dc:	900e      	str	r0, [sp, #56]	@ 0x38
 80220de:	9206      	str	r2, [sp, #24]
 80220e0:	2220      	movs	r2, #32
 80220e2:	0019      	movs	r1, r3
 80220e4:	4391      	bics	r1, r2
 80220e6:	000a      	movs	r2, r1
 80220e8:	2100      	movs	r1, #0
 80220ea:	9107      	str	r1, [sp, #28]
 80220ec:	2a45      	cmp	r2, #69	@ 0x45
 80220ee:	d000      	beq.n	80220f2 <_strtod_l+0x186>
 80220f0:	e0c0      	b.n	8022274 <_strtod_l+0x308>
 80220f2:	9b06      	ldr	r3, [sp, #24]
 80220f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80220f6:	4303      	orrs	r3, r0
 80220f8:	4313      	orrs	r3, r2
 80220fa:	428b      	cmp	r3, r1
 80220fc:	d08d      	beq.n	802201a <_strtod_l+0xae>
 80220fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022100:	9309      	str	r3, [sp, #36]	@ 0x24
 8022102:	3301      	adds	r3, #1
 8022104:	931d      	str	r3, [sp, #116]	@ 0x74
 8022106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022108:	785b      	ldrb	r3, [r3, #1]
 802210a:	2b2b      	cmp	r3, #43	@ 0x2b
 802210c:	d070      	beq.n	80221f0 <_strtod_l+0x284>
 802210e:	000c      	movs	r4, r1
 8022110:	2b2d      	cmp	r3, #45	@ 0x2d
 8022112:	d173      	bne.n	80221fc <_strtod_l+0x290>
 8022114:	2401      	movs	r4, #1
 8022116:	e06c      	b.n	80221f2 <_strtod_l+0x286>
 8022118:	9908      	ldr	r1, [sp, #32]
 802211a:	2908      	cmp	r1, #8
 802211c:	dc09      	bgt.n	8022132 <_strtod_l+0x1c6>
 802211e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022120:	4351      	muls	r1, r2
 8022122:	185b      	adds	r3, r3, r1
 8022124:	930d      	str	r3, [sp, #52]	@ 0x34
 8022126:	9b08      	ldr	r3, [sp, #32]
 8022128:	3001      	adds	r0, #1
 802212a:	3301      	adds	r3, #1
 802212c:	9308      	str	r3, [sp, #32]
 802212e:	901d      	str	r0, [sp, #116]	@ 0x74
 8022130:	e7c3      	b.n	80220ba <_strtod_l+0x14e>
 8022132:	4355      	muls	r5, r2
 8022134:	195d      	adds	r5, r3, r5
 8022136:	e7f6      	b.n	8022126 <_strtod_l+0x1ba>
 8022138:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802213a:	1c5a      	adds	r2, r3, #1
 802213c:	921d      	str	r2, [sp, #116]	@ 0x74
 802213e:	9a08      	ldr	r2, [sp, #32]
 8022140:	785b      	ldrb	r3, [r3, #1]
 8022142:	2a00      	cmp	r2, #0
 8022144:	d03a      	beq.n	80221bc <_strtod_l+0x250>
 8022146:	900e      	str	r0, [sp, #56]	@ 0x38
 8022148:	9206      	str	r2, [sp, #24]
 802214a:	001a      	movs	r2, r3
 802214c:	3a30      	subs	r2, #48	@ 0x30
 802214e:	2a09      	cmp	r2, #9
 8022150:	d912      	bls.n	8022178 <_strtod_l+0x20c>
 8022152:	2201      	movs	r2, #1
 8022154:	4694      	mov	ip, r2
 8022156:	e7c3      	b.n	80220e0 <_strtod_l+0x174>
 8022158:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802215a:	3001      	adds	r0, #1
 802215c:	1c5a      	adds	r2, r3, #1
 802215e:	921d      	str	r2, [sp, #116]	@ 0x74
 8022160:	785b      	ldrb	r3, [r3, #1]
 8022162:	2b30      	cmp	r3, #48	@ 0x30
 8022164:	d0f8      	beq.n	8022158 <_strtod_l+0x1ec>
 8022166:	001a      	movs	r2, r3
 8022168:	3a31      	subs	r2, #49	@ 0x31
 802216a:	2a08      	cmp	r2, #8
 802216c:	d83b      	bhi.n	80221e6 <_strtod_l+0x27a>
 802216e:	900e      	str	r0, [sp, #56]	@ 0x38
 8022170:	2000      	movs	r0, #0
 8022172:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022174:	9006      	str	r0, [sp, #24]
 8022176:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022178:	001a      	movs	r2, r3
 802217a:	1c41      	adds	r1, r0, #1
 802217c:	3a30      	subs	r2, #48	@ 0x30
 802217e:	2b30      	cmp	r3, #48	@ 0x30
 8022180:	d016      	beq.n	80221b0 <_strtod_l+0x244>
 8022182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022184:	185b      	adds	r3, r3, r1
 8022186:	930e      	str	r3, [sp, #56]	@ 0x38
 8022188:	9b06      	ldr	r3, [sp, #24]
 802218a:	210a      	movs	r1, #10
 802218c:	469c      	mov	ip, r3
 802218e:	4484      	add	ip, r0
 8022190:	459c      	cmp	ip, r3
 8022192:	d115      	bne.n	80221c0 <_strtod_l+0x254>
 8022194:	9906      	ldr	r1, [sp, #24]
 8022196:	9b06      	ldr	r3, [sp, #24]
 8022198:	3101      	adds	r1, #1
 802219a:	1809      	adds	r1, r1, r0
 802219c:	181b      	adds	r3, r3, r0
 802219e:	9106      	str	r1, [sp, #24]
 80221a0:	2b08      	cmp	r3, #8
 80221a2:	dc19      	bgt.n	80221d8 <_strtod_l+0x26c>
 80221a4:	230a      	movs	r3, #10
 80221a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80221a8:	434b      	muls	r3, r1
 80221aa:	2100      	movs	r1, #0
 80221ac:	18d3      	adds	r3, r2, r3
 80221ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80221b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221b2:	0008      	movs	r0, r1
 80221b4:	1c5a      	adds	r2, r3, #1
 80221b6:	921d      	str	r2, [sp, #116]	@ 0x74
 80221b8:	785b      	ldrb	r3, [r3, #1]
 80221ba:	e7c6      	b.n	802214a <_strtod_l+0x1de>
 80221bc:	9808      	ldr	r0, [sp, #32]
 80221be:	e7d0      	b.n	8022162 <_strtod_l+0x1f6>
 80221c0:	1c5c      	adds	r4, r3, #1
 80221c2:	2b08      	cmp	r3, #8
 80221c4:	dc04      	bgt.n	80221d0 <_strtod_l+0x264>
 80221c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80221c8:	434b      	muls	r3, r1
 80221ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80221cc:	0023      	movs	r3, r4
 80221ce:	e7df      	b.n	8022190 <_strtod_l+0x224>
 80221d0:	2c10      	cmp	r4, #16
 80221d2:	dcfb      	bgt.n	80221cc <_strtod_l+0x260>
 80221d4:	434d      	muls	r5, r1
 80221d6:	e7f9      	b.n	80221cc <_strtod_l+0x260>
 80221d8:	2100      	movs	r1, #0
 80221da:	2b0f      	cmp	r3, #15
 80221dc:	dce8      	bgt.n	80221b0 <_strtod_l+0x244>
 80221de:	230a      	movs	r3, #10
 80221e0:	435d      	muls	r5, r3
 80221e2:	1955      	adds	r5, r2, r5
 80221e4:	e7e4      	b.n	80221b0 <_strtod_l+0x244>
 80221e6:	2200      	movs	r2, #0
 80221e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80221ea:	9206      	str	r2, [sp, #24]
 80221ec:	3201      	adds	r2, #1
 80221ee:	e7b1      	b.n	8022154 <_strtod_l+0x1e8>
 80221f0:	2400      	movs	r4, #0
 80221f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221f4:	3302      	adds	r3, #2
 80221f6:	931d      	str	r3, [sp, #116]	@ 0x74
 80221f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221fa:	789b      	ldrb	r3, [r3, #2]
 80221fc:	001a      	movs	r2, r3
 80221fe:	3a30      	subs	r2, #48	@ 0x30
 8022200:	2a09      	cmp	r2, #9
 8022202:	d913      	bls.n	802222c <_strtod_l+0x2c0>
 8022204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022206:	921d      	str	r2, [sp, #116]	@ 0x74
 8022208:	2200      	movs	r2, #0
 802220a:	e032      	b.n	8022272 <_strtod_l+0x306>
 802220c:	0802b724 	.word	0x0802b724
 8022210:	7ff00000 	.word	0x7ff00000
 8022214:	ffefffff 	.word	0xffefffff
 8022218:	00000433 	.word	0x00000433
 802221c:	7fffffff 	.word	0x7fffffff
 8022220:	0802b70c 	.word	0x0802b70c
 8022224:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022226:	1c5a      	adds	r2, r3, #1
 8022228:	921d      	str	r2, [sp, #116]	@ 0x74
 802222a:	785b      	ldrb	r3, [r3, #1]
 802222c:	2b30      	cmp	r3, #48	@ 0x30
 802222e:	d0f9      	beq.n	8022224 <_strtod_l+0x2b8>
 8022230:	2200      	movs	r2, #0
 8022232:	9207      	str	r2, [sp, #28]
 8022234:	001a      	movs	r2, r3
 8022236:	3a31      	subs	r2, #49	@ 0x31
 8022238:	2a08      	cmp	r2, #8
 802223a:	d81b      	bhi.n	8022274 <_strtod_l+0x308>
 802223c:	3b30      	subs	r3, #48	@ 0x30
 802223e:	9310      	str	r3, [sp, #64]	@ 0x40
 8022240:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022242:	9307      	str	r3, [sp, #28]
 8022244:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022246:	1c59      	adds	r1, r3, #1
 8022248:	911d      	str	r1, [sp, #116]	@ 0x74
 802224a:	785b      	ldrb	r3, [r3, #1]
 802224c:	001a      	movs	r2, r3
 802224e:	3a30      	subs	r2, #48	@ 0x30
 8022250:	2a09      	cmp	r2, #9
 8022252:	d93a      	bls.n	80222ca <_strtod_l+0x35e>
 8022254:	9a07      	ldr	r2, [sp, #28]
 8022256:	1a8a      	subs	r2, r1, r2
 8022258:	49b4      	ldr	r1, [pc, #720]	@ (802252c <_strtod_l+0x5c0>)
 802225a:	9107      	str	r1, [sp, #28]
 802225c:	2a08      	cmp	r2, #8
 802225e:	dc04      	bgt.n	802226a <_strtod_l+0x2fe>
 8022260:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022262:	9207      	str	r2, [sp, #28]
 8022264:	428a      	cmp	r2, r1
 8022266:	dd00      	ble.n	802226a <_strtod_l+0x2fe>
 8022268:	9107      	str	r1, [sp, #28]
 802226a:	2c00      	cmp	r4, #0
 802226c:	d002      	beq.n	8022274 <_strtod_l+0x308>
 802226e:	9a07      	ldr	r2, [sp, #28]
 8022270:	4252      	negs	r2, r2
 8022272:	9207      	str	r2, [sp, #28]
 8022274:	9a06      	ldr	r2, [sp, #24]
 8022276:	2a00      	cmp	r2, #0
 8022278:	d14d      	bne.n	8022316 <_strtod_l+0x3aa>
 802227a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802227c:	4310      	orrs	r0, r2
 802227e:	d000      	beq.n	8022282 <_strtod_l+0x316>
 8022280:	e6af      	b.n	8021fe2 <_strtod_l+0x76>
 8022282:	4662      	mov	r2, ip
 8022284:	2a00      	cmp	r2, #0
 8022286:	d000      	beq.n	802228a <_strtod_l+0x31e>
 8022288:	e6c7      	b.n	802201a <_strtod_l+0xae>
 802228a:	2b69      	cmp	r3, #105	@ 0x69
 802228c:	d027      	beq.n	80222de <_strtod_l+0x372>
 802228e:	dc23      	bgt.n	80222d8 <_strtod_l+0x36c>
 8022290:	2b49      	cmp	r3, #73	@ 0x49
 8022292:	d024      	beq.n	80222de <_strtod_l+0x372>
 8022294:	2b4e      	cmp	r3, #78	@ 0x4e
 8022296:	d000      	beq.n	802229a <_strtod_l+0x32e>
 8022298:	e6bf      	b.n	802201a <_strtod_l+0xae>
 802229a:	49a5      	ldr	r1, [pc, #660]	@ (8022530 <_strtod_l+0x5c4>)
 802229c:	a81d      	add	r0, sp, #116	@ 0x74
 802229e:	f002 fe4d 	bl	8024f3c <__match>
 80222a2:	2800      	cmp	r0, #0
 80222a4:	d100      	bne.n	80222a8 <_strtod_l+0x33c>
 80222a6:	e6b8      	b.n	802201a <_strtod_l+0xae>
 80222a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222aa:	781b      	ldrb	r3, [r3, #0]
 80222ac:	2b28      	cmp	r3, #40	@ 0x28
 80222ae:	d12c      	bne.n	802230a <_strtod_l+0x39e>
 80222b0:	49a0      	ldr	r1, [pc, #640]	@ (8022534 <_strtod_l+0x5c8>)
 80222b2:	aa20      	add	r2, sp, #128	@ 0x80
 80222b4:	a81d      	add	r0, sp, #116	@ 0x74
 80222b6:	f002 fe55 	bl	8024f64 <__hexnan>
 80222ba:	2805      	cmp	r0, #5
 80222bc:	d125      	bne.n	802230a <_strtod_l+0x39e>
 80222be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80222c0:	4a9d      	ldr	r2, [pc, #628]	@ (8022538 <_strtod_l+0x5cc>)
 80222c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80222c4:	431a      	orrs	r2, r3
 80222c6:	0017      	movs	r7, r2
 80222c8:	e68b      	b.n	8021fe2 <_strtod_l+0x76>
 80222ca:	220a      	movs	r2, #10
 80222cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80222ce:	434a      	muls	r2, r1
 80222d0:	18d2      	adds	r2, r2, r3
 80222d2:	3a30      	subs	r2, #48	@ 0x30
 80222d4:	9210      	str	r2, [sp, #64]	@ 0x40
 80222d6:	e7b5      	b.n	8022244 <_strtod_l+0x2d8>
 80222d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80222da:	d0de      	beq.n	802229a <_strtod_l+0x32e>
 80222dc:	e69d      	b.n	802201a <_strtod_l+0xae>
 80222de:	4997      	ldr	r1, [pc, #604]	@ (802253c <_strtod_l+0x5d0>)
 80222e0:	a81d      	add	r0, sp, #116	@ 0x74
 80222e2:	f002 fe2b 	bl	8024f3c <__match>
 80222e6:	2800      	cmp	r0, #0
 80222e8:	d100      	bne.n	80222ec <_strtod_l+0x380>
 80222ea:	e696      	b.n	802201a <_strtod_l+0xae>
 80222ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222ee:	4994      	ldr	r1, [pc, #592]	@ (8022540 <_strtod_l+0x5d4>)
 80222f0:	3b01      	subs	r3, #1
 80222f2:	a81d      	add	r0, sp, #116	@ 0x74
 80222f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80222f6:	f002 fe21 	bl	8024f3c <__match>
 80222fa:	2800      	cmp	r0, #0
 80222fc:	d102      	bne.n	8022304 <_strtod_l+0x398>
 80222fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022300:	3301      	adds	r3, #1
 8022302:	931d      	str	r3, [sp, #116]	@ 0x74
 8022304:	2600      	movs	r6, #0
 8022306:	4f8c      	ldr	r7, [pc, #560]	@ (8022538 <_strtod_l+0x5cc>)
 8022308:	e66b      	b.n	8021fe2 <_strtod_l+0x76>
 802230a:	488e      	ldr	r0, [pc, #568]	@ (8022544 <_strtod_l+0x5d8>)
 802230c:	f001 fca6 	bl	8023c5c <nan>
 8022310:	0006      	movs	r6, r0
 8022312:	000f      	movs	r7, r1
 8022314:	e665      	b.n	8021fe2 <_strtod_l+0x76>
 8022316:	9b07      	ldr	r3, [sp, #28]
 8022318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802231a:	1a9b      	subs	r3, r3, r2
 802231c:	930c      	str	r3, [sp, #48]	@ 0x30
 802231e:	9b08      	ldr	r3, [sp, #32]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d101      	bne.n	8022328 <_strtod_l+0x3bc>
 8022324:	9b06      	ldr	r3, [sp, #24]
 8022326:	9308      	str	r3, [sp, #32]
 8022328:	9c06      	ldr	r4, [sp, #24]
 802232a:	2c10      	cmp	r4, #16
 802232c:	dd00      	ble.n	8022330 <_strtod_l+0x3c4>
 802232e:	2410      	movs	r4, #16
 8022330:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022332:	f7e1 f873 	bl	800341c <__aeabi_ui2d>
 8022336:	9b06      	ldr	r3, [sp, #24]
 8022338:	0006      	movs	r6, r0
 802233a:	000f      	movs	r7, r1
 802233c:	2b09      	cmp	r3, #9
 802233e:	dc13      	bgt.n	8022368 <_strtod_l+0x3fc>
 8022340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022342:	2b00      	cmp	r3, #0
 8022344:	d100      	bne.n	8022348 <_strtod_l+0x3dc>
 8022346:	e64c      	b.n	8021fe2 <_strtod_l+0x76>
 8022348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802234a:	2b00      	cmp	r3, #0
 802234c:	dc00      	bgt.n	8022350 <_strtod_l+0x3e4>
 802234e:	e07e      	b.n	802244e <_strtod_l+0x4e2>
 8022350:	2b16      	cmp	r3, #22
 8022352:	dc63      	bgt.n	802241c <_strtod_l+0x4b0>
 8022354:	497c      	ldr	r1, [pc, #496]	@ (8022548 <_strtod_l+0x5dc>)
 8022356:	00db      	lsls	r3, r3, #3
 8022358:	18c9      	adds	r1, r1, r3
 802235a:	0032      	movs	r2, r6
 802235c:	6808      	ldr	r0, [r1, #0]
 802235e:	6849      	ldr	r1, [r1, #4]
 8022360:	003b      	movs	r3, r7
 8022362:	f7e0 f96b 	bl	800263c <__aeabi_dmul>
 8022366:	e7d3      	b.n	8022310 <_strtod_l+0x3a4>
 8022368:	0022      	movs	r2, r4
 802236a:	4b77      	ldr	r3, [pc, #476]	@ (8022548 <_strtod_l+0x5dc>)
 802236c:	3a09      	subs	r2, #9
 802236e:	00d2      	lsls	r2, r2, #3
 8022370:	189b      	adds	r3, r3, r2
 8022372:	681a      	ldr	r2, [r3, #0]
 8022374:	685b      	ldr	r3, [r3, #4]
 8022376:	f7e0 f961 	bl	800263c <__aeabi_dmul>
 802237a:	0006      	movs	r6, r0
 802237c:	0028      	movs	r0, r5
 802237e:	000f      	movs	r7, r1
 8022380:	f7e1 f84c 	bl	800341c <__aeabi_ui2d>
 8022384:	000b      	movs	r3, r1
 8022386:	0002      	movs	r2, r0
 8022388:	0039      	movs	r1, r7
 802238a:	0030      	movs	r0, r6
 802238c:	f7df f9ae 	bl	80016ec <__aeabi_dadd>
 8022390:	9b06      	ldr	r3, [sp, #24]
 8022392:	0006      	movs	r6, r0
 8022394:	000f      	movs	r7, r1
 8022396:	2b0f      	cmp	r3, #15
 8022398:	ddd2      	ble.n	8022340 <_strtod_l+0x3d4>
 802239a:	9b06      	ldr	r3, [sp, #24]
 802239c:	1b1c      	subs	r4, r3, r4
 802239e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223a0:	18e4      	adds	r4, r4, r3
 80223a2:	2c00      	cmp	r4, #0
 80223a4:	dc00      	bgt.n	80223a8 <_strtod_l+0x43c>
 80223a6:	e09b      	b.n	80224e0 <_strtod_l+0x574>
 80223a8:	220f      	movs	r2, #15
 80223aa:	0023      	movs	r3, r4
 80223ac:	4013      	ands	r3, r2
 80223ae:	4214      	tst	r4, r2
 80223b0:	d00a      	beq.n	80223c8 <_strtod_l+0x45c>
 80223b2:	4965      	ldr	r1, [pc, #404]	@ (8022548 <_strtod_l+0x5dc>)
 80223b4:	00db      	lsls	r3, r3, #3
 80223b6:	18c9      	adds	r1, r1, r3
 80223b8:	0032      	movs	r2, r6
 80223ba:	6808      	ldr	r0, [r1, #0]
 80223bc:	6849      	ldr	r1, [r1, #4]
 80223be:	003b      	movs	r3, r7
 80223c0:	f7e0 f93c 	bl	800263c <__aeabi_dmul>
 80223c4:	0006      	movs	r6, r0
 80223c6:	000f      	movs	r7, r1
 80223c8:	230f      	movs	r3, #15
 80223ca:	439c      	bics	r4, r3
 80223cc:	d073      	beq.n	80224b6 <_strtod_l+0x54a>
 80223ce:	3326      	adds	r3, #38	@ 0x26
 80223d0:	33ff      	adds	r3, #255	@ 0xff
 80223d2:	429c      	cmp	r4, r3
 80223d4:	dd4b      	ble.n	802246e <_strtod_l+0x502>
 80223d6:	2300      	movs	r3, #0
 80223d8:	9306      	str	r3, [sp, #24]
 80223da:	9307      	str	r3, [sp, #28]
 80223dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80223de:	9308      	str	r3, [sp, #32]
 80223e0:	2322      	movs	r3, #34	@ 0x22
 80223e2:	2600      	movs	r6, #0
 80223e4:	9a05      	ldr	r2, [sp, #20]
 80223e6:	4f54      	ldr	r7, [pc, #336]	@ (8022538 <_strtod_l+0x5cc>)
 80223e8:	6013      	str	r3, [r2, #0]
 80223ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80223ec:	42b3      	cmp	r3, r6
 80223ee:	d100      	bne.n	80223f2 <_strtod_l+0x486>
 80223f0:	e5f7      	b.n	8021fe2 <_strtod_l+0x76>
 80223f2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80223f4:	9805      	ldr	r0, [sp, #20]
 80223f6:	f002 ff6f 	bl	80252d8 <_Bfree>
 80223fa:	9908      	ldr	r1, [sp, #32]
 80223fc:	9805      	ldr	r0, [sp, #20]
 80223fe:	f002 ff6b 	bl	80252d8 <_Bfree>
 8022402:	9907      	ldr	r1, [sp, #28]
 8022404:	9805      	ldr	r0, [sp, #20]
 8022406:	f002 ff67 	bl	80252d8 <_Bfree>
 802240a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802240c:	9805      	ldr	r0, [sp, #20]
 802240e:	f002 ff63 	bl	80252d8 <_Bfree>
 8022412:	9906      	ldr	r1, [sp, #24]
 8022414:	9805      	ldr	r0, [sp, #20]
 8022416:	f002 ff5f 	bl	80252d8 <_Bfree>
 802241a:	e5e2      	b.n	8021fe2 <_strtod_l+0x76>
 802241c:	2325      	movs	r3, #37	@ 0x25
 802241e:	9a06      	ldr	r2, [sp, #24]
 8022420:	1a9b      	subs	r3, r3, r2
 8022422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022424:	4293      	cmp	r3, r2
 8022426:	dbb8      	blt.n	802239a <_strtod_l+0x42e>
 8022428:	240f      	movs	r4, #15
 802242a:	9b06      	ldr	r3, [sp, #24]
 802242c:	4d46      	ldr	r5, [pc, #280]	@ (8022548 <_strtod_l+0x5dc>)
 802242e:	1ae4      	subs	r4, r4, r3
 8022430:	00e1      	lsls	r1, r4, #3
 8022432:	1869      	adds	r1, r5, r1
 8022434:	0032      	movs	r2, r6
 8022436:	6808      	ldr	r0, [r1, #0]
 8022438:	6849      	ldr	r1, [r1, #4]
 802243a:	003b      	movs	r3, r7
 802243c:	f7e0 f8fe 	bl	800263c <__aeabi_dmul>
 8022440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022442:	1b1c      	subs	r4, r3, r4
 8022444:	00e4      	lsls	r4, r4, #3
 8022446:	192d      	adds	r5, r5, r4
 8022448:	682a      	ldr	r2, [r5, #0]
 802244a:	686b      	ldr	r3, [r5, #4]
 802244c:	e789      	b.n	8022362 <_strtod_l+0x3f6>
 802244e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022450:	3316      	adds	r3, #22
 8022452:	dba2      	blt.n	802239a <_strtod_l+0x42e>
 8022454:	9907      	ldr	r1, [sp, #28]
 8022456:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022458:	4b3b      	ldr	r3, [pc, #236]	@ (8022548 <_strtod_l+0x5dc>)
 802245a:	1a52      	subs	r2, r2, r1
 802245c:	00d2      	lsls	r2, r2, #3
 802245e:	189b      	adds	r3, r3, r2
 8022460:	0030      	movs	r0, r6
 8022462:	681a      	ldr	r2, [r3, #0]
 8022464:	685b      	ldr	r3, [r3, #4]
 8022466:	0039      	movs	r1, r7
 8022468:	f7df fca4 	bl	8001db4 <__aeabi_ddiv>
 802246c:	e750      	b.n	8022310 <_strtod_l+0x3a4>
 802246e:	2300      	movs	r3, #0
 8022470:	0030      	movs	r0, r6
 8022472:	0039      	movs	r1, r7
 8022474:	4d35      	ldr	r5, [pc, #212]	@ (802254c <_strtod_l+0x5e0>)
 8022476:	1124      	asrs	r4, r4, #4
 8022478:	9309      	str	r3, [sp, #36]	@ 0x24
 802247a:	2c01      	cmp	r4, #1
 802247c:	dc1e      	bgt.n	80224bc <_strtod_l+0x550>
 802247e:	2b00      	cmp	r3, #0
 8022480:	d001      	beq.n	8022486 <_strtod_l+0x51a>
 8022482:	0006      	movs	r6, r0
 8022484:	000f      	movs	r7, r1
 8022486:	4b32      	ldr	r3, [pc, #200]	@ (8022550 <_strtod_l+0x5e4>)
 8022488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802248a:	18ff      	adds	r7, r7, r3
 802248c:	4b2f      	ldr	r3, [pc, #188]	@ (802254c <_strtod_l+0x5e0>)
 802248e:	00d5      	lsls	r5, r2, #3
 8022490:	195d      	adds	r5, r3, r5
 8022492:	0032      	movs	r2, r6
 8022494:	6828      	ldr	r0, [r5, #0]
 8022496:	6869      	ldr	r1, [r5, #4]
 8022498:	003b      	movs	r3, r7
 802249a:	f7e0 f8cf 	bl	800263c <__aeabi_dmul>
 802249e:	4b26      	ldr	r3, [pc, #152]	@ (8022538 <_strtod_l+0x5cc>)
 80224a0:	4a2c      	ldr	r2, [pc, #176]	@ (8022554 <_strtod_l+0x5e8>)
 80224a2:	0006      	movs	r6, r0
 80224a4:	400b      	ands	r3, r1
 80224a6:	4293      	cmp	r3, r2
 80224a8:	d895      	bhi.n	80223d6 <_strtod_l+0x46a>
 80224aa:	4a2b      	ldr	r2, [pc, #172]	@ (8022558 <_strtod_l+0x5ec>)
 80224ac:	4293      	cmp	r3, r2
 80224ae:	d913      	bls.n	80224d8 <_strtod_l+0x56c>
 80224b0:	2601      	movs	r6, #1
 80224b2:	4f2a      	ldr	r7, [pc, #168]	@ (802255c <_strtod_l+0x5f0>)
 80224b4:	4276      	negs	r6, r6
 80224b6:	2300      	movs	r3, #0
 80224b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80224ba:	e086      	b.n	80225ca <_strtod_l+0x65e>
 80224bc:	2201      	movs	r2, #1
 80224be:	4214      	tst	r4, r2
 80224c0:	d004      	beq.n	80224cc <_strtod_l+0x560>
 80224c2:	682a      	ldr	r2, [r5, #0]
 80224c4:	686b      	ldr	r3, [r5, #4]
 80224c6:	f7e0 f8b9 	bl	800263c <__aeabi_dmul>
 80224ca:	2301      	movs	r3, #1
 80224cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80224ce:	1064      	asrs	r4, r4, #1
 80224d0:	3201      	adds	r2, #1
 80224d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80224d4:	3508      	adds	r5, #8
 80224d6:	e7d0      	b.n	802247a <_strtod_l+0x50e>
 80224d8:	23d4      	movs	r3, #212	@ 0xd4
 80224da:	049b      	lsls	r3, r3, #18
 80224dc:	18cf      	adds	r7, r1, r3
 80224de:	e7ea      	b.n	80224b6 <_strtod_l+0x54a>
 80224e0:	2c00      	cmp	r4, #0
 80224e2:	d0e8      	beq.n	80224b6 <_strtod_l+0x54a>
 80224e4:	4264      	negs	r4, r4
 80224e6:	230f      	movs	r3, #15
 80224e8:	0022      	movs	r2, r4
 80224ea:	401a      	ands	r2, r3
 80224ec:	421c      	tst	r4, r3
 80224ee:	d00a      	beq.n	8022506 <_strtod_l+0x59a>
 80224f0:	4b15      	ldr	r3, [pc, #84]	@ (8022548 <_strtod_l+0x5dc>)
 80224f2:	00d2      	lsls	r2, r2, #3
 80224f4:	189b      	adds	r3, r3, r2
 80224f6:	0030      	movs	r0, r6
 80224f8:	681a      	ldr	r2, [r3, #0]
 80224fa:	685b      	ldr	r3, [r3, #4]
 80224fc:	0039      	movs	r1, r7
 80224fe:	f7df fc59 	bl	8001db4 <__aeabi_ddiv>
 8022502:	0006      	movs	r6, r0
 8022504:	000f      	movs	r7, r1
 8022506:	1124      	asrs	r4, r4, #4
 8022508:	d0d5      	beq.n	80224b6 <_strtod_l+0x54a>
 802250a:	2c1f      	cmp	r4, #31
 802250c:	dd28      	ble.n	8022560 <_strtod_l+0x5f4>
 802250e:	2300      	movs	r3, #0
 8022510:	9306      	str	r3, [sp, #24]
 8022512:	9307      	str	r3, [sp, #28]
 8022514:	930d      	str	r3, [sp, #52]	@ 0x34
 8022516:	9308      	str	r3, [sp, #32]
 8022518:	2322      	movs	r3, #34	@ 0x22
 802251a:	9a05      	ldr	r2, [sp, #20]
 802251c:	2600      	movs	r6, #0
 802251e:	6013      	str	r3, [r2, #0]
 8022520:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022522:	2700      	movs	r7, #0
 8022524:	2b00      	cmp	r3, #0
 8022526:	d000      	beq.n	802252a <_strtod_l+0x5be>
 8022528:	e763      	b.n	80223f2 <_strtod_l+0x486>
 802252a:	e55a      	b.n	8021fe2 <_strtod_l+0x76>
 802252c:	00004e1f 	.word	0x00004e1f
 8022530:	0802b86e 	.word	0x0802b86e
 8022534:	0802b710 	.word	0x0802b710
 8022538:	7ff00000 	.word	0x7ff00000
 802253c:	0802b866 	.word	0x0802b866
 8022540:	0802b8a0 	.word	0x0802b8a0
 8022544:	0802bb2c 	.word	0x0802bb2c
 8022548:	0802ba18 	.word	0x0802ba18
 802254c:	0802b9f0 	.word	0x0802b9f0
 8022550:	fcb00000 	.word	0xfcb00000
 8022554:	7ca00000 	.word	0x7ca00000
 8022558:	7c900000 	.word	0x7c900000
 802255c:	7fefffff 	.word	0x7fefffff
 8022560:	2310      	movs	r3, #16
 8022562:	0022      	movs	r2, r4
 8022564:	401a      	ands	r2, r3
 8022566:	9209      	str	r2, [sp, #36]	@ 0x24
 8022568:	421c      	tst	r4, r3
 802256a:	d001      	beq.n	8022570 <_strtod_l+0x604>
 802256c:	335a      	adds	r3, #90	@ 0x5a
 802256e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022570:	0030      	movs	r0, r6
 8022572:	0039      	movs	r1, r7
 8022574:	2300      	movs	r3, #0
 8022576:	4dbf      	ldr	r5, [pc, #764]	@ (8022874 <_strtod_l+0x908>)
 8022578:	2201      	movs	r2, #1
 802257a:	4214      	tst	r4, r2
 802257c:	d004      	beq.n	8022588 <_strtod_l+0x61c>
 802257e:	682a      	ldr	r2, [r5, #0]
 8022580:	686b      	ldr	r3, [r5, #4]
 8022582:	f7e0 f85b 	bl	800263c <__aeabi_dmul>
 8022586:	2301      	movs	r3, #1
 8022588:	1064      	asrs	r4, r4, #1
 802258a:	3508      	adds	r5, #8
 802258c:	2c00      	cmp	r4, #0
 802258e:	d1f3      	bne.n	8022578 <_strtod_l+0x60c>
 8022590:	2b00      	cmp	r3, #0
 8022592:	d001      	beq.n	8022598 <_strtod_l+0x62c>
 8022594:	0006      	movs	r6, r0
 8022596:	000f      	movs	r7, r1
 8022598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802259a:	2b00      	cmp	r3, #0
 802259c:	d00d      	beq.n	80225ba <_strtod_l+0x64e>
 802259e:	236b      	movs	r3, #107	@ 0x6b
 80225a0:	007a      	lsls	r2, r7, #1
 80225a2:	0d52      	lsrs	r2, r2, #21
 80225a4:	0039      	movs	r1, r7
 80225a6:	1a9b      	subs	r3, r3, r2
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	dd06      	ble.n	80225ba <_strtod_l+0x64e>
 80225ac:	2b1f      	cmp	r3, #31
 80225ae:	dd5a      	ble.n	8022666 <_strtod_l+0x6fa>
 80225b0:	2600      	movs	r6, #0
 80225b2:	2b34      	cmp	r3, #52	@ 0x34
 80225b4:	dd50      	ble.n	8022658 <_strtod_l+0x6ec>
 80225b6:	27dc      	movs	r7, #220	@ 0xdc
 80225b8:	04bf      	lsls	r7, r7, #18
 80225ba:	2200      	movs	r2, #0
 80225bc:	2300      	movs	r3, #0
 80225be:	0030      	movs	r0, r6
 80225c0:	0039      	movs	r1, r7
 80225c2:	f7dd ff75 	bl	80004b0 <__aeabi_dcmpeq>
 80225c6:	2800      	cmp	r0, #0
 80225c8:	d1a1      	bne.n	802250e <_strtod_l+0x5a2>
 80225ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225cc:	9a08      	ldr	r2, [sp, #32]
 80225ce:	9300      	str	r3, [sp, #0]
 80225d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80225d2:	9b06      	ldr	r3, [sp, #24]
 80225d4:	9805      	ldr	r0, [sp, #20]
 80225d6:	f002 fee7 	bl	80253a8 <__s2b>
 80225da:	900d      	str	r0, [sp, #52]	@ 0x34
 80225dc:	2800      	cmp	r0, #0
 80225de:	d100      	bne.n	80225e2 <_strtod_l+0x676>
 80225e0:	e6f9      	b.n	80223d6 <_strtod_l+0x46a>
 80225e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80225e4:	9907      	ldr	r1, [sp, #28]
 80225e6:	17da      	asrs	r2, r3, #31
 80225e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80225ea:	1a5b      	subs	r3, r3, r1
 80225ec:	401a      	ands	r2, r3
 80225ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80225f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80225f2:	43db      	mvns	r3, r3
 80225f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80225f6:	17db      	asrs	r3, r3, #31
 80225f8:	401a      	ands	r2, r3
 80225fa:	2300      	movs	r3, #0
 80225fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80225fe:	9306      	str	r3, [sp, #24]
 8022600:	9307      	str	r3, [sp, #28]
 8022602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022604:	9805      	ldr	r0, [sp, #20]
 8022606:	6859      	ldr	r1, [r3, #4]
 8022608:	f002 fe22 	bl	8025250 <_Balloc>
 802260c:	9008      	str	r0, [sp, #32]
 802260e:	2800      	cmp	r0, #0
 8022610:	d100      	bne.n	8022614 <_strtod_l+0x6a8>
 8022612:	e6e5      	b.n	80223e0 <_strtod_l+0x474>
 8022614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022616:	300c      	adds	r0, #12
 8022618:	0019      	movs	r1, r3
 802261a:	691a      	ldr	r2, [r3, #16]
 802261c:	310c      	adds	r1, #12
 802261e:	3202      	adds	r2, #2
 8022620:	0092      	lsls	r2, r2, #2
 8022622:	f001 fb11 	bl	8023c48 <memcpy>
 8022626:	ab20      	add	r3, sp, #128	@ 0x80
 8022628:	9301      	str	r3, [sp, #4]
 802262a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802262c:	9300      	str	r3, [sp, #0]
 802262e:	0032      	movs	r2, r6
 8022630:	003b      	movs	r3, r7
 8022632:	9805      	ldr	r0, [sp, #20]
 8022634:	9610      	str	r6, [sp, #64]	@ 0x40
 8022636:	9711      	str	r7, [sp, #68]	@ 0x44
 8022638:	f003 fa06 	bl	8025a48 <__d2b>
 802263c:	901e      	str	r0, [sp, #120]	@ 0x78
 802263e:	2800      	cmp	r0, #0
 8022640:	d100      	bne.n	8022644 <_strtod_l+0x6d8>
 8022642:	e6cd      	b.n	80223e0 <_strtod_l+0x474>
 8022644:	2101      	movs	r1, #1
 8022646:	9805      	ldr	r0, [sp, #20]
 8022648:	f002 ff4a 	bl	80254e0 <__i2b>
 802264c:	9007      	str	r0, [sp, #28]
 802264e:	2800      	cmp	r0, #0
 8022650:	d10e      	bne.n	8022670 <_strtod_l+0x704>
 8022652:	2300      	movs	r3, #0
 8022654:	9307      	str	r3, [sp, #28]
 8022656:	e6c3      	b.n	80223e0 <_strtod_l+0x474>
 8022658:	234b      	movs	r3, #75	@ 0x4b
 802265a:	1a9a      	subs	r2, r3, r2
 802265c:	3b4c      	subs	r3, #76	@ 0x4c
 802265e:	4093      	lsls	r3, r2
 8022660:	4019      	ands	r1, r3
 8022662:	000f      	movs	r7, r1
 8022664:	e7a9      	b.n	80225ba <_strtod_l+0x64e>
 8022666:	2201      	movs	r2, #1
 8022668:	4252      	negs	r2, r2
 802266a:	409a      	lsls	r2, r3
 802266c:	4016      	ands	r6, r2
 802266e:	e7a4      	b.n	80225ba <_strtod_l+0x64e>
 8022670:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022672:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022674:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8022676:	1ad4      	subs	r4, r2, r3
 8022678:	2b00      	cmp	r3, #0
 802267a:	db01      	blt.n	8022680 <_strtod_l+0x714>
 802267c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802267e:	195d      	adds	r5, r3, r5
 8022680:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022682:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022684:	1a5b      	subs	r3, r3, r1
 8022686:	2136      	movs	r1, #54	@ 0x36
 8022688:	189b      	adds	r3, r3, r2
 802268a:	1a8a      	subs	r2, r1, r2
 802268c:	497a      	ldr	r1, [pc, #488]	@ (8022878 <_strtod_l+0x90c>)
 802268e:	2001      	movs	r0, #1
 8022690:	468c      	mov	ip, r1
 8022692:	2100      	movs	r1, #0
 8022694:	3b01      	subs	r3, #1
 8022696:	9116      	str	r1, [sp, #88]	@ 0x58
 8022698:	9014      	str	r0, [sp, #80]	@ 0x50
 802269a:	4563      	cmp	r3, ip
 802269c:	da06      	bge.n	80226ac <_strtod_l+0x740>
 802269e:	4661      	mov	r1, ip
 80226a0:	1ac9      	subs	r1, r1, r3
 80226a2:	1a52      	subs	r2, r2, r1
 80226a4:	291f      	cmp	r1, #31
 80226a6:	dc3f      	bgt.n	8022728 <_strtod_l+0x7bc>
 80226a8:	4088      	lsls	r0, r1
 80226aa:	9014      	str	r0, [sp, #80]	@ 0x50
 80226ac:	18ab      	adds	r3, r5, r2
 80226ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80226b0:	18a4      	adds	r4, r4, r2
 80226b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80226b6:	191c      	adds	r4, r3, r4
 80226b8:	002b      	movs	r3, r5
 80226ba:	4295      	cmp	r5, r2
 80226bc:	dd00      	ble.n	80226c0 <_strtod_l+0x754>
 80226be:	0013      	movs	r3, r2
 80226c0:	42a3      	cmp	r3, r4
 80226c2:	dd00      	ble.n	80226c6 <_strtod_l+0x75a>
 80226c4:	0023      	movs	r3, r4
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	dd04      	ble.n	80226d4 <_strtod_l+0x768>
 80226ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80226cc:	1ae4      	subs	r4, r4, r3
 80226ce:	1ad2      	subs	r2, r2, r3
 80226d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80226d2:	1aed      	subs	r5, r5, r3
 80226d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80226d6:	2b00      	cmp	r3, #0
 80226d8:	dd16      	ble.n	8022708 <_strtod_l+0x79c>
 80226da:	001a      	movs	r2, r3
 80226dc:	9907      	ldr	r1, [sp, #28]
 80226de:	9805      	ldr	r0, [sp, #20]
 80226e0:	f002 ffc8 	bl	8025674 <__pow5mult>
 80226e4:	9007      	str	r0, [sp, #28]
 80226e6:	2800      	cmp	r0, #0
 80226e8:	d0b3      	beq.n	8022652 <_strtod_l+0x6e6>
 80226ea:	0001      	movs	r1, r0
 80226ec:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80226ee:	9805      	ldr	r0, [sp, #20]
 80226f0:	f002 ff0e 	bl	8025510 <__multiply>
 80226f4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80226f6:	2800      	cmp	r0, #0
 80226f8:	d100      	bne.n	80226fc <_strtod_l+0x790>
 80226fa:	e671      	b.n	80223e0 <_strtod_l+0x474>
 80226fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80226fe:	9805      	ldr	r0, [sp, #20]
 8022700:	f002 fdea 	bl	80252d8 <_Bfree>
 8022704:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022706:	931e      	str	r3, [sp, #120]	@ 0x78
 8022708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802270a:	2b00      	cmp	r3, #0
 802270c:	dc12      	bgt.n	8022734 <_strtod_l+0x7c8>
 802270e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022710:	2b00      	cmp	r3, #0
 8022712:	dd18      	ble.n	8022746 <_strtod_l+0x7da>
 8022714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022716:	9908      	ldr	r1, [sp, #32]
 8022718:	9805      	ldr	r0, [sp, #20]
 802271a:	f002 ffab 	bl	8025674 <__pow5mult>
 802271e:	9008      	str	r0, [sp, #32]
 8022720:	2800      	cmp	r0, #0
 8022722:	d110      	bne.n	8022746 <_strtod_l+0x7da>
 8022724:	2300      	movs	r3, #0
 8022726:	e65a      	b.n	80223de <_strtod_l+0x472>
 8022728:	4954      	ldr	r1, [pc, #336]	@ (802287c <_strtod_l+0x910>)
 802272a:	1acb      	subs	r3, r1, r3
 802272c:	0001      	movs	r1, r0
 802272e:	4099      	lsls	r1, r3
 8022730:	9116      	str	r1, [sp, #88]	@ 0x58
 8022732:	e7ba      	b.n	80226aa <_strtod_l+0x73e>
 8022734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022736:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022738:	9805      	ldr	r0, [sp, #20]
 802273a:	f002 fff7 	bl	802572c <__lshift>
 802273e:	901e      	str	r0, [sp, #120]	@ 0x78
 8022740:	2800      	cmp	r0, #0
 8022742:	d1e4      	bne.n	802270e <_strtod_l+0x7a2>
 8022744:	e64c      	b.n	80223e0 <_strtod_l+0x474>
 8022746:	2c00      	cmp	r4, #0
 8022748:	dd07      	ble.n	802275a <_strtod_l+0x7ee>
 802274a:	0022      	movs	r2, r4
 802274c:	9908      	ldr	r1, [sp, #32]
 802274e:	9805      	ldr	r0, [sp, #20]
 8022750:	f002 ffec 	bl	802572c <__lshift>
 8022754:	9008      	str	r0, [sp, #32]
 8022756:	2800      	cmp	r0, #0
 8022758:	d0e4      	beq.n	8022724 <_strtod_l+0x7b8>
 802275a:	2d00      	cmp	r5, #0
 802275c:	dd08      	ble.n	8022770 <_strtod_l+0x804>
 802275e:	002a      	movs	r2, r5
 8022760:	9907      	ldr	r1, [sp, #28]
 8022762:	9805      	ldr	r0, [sp, #20]
 8022764:	f002 ffe2 	bl	802572c <__lshift>
 8022768:	9007      	str	r0, [sp, #28]
 802276a:	2800      	cmp	r0, #0
 802276c:	d100      	bne.n	8022770 <_strtod_l+0x804>
 802276e:	e637      	b.n	80223e0 <_strtod_l+0x474>
 8022770:	9a08      	ldr	r2, [sp, #32]
 8022772:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022774:	9805      	ldr	r0, [sp, #20]
 8022776:	f003 f861 	bl	802583c <__mdiff>
 802277a:	9006      	str	r0, [sp, #24]
 802277c:	2800      	cmp	r0, #0
 802277e:	d100      	bne.n	8022782 <_strtod_l+0x816>
 8022780:	e62e      	b.n	80223e0 <_strtod_l+0x474>
 8022782:	68c3      	ldr	r3, [r0, #12]
 8022784:	9907      	ldr	r1, [sp, #28]
 8022786:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022788:	2300      	movs	r3, #0
 802278a:	60c3      	str	r3, [r0, #12]
 802278c:	f003 f83a 	bl	8025804 <__mcmp>
 8022790:	2800      	cmp	r0, #0
 8022792:	da3b      	bge.n	802280c <_strtod_l+0x8a0>
 8022794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022796:	4333      	orrs	r3, r6
 8022798:	d167      	bne.n	802286a <_strtod_l+0x8fe>
 802279a:	033b      	lsls	r3, r7, #12
 802279c:	d165      	bne.n	802286a <_strtod_l+0x8fe>
 802279e:	22d6      	movs	r2, #214	@ 0xd6
 80227a0:	4b37      	ldr	r3, [pc, #220]	@ (8022880 <_strtod_l+0x914>)
 80227a2:	04d2      	lsls	r2, r2, #19
 80227a4:	403b      	ands	r3, r7
 80227a6:	4293      	cmp	r3, r2
 80227a8:	d95f      	bls.n	802286a <_strtod_l+0x8fe>
 80227aa:	9b06      	ldr	r3, [sp, #24]
 80227ac:	695b      	ldr	r3, [r3, #20]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d103      	bne.n	80227ba <_strtod_l+0x84e>
 80227b2:	9b06      	ldr	r3, [sp, #24]
 80227b4:	691b      	ldr	r3, [r3, #16]
 80227b6:	2b01      	cmp	r3, #1
 80227b8:	dd57      	ble.n	802286a <_strtod_l+0x8fe>
 80227ba:	9906      	ldr	r1, [sp, #24]
 80227bc:	2201      	movs	r2, #1
 80227be:	9805      	ldr	r0, [sp, #20]
 80227c0:	f002 ffb4 	bl	802572c <__lshift>
 80227c4:	9907      	ldr	r1, [sp, #28]
 80227c6:	9006      	str	r0, [sp, #24]
 80227c8:	f003 f81c 	bl	8025804 <__mcmp>
 80227cc:	2800      	cmp	r0, #0
 80227ce:	dd4c      	ble.n	802286a <_strtod_l+0x8fe>
 80227d0:	4b2b      	ldr	r3, [pc, #172]	@ (8022880 <_strtod_l+0x914>)
 80227d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80227d4:	403b      	ands	r3, r7
 80227d6:	2a00      	cmp	r2, #0
 80227d8:	d074      	beq.n	80228c4 <_strtod_l+0x958>
 80227da:	22d6      	movs	r2, #214	@ 0xd6
 80227dc:	04d2      	lsls	r2, r2, #19
 80227de:	4293      	cmp	r3, r2
 80227e0:	d870      	bhi.n	80228c4 <_strtod_l+0x958>
 80227e2:	22dc      	movs	r2, #220	@ 0xdc
 80227e4:	0492      	lsls	r2, r2, #18
 80227e6:	4293      	cmp	r3, r2
 80227e8:	d800      	bhi.n	80227ec <_strtod_l+0x880>
 80227ea:	e695      	b.n	8022518 <_strtod_l+0x5ac>
 80227ec:	0030      	movs	r0, r6
 80227ee:	0039      	movs	r1, r7
 80227f0:	4b24      	ldr	r3, [pc, #144]	@ (8022884 <_strtod_l+0x918>)
 80227f2:	2200      	movs	r2, #0
 80227f4:	f7df ff22 	bl	800263c <__aeabi_dmul>
 80227f8:	4b21      	ldr	r3, [pc, #132]	@ (8022880 <_strtod_l+0x914>)
 80227fa:	0006      	movs	r6, r0
 80227fc:	000f      	movs	r7, r1
 80227fe:	420b      	tst	r3, r1
 8022800:	d000      	beq.n	8022804 <_strtod_l+0x898>
 8022802:	e5f6      	b.n	80223f2 <_strtod_l+0x486>
 8022804:	2322      	movs	r3, #34	@ 0x22
 8022806:	9a05      	ldr	r2, [sp, #20]
 8022808:	6013      	str	r3, [r2, #0]
 802280a:	e5f2      	b.n	80223f2 <_strtod_l+0x486>
 802280c:	970e      	str	r7, [sp, #56]	@ 0x38
 802280e:	2800      	cmp	r0, #0
 8022810:	d175      	bne.n	80228fe <_strtod_l+0x992>
 8022812:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022814:	033b      	lsls	r3, r7, #12
 8022816:	0b1b      	lsrs	r3, r3, #12
 8022818:	2a00      	cmp	r2, #0
 802281a:	d039      	beq.n	8022890 <_strtod_l+0x924>
 802281c:	4a1a      	ldr	r2, [pc, #104]	@ (8022888 <_strtod_l+0x91c>)
 802281e:	4293      	cmp	r3, r2
 8022820:	d138      	bne.n	8022894 <_strtod_l+0x928>
 8022822:	2101      	movs	r1, #1
 8022824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022826:	4249      	negs	r1, r1
 8022828:	0032      	movs	r2, r6
 802282a:	0008      	movs	r0, r1
 802282c:	2b00      	cmp	r3, #0
 802282e:	d00b      	beq.n	8022848 <_strtod_l+0x8dc>
 8022830:	24d4      	movs	r4, #212	@ 0xd4
 8022832:	4b13      	ldr	r3, [pc, #76]	@ (8022880 <_strtod_l+0x914>)
 8022834:	0008      	movs	r0, r1
 8022836:	403b      	ands	r3, r7
 8022838:	04e4      	lsls	r4, r4, #19
 802283a:	42a3      	cmp	r3, r4
 802283c:	d804      	bhi.n	8022848 <_strtod_l+0x8dc>
 802283e:	306c      	adds	r0, #108	@ 0x6c
 8022840:	0d1b      	lsrs	r3, r3, #20
 8022842:	1ac3      	subs	r3, r0, r3
 8022844:	4099      	lsls	r1, r3
 8022846:	0008      	movs	r0, r1
 8022848:	4282      	cmp	r2, r0
 802284a:	d123      	bne.n	8022894 <_strtod_l+0x928>
 802284c:	4b0f      	ldr	r3, [pc, #60]	@ (802288c <_strtod_l+0x920>)
 802284e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022850:	4299      	cmp	r1, r3
 8022852:	d102      	bne.n	802285a <_strtod_l+0x8ee>
 8022854:	3201      	adds	r2, #1
 8022856:	d100      	bne.n	802285a <_strtod_l+0x8ee>
 8022858:	e5c2      	b.n	80223e0 <_strtod_l+0x474>
 802285a:	4b09      	ldr	r3, [pc, #36]	@ (8022880 <_strtod_l+0x914>)
 802285c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802285e:	2600      	movs	r6, #0
 8022860:	401a      	ands	r2, r3
 8022862:	0013      	movs	r3, r2
 8022864:	2280      	movs	r2, #128	@ 0x80
 8022866:	0352      	lsls	r2, r2, #13
 8022868:	189f      	adds	r7, r3, r2
 802286a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802286c:	2b00      	cmp	r3, #0
 802286e:	d1bd      	bne.n	80227ec <_strtod_l+0x880>
 8022870:	e5bf      	b.n	80223f2 <_strtod_l+0x486>
 8022872:	46c0      	nop			@ (mov r8, r8)
 8022874:	0802b738 	.word	0x0802b738
 8022878:	fffffc02 	.word	0xfffffc02
 802287c:	fffffbe2 	.word	0xfffffbe2
 8022880:	7ff00000 	.word	0x7ff00000
 8022884:	39500000 	.word	0x39500000
 8022888:	000fffff 	.word	0x000fffff
 802288c:	7fefffff 	.word	0x7fefffff
 8022890:	4333      	orrs	r3, r6
 8022892:	d09d      	beq.n	80227d0 <_strtod_l+0x864>
 8022894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022896:	2b00      	cmp	r3, #0
 8022898:	d01c      	beq.n	80228d4 <_strtod_l+0x968>
 802289a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802289c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802289e:	4213      	tst	r3, r2
 80228a0:	d0e3      	beq.n	802286a <_strtod_l+0x8fe>
 80228a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80228a4:	0030      	movs	r0, r6
 80228a6:	0039      	movs	r1, r7
 80228a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d016      	beq.n	80228dc <_strtod_l+0x970>
 80228ae:	f7ff fb45 	bl	8021f3c <sulp>
 80228b2:	0002      	movs	r2, r0
 80228b4:	000b      	movs	r3, r1
 80228b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80228b8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80228ba:	f7de ff17 	bl	80016ec <__aeabi_dadd>
 80228be:	0006      	movs	r6, r0
 80228c0:	000f      	movs	r7, r1
 80228c2:	e7d2      	b.n	802286a <_strtod_l+0x8fe>
 80228c4:	2601      	movs	r6, #1
 80228c6:	4a92      	ldr	r2, [pc, #584]	@ (8022b10 <_strtod_l+0xba4>)
 80228c8:	4276      	negs	r6, r6
 80228ca:	189b      	adds	r3, r3, r2
 80228cc:	4a91      	ldr	r2, [pc, #580]	@ (8022b14 <_strtod_l+0xba8>)
 80228ce:	431a      	orrs	r2, r3
 80228d0:	0017      	movs	r7, r2
 80228d2:	e7ca      	b.n	802286a <_strtod_l+0x8fe>
 80228d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80228d6:	4233      	tst	r3, r6
 80228d8:	d0c7      	beq.n	802286a <_strtod_l+0x8fe>
 80228da:	e7e2      	b.n	80228a2 <_strtod_l+0x936>
 80228dc:	f7ff fb2e 	bl	8021f3c <sulp>
 80228e0:	0002      	movs	r2, r0
 80228e2:	000b      	movs	r3, r1
 80228e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80228e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80228e8:	f7e0 f970 	bl	8002bcc <__aeabi_dsub>
 80228ec:	2200      	movs	r2, #0
 80228ee:	2300      	movs	r3, #0
 80228f0:	0006      	movs	r6, r0
 80228f2:	000f      	movs	r7, r1
 80228f4:	f7dd fddc 	bl	80004b0 <__aeabi_dcmpeq>
 80228f8:	2800      	cmp	r0, #0
 80228fa:	d0b6      	beq.n	802286a <_strtod_l+0x8fe>
 80228fc:	e60c      	b.n	8022518 <_strtod_l+0x5ac>
 80228fe:	9907      	ldr	r1, [sp, #28]
 8022900:	9806      	ldr	r0, [sp, #24]
 8022902:	f003 f901 	bl	8025b08 <__ratio>
 8022906:	2380      	movs	r3, #128	@ 0x80
 8022908:	2200      	movs	r2, #0
 802290a:	05db      	lsls	r3, r3, #23
 802290c:	0004      	movs	r4, r0
 802290e:	000d      	movs	r5, r1
 8022910:	f7dd fdde 	bl	80004d0 <__aeabi_dcmple>
 8022914:	2800      	cmp	r0, #0
 8022916:	d06c      	beq.n	80229f2 <_strtod_l+0xa86>
 8022918:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802291a:	2b00      	cmp	r3, #0
 802291c:	d177      	bne.n	8022a0e <_strtod_l+0xaa2>
 802291e:	2e00      	cmp	r6, #0
 8022920:	d157      	bne.n	80229d2 <_strtod_l+0xa66>
 8022922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022924:	031b      	lsls	r3, r3, #12
 8022926:	d15a      	bne.n	80229de <_strtod_l+0xa72>
 8022928:	2200      	movs	r2, #0
 802292a:	0020      	movs	r0, r4
 802292c:	0029      	movs	r1, r5
 802292e:	4b7a      	ldr	r3, [pc, #488]	@ (8022b18 <_strtod_l+0xbac>)
 8022930:	f7dd fdc4 	bl	80004bc <__aeabi_dcmplt>
 8022934:	2800      	cmp	r0, #0
 8022936:	d159      	bne.n	80229ec <_strtod_l+0xa80>
 8022938:	0020      	movs	r0, r4
 802293a:	0029      	movs	r1, r5
 802293c:	2200      	movs	r2, #0
 802293e:	4b77      	ldr	r3, [pc, #476]	@ (8022b1c <_strtod_l+0xbb0>)
 8022940:	f7df fe7c 	bl	800263c <__aeabi_dmul>
 8022944:	0004      	movs	r4, r0
 8022946:	000d      	movs	r5, r1
 8022948:	2380      	movs	r3, #128	@ 0x80
 802294a:	061b      	lsls	r3, r3, #24
 802294c:	18eb      	adds	r3, r5, r3
 802294e:	940a      	str	r4, [sp, #40]	@ 0x28
 8022950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022956:	9214      	str	r2, [sp, #80]	@ 0x50
 8022958:	9315      	str	r3, [sp, #84]	@ 0x54
 802295a:	4a71      	ldr	r2, [pc, #452]	@ (8022b20 <_strtod_l+0xbb4>)
 802295c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802295e:	4013      	ands	r3, r2
 8022960:	9316      	str	r3, [sp, #88]	@ 0x58
 8022962:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022964:	4b6f      	ldr	r3, [pc, #444]	@ (8022b24 <_strtod_l+0xbb8>)
 8022966:	429a      	cmp	r2, r3
 8022968:	d000      	beq.n	802296c <_strtod_l+0xa00>
 802296a:	e087      	b.n	8022a7c <_strtod_l+0xb10>
 802296c:	4a6e      	ldr	r2, [pc, #440]	@ (8022b28 <_strtod_l+0xbbc>)
 802296e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022970:	4694      	mov	ip, r2
 8022972:	4463      	add	r3, ip
 8022974:	001f      	movs	r7, r3
 8022976:	0030      	movs	r0, r6
 8022978:	0019      	movs	r1, r3
 802297a:	f002 fff9 	bl	8025970 <__ulp>
 802297e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022982:	f7df fe5b 	bl	800263c <__aeabi_dmul>
 8022986:	0032      	movs	r2, r6
 8022988:	003b      	movs	r3, r7
 802298a:	f7de feaf 	bl	80016ec <__aeabi_dadd>
 802298e:	4a64      	ldr	r2, [pc, #400]	@ (8022b20 <_strtod_l+0xbb4>)
 8022990:	4b66      	ldr	r3, [pc, #408]	@ (8022b2c <_strtod_l+0xbc0>)
 8022992:	0006      	movs	r6, r0
 8022994:	400a      	ands	r2, r1
 8022996:	429a      	cmp	r2, r3
 8022998:	d940      	bls.n	8022a1c <_strtod_l+0xab0>
 802299a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802299c:	4a64      	ldr	r2, [pc, #400]	@ (8022b30 <_strtod_l+0xbc4>)
 802299e:	4293      	cmp	r3, r2
 80229a0:	d103      	bne.n	80229aa <_strtod_l+0xa3e>
 80229a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80229a4:	3301      	adds	r3, #1
 80229a6:	d100      	bne.n	80229aa <_strtod_l+0xa3e>
 80229a8:	e51a      	b.n	80223e0 <_strtod_l+0x474>
 80229aa:	2601      	movs	r6, #1
 80229ac:	4f60      	ldr	r7, [pc, #384]	@ (8022b30 <_strtod_l+0xbc4>)
 80229ae:	4276      	negs	r6, r6
 80229b0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80229b2:	9805      	ldr	r0, [sp, #20]
 80229b4:	f002 fc90 	bl	80252d8 <_Bfree>
 80229b8:	9908      	ldr	r1, [sp, #32]
 80229ba:	9805      	ldr	r0, [sp, #20]
 80229bc:	f002 fc8c 	bl	80252d8 <_Bfree>
 80229c0:	9907      	ldr	r1, [sp, #28]
 80229c2:	9805      	ldr	r0, [sp, #20]
 80229c4:	f002 fc88 	bl	80252d8 <_Bfree>
 80229c8:	9906      	ldr	r1, [sp, #24]
 80229ca:	9805      	ldr	r0, [sp, #20]
 80229cc:	f002 fc84 	bl	80252d8 <_Bfree>
 80229d0:	e617      	b.n	8022602 <_strtod_l+0x696>
 80229d2:	2e01      	cmp	r6, #1
 80229d4:	d103      	bne.n	80229de <_strtod_l+0xa72>
 80229d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d100      	bne.n	80229de <_strtod_l+0xa72>
 80229dc:	e59c      	b.n	8022518 <_strtod_l+0x5ac>
 80229de:	2300      	movs	r3, #0
 80229e0:	4c54      	ldr	r4, [pc, #336]	@ (8022b34 <_strtod_l+0xbc8>)
 80229e2:	4d4d      	ldr	r5, [pc, #308]	@ (8022b18 <_strtod_l+0xbac>)
 80229e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80229e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80229e8:	2400      	movs	r4, #0
 80229ea:	e7b2      	b.n	8022952 <_strtod_l+0x9e6>
 80229ec:	2400      	movs	r4, #0
 80229ee:	4d4b      	ldr	r5, [pc, #300]	@ (8022b1c <_strtod_l+0xbb0>)
 80229f0:	e7aa      	b.n	8022948 <_strtod_l+0x9dc>
 80229f2:	0020      	movs	r0, r4
 80229f4:	0029      	movs	r1, r5
 80229f6:	4b49      	ldr	r3, [pc, #292]	@ (8022b1c <_strtod_l+0xbb0>)
 80229f8:	2200      	movs	r2, #0
 80229fa:	f7df fe1f 	bl	800263c <__aeabi_dmul>
 80229fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022a00:	0004      	movs	r4, r0
 8022a02:	000d      	movs	r5, r1
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	d09f      	beq.n	8022948 <_strtod_l+0x9dc>
 8022a08:	940a      	str	r4, [sp, #40]	@ 0x28
 8022a0a:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022a0c:	e7a1      	b.n	8022952 <_strtod_l+0x9e6>
 8022a0e:	2300      	movs	r3, #0
 8022a10:	4c41      	ldr	r4, [pc, #260]	@ (8022b18 <_strtod_l+0xbac>)
 8022a12:	0025      	movs	r5, r4
 8022a14:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022a18:	001c      	movs	r4, r3
 8022a1a:	e79a      	b.n	8022952 <_strtod_l+0x9e6>
 8022a1c:	23d4      	movs	r3, #212	@ 0xd4
 8022a1e:	049b      	lsls	r3, r3, #18
 8022a20:	18cf      	adds	r7, r1, r3
 8022a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a24:	9710      	str	r7, [sp, #64]	@ 0x40
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d1c2      	bne.n	80229b0 <_strtod_l+0xa44>
 8022a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8022b20 <_strtod_l+0xbb4>)
 8022a2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022a2e:	403b      	ands	r3, r7
 8022a30:	429a      	cmp	r2, r3
 8022a32:	d1bd      	bne.n	80229b0 <_strtod_l+0xa44>
 8022a34:	0020      	movs	r0, r4
 8022a36:	0029      	movs	r1, r5
 8022a38:	f7dd fe26 	bl	8000688 <__aeabi_d2lz>
 8022a3c:	f7dd fe5e 	bl	80006fc <__aeabi_l2d>
 8022a40:	0002      	movs	r2, r0
 8022a42:	000b      	movs	r3, r1
 8022a44:	0020      	movs	r0, r4
 8022a46:	0029      	movs	r1, r5
 8022a48:	f7e0 f8c0 	bl	8002bcc <__aeabi_dsub>
 8022a4c:	033c      	lsls	r4, r7, #12
 8022a4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022a50:	0b24      	lsrs	r4, r4, #12
 8022a52:	4334      	orrs	r4, r6
 8022a54:	900e      	str	r0, [sp, #56]	@ 0x38
 8022a56:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022a58:	4a37      	ldr	r2, [pc, #220]	@ (8022b38 <_strtod_l+0xbcc>)
 8022a5a:	431c      	orrs	r4, r3
 8022a5c:	d052      	beq.n	8022b04 <_strtod_l+0xb98>
 8022a5e:	4b37      	ldr	r3, [pc, #220]	@ (8022b3c <_strtod_l+0xbd0>)
 8022a60:	f7dd fd2c 	bl	80004bc <__aeabi_dcmplt>
 8022a64:	2800      	cmp	r0, #0
 8022a66:	d000      	beq.n	8022a6a <_strtod_l+0xafe>
 8022a68:	e4c3      	b.n	80223f2 <_strtod_l+0x486>
 8022a6a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022a6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022a6e:	4a34      	ldr	r2, [pc, #208]	@ (8022b40 <_strtod_l+0xbd4>)
 8022a70:	4b2a      	ldr	r3, [pc, #168]	@ (8022b1c <_strtod_l+0xbb0>)
 8022a72:	f7dd fd37 	bl	80004e4 <__aeabi_dcmpgt>
 8022a76:	2800      	cmp	r0, #0
 8022a78:	d09a      	beq.n	80229b0 <_strtod_l+0xa44>
 8022a7a:	e4ba      	b.n	80223f2 <_strtod_l+0x486>
 8022a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d02a      	beq.n	8022ad8 <_strtod_l+0xb6c>
 8022a82:	23d4      	movs	r3, #212	@ 0xd4
 8022a84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022a86:	04db      	lsls	r3, r3, #19
 8022a88:	429a      	cmp	r2, r3
 8022a8a:	d825      	bhi.n	8022ad8 <_strtod_l+0xb6c>
 8022a8c:	0020      	movs	r0, r4
 8022a8e:	0029      	movs	r1, r5
 8022a90:	4a2c      	ldr	r2, [pc, #176]	@ (8022b44 <_strtod_l+0xbd8>)
 8022a92:	4b2d      	ldr	r3, [pc, #180]	@ (8022b48 <_strtod_l+0xbdc>)
 8022a94:	f7dd fd1c 	bl	80004d0 <__aeabi_dcmple>
 8022a98:	2800      	cmp	r0, #0
 8022a9a:	d016      	beq.n	8022aca <_strtod_l+0xb5e>
 8022a9c:	0020      	movs	r0, r4
 8022a9e:	0029      	movs	r1, r5
 8022aa0:	f7dd fdd4 	bl	800064c <__aeabi_d2uiz>
 8022aa4:	2800      	cmp	r0, #0
 8022aa6:	d100      	bne.n	8022aaa <_strtod_l+0xb3e>
 8022aa8:	3001      	adds	r0, #1
 8022aaa:	f7e0 fcb7 	bl	800341c <__aeabi_ui2d>
 8022aae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022ab0:	0004      	movs	r4, r0
 8022ab2:	000d      	movs	r5, r1
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	d122      	bne.n	8022afe <_strtod_l+0xb92>
 8022ab8:	2380      	movs	r3, #128	@ 0x80
 8022aba:	061b      	lsls	r3, r3, #24
 8022abc:	18cb      	adds	r3, r1, r3
 8022abe:	9018      	str	r0, [sp, #96]	@ 0x60
 8022ac0:	9319      	str	r3, [sp, #100]	@ 0x64
 8022ac2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022ac6:	9214      	str	r2, [sp, #80]	@ 0x50
 8022ac8:	9315      	str	r3, [sp, #84]	@ 0x54
 8022aca:	22d6      	movs	r2, #214	@ 0xd6
 8022acc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022ace:	04d2      	lsls	r2, r2, #19
 8022ad0:	189b      	adds	r3, r3, r2
 8022ad2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022ad4:	1a9b      	subs	r3, r3, r2
 8022ad6:	9315      	str	r3, [sp, #84]	@ 0x54
 8022ad8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022ada:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022adc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8022ade:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8022ae0:	f002 ff46 	bl	8025970 <__ulp>
 8022ae4:	0002      	movs	r2, r0
 8022ae6:	000b      	movs	r3, r1
 8022ae8:	0030      	movs	r0, r6
 8022aea:	0039      	movs	r1, r7
 8022aec:	f7df fda6 	bl	800263c <__aeabi_dmul>
 8022af0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022af2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022af4:	f7de fdfa 	bl	80016ec <__aeabi_dadd>
 8022af8:	0006      	movs	r6, r0
 8022afa:	000f      	movs	r7, r1
 8022afc:	e791      	b.n	8022a22 <_strtod_l+0xab6>
 8022afe:	9418      	str	r4, [sp, #96]	@ 0x60
 8022b00:	9519      	str	r5, [sp, #100]	@ 0x64
 8022b02:	e7de      	b.n	8022ac2 <_strtod_l+0xb56>
 8022b04:	4b11      	ldr	r3, [pc, #68]	@ (8022b4c <_strtod_l+0xbe0>)
 8022b06:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022b08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022b0a:	f7dd fcd7 	bl	80004bc <__aeabi_dcmplt>
 8022b0e:	e7b2      	b.n	8022a76 <_strtod_l+0xb0a>
 8022b10:	fff00000 	.word	0xfff00000
 8022b14:	000fffff 	.word	0x000fffff
 8022b18:	3ff00000 	.word	0x3ff00000
 8022b1c:	3fe00000 	.word	0x3fe00000
 8022b20:	7ff00000 	.word	0x7ff00000
 8022b24:	7fe00000 	.word	0x7fe00000
 8022b28:	fcb00000 	.word	0xfcb00000
 8022b2c:	7c9fffff 	.word	0x7c9fffff
 8022b30:	7fefffff 	.word	0x7fefffff
 8022b34:	bff00000 	.word	0xbff00000
 8022b38:	94a03595 	.word	0x94a03595
 8022b3c:	3fdfffff 	.word	0x3fdfffff
 8022b40:	35afe535 	.word	0x35afe535
 8022b44:	ffc00000 	.word	0xffc00000
 8022b48:	41dfffff 	.word	0x41dfffff
 8022b4c:	3fcfffff 	.word	0x3fcfffff

08022b50 <strtod>:
 8022b50:	b510      	push	{r4, lr}
 8022b52:	4c04      	ldr	r4, [pc, #16]	@ (8022b64 <strtod+0x14>)
 8022b54:	000a      	movs	r2, r1
 8022b56:	0001      	movs	r1, r0
 8022b58:	4b03      	ldr	r3, [pc, #12]	@ (8022b68 <strtod+0x18>)
 8022b5a:	6820      	ldr	r0, [r4, #0]
 8022b5c:	f7ff fa06 	bl	8021f6c <_strtod_l>
 8022b60:	bd10      	pop	{r4, pc}
 8022b62:	46c0      	nop			@ (mov r8, r8)
 8022b64:	200003e0 	.word	0x200003e0
 8022b68:	20000274 	.word	0x20000274

08022b6c <_strtol_l.constprop.0>:
 8022b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b6e:	b085      	sub	sp, #20
 8022b70:	0017      	movs	r7, r2
 8022b72:	001e      	movs	r6, r3
 8022b74:	9003      	str	r0, [sp, #12]
 8022b76:	9101      	str	r1, [sp, #4]
 8022b78:	2b24      	cmp	r3, #36	@ 0x24
 8022b7a:	d844      	bhi.n	8022c06 <_strtol_l.constprop.0+0x9a>
 8022b7c:	000c      	movs	r4, r1
 8022b7e:	2b01      	cmp	r3, #1
 8022b80:	d041      	beq.n	8022c06 <_strtol_l.constprop.0+0x9a>
 8022b82:	4b3d      	ldr	r3, [pc, #244]	@ (8022c78 <_strtol_l.constprop.0+0x10c>)
 8022b84:	2208      	movs	r2, #8
 8022b86:	469c      	mov	ip, r3
 8022b88:	0023      	movs	r3, r4
 8022b8a:	4661      	mov	r1, ip
 8022b8c:	781d      	ldrb	r5, [r3, #0]
 8022b8e:	3401      	adds	r4, #1
 8022b90:	5d48      	ldrb	r0, [r1, r5]
 8022b92:	0001      	movs	r1, r0
 8022b94:	4011      	ands	r1, r2
 8022b96:	4210      	tst	r0, r2
 8022b98:	d1f6      	bne.n	8022b88 <_strtol_l.constprop.0+0x1c>
 8022b9a:	2d2d      	cmp	r5, #45	@ 0x2d
 8022b9c:	d13a      	bne.n	8022c14 <_strtol_l.constprop.0+0xa8>
 8022b9e:	7825      	ldrb	r5, [r4, #0]
 8022ba0:	1c9c      	adds	r4, r3, #2
 8022ba2:	2301      	movs	r3, #1
 8022ba4:	9300      	str	r3, [sp, #0]
 8022ba6:	2210      	movs	r2, #16
 8022ba8:	0033      	movs	r3, r6
 8022baa:	4393      	bics	r3, r2
 8022bac:	d109      	bne.n	8022bc2 <_strtol_l.constprop.0+0x56>
 8022bae:	2d30      	cmp	r5, #48	@ 0x30
 8022bb0:	d136      	bne.n	8022c20 <_strtol_l.constprop.0+0xb4>
 8022bb2:	2120      	movs	r1, #32
 8022bb4:	7823      	ldrb	r3, [r4, #0]
 8022bb6:	438b      	bics	r3, r1
 8022bb8:	2b58      	cmp	r3, #88	@ 0x58
 8022bba:	d131      	bne.n	8022c20 <_strtol_l.constprop.0+0xb4>
 8022bbc:	0016      	movs	r6, r2
 8022bbe:	7865      	ldrb	r5, [r4, #1]
 8022bc0:	3402      	adds	r4, #2
 8022bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8022c7c <_strtol_l.constprop.0+0x110>)
 8022bc4:	9b00      	ldr	r3, [sp, #0]
 8022bc6:	4694      	mov	ip, r2
 8022bc8:	4463      	add	r3, ip
 8022bca:	0031      	movs	r1, r6
 8022bcc:	0018      	movs	r0, r3
 8022bce:	9302      	str	r3, [sp, #8]
 8022bd0:	f7dd fb6e 	bl	80002b0 <__aeabi_uidivmod>
 8022bd4:	2200      	movs	r2, #0
 8022bd6:	4684      	mov	ip, r0
 8022bd8:	0010      	movs	r0, r2
 8022bda:	002b      	movs	r3, r5
 8022bdc:	3b30      	subs	r3, #48	@ 0x30
 8022bde:	2b09      	cmp	r3, #9
 8022be0:	d825      	bhi.n	8022c2e <_strtol_l.constprop.0+0xc2>
 8022be2:	001d      	movs	r5, r3
 8022be4:	42ae      	cmp	r6, r5
 8022be6:	dd31      	ble.n	8022c4c <_strtol_l.constprop.0+0xe0>
 8022be8:	1c53      	adds	r3, r2, #1
 8022bea:	d009      	beq.n	8022c00 <_strtol_l.constprop.0+0x94>
 8022bec:	2201      	movs	r2, #1
 8022bee:	4252      	negs	r2, r2
 8022bf0:	4584      	cmp	ip, r0
 8022bf2:	d305      	bcc.n	8022c00 <_strtol_l.constprop.0+0x94>
 8022bf4:	d101      	bne.n	8022bfa <_strtol_l.constprop.0+0x8e>
 8022bf6:	42a9      	cmp	r1, r5
 8022bf8:	db25      	blt.n	8022c46 <_strtol_l.constprop.0+0xda>
 8022bfa:	2201      	movs	r2, #1
 8022bfc:	4370      	muls	r0, r6
 8022bfe:	1828      	adds	r0, r5, r0
 8022c00:	7825      	ldrb	r5, [r4, #0]
 8022c02:	3401      	adds	r4, #1
 8022c04:	e7e9      	b.n	8022bda <_strtol_l.constprop.0+0x6e>
 8022c06:	f000 ffe7 	bl	8023bd8 <__errno>
 8022c0a:	2316      	movs	r3, #22
 8022c0c:	6003      	str	r3, [r0, #0]
 8022c0e:	2000      	movs	r0, #0
 8022c10:	b005      	add	sp, #20
 8022c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c14:	9100      	str	r1, [sp, #0]
 8022c16:	2d2b      	cmp	r5, #43	@ 0x2b
 8022c18:	d1c5      	bne.n	8022ba6 <_strtol_l.constprop.0+0x3a>
 8022c1a:	7825      	ldrb	r5, [r4, #0]
 8022c1c:	1c9c      	adds	r4, r3, #2
 8022c1e:	e7c2      	b.n	8022ba6 <_strtol_l.constprop.0+0x3a>
 8022c20:	2e00      	cmp	r6, #0
 8022c22:	d1ce      	bne.n	8022bc2 <_strtol_l.constprop.0+0x56>
 8022c24:	3608      	adds	r6, #8
 8022c26:	2d30      	cmp	r5, #48	@ 0x30
 8022c28:	d0cb      	beq.n	8022bc2 <_strtol_l.constprop.0+0x56>
 8022c2a:	3602      	adds	r6, #2
 8022c2c:	e7c9      	b.n	8022bc2 <_strtol_l.constprop.0+0x56>
 8022c2e:	002b      	movs	r3, r5
 8022c30:	3b41      	subs	r3, #65	@ 0x41
 8022c32:	2b19      	cmp	r3, #25
 8022c34:	d801      	bhi.n	8022c3a <_strtol_l.constprop.0+0xce>
 8022c36:	3d37      	subs	r5, #55	@ 0x37
 8022c38:	e7d4      	b.n	8022be4 <_strtol_l.constprop.0+0x78>
 8022c3a:	002b      	movs	r3, r5
 8022c3c:	3b61      	subs	r3, #97	@ 0x61
 8022c3e:	2b19      	cmp	r3, #25
 8022c40:	d804      	bhi.n	8022c4c <_strtol_l.constprop.0+0xe0>
 8022c42:	3d57      	subs	r5, #87	@ 0x57
 8022c44:	e7ce      	b.n	8022be4 <_strtol_l.constprop.0+0x78>
 8022c46:	2201      	movs	r2, #1
 8022c48:	4252      	negs	r2, r2
 8022c4a:	e7d9      	b.n	8022c00 <_strtol_l.constprop.0+0x94>
 8022c4c:	1c53      	adds	r3, r2, #1
 8022c4e:	d108      	bne.n	8022c62 <_strtol_l.constprop.0+0xf6>
 8022c50:	2322      	movs	r3, #34	@ 0x22
 8022c52:	9a03      	ldr	r2, [sp, #12]
 8022c54:	9802      	ldr	r0, [sp, #8]
 8022c56:	6013      	str	r3, [r2, #0]
 8022c58:	2f00      	cmp	r7, #0
 8022c5a:	d0d9      	beq.n	8022c10 <_strtol_l.constprop.0+0xa4>
 8022c5c:	1e63      	subs	r3, r4, #1
 8022c5e:	9301      	str	r3, [sp, #4]
 8022c60:	e007      	b.n	8022c72 <_strtol_l.constprop.0+0x106>
 8022c62:	9b00      	ldr	r3, [sp, #0]
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d000      	beq.n	8022c6a <_strtol_l.constprop.0+0xfe>
 8022c68:	4240      	negs	r0, r0
 8022c6a:	2f00      	cmp	r7, #0
 8022c6c:	d0d0      	beq.n	8022c10 <_strtol_l.constprop.0+0xa4>
 8022c6e:	2a00      	cmp	r2, #0
 8022c70:	d1f4      	bne.n	8022c5c <_strtol_l.constprop.0+0xf0>
 8022c72:	9b01      	ldr	r3, [sp, #4]
 8022c74:	603b      	str	r3, [r7, #0]
 8022c76:	e7cb      	b.n	8022c10 <_strtol_l.constprop.0+0xa4>
 8022c78:	0802b761 	.word	0x0802b761
 8022c7c:	7fffffff 	.word	0x7fffffff

08022c80 <strtol>:
 8022c80:	b510      	push	{r4, lr}
 8022c82:	4c04      	ldr	r4, [pc, #16]	@ (8022c94 <strtol+0x14>)
 8022c84:	0013      	movs	r3, r2
 8022c86:	000a      	movs	r2, r1
 8022c88:	0001      	movs	r1, r0
 8022c8a:	6820      	ldr	r0, [r4, #0]
 8022c8c:	f7ff ff6e 	bl	8022b6c <_strtol_l.constprop.0>
 8022c90:	bd10      	pop	{r4, pc}
 8022c92:	46c0      	nop			@ (mov r8, r8)
 8022c94:	200003e0 	.word	0x200003e0

08022c98 <__cvt>:
 8022c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c9a:	001f      	movs	r7, r3
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	0016      	movs	r6, r2
 8022ca0:	b08b      	sub	sp, #44	@ 0x2c
 8022ca2:	429f      	cmp	r7, r3
 8022ca4:	da04      	bge.n	8022cb0 <__cvt+0x18>
 8022ca6:	2180      	movs	r1, #128	@ 0x80
 8022ca8:	0609      	lsls	r1, r1, #24
 8022caa:	187b      	adds	r3, r7, r1
 8022cac:	001f      	movs	r7, r3
 8022cae:	232d      	movs	r3, #45	@ 0x2d
 8022cb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022cb2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022cb4:	7013      	strb	r3, [r2, #0]
 8022cb6:	2320      	movs	r3, #32
 8022cb8:	2203      	movs	r2, #3
 8022cba:	439d      	bics	r5, r3
 8022cbc:	2d46      	cmp	r5, #70	@ 0x46
 8022cbe:	d007      	beq.n	8022cd0 <__cvt+0x38>
 8022cc0:	002b      	movs	r3, r5
 8022cc2:	3b45      	subs	r3, #69	@ 0x45
 8022cc4:	4259      	negs	r1, r3
 8022cc6:	414b      	adcs	r3, r1
 8022cc8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022cca:	3a01      	subs	r2, #1
 8022ccc:	18cb      	adds	r3, r1, r3
 8022cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8022cd0:	ab09      	add	r3, sp, #36	@ 0x24
 8022cd2:	9304      	str	r3, [sp, #16]
 8022cd4:	ab08      	add	r3, sp, #32
 8022cd6:	9303      	str	r3, [sp, #12]
 8022cd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022cda:	9200      	str	r2, [sp, #0]
 8022cdc:	9302      	str	r3, [sp, #8]
 8022cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022ce0:	0032      	movs	r2, r6
 8022ce2:	9301      	str	r3, [sp, #4]
 8022ce4:	003b      	movs	r3, r7
 8022ce6:	f001 f84d 	bl	8023d84 <_dtoa_r>
 8022cea:	0004      	movs	r4, r0
 8022cec:	2d47      	cmp	r5, #71	@ 0x47
 8022cee:	d11b      	bne.n	8022d28 <__cvt+0x90>
 8022cf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022cf2:	07db      	lsls	r3, r3, #31
 8022cf4:	d511      	bpl.n	8022d1a <__cvt+0x82>
 8022cf6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022cf8:	18c3      	adds	r3, r0, r3
 8022cfa:	9307      	str	r3, [sp, #28]
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	2300      	movs	r3, #0
 8022d00:	0030      	movs	r0, r6
 8022d02:	0039      	movs	r1, r7
 8022d04:	f7dd fbd4 	bl	80004b0 <__aeabi_dcmpeq>
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	d001      	beq.n	8022d10 <__cvt+0x78>
 8022d0c:	9b07      	ldr	r3, [sp, #28]
 8022d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d10:	2230      	movs	r2, #48	@ 0x30
 8022d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d14:	9907      	ldr	r1, [sp, #28]
 8022d16:	428b      	cmp	r3, r1
 8022d18:	d320      	bcc.n	8022d5c <__cvt+0xc4>
 8022d1a:	0020      	movs	r0, r4
 8022d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022d20:	1b1b      	subs	r3, r3, r4
 8022d22:	6013      	str	r3, [r2, #0]
 8022d24:	b00b      	add	sp, #44	@ 0x2c
 8022d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d2a:	18c3      	adds	r3, r0, r3
 8022d2c:	9307      	str	r3, [sp, #28]
 8022d2e:	2d46      	cmp	r5, #70	@ 0x46
 8022d30:	d1e4      	bne.n	8022cfc <__cvt+0x64>
 8022d32:	7803      	ldrb	r3, [r0, #0]
 8022d34:	2b30      	cmp	r3, #48	@ 0x30
 8022d36:	d10c      	bne.n	8022d52 <__cvt+0xba>
 8022d38:	2200      	movs	r2, #0
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	0030      	movs	r0, r6
 8022d3e:	0039      	movs	r1, r7
 8022d40:	f7dd fbb6 	bl	80004b0 <__aeabi_dcmpeq>
 8022d44:	2800      	cmp	r0, #0
 8022d46:	d104      	bne.n	8022d52 <__cvt+0xba>
 8022d48:	2301      	movs	r3, #1
 8022d4a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022d4c:	1a9b      	subs	r3, r3, r2
 8022d4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022d50:	6013      	str	r3, [r2, #0]
 8022d52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022d54:	9a07      	ldr	r2, [sp, #28]
 8022d56:	681b      	ldr	r3, [r3, #0]
 8022d58:	18d3      	adds	r3, r2, r3
 8022d5a:	e7ce      	b.n	8022cfa <__cvt+0x62>
 8022d5c:	1c59      	adds	r1, r3, #1
 8022d5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8022d60:	701a      	strb	r2, [r3, #0]
 8022d62:	e7d6      	b.n	8022d12 <__cvt+0x7a>

08022d64 <__exponent>:
 8022d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d66:	232b      	movs	r3, #43	@ 0x2b
 8022d68:	0005      	movs	r5, r0
 8022d6a:	000c      	movs	r4, r1
 8022d6c:	b085      	sub	sp, #20
 8022d6e:	7002      	strb	r2, [r0, #0]
 8022d70:	2900      	cmp	r1, #0
 8022d72:	da01      	bge.n	8022d78 <__exponent+0x14>
 8022d74:	424c      	negs	r4, r1
 8022d76:	3302      	adds	r3, #2
 8022d78:	706b      	strb	r3, [r5, #1]
 8022d7a:	2c09      	cmp	r4, #9
 8022d7c:	dd2c      	ble.n	8022dd8 <__exponent+0x74>
 8022d7e:	ab02      	add	r3, sp, #8
 8022d80:	1dde      	adds	r6, r3, #7
 8022d82:	0020      	movs	r0, r4
 8022d84:	210a      	movs	r1, #10
 8022d86:	f7dd fb7d 	bl	8000484 <__aeabi_idivmod>
 8022d8a:	0037      	movs	r7, r6
 8022d8c:	3130      	adds	r1, #48	@ 0x30
 8022d8e:	3e01      	subs	r6, #1
 8022d90:	0020      	movs	r0, r4
 8022d92:	7031      	strb	r1, [r6, #0]
 8022d94:	210a      	movs	r1, #10
 8022d96:	9401      	str	r4, [sp, #4]
 8022d98:	f7dd fa8e 	bl	80002b8 <__divsi3>
 8022d9c:	9b01      	ldr	r3, [sp, #4]
 8022d9e:	0004      	movs	r4, r0
 8022da0:	2b63      	cmp	r3, #99	@ 0x63
 8022da2:	dcee      	bgt.n	8022d82 <__exponent+0x1e>
 8022da4:	1eba      	subs	r2, r7, #2
 8022da6:	1ca8      	adds	r0, r5, #2
 8022da8:	0001      	movs	r1, r0
 8022daa:	0013      	movs	r3, r2
 8022dac:	3430      	adds	r4, #48	@ 0x30
 8022dae:	7014      	strb	r4, [r2, #0]
 8022db0:	ac02      	add	r4, sp, #8
 8022db2:	3407      	adds	r4, #7
 8022db4:	429c      	cmp	r4, r3
 8022db6:	d80a      	bhi.n	8022dce <__exponent+0x6a>
 8022db8:	2300      	movs	r3, #0
 8022dba:	42a2      	cmp	r2, r4
 8022dbc:	d803      	bhi.n	8022dc6 <__exponent+0x62>
 8022dbe:	3309      	adds	r3, #9
 8022dc0:	aa02      	add	r2, sp, #8
 8022dc2:	189b      	adds	r3, r3, r2
 8022dc4:	1bdb      	subs	r3, r3, r7
 8022dc6:	18c0      	adds	r0, r0, r3
 8022dc8:	1b40      	subs	r0, r0, r5
 8022dca:	b005      	add	sp, #20
 8022dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dce:	781c      	ldrb	r4, [r3, #0]
 8022dd0:	3301      	adds	r3, #1
 8022dd2:	700c      	strb	r4, [r1, #0]
 8022dd4:	3101      	adds	r1, #1
 8022dd6:	e7eb      	b.n	8022db0 <__exponent+0x4c>
 8022dd8:	2330      	movs	r3, #48	@ 0x30
 8022dda:	18e4      	adds	r4, r4, r3
 8022ddc:	70ab      	strb	r3, [r5, #2]
 8022dde:	1d28      	adds	r0, r5, #4
 8022de0:	70ec      	strb	r4, [r5, #3]
 8022de2:	e7f1      	b.n	8022dc8 <__exponent+0x64>

08022de4 <_printf_float>:
 8022de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022de6:	b097      	sub	sp, #92	@ 0x5c
 8022de8:	000d      	movs	r5, r1
 8022dea:	920a      	str	r2, [sp, #40]	@ 0x28
 8022dec:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022df0:	9009      	str	r0, [sp, #36]	@ 0x24
 8022df2:	f000 fe9f 	bl	8023b34 <_localeconv_r>
 8022df6:	6803      	ldr	r3, [r0, #0]
 8022df8:	0018      	movs	r0, r3
 8022dfa:	930d      	str	r3, [sp, #52]	@ 0x34
 8022dfc:	f7dd f9b6 	bl	800016c <strlen>
 8022e00:	2300      	movs	r3, #0
 8022e02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022e04:	9314      	str	r3, [sp, #80]	@ 0x50
 8022e06:	7e2b      	ldrb	r3, [r5, #24]
 8022e08:	2207      	movs	r2, #7
 8022e0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8022e0c:	682b      	ldr	r3, [r5, #0]
 8022e0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022e10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022e12:	6823      	ldr	r3, [r4, #0]
 8022e14:	05c9      	lsls	r1, r1, #23
 8022e16:	d545      	bpl.n	8022ea4 <_printf_float+0xc0>
 8022e18:	189b      	adds	r3, r3, r2
 8022e1a:	4393      	bics	r3, r2
 8022e1c:	001a      	movs	r2, r3
 8022e1e:	3208      	adds	r2, #8
 8022e20:	6022      	str	r2, [r4, #0]
 8022e22:	2201      	movs	r2, #1
 8022e24:	681e      	ldr	r6, [r3, #0]
 8022e26:	685f      	ldr	r7, [r3, #4]
 8022e28:	007b      	lsls	r3, r7, #1
 8022e2a:	085b      	lsrs	r3, r3, #1
 8022e2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8022e2e:	9610      	str	r6, [sp, #64]	@ 0x40
 8022e30:	64ae      	str	r6, [r5, #72]	@ 0x48
 8022e32:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8022e34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022e36:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022e38:	4ba7      	ldr	r3, [pc, #668]	@ (80230d8 <_printf_float+0x2f4>)
 8022e3a:	4252      	negs	r2, r2
 8022e3c:	f7e0 fa62 	bl	8003304 <__aeabi_dcmpun>
 8022e40:	2800      	cmp	r0, #0
 8022e42:	d131      	bne.n	8022ea8 <_printf_float+0xc4>
 8022e44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022e46:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022e48:	2201      	movs	r2, #1
 8022e4a:	4ba3      	ldr	r3, [pc, #652]	@ (80230d8 <_printf_float+0x2f4>)
 8022e4c:	4252      	negs	r2, r2
 8022e4e:	f7dd fb3f 	bl	80004d0 <__aeabi_dcmple>
 8022e52:	2800      	cmp	r0, #0
 8022e54:	d128      	bne.n	8022ea8 <_printf_float+0xc4>
 8022e56:	2200      	movs	r2, #0
 8022e58:	2300      	movs	r3, #0
 8022e5a:	0030      	movs	r0, r6
 8022e5c:	0039      	movs	r1, r7
 8022e5e:	f7dd fb2d 	bl	80004bc <__aeabi_dcmplt>
 8022e62:	2800      	cmp	r0, #0
 8022e64:	d003      	beq.n	8022e6e <_printf_float+0x8a>
 8022e66:	002b      	movs	r3, r5
 8022e68:	222d      	movs	r2, #45	@ 0x2d
 8022e6a:	3343      	adds	r3, #67	@ 0x43
 8022e6c:	701a      	strb	r2, [r3, #0]
 8022e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022e70:	4f9a      	ldr	r7, [pc, #616]	@ (80230dc <_printf_float+0x2f8>)
 8022e72:	2b47      	cmp	r3, #71	@ 0x47
 8022e74:	d900      	bls.n	8022e78 <_printf_float+0x94>
 8022e76:	4f9a      	ldr	r7, [pc, #616]	@ (80230e0 <_printf_float+0x2fc>)
 8022e78:	2303      	movs	r3, #3
 8022e7a:	2400      	movs	r4, #0
 8022e7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022e7e:	612b      	str	r3, [r5, #16]
 8022e80:	3301      	adds	r3, #1
 8022e82:	439a      	bics	r2, r3
 8022e84:	602a      	str	r2, [r5, #0]
 8022e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e88:	0029      	movs	r1, r5
 8022e8a:	9300      	str	r3, [sp, #0]
 8022e8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e90:	aa15      	add	r2, sp, #84	@ 0x54
 8022e92:	f000 f9e5 	bl	8023260 <_printf_common>
 8022e96:	3001      	adds	r0, #1
 8022e98:	d000      	beq.n	8022e9c <_printf_float+0xb8>
 8022e9a:	e09f      	b.n	8022fdc <_printf_float+0x1f8>
 8022e9c:	2001      	movs	r0, #1
 8022e9e:	4240      	negs	r0, r0
 8022ea0:	b017      	add	sp, #92	@ 0x5c
 8022ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ea4:	3307      	adds	r3, #7
 8022ea6:	e7b8      	b.n	8022e1a <_printf_float+0x36>
 8022ea8:	0032      	movs	r2, r6
 8022eaa:	003b      	movs	r3, r7
 8022eac:	0030      	movs	r0, r6
 8022eae:	0039      	movs	r1, r7
 8022eb0:	f7e0 fa28 	bl	8003304 <__aeabi_dcmpun>
 8022eb4:	2800      	cmp	r0, #0
 8022eb6:	d00b      	beq.n	8022ed0 <_printf_float+0xec>
 8022eb8:	2f00      	cmp	r7, #0
 8022eba:	da03      	bge.n	8022ec4 <_printf_float+0xe0>
 8022ebc:	002b      	movs	r3, r5
 8022ebe:	222d      	movs	r2, #45	@ 0x2d
 8022ec0:	3343      	adds	r3, #67	@ 0x43
 8022ec2:	701a      	strb	r2, [r3, #0]
 8022ec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ec6:	4f87      	ldr	r7, [pc, #540]	@ (80230e4 <_printf_float+0x300>)
 8022ec8:	2b47      	cmp	r3, #71	@ 0x47
 8022eca:	d9d5      	bls.n	8022e78 <_printf_float+0x94>
 8022ecc:	4f86      	ldr	r7, [pc, #536]	@ (80230e8 <_printf_float+0x304>)
 8022ece:	e7d3      	b.n	8022e78 <_printf_float+0x94>
 8022ed0:	2220      	movs	r2, #32
 8022ed2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022ed4:	686b      	ldr	r3, [r5, #4]
 8022ed6:	4394      	bics	r4, r2
 8022ed8:	1c5a      	adds	r2, r3, #1
 8022eda:	d146      	bne.n	8022f6a <_printf_float+0x186>
 8022edc:	3307      	adds	r3, #7
 8022ede:	606b      	str	r3, [r5, #4]
 8022ee0:	2380      	movs	r3, #128	@ 0x80
 8022ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022ee4:	00db      	lsls	r3, r3, #3
 8022ee6:	4313      	orrs	r3, r2
 8022ee8:	2200      	movs	r2, #0
 8022eea:	602b      	str	r3, [r5, #0]
 8022eec:	9206      	str	r2, [sp, #24]
 8022eee:	aa14      	add	r2, sp, #80	@ 0x50
 8022ef0:	9205      	str	r2, [sp, #20]
 8022ef2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022ef4:	a90a      	add	r1, sp, #40	@ 0x28
 8022ef6:	9204      	str	r2, [sp, #16]
 8022ef8:	aa13      	add	r2, sp, #76	@ 0x4c
 8022efa:	9203      	str	r2, [sp, #12]
 8022efc:	2223      	movs	r2, #35	@ 0x23
 8022efe:	1852      	adds	r2, r2, r1
 8022f00:	9202      	str	r2, [sp, #8]
 8022f02:	9301      	str	r3, [sp, #4]
 8022f04:	686b      	ldr	r3, [r5, #4]
 8022f06:	0032      	movs	r2, r6
 8022f08:	9300      	str	r3, [sp, #0]
 8022f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f0c:	003b      	movs	r3, r7
 8022f0e:	f7ff fec3 	bl	8022c98 <__cvt>
 8022f12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022f14:	0007      	movs	r7, r0
 8022f16:	2c47      	cmp	r4, #71	@ 0x47
 8022f18:	d12d      	bne.n	8022f76 <_printf_float+0x192>
 8022f1a:	1cd3      	adds	r3, r2, #3
 8022f1c:	db02      	blt.n	8022f24 <_printf_float+0x140>
 8022f1e:	686b      	ldr	r3, [r5, #4]
 8022f20:	429a      	cmp	r2, r3
 8022f22:	dd48      	ble.n	8022fb6 <_printf_float+0x1d2>
 8022f24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f26:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022f28:	3b02      	subs	r3, #2
 8022f2a:	b2db      	uxtb	r3, r3
 8022f2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022f2e:	0028      	movs	r0, r5
 8022f30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022f32:	3901      	subs	r1, #1
 8022f34:	3050      	adds	r0, #80	@ 0x50
 8022f36:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022f38:	f7ff ff14 	bl	8022d64 <__exponent>
 8022f3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022f3e:	0004      	movs	r4, r0
 8022f40:	1813      	adds	r3, r2, r0
 8022f42:	612b      	str	r3, [r5, #16]
 8022f44:	2a01      	cmp	r2, #1
 8022f46:	dc02      	bgt.n	8022f4e <_printf_float+0x16a>
 8022f48:	682a      	ldr	r2, [r5, #0]
 8022f4a:	07d2      	lsls	r2, r2, #31
 8022f4c:	d501      	bpl.n	8022f52 <_printf_float+0x16e>
 8022f4e:	3301      	adds	r3, #1
 8022f50:	612b      	str	r3, [r5, #16]
 8022f52:	2323      	movs	r3, #35	@ 0x23
 8022f54:	aa0a      	add	r2, sp, #40	@ 0x28
 8022f56:	189b      	adds	r3, r3, r2
 8022f58:	781b      	ldrb	r3, [r3, #0]
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d100      	bne.n	8022f60 <_printf_float+0x17c>
 8022f5e:	e792      	b.n	8022e86 <_printf_float+0xa2>
 8022f60:	002b      	movs	r3, r5
 8022f62:	222d      	movs	r2, #45	@ 0x2d
 8022f64:	3343      	adds	r3, #67	@ 0x43
 8022f66:	701a      	strb	r2, [r3, #0]
 8022f68:	e78d      	b.n	8022e86 <_printf_float+0xa2>
 8022f6a:	2c47      	cmp	r4, #71	@ 0x47
 8022f6c:	d1b8      	bne.n	8022ee0 <_printf_float+0xfc>
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	d1b6      	bne.n	8022ee0 <_printf_float+0xfc>
 8022f72:	3301      	adds	r3, #1
 8022f74:	e7b3      	b.n	8022ede <_printf_float+0xfa>
 8022f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f78:	0011      	movs	r1, r2
 8022f7a:	2b65      	cmp	r3, #101	@ 0x65
 8022f7c:	d9d7      	bls.n	8022f2e <_printf_float+0x14a>
 8022f7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f80:	2b66      	cmp	r3, #102	@ 0x66
 8022f82:	d11a      	bne.n	8022fba <_printf_float+0x1d6>
 8022f84:	686b      	ldr	r3, [r5, #4]
 8022f86:	2a00      	cmp	r2, #0
 8022f88:	dd09      	ble.n	8022f9e <_printf_float+0x1ba>
 8022f8a:	612a      	str	r2, [r5, #16]
 8022f8c:	2b00      	cmp	r3, #0
 8022f8e:	d102      	bne.n	8022f96 <_printf_float+0x1b2>
 8022f90:	6829      	ldr	r1, [r5, #0]
 8022f92:	07c9      	lsls	r1, r1, #31
 8022f94:	d50b      	bpl.n	8022fae <_printf_float+0x1ca>
 8022f96:	3301      	adds	r3, #1
 8022f98:	189b      	adds	r3, r3, r2
 8022f9a:	612b      	str	r3, [r5, #16]
 8022f9c:	e007      	b.n	8022fae <_printf_float+0x1ca>
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d103      	bne.n	8022faa <_printf_float+0x1c6>
 8022fa2:	2201      	movs	r2, #1
 8022fa4:	6829      	ldr	r1, [r5, #0]
 8022fa6:	4211      	tst	r1, r2
 8022fa8:	d000      	beq.n	8022fac <_printf_float+0x1c8>
 8022faa:	1c9a      	adds	r2, r3, #2
 8022fac:	612a      	str	r2, [r5, #16]
 8022fae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022fb0:	2400      	movs	r4, #0
 8022fb2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8022fb4:	e7cd      	b.n	8022f52 <_printf_float+0x16e>
 8022fb6:	2367      	movs	r3, #103	@ 0x67
 8022fb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022fbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022fbe:	4299      	cmp	r1, r3
 8022fc0:	db06      	blt.n	8022fd0 <_printf_float+0x1ec>
 8022fc2:	682b      	ldr	r3, [r5, #0]
 8022fc4:	6129      	str	r1, [r5, #16]
 8022fc6:	07db      	lsls	r3, r3, #31
 8022fc8:	d5f1      	bpl.n	8022fae <_printf_float+0x1ca>
 8022fca:	3101      	adds	r1, #1
 8022fcc:	6129      	str	r1, [r5, #16]
 8022fce:	e7ee      	b.n	8022fae <_printf_float+0x1ca>
 8022fd0:	2201      	movs	r2, #1
 8022fd2:	2900      	cmp	r1, #0
 8022fd4:	dce0      	bgt.n	8022f98 <_printf_float+0x1b4>
 8022fd6:	1892      	adds	r2, r2, r2
 8022fd8:	1a52      	subs	r2, r2, r1
 8022fda:	e7dd      	b.n	8022f98 <_printf_float+0x1b4>
 8022fdc:	682a      	ldr	r2, [r5, #0]
 8022fde:	0553      	lsls	r3, r2, #21
 8022fe0:	d408      	bmi.n	8022ff4 <_printf_float+0x210>
 8022fe2:	692b      	ldr	r3, [r5, #16]
 8022fe4:	003a      	movs	r2, r7
 8022fe6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022fe8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022fea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022fec:	47a0      	blx	r4
 8022fee:	3001      	adds	r0, #1
 8022ff0:	d129      	bne.n	8023046 <_printf_float+0x262>
 8022ff2:	e753      	b.n	8022e9c <_printf_float+0xb8>
 8022ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ff6:	2b65      	cmp	r3, #101	@ 0x65
 8022ff8:	d800      	bhi.n	8022ffc <_printf_float+0x218>
 8022ffa:	e0da      	b.n	80231b2 <_printf_float+0x3ce>
 8022ffc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8022ffe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8023000:	2200      	movs	r2, #0
 8023002:	2300      	movs	r3, #0
 8023004:	f7dd fa54 	bl	80004b0 <__aeabi_dcmpeq>
 8023008:	2800      	cmp	r0, #0
 802300a:	d033      	beq.n	8023074 <_printf_float+0x290>
 802300c:	2301      	movs	r3, #1
 802300e:	4a37      	ldr	r2, [pc, #220]	@ (80230ec <_printf_float+0x308>)
 8023010:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023014:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023016:	47a0      	blx	r4
 8023018:	3001      	adds	r0, #1
 802301a:	d100      	bne.n	802301e <_printf_float+0x23a>
 802301c:	e73e      	b.n	8022e9c <_printf_float+0xb8>
 802301e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8023020:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023022:	42b3      	cmp	r3, r6
 8023024:	db02      	blt.n	802302c <_printf_float+0x248>
 8023026:	682b      	ldr	r3, [r5, #0]
 8023028:	07db      	lsls	r3, r3, #31
 802302a:	d50c      	bpl.n	8023046 <_printf_float+0x262>
 802302c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802302e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023036:	47a0      	blx	r4
 8023038:	2400      	movs	r4, #0
 802303a:	3001      	adds	r0, #1
 802303c:	d100      	bne.n	8023040 <_printf_float+0x25c>
 802303e:	e72d      	b.n	8022e9c <_printf_float+0xb8>
 8023040:	1e73      	subs	r3, r6, #1
 8023042:	42a3      	cmp	r3, r4
 8023044:	dc0a      	bgt.n	802305c <_printf_float+0x278>
 8023046:	682b      	ldr	r3, [r5, #0]
 8023048:	079b      	lsls	r3, r3, #30
 802304a:	d500      	bpl.n	802304e <_printf_float+0x26a>
 802304c:	e105      	b.n	802325a <_printf_float+0x476>
 802304e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023050:	68e8      	ldr	r0, [r5, #12]
 8023052:	4298      	cmp	r0, r3
 8023054:	db00      	blt.n	8023058 <_printf_float+0x274>
 8023056:	e723      	b.n	8022ea0 <_printf_float+0xbc>
 8023058:	0018      	movs	r0, r3
 802305a:	e721      	b.n	8022ea0 <_printf_float+0xbc>
 802305c:	002a      	movs	r2, r5
 802305e:	2301      	movs	r3, #1
 8023060:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023064:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023066:	321a      	adds	r2, #26
 8023068:	47b8      	blx	r7
 802306a:	3001      	adds	r0, #1
 802306c:	d100      	bne.n	8023070 <_printf_float+0x28c>
 802306e:	e715      	b.n	8022e9c <_printf_float+0xb8>
 8023070:	3401      	adds	r4, #1
 8023072:	e7e5      	b.n	8023040 <_printf_float+0x25c>
 8023074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023076:	2b00      	cmp	r3, #0
 8023078:	dc3a      	bgt.n	80230f0 <_printf_float+0x30c>
 802307a:	2301      	movs	r3, #1
 802307c:	4a1b      	ldr	r2, [pc, #108]	@ (80230ec <_printf_float+0x308>)
 802307e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023080:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023082:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023084:	47a0      	blx	r4
 8023086:	3001      	adds	r0, #1
 8023088:	d100      	bne.n	802308c <_printf_float+0x2a8>
 802308a:	e707      	b.n	8022e9c <_printf_float+0xb8>
 802308c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802308e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023090:	4333      	orrs	r3, r6
 8023092:	d102      	bne.n	802309a <_printf_float+0x2b6>
 8023094:	682b      	ldr	r3, [r5, #0]
 8023096:	07db      	lsls	r3, r3, #31
 8023098:	d5d5      	bpl.n	8023046 <_printf_float+0x262>
 802309a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802309c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802309e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230a2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80230a4:	47a0      	blx	r4
 80230a6:	2300      	movs	r3, #0
 80230a8:	3001      	adds	r0, #1
 80230aa:	d100      	bne.n	80230ae <_printf_float+0x2ca>
 80230ac:	e6f6      	b.n	8022e9c <_printf_float+0xb8>
 80230ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80230b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80230b4:	425b      	negs	r3, r3
 80230b6:	4293      	cmp	r3, r2
 80230b8:	dc01      	bgt.n	80230be <_printf_float+0x2da>
 80230ba:	0033      	movs	r3, r6
 80230bc:	e792      	b.n	8022fe4 <_printf_float+0x200>
 80230be:	002a      	movs	r2, r5
 80230c0:	2301      	movs	r3, #1
 80230c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80230c8:	321a      	adds	r2, #26
 80230ca:	47a0      	blx	r4
 80230cc:	3001      	adds	r0, #1
 80230ce:	d100      	bne.n	80230d2 <_printf_float+0x2ee>
 80230d0:	e6e4      	b.n	8022e9c <_printf_float+0xb8>
 80230d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230d4:	3301      	adds	r3, #1
 80230d6:	e7ea      	b.n	80230ae <_printf_float+0x2ca>
 80230d8:	7fefffff 	.word	0x7fefffff
 80230dc:	0802b861 	.word	0x0802b861
 80230e0:	0802b865 	.word	0x0802b865
 80230e4:	0802b869 	.word	0x0802b869
 80230e8:	0802b86d 	.word	0x0802b86d
 80230ec:	0802b871 	.word	0x0802b871
 80230f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80230f2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80230f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80230f6:	429e      	cmp	r6, r3
 80230f8:	dd00      	ble.n	80230fc <_printf_float+0x318>
 80230fa:	001e      	movs	r6, r3
 80230fc:	2e00      	cmp	r6, #0
 80230fe:	dc31      	bgt.n	8023164 <_printf_float+0x380>
 8023100:	43f3      	mvns	r3, r6
 8023102:	2400      	movs	r4, #0
 8023104:	17db      	asrs	r3, r3, #31
 8023106:	4033      	ands	r3, r6
 8023108:	930e      	str	r3, [sp, #56]	@ 0x38
 802310a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802310c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802310e:	1af3      	subs	r3, r6, r3
 8023110:	42a3      	cmp	r3, r4
 8023112:	dc30      	bgt.n	8023176 <_printf_float+0x392>
 8023114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023116:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023118:	429a      	cmp	r2, r3
 802311a:	dc38      	bgt.n	802318e <_printf_float+0x3aa>
 802311c:	682b      	ldr	r3, [r5, #0]
 802311e:	07db      	lsls	r3, r3, #31
 8023120:	d435      	bmi.n	802318e <_printf_float+0x3aa>
 8023122:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023126:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023128:	1b9b      	subs	r3, r3, r6
 802312a:	1b14      	subs	r4, r2, r4
 802312c:	429c      	cmp	r4, r3
 802312e:	dd00      	ble.n	8023132 <_printf_float+0x34e>
 8023130:	001c      	movs	r4, r3
 8023132:	2c00      	cmp	r4, #0
 8023134:	dc34      	bgt.n	80231a0 <_printf_float+0x3bc>
 8023136:	43e3      	mvns	r3, r4
 8023138:	2600      	movs	r6, #0
 802313a:	17db      	asrs	r3, r3, #31
 802313c:	401c      	ands	r4, r3
 802313e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023140:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023142:	1ad3      	subs	r3, r2, r3
 8023144:	1b1b      	subs	r3, r3, r4
 8023146:	42b3      	cmp	r3, r6
 8023148:	dc00      	bgt.n	802314c <_printf_float+0x368>
 802314a:	e77c      	b.n	8023046 <_printf_float+0x262>
 802314c:	002a      	movs	r2, r5
 802314e:	2301      	movs	r3, #1
 8023150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023154:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023156:	321a      	adds	r2, #26
 8023158:	47b8      	blx	r7
 802315a:	3001      	adds	r0, #1
 802315c:	d100      	bne.n	8023160 <_printf_float+0x37c>
 802315e:	e69d      	b.n	8022e9c <_printf_float+0xb8>
 8023160:	3601      	adds	r6, #1
 8023162:	e7ec      	b.n	802313e <_printf_float+0x35a>
 8023164:	0033      	movs	r3, r6
 8023166:	003a      	movs	r2, r7
 8023168:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802316a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802316c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802316e:	47a0      	blx	r4
 8023170:	3001      	adds	r0, #1
 8023172:	d1c5      	bne.n	8023100 <_printf_float+0x31c>
 8023174:	e692      	b.n	8022e9c <_printf_float+0xb8>
 8023176:	002a      	movs	r2, r5
 8023178:	2301      	movs	r3, #1
 802317a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802317c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802317e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023180:	321a      	adds	r2, #26
 8023182:	47b0      	blx	r6
 8023184:	3001      	adds	r0, #1
 8023186:	d100      	bne.n	802318a <_printf_float+0x3a6>
 8023188:	e688      	b.n	8022e9c <_printf_float+0xb8>
 802318a:	3401      	adds	r4, #1
 802318c:	e7bd      	b.n	802310a <_printf_float+0x326>
 802318e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023190:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023192:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023196:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023198:	47a0      	blx	r4
 802319a:	3001      	adds	r0, #1
 802319c:	d1c1      	bne.n	8023122 <_printf_float+0x33e>
 802319e:	e67d      	b.n	8022e9c <_printf_float+0xb8>
 80231a0:	19ba      	adds	r2, r7, r6
 80231a2:	0023      	movs	r3, r4
 80231a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80231aa:	47b0      	blx	r6
 80231ac:	3001      	adds	r0, #1
 80231ae:	d1c2      	bne.n	8023136 <_printf_float+0x352>
 80231b0:	e674      	b.n	8022e9c <_printf_float+0xb8>
 80231b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80231b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80231b6:	2b01      	cmp	r3, #1
 80231b8:	dc02      	bgt.n	80231c0 <_printf_float+0x3dc>
 80231ba:	2301      	movs	r3, #1
 80231bc:	421a      	tst	r2, r3
 80231be:	d039      	beq.n	8023234 <_printf_float+0x450>
 80231c0:	2301      	movs	r3, #1
 80231c2:	003a      	movs	r2, r7
 80231c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80231ca:	47b0      	blx	r6
 80231cc:	3001      	adds	r0, #1
 80231ce:	d100      	bne.n	80231d2 <_printf_float+0x3ee>
 80231d0:	e664      	b.n	8022e9c <_printf_float+0xb8>
 80231d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80231d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80231d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231da:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80231dc:	47b0      	blx	r6
 80231de:	3001      	adds	r0, #1
 80231e0:	d100      	bne.n	80231e4 <_printf_float+0x400>
 80231e2:	e65b      	b.n	8022e9c <_printf_float+0xb8>
 80231e4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80231e6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80231e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231ea:	2200      	movs	r2, #0
 80231ec:	3b01      	subs	r3, #1
 80231ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80231f0:	2300      	movs	r3, #0
 80231f2:	f7dd f95d 	bl	80004b0 <__aeabi_dcmpeq>
 80231f6:	2800      	cmp	r0, #0
 80231f8:	d11a      	bne.n	8023230 <_printf_float+0x44c>
 80231fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231fc:	1c7a      	adds	r2, r7, #1
 80231fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023200:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023202:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023204:	47b0      	blx	r6
 8023206:	3001      	adds	r0, #1
 8023208:	d10e      	bne.n	8023228 <_printf_float+0x444>
 802320a:	e647      	b.n	8022e9c <_printf_float+0xb8>
 802320c:	002a      	movs	r2, r5
 802320e:	2301      	movs	r3, #1
 8023210:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023214:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023216:	321a      	adds	r2, #26
 8023218:	47b8      	blx	r7
 802321a:	3001      	adds	r0, #1
 802321c:	d100      	bne.n	8023220 <_printf_float+0x43c>
 802321e:	e63d      	b.n	8022e9c <_printf_float+0xb8>
 8023220:	3601      	adds	r6, #1
 8023222:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023224:	429e      	cmp	r6, r3
 8023226:	dbf1      	blt.n	802320c <_printf_float+0x428>
 8023228:	002a      	movs	r2, r5
 802322a:	0023      	movs	r3, r4
 802322c:	3250      	adds	r2, #80	@ 0x50
 802322e:	e6da      	b.n	8022fe6 <_printf_float+0x202>
 8023230:	2600      	movs	r6, #0
 8023232:	e7f6      	b.n	8023222 <_printf_float+0x43e>
 8023234:	003a      	movs	r2, r7
 8023236:	e7e2      	b.n	80231fe <_printf_float+0x41a>
 8023238:	002a      	movs	r2, r5
 802323a:	2301      	movs	r3, #1
 802323c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802323e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023240:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023242:	3219      	adds	r2, #25
 8023244:	47b0      	blx	r6
 8023246:	3001      	adds	r0, #1
 8023248:	d100      	bne.n	802324c <_printf_float+0x468>
 802324a:	e627      	b.n	8022e9c <_printf_float+0xb8>
 802324c:	3401      	adds	r4, #1
 802324e:	68eb      	ldr	r3, [r5, #12]
 8023250:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023252:	1a9b      	subs	r3, r3, r2
 8023254:	42a3      	cmp	r3, r4
 8023256:	dcef      	bgt.n	8023238 <_printf_float+0x454>
 8023258:	e6f9      	b.n	802304e <_printf_float+0x26a>
 802325a:	2400      	movs	r4, #0
 802325c:	e7f7      	b.n	802324e <_printf_float+0x46a>
 802325e:	46c0      	nop			@ (mov r8, r8)

08023260 <_printf_common>:
 8023260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023262:	0016      	movs	r6, r2
 8023264:	9301      	str	r3, [sp, #4]
 8023266:	688a      	ldr	r2, [r1, #8]
 8023268:	690b      	ldr	r3, [r1, #16]
 802326a:	000c      	movs	r4, r1
 802326c:	9000      	str	r0, [sp, #0]
 802326e:	4293      	cmp	r3, r2
 8023270:	da00      	bge.n	8023274 <_printf_common+0x14>
 8023272:	0013      	movs	r3, r2
 8023274:	0022      	movs	r2, r4
 8023276:	6033      	str	r3, [r6, #0]
 8023278:	3243      	adds	r2, #67	@ 0x43
 802327a:	7812      	ldrb	r2, [r2, #0]
 802327c:	2a00      	cmp	r2, #0
 802327e:	d001      	beq.n	8023284 <_printf_common+0x24>
 8023280:	3301      	adds	r3, #1
 8023282:	6033      	str	r3, [r6, #0]
 8023284:	6823      	ldr	r3, [r4, #0]
 8023286:	069b      	lsls	r3, r3, #26
 8023288:	d502      	bpl.n	8023290 <_printf_common+0x30>
 802328a:	6833      	ldr	r3, [r6, #0]
 802328c:	3302      	adds	r3, #2
 802328e:	6033      	str	r3, [r6, #0]
 8023290:	6822      	ldr	r2, [r4, #0]
 8023292:	2306      	movs	r3, #6
 8023294:	0015      	movs	r5, r2
 8023296:	401d      	ands	r5, r3
 8023298:	421a      	tst	r2, r3
 802329a:	d027      	beq.n	80232ec <_printf_common+0x8c>
 802329c:	0023      	movs	r3, r4
 802329e:	3343      	adds	r3, #67	@ 0x43
 80232a0:	781b      	ldrb	r3, [r3, #0]
 80232a2:	1e5a      	subs	r2, r3, #1
 80232a4:	4193      	sbcs	r3, r2
 80232a6:	6822      	ldr	r2, [r4, #0]
 80232a8:	0692      	lsls	r2, r2, #26
 80232aa:	d430      	bmi.n	802330e <_printf_common+0xae>
 80232ac:	0022      	movs	r2, r4
 80232ae:	9901      	ldr	r1, [sp, #4]
 80232b0:	9800      	ldr	r0, [sp, #0]
 80232b2:	9d08      	ldr	r5, [sp, #32]
 80232b4:	3243      	adds	r2, #67	@ 0x43
 80232b6:	47a8      	blx	r5
 80232b8:	3001      	adds	r0, #1
 80232ba:	d025      	beq.n	8023308 <_printf_common+0xa8>
 80232bc:	2206      	movs	r2, #6
 80232be:	6823      	ldr	r3, [r4, #0]
 80232c0:	2500      	movs	r5, #0
 80232c2:	4013      	ands	r3, r2
 80232c4:	2b04      	cmp	r3, #4
 80232c6:	d105      	bne.n	80232d4 <_printf_common+0x74>
 80232c8:	6833      	ldr	r3, [r6, #0]
 80232ca:	68e5      	ldr	r5, [r4, #12]
 80232cc:	1aed      	subs	r5, r5, r3
 80232ce:	43eb      	mvns	r3, r5
 80232d0:	17db      	asrs	r3, r3, #31
 80232d2:	401d      	ands	r5, r3
 80232d4:	68a3      	ldr	r3, [r4, #8]
 80232d6:	6922      	ldr	r2, [r4, #16]
 80232d8:	4293      	cmp	r3, r2
 80232da:	dd01      	ble.n	80232e0 <_printf_common+0x80>
 80232dc:	1a9b      	subs	r3, r3, r2
 80232de:	18ed      	adds	r5, r5, r3
 80232e0:	2600      	movs	r6, #0
 80232e2:	42b5      	cmp	r5, r6
 80232e4:	d120      	bne.n	8023328 <_printf_common+0xc8>
 80232e6:	2000      	movs	r0, #0
 80232e8:	e010      	b.n	802330c <_printf_common+0xac>
 80232ea:	3501      	adds	r5, #1
 80232ec:	68e3      	ldr	r3, [r4, #12]
 80232ee:	6832      	ldr	r2, [r6, #0]
 80232f0:	1a9b      	subs	r3, r3, r2
 80232f2:	42ab      	cmp	r3, r5
 80232f4:	ddd2      	ble.n	802329c <_printf_common+0x3c>
 80232f6:	0022      	movs	r2, r4
 80232f8:	2301      	movs	r3, #1
 80232fa:	9901      	ldr	r1, [sp, #4]
 80232fc:	9800      	ldr	r0, [sp, #0]
 80232fe:	9f08      	ldr	r7, [sp, #32]
 8023300:	3219      	adds	r2, #25
 8023302:	47b8      	blx	r7
 8023304:	3001      	adds	r0, #1
 8023306:	d1f0      	bne.n	80232ea <_printf_common+0x8a>
 8023308:	2001      	movs	r0, #1
 802330a:	4240      	negs	r0, r0
 802330c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802330e:	2030      	movs	r0, #48	@ 0x30
 8023310:	18e1      	adds	r1, r4, r3
 8023312:	3143      	adds	r1, #67	@ 0x43
 8023314:	7008      	strb	r0, [r1, #0]
 8023316:	0021      	movs	r1, r4
 8023318:	1c5a      	adds	r2, r3, #1
 802331a:	3145      	adds	r1, #69	@ 0x45
 802331c:	7809      	ldrb	r1, [r1, #0]
 802331e:	18a2      	adds	r2, r4, r2
 8023320:	3243      	adds	r2, #67	@ 0x43
 8023322:	3302      	adds	r3, #2
 8023324:	7011      	strb	r1, [r2, #0]
 8023326:	e7c1      	b.n	80232ac <_printf_common+0x4c>
 8023328:	0022      	movs	r2, r4
 802332a:	2301      	movs	r3, #1
 802332c:	9901      	ldr	r1, [sp, #4]
 802332e:	9800      	ldr	r0, [sp, #0]
 8023330:	9f08      	ldr	r7, [sp, #32]
 8023332:	321a      	adds	r2, #26
 8023334:	47b8      	blx	r7
 8023336:	3001      	adds	r0, #1
 8023338:	d0e6      	beq.n	8023308 <_printf_common+0xa8>
 802333a:	3601      	adds	r6, #1
 802333c:	e7d1      	b.n	80232e2 <_printf_common+0x82>
	...

08023340 <_printf_i>:
 8023340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023342:	b08b      	sub	sp, #44	@ 0x2c
 8023344:	9206      	str	r2, [sp, #24]
 8023346:	000a      	movs	r2, r1
 8023348:	3243      	adds	r2, #67	@ 0x43
 802334a:	9307      	str	r3, [sp, #28]
 802334c:	9005      	str	r0, [sp, #20]
 802334e:	9203      	str	r2, [sp, #12]
 8023350:	7e0a      	ldrb	r2, [r1, #24]
 8023352:	000c      	movs	r4, r1
 8023354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023356:	2a78      	cmp	r2, #120	@ 0x78
 8023358:	d809      	bhi.n	802336e <_printf_i+0x2e>
 802335a:	2a62      	cmp	r2, #98	@ 0x62
 802335c:	d80b      	bhi.n	8023376 <_printf_i+0x36>
 802335e:	2a00      	cmp	r2, #0
 8023360:	d100      	bne.n	8023364 <_printf_i+0x24>
 8023362:	e0bc      	b.n	80234de <_printf_i+0x19e>
 8023364:	497b      	ldr	r1, [pc, #492]	@ (8023554 <_printf_i+0x214>)
 8023366:	9104      	str	r1, [sp, #16]
 8023368:	2a58      	cmp	r2, #88	@ 0x58
 802336a:	d100      	bne.n	802336e <_printf_i+0x2e>
 802336c:	e090      	b.n	8023490 <_printf_i+0x150>
 802336e:	0025      	movs	r5, r4
 8023370:	3542      	adds	r5, #66	@ 0x42
 8023372:	702a      	strb	r2, [r5, #0]
 8023374:	e022      	b.n	80233bc <_printf_i+0x7c>
 8023376:	0010      	movs	r0, r2
 8023378:	3863      	subs	r0, #99	@ 0x63
 802337a:	2815      	cmp	r0, #21
 802337c:	d8f7      	bhi.n	802336e <_printf_i+0x2e>
 802337e:	f7dc ff07 	bl	8000190 <__gnu_thumb1_case_shi>
 8023382:	0016      	.short	0x0016
 8023384:	fff6001f 	.word	0xfff6001f
 8023388:	fff6fff6 	.word	0xfff6fff6
 802338c:	001ffff6 	.word	0x001ffff6
 8023390:	fff6fff6 	.word	0xfff6fff6
 8023394:	fff6fff6 	.word	0xfff6fff6
 8023398:	003600a1 	.word	0x003600a1
 802339c:	fff60080 	.word	0xfff60080
 80233a0:	00b2fff6 	.word	0x00b2fff6
 80233a4:	0036fff6 	.word	0x0036fff6
 80233a8:	fff6fff6 	.word	0xfff6fff6
 80233ac:	0084      	.short	0x0084
 80233ae:	0025      	movs	r5, r4
 80233b0:	681a      	ldr	r2, [r3, #0]
 80233b2:	3542      	adds	r5, #66	@ 0x42
 80233b4:	1d11      	adds	r1, r2, #4
 80233b6:	6019      	str	r1, [r3, #0]
 80233b8:	6813      	ldr	r3, [r2, #0]
 80233ba:	702b      	strb	r3, [r5, #0]
 80233bc:	2301      	movs	r3, #1
 80233be:	e0a0      	b.n	8023502 <_printf_i+0x1c2>
 80233c0:	6818      	ldr	r0, [r3, #0]
 80233c2:	6809      	ldr	r1, [r1, #0]
 80233c4:	1d02      	adds	r2, r0, #4
 80233c6:	060d      	lsls	r5, r1, #24
 80233c8:	d50b      	bpl.n	80233e2 <_printf_i+0xa2>
 80233ca:	6806      	ldr	r6, [r0, #0]
 80233cc:	601a      	str	r2, [r3, #0]
 80233ce:	2e00      	cmp	r6, #0
 80233d0:	da03      	bge.n	80233da <_printf_i+0x9a>
 80233d2:	232d      	movs	r3, #45	@ 0x2d
 80233d4:	9a03      	ldr	r2, [sp, #12]
 80233d6:	4276      	negs	r6, r6
 80233d8:	7013      	strb	r3, [r2, #0]
 80233da:	4b5e      	ldr	r3, [pc, #376]	@ (8023554 <_printf_i+0x214>)
 80233dc:	270a      	movs	r7, #10
 80233de:	9304      	str	r3, [sp, #16]
 80233e0:	e018      	b.n	8023414 <_printf_i+0xd4>
 80233e2:	6806      	ldr	r6, [r0, #0]
 80233e4:	601a      	str	r2, [r3, #0]
 80233e6:	0649      	lsls	r1, r1, #25
 80233e8:	d5f1      	bpl.n	80233ce <_printf_i+0x8e>
 80233ea:	b236      	sxth	r6, r6
 80233ec:	e7ef      	b.n	80233ce <_printf_i+0x8e>
 80233ee:	6808      	ldr	r0, [r1, #0]
 80233f0:	6819      	ldr	r1, [r3, #0]
 80233f2:	c940      	ldmia	r1!, {r6}
 80233f4:	0605      	lsls	r5, r0, #24
 80233f6:	d402      	bmi.n	80233fe <_printf_i+0xbe>
 80233f8:	0640      	lsls	r0, r0, #25
 80233fa:	d500      	bpl.n	80233fe <_printf_i+0xbe>
 80233fc:	b2b6      	uxth	r6, r6
 80233fe:	6019      	str	r1, [r3, #0]
 8023400:	4b54      	ldr	r3, [pc, #336]	@ (8023554 <_printf_i+0x214>)
 8023402:	270a      	movs	r7, #10
 8023404:	9304      	str	r3, [sp, #16]
 8023406:	2a6f      	cmp	r2, #111	@ 0x6f
 8023408:	d100      	bne.n	802340c <_printf_i+0xcc>
 802340a:	3f02      	subs	r7, #2
 802340c:	0023      	movs	r3, r4
 802340e:	2200      	movs	r2, #0
 8023410:	3343      	adds	r3, #67	@ 0x43
 8023412:	701a      	strb	r2, [r3, #0]
 8023414:	6863      	ldr	r3, [r4, #4]
 8023416:	60a3      	str	r3, [r4, #8]
 8023418:	2b00      	cmp	r3, #0
 802341a:	db03      	blt.n	8023424 <_printf_i+0xe4>
 802341c:	2104      	movs	r1, #4
 802341e:	6822      	ldr	r2, [r4, #0]
 8023420:	438a      	bics	r2, r1
 8023422:	6022      	str	r2, [r4, #0]
 8023424:	2e00      	cmp	r6, #0
 8023426:	d102      	bne.n	802342e <_printf_i+0xee>
 8023428:	9d03      	ldr	r5, [sp, #12]
 802342a:	2b00      	cmp	r3, #0
 802342c:	d00c      	beq.n	8023448 <_printf_i+0x108>
 802342e:	9d03      	ldr	r5, [sp, #12]
 8023430:	0030      	movs	r0, r6
 8023432:	0039      	movs	r1, r7
 8023434:	f7dc ff3c 	bl	80002b0 <__aeabi_uidivmod>
 8023438:	9b04      	ldr	r3, [sp, #16]
 802343a:	3d01      	subs	r5, #1
 802343c:	5c5b      	ldrb	r3, [r3, r1]
 802343e:	702b      	strb	r3, [r5, #0]
 8023440:	0033      	movs	r3, r6
 8023442:	0006      	movs	r6, r0
 8023444:	429f      	cmp	r7, r3
 8023446:	d9f3      	bls.n	8023430 <_printf_i+0xf0>
 8023448:	2f08      	cmp	r7, #8
 802344a:	d109      	bne.n	8023460 <_printf_i+0x120>
 802344c:	6823      	ldr	r3, [r4, #0]
 802344e:	07db      	lsls	r3, r3, #31
 8023450:	d506      	bpl.n	8023460 <_printf_i+0x120>
 8023452:	6862      	ldr	r2, [r4, #4]
 8023454:	6923      	ldr	r3, [r4, #16]
 8023456:	429a      	cmp	r2, r3
 8023458:	dc02      	bgt.n	8023460 <_printf_i+0x120>
 802345a:	2330      	movs	r3, #48	@ 0x30
 802345c:	3d01      	subs	r5, #1
 802345e:	702b      	strb	r3, [r5, #0]
 8023460:	9b03      	ldr	r3, [sp, #12]
 8023462:	1b5b      	subs	r3, r3, r5
 8023464:	6123      	str	r3, [r4, #16]
 8023466:	9b07      	ldr	r3, [sp, #28]
 8023468:	0021      	movs	r1, r4
 802346a:	9300      	str	r3, [sp, #0]
 802346c:	9805      	ldr	r0, [sp, #20]
 802346e:	9b06      	ldr	r3, [sp, #24]
 8023470:	aa09      	add	r2, sp, #36	@ 0x24
 8023472:	f7ff fef5 	bl	8023260 <_printf_common>
 8023476:	3001      	adds	r0, #1
 8023478:	d148      	bne.n	802350c <_printf_i+0x1cc>
 802347a:	2001      	movs	r0, #1
 802347c:	4240      	negs	r0, r0
 802347e:	b00b      	add	sp, #44	@ 0x2c
 8023480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023482:	2220      	movs	r2, #32
 8023484:	6809      	ldr	r1, [r1, #0]
 8023486:	430a      	orrs	r2, r1
 8023488:	6022      	str	r2, [r4, #0]
 802348a:	2278      	movs	r2, #120	@ 0x78
 802348c:	4932      	ldr	r1, [pc, #200]	@ (8023558 <_printf_i+0x218>)
 802348e:	9104      	str	r1, [sp, #16]
 8023490:	0021      	movs	r1, r4
 8023492:	3145      	adds	r1, #69	@ 0x45
 8023494:	700a      	strb	r2, [r1, #0]
 8023496:	6819      	ldr	r1, [r3, #0]
 8023498:	6822      	ldr	r2, [r4, #0]
 802349a:	c940      	ldmia	r1!, {r6}
 802349c:	0610      	lsls	r0, r2, #24
 802349e:	d402      	bmi.n	80234a6 <_printf_i+0x166>
 80234a0:	0650      	lsls	r0, r2, #25
 80234a2:	d500      	bpl.n	80234a6 <_printf_i+0x166>
 80234a4:	b2b6      	uxth	r6, r6
 80234a6:	6019      	str	r1, [r3, #0]
 80234a8:	07d3      	lsls	r3, r2, #31
 80234aa:	d502      	bpl.n	80234b2 <_printf_i+0x172>
 80234ac:	2320      	movs	r3, #32
 80234ae:	4313      	orrs	r3, r2
 80234b0:	6023      	str	r3, [r4, #0]
 80234b2:	2e00      	cmp	r6, #0
 80234b4:	d001      	beq.n	80234ba <_printf_i+0x17a>
 80234b6:	2710      	movs	r7, #16
 80234b8:	e7a8      	b.n	802340c <_printf_i+0xcc>
 80234ba:	2220      	movs	r2, #32
 80234bc:	6823      	ldr	r3, [r4, #0]
 80234be:	4393      	bics	r3, r2
 80234c0:	6023      	str	r3, [r4, #0]
 80234c2:	e7f8      	b.n	80234b6 <_printf_i+0x176>
 80234c4:	681a      	ldr	r2, [r3, #0]
 80234c6:	680d      	ldr	r5, [r1, #0]
 80234c8:	1d10      	adds	r0, r2, #4
 80234ca:	6949      	ldr	r1, [r1, #20]
 80234cc:	6018      	str	r0, [r3, #0]
 80234ce:	6813      	ldr	r3, [r2, #0]
 80234d0:	062e      	lsls	r6, r5, #24
 80234d2:	d501      	bpl.n	80234d8 <_printf_i+0x198>
 80234d4:	6019      	str	r1, [r3, #0]
 80234d6:	e002      	b.n	80234de <_printf_i+0x19e>
 80234d8:	066d      	lsls	r5, r5, #25
 80234da:	d5fb      	bpl.n	80234d4 <_printf_i+0x194>
 80234dc:	8019      	strh	r1, [r3, #0]
 80234de:	2300      	movs	r3, #0
 80234e0:	9d03      	ldr	r5, [sp, #12]
 80234e2:	6123      	str	r3, [r4, #16]
 80234e4:	e7bf      	b.n	8023466 <_printf_i+0x126>
 80234e6:	681a      	ldr	r2, [r3, #0]
 80234e8:	1d11      	adds	r1, r2, #4
 80234ea:	6019      	str	r1, [r3, #0]
 80234ec:	6815      	ldr	r5, [r2, #0]
 80234ee:	2100      	movs	r1, #0
 80234f0:	0028      	movs	r0, r5
 80234f2:	6862      	ldr	r2, [r4, #4]
 80234f4:	f000 fb9d 	bl	8023c32 <memchr>
 80234f8:	2800      	cmp	r0, #0
 80234fa:	d001      	beq.n	8023500 <_printf_i+0x1c0>
 80234fc:	1b40      	subs	r0, r0, r5
 80234fe:	6060      	str	r0, [r4, #4]
 8023500:	6863      	ldr	r3, [r4, #4]
 8023502:	6123      	str	r3, [r4, #16]
 8023504:	2300      	movs	r3, #0
 8023506:	9a03      	ldr	r2, [sp, #12]
 8023508:	7013      	strb	r3, [r2, #0]
 802350a:	e7ac      	b.n	8023466 <_printf_i+0x126>
 802350c:	002a      	movs	r2, r5
 802350e:	6923      	ldr	r3, [r4, #16]
 8023510:	9906      	ldr	r1, [sp, #24]
 8023512:	9805      	ldr	r0, [sp, #20]
 8023514:	9d07      	ldr	r5, [sp, #28]
 8023516:	47a8      	blx	r5
 8023518:	3001      	adds	r0, #1
 802351a:	d0ae      	beq.n	802347a <_printf_i+0x13a>
 802351c:	6823      	ldr	r3, [r4, #0]
 802351e:	079b      	lsls	r3, r3, #30
 8023520:	d415      	bmi.n	802354e <_printf_i+0x20e>
 8023522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023524:	68e0      	ldr	r0, [r4, #12]
 8023526:	4298      	cmp	r0, r3
 8023528:	daa9      	bge.n	802347e <_printf_i+0x13e>
 802352a:	0018      	movs	r0, r3
 802352c:	e7a7      	b.n	802347e <_printf_i+0x13e>
 802352e:	0022      	movs	r2, r4
 8023530:	2301      	movs	r3, #1
 8023532:	9906      	ldr	r1, [sp, #24]
 8023534:	9805      	ldr	r0, [sp, #20]
 8023536:	9e07      	ldr	r6, [sp, #28]
 8023538:	3219      	adds	r2, #25
 802353a:	47b0      	blx	r6
 802353c:	3001      	adds	r0, #1
 802353e:	d09c      	beq.n	802347a <_printf_i+0x13a>
 8023540:	3501      	adds	r5, #1
 8023542:	68e3      	ldr	r3, [r4, #12]
 8023544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023546:	1a9b      	subs	r3, r3, r2
 8023548:	42ab      	cmp	r3, r5
 802354a:	dcf0      	bgt.n	802352e <_printf_i+0x1ee>
 802354c:	e7e9      	b.n	8023522 <_printf_i+0x1e2>
 802354e:	2500      	movs	r5, #0
 8023550:	e7f7      	b.n	8023542 <_printf_i+0x202>
 8023552:	46c0      	nop			@ (mov r8, r8)
 8023554:	0802b873 	.word	0x0802b873
 8023558:	0802b884 	.word	0x0802b884

0802355c <std>:
 802355c:	2300      	movs	r3, #0
 802355e:	b510      	push	{r4, lr}
 8023560:	0004      	movs	r4, r0
 8023562:	6003      	str	r3, [r0, #0]
 8023564:	6043      	str	r3, [r0, #4]
 8023566:	6083      	str	r3, [r0, #8]
 8023568:	8181      	strh	r1, [r0, #12]
 802356a:	6643      	str	r3, [r0, #100]	@ 0x64
 802356c:	81c2      	strh	r2, [r0, #14]
 802356e:	6103      	str	r3, [r0, #16]
 8023570:	6143      	str	r3, [r0, #20]
 8023572:	6183      	str	r3, [r0, #24]
 8023574:	0019      	movs	r1, r3
 8023576:	2208      	movs	r2, #8
 8023578:	305c      	adds	r0, #92	@ 0x5c
 802357a:	f000 fa89 	bl	8023a90 <memset>
 802357e:	4b0b      	ldr	r3, [pc, #44]	@ (80235ac <std+0x50>)
 8023580:	6224      	str	r4, [r4, #32]
 8023582:	6263      	str	r3, [r4, #36]	@ 0x24
 8023584:	4b0a      	ldr	r3, [pc, #40]	@ (80235b0 <std+0x54>)
 8023586:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023588:	4b0a      	ldr	r3, [pc, #40]	@ (80235b4 <std+0x58>)
 802358a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802358c:	4b0a      	ldr	r3, [pc, #40]	@ (80235b8 <std+0x5c>)
 802358e:	6323      	str	r3, [r4, #48]	@ 0x30
 8023590:	4b0a      	ldr	r3, [pc, #40]	@ (80235bc <std+0x60>)
 8023592:	429c      	cmp	r4, r3
 8023594:	d005      	beq.n	80235a2 <std+0x46>
 8023596:	4b0a      	ldr	r3, [pc, #40]	@ (80235c0 <std+0x64>)
 8023598:	429c      	cmp	r4, r3
 802359a:	d002      	beq.n	80235a2 <std+0x46>
 802359c:	4b09      	ldr	r3, [pc, #36]	@ (80235c4 <std+0x68>)
 802359e:	429c      	cmp	r4, r3
 80235a0:	d103      	bne.n	80235aa <std+0x4e>
 80235a2:	0020      	movs	r0, r4
 80235a4:	3058      	adds	r0, #88	@ 0x58
 80235a6:	f000 fb41 	bl	8023c2c <__retarget_lock_init_recursive>
 80235aa:	bd10      	pop	{r4, pc}
 80235ac:	08023805 	.word	0x08023805
 80235b0:	0802382d 	.word	0x0802382d
 80235b4:	08023865 	.word	0x08023865
 80235b8:	08023891 	.word	0x08023891
 80235bc:	200034a4 	.word	0x200034a4
 80235c0:	2000350c 	.word	0x2000350c
 80235c4:	20003574 	.word	0x20003574

080235c8 <stdio_exit_handler>:
 80235c8:	b510      	push	{r4, lr}
 80235ca:	4a03      	ldr	r2, [pc, #12]	@ (80235d8 <stdio_exit_handler+0x10>)
 80235cc:	4903      	ldr	r1, [pc, #12]	@ (80235dc <stdio_exit_handler+0x14>)
 80235ce:	4804      	ldr	r0, [pc, #16]	@ (80235e0 <stdio_exit_handler+0x18>)
 80235d0:	f000 f86c 	bl	80236ac <_fwalk_sglue>
 80235d4:	bd10      	pop	{r4, pc}
 80235d6:	46c0      	nop			@ (mov r8, r8)
 80235d8:	20000268 	.word	0x20000268
 80235dc:	08026251 	.word	0x08026251
 80235e0:	200003e4 	.word	0x200003e4

080235e4 <cleanup_stdio>:
 80235e4:	6841      	ldr	r1, [r0, #4]
 80235e6:	4b0b      	ldr	r3, [pc, #44]	@ (8023614 <cleanup_stdio+0x30>)
 80235e8:	b510      	push	{r4, lr}
 80235ea:	0004      	movs	r4, r0
 80235ec:	4299      	cmp	r1, r3
 80235ee:	d001      	beq.n	80235f4 <cleanup_stdio+0x10>
 80235f0:	f002 fe2e 	bl	8026250 <_fflush_r>
 80235f4:	68a1      	ldr	r1, [r4, #8]
 80235f6:	4b08      	ldr	r3, [pc, #32]	@ (8023618 <cleanup_stdio+0x34>)
 80235f8:	4299      	cmp	r1, r3
 80235fa:	d002      	beq.n	8023602 <cleanup_stdio+0x1e>
 80235fc:	0020      	movs	r0, r4
 80235fe:	f002 fe27 	bl	8026250 <_fflush_r>
 8023602:	68e1      	ldr	r1, [r4, #12]
 8023604:	4b05      	ldr	r3, [pc, #20]	@ (802361c <cleanup_stdio+0x38>)
 8023606:	4299      	cmp	r1, r3
 8023608:	d002      	beq.n	8023610 <cleanup_stdio+0x2c>
 802360a:	0020      	movs	r0, r4
 802360c:	f002 fe20 	bl	8026250 <_fflush_r>
 8023610:	bd10      	pop	{r4, pc}
 8023612:	46c0      	nop			@ (mov r8, r8)
 8023614:	200034a4 	.word	0x200034a4
 8023618:	2000350c 	.word	0x2000350c
 802361c:	20003574 	.word	0x20003574

08023620 <global_stdio_init.part.0>:
 8023620:	b510      	push	{r4, lr}
 8023622:	4b09      	ldr	r3, [pc, #36]	@ (8023648 <global_stdio_init.part.0+0x28>)
 8023624:	4a09      	ldr	r2, [pc, #36]	@ (802364c <global_stdio_init.part.0+0x2c>)
 8023626:	2104      	movs	r1, #4
 8023628:	601a      	str	r2, [r3, #0]
 802362a:	4809      	ldr	r0, [pc, #36]	@ (8023650 <global_stdio_init.part.0+0x30>)
 802362c:	2200      	movs	r2, #0
 802362e:	f7ff ff95 	bl	802355c <std>
 8023632:	2201      	movs	r2, #1
 8023634:	2109      	movs	r1, #9
 8023636:	4807      	ldr	r0, [pc, #28]	@ (8023654 <global_stdio_init.part.0+0x34>)
 8023638:	f7ff ff90 	bl	802355c <std>
 802363c:	2202      	movs	r2, #2
 802363e:	2112      	movs	r1, #18
 8023640:	4805      	ldr	r0, [pc, #20]	@ (8023658 <global_stdio_init.part.0+0x38>)
 8023642:	f7ff ff8b 	bl	802355c <std>
 8023646:	bd10      	pop	{r4, pc}
 8023648:	200035dc 	.word	0x200035dc
 802364c:	080235c9 	.word	0x080235c9
 8023650:	200034a4 	.word	0x200034a4
 8023654:	2000350c 	.word	0x2000350c
 8023658:	20003574 	.word	0x20003574

0802365c <__sfp_lock_acquire>:
 802365c:	b510      	push	{r4, lr}
 802365e:	4802      	ldr	r0, [pc, #8]	@ (8023668 <__sfp_lock_acquire+0xc>)
 8023660:	f000 fae5 	bl	8023c2e <__retarget_lock_acquire_recursive>
 8023664:	bd10      	pop	{r4, pc}
 8023666:	46c0      	nop			@ (mov r8, r8)
 8023668:	200035e5 	.word	0x200035e5

0802366c <__sfp_lock_release>:
 802366c:	b510      	push	{r4, lr}
 802366e:	4802      	ldr	r0, [pc, #8]	@ (8023678 <__sfp_lock_release+0xc>)
 8023670:	f000 fade 	bl	8023c30 <__retarget_lock_release_recursive>
 8023674:	bd10      	pop	{r4, pc}
 8023676:	46c0      	nop			@ (mov r8, r8)
 8023678:	200035e5 	.word	0x200035e5

0802367c <__sinit>:
 802367c:	b510      	push	{r4, lr}
 802367e:	0004      	movs	r4, r0
 8023680:	f7ff ffec 	bl	802365c <__sfp_lock_acquire>
 8023684:	6a23      	ldr	r3, [r4, #32]
 8023686:	2b00      	cmp	r3, #0
 8023688:	d002      	beq.n	8023690 <__sinit+0x14>
 802368a:	f7ff ffef 	bl	802366c <__sfp_lock_release>
 802368e:	bd10      	pop	{r4, pc}
 8023690:	4b04      	ldr	r3, [pc, #16]	@ (80236a4 <__sinit+0x28>)
 8023692:	6223      	str	r3, [r4, #32]
 8023694:	4b04      	ldr	r3, [pc, #16]	@ (80236a8 <__sinit+0x2c>)
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	2b00      	cmp	r3, #0
 802369a:	d1f6      	bne.n	802368a <__sinit+0xe>
 802369c:	f7ff ffc0 	bl	8023620 <global_stdio_init.part.0>
 80236a0:	e7f3      	b.n	802368a <__sinit+0xe>
 80236a2:	46c0      	nop			@ (mov r8, r8)
 80236a4:	080235e5 	.word	0x080235e5
 80236a8:	200035dc 	.word	0x200035dc

080236ac <_fwalk_sglue>:
 80236ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80236ae:	0014      	movs	r4, r2
 80236b0:	2600      	movs	r6, #0
 80236b2:	9000      	str	r0, [sp, #0]
 80236b4:	9101      	str	r1, [sp, #4]
 80236b6:	68a5      	ldr	r5, [r4, #8]
 80236b8:	6867      	ldr	r7, [r4, #4]
 80236ba:	3f01      	subs	r7, #1
 80236bc:	d504      	bpl.n	80236c8 <_fwalk_sglue+0x1c>
 80236be:	6824      	ldr	r4, [r4, #0]
 80236c0:	2c00      	cmp	r4, #0
 80236c2:	d1f8      	bne.n	80236b6 <_fwalk_sglue+0xa>
 80236c4:	0030      	movs	r0, r6
 80236c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80236c8:	89ab      	ldrh	r3, [r5, #12]
 80236ca:	2b01      	cmp	r3, #1
 80236cc:	d908      	bls.n	80236e0 <_fwalk_sglue+0x34>
 80236ce:	220e      	movs	r2, #14
 80236d0:	5eab      	ldrsh	r3, [r5, r2]
 80236d2:	3301      	adds	r3, #1
 80236d4:	d004      	beq.n	80236e0 <_fwalk_sglue+0x34>
 80236d6:	0029      	movs	r1, r5
 80236d8:	9800      	ldr	r0, [sp, #0]
 80236da:	9b01      	ldr	r3, [sp, #4]
 80236dc:	4798      	blx	r3
 80236de:	4306      	orrs	r6, r0
 80236e0:	3568      	adds	r5, #104	@ 0x68
 80236e2:	e7ea      	b.n	80236ba <_fwalk_sglue+0xe>

080236e4 <iprintf>:
 80236e4:	b40f      	push	{r0, r1, r2, r3}
 80236e6:	b507      	push	{r0, r1, r2, lr}
 80236e8:	4905      	ldr	r1, [pc, #20]	@ (8023700 <iprintf+0x1c>)
 80236ea:	ab04      	add	r3, sp, #16
 80236ec:	6808      	ldr	r0, [r1, #0]
 80236ee:	cb04      	ldmia	r3!, {r2}
 80236f0:	6881      	ldr	r1, [r0, #8]
 80236f2:	9301      	str	r3, [sp, #4]
 80236f4:	f002 fc0a 	bl	8025f0c <_vfiprintf_r>
 80236f8:	b003      	add	sp, #12
 80236fa:	bc08      	pop	{r3}
 80236fc:	b004      	add	sp, #16
 80236fe:	4718      	bx	r3
 8023700:	200003e0 	.word	0x200003e0

08023704 <_puts_r>:
 8023704:	6a03      	ldr	r3, [r0, #32]
 8023706:	b570      	push	{r4, r5, r6, lr}
 8023708:	0005      	movs	r5, r0
 802370a:	000e      	movs	r6, r1
 802370c:	6884      	ldr	r4, [r0, #8]
 802370e:	2b00      	cmp	r3, #0
 8023710:	d101      	bne.n	8023716 <_puts_r+0x12>
 8023712:	f7ff ffb3 	bl	802367c <__sinit>
 8023716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023718:	07db      	lsls	r3, r3, #31
 802371a:	d405      	bmi.n	8023728 <_puts_r+0x24>
 802371c:	89a3      	ldrh	r3, [r4, #12]
 802371e:	059b      	lsls	r3, r3, #22
 8023720:	d402      	bmi.n	8023728 <_puts_r+0x24>
 8023722:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023724:	f000 fa83 	bl	8023c2e <__retarget_lock_acquire_recursive>
 8023728:	89a3      	ldrh	r3, [r4, #12]
 802372a:	071b      	lsls	r3, r3, #28
 802372c:	d502      	bpl.n	8023734 <_puts_r+0x30>
 802372e:	6923      	ldr	r3, [r4, #16]
 8023730:	2b00      	cmp	r3, #0
 8023732:	d11f      	bne.n	8023774 <_puts_r+0x70>
 8023734:	0021      	movs	r1, r4
 8023736:	0028      	movs	r0, r5
 8023738:	f000 f94c 	bl	80239d4 <__swsetup_r>
 802373c:	2800      	cmp	r0, #0
 802373e:	d019      	beq.n	8023774 <_puts_r+0x70>
 8023740:	2501      	movs	r5, #1
 8023742:	426d      	negs	r5, r5
 8023744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023746:	07db      	lsls	r3, r3, #31
 8023748:	d405      	bmi.n	8023756 <_puts_r+0x52>
 802374a:	89a3      	ldrh	r3, [r4, #12]
 802374c:	059b      	lsls	r3, r3, #22
 802374e:	d402      	bmi.n	8023756 <_puts_r+0x52>
 8023750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023752:	f000 fa6d 	bl	8023c30 <__retarget_lock_release_recursive>
 8023756:	0028      	movs	r0, r5
 8023758:	bd70      	pop	{r4, r5, r6, pc}
 802375a:	3601      	adds	r6, #1
 802375c:	60a3      	str	r3, [r4, #8]
 802375e:	2b00      	cmp	r3, #0
 8023760:	da04      	bge.n	802376c <_puts_r+0x68>
 8023762:	69a2      	ldr	r2, [r4, #24]
 8023764:	429a      	cmp	r2, r3
 8023766:	dc16      	bgt.n	8023796 <_puts_r+0x92>
 8023768:	290a      	cmp	r1, #10
 802376a:	d014      	beq.n	8023796 <_puts_r+0x92>
 802376c:	6823      	ldr	r3, [r4, #0]
 802376e:	1c5a      	adds	r2, r3, #1
 8023770:	6022      	str	r2, [r4, #0]
 8023772:	7019      	strb	r1, [r3, #0]
 8023774:	68a3      	ldr	r3, [r4, #8]
 8023776:	7831      	ldrb	r1, [r6, #0]
 8023778:	3b01      	subs	r3, #1
 802377a:	2900      	cmp	r1, #0
 802377c:	d1ed      	bne.n	802375a <_puts_r+0x56>
 802377e:	60a3      	str	r3, [r4, #8]
 8023780:	2b00      	cmp	r3, #0
 8023782:	da0f      	bge.n	80237a4 <_puts_r+0xa0>
 8023784:	0022      	movs	r2, r4
 8023786:	0028      	movs	r0, r5
 8023788:	310a      	adds	r1, #10
 802378a:	f000 f8e1 	bl	8023950 <__swbuf_r>
 802378e:	3001      	adds	r0, #1
 8023790:	d0d6      	beq.n	8023740 <_puts_r+0x3c>
 8023792:	250a      	movs	r5, #10
 8023794:	e7d6      	b.n	8023744 <_puts_r+0x40>
 8023796:	0022      	movs	r2, r4
 8023798:	0028      	movs	r0, r5
 802379a:	f000 f8d9 	bl	8023950 <__swbuf_r>
 802379e:	3001      	adds	r0, #1
 80237a0:	d1e8      	bne.n	8023774 <_puts_r+0x70>
 80237a2:	e7cd      	b.n	8023740 <_puts_r+0x3c>
 80237a4:	6823      	ldr	r3, [r4, #0]
 80237a6:	1c5a      	adds	r2, r3, #1
 80237a8:	6022      	str	r2, [r4, #0]
 80237aa:	220a      	movs	r2, #10
 80237ac:	701a      	strb	r2, [r3, #0]
 80237ae:	e7f0      	b.n	8023792 <_puts_r+0x8e>

080237b0 <puts>:
 80237b0:	b510      	push	{r4, lr}
 80237b2:	4b03      	ldr	r3, [pc, #12]	@ (80237c0 <puts+0x10>)
 80237b4:	0001      	movs	r1, r0
 80237b6:	6818      	ldr	r0, [r3, #0]
 80237b8:	f7ff ffa4 	bl	8023704 <_puts_r>
 80237bc:	bd10      	pop	{r4, pc}
 80237be:	46c0      	nop			@ (mov r8, r8)
 80237c0:	200003e0 	.word	0x200003e0

080237c4 <siprintf>:
 80237c4:	b40e      	push	{r1, r2, r3}
 80237c6:	b500      	push	{lr}
 80237c8:	490b      	ldr	r1, [pc, #44]	@ (80237f8 <siprintf+0x34>)
 80237ca:	b09c      	sub	sp, #112	@ 0x70
 80237cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80237ce:	9002      	str	r0, [sp, #8]
 80237d0:	9006      	str	r0, [sp, #24]
 80237d2:	9107      	str	r1, [sp, #28]
 80237d4:	9104      	str	r1, [sp, #16]
 80237d6:	4809      	ldr	r0, [pc, #36]	@ (80237fc <siprintf+0x38>)
 80237d8:	4909      	ldr	r1, [pc, #36]	@ (8023800 <siprintf+0x3c>)
 80237da:	cb04      	ldmia	r3!, {r2}
 80237dc:	9105      	str	r1, [sp, #20]
 80237de:	6800      	ldr	r0, [r0, #0]
 80237e0:	a902      	add	r1, sp, #8
 80237e2:	9301      	str	r3, [sp, #4]
 80237e4:	f002 fa6c 	bl	8025cc0 <_svfiprintf_r>
 80237e8:	2200      	movs	r2, #0
 80237ea:	9b02      	ldr	r3, [sp, #8]
 80237ec:	701a      	strb	r2, [r3, #0]
 80237ee:	b01c      	add	sp, #112	@ 0x70
 80237f0:	bc08      	pop	{r3}
 80237f2:	b003      	add	sp, #12
 80237f4:	4718      	bx	r3
 80237f6:	46c0      	nop			@ (mov r8, r8)
 80237f8:	7fffffff 	.word	0x7fffffff
 80237fc:	200003e0 	.word	0x200003e0
 8023800:	ffff0208 	.word	0xffff0208

08023804 <__sread>:
 8023804:	b570      	push	{r4, r5, r6, lr}
 8023806:	000c      	movs	r4, r1
 8023808:	250e      	movs	r5, #14
 802380a:	5f49      	ldrsh	r1, [r1, r5]
 802380c:	f000 f9bc 	bl	8023b88 <_read_r>
 8023810:	2800      	cmp	r0, #0
 8023812:	db03      	blt.n	802381c <__sread+0x18>
 8023814:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8023816:	181b      	adds	r3, r3, r0
 8023818:	6563      	str	r3, [r4, #84]	@ 0x54
 802381a:	bd70      	pop	{r4, r5, r6, pc}
 802381c:	89a3      	ldrh	r3, [r4, #12]
 802381e:	4a02      	ldr	r2, [pc, #8]	@ (8023828 <__sread+0x24>)
 8023820:	4013      	ands	r3, r2
 8023822:	81a3      	strh	r3, [r4, #12]
 8023824:	e7f9      	b.n	802381a <__sread+0x16>
 8023826:	46c0      	nop			@ (mov r8, r8)
 8023828:	ffffefff 	.word	0xffffefff

0802382c <__swrite>:
 802382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802382e:	001f      	movs	r7, r3
 8023830:	898b      	ldrh	r3, [r1, #12]
 8023832:	0005      	movs	r5, r0
 8023834:	000c      	movs	r4, r1
 8023836:	0016      	movs	r6, r2
 8023838:	05db      	lsls	r3, r3, #23
 802383a:	d505      	bpl.n	8023848 <__swrite+0x1c>
 802383c:	230e      	movs	r3, #14
 802383e:	5ec9      	ldrsh	r1, [r1, r3]
 8023840:	2200      	movs	r2, #0
 8023842:	2302      	movs	r3, #2
 8023844:	f000 f98c 	bl	8023b60 <_lseek_r>
 8023848:	89a3      	ldrh	r3, [r4, #12]
 802384a:	4a05      	ldr	r2, [pc, #20]	@ (8023860 <__swrite+0x34>)
 802384c:	0028      	movs	r0, r5
 802384e:	4013      	ands	r3, r2
 8023850:	81a3      	strh	r3, [r4, #12]
 8023852:	0032      	movs	r2, r6
 8023854:	230e      	movs	r3, #14
 8023856:	5ee1      	ldrsh	r1, [r4, r3]
 8023858:	003b      	movs	r3, r7
 802385a:	f000 f9a9 	bl	8023bb0 <_write_r>
 802385e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023860:	ffffefff 	.word	0xffffefff

08023864 <__sseek>:
 8023864:	b570      	push	{r4, r5, r6, lr}
 8023866:	000c      	movs	r4, r1
 8023868:	250e      	movs	r5, #14
 802386a:	5f49      	ldrsh	r1, [r1, r5]
 802386c:	f000 f978 	bl	8023b60 <_lseek_r>
 8023870:	89a3      	ldrh	r3, [r4, #12]
 8023872:	1c42      	adds	r2, r0, #1
 8023874:	d103      	bne.n	802387e <__sseek+0x1a>
 8023876:	4a05      	ldr	r2, [pc, #20]	@ (802388c <__sseek+0x28>)
 8023878:	4013      	ands	r3, r2
 802387a:	81a3      	strh	r3, [r4, #12]
 802387c:	bd70      	pop	{r4, r5, r6, pc}
 802387e:	2280      	movs	r2, #128	@ 0x80
 8023880:	0152      	lsls	r2, r2, #5
 8023882:	4313      	orrs	r3, r2
 8023884:	81a3      	strh	r3, [r4, #12]
 8023886:	6560      	str	r0, [r4, #84]	@ 0x54
 8023888:	e7f8      	b.n	802387c <__sseek+0x18>
 802388a:	46c0      	nop			@ (mov r8, r8)
 802388c:	ffffefff 	.word	0xffffefff

08023890 <__sclose>:
 8023890:	b510      	push	{r4, lr}
 8023892:	230e      	movs	r3, #14
 8023894:	5ec9      	ldrsh	r1, [r1, r3]
 8023896:	f000 f951 	bl	8023b3c <_close_r>
 802389a:	bd10      	pop	{r4, pc}

0802389c <_vsniprintf_r>:
 802389c:	b530      	push	{r4, r5, lr}
 802389e:	0014      	movs	r4, r2
 80238a0:	0005      	movs	r5, r0
 80238a2:	001a      	movs	r2, r3
 80238a4:	b09b      	sub	sp, #108	@ 0x6c
 80238a6:	2c00      	cmp	r4, #0
 80238a8:	da05      	bge.n	80238b6 <_vsniprintf_r+0x1a>
 80238aa:	238b      	movs	r3, #139	@ 0x8b
 80238ac:	6003      	str	r3, [r0, #0]
 80238ae:	2001      	movs	r0, #1
 80238b0:	4240      	negs	r0, r0
 80238b2:	b01b      	add	sp, #108	@ 0x6c
 80238b4:	bd30      	pop	{r4, r5, pc}
 80238b6:	2382      	movs	r3, #130	@ 0x82
 80238b8:	4668      	mov	r0, sp
 80238ba:	009b      	lsls	r3, r3, #2
 80238bc:	8183      	strh	r3, [r0, #12]
 80238be:	2300      	movs	r3, #0
 80238c0:	9100      	str	r1, [sp, #0]
 80238c2:	9104      	str	r1, [sp, #16]
 80238c4:	429c      	cmp	r4, r3
 80238c6:	d000      	beq.n	80238ca <_vsniprintf_r+0x2e>
 80238c8:	1e63      	subs	r3, r4, #1
 80238ca:	9302      	str	r3, [sp, #8]
 80238cc:	9305      	str	r3, [sp, #20]
 80238ce:	2301      	movs	r3, #1
 80238d0:	4669      	mov	r1, sp
 80238d2:	425b      	negs	r3, r3
 80238d4:	81cb      	strh	r3, [r1, #14]
 80238d6:	0028      	movs	r0, r5
 80238d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80238da:	f002 f9f1 	bl	8025cc0 <_svfiprintf_r>
 80238de:	1c43      	adds	r3, r0, #1
 80238e0:	da01      	bge.n	80238e6 <_vsniprintf_r+0x4a>
 80238e2:	238b      	movs	r3, #139	@ 0x8b
 80238e4:	602b      	str	r3, [r5, #0]
 80238e6:	2c00      	cmp	r4, #0
 80238e8:	d0e3      	beq.n	80238b2 <_vsniprintf_r+0x16>
 80238ea:	2200      	movs	r2, #0
 80238ec:	9b00      	ldr	r3, [sp, #0]
 80238ee:	701a      	strb	r2, [r3, #0]
 80238f0:	e7df      	b.n	80238b2 <_vsniprintf_r+0x16>
	...

080238f4 <vsniprintf>:
 80238f4:	b513      	push	{r0, r1, r4, lr}
 80238f6:	4c04      	ldr	r4, [pc, #16]	@ (8023908 <vsniprintf+0x14>)
 80238f8:	9300      	str	r3, [sp, #0]
 80238fa:	0013      	movs	r3, r2
 80238fc:	000a      	movs	r2, r1
 80238fe:	0001      	movs	r1, r0
 8023900:	6820      	ldr	r0, [r4, #0]
 8023902:	f7ff ffcb 	bl	802389c <_vsniprintf_r>
 8023906:	bd16      	pop	{r1, r2, r4, pc}
 8023908:	200003e0 	.word	0x200003e0

0802390c <_vsiprintf_r>:
 802390c:	b500      	push	{lr}
 802390e:	b09b      	sub	sp, #108	@ 0x6c
 8023910:	9100      	str	r1, [sp, #0]
 8023912:	9104      	str	r1, [sp, #16]
 8023914:	4906      	ldr	r1, [pc, #24]	@ (8023930 <_vsiprintf_r+0x24>)
 8023916:	9105      	str	r1, [sp, #20]
 8023918:	9102      	str	r1, [sp, #8]
 802391a:	4906      	ldr	r1, [pc, #24]	@ (8023934 <_vsiprintf_r+0x28>)
 802391c:	9103      	str	r1, [sp, #12]
 802391e:	4669      	mov	r1, sp
 8023920:	f002 f9ce 	bl	8025cc0 <_svfiprintf_r>
 8023924:	2200      	movs	r2, #0
 8023926:	9b00      	ldr	r3, [sp, #0]
 8023928:	701a      	strb	r2, [r3, #0]
 802392a:	b01b      	add	sp, #108	@ 0x6c
 802392c:	bd00      	pop	{pc}
 802392e:	46c0      	nop			@ (mov r8, r8)
 8023930:	7fffffff 	.word	0x7fffffff
 8023934:	ffff0208 	.word	0xffff0208

08023938 <vsiprintf>:
 8023938:	b510      	push	{r4, lr}
 802393a:	4c04      	ldr	r4, [pc, #16]	@ (802394c <vsiprintf+0x14>)
 802393c:	0013      	movs	r3, r2
 802393e:	000a      	movs	r2, r1
 8023940:	0001      	movs	r1, r0
 8023942:	6820      	ldr	r0, [r4, #0]
 8023944:	f7ff ffe2 	bl	802390c <_vsiprintf_r>
 8023948:	bd10      	pop	{r4, pc}
 802394a:	46c0      	nop			@ (mov r8, r8)
 802394c:	200003e0 	.word	0x200003e0

08023950 <__swbuf_r>:
 8023950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023952:	0006      	movs	r6, r0
 8023954:	000d      	movs	r5, r1
 8023956:	0014      	movs	r4, r2
 8023958:	2800      	cmp	r0, #0
 802395a:	d004      	beq.n	8023966 <__swbuf_r+0x16>
 802395c:	6a03      	ldr	r3, [r0, #32]
 802395e:	2b00      	cmp	r3, #0
 8023960:	d101      	bne.n	8023966 <__swbuf_r+0x16>
 8023962:	f7ff fe8b 	bl	802367c <__sinit>
 8023966:	69a3      	ldr	r3, [r4, #24]
 8023968:	60a3      	str	r3, [r4, #8]
 802396a:	89a3      	ldrh	r3, [r4, #12]
 802396c:	071b      	lsls	r3, r3, #28
 802396e:	d502      	bpl.n	8023976 <__swbuf_r+0x26>
 8023970:	6923      	ldr	r3, [r4, #16]
 8023972:	2b00      	cmp	r3, #0
 8023974:	d109      	bne.n	802398a <__swbuf_r+0x3a>
 8023976:	0021      	movs	r1, r4
 8023978:	0030      	movs	r0, r6
 802397a:	f000 f82b 	bl	80239d4 <__swsetup_r>
 802397e:	2800      	cmp	r0, #0
 8023980:	d003      	beq.n	802398a <__swbuf_r+0x3a>
 8023982:	2501      	movs	r5, #1
 8023984:	426d      	negs	r5, r5
 8023986:	0028      	movs	r0, r5
 8023988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802398a:	6923      	ldr	r3, [r4, #16]
 802398c:	6820      	ldr	r0, [r4, #0]
 802398e:	b2ef      	uxtb	r7, r5
 8023990:	1ac0      	subs	r0, r0, r3
 8023992:	6963      	ldr	r3, [r4, #20]
 8023994:	b2ed      	uxtb	r5, r5
 8023996:	4283      	cmp	r3, r0
 8023998:	dc05      	bgt.n	80239a6 <__swbuf_r+0x56>
 802399a:	0021      	movs	r1, r4
 802399c:	0030      	movs	r0, r6
 802399e:	f002 fc57 	bl	8026250 <_fflush_r>
 80239a2:	2800      	cmp	r0, #0
 80239a4:	d1ed      	bne.n	8023982 <__swbuf_r+0x32>
 80239a6:	68a3      	ldr	r3, [r4, #8]
 80239a8:	3001      	adds	r0, #1
 80239aa:	3b01      	subs	r3, #1
 80239ac:	60a3      	str	r3, [r4, #8]
 80239ae:	6823      	ldr	r3, [r4, #0]
 80239b0:	1c5a      	adds	r2, r3, #1
 80239b2:	6022      	str	r2, [r4, #0]
 80239b4:	701f      	strb	r7, [r3, #0]
 80239b6:	6963      	ldr	r3, [r4, #20]
 80239b8:	4283      	cmp	r3, r0
 80239ba:	d004      	beq.n	80239c6 <__swbuf_r+0x76>
 80239bc:	89a3      	ldrh	r3, [r4, #12]
 80239be:	07db      	lsls	r3, r3, #31
 80239c0:	d5e1      	bpl.n	8023986 <__swbuf_r+0x36>
 80239c2:	2d0a      	cmp	r5, #10
 80239c4:	d1df      	bne.n	8023986 <__swbuf_r+0x36>
 80239c6:	0021      	movs	r1, r4
 80239c8:	0030      	movs	r0, r6
 80239ca:	f002 fc41 	bl	8026250 <_fflush_r>
 80239ce:	2800      	cmp	r0, #0
 80239d0:	d0d9      	beq.n	8023986 <__swbuf_r+0x36>
 80239d2:	e7d6      	b.n	8023982 <__swbuf_r+0x32>

080239d4 <__swsetup_r>:
 80239d4:	4b2d      	ldr	r3, [pc, #180]	@ (8023a8c <__swsetup_r+0xb8>)
 80239d6:	b570      	push	{r4, r5, r6, lr}
 80239d8:	0005      	movs	r5, r0
 80239da:	6818      	ldr	r0, [r3, #0]
 80239dc:	000c      	movs	r4, r1
 80239de:	2800      	cmp	r0, #0
 80239e0:	d004      	beq.n	80239ec <__swsetup_r+0x18>
 80239e2:	6a03      	ldr	r3, [r0, #32]
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d101      	bne.n	80239ec <__swsetup_r+0x18>
 80239e8:	f7ff fe48 	bl	802367c <__sinit>
 80239ec:	230c      	movs	r3, #12
 80239ee:	5ee2      	ldrsh	r2, [r4, r3]
 80239f0:	0713      	lsls	r3, r2, #28
 80239f2:	d423      	bmi.n	8023a3c <__swsetup_r+0x68>
 80239f4:	06d3      	lsls	r3, r2, #27
 80239f6:	d407      	bmi.n	8023a08 <__swsetup_r+0x34>
 80239f8:	2309      	movs	r3, #9
 80239fa:	602b      	str	r3, [r5, #0]
 80239fc:	2340      	movs	r3, #64	@ 0x40
 80239fe:	2001      	movs	r0, #1
 8023a00:	4313      	orrs	r3, r2
 8023a02:	81a3      	strh	r3, [r4, #12]
 8023a04:	4240      	negs	r0, r0
 8023a06:	e03a      	b.n	8023a7e <__swsetup_r+0xaa>
 8023a08:	0752      	lsls	r2, r2, #29
 8023a0a:	d513      	bpl.n	8023a34 <__swsetup_r+0x60>
 8023a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023a0e:	2900      	cmp	r1, #0
 8023a10:	d008      	beq.n	8023a24 <__swsetup_r+0x50>
 8023a12:	0023      	movs	r3, r4
 8023a14:	3344      	adds	r3, #68	@ 0x44
 8023a16:	4299      	cmp	r1, r3
 8023a18:	d002      	beq.n	8023a20 <__swsetup_r+0x4c>
 8023a1a:	0028      	movs	r0, r5
 8023a1c:	f000 ffa6 	bl	802496c <_free_r>
 8023a20:	2300      	movs	r3, #0
 8023a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8023a24:	2224      	movs	r2, #36	@ 0x24
 8023a26:	89a3      	ldrh	r3, [r4, #12]
 8023a28:	4393      	bics	r3, r2
 8023a2a:	81a3      	strh	r3, [r4, #12]
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	6063      	str	r3, [r4, #4]
 8023a30:	6923      	ldr	r3, [r4, #16]
 8023a32:	6023      	str	r3, [r4, #0]
 8023a34:	2308      	movs	r3, #8
 8023a36:	89a2      	ldrh	r2, [r4, #12]
 8023a38:	4313      	orrs	r3, r2
 8023a3a:	81a3      	strh	r3, [r4, #12]
 8023a3c:	6923      	ldr	r3, [r4, #16]
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	d10b      	bne.n	8023a5a <__swsetup_r+0x86>
 8023a42:	21a0      	movs	r1, #160	@ 0xa0
 8023a44:	2280      	movs	r2, #128	@ 0x80
 8023a46:	89a3      	ldrh	r3, [r4, #12]
 8023a48:	0089      	lsls	r1, r1, #2
 8023a4a:	0092      	lsls	r2, r2, #2
 8023a4c:	400b      	ands	r3, r1
 8023a4e:	4293      	cmp	r3, r2
 8023a50:	d003      	beq.n	8023a5a <__swsetup_r+0x86>
 8023a52:	0021      	movs	r1, r4
 8023a54:	0028      	movs	r0, r5
 8023a56:	f002 fc51 	bl	80262fc <__smakebuf_r>
 8023a5a:	230c      	movs	r3, #12
 8023a5c:	5ee2      	ldrsh	r2, [r4, r3]
 8023a5e:	2101      	movs	r1, #1
 8023a60:	0013      	movs	r3, r2
 8023a62:	400b      	ands	r3, r1
 8023a64:	420a      	tst	r2, r1
 8023a66:	d00b      	beq.n	8023a80 <__swsetup_r+0xac>
 8023a68:	2300      	movs	r3, #0
 8023a6a:	60a3      	str	r3, [r4, #8]
 8023a6c:	6963      	ldr	r3, [r4, #20]
 8023a6e:	425b      	negs	r3, r3
 8023a70:	61a3      	str	r3, [r4, #24]
 8023a72:	2000      	movs	r0, #0
 8023a74:	6923      	ldr	r3, [r4, #16]
 8023a76:	4283      	cmp	r3, r0
 8023a78:	d101      	bne.n	8023a7e <__swsetup_r+0xaa>
 8023a7a:	0613      	lsls	r3, r2, #24
 8023a7c:	d4be      	bmi.n	80239fc <__swsetup_r+0x28>
 8023a7e:	bd70      	pop	{r4, r5, r6, pc}
 8023a80:	0791      	lsls	r1, r2, #30
 8023a82:	d400      	bmi.n	8023a86 <__swsetup_r+0xb2>
 8023a84:	6963      	ldr	r3, [r4, #20]
 8023a86:	60a3      	str	r3, [r4, #8]
 8023a88:	e7f3      	b.n	8023a72 <__swsetup_r+0x9e>
 8023a8a:	46c0      	nop			@ (mov r8, r8)
 8023a8c:	200003e0 	.word	0x200003e0

08023a90 <memset>:
 8023a90:	0003      	movs	r3, r0
 8023a92:	1882      	adds	r2, r0, r2
 8023a94:	4293      	cmp	r3, r2
 8023a96:	d100      	bne.n	8023a9a <memset+0xa>
 8023a98:	4770      	bx	lr
 8023a9a:	7019      	strb	r1, [r3, #0]
 8023a9c:	3301      	adds	r3, #1
 8023a9e:	e7f9      	b.n	8023a94 <memset+0x4>

08023aa0 <strchr>:
 8023aa0:	b2c9      	uxtb	r1, r1
 8023aa2:	7803      	ldrb	r3, [r0, #0]
 8023aa4:	2b00      	cmp	r3, #0
 8023aa6:	d004      	beq.n	8023ab2 <strchr+0x12>
 8023aa8:	428b      	cmp	r3, r1
 8023aaa:	d100      	bne.n	8023aae <strchr+0xe>
 8023aac:	4770      	bx	lr
 8023aae:	3001      	adds	r0, #1
 8023ab0:	e7f7      	b.n	8023aa2 <strchr+0x2>
 8023ab2:	424b      	negs	r3, r1
 8023ab4:	4159      	adcs	r1, r3
 8023ab6:	4249      	negs	r1, r1
 8023ab8:	4008      	ands	r0, r1
 8023aba:	e7f7      	b.n	8023aac <strchr+0xc>

08023abc <strncmp>:
 8023abc:	b530      	push	{r4, r5, lr}
 8023abe:	0005      	movs	r5, r0
 8023ac0:	1e10      	subs	r0, r2, #0
 8023ac2:	d00b      	beq.n	8023adc <strncmp+0x20>
 8023ac4:	2400      	movs	r4, #0
 8023ac6:	3a01      	subs	r2, #1
 8023ac8:	5d2b      	ldrb	r3, [r5, r4]
 8023aca:	5d08      	ldrb	r0, [r1, r4]
 8023acc:	4283      	cmp	r3, r0
 8023ace:	d104      	bne.n	8023ada <strncmp+0x1e>
 8023ad0:	42a2      	cmp	r2, r4
 8023ad2:	d002      	beq.n	8023ada <strncmp+0x1e>
 8023ad4:	3401      	adds	r4, #1
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d1f6      	bne.n	8023ac8 <strncmp+0xc>
 8023ada:	1a18      	subs	r0, r3, r0
 8023adc:	bd30      	pop	{r4, r5, pc}

08023ade <strncpy>:
 8023ade:	0003      	movs	r3, r0
 8023ae0:	b530      	push	{r4, r5, lr}
 8023ae2:	001d      	movs	r5, r3
 8023ae4:	2a00      	cmp	r2, #0
 8023ae6:	d006      	beq.n	8023af6 <strncpy+0x18>
 8023ae8:	780c      	ldrb	r4, [r1, #0]
 8023aea:	3a01      	subs	r2, #1
 8023aec:	3301      	adds	r3, #1
 8023aee:	702c      	strb	r4, [r5, #0]
 8023af0:	3101      	adds	r1, #1
 8023af2:	2c00      	cmp	r4, #0
 8023af4:	d1f5      	bne.n	8023ae2 <strncpy+0x4>
 8023af6:	2100      	movs	r1, #0
 8023af8:	189a      	adds	r2, r3, r2
 8023afa:	4293      	cmp	r3, r2
 8023afc:	d100      	bne.n	8023b00 <strncpy+0x22>
 8023afe:	bd30      	pop	{r4, r5, pc}
 8023b00:	7019      	strb	r1, [r3, #0]
 8023b02:	3301      	adds	r3, #1
 8023b04:	e7f9      	b.n	8023afa <strncpy+0x1c>

08023b06 <strstr>:
 8023b06:	780a      	ldrb	r2, [r1, #0]
 8023b08:	b530      	push	{r4, r5, lr}
 8023b0a:	2a00      	cmp	r2, #0
 8023b0c:	d10c      	bne.n	8023b28 <strstr+0x22>
 8023b0e:	bd30      	pop	{r4, r5, pc}
 8023b10:	429a      	cmp	r2, r3
 8023b12:	d108      	bne.n	8023b26 <strstr+0x20>
 8023b14:	2301      	movs	r3, #1
 8023b16:	5ccc      	ldrb	r4, [r1, r3]
 8023b18:	2c00      	cmp	r4, #0
 8023b1a:	d0f8      	beq.n	8023b0e <strstr+0x8>
 8023b1c:	5cc5      	ldrb	r5, [r0, r3]
 8023b1e:	42a5      	cmp	r5, r4
 8023b20:	d101      	bne.n	8023b26 <strstr+0x20>
 8023b22:	3301      	adds	r3, #1
 8023b24:	e7f7      	b.n	8023b16 <strstr+0x10>
 8023b26:	3001      	adds	r0, #1
 8023b28:	7803      	ldrb	r3, [r0, #0]
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d1f0      	bne.n	8023b10 <strstr+0xa>
 8023b2e:	0018      	movs	r0, r3
 8023b30:	e7ed      	b.n	8023b0e <strstr+0x8>
	...

08023b34 <_localeconv_r>:
 8023b34:	4800      	ldr	r0, [pc, #0]	@ (8023b38 <_localeconv_r+0x4>)
 8023b36:	4770      	bx	lr
 8023b38:	20000364 	.word	0x20000364

08023b3c <_close_r>:
 8023b3c:	2300      	movs	r3, #0
 8023b3e:	b570      	push	{r4, r5, r6, lr}
 8023b40:	4d06      	ldr	r5, [pc, #24]	@ (8023b5c <_close_r+0x20>)
 8023b42:	0004      	movs	r4, r0
 8023b44:	0008      	movs	r0, r1
 8023b46:	602b      	str	r3, [r5, #0]
 8023b48:	f7ed f9e6 	bl	8010f18 <_close>
 8023b4c:	1c43      	adds	r3, r0, #1
 8023b4e:	d103      	bne.n	8023b58 <_close_r+0x1c>
 8023b50:	682b      	ldr	r3, [r5, #0]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d000      	beq.n	8023b58 <_close_r+0x1c>
 8023b56:	6023      	str	r3, [r4, #0]
 8023b58:	bd70      	pop	{r4, r5, r6, pc}
 8023b5a:	46c0      	nop			@ (mov r8, r8)
 8023b5c:	200035e0 	.word	0x200035e0

08023b60 <_lseek_r>:
 8023b60:	b570      	push	{r4, r5, r6, lr}
 8023b62:	0004      	movs	r4, r0
 8023b64:	0008      	movs	r0, r1
 8023b66:	0011      	movs	r1, r2
 8023b68:	001a      	movs	r2, r3
 8023b6a:	2300      	movs	r3, #0
 8023b6c:	4d05      	ldr	r5, [pc, #20]	@ (8023b84 <_lseek_r+0x24>)
 8023b6e:	602b      	str	r3, [r5, #0]
 8023b70:	f7ed f9f3 	bl	8010f5a <_lseek>
 8023b74:	1c43      	adds	r3, r0, #1
 8023b76:	d103      	bne.n	8023b80 <_lseek_r+0x20>
 8023b78:	682b      	ldr	r3, [r5, #0]
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	d000      	beq.n	8023b80 <_lseek_r+0x20>
 8023b7e:	6023      	str	r3, [r4, #0]
 8023b80:	bd70      	pop	{r4, r5, r6, pc}
 8023b82:	46c0      	nop			@ (mov r8, r8)
 8023b84:	200035e0 	.word	0x200035e0

08023b88 <_read_r>:
 8023b88:	b570      	push	{r4, r5, r6, lr}
 8023b8a:	0004      	movs	r4, r0
 8023b8c:	0008      	movs	r0, r1
 8023b8e:	0011      	movs	r1, r2
 8023b90:	001a      	movs	r2, r3
 8023b92:	2300      	movs	r3, #0
 8023b94:	4d05      	ldr	r5, [pc, #20]	@ (8023bac <_read_r+0x24>)
 8023b96:	602b      	str	r3, [r5, #0]
 8023b98:	f7ed f9a1 	bl	8010ede <_read>
 8023b9c:	1c43      	adds	r3, r0, #1
 8023b9e:	d103      	bne.n	8023ba8 <_read_r+0x20>
 8023ba0:	682b      	ldr	r3, [r5, #0]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	d000      	beq.n	8023ba8 <_read_r+0x20>
 8023ba6:	6023      	str	r3, [r4, #0]
 8023ba8:	bd70      	pop	{r4, r5, r6, pc}
 8023baa:	46c0      	nop			@ (mov r8, r8)
 8023bac:	200035e0 	.word	0x200035e0

08023bb0 <_write_r>:
 8023bb0:	b570      	push	{r4, r5, r6, lr}
 8023bb2:	0004      	movs	r4, r0
 8023bb4:	0008      	movs	r0, r1
 8023bb6:	0011      	movs	r1, r2
 8023bb8:	001a      	movs	r2, r3
 8023bba:	2300      	movs	r3, #0
 8023bbc:	4d05      	ldr	r5, [pc, #20]	@ (8023bd4 <_write_r+0x24>)
 8023bbe:	602b      	str	r3, [r5, #0]
 8023bc0:	f7ed fe5e 	bl	8011880 <_write>
 8023bc4:	1c43      	adds	r3, r0, #1
 8023bc6:	d103      	bne.n	8023bd0 <_write_r+0x20>
 8023bc8:	682b      	ldr	r3, [r5, #0]
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d000      	beq.n	8023bd0 <_write_r+0x20>
 8023bce:	6023      	str	r3, [r4, #0]
 8023bd0:	bd70      	pop	{r4, r5, r6, pc}
 8023bd2:	46c0      	nop			@ (mov r8, r8)
 8023bd4:	200035e0 	.word	0x200035e0

08023bd8 <__errno>:
 8023bd8:	4b01      	ldr	r3, [pc, #4]	@ (8023be0 <__errno+0x8>)
 8023bda:	6818      	ldr	r0, [r3, #0]
 8023bdc:	4770      	bx	lr
 8023bde:	46c0      	nop			@ (mov r8, r8)
 8023be0:	200003e0 	.word	0x200003e0

08023be4 <__libc_init_array>:
 8023be4:	b570      	push	{r4, r5, r6, lr}
 8023be6:	2600      	movs	r6, #0
 8023be8:	4c0c      	ldr	r4, [pc, #48]	@ (8023c1c <__libc_init_array+0x38>)
 8023bea:	4d0d      	ldr	r5, [pc, #52]	@ (8023c20 <__libc_init_array+0x3c>)
 8023bec:	1b64      	subs	r4, r4, r5
 8023bee:	10a4      	asrs	r4, r4, #2
 8023bf0:	42a6      	cmp	r6, r4
 8023bf2:	d109      	bne.n	8023c08 <__libc_init_array+0x24>
 8023bf4:	2600      	movs	r6, #0
 8023bf6:	f003 fe11 	bl	802781c <_init>
 8023bfa:	4c0a      	ldr	r4, [pc, #40]	@ (8023c24 <__libc_init_array+0x40>)
 8023bfc:	4d0a      	ldr	r5, [pc, #40]	@ (8023c28 <__libc_init_array+0x44>)
 8023bfe:	1b64      	subs	r4, r4, r5
 8023c00:	10a4      	asrs	r4, r4, #2
 8023c02:	42a6      	cmp	r6, r4
 8023c04:	d105      	bne.n	8023c12 <__libc_init_array+0x2e>
 8023c06:	bd70      	pop	{r4, r5, r6, pc}
 8023c08:	00b3      	lsls	r3, r6, #2
 8023c0a:	58eb      	ldr	r3, [r5, r3]
 8023c0c:	4798      	blx	r3
 8023c0e:	3601      	adds	r6, #1
 8023c10:	e7ee      	b.n	8023bf0 <__libc_init_array+0xc>
 8023c12:	00b3      	lsls	r3, r6, #2
 8023c14:	58eb      	ldr	r3, [r5, r3]
 8023c16:	4798      	blx	r3
 8023c18:	3601      	adds	r6, #1
 8023c1a:	e7f2      	b.n	8023c02 <__libc_init_array+0x1e>
 8023c1c:	0802bb80 	.word	0x0802bb80
 8023c20:	0802bb80 	.word	0x0802bb80
 8023c24:	0802bb84 	.word	0x0802bb84
 8023c28:	0802bb80 	.word	0x0802bb80

08023c2c <__retarget_lock_init_recursive>:
 8023c2c:	4770      	bx	lr

08023c2e <__retarget_lock_acquire_recursive>:
 8023c2e:	4770      	bx	lr

08023c30 <__retarget_lock_release_recursive>:
 8023c30:	4770      	bx	lr

08023c32 <memchr>:
 8023c32:	b2c9      	uxtb	r1, r1
 8023c34:	1882      	adds	r2, r0, r2
 8023c36:	4290      	cmp	r0, r2
 8023c38:	d101      	bne.n	8023c3e <memchr+0xc>
 8023c3a:	2000      	movs	r0, #0
 8023c3c:	4770      	bx	lr
 8023c3e:	7803      	ldrb	r3, [r0, #0]
 8023c40:	428b      	cmp	r3, r1
 8023c42:	d0fb      	beq.n	8023c3c <memchr+0xa>
 8023c44:	3001      	adds	r0, #1
 8023c46:	e7f6      	b.n	8023c36 <memchr+0x4>

08023c48 <memcpy>:
 8023c48:	2300      	movs	r3, #0
 8023c4a:	b510      	push	{r4, lr}
 8023c4c:	429a      	cmp	r2, r3
 8023c4e:	d100      	bne.n	8023c52 <memcpy+0xa>
 8023c50:	bd10      	pop	{r4, pc}
 8023c52:	5ccc      	ldrb	r4, [r1, r3]
 8023c54:	54c4      	strb	r4, [r0, r3]
 8023c56:	3301      	adds	r3, #1
 8023c58:	e7f8      	b.n	8023c4c <memcpy+0x4>
	...

08023c5c <nan>:
 8023c5c:	2000      	movs	r0, #0
 8023c5e:	4901      	ldr	r1, [pc, #4]	@ (8023c64 <nan+0x8>)
 8023c60:	4770      	bx	lr
 8023c62:	46c0      	nop			@ (mov r8, r8)
 8023c64:	7ff80000 	.word	0x7ff80000

08023c68 <quorem>:
 8023c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c6a:	6902      	ldr	r2, [r0, #16]
 8023c6c:	690f      	ldr	r7, [r1, #16]
 8023c6e:	b087      	sub	sp, #28
 8023c70:	0006      	movs	r6, r0
 8023c72:	000b      	movs	r3, r1
 8023c74:	2000      	movs	r0, #0
 8023c76:	9102      	str	r1, [sp, #8]
 8023c78:	42ba      	cmp	r2, r7
 8023c7a:	db6d      	blt.n	8023d58 <quorem+0xf0>
 8023c7c:	3f01      	subs	r7, #1
 8023c7e:	00bc      	lsls	r4, r7, #2
 8023c80:	3314      	adds	r3, #20
 8023c82:	9305      	str	r3, [sp, #20]
 8023c84:	191b      	adds	r3, r3, r4
 8023c86:	9303      	str	r3, [sp, #12]
 8023c88:	0033      	movs	r3, r6
 8023c8a:	3314      	adds	r3, #20
 8023c8c:	191c      	adds	r4, r3, r4
 8023c8e:	9301      	str	r3, [sp, #4]
 8023c90:	6823      	ldr	r3, [r4, #0]
 8023c92:	9304      	str	r3, [sp, #16]
 8023c94:	9b03      	ldr	r3, [sp, #12]
 8023c96:	9804      	ldr	r0, [sp, #16]
 8023c98:	681d      	ldr	r5, [r3, #0]
 8023c9a:	3501      	adds	r5, #1
 8023c9c:	0029      	movs	r1, r5
 8023c9e:	f7dc fa81 	bl	80001a4 <__udivsi3>
 8023ca2:	9b04      	ldr	r3, [sp, #16]
 8023ca4:	9000      	str	r0, [sp, #0]
 8023ca6:	42ab      	cmp	r3, r5
 8023ca8:	d32b      	bcc.n	8023d02 <quorem+0x9a>
 8023caa:	9b05      	ldr	r3, [sp, #20]
 8023cac:	9d01      	ldr	r5, [sp, #4]
 8023cae:	469c      	mov	ip, r3
 8023cb0:	2300      	movs	r3, #0
 8023cb2:	9305      	str	r3, [sp, #20]
 8023cb4:	9304      	str	r3, [sp, #16]
 8023cb6:	4662      	mov	r2, ip
 8023cb8:	ca08      	ldmia	r2!, {r3}
 8023cba:	6828      	ldr	r0, [r5, #0]
 8023cbc:	4694      	mov	ip, r2
 8023cbe:	9a00      	ldr	r2, [sp, #0]
 8023cc0:	b299      	uxth	r1, r3
 8023cc2:	4351      	muls	r1, r2
 8023cc4:	9a05      	ldr	r2, [sp, #20]
 8023cc6:	0c1b      	lsrs	r3, r3, #16
 8023cc8:	1889      	adds	r1, r1, r2
 8023cca:	9a00      	ldr	r2, [sp, #0]
 8023ccc:	4353      	muls	r3, r2
 8023cce:	0c0a      	lsrs	r2, r1, #16
 8023cd0:	189b      	adds	r3, r3, r2
 8023cd2:	0c1a      	lsrs	r2, r3, #16
 8023cd4:	b289      	uxth	r1, r1
 8023cd6:	9205      	str	r2, [sp, #20]
 8023cd8:	b282      	uxth	r2, r0
 8023cda:	1a52      	subs	r2, r2, r1
 8023cdc:	9904      	ldr	r1, [sp, #16]
 8023cde:	0c00      	lsrs	r0, r0, #16
 8023ce0:	1852      	adds	r2, r2, r1
 8023ce2:	b29b      	uxth	r3, r3
 8023ce4:	1411      	asrs	r1, r2, #16
 8023ce6:	1ac3      	subs	r3, r0, r3
 8023ce8:	185b      	adds	r3, r3, r1
 8023cea:	1419      	asrs	r1, r3, #16
 8023cec:	b292      	uxth	r2, r2
 8023cee:	041b      	lsls	r3, r3, #16
 8023cf0:	431a      	orrs	r2, r3
 8023cf2:	9b03      	ldr	r3, [sp, #12]
 8023cf4:	9104      	str	r1, [sp, #16]
 8023cf6:	c504      	stmia	r5!, {r2}
 8023cf8:	4563      	cmp	r3, ip
 8023cfa:	d2dc      	bcs.n	8023cb6 <quorem+0x4e>
 8023cfc:	6823      	ldr	r3, [r4, #0]
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d030      	beq.n	8023d64 <quorem+0xfc>
 8023d02:	0030      	movs	r0, r6
 8023d04:	9902      	ldr	r1, [sp, #8]
 8023d06:	f001 fd7d 	bl	8025804 <__mcmp>
 8023d0a:	2800      	cmp	r0, #0
 8023d0c:	db23      	blt.n	8023d56 <quorem+0xee>
 8023d0e:	0034      	movs	r4, r6
 8023d10:	2500      	movs	r5, #0
 8023d12:	9902      	ldr	r1, [sp, #8]
 8023d14:	3414      	adds	r4, #20
 8023d16:	3114      	adds	r1, #20
 8023d18:	6823      	ldr	r3, [r4, #0]
 8023d1a:	c901      	ldmia	r1!, {r0}
 8023d1c:	9302      	str	r3, [sp, #8]
 8023d1e:	466b      	mov	r3, sp
 8023d20:	891b      	ldrh	r3, [r3, #8]
 8023d22:	b282      	uxth	r2, r0
 8023d24:	1a9a      	subs	r2, r3, r2
 8023d26:	9b02      	ldr	r3, [sp, #8]
 8023d28:	1952      	adds	r2, r2, r5
 8023d2a:	0c00      	lsrs	r0, r0, #16
 8023d2c:	0c1b      	lsrs	r3, r3, #16
 8023d2e:	1a1b      	subs	r3, r3, r0
 8023d30:	1410      	asrs	r0, r2, #16
 8023d32:	181b      	adds	r3, r3, r0
 8023d34:	141d      	asrs	r5, r3, #16
 8023d36:	b292      	uxth	r2, r2
 8023d38:	041b      	lsls	r3, r3, #16
 8023d3a:	431a      	orrs	r2, r3
 8023d3c:	9b03      	ldr	r3, [sp, #12]
 8023d3e:	c404      	stmia	r4!, {r2}
 8023d40:	428b      	cmp	r3, r1
 8023d42:	d2e9      	bcs.n	8023d18 <quorem+0xb0>
 8023d44:	9a01      	ldr	r2, [sp, #4]
 8023d46:	00bb      	lsls	r3, r7, #2
 8023d48:	18d3      	adds	r3, r2, r3
 8023d4a:	681a      	ldr	r2, [r3, #0]
 8023d4c:	2a00      	cmp	r2, #0
 8023d4e:	d013      	beq.n	8023d78 <quorem+0x110>
 8023d50:	9b00      	ldr	r3, [sp, #0]
 8023d52:	3301      	adds	r3, #1
 8023d54:	9300      	str	r3, [sp, #0]
 8023d56:	9800      	ldr	r0, [sp, #0]
 8023d58:	b007      	add	sp, #28
 8023d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d5c:	6823      	ldr	r3, [r4, #0]
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d104      	bne.n	8023d6c <quorem+0x104>
 8023d62:	3f01      	subs	r7, #1
 8023d64:	9b01      	ldr	r3, [sp, #4]
 8023d66:	3c04      	subs	r4, #4
 8023d68:	42a3      	cmp	r3, r4
 8023d6a:	d3f7      	bcc.n	8023d5c <quorem+0xf4>
 8023d6c:	6137      	str	r7, [r6, #16]
 8023d6e:	e7c8      	b.n	8023d02 <quorem+0x9a>
 8023d70:	681a      	ldr	r2, [r3, #0]
 8023d72:	2a00      	cmp	r2, #0
 8023d74:	d104      	bne.n	8023d80 <quorem+0x118>
 8023d76:	3f01      	subs	r7, #1
 8023d78:	9a01      	ldr	r2, [sp, #4]
 8023d7a:	3b04      	subs	r3, #4
 8023d7c:	429a      	cmp	r2, r3
 8023d7e:	d3f7      	bcc.n	8023d70 <quorem+0x108>
 8023d80:	6137      	str	r7, [r6, #16]
 8023d82:	e7e5      	b.n	8023d50 <quorem+0xe8>

08023d84 <_dtoa_r>:
 8023d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d86:	0014      	movs	r4, r2
 8023d88:	001d      	movs	r5, r3
 8023d8a:	69c6      	ldr	r6, [r0, #28]
 8023d8c:	b09d      	sub	sp, #116	@ 0x74
 8023d8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8023d90:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023d92:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8023d94:	9003      	str	r0, [sp, #12]
 8023d96:	2e00      	cmp	r6, #0
 8023d98:	d10f      	bne.n	8023dba <_dtoa_r+0x36>
 8023d9a:	2010      	movs	r0, #16
 8023d9c:	f001 f98a 	bl	80250b4 <malloc>
 8023da0:	9b03      	ldr	r3, [sp, #12]
 8023da2:	1e02      	subs	r2, r0, #0
 8023da4:	61d8      	str	r0, [r3, #28]
 8023da6:	d104      	bne.n	8023db2 <_dtoa_r+0x2e>
 8023da8:	21ef      	movs	r1, #239	@ 0xef
 8023daa:	4bc7      	ldr	r3, [pc, #796]	@ (80240c8 <_dtoa_r+0x344>)
 8023dac:	48c7      	ldr	r0, [pc, #796]	@ (80240cc <_dtoa_r+0x348>)
 8023dae:	f002 fb2f 	bl	8026410 <__assert_func>
 8023db2:	6046      	str	r6, [r0, #4]
 8023db4:	6086      	str	r6, [r0, #8]
 8023db6:	6006      	str	r6, [r0, #0]
 8023db8:	60c6      	str	r6, [r0, #12]
 8023dba:	9b03      	ldr	r3, [sp, #12]
 8023dbc:	69db      	ldr	r3, [r3, #28]
 8023dbe:	6819      	ldr	r1, [r3, #0]
 8023dc0:	2900      	cmp	r1, #0
 8023dc2:	d00b      	beq.n	8023ddc <_dtoa_r+0x58>
 8023dc4:	685a      	ldr	r2, [r3, #4]
 8023dc6:	2301      	movs	r3, #1
 8023dc8:	4093      	lsls	r3, r2
 8023dca:	604a      	str	r2, [r1, #4]
 8023dcc:	608b      	str	r3, [r1, #8]
 8023dce:	9803      	ldr	r0, [sp, #12]
 8023dd0:	f001 fa82 	bl	80252d8 <_Bfree>
 8023dd4:	2200      	movs	r2, #0
 8023dd6:	9b03      	ldr	r3, [sp, #12]
 8023dd8:	69db      	ldr	r3, [r3, #28]
 8023dda:	601a      	str	r2, [r3, #0]
 8023ddc:	2d00      	cmp	r5, #0
 8023dde:	da1e      	bge.n	8023e1e <_dtoa_r+0x9a>
 8023de0:	2301      	movs	r3, #1
 8023de2:	603b      	str	r3, [r7, #0]
 8023de4:	006b      	lsls	r3, r5, #1
 8023de6:	085b      	lsrs	r3, r3, #1
 8023de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023dea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023dec:	4bb8      	ldr	r3, [pc, #736]	@ (80240d0 <_dtoa_r+0x34c>)
 8023dee:	4ab8      	ldr	r2, [pc, #736]	@ (80240d0 <_dtoa_r+0x34c>)
 8023df0:	403b      	ands	r3, r7
 8023df2:	4293      	cmp	r3, r2
 8023df4:	d116      	bne.n	8023e24 <_dtoa_r+0xa0>
 8023df6:	4bb7      	ldr	r3, [pc, #732]	@ (80240d4 <_dtoa_r+0x350>)
 8023df8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023dfa:	6013      	str	r3, [r2, #0]
 8023dfc:	033b      	lsls	r3, r7, #12
 8023dfe:	0b1b      	lsrs	r3, r3, #12
 8023e00:	4323      	orrs	r3, r4
 8023e02:	d101      	bne.n	8023e08 <_dtoa_r+0x84>
 8023e04:	f000 fd83 	bl	802490e <_dtoa_r+0xb8a>
 8023e08:	4bb3      	ldr	r3, [pc, #716]	@ (80240d8 <_dtoa_r+0x354>)
 8023e0a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e0c:	9308      	str	r3, [sp, #32]
 8023e0e:	2a00      	cmp	r2, #0
 8023e10:	d002      	beq.n	8023e18 <_dtoa_r+0x94>
 8023e12:	4bb2      	ldr	r3, [pc, #712]	@ (80240dc <_dtoa_r+0x358>)
 8023e14:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e16:	6013      	str	r3, [r2, #0]
 8023e18:	9808      	ldr	r0, [sp, #32]
 8023e1a:	b01d      	add	sp, #116	@ 0x74
 8023e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023e1e:	2300      	movs	r3, #0
 8023e20:	603b      	str	r3, [r7, #0]
 8023e22:	e7e2      	b.n	8023dea <_dtoa_r+0x66>
 8023e24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023e28:	9212      	str	r2, [sp, #72]	@ 0x48
 8023e2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023e2c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023e2e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023e30:	2200      	movs	r2, #0
 8023e32:	2300      	movs	r3, #0
 8023e34:	f7dc fb3c 	bl	80004b0 <__aeabi_dcmpeq>
 8023e38:	1e06      	subs	r6, r0, #0
 8023e3a:	d00b      	beq.n	8023e54 <_dtoa_r+0xd0>
 8023e3c:	2301      	movs	r3, #1
 8023e3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023e40:	6013      	str	r3, [r2, #0]
 8023e42:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d002      	beq.n	8023e4e <_dtoa_r+0xca>
 8023e48:	4ba5      	ldr	r3, [pc, #660]	@ (80240e0 <_dtoa_r+0x35c>)
 8023e4a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e4c:	6013      	str	r3, [r2, #0]
 8023e4e:	4ba5      	ldr	r3, [pc, #660]	@ (80240e4 <_dtoa_r+0x360>)
 8023e50:	9308      	str	r3, [sp, #32]
 8023e52:	e7e1      	b.n	8023e18 <_dtoa_r+0x94>
 8023e54:	ab1a      	add	r3, sp, #104	@ 0x68
 8023e56:	9301      	str	r3, [sp, #4]
 8023e58:	ab1b      	add	r3, sp, #108	@ 0x6c
 8023e5a:	9300      	str	r3, [sp, #0]
 8023e5c:	9803      	ldr	r0, [sp, #12]
 8023e5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023e60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023e62:	f001 fdf1 	bl	8025a48 <__d2b>
 8023e66:	007a      	lsls	r2, r7, #1
 8023e68:	9005      	str	r0, [sp, #20]
 8023e6a:	0d52      	lsrs	r2, r2, #21
 8023e6c:	d100      	bne.n	8023e70 <_dtoa_r+0xec>
 8023e6e:	e07b      	b.n	8023f68 <_dtoa_r+0x1e4>
 8023e70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023e72:	9618      	str	r6, [sp, #96]	@ 0x60
 8023e74:	0319      	lsls	r1, r3, #12
 8023e76:	4b9c      	ldr	r3, [pc, #624]	@ (80240e8 <_dtoa_r+0x364>)
 8023e78:	0b09      	lsrs	r1, r1, #12
 8023e7a:	430b      	orrs	r3, r1
 8023e7c:	499b      	ldr	r1, [pc, #620]	@ (80240ec <_dtoa_r+0x368>)
 8023e7e:	1857      	adds	r7, r2, r1
 8023e80:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023e82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023e84:	0019      	movs	r1, r3
 8023e86:	2200      	movs	r2, #0
 8023e88:	4b99      	ldr	r3, [pc, #612]	@ (80240f0 <_dtoa_r+0x36c>)
 8023e8a:	f7de fe9f 	bl	8002bcc <__aeabi_dsub>
 8023e8e:	4a99      	ldr	r2, [pc, #612]	@ (80240f4 <_dtoa_r+0x370>)
 8023e90:	4b99      	ldr	r3, [pc, #612]	@ (80240f8 <_dtoa_r+0x374>)
 8023e92:	f7de fbd3 	bl	800263c <__aeabi_dmul>
 8023e96:	4a99      	ldr	r2, [pc, #612]	@ (80240fc <_dtoa_r+0x378>)
 8023e98:	4b99      	ldr	r3, [pc, #612]	@ (8024100 <_dtoa_r+0x37c>)
 8023e9a:	f7dd fc27 	bl	80016ec <__aeabi_dadd>
 8023e9e:	0004      	movs	r4, r0
 8023ea0:	0038      	movs	r0, r7
 8023ea2:	000d      	movs	r5, r1
 8023ea4:	f7df fa8c 	bl	80033c0 <__aeabi_i2d>
 8023ea8:	4a96      	ldr	r2, [pc, #600]	@ (8024104 <_dtoa_r+0x380>)
 8023eaa:	4b97      	ldr	r3, [pc, #604]	@ (8024108 <_dtoa_r+0x384>)
 8023eac:	f7de fbc6 	bl	800263c <__aeabi_dmul>
 8023eb0:	0002      	movs	r2, r0
 8023eb2:	000b      	movs	r3, r1
 8023eb4:	0020      	movs	r0, r4
 8023eb6:	0029      	movs	r1, r5
 8023eb8:	f7dd fc18 	bl	80016ec <__aeabi_dadd>
 8023ebc:	0004      	movs	r4, r0
 8023ebe:	000d      	movs	r5, r1
 8023ec0:	f7df fa42 	bl	8003348 <__aeabi_d2iz>
 8023ec4:	2200      	movs	r2, #0
 8023ec6:	9004      	str	r0, [sp, #16]
 8023ec8:	2300      	movs	r3, #0
 8023eca:	0020      	movs	r0, r4
 8023ecc:	0029      	movs	r1, r5
 8023ece:	f7dc faf5 	bl	80004bc <__aeabi_dcmplt>
 8023ed2:	2800      	cmp	r0, #0
 8023ed4:	d00b      	beq.n	8023eee <_dtoa_r+0x16a>
 8023ed6:	9804      	ldr	r0, [sp, #16]
 8023ed8:	f7df fa72 	bl	80033c0 <__aeabi_i2d>
 8023edc:	002b      	movs	r3, r5
 8023ede:	0022      	movs	r2, r4
 8023ee0:	f7dc fae6 	bl	80004b0 <__aeabi_dcmpeq>
 8023ee4:	4243      	negs	r3, r0
 8023ee6:	4158      	adcs	r0, r3
 8023ee8:	9b04      	ldr	r3, [sp, #16]
 8023eea:	1a1b      	subs	r3, r3, r0
 8023eec:	9304      	str	r3, [sp, #16]
 8023eee:	2301      	movs	r3, #1
 8023ef0:	9315      	str	r3, [sp, #84]	@ 0x54
 8023ef2:	9b04      	ldr	r3, [sp, #16]
 8023ef4:	2b16      	cmp	r3, #22
 8023ef6:	d810      	bhi.n	8023f1a <_dtoa_r+0x196>
 8023ef8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023efa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023efc:	9a04      	ldr	r2, [sp, #16]
 8023efe:	4b83      	ldr	r3, [pc, #524]	@ (802410c <_dtoa_r+0x388>)
 8023f00:	00d2      	lsls	r2, r2, #3
 8023f02:	189b      	adds	r3, r3, r2
 8023f04:	681a      	ldr	r2, [r3, #0]
 8023f06:	685b      	ldr	r3, [r3, #4]
 8023f08:	f7dc fad8 	bl	80004bc <__aeabi_dcmplt>
 8023f0c:	2800      	cmp	r0, #0
 8023f0e:	d047      	beq.n	8023fa0 <_dtoa_r+0x21c>
 8023f10:	9b04      	ldr	r3, [sp, #16]
 8023f12:	3b01      	subs	r3, #1
 8023f14:	9304      	str	r3, [sp, #16]
 8023f16:	2300      	movs	r3, #0
 8023f18:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f1a:	2200      	movs	r2, #0
 8023f1c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023f1e:	9206      	str	r2, [sp, #24]
 8023f20:	1bdb      	subs	r3, r3, r7
 8023f22:	1e5a      	subs	r2, r3, #1
 8023f24:	d53e      	bpl.n	8023fa4 <_dtoa_r+0x220>
 8023f26:	2201      	movs	r2, #1
 8023f28:	1ad3      	subs	r3, r2, r3
 8023f2a:	9306      	str	r3, [sp, #24]
 8023f2c:	2300      	movs	r3, #0
 8023f2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f30:	9b04      	ldr	r3, [sp, #16]
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	db38      	blt.n	8023fa8 <_dtoa_r+0x224>
 8023f36:	9a04      	ldr	r2, [sp, #16]
 8023f38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023f3a:	4694      	mov	ip, r2
 8023f3c:	4463      	add	r3, ip
 8023f3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f40:	2300      	movs	r3, #0
 8023f42:	9214      	str	r2, [sp, #80]	@ 0x50
 8023f44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023f46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023f48:	2401      	movs	r4, #1
 8023f4a:	2b09      	cmp	r3, #9
 8023f4c:	d867      	bhi.n	802401e <_dtoa_r+0x29a>
 8023f4e:	2b05      	cmp	r3, #5
 8023f50:	dd02      	ble.n	8023f58 <_dtoa_r+0x1d4>
 8023f52:	2400      	movs	r4, #0
 8023f54:	3b04      	subs	r3, #4
 8023f56:	9322      	str	r3, [sp, #136]	@ 0x88
 8023f58:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023f5a:	1e98      	subs	r0, r3, #2
 8023f5c:	2803      	cmp	r0, #3
 8023f5e:	d867      	bhi.n	8024030 <_dtoa_r+0x2ac>
 8023f60:	f7dc f90c 	bl	800017c <__gnu_thumb1_case_uqi>
 8023f64:	5b383a2b 	.word	0x5b383a2b
 8023f68:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023f6a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8023f6c:	18f6      	adds	r6, r6, r3
 8023f6e:	4b68      	ldr	r3, [pc, #416]	@ (8024110 <_dtoa_r+0x38c>)
 8023f70:	18f2      	adds	r2, r6, r3
 8023f72:	2a20      	cmp	r2, #32
 8023f74:	dd0f      	ble.n	8023f96 <_dtoa_r+0x212>
 8023f76:	2340      	movs	r3, #64	@ 0x40
 8023f78:	1a9b      	subs	r3, r3, r2
 8023f7a:	409f      	lsls	r7, r3
 8023f7c:	4b65      	ldr	r3, [pc, #404]	@ (8024114 <_dtoa_r+0x390>)
 8023f7e:	0038      	movs	r0, r7
 8023f80:	18f3      	adds	r3, r6, r3
 8023f82:	40dc      	lsrs	r4, r3
 8023f84:	4320      	orrs	r0, r4
 8023f86:	f7df fa49 	bl	800341c <__aeabi_ui2d>
 8023f8a:	2201      	movs	r2, #1
 8023f8c:	4b62      	ldr	r3, [pc, #392]	@ (8024118 <_dtoa_r+0x394>)
 8023f8e:	1e77      	subs	r7, r6, #1
 8023f90:	18cb      	adds	r3, r1, r3
 8023f92:	9218      	str	r2, [sp, #96]	@ 0x60
 8023f94:	e776      	b.n	8023e84 <_dtoa_r+0x100>
 8023f96:	2320      	movs	r3, #32
 8023f98:	0020      	movs	r0, r4
 8023f9a:	1a9b      	subs	r3, r3, r2
 8023f9c:	4098      	lsls	r0, r3
 8023f9e:	e7f2      	b.n	8023f86 <_dtoa_r+0x202>
 8023fa0:	9015      	str	r0, [sp, #84]	@ 0x54
 8023fa2:	e7ba      	b.n	8023f1a <_dtoa_r+0x196>
 8023fa4:	920d      	str	r2, [sp, #52]	@ 0x34
 8023fa6:	e7c3      	b.n	8023f30 <_dtoa_r+0x1ac>
 8023fa8:	9b06      	ldr	r3, [sp, #24]
 8023faa:	9a04      	ldr	r2, [sp, #16]
 8023fac:	1a9b      	subs	r3, r3, r2
 8023fae:	9306      	str	r3, [sp, #24]
 8023fb0:	4253      	negs	r3, r2
 8023fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fb4:	2300      	movs	r3, #0
 8023fb6:	9314      	str	r3, [sp, #80]	@ 0x50
 8023fb8:	e7c5      	b.n	8023f46 <_dtoa_r+0x1c2>
 8023fba:	2300      	movs	r3, #0
 8023fbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fbe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023fc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	dc13      	bgt.n	8023ff0 <_dtoa_r+0x26c>
 8023fc8:	2301      	movs	r3, #1
 8023fca:	001a      	movs	r2, r3
 8023fcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fd0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023fd2:	e00d      	b.n	8023ff0 <_dtoa_r+0x26c>
 8023fd4:	2301      	movs	r3, #1
 8023fd6:	e7f1      	b.n	8023fbc <_dtoa_r+0x238>
 8023fd8:	2300      	movs	r3, #0
 8023fda:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8023fdc:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fde:	4694      	mov	ip, r2
 8023fe0:	9b04      	ldr	r3, [sp, #16]
 8023fe2:	4463      	add	r3, ip
 8023fe4:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fe6:	3301      	adds	r3, #1
 8023fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	dc00      	bgt.n	8023ff0 <_dtoa_r+0x26c>
 8023fee:	2301      	movs	r3, #1
 8023ff0:	9a03      	ldr	r2, [sp, #12]
 8023ff2:	2100      	movs	r1, #0
 8023ff4:	69d0      	ldr	r0, [r2, #28]
 8023ff6:	2204      	movs	r2, #4
 8023ff8:	0015      	movs	r5, r2
 8023ffa:	3514      	adds	r5, #20
 8023ffc:	429d      	cmp	r5, r3
 8023ffe:	d91b      	bls.n	8024038 <_dtoa_r+0x2b4>
 8024000:	6041      	str	r1, [r0, #4]
 8024002:	9803      	ldr	r0, [sp, #12]
 8024004:	f001 f924 	bl	8025250 <_Balloc>
 8024008:	9008      	str	r0, [sp, #32]
 802400a:	2800      	cmp	r0, #0
 802400c:	d117      	bne.n	802403e <_dtoa_r+0x2ba>
 802400e:	21b0      	movs	r1, #176	@ 0xb0
 8024010:	4b42      	ldr	r3, [pc, #264]	@ (802411c <_dtoa_r+0x398>)
 8024012:	482e      	ldr	r0, [pc, #184]	@ (80240cc <_dtoa_r+0x348>)
 8024014:	9a08      	ldr	r2, [sp, #32]
 8024016:	31ff      	adds	r1, #255	@ 0xff
 8024018:	e6c9      	b.n	8023dae <_dtoa_r+0x2a>
 802401a:	2301      	movs	r3, #1
 802401c:	e7dd      	b.n	8023fda <_dtoa_r+0x256>
 802401e:	2300      	movs	r3, #0
 8024020:	9410      	str	r4, [sp, #64]	@ 0x40
 8024022:	9322      	str	r3, [sp, #136]	@ 0x88
 8024024:	3b01      	subs	r3, #1
 8024026:	930e      	str	r3, [sp, #56]	@ 0x38
 8024028:	9309      	str	r3, [sp, #36]	@ 0x24
 802402a:	2200      	movs	r2, #0
 802402c:	3313      	adds	r3, #19
 802402e:	e7cf      	b.n	8023fd0 <_dtoa_r+0x24c>
 8024030:	2301      	movs	r3, #1
 8024032:	9310      	str	r3, [sp, #64]	@ 0x40
 8024034:	3b02      	subs	r3, #2
 8024036:	e7f6      	b.n	8024026 <_dtoa_r+0x2a2>
 8024038:	3101      	adds	r1, #1
 802403a:	0052      	lsls	r2, r2, #1
 802403c:	e7dc      	b.n	8023ff8 <_dtoa_r+0x274>
 802403e:	9b03      	ldr	r3, [sp, #12]
 8024040:	9a08      	ldr	r2, [sp, #32]
 8024042:	69db      	ldr	r3, [r3, #28]
 8024044:	601a      	str	r2, [r3, #0]
 8024046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024048:	2b0e      	cmp	r3, #14
 802404a:	d900      	bls.n	802404e <_dtoa_r+0x2ca>
 802404c:	e0d9      	b.n	8024202 <_dtoa_r+0x47e>
 802404e:	2c00      	cmp	r4, #0
 8024050:	d100      	bne.n	8024054 <_dtoa_r+0x2d0>
 8024052:	e0d6      	b.n	8024202 <_dtoa_r+0x47e>
 8024054:	9b04      	ldr	r3, [sp, #16]
 8024056:	2b00      	cmp	r3, #0
 8024058:	dd64      	ble.n	8024124 <_dtoa_r+0x3a0>
 802405a:	210f      	movs	r1, #15
 802405c:	9a04      	ldr	r2, [sp, #16]
 802405e:	4b2b      	ldr	r3, [pc, #172]	@ (802410c <_dtoa_r+0x388>)
 8024060:	400a      	ands	r2, r1
 8024062:	00d2      	lsls	r2, r2, #3
 8024064:	189b      	adds	r3, r3, r2
 8024066:	681e      	ldr	r6, [r3, #0]
 8024068:	685f      	ldr	r7, [r3, #4]
 802406a:	9b04      	ldr	r3, [sp, #16]
 802406c:	2402      	movs	r4, #2
 802406e:	111d      	asrs	r5, r3, #4
 8024070:	05db      	lsls	r3, r3, #23
 8024072:	d50a      	bpl.n	802408a <_dtoa_r+0x306>
 8024074:	4b2a      	ldr	r3, [pc, #168]	@ (8024120 <_dtoa_r+0x39c>)
 8024076:	400d      	ands	r5, r1
 8024078:	6a1a      	ldr	r2, [r3, #32]
 802407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802407c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802407e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024080:	f7dd fe98 	bl	8001db4 <__aeabi_ddiv>
 8024084:	900a      	str	r0, [sp, #40]	@ 0x28
 8024086:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024088:	3401      	adds	r4, #1
 802408a:	4b25      	ldr	r3, [pc, #148]	@ (8024120 <_dtoa_r+0x39c>)
 802408c:	930c      	str	r3, [sp, #48]	@ 0x30
 802408e:	2d00      	cmp	r5, #0
 8024090:	d108      	bne.n	80240a4 <_dtoa_r+0x320>
 8024092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024096:	0032      	movs	r2, r6
 8024098:	003b      	movs	r3, r7
 802409a:	f7dd fe8b 	bl	8001db4 <__aeabi_ddiv>
 802409e:	900a      	str	r0, [sp, #40]	@ 0x28
 80240a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80240a2:	e05a      	b.n	802415a <_dtoa_r+0x3d6>
 80240a4:	2301      	movs	r3, #1
 80240a6:	421d      	tst	r5, r3
 80240a8:	d009      	beq.n	80240be <_dtoa_r+0x33a>
 80240aa:	18e4      	adds	r4, r4, r3
 80240ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240ae:	0030      	movs	r0, r6
 80240b0:	681a      	ldr	r2, [r3, #0]
 80240b2:	685b      	ldr	r3, [r3, #4]
 80240b4:	0039      	movs	r1, r7
 80240b6:	f7de fac1 	bl	800263c <__aeabi_dmul>
 80240ba:	0006      	movs	r6, r0
 80240bc:	000f      	movs	r7, r1
 80240be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80240c0:	106d      	asrs	r5, r5, #1
 80240c2:	3308      	adds	r3, #8
 80240c4:	e7e2      	b.n	802408c <_dtoa_r+0x308>
 80240c6:	46c0      	nop			@ (mov r8, r8)
 80240c8:	0802b8aa 	.word	0x0802b8aa
 80240cc:	0802b8c1 	.word	0x0802b8c1
 80240d0:	7ff00000 	.word	0x7ff00000
 80240d4:	0000270f 	.word	0x0000270f
 80240d8:	0802b8a6 	.word	0x0802b8a6
 80240dc:	0802b8a9 	.word	0x0802b8a9
 80240e0:	0802b872 	.word	0x0802b872
 80240e4:	0802b871 	.word	0x0802b871
 80240e8:	3ff00000 	.word	0x3ff00000
 80240ec:	fffffc01 	.word	0xfffffc01
 80240f0:	3ff80000 	.word	0x3ff80000
 80240f4:	636f4361 	.word	0x636f4361
 80240f8:	3fd287a7 	.word	0x3fd287a7
 80240fc:	8b60c8b3 	.word	0x8b60c8b3
 8024100:	3fc68a28 	.word	0x3fc68a28
 8024104:	509f79fb 	.word	0x509f79fb
 8024108:	3fd34413 	.word	0x3fd34413
 802410c:	0802ba18 	.word	0x0802ba18
 8024110:	00000432 	.word	0x00000432
 8024114:	00000412 	.word	0x00000412
 8024118:	fe100000 	.word	0xfe100000
 802411c:	0802b919 	.word	0x0802b919
 8024120:	0802b9f0 	.word	0x0802b9f0
 8024124:	9b04      	ldr	r3, [sp, #16]
 8024126:	2402      	movs	r4, #2
 8024128:	2b00      	cmp	r3, #0
 802412a:	d016      	beq.n	802415a <_dtoa_r+0x3d6>
 802412c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802412e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024130:	220f      	movs	r2, #15
 8024132:	425d      	negs	r5, r3
 8024134:	402a      	ands	r2, r5
 8024136:	4bd7      	ldr	r3, [pc, #860]	@ (8024494 <_dtoa_r+0x710>)
 8024138:	00d2      	lsls	r2, r2, #3
 802413a:	189b      	adds	r3, r3, r2
 802413c:	681a      	ldr	r2, [r3, #0]
 802413e:	685b      	ldr	r3, [r3, #4]
 8024140:	f7de fa7c 	bl	800263c <__aeabi_dmul>
 8024144:	2701      	movs	r7, #1
 8024146:	2300      	movs	r3, #0
 8024148:	900a      	str	r0, [sp, #40]	@ 0x28
 802414a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802414c:	4ed2      	ldr	r6, [pc, #840]	@ (8024498 <_dtoa_r+0x714>)
 802414e:	112d      	asrs	r5, r5, #4
 8024150:	2d00      	cmp	r5, #0
 8024152:	d000      	beq.n	8024156 <_dtoa_r+0x3d2>
 8024154:	e0ba      	b.n	80242cc <_dtoa_r+0x548>
 8024156:	2b00      	cmp	r3, #0
 8024158:	d1a1      	bne.n	802409e <_dtoa_r+0x31a>
 802415a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802415c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802415e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024160:	2b00      	cmp	r3, #0
 8024162:	d100      	bne.n	8024166 <_dtoa_r+0x3e2>
 8024164:	e0bd      	b.n	80242e2 <_dtoa_r+0x55e>
 8024166:	2200      	movs	r2, #0
 8024168:	0030      	movs	r0, r6
 802416a:	0039      	movs	r1, r7
 802416c:	4bcb      	ldr	r3, [pc, #812]	@ (802449c <_dtoa_r+0x718>)
 802416e:	f7dc f9a5 	bl	80004bc <__aeabi_dcmplt>
 8024172:	2800      	cmp	r0, #0
 8024174:	d100      	bne.n	8024178 <_dtoa_r+0x3f4>
 8024176:	e0b4      	b.n	80242e2 <_dtoa_r+0x55e>
 8024178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802417a:	2b00      	cmp	r3, #0
 802417c:	d100      	bne.n	8024180 <_dtoa_r+0x3fc>
 802417e:	e0b0      	b.n	80242e2 <_dtoa_r+0x55e>
 8024180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024182:	2b00      	cmp	r3, #0
 8024184:	dd39      	ble.n	80241fa <_dtoa_r+0x476>
 8024186:	9b04      	ldr	r3, [sp, #16]
 8024188:	2200      	movs	r2, #0
 802418a:	3b01      	subs	r3, #1
 802418c:	930c      	str	r3, [sp, #48]	@ 0x30
 802418e:	0030      	movs	r0, r6
 8024190:	4bc3      	ldr	r3, [pc, #780]	@ (80244a0 <_dtoa_r+0x71c>)
 8024192:	0039      	movs	r1, r7
 8024194:	f7de fa52 	bl	800263c <__aeabi_dmul>
 8024198:	900a      	str	r0, [sp, #40]	@ 0x28
 802419a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802419c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802419e:	3401      	adds	r4, #1
 80241a0:	0020      	movs	r0, r4
 80241a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80241a4:	f7df f90c 	bl	80033c0 <__aeabi_i2d>
 80241a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80241aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80241ac:	f7de fa46 	bl	800263c <__aeabi_dmul>
 80241b0:	4bbc      	ldr	r3, [pc, #752]	@ (80244a4 <_dtoa_r+0x720>)
 80241b2:	2200      	movs	r2, #0
 80241b4:	f7dd fa9a 	bl	80016ec <__aeabi_dadd>
 80241b8:	4bbb      	ldr	r3, [pc, #748]	@ (80244a8 <_dtoa_r+0x724>)
 80241ba:	0006      	movs	r6, r0
 80241bc:	18cf      	adds	r7, r1, r3
 80241be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	d000      	beq.n	80241c6 <_dtoa_r+0x442>
 80241c4:	e091      	b.n	80242ea <_dtoa_r+0x566>
 80241c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80241c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80241ca:	2200      	movs	r2, #0
 80241cc:	4bb7      	ldr	r3, [pc, #732]	@ (80244ac <_dtoa_r+0x728>)
 80241ce:	f7de fcfd 	bl	8002bcc <__aeabi_dsub>
 80241d2:	0032      	movs	r2, r6
 80241d4:	003b      	movs	r3, r7
 80241d6:	0004      	movs	r4, r0
 80241d8:	000d      	movs	r5, r1
 80241da:	f7dc f983 	bl	80004e4 <__aeabi_dcmpgt>
 80241de:	2800      	cmp	r0, #0
 80241e0:	d000      	beq.n	80241e4 <_dtoa_r+0x460>
 80241e2:	e29d      	b.n	8024720 <_dtoa_r+0x99c>
 80241e4:	2180      	movs	r1, #128	@ 0x80
 80241e6:	0609      	lsls	r1, r1, #24
 80241e8:	187b      	adds	r3, r7, r1
 80241ea:	0032      	movs	r2, r6
 80241ec:	0020      	movs	r0, r4
 80241ee:	0029      	movs	r1, r5
 80241f0:	f7dc f964 	bl	80004bc <__aeabi_dcmplt>
 80241f4:	2800      	cmp	r0, #0
 80241f6:	d000      	beq.n	80241fa <_dtoa_r+0x476>
 80241f8:	e130      	b.n	802445c <_dtoa_r+0x6d8>
 80241fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80241fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80241fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8024200:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024202:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024204:	2b00      	cmp	r3, #0
 8024206:	da00      	bge.n	802420a <_dtoa_r+0x486>
 8024208:	e177      	b.n	80244fa <_dtoa_r+0x776>
 802420a:	9a04      	ldr	r2, [sp, #16]
 802420c:	2a0e      	cmp	r2, #14
 802420e:	dd00      	ble.n	8024212 <_dtoa_r+0x48e>
 8024210:	e173      	b.n	80244fa <_dtoa_r+0x776>
 8024212:	4ba0      	ldr	r3, [pc, #640]	@ (8024494 <_dtoa_r+0x710>)
 8024214:	00d2      	lsls	r2, r2, #3
 8024216:	189b      	adds	r3, r3, r2
 8024218:	685c      	ldr	r4, [r3, #4]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	9306      	str	r3, [sp, #24]
 802421e:	9407      	str	r4, [sp, #28]
 8024220:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024222:	2b00      	cmp	r3, #0
 8024224:	da03      	bge.n	802422e <_dtoa_r+0x4aa>
 8024226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024228:	2b00      	cmp	r3, #0
 802422a:	dc00      	bgt.n	802422e <_dtoa_r+0x4aa>
 802422c:	e106      	b.n	802443c <_dtoa_r+0x6b8>
 802422e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8024230:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024234:	9d08      	ldr	r5, [sp, #32]
 8024236:	3b01      	subs	r3, #1
 8024238:	195b      	adds	r3, r3, r5
 802423a:	930a      	str	r3, [sp, #40]	@ 0x28
 802423c:	9a06      	ldr	r2, [sp, #24]
 802423e:	9b07      	ldr	r3, [sp, #28]
 8024240:	0030      	movs	r0, r6
 8024242:	0039      	movs	r1, r7
 8024244:	f7dd fdb6 	bl	8001db4 <__aeabi_ddiv>
 8024248:	f7df f87e 	bl	8003348 <__aeabi_d2iz>
 802424c:	9009      	str	r0, [sp, #36]	@ 0x24
 802424e:	f7df f8b7 	bl	80033c0 <__aeabi_i2d>
 8024252:	9a06      	ldr	r2, [sp, #24]
 8024254:	9b07      	ldr	r3, [sp, #28]
 8024256:	f7de f9f1 	bl	800263c <__aeabi_dmul>
 802425a:	0002      	movs	r2, r0
 802425c:	000b      	movs	r3, r1
 802425e:	0030      	movs	r0, r6
 8024260:	0039      	movs	r1, r7
 8024262:	f7de fcb3 	bl	8002bcc <__aeabi_dsub>
 8024266:	002b      	movs	r3, r5
 8024268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802426a:	3501      	adds	r5, #1
 802426c:	3230      	adds	r2, #48	@ 0x30
 802426e:	701a      	strb	r2, [r3, #0]
 8024270:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024272:	002c      	movs	r4, r5
 8024274:	429a      	cmp	r2, r3
 8024276:	d000      	beq.n	802427a <_dtoa_r+0x4f6>
 8024278:	e131      	b.n	80244de <_dtoa_r+0x75a>
 802427a:	0002      	movs	r2, r0
 802427c:	000b      	movs	r3, r1
 802427e:	f7dd fa35 	bl	80016ec <__aeabi_dadd>
 8024282:	9a06      	ldr	r2, [sp, #24]
 8024284:	9b07      	ldr	r3, [sp, #28]
 8024286:	0006      	movs	r6, r0
 8024288:	000f      	movs	r7, r1
 802428a:	f7dc f92b 	bl	80004e4 <__aeabi_dcmpgt>
 802428e:	2800      	cmp	r0, #0
 8024290:	d000      	beq.n	8024294 <_dtoa_r+0x510>
 8024292:	e10f      	b.n	80244b4 <_dtoa_r+0x730>
 8024294:	9a06      	ldr	r2, [sp, #24]
 8024296:	9b07      	ldr	r3, [sp, #28]
 8024298:	0030      	movs	r0, r6
 802429a:	0039      	movs	r1, r7
 802429c:	f7dc f908 	bl	80004b0 <__aeabi_dcmpeq>
 80242a0:	2800      	cmp	r0, #0
 80242a2:	d003      	beq.n	80242ac <_dtoa_r+0x528>
 80242a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242a6:	07dd      	lsls	r5, r3, #31
 80242a8:	d500      	bpl.n	80242ac <_dtoa_r+0x528>
 80242aa:	e103      	b.n	80244b4 <_dtoa_r+0x730>
 80242ac:	9905      	ldr	r1, [sp, #20]
 80242ae:	9803      	ldr	r0, [sp, #12]
 80242b0:	f001 f812 	bl	80252d8 <_Bfree>
 80242b4:	2300      	movs	r3, #0
 80242b6:	7023      	strb	r3, [r4, #0]
 80242b8:	9b04      	ldr	r3, [sp, #16]
 80242ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80242bc:	3301      	adds	r3, #1
 80242be:	6013      	str	r3, [r2, #0]
 80242c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	d100      	bne.n	80242c8 <_dtoa_r+0x544>
 80242c6:	e5a7      	b.n	8023e18 <_dtoa_r+0x94>
 80242c8:	601c      	str	r4, [r3, #0]
 80242ca:	e5a5      	b.n	8023e18 <_dtoa_r+0x94>
 80242cc:	423d      	tst	r5, r7
 80242ce:	d005      	beq.n	80242dc <_dtoa_r+0x558>
 80242d0:	6832      	ldr	r2, [r6, #0]
 80242d2:	6873      	ldr	r3, [r6, #4]
 80242d4:	f7de f9b2 	bl	800263c <__aeabi_dmul>
 80242d8:	003b      	movs	r3, r7
 80242da:	3401      	adds	r4, #1
 80242dc:	106d      	asrs	r5, r5, #1
 80242de:	3608      	adds	r6, #8
 80242e0:	e736      	b.n	8024150 <_dtoa_r+0x3cc>
 80242e2:	9b04      	ldr	r3, [sp, #16]
 80242e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80242e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242e8:	e75a      	b.n	80241a0 <_dtoa_r+0x41c>
 80242ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80242ec:	4b69      	ldr	r3, [pc, #420]	@ (8024494 <_dtoa_r+0x710>)
 80242ee:	3a01      	subs	r2, #1
 80242f0:	00d2      	lsls	r2, r2, #3
 80242f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80242f4:	189b      	adds	r3, r3, r2
 80242f6:	681a      	ldr	r2, [r3, #0]
 80242f8:	685b      	ldr	r3, [r3, #4]
 80242fa:	2900      	cmp	r1, #0
 80242fc:	d04c      	beq.n	8024398 <_dtoa_r+0x614>
 80242fe:	2000      	movs	r0, #0
 8024300:	496b      	ldr	r1, [pc, #428]	@ (80244b0 <_dtoa_r+0x72c>)
 8024302:	f7dd fd57 	bl	8001db4 <__aeabi_ddiv>
 8024306:	0032      	movs	r2, r6
 8024308:	003b      	movs	r3, r7
 802430a:	f7de fc5f 	bl	8002bcc <__aeabi_dsub>
 802430e:	9a08      	ldr	r2, [sp, #32]
 8024310:	0006      	movs	r6, r0
 8024312:	4694      	mov	ip, r2
 8024314:	000f      	movs	r7, r1
 8024316:	9b08      	ldr	r3, [sp, #32]
 8024318:	9316      	str	r3, [sp, #88]	@ 0x58
 802431a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802431c:	4463      	add	r3, ip
 802431e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024320:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024322:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024324:	f7df f810 	bl	8003348 <__aeabi_d2iz>
 8024328:	0005      	movs	r5, r0
 802432a:	f7df f849 	bl	80033c0 <__aeabi_i2d>
 802432e:	0002      	movs	r2, r0
 8024330:	000b      	movs	r3, r1
 8024332:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024334:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024336:	f7de fc49 	bl	8002bcc <__aeabi_dsub>
 802433a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802433c:	3530      	adds	r5, #48	@ 0x30
 802433e:	1c5c      	adds	r4, r3, #1
 8024340:	701d      	strb	r5, [r3, #0]
 8024342:	0032      	movs	r2, r6
 8024344:	003b      	movs	r3, r7
 8024346:	900a      	str	r0, [sp, #40]	@ 0x28
 8024348:	910b      	str	r1, [sp, #44]	@ 0x2c
 802434a:	f7dc f8b7 	bl	80004bc <__aeabi_dcmplt>
 802434e:	2800      	cmp	r0, #0
 8024350:	d16a      	bne.n	8024428 <_dtoa_r+0x6a4>
 8024352:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024356:	2000      	movs	r0, #0
 8024358:	4950      	ldr	r1, [pc, #320]	@ (802449c <_dtoa_r+0x718>)
 802435a:	f7de fc37 	bl	8002bcc <__aeabi_dsub>
 802435e:	0032      	movs	r2, r6
 8024360:	003b      	movs	r3, r7
 8024362:	f7dc f8ab 	bl	80004bc <__aeabi_dcmplt>
 8024366:	2800      	cmp	r0, #0
 8024368:	d000      	beq.n	802436c <_dtoa_r+0x5e8>
 802436a:	e0a5      	b.n	80244b8 <_dtoa_r+0x734>
 802436c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802436e:	42a3      	cmp	r3, r4
 8024370:	d100      	bne.n	8024374 <_dtoa_r+0x5f0>
 8024372:	e742      	b.n	80241fa <_dtoa_r+0x476>
 8024374:	2200      	movs	r2, #0
 8024376:	0030      	movs	r0, r6
 8024378:	0039      	movs	r1, r7
 802437a:	4b49      	ldr	r3, [pc, #292]	@ (80244a0 <_dtoa_r+0x71c>)
 802437c:	f7de f95e 	bl	800263c <__aeabi_dmul>
 8024380:	2200      	movs	r2, #0
 8024382:	0006      	movs	r6, r0
 8024384:	000f      	movs	r7, r1
 8024386:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802438a:	4b45      	ldr	r3, [pc, #276]	@ (80244a0 <_dtoa_r+0x71c>)
 802438c:	f7de f956 	bl	800263c <__aeabi_dmul>
 8024390:	9416      	str	r4, [sp, #88]	@ 0x58
 8024392:	900a      	str	r0, [sp, #40]	@ 0x28
 8024394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024396:	e7c3      	b.n	8024320 <_dtoa_r+0x59c>
 8024398:	0030      	movs	r0, r6
 802439a:	0039      	movs	r1, r7
 802439c:	f7de f94e 	bl	800263c <__aeabi_dmul>
 80243a0:	9d08      	ldr	r5, [sp, #32]
 80243a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80243a4:	002b      	movs	r3, r5
 80243a6:	4694      	mov	ip, r2
 80243a8:	9016      	str	r0, [sp, #88]	@ 0x58
 80243aa:	9117      	str	r1, [sp, #92]	@ 0x5c
 80243ac:	4463      	add	r3, ip
 80243ae:	9319      	str	r3, [sp, #100]	@ 0x64
 80243b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243b4:	f7de ffc8 	bl	8003348 <__aeabi_d2iz>
 80243b8:	0004      	movs	r4, r0
 80243ba:	f7df f801 	bl	80033c0 <__aeabi_i2d>
 80243be:	000b      	movs	r3, r1
 80243c0:	0002      	movs	r2, r0
 80243c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243c6:	f7de fc01 	bl	8002bcc <__aeabi_dsub>
 80243ca:	3430      	adds	r4, #48	@ 0x30
 80243cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80243ce:	702c      	strb	r4, [r5, #0]
 80243d0:	3501      	adds	r5, #1
 80243d2:	0006      	movs	r6, r0
 80243d4:	000f      	movs	r7, r1
 80243d6:	42ab      	cmp	r3, r5
 80243d8:	d129      	bne.n	802442e <_dtoa_r+0x6aa>
 80243da:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80243dc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80243de:	9b08      	ldr	r3, [sp, #32]
 80243e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80243e2:	469c      	mov	ip, r3
 80243e4:	2200      	movs	r2, #0
 80243e6:	4b32      	ldr	r3, [pc, #200]	@ (80244b0 <_dtoa_r+0x72c>)
 80243e8:	4464      	add	r4, ip
 80243ea:	f7dd f97f 	bl	80016ec <__aeabi_dadd>
 80243ee:	0002      	movs	r2, r0
 80243f0:	000b      	movs	r3, r1
 80243f2:	0030      	movs	r0, r6
 80243f4:	0039      	movs	r1, r7
 80243f6:	f7dc f875 	bl	80004e4 <__aeabi_dcmpgt>
 80243fa:	2800      	cmp	r0, #0
 80243fc:	d15c      	bne.n	80244b8 <_dtoa_r+0x734>
 80243fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024400:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024402:	2000      	movs	r0, #0
 8024404:	492a      	ldr	r1, [pc, #168]	@ (80244b0 <_dtoa_r+0x72c>)
 8024406:	f7de fbe1 	bl	8002bcc <__aeabi_dsub>
 802440a:	0002      	movs	r2, r0
 802440c:	000b      	movs	r3, r1
 802440e:	0030      	movs	r0, r6
 8024410:	0039      	movs	r1, r7
 8024412:	f7dc f853 	bl	80004bc <__aeabi_dcmplt>
 8024416:	2800      	cmp	r0, #0
 8024418:	d100      	bne.n	802441c <_dtoa_r+0x698>
 802441a:	e6ee      	b.n	80241fa <_dtoa_r+0x476>
 802441c:	0023      	movs	r3, r4
 802441e:	3c01      	subs	r4, #1
 8024420:	7822      	ldrb	r2, [r4, #0]
 8024422:	2a30      	cmp	r2, #48	@ 0x30
 8024424:	d0fa      	beq.n	802441c <_dtoa_r+0x698>
 8024426:	001c      	movs	r4, r3
 8024428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802442a:	9304      	str	r3, [sp, #16]
 802442c:	e73e      	b.n	80242ac <_dtoa_r+0x528>
 802442e:	2200      	movs	r2, #0
 8024430:	4b1b      	ldr	r3, [pc, #108]	@ (80244a0 <_dtoa_r+0x71c>)
 8024432:	f7de f903 	bl	800263c <__aeabi_dmul>
 8024436:	900a      	str	r0, [sp, #40]	@ 0x28
 8024438:	910b      	str	r1, [sp, #44]	@ 0x2c
 802443a:	e7b9      	b.n	80243b0 <_dtoa_r+0x62c>
 802443c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802443e:	2b00      	cmp	r3, #0
 8024440:	d10c      	bne.n	802445c <_dtoa_r+0x6d8>
 8024442:	9806      	ldr	r0, [sp, #24]
 8024444:	9907      	ldr	r1, [sp, #28]
 8024446:	2200      	movs	r2, #0
 8024448:	4b18      	ldr	r3, [pc, #96]	@ (80244ac <_dtoa_r+0x728>)
 802444a:	f7de f8f7 	bl	800263c <__aeabi_dmul>
 802444e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024452:	f7dc f851 	bl	80004f8 <__aeabi_dcmpge>
 8024456:	2800      	cmp	r0, #0
 8024458:	d100      	bne.n	802445c <_dtoa_r+0x6d8>
 802445a:	e164      	b.n	8024726 <_dtoa_r+0x9a2>
 802445c:	2600      	movs	r6, #0
 802445e:	0037      	movs	r7, r6
 8024460:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024462:	9c08      	ldr	r4, [sp, #32]
 8024464:	43db      	mvns	r3, r3
 8024466:	930c      	str	r3, [sp, #48]	@ 0x30
 8024468:	2300      	movs	r3, #0
 802446a:	9304      	str	r3, [sp, #16]
 802446c:	0031      	movs	r1, r6
 802446e:	9803      	ldr	r0, [sp, #12]
 8024470:	f000 ff32 	bl	80252d8 <_Bfree>
 8024474:	2f00      	cmp	r7, #0
 8024476:	d0d7      	beq.n	8024428 <_dtoa_r+0x6a4>
 8024478:	9b04      	ldr	r3, [sp, #16]
 802447a:	2b00      	cmp	r3, #0
 802447c:	d005      	beq.n	802448a <_dtoa_r+0x706>
 802447e:	42bb      	cmp	r3, r7
 8024480:	d003      	beq.n	802448a <_dtoa_r+0x706>
 8024482:	0019      	movs	r1, r3
 8024484:	9803      	ldr	r0, [sp, #12]
 8024486:	f000 ff27 	bl	80252d8 <_Bfree>
 802448a:	0039      	movs	r1, r7
 802448c:	9803      	ldr	r0, [sp, #12]
 802448e:	f000 ff23 	bl	80252d8 <_Bfree>
 8024492:	e7c9      	b.n	8024428 <_dtoa_r+0x6a4>
 8024494:	0802ba18 	.word	0x0802ba18
 8024498:	0802b9f0 	.word	0x0802b9f0
 802449c:	3ff00000 	.word	0x3ff00000
 80244a0:	40240000 	.word	0x40240000
 80244a4:	401c0000 	.word	0x401c0000
 80244a8:	fcc00000 	.word	0xfcc00000
 80244ac:	40140000 	.word	0x40140000
 80244b0:	3fe00000 	.word	0x3fe00000
 80244b4:	9b04      	ldr	r3, [sp, #16]
 80244b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80244b8:	0023      	movs	r3, r4
 80244ba:	001c      	movs	r4, r3
 80244bc:	3b01      	subs	r3, #1
 80244be:	781a      	ldrb	r2, [r3, #0]
 80244c0:	2a39      	cmp	r2, #57	@ 0x39
 80244c2:	d108      	bne.n	80244d6 <_dtoa_r+0x752>
 80244c4:	9a08      	ldr	r2, [sp, #32]
 80244c6:	429a      	cmp	r2, r3
 80244c8:	d1f7      	bne.n	80244ba <_dtoa_r+0x736>
 80244ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80244cc:	9908      	ldr	r1, [sp, #32]
 80244ce:	3201      	adds	r2, #1
 80244d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80244d2:	2230      	movs	r2, #48	@ 0x30
 80244d4:	700a      	strb	r2, [r1, #0]
 80244d6:	781a      	ldrb	r2, [r3, #0]
 80244d8:	3201      	adds	r2, #1
 80244da:	701a      	strb	r2, [r3, #0]
 80244dc:	e7a4      	b.n	8024428 <_dtoa_r+0x6a4>
 80244de:	2200      	movs	r2, #0
 80244e0:	4bc6      	ldr	r3, [pc, #792]	@ (80247fc <_dtoa_r+0xa78>)
 80244e2:	f7de f8ab 	bl	800263c <__aeabi_dmul>
 80244e6:	2200      	movs	r2, #0
 80244e8:	2300      	movs	r3, #0
 80244ea:	0006      	movs	r6, r0
 80244ec:	000f      	movs	r7, r1
 80244ee:	f7db ffdf 	bl	80004b0 <__aeabi_dcmpeq>
 80244f2:	2800      	cmp	r0, #0
 80244f4:	d100      	bne.n	80244f8 <_dtoa_r+0x774>
 80244f6:	e6a1      	b.n	802423c <_dtoa_r+0x4b8>
 80244f8:	e6d8      	b.n	80242ac <_dtoa_r+0x528>
 80244fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80244fc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80244fe:	9c06      	ldr	r4, [sp, #24]
 8024500:	2f00      	cmp	r7, #0
 8024502:	d014      	beq.n	802452e <_dtoa_r+0x7aa>
 8024504:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024506:	2a01      	cmp	r2, #1
 8024508:	dd00      	ble.n	802450c <_dtoa_r+0x788>
 802450a:	e0c8      	b.n	802469e <_dtoa_r+0x91a>
 802450c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802450e:	2a00      	cmp	r2, #0
 8024510:	d100      	bne.n	8024514 <_dtoa_r+0x790>
 8024512:	e0be      	b.n	8024692 <_dtoa_r+0x90e>
 8024514:	4aba      	ldr	r2, [pc, #744]	@ (8024800 <_dtoa_r+0xa7c>)
 8024516:	189b      	adds	r3, r3, r2
 8024518:	9a06      	ldr	r2, [sp, #24]
 802451a:	2101      	movs	r1, #1
 802451c:	18d2      	adds	r2, r2, r3
 802451e:	9206      	str	r2, [sp, #24]
 8024520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024522:	9803      	ldr	r0, [sp, #12]
 8024524:	18d3      	adds	r3, r2, r3
 8024526:	930d      	str	r3, [sp, #52]	@ 0x34
 8024528:	f000 ffda 	bl	80254e0 <__i2b>
 802452c:	0007      	movs	r7, r0
 802452e:	2c00      	cmp	r4, #0
 8024530:	d00e      	beq.n	8024550 <_dtoa_r+0x7cc>
 8024532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024534:	2b00      	cmp	r3, #0
 8024536:	dd0b      	ble.n	8024550 <_dtoa_r+0x7cc>
 8024538:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802453a:	0023      	movs	r3, r4
 802453c:	4294      	cmp	r4, r2
 802453e:	dd00      	ble.n	8024542 <_dtoa_r+0x7be>
 8024540:	0013      	movs	r3, r2
 8024542:	9a06      	ldr	r2, [sp, #24]
 8024544:	1ae4      	subs	r4, r4, r3
 8024546:	1ad2      	subs	r2, r2, r3
 8024548:	9206      	str	r2, [sp, #24]
 802454a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802454c:	1ad3      	subs	r3, r2, r3
 802454e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024552:	2b00      	cmp	r3, #0
 8024554:	d01f      	beq.n	8024596 <_dtoa_r+0x812>
 8024556:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024558:	2b00      	cmp	r3, #0
 802455a:	d100      	bne.n	802455e <_dtoa_r+0x7da>
 802455c:	e0b5      	b.n	80246ca <_dtoa_r+0x946>
 802455e:	2d00      	cmp	r5, #0
 8024560:	d010      	beq.n	8024584 <_dtoa_r+0x800>
 8024562:	0039      	movs	r1, r7
 8024564:	002a      	movs	r2, r5
 8024566:	9803      	ldr	r0, [sp, #12]
 8024568:	f001 f884 	bl	8025674 <__pow5mult>
 802456c:	9a05      	ldr	r2, [sp, #20]
 802456e:	0001      	movs	r1, r0
 8024570:	0007      	movs	r7, r0
 8024572:	9803      	ldr	r0, [sp, #12]
 8024574:	f000 ffcc 	bl	8025510 <__multiply>
 8024578:	0006      	movs	r6, r0
 802457a:	9905      	ldr	r1, [sp, #20]
 802457c:	9803      	ldr	r0, [sp, #12]
 802457e:	f000 feab 	bl	80252d8 <_Bfree>
 8024582:	9605      	str	r6, [sp, #20]
 8024584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024586:	1b5a      	subs	r2, r3, r5
 8024588:	42ab      	cmp	r3, r5
 802458a:	d004      	beq.n	8024596 <_dtoa_r+0x812>
 802458c:	9905      	ldr	r1, [sp, #20]
 802458e:	9803      	ldr	r0, [sp, #12]
 8024590:	f001 f870 	bl	8025674 <__pow5mult>
 8024594:	9005      	str	r0, [sp, #20]
 8024596:	2101      	movs	r1, #1
 8024598:	9803      	ldr	r0, [sp, #12]
 802459a:	f000 ffa1 	bl	80254e0 <__i2b>
 802459e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80245a0:	0006      	movs	r6, r0
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	d100      	bne.n	80245a8 <_dtoa_r+0x824>
 80245a6:	e1bc      	b.n	8024922 <_dtoa_r+0xb9e>
 80245a8:	001a      	movs	r2, r3
 80245aa:	0001      	movs	r1, r0
 80245ac:	9803      	ldr	r0, [sp, #12]
 80245ae:	f001 f861 	bl	8025674 <__pow5mult>
 80245b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80245b4:	0006      	movs	r6, r0
 80245b6:	2500      	movs	r5, #0
 80245b8:	2b01      	cmp	r3, #1
 80245ba:	dc16      	bgt.n	80245ea <_dtoa_r+0x866>
 80245bc:	2500      	movs	r5, #0
 80245be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80245c0:	42ab      	cmp	r3, r5
 80245c2:	d10e      	bne.n	80245e2 <_dtoa_r+0x85e>
 80245c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80245c6:	031b      	lsls	r3, r3, #12
 80245c8:	42ab      	cmp	r3, r5
 80245ca:	d10a      	bne.n	80245e2 <_dtoa_r+0x85e>
 80245cc:	4b8d      	ldr	r3, [pc, #564]	@ (8024804 <_dtoa_r+0xa80>)
 80245ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80245d0:	4213      	tst	r3, r2
 80245d2:	d006      	beq.n	80245e2 <_dtoa_r+0x85e>
 80245d4:	9b06      	ldr	r3, [sp, #24]
 80245d6:	3501      	adds	r5, #1
 80245d8:	3301      	adds	r3, #1
 80245da:	9306      	str	r3, [sp, #24]
 80245dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80245de:	3301      	adds	r3, #1
 80245e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80245e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80245e4:	2001      	movs	r0, #1
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d008      	beq.n	80245fc <_dtoa_r+0x878>
 80245ea:	6933      	ldr	r3, [r6, #16]
 80245ec:	3303      	adds	r3, #3
 80245ee:	009b      	lsls	r3, r3, #2
 80245f0:	18f3      	adds	r3, r6, r3
 80245f2:	6858      	ldr	r0, [r3, #4]
 80245f4:	f000 ff24 	bl	8025440 <__hi0bits>
 80245f8:	2320      	movs	r3, #32
 80245fa:	1a18      	subs	r0, r3, r0
 80245fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80245fe:	1818      	adds	r0, r3, r0
 8024600:	0002      	movs	r2, r0
 8024602:	231f      	movs	r3, #31
 8024604:	401a      	ands	r2, r3
 8024606:	4218      	tst	r0, r3
 8024608:	d065      	beq.n	80246d6 <_dtoa_r+0x952>
 802460a:	3301      	adds	r3, #1
 802460c:	1a9b      	subs	r3, r3, r2
 802460e:	2b04      	cmp	r3, #4
 8024610:	dd5d      	ble.n	80246ce <_dtoa_r+0x94a>
 8024612:	231c      	movs	r3, #28
 8024614:	1a9b      	subs	r3, r3, r2
 8024616:	9a06      	ldr	r2, [sp, #24]
 8024618:	18e4      	adds	r4, r4, r3
 802461a:	18d2      	adds	r2, r2, r3
 802461c:	9206      	str	r2, [sp, #24]
 802461e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024620:	18d3      	adds	r3, r2, r3
 8024622:	930d      	str	r3, [sp, #52]	@ 0x34
 8024624:	9b06      	ldr	r3, [sp, #24]
 8024626:	2b00      	cmp	r3, #0
 8024628:	dd05      	ble.n	8024636 <_dtoa_r+0x8b2>
 802462a:	001a      	movs	r2, r3
 802462c:	9905      	ldr	r1, [sp, #20]
 802462e:	9803      	ldr	r0, [sp, #12]
 8024630:	f001 f87c 	bl	802572c <__lshift>
 8024634:	9005      	str	r0, [sp, #20]
 8024636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024638:	2b00      	cmp	r3, #0
 802463a:	dd05      	ble.n	8024648 <_dtoa_r+0x8c4>
 802463c:	0031      	movs	r1, r6
 802463e:	001a      	movs	r2, r3
 8024640:	9803      	ldr	r0, [sp, #12]
 8024642:	f001 f873 	bl	802572c <__lshift>
 8024646:	0006      	movs	r6, r0
 8024648:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802464a:	2b00      	cmp	r3, #0
 802464c:	d045      	beq.n	80246da <_dtoa_r+0x956>
 802464e:	0031      	movs	r1, r6
 8024650:	9805      	ldr	r0, [sp, #20]
 8024652:	f001 f8d7 	bl	8025804 <__mcmp>
 8024656:	2800      	cmp	r0, #0
 8024658:	da3f      	bge.n	80246da <_dtoa_r+0x956>
 802465a:	9b04      	ldr	r3, [sp, #16]
 802465c:	220a      	movs	r2, #10
 802465e:	3b01      	subs	r3, #1
 8024660:	930c      	str	r3, [sp, #48]	@ 0x30
 8024662:	9905      	ldr	r1, [sp, #20]
 8024664:	2300      	movs	r3, #0
 8024666:	9803      	ldr	r0, [sp, #12]
 8024668:	f000 fe5a 	bl	8025320 <__multadd>
 802466c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802466e:	9005      	str	r0, [sp, #20]
 8024670:	2b00      	cmp	r3, #0
 8024672:	d100      	bne.n	8024676 <_dtoa_r+0x8f2>
 8024674:	e15c      	b.n	8024930 <_dtoa_r+0xbac>
 8024676:	2300      	movs	r3, #0
 8024678:	0039      	movs	r1, r7
 802467a:	220a      	movs	r2, #10
 802467c:	9803      	ldr	r0, [sp, #12]
 802467e:	f000 fe4f 	bl	8025320 <__multadd>
 8024682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024684:	0007      	movs	r7, r0
 8024686:	2b00      	cmp	r3, #0
 8024688:	dc55      	bgt.n	8024736 <_dtoa_r+0x9b2>
 802468a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802468c:	2b02      	cmp	r3, #2
 802468e:	dc2d      	bgt.n	80246ec <_dtoa_r+0x968>
 8024690:	e051      	b.n	8024736 <_dtoa_r+0x9b2>
 8024692:	2336      	movs	r3, #54	@ 0x36
 8024694:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024696:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024698:	9c06      	ldr	r4, [sp, #24]
 802469a:	1a9b      	subs	r3, r3, r2
 802469c:	e73c      	b.n	8024518 <_dtoa_r+0x794>
 802469e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246a0:	1e5d      	subs	r5, r3, #1
 80246a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246a4:	42ab      	cmp	r3, r5
 80246a6:	db08      	blt.n	80246ba <_dtoa_r+0x936>
 80246a8:	1b5d      	subs	r5, r3, r5
 80246aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246ac:	9c06      	ldr	r4, [sp, #24]
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	db00      	blt.n	80246b4 <_dtoa_r+0x930>
 80246b2:	e731      	b.n	8024518 <_dtoa_r+0x794>
 80246b4:	1ae4      	subs	r4, r4, r3
 80246b6:	2300      	movs	r3, #0
 80246b8:	e72e      	b.n	8024518 <_dtoa_r+0x794>
 80246ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80246be:	1aeb      	subs	r3, r5, r3
 80246c0:	18d3      	adds	r3, r2, r3
 80246c2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80246c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80246c6:	2500      	movs	r5, #0
 80246c8:	e7ef      	b.n	80246aa <_dtoa_r+0x926>
 80246ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80246cc:	e75e      	b.n	802458c <_dtoa_r+0x808>
 80246ce:	2b04      	cmp	r3, #4
 80246d0:	d0a8      	beq.n	8024624 <_dtoa_r+0x8a0>
 80246d2:	331c      	adds	r3, #28
 80246d4:	e79f      	b.n	8024616 <_dtoa_r+0x892>
 80246d6:	0013      	movs	r3, r2
 80246d8:	e7fb      	b.n	80246d2 <_dtoa_r+0x94e>
 80246da:	9b04      	ldr	r3, [sp, #16]
 80246dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80246de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80246e2:	2b00      	cmp	r3, #0
 80246e4:	dc23      	bgt.n	802472e <_dtoa_r+0x9aa>
 80246e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80246e8:	2b02      	cmp	r3, #2
 80246ea:	dd20      	ble.n	802472e <_dtoa_r+0x9aa>
 80246ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	d000      	beq.n	80246f4 <_dtoa_r+0x970>
 80246f2:	e6b5      	b.n	8024460 <_dtoa_r+0x6dc>
 80246f4:	0031      	movs	r1, r6
 80246f6:	2205      	movs	r2, #5
 80246f8:	9803      	ldr	r0, [sp, #12]
 80246fa:	f000 fe11 	bl	8025320 <__multadd>
 80246fe:	0006      	movs	r6, r0
 8024700:	0001      	movs	r1, r0
 8024702:	9805      	ldr	r0, [sp, #20]
 8024704:	f001 f87e 	bl	8025804 <__mcmp>
 8024708:	2800      	cmp	r0, #0
 802470a:	dc00      	bgt.n	802470e <_dtoa_r+0x98a>
 802470c:	e6a8      	b.n	8024460 <_dtoa_r+0x6dc>
 802470e:	9b08      	ldr	r3, [sp, #32]
 8024710:	9a08      	ldr	r2, [sp, #32]
 8024712:	1c5c      	adds	r4, r3, #1
 8024714:	2331      	movs	r3, #49	@ 0x31
 8024716:	7013      	strb	r3, [r2, #0]
 8024718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802471a:	3301      	adds	r3, #1
 802471c:	930c      	str	r3, [sp, #48]	@ 0x30
 802471e:	e6a3      	b.n	8024468 <_dtoa_r+0x6e4>
 8024720:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8024722:	0037      	movs	r7, r6
 8024724:	e7f3      	b.n	802470e <_dtoa_r+0x98a>
 8024726:	9b04      	ldr	r3, [sp, #16]
 8024728:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802472a:	930c      	str	r3, [sp, #48]	@ 0x30
 802472c:	e7f9      	b.n	8024722 <_dtoa_r+0x99e>
 802472e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024730:	2b00      	cmp	r3, #0
 8024732:	d100      	bne.n	8024736 <_dtoa_r+0x9b2>
 8024734:	e100      	b.n	8024938 <_dtoa_r+0xbb4>
 8024736:	2c00      	cmp	r4, #0
 8024738:	dd05      	ble.n	8024746 <_dtoa_r+0x9c2>
 802473a:	0039      	movs	r1, r7
 802473c:	0022      	movs	r2, r4
 802473e:	9803      	ldr	r0, [sp, #12]
 8024740:	f000 fff4 	bl	802572c <__lshift>
 8024744:	0007      	movs	r7, r0
 8024746:	0038      	movs	r0, r7
 8024748:	2d00      	cmp	r5, #0
 802474a:	d018      	beq.n	802477e <_dtoa_r+0x9fa>
 802474c:	6879      	ldr	r1, [r7, #4]
 802474e:	9803      	ldr	r0, [sp, #12]
 8024750:	f000 fd7e 	bl	8025250 <_Balloc>
 8024754:	1e04      	subs	r4, r0, #0
 8024756:	d105      	bne.n	8024764 <_dtoa_r+0x9e0>
 8024758:	0022      	movs	r2, r4
 802475a:	4b2b      	ldr	r3, [pc, #172]	@ (8024808 <_dtoa_r+0xa84>)
 802475c:	482b      	ldr	r0, [pc, #172]	@ (802480c <_dtoa_r+0xa88>)
 802475e:	492c      	ldr	r1, [pc, #176]	@ (8024810 <_dtoa_r+0xa8c>)
 8024760:	f7ff fb25 	bl	8023dae <_dtoa_r+0x2a>
 8024764:	0039      	movs	r1, r7
 8024766:	693a      	ldr	r2, [r7, #16]
 8024768:	310c      	adds	r1, #12
 802476a:	3202      	adds	r2, #2
 802476c:	0092      	lsls	r2, r2, #2
 802476e:	300c      	adds	r0, #12
 8024770:	f7ff fa6a 	bl	8023c48 <memcpy>
 8024774:	2201      	movs	r2, #1
 8024776:	0021      	movs	r1, r4
 8024778:	9803      	ldr	r0, [sp, #12]
 802477a:	f000 ffd7 	bl	802572c <__lshift>
 802477e:	9b08      	ldr	r3, [sp, #32]
 8024780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024782:	9306      	str	r3, [sp, #24]
 8024784:	3b01      	subs	r3, #1
 8024786:	189b      	adds	r3, r3, r2
 8024788:	2201      	movs	r2, #1
 802478a:	9704      	str	r7, [sp, #16]
 802478c:	0007      	movs	r7, r0
 802478e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024792:	4013      	ands	r3, r2
 8024794:	930e      	str	r3, [sp, #56]	@ 0x38
 8024796:	0031      	movs	r1, r6
 8024798:	9805      	ldr	r0, [sp, #20]
 802479a:	f7ff fa65 	bl	8023c68 <quorem>
 802479e:	9904      	ldr	r1, [sp, #16]
 80247a0:	0005      	movs	r5, r0
 80247a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80247a4:	9805      	ldr	r0, [sp, #20]
 80247a6:	f001 f82d 	bl	8025804 <__mcmp>
 80247aa:	003a      	movs	r2, r7
 80247ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80247ae:	0031      	movs	r1, r6
 80247b0:	9803      	ldr	r0, [sp, #12]
 80247b2:	f001 f843 	bl	802583c <__mdiff>
 80247b6:	2201      	movs	r2, #1
 80247b8:	68c3      	ldr	r3, [r0, #12]
 80247ba:	0004      	movs	r4, r0
 80247bc:	3530      	adds	r5, #48	@ 0x30
 80247be:	9209      	str	r2, [sp, #36]	@ 0x24
 80247c0:	2b00      	cmp	r3, #0
 80247c2:	d104      	bne.n	80247ce <_dtoa_r+0xa4a>
 80247c4:	0001      	movs	r1, r0
 80247c6:	9805      	ldr	r0, [sp, #20]
 80247c8:	f001 f81c 	bl	8025804 <__mcmp>
 80247cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80247ce:	0021      	movs	r1, r4
 80247d0:	9803      	ldr	r0, [sp, #12]
 80247d2:	f000 fd81 	bl	80252d8 <_Bfree>
 80247d6:	9b06      	ldr	r3, [sp, #24]
 80247d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80247da:	1c5c      	adds	r4, r3, #1
 80247dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80247de:	4313      	orrs	r3, r2
 80247e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80247e2:	4313      	orrs	r3, r2
 80247e4:	d116      	bne.n	8024814 <_dtoa_r+0xa90>
 80247e6:	2d39      	cmp	r5, #57	@ 0x39
 80247e8:	d02f      	beq.n	802484a <_dtoa_r+0xac6>
 80247ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	dd01      	ble.n	80247f4 <_dtoa_r+0xa70>
 80247f0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80247f2:	3531      	adds	r5, #49	@ 0x31
 80247f4:	9b06      	ldr	r3, [sp, #24]
 80247f6:	701d      	strb	r5, [r3, #0]
 80247f8:	e638      	b.n	802446c <_dtoa_r+0x6e8>
 80247fa:	46c0      	nop			@ (mov r8, r8)
 80247fc:	40240000 	.word	0x40240000
 8024800:	00000433 	.word	0x00000433
 8024804:	7ff00000 	.word	0x7ff00000
 8024808:	0802b919 	.word	0x0802b919
 802480c:	0802b8c1 	.word	0x0802b8c1
 8024810:	000002ef 	.word	0x000002ef
 8024814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024816:	2b00      	cmp	r3, #0
 8024818:	db04      	blt.n	8024824 <_dtoa_r+0xaa0>
 802481a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802481c:	4313      	orrs	r3, r2
 802481e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024820:	4313      	orrs	r3, r2
 8024822:	d11e      	bne.n	8024862 <_dtoa_r+0xade>
 8024824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024826:	2b00      	cmp	r3, #0
 8024828:	dde4      	ble.n	80247f4 <_dtoa_r+0xa70>
 802482a:	9905      	ldr	r1, [sp, #20]
 802482c:	2201      	movs	r2, #1
 802482e:	9803      	ldr	r0, [sp, #12]
 8024830:	f000 ff7c 	bl	802572c <__lshift>
 8024834:	0031      	movs	r1, r6
 8024836:	9005      	str	r0, [sp, #20]
 8024838:	f000 ffe4 	bl	8025804 <__mcmp>
 802483c:	2800      	cmp	r0, #0
 802483e:	dc02      	bgt.n	8024846 <_dtoa_r+0xac2>
 8024840:	d1d8      	bne.n	80247f4 <_dtoa_r+0xa70>
 8024842:	07eb      	lsls	r3, r5, #31
 8024844:	d5d6      	bpl.n	80247f4 <_dtoa_r+0xa70>
 8024846:	2d39      	cmp	r5, #57	@ 0x39
 8024848:	d1d2      	bne.n	80247f0 <_dtoa_r+0xa6c>
 802484a:	2339      	movs	r3, #57	@ 0x39
 802484c:	9a06      	ldr	r2, [sp, #24]
 802484e:	7013      	strb	r3, [r2, #0]
 8024850:	0023      	movs	r3, r4
 8024852:	001c      	movs	r4, r3
 8024854:	3b01      	subs	r3, #1
 8024856:	781a      	ldrb	r2, [r3, #0]
 8024858:	2a39      	cmp	r2, #57	@ 0x39
 802485a:	d04f      	beq.n	80248fc <_dtoa_r+0xb78>
 802485c:	3201      	adds	r2, #1
 802485e:	701a      	strb	r2, [r3, #0]
 8024860:	e604      	b.n	802446c <_dtoa_r+0x6e8>
 8024862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024864:	2b00      	cmp	r3, #0
 8024866:	dd03      	ble.n	8024870 <_dtoa_r+0xaec>
 8024868:	2d39      	cmp	r5, #57	@ 0x39
 802486a:	d0ee      	beq.n	802484a <_dtoa_r+0xac6>
 802486c:	3501      	adds	r5, #1
 802486e:	e7c1      	b.n	80247f4 <_dtoa_r+0xa70>
 8024870:	9b06      	ldr	r3, [sp, #24]
 8024872:	9a06      	ldr	r2, [sp, #24]
 8024874:	701d      	strb	r5, [r3, #0]
 8024876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024878:	4293      	cmp	r3, r2
 802487a:	d02a      	beq.n	80248d2 <_dtoa_r+0xb4e>
 802487c:	2300      	movs	r3, #0
 802487e:	220a      	movs	r2, #10
 8024880:	9905      	ldr	r1, [sp, #20]
 8024882:	9803      	ldr	r0, [sp, #12]
 8024884:	f000 fd4c 	bl	8025320 <__multadd>
 8024888:	9b04      	ldr	r3, [sp, #16]
 802488a:	9005      	str	r0, [sp, #20]
 802488c:	42bb      	cmp	r3, r7
 802488e:	d109      	bne.n	80248a4 <_dtoa_r+0xb20>
 8024890:	2300      	movs	r3, #0
 8024892:	220a      	movs	r2, #10
 8024894:	9904      	ldr	r1, [sp, #16]
 8024896:	9803      	ldr	r0, [sp, #12]
 8024898:	f000 fd42 	bl	8025320 <__multadd>
 802489c:	9004      	str	r0, [sp, #16]
 802489e:	0007      	movs	r7, r0
 80248a0:	9406      	str	r4, [sp, #24]
 80248a2:	e778      	b.n	8024796 <_dtoa_r+0xa12>
 80248a4:	9904      	ldr	r1, [sp, #16]
 80248a6:	2300      	movs	r3, #0
 80248a8:	220a      	movs	r2, #10
 80248aa:	9803      	ldr	r0, [sp, #12]
 80248ac:	f000 fd38 	bl	8025320 <__multadd>
 80248b0:	2300      	movs	r3, #0
 80248b2:	9004      	str	r0, [sp, #16]
 80248b4:	220a      	movs	r2, #10
 80248b6:	0039      	movs	r1, r7
 80248b8:	9803      	ldr	r0, [sp, #12]
 80248ba:	f000 fd31 	bl	8025320 <__multadd>
 80248be:	e7ee      	b.n	802489e <_dtoa_r+0xb1a>
 80248c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80248c2:	2401      	movs	r4, #1
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	dd00      	ble.n	80248ca <_dtoa_r+0xb46>
 80248c8:	001c      	movs	r4, r3
 80248ca:	9b08      	ldr	r3, [sp, #32]
 80248cc:	191c      	adds	r4, r3, r4
 80248ce:	2300      	movs	r3, #0
 80248d0:	9304      	str	r3, [sp, #16]
 80248d2:	9905      	ldr	r1, [sp, #20]
 80248d4:	2201      	movs	r2, #1
 80248d6:	9803      	ldr	r0, [sp, #12]
 80248d8:	f000 ff28 	bl	802572c <__lshift>
 80248dc:	0031      	movs	r1, r6
 80248de:	9005      	str	r0, [sp, #20]
 80248e0:	f000 ff90 	bl	8025804 <__mcmp>
 80248e4:	2800      	cmp	r0, #0
 80248e6:	dcb3      	bgt.n	8024850 <_dtoa_r+0xacc>
 80248e8:	d101      	bne.n	80248ee <_dtoa_r+0xb6a>
 80248ea:	07ed      	lsls	r5, r5, #31
 80248ec:	d4b0      	bmi.n	8024850 <_dtoa_r+0xacc>
 80248ee:	0023      	movs	r3, r4
 80248f0:	001c      	movs	r4, r3
 80248f2:	3b01      	subs	r3, #1
 80248f4:	781a      	ldrb	r2, [r3, #0]
 80248f6:	2a30      	cmp	r2, #48	@ 0x30
 80248f8:	d0fa      	beq.n	80248f0 <_dtoa_r+0xb6c>
 80248fa:	e5b7      	b.n	802446c <_dtoa_r+0x6e8>
 80248fc:	9a08      	ldr	r2, [sp, #32]
 80248fe:	429a      	cmp	r2, r3
 8024900:	d1a7      	bne.n	8024852 <_dtoa_r+0xace>
 8024902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024904:	3301      	adds	r3, #1
 8024906:	930c      	str	r3, [sp, #48]	@ 0x30
 8024908:	2331      	movs	r3, #49	@ 0x31
 802490a:	7013      	strb	r3, [r2, #0]
 802490c:	e5ae      	b.n	802446c <_dtoa_r+0x6e8>
 802490e:	4b15      	ldr	r3, [pc, #84]	@ (8024964 <_dtoa_r+0xbe0>)
 8024910:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024912:	9308      	str	r3, [sp, #32]
 8024914:	4b14      	ldr	r3, [pc, #80]	@ (8024968 <_dtoa_r+0xbe4>)
 8024916:	2a00      	cmp	r2, #0
 8024918:	d001      	beq.n	802491e <_dtoa_r+0xb9a>
 802491a:	f7ff fa7b 	bl	8023e14 <_dtoa_r+0x90>
 802491e:	f7ff fa7b 	bl	8023e18 <_dtoa_r+0x94>
 8024922:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024924:	2b01      	cmp	r3, #1
 8024926:	dc00      	bgt.n	802492a <_dtoa_r+0xba6>
 8024928:	e648      	b.n	80245bc <_dtoa_r+0x838>
 802492a:	2001      	movs	r0, #1
 802492c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802492e:	e665      	b.n	80245fc <_dtoa_r+0x878>
 8024930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024932:	2b00      	cmp	r3, #0
 8024934:	dc00      	bgt.n	8024938 <_dtoa_r+0xbb4>
 8024936:	e6d6      	b.n	80246e6 <_dtoa_r+0x962>
 8024938:	2400      	movs	r4, #0
 802493a:	0031      	movs	r1, r6
 802493c:	9805      	ldr	r0, [sp, #20]
 802493e:	f7ff f993 	bl	8023c68 <quorem>
 8024942:	9b08      	ldr	r3, [sp, #32]
 8024944:	3030      	adds	r0, #48	@ 0x30
 8024946:	5518      	strb	r0, [r3, r4]
 8024948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802494a:	3401      	adds	r4, #1
 802494c:	0005      	movs	r5, r0
 802494e:	429c      	cmp	r4, r3
 8024950:	dab6      	bge.n	80248c0 <_dtoa_r+0xb3c>
 8024952:	2300      	movs	r3, #0
 8024954:	220a      	movs	r2, #10
 8024956:	9905      	ldr	r1, [sp, #20]
 8024958:	9803      	ldr	r0, [sp, #12]
 802495a:	f000 fce1 	bl	8025320 <__multadd>
 802495e:	9005      	str	r0, [sp, #20]
 8024960:	e7eb      	b.n	802493a <_dtoa_r+0xbb6>
 8024962:	46c0      	nop			@ (mov r8, r8)
 8024964:	0802b89d 	.word	0x0802b89d
 8024968:	0802b8a5 	.word	0x0802b8a5

0802496c <_free_r>:
 802496c:	b570      	push	{r4, r5, r6, lr}
 802496e:	0005      	movs	r5, r0
 8024970:	1e0c      	subs	r4, r1, #0
 8024972:	d010      	beq.n	8024996 <_free_r+0x2a>
 8024974:	3c04      	subs	r4, #4
 8024976:	6823      	ldr	r3, [r4, #0]
 8024978:	2b00      	cmp	r3, #0
 802497a:	da00      	bge.n	802497e <_free_r+0x12>
 802497c:	18e4      	adds	r4, r4, r3
 802497e:	0028      	movs	r0, r5
 8024980:	f000 fc56 	bl	8025230 <__malloc_lock>
 8024984:	4a1d      	ldr	r2, [pc, #116]	@ (80249fc <_free_r+0x90>)
 8024986:	6813      	ldr	r3, [r2, #0]
 8024988:	2b00      	cmp	r3, #0
 802498a:	d105      	bne.n	8024998 <_free_r+0x2c>
 802498c:	6063      	str	r3, [r4, #4]
 802498e:	6014      	str	r4, [r2, #0]
 8024990:	0028      	movs	r0, r5
 8024992:	f000 fc55 	bl	8025240 <__malloc_unlock>
 8024996:	bd70      	pop	{r4, r5, r6, pc}
 8024998:	42a3      	cmp	r3, r4
 802499a:	d908      	bls.n	80249ae <_free_r+0x42>
 802499c:	6820      	ldr	r0, [r4, #0]
 802499e:	1821      	adds	r1, r4, r0
 80249a0:	428b      	cmp	r3, r1
 80249a2:	d1f3      	bne.n	802498c <_free_r+0x20>
 80249a4:	6819      	ldr	r1, [r3, #0]
 80249a6:	685b      	ldr	r3, [r3, #4]
 80249a8:	1809      	adds	r1, r1, r0
 80249aa:	6021      	str	r1, [r4, #0]
 80249ac:	e7ee      	b.n	802498c <_free_r+0x20>
 80249ae:	001a      	movs	r2, r3
 80249b0:	685b      	ldr	r3, [r3, #4]
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d001      	beq.n	80249ba <_free_r+0x4e>
 80249b6:	42a3      	cmp	r3, r4
 80249b8:	d9f9      	bls.n	80249ae <_free_r+0x42>
 80249ba:	6811      	ldr	r1, [r2, #0]
 80249bc:	1850      	adds	r0, r2, r1
 80249be:	42a0      	cmp	r0, r4
 80249c0:	d10b      	bne.n	80249da <_free_r+0x6e>
 80249c2:	6820      	ldr	r0, [r4, #0]
 80249c4:	1809      	adds	r1, r1, r0
 80249c6:	1850      	adds	r0, r2, r1
 80249c8:	6011      	str	r1, [r2, #0]
 80249ca:	4283      	cmp	r3, r0
 80249cc:	d1e0      	bne.n	8024990 <_free_r+0x24>
 80249ce:	6818      	ldr	r0, [r3, #0]
 80249d0:	685b      	ldr	r3, [r3, #4]
 80249d2:	1841      	adds	r1, r0, r1
 80249d4:	6011      	str	r1, [r2, #0]
 80249d6:	6053      	str	r3, [r2, #4]
 80249d8:	e7da      	b.n	8024990 <_free_r+0x24>
 80249da:	42a0      	cmp	r0, r4
 80249dc:	d902      	bls.n	80249e4 <_free_r+0x78>
 80249de:	230c      	movs	r3, #12
 80249e0:	602b      	str	r3, [r5, #0]
 80249e2:	e7d5      	b.n	8024990 <_free_r+0x24>
 80249e4:	6820      	ldr	r0, [r4, #0]
 80249e6:	1821      	adds	r1, r4, r0
 80249e8:	428b      	cmp	r3, r1
 80249ea:	d103      	bne.n	80249f4 <_free_r+0x88>
 80249ec:	6819      	ldr	r1, [r3, #0]
 80249ee:	685b      	ldr	r3, [r3, #4]
 80249f0:	1809      	adds	r1, r1, r0
 80249f2:	6021      	str	r1, [r4, #0]
 80249f4:	6063      	str	r3, [r4, #4]
 80249f6:	6054      	str	r4, [r2, #4]
 80249f8:	e7ca      	b.n	8024990 <_free_r+0x24>
 80249fa:	46c0      	nop			@ (mov r8, r8)
 80249fc:	200035ec 	.word	0x200035ec

08024a00 <rshift>:
 8024a00:	0002      	movs	r2, r0
 8024a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a04:	6904      	ldr	r4, [r0, #16]
 8024a06:	b085      	sub	sp, #20
 8024a08:	3214      	adds	r2, #20
 8024a0a:	114b      	asrs	r3, r1, #5
 8024a0c:	0016      	movs	r6, r2
 8024a0e:	9302      	str	r3, [sp, #8]
 8024a10:	429c      	cmp	r4, r3
 8024a12:	dd31      	ble.n	8024a78 <rshift+0x78>
 8024a14:	261f      	movs	r6, #31
 8024a16:	000f      	movs	r7, r1
 8024a18:	009b      	lsls	r3, r3, #2
 8024a1a:	00a5      	lsls	r5, r4, #2
 8024a1c:	18d3      	adds	r3, r2, r3
 8024a1e:	4037      	ands	r7, r6
 8024a20:	1955      	adds	r5, r2, r5
 8024a22:	9300      	str	r3, [sp, #0]
 8024a24:	9701      	str	r7, [sp, #4]
 8024a26:	4231      	tst	r1, r6
 8024a28:	d10d      	bne.n	8024a46 <rshift+0x46>
 8024a2a:	0016      	movs	r6, r2
 8024a2c:	0019      	movs	r1, r3
 8024a2e:	428d      	cmp	r5, r1
 8024a30:	d836      	bhi.n	8024aa0 <rshift+0xa0>
 8024a32:	9b00      	ldr	r3, [sp, #0]
 8024a34:	2600      	movs	r6, #0
 8024a36:	3b03      	subs	r3, #3
 8024a38:	429d      	cmp	r5, r3
 8024a3a:	d302      	bcc.n	8024a42 <rshift+0x42>
 8024a3c:	9b02      	ldr	r3, [sp, #8]
 8024a3e:	1ae4      	subs	r4, r4, r3
 8024a40:	00a6      	lsls	r6, r4, #2
 8024a42:	1996      	adds	r6, r2, r6
 8024a44:	e018      	b.n	8024a78 <rshift+0x78>
 8024a46:	2120      	movs	r1, #32
 8024a48:	9e01      	ldr	r6, [sp, #4]
 8024a4a:	9f01      	ldr	r7, [sp, #4]
 8024a4c:	1b89      	subs	r1, r1, r6
 8024a4e:	9e00      	ldr	r6, [sp, #0]
 8024a50:	9103      	str	r1, [sp, #12]
 8024a52:	ce02      	ldmia	r6!, {r1}
 8024a54:	4694      	mov	ip, r2
 8024a56:	40f9      	lsrs	r1, r7
 8024a58:	42b5      	cmp	r5, r6
 8024a5a:	d816      	bhi.n	8024a8a <rshift+0x8a>
 8024a5c:	9b00      	ldr	r3, [sp, #0]
 8024a5e:	2600      	movs	r6, #0
 8024a60:	3301      	adds	r3, #1
 8024a62:	429d      	cmp	r5, r3
 8024a64:	d303      	bcc.n	8024a6e <rshift+0x6e>
 8024a66:	9b02      	ldr	r3, [sp, #8]
 8024a68:	1ae4      	subs	r4, r4, r3
 8024a6a:	00a6      	lsls	r6, r4, #2
 8024a6c:	3e04      	subs	r6, #4
 8024a6e:	1996      	adds	r6, r2, r6
 8024a70:	6031      	str	r1, [r6, #0]
 8024a72:	2900      	cmp	r1, #0
 8024a74:	d000      	beq.n	8024a78 <rshift+0x78>
 8024a76:	3604      	adds	r6, #4
 8024a78:	1ab1      	subs	r1, r6, r2
 8024a7a:	1089      	asrs	r1, r1, #2
 8024a7c:	6101      	str	r1, [r0, #16]
 8024a7e:	4296      	cmp	r6, r2
 8024a80:	d101      	bne.n	8024a86 <rshift+0x86>
 8024a82:	2300      	movs	r3, #0
 8024a84:	6143      	str	r3, [r0, #20]
 8024a86:	b005      	add	sp, #20
 8024a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a8a:	6837      	ldr	r7, [r6, #0]
 8024a8c:	9b03      	ldr	r3, [sp, #12]
 8024a8e:	409f      	lsls	r7, r3
 8024a90:	430f      	orrs	r7, r1
 8024a92:	4661      	mov	r1, ip
 8024a94:	c180      	stmia	r1!, {r7}
 8024a96:	468c      	mov	ip, r1
 8024a98:	9b01      	ldr	r3, [sp, #4]
 8024a9a:	ce02      	ldmia	r6!, {r1}
 8024a9c:	40d9      	lsrs	r1, r3
 8024a9e:	e7db      	b.n	8024a58 <rshift+0x58>
 8024aa0:	c980      	ldmia	r1!, {r7}
 8024aa2:	c680      	stmia	r6!, {r7}
 8024aa4:	e7c3      	b.n	8024a2e <rshift+0x2e>

08024aa6 <__hexdig_fun>:
 8024aa6:	0002      	movs	r2, r0
 8024aa8:	3a30      	subs	r2, #48	@ 0x30
 8024aaa:	0003      	movs	r3, r0
 8024aac:	2a09      	cmp	r2, #9
 8024aae:	d802      	bhi.n	8024ab6 <__hexdig_fun+0x10>
 8024ab0:	3b20      	subs	r3, #32
 8024ab2:	b2d8      	uxtb	r0, r3
 8024ab4:	4770      	bx	lr
 8024ab6:	0002      	movs	r2, r0
 8024ab8:	3a61      	subs	r2, #97	@ 0x61
 8024aba:	2a05      	cmp	r2, #5
 8024abc:	d801      	bhi.n	8024ac2 <__hexdig_fun+0x1c>
 8024abe:	3b47      	subs	r3, #71	@ 0x47
 8024ac0:	e7f7      	b.n	8024ab2 <__hexdig_fun+0xc>
 8024ac2:	001a      	movs	r2, r3
 8024ac4:	3a41      	subs	r2, #65	@ 0x41
 8024ac6:	2000      	movs	r0, #0
 8024ac8:	2a05      	cmp	r2, #5
 8024aca:	d8f3      	bhi.n	8024ab4 <__hexdig_fun+0xe>
 8024acc:	3b27      	subs	r3, #39	@ 0x27
 8024ace:	e7f0      	b.n	8024ab2 <__hexdig_fun+0xc>

08024ad0 <__gethex>:
 8024ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ad2:	b089      	sub	sp, #36	@ 0x24
 8024ad4:	9307      	str	r3, [sp, #28]
 8024ad6:	680b      	ldr	r3, [r1, #0]
 8024ad8:	9201      	str	r2, [sp, #4]
 8024ada:	9003      	str	r0, [sp, #12]
 8024adc:	9106      	str	r1, [sp, #24]
 8024ade:	1c9a      	adds	r2, r3, #2
 8024ae0:	0011      	movs	r1, r2
 8024ae2:	3201      	adds	r2, #1
 8024ae4:	1e50      	subs	r0, r2, #1
 8024ae6:	7800      	ldrb	r0, [r0, #0]
 8024ae8:	2830      	cmp	r0, #48	@ 0x30
 8024aea:	d0f9      	beq.n	8024ae0 <__gethex+0x10>
 8024aec:	1acb      	subs	r3, r1, r3
 8024aee:	3b02      	subs	r3, #2
 8024af0:	9305      	str	r3, [sp, #20]
 8024af2:	9100      	str	r1, [sp, #0]
 8024af4:	f7ff ffd7 	bl	8024aa6 <__hexdig_fun>
 8024af8:	2300      	movs	r3, #0
 8024afa:	001d      	movs	r5, r3
 8024afc:	9302      	str	r3, [sp, #8]
 8024afe:	4298      	cmp	r0, r3
 8024b00:	d11e      	bne.n	8024b40 <__gethex+0x70>
 8024b02:	2201      	movs	r2, #1
 8024b04:	49a6      	ldr	r1, [pc, #664]	@ (8024da0 <__gethex+0x2d0>)
 8024b06:	9800      	ldr	r0, [sp, #0]
 8024b08:	f7fe ffd8 	bl	8023abc <strncmp>
 8024b0c:	0007      	movs	r7, r0
 8024b0e:	42a8      	cmp	r0, r5
 8024b10:	d000      	beq.n	8024b14 <__gethex+0x44>
 8024b12:	e06a      	b.n	8024bea <__gethex+0x11a>
 8024b14:	9b00      	ldr	r3, [sp, #0]
 8024b16:	7858      	ldrb	r0, [r3, #1]
 8024b18:	1c5c      	adds	r4, r3, #1
 8024b1a:	f7ff ffc4 	bl	8024aa6 <__hexdig_fun>
 8024b1e:	2301      	movs	r3, #1
 8024b20:	9302      	str	r3, [sp, #8]
 8024b22:	42a8      	cmp	r0, r5
 8024b24:	d02f      	beq.n	8024b86 <__gethex+0xb6>
 8024b26:	9400      	str	r4, [sp, #0]
 8024b28:	9b00      	ldr	r3, [sp, #0]
 8024b2a:	7818      	ldrb	r0, [r3, #0]
 8024b2c:	2830      	cmp	r0, #48	@ 0x30
 8024b2e:	d009      	beq.n	8024b44 <__gethex+0x74>
 8024b30:	f7ff ffb9 	bl	8024aa6 <__hexdig_fun>
 8024b34:	4242      	negs	r2, r0
 8024b36:	4142      	adcs	r2, r0
 8024b38:	2301      	movs	r3, #1
 8024b3a:	0025      	movs	r5, r4
 8024b3c:	9202      	str	r2, [sp, #8]
 8024b3e:	9305      	str	r3, [sp, #20]
 8024b40:	9c00      	ldr	r4, [sp, #0]
 8024b42:	e004      	b.n	8024b4e <__gethex+0x7e>
 8024b44:	9b00      	ldr	r3, [sp, #0]
 8024b46:	3301      	adds	r3, #1
 8024b48:	9300      	str	r3, [sp, #0]
 8024b4a:	e7ed      	b.n	8024b28 <__gethex+0x58>
 8024b4c:	3401      	adds	r4, #1
 8024b4e:	7820      	ldrb	r0, [r4, #0]
 8024b50:	f7ff ffa9 	bl	8024aa6 <__hexdig_fun>
 8024b54:	1e07      	subs	r7, r0, #0
 8024b56:	d1f9      	bne.n	8024b4c <__gethex+0x7c>
 8024b58:	2201      	movs	r2, #1
 8024b5a:	0020      	movs	r0, r4
 8024b5c:	4990      	ldr	r1, [pc, #576]	@ (8024da0 <__gethex+0x2d0>)
 8024b5e:	f7fe ffad 	bl	8023abc <strncmp>
 8024b62:	2800      	cmp	r0, #0
 8024b64:	d10d      	bne.n	8024b82 <__gethex+0xb2>
 8024b66:	2d00      	cmp	r5, #0
 8024b68:	d106      	bne.n	8024b78 <__gethex+0xa8>
 8024b6a:	3401      	adds	r4, #1
 8024b6c:	0025      	movs	r5, r4
 8024b6e:	7820      	ldrb	r0, [r4, #0]
 8024b70:	f7ff ff99 	bl	8024aa6 <__hexdig_fun>
 8024b74:	2800      	cmp	r0, #0
 8024b76:	d102      	bne.n	8024b7e <__gethex+0xae>
 8024b78:	1b2d      	subs	r5, r5, r4
 8024b7a:	00af      	lsls	r7, r5, #2
 8024b7c:	e003      	b.n	8024b86 <__gethex+0xb6>
 8024b7e:	3401      	adds	r4, #1
 8024b80:	e7f5      	b.n	8024b6e <__gethex+0x9e>
 8024b82:	2d00      	cmp	r5, #0
 8024b84:	d1f8      	bne.n	8024b78 <__gethex+0xa8>
 8024b86:	2220      	movs	r2, #32
 8024b88:	7823      	ldrb	r3, [r4, #0]
 8024b8a:	0026      	movs	r6, r4
 8024b8c:	4393      	bics	r3, r2
 8024b8e:	2b50      	cmp	r3, #80	@ 0x50
 8024b90:	d11d      	bne.n	8024bce <__gethex+0xfe>
 8024b92:	7863      	ldrb	r3, [r4, #1]
 8024b94:	2b2b      	cmp	r3, #43	@ 0x2b
 8024b96:	d02d      	beq.n	8024bf4 <__gethex+0x124>
 8024b98:	2b2d      	cmp	r3, #45	@ 0x2d
 8024b9a:	d02f      	beq.n	8024bfc <__gethex+0x12c>
 8024b9c:	2300      	movs	r3, #0
 8024b9e:	1c66      	adds	r6, r4, #1
 8024ba0:	9304      	str	r3, [sp, #16]
 8024ba2:	7830      	ldrb	r0, [r6, #0]
 8024ba4:	f7ff ff7f 	bl	8024aa6 <__hexdig_fun>
 8024ba8:	1e43      	subs	r3, r0, #1
 8024baa:	b2db      	uxtb	r3, r3
 8024bac:	0005      	movs	r5, r0
 8024bae:	2b18      	cmp	r3, #24
 8024bb0:	d82a      	bhi.n	8024c08 <__gethex+0x138>
 8024bb2:	7870      	ldrb	r0, [r6, #1]
 8024bb4:	f7ff ff77 	bl	8024aa6 <__hexdig_fun>
 8024bb8:	1e43      	subs	r3, r0, #1
 8024bba:	b2db      	uxtb	r3, r3
 8024bbc:	3601      	adds	r6, #1
 8024bbe:	3d10      	subs	r5, #16
 8024bc0:	2b18      	cmp	r3, #24
 8024bc2:	d91d      	bls.n	8024c00 <__gethex+0x130>
 8024bc4:	9b04      	ldr	r3, [sp, #16]
 8024bc6:	2b00      	cmp	r3, #0
 8024bc8:	d000      	beq.n	8024bcc <__gethex+0xfc>
 8024bca:	426d      	negs	r5, r5
 8024bcc:	197f      	adds	r7, r7, r5
 8024bce:	9b06      	ldr	r3, [sp, #24]
 8024bd0:	601e      	str	r6, [r3, #0]
 8024bd2:	9b02      	ldr	r3, [sp, #8]
 8024bd4:	2b00      	cmp	r3, #0
 8024bd6:	d019      	beq.n	8024c0c <__gethex+0x13c>
 8024bd8:	9b05      	ldr	r3, [sp, #20]
 8024bda:	2606      	movs	r6, #6
 8024bdc:	425a      	negs	r2, r3
 8024bde:	4153      	adcs	r3, r2
 8024be0:	425b      	negs	r3, r3
 8024be2:	401e      	ands	r6, r3
 8024be4:	0030      	movs	r0, r6
 8024be6:	b009      	add	sp, #36	@ 0x24
 8024be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bea:	2301      	movs	r3, #1
 8024bec:	2700      	movs	r7, #0
 8024bee:	9c00      	ldr	r4, [sp, #0]
 8024bf0:	9302      	str	r3, [sp, #8]
 8024bf2:	e7c8      	b.n	8024b86 <__gethex+0xb6>
 8024bf4:	2300      	movs	r3, #0
 8024bf6:	9304      	str	r3, [sp, #16]
 8024bf8:	1ca6      	adds	r6, r4, #2
 8024bfa:	e7d2      	b.n	8024ba2 <__gethex+0xd2>
 8024bfc:	2301      	movs	r3, #1
 8024bfe:	e7fa      	b.n	8024bf6 <__gethex+0x126>
 8024c00:	230a      	movs	r3, #10
 8024c02:	435d      	muls	r5, r3
 8024c04:	182d      	adds	r5, r5, r0
 8024c06:	e7d4      	b.n	8024bb2 <__gethex+0xe2>
 8024c08:	0026      	movs	r6, r4
 8024c0a:	e7e0      	b.n	8024bce <__gethex+0xfe>
 8024c0c:	9b00      	ldr	r3, [sp, #0]
 8024c0e:	9902      	ldr	r1, [sp, #8]
 8024c10:	1ae3      	subs	r3, r4, r3
 8024c12:	3b01      	subs	r3, #1
 8024c14:	2b07      	cmp	r3, #7
 8024c16:	dc0a      	bgt.n	8024c2e <__gethex+0x15e>
 8024c18:	9803      	ldr	r0, [sp, #12]
 8024c1a:	f000 fb19 	bl	8025250 <_Balloc>
 8024c1e:	1e05      	subs	r5, r0, #0
 8024c20:	d108      	bne.n	8024c34 <__gethex+0x164>
 8024c22:	002a      	movs	r2, r5
 8024c24:	21e4      	movs	r1, #228	@ 0xe4
 8024c26:	4b5f      	ldr	r3, [pc, #380]	@ (8024da4 <__gethex+0x2d4>)
 8024c28:	485f      	ldr	r0, [pc, #380]	@ (8024da8 <__gethex+0x2d8>)
 8024c2a:	f001 fbf1 	bl	8026410 <__assert_func>
 8024c2e:	3101      	adds	r1, #1
 8024c30:	105b      	asrs	r3, r3, #1
 8024c32:	e7ef      	b.n	8024c14 <__gethex+0x144>
 8024c34:	0003      	movs	r3, r0
 8024c36:	3314      	adds	r3, #20
 8024c38:	9302      	str	r3, [sp, #8]
 8024c3a:	9305      	str	r3, [sp, #20]
 8024c3c:	2300      	movs	r3, #0
 8024c3e:	001e      	movs	r6, r3
 8024c40:	9304      	str	r3, [sp, #16]
 8024c42:	9b00      	ldr	r3, [sp, #0]
 8024c44:	42a3      	cmp	r3, r4
 8024c46:	d338      	bcc.n	8024cba <__gethex+0x1ea>
 8024c48:	9c05      	ldr	r4, [sp, #20]
 8024c4a:	9b02      	ldr	r3, [sp, #8]
 8024c4c:	c440      	stmia	r4!, {r6}
 8024c4e:	1ae4      	subs	r4, r4, r3
 8024c50:	10a4      	asrs	r4, r4, #2
 8024c52:	0030      	movs	r0, r6
 8024c54:	612c      	str	r4, [r5, #16]
 8024c56:	f000 fbf3 	bl	8025440 <__hi0bits>
 8024c5a:	9b01      	ldr	r3, [sp, #4]
 8024c5c:	0164      	lsls	r4, r4, #5
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	1a26      	subs	r6, r4, r0
 8024c62:	9300      	str	r3, [sp, #0]
 8024c64:	429e      	cmp	r6, r3
 8024c66:	dd52      	ble.n	8024d0e <__gethex+0x23e>
 8024c68:	1af6      	subs	r6, r6, r3
 8024c6a:	0031      	movs	r1, r6
 8024c6c:	0028      	movs	r0, r5
 8024c6e:	f000 ff96 	bl	8025b9e <__any_on>
 8024c72:	1e04      	subs	r4, r0, #0
 8024c74:	d00f      	beq.n	8024c96 <__gethex+0x1c6>
 8024c76:	2401      	movs	r4, #1
 8024c78:	231f      	movs	r3, #31
 8024c7a:	0020      	movs	r0, r4
 8024c7c:	1e72      	subs	r2, r6, #1
 8024c7e:	4013      	ands	r3, r2
 8024c80:	4098      	lsls	r0, r3
 8024c82:	0003      	movs	r3, r0
 8024c84:	1151      	asrs	r1, r2, #5
 8024c86:	9802      	ldr	r0, [sp, #8]
 8024c88:	0089      	lsls	r1, r1, #2
 8024c8a:	5809      	ldr	r1, [r1, r0]
 8024c8c:	4219      	tst	r1, r3
 8024c8e:	d002      	beq.n	8024c96 <__gethex+0x1c6>
 8024c90:	42a2      	cmp	r2, r4
 8024c92:	dc34      	bgt.n	8024cfe <__gethex+0x22e>
 8024c94:	2402      	movs	r4, #2
 8024c96:	0031      	movs	r1, r6
 8024c98:	0028      	movs	r0, r5
 8024c9a:	f7ff feb1 	bl	8024a00 <rshift>
 8024c9e:	19bf      	adds	r7, r7, r6
 8024ca0:	9b01      	ldr	r3, [sp, #4]
 8024ca2:	689b      	ldr	r3, [r3, #8]
 8024ca4:	42bb      	cmp	r3, r7
 8024ca6:	da42      	bge.n	8024d2e <__gethex+0x25e>
 8024ca8:	0029      	movs	r1, r5
 8024caa:	9803      	ldr	r0, [sp, #12]
 8024cac:	f000 fb14 	bl	80252d8 <_Bfree>
 8024cb0:	2300      	movs	r3, #0
 8024cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024cb4:	26a3      	movs	r6, #163	@ 0xa3
 8024cb6:	6013      	str	r3, [r2, #0]
 8024cb8:	e794      	b.n	8024be4 <__gethex+0x114>
 8024cba:	3c01      	subs	r4, #1
 8024cbc:	7823      	ldrb	r3, [r4, #0]
 8024cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8024cc0:	d012      	beq.n	8024ce8 <__gethex+0x218>
 8024cc2:	9b04      	ldr	r3, [sp, #16]
 8024cc4:	2b20      	cmp	r3, #32
 8024cc6:	d104      	bne.n	8024cd2 <__gethex+0x202>
 8024cc8:	9b05      	ldr	r3, [sp, #20]
 8024cca:	c340      	stmia	r3!, {r6}
 8024ccc:	2600      	movs	r6, #0
 8024cce:	9305      	str	r3, [sp, #20]
 8024cd0:	9604      	str	r6, [sp, #16]
 8024cd2:	7820      	ldrb	r0, [r4, #0]
 8024cd4:	f7ff fee7 	bl	8024aa6 <__hexdig_fun>
 8024cd8:	230f      	movs	r3, #15
 8024cda:	4018      	ands	r0, r3
 8024cdc:	9b04      	ldr	r3, [sp, #16]
 8024cde:	4098      	lsls	r0, r3
 8024ce0:	3304      	adds	r3, #4
 8024ce2:	4306      	orrs	r6, r0
 8024ce4:	9304      	str	r3, [sp, #16]
 8024ce6:	e7ac      	b.n	8024c42 <__gethex+0x172>
 8024ce8:	9b00      	ldr	r3, [sp, #0]
 8024cea:	42a3      	cmp	r3, r4
 8024cec:	d8e9      	bhi.n	8024cc2 <__gethex+0x1f2>
 8024cee:	2201      	movs	r2, #1
 8024cf0:	0020      	movs	r0, r4
 8024cf2:	492b      	ldr	r1, [pc, #172]	@ (8024da0 <__gethex+0x2d0>)
 8024cf4:	f7fe fee2 	bl	8023abc <strncmp>
 8024cf8:	2800      	cmp	r0, #0
 8024cfa:	d1e2      	bne.n	8024cc2 <__gethex+0x1f2>
 8024cfc:	e7a1      	b.n	8024c42 <__gethex+0x172>
 8024cfe:	0028      	movs	r0, r5
 8024d00:	1eb1      	subs	r1, r6, #2
 8024d02:	f000 ff4c 	bl	8025b9e <__any_on>
 8024d06:	2800      	cmp	r0, #0
 8024d08:	d0c4      	beq.n	8024c94 <__gethex+0x1c4>
 8024d0a:	2403      	movs	r4, #3
 8024d0c:	e7c3      	b.n	8024c96 <__gethex+0x1c6>
 8024d0e:	9b00      	ldr	r3, [sp, #0]
 8024d10:	2400      	movs	r4, #0
 8024d12:	429e      	cmp	r6, r3
 8024d14:	dac4      	bge.n	8024ca0 <__gethex+0x1d0>
 8024d16:	1b9e      	subs	r6, r3, r6
 8024d18:	0029      	movs	r1, r5
 8024d1a:	0032      	movs	r2, r6
 8024d1c:	9803      	ldr	r0, [sp, #12]
 8024d1e:	f000 fd05 	bl	802572c <__lshift>
 8024d22:	0003      	movs	r3, r0
 8024d24:	3314      	adds	r3, #20
 8024d26:	0005      	movs	r5, r0
 8024d28:	1bbf      	subs	r7, r7, r6
 8024d2a:	9302      	str	r3, [sp, #8]
 8024d2c:	e7b8      	b.n	8024ca0 <__gethex+0x1d0>
 8024d2e:	9b01      	ldr	r3, [sp, #4]
 8024d30:	685e      	ldr	r6, [r3, #4]
 8024d32:	42be      	cmp	r6, r7
 8024d34:	dd6f      	ble.n	8024e16 <__gethex+0x346>
 8024d36:	9b00      	ldr	r3, [sp, #0]
 8024d38:	1bf6      	subs	r6, r6, r7
 8024d3a:	42b3      	cmp	r3, r6
 8024d3c:	dc36      	bgt.n	8024dac <__gethex+0x2dc>
 8024d3e:	9b01      	ldr	r3, [sp, #4]
 8024d40:	68db      	ldr	r3, [r3, #12]
 8024d42:	2b02      	cmp	r3, #2
 8024d44:	d024      	beq.n	8024d90 <__gethex+0x2c0>
 8024d46:	2b03      	cmp	r3, #3
 8024d48:	d026      	beq.n	8024d98 <__gethex+0x2c8>
 8024d4a:	2b01      	cmp	r3, #1
 8024d4c:	d117      	bne.n	8024d7e <__gethex+0x2ae>
 8024d4e:	9b00      	ldr	r3, [sp, #0]
 8024d50:	42b3      	cmp	r3, r6
 8024d52:	d114      	bne.n	8024d7e <__gethex+0x2ae>
 8024d54:	2b01      	cmp	r3, #1
 8024d56:	d10b      	bne.n	8024d70 <__gethex+0x2a0>
 8024d58:	9b01      	ldr	r3, [sp, #4]
 8024d5a:	9a07      	ldr	r2, [sp, #28]
 8024d5c:	685b      	ldr	r3, [r3, #4]
 8024d5e:	2662      	movs	r6, #98	@ 0x62
 8024d60:	6013      	str	r3, [r2, #0]
 8024d62:	2301      	movs	r3, #1
 8024d64:	9a02      	ldr	r2, [sp, #8]
 8024d66:	612b      	str	r3, [r5, #16]
 8024d68:	6013      	str	r3, [r2, #0]
 8024d6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d6c:	601d      	str	r5, [r3, #0]
 8024d6e:	e739      	b.n	8024be4 <__gethex+0x114>
 8024d70:	9900      	ldr	r1, [sp, #0]
 8024d72:	0028      	movs	r0, r5
 8024d74:	3901      	subs	r1, #1
 8024d76:	f000 ff12 	bl	8025b9e <__any_on>
 8024d7a:	2800      	cmp	r0, #0
 8024d7c:	d1ec      	bne.n	8024d58 <__gethex+0x288>
 8024d7e:	0029      	movs	r1, r5
 8024d80:	9803      	ldr	r0, [sp, #12]
 8024d82:	f000 faa9 	bl	80252d8 <_Bfree>
 8024d86:	2300      	movs	r3, #0
 8024d88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d8a:	2650      	movs	r6, #80	@ 0x50
 8024d8c:	6013      	str	r3, [r2, #0]
 8024d8e:	e729      	b.n	8024be4 <__gethex+0x114>
 8024d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d92:	2b00      	cmp	r3, #0
 8024d94:	d1f3      	bne.n	8024d7e <__gethex+0x2ae>
 8024d96:	e7df      	b.n	8024d58 <__gethex+0x288>
 8024d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d9a:	2b00      	cmp	r3, #0
 8024d9c:	d1dc      	bne.n	8024d58 <__gethex+0x288>
 8024d9e:	e7ee      	b.n	8024d7e <__gethex+0x2ae>
 8024da0:	0802b70c 	.word	0x0802b70c
 8024da4:	0802b919 	.word	0x0802b919
 8024da8:	0802b92a 	.word	0x0802b92a
 8024dac:	1e77      	subs	r7, r6, #1
 8024dae:	2c00      	cmp	r4, #0
 8024db0:	d12f      	bne.n	8024e12 <__gethex+0x342>
 8024db2:	2f00      	cmp	r7, #0
 8024db4:	d004      	beq.n	8024dc0 <__gethex+0x2f0>
 8024db6:	0039      	movs	r1, r7
 8024db8:	0028      	movs	r0, r5
 8024dba:	f000 fef0 	bl	8025b9e <__any_on>
 8024dbe:	0004      	movs	r4, r0
 8024dc0:	231f      	movs	r3, #31
 8024dc2:	117a      	asrs	r2, r7, #5
 8024dc4:	401f      	ands	r7, r3
 8024dc6:	3b1e      	subs	r3, #30
 8024dc8:	40bb      	lsls	r3, r7
 8024dca:	9902      	ldr	r1, [sp, #8]
 8024dcc:	0092      	lsls	r2, r2, #2
 8024dce:	5852      	ldr	r2, [r2, r1]
 8024dd0:	421a      	tst	r2, r3
 8024dd2:	d001      	beq.n	8024dd8 <__gethex+0x308>
 8024dd4:	2302      	movs	r3, #2
 8024dd6:	431c      	orrs	r4, r3
 8024dd8:	9b00      	ldr	r3, [sp, #0]
 8024dda:	0031      	movs	r1, r6
 8024ddc:	1b9b      	subs	r3, r3, r6
 8024dde:	2602      	movs	r6, #2
 8024de0:	0028      	movs	r0, r5
 8024de2:	9300      	str	r3, [sp, #0]
 8024de4:	f7ff fe0c 	bl	8024a00 <rshift>
 8024de8:	9b01      	ldr	r3, [sp, #4]
 8024dea:	685f      	ldr	r7, [r3, #4]
 8024dec:	2c00      	cmp	r4, #0
 8024dee:	d03f      	beq.n	8024e70 <__gethex+0x3a0>
 8024df0:	9b01      	ldr	r3, [sp, #4]
 8024df2:	68db      	ldr	r3, [r3, #12]
 8024df4:	2b02      	cmp	r3, #2
 8024df6:	d010      	beq.n	8024e1a <__gethex+0x34a>
 8024df8:	2b03      	cmp	r3, #3
 8024dfa:	d012      	beq.n	8024e22 <__gethex+0x352>
 8024dfc:	2b01      	cmp	r3, #1
 8024dfe:	d106      	bne.n	8024e0e <__gethex+0x33e>
 8024e00:	07a2      	lsls	r2, r4, #30
 8024e02:	d504      	bpl.n	8024e0e <__gethex+0x33e>
 8024e04:	9a02      	ldr	r2, [sp, #8]
 8024e06:	6812      	ldr	r2, [r2, #0]
 8024e08:	4314      	orrs	r4, r2
 8024e0a:	421c      	tst	r4, r3
 8024e0c:	d10c      	bne.n	8024e28 <__gethex+0x358>
 8024e0e:	2310      	movs	r3, #16
 8024e10:	e02d      	b.n	8024e6e <__gethex+0x39e>
 8024e12:	2401      	movs	r4, #1
 8024e14:	e7d4      	b.n	8024dc0 <__gethex+0x2f0>
 8024e16:	2601      	movs	r6, #1
 8024e18:	e7e8      	b.n	8024dec <__gethex+0x31c>
 8024e1a:	2301      	movs	r3, #1
 8024e1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024e1e:	1a9b      	subs	r3, r3, r2
 8024e20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024e22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e24:	2b00      	cmp	r3, #0
 8024e26:	d0f2      	beq.n	8024e0e <__gethex+0x33e>
 8024e28:	692b      	ldr	r3, [r5, #16]
 8024e2a:	2000      	movs	r0, #0
 8024e2c:	9302      	str	r3, [sp, #8]
 8024e2e:	009b      	lsls	r3, r3, #2
 8024e30:	9304      	str	r3, [sp, #16]
 8024e32:	002b      	movs	r3, r5
 8024e34:	9a04      	ldr	r2, [sp, #16]
 8024e36:	3314      	adds	r3, #20
 8024e38:	1899      	adds	r1, r3, r2
 8024e3a:	681a      	ldr	r2, [r3, #0]
 8024e3c:	1c54      	adds	r4, r2, #1
 8024e3e:	d01c      	beq.n	8024e7a <__gethex+0x3aa>
 8024e40:	3201      	adds	r2, #1
 8024e42:	601a      	str	r2, [r3, #0]
 8024e44:	002b      	movs	r3, r5
 8024e46:	3314      	adds	r3, #20
 8024e48:	2e02      	cmp	r6, #2
 8024e4a:	d13f      	bne.n	8024ecc <__gethex+0x3fc>
 8024e4c:	9a01      	ldr	r2, [sp, #4]
 8024e4e:	9900      	ldr	r1, [sp, #0]
 8024e50:	6812      	ldr	r2, [r2, #0]
 8024e52:	3a01      	subs	r2, #1
 8024e54:	428a      	cmp	r2, r1
 8024e56:	d109      	bne.n	8024e6c <__gethex+0x39c>
 8024e58:	000a      	movs	r2, r1
 8024e5a:	201f      	movs	r0, #31
 8024e5c:	4010      	ands	r0, r2
 8024e5e:	2201      	movs	r2, #1
 8024e60:	4082      	lsls	r2, r0
 8024e62:	1149      	asrs	r1, r1, #5
 8024e64:	0089      	lsls	r1, r1, #2
 8024e66:	58cb      	ldr	r3, [r1, r3]
 8024e68:	4213      	tst	r3, r2
 8024e6a:	d13d      	bne.n	8024ee8 <__gethex+0x418>
 8024e6c:	2320      	movs	r3, #32
 8024e6e:	431e      	orrs	r6, r3
 8024e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024e72:	601d      	str	r5, [r3, #0]
 8024e74:	9b07      	ldr	r3, [sp, #28]
 8024e76:	601f      	str	r7, [r3, #0]
 8024e78:	e6b4      	b.n	8024be4 <__gethex+0x114>
 8024e7a:	c301      	stmia	r3!, {r0}
 8024e7c:	4299      	cmp	r1, r3
 8024e7e:	d8dc      	bhi.n	8024e3a <__gethex+0x36a>
 8024e80:	68ab      	ldr	r3, [r5, #8]
 8024e82:	9a02      	ldr	r2, [sp, #8]
 8024e84:	429a      	cmp	r2, r3
 8024e86:	db18      	blt.n	8024eba <__gethex+0x3ea>
 8024e88:	6869      	ldr	r1, [r5, #4]
 8024e8a:	9803      	ldr	r0, [sp, #12]
 8024e8c:	3101      	adds	r1, #1
 8024e8e:	f000 f9df 	bl	8025250 <_Balloc>
 8024e92:	1e04      	subs	r4, r0, #0
 8024e94:	d104      	bne.n	8024ea0 <__gethex+0x3d0>
 8024e96:	0022      	movs	r2, r4
 8024e98:	2184      	movs	r1, #132	@ 0x84
 8024e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8024f10 <__gethex+0x440>)
 8024e9c:	481d      	ldr	r0, [pc, #116]	@ (8024f14 <__gethex+0x444>)
 8024e9e:	e6c4      	b.n	8024c2a <__gethex+0x15a>
 8024ea0:	0029      	movs	r1, r5
 8024ea2:	692a      	ldr	r2, [r5, #16]
 8024ea4:	310c      	adds	r1, #12
 8024ea6:	3202      	adds	r2, #2
 8024ea8:	0092      	lsls	r2, r2, #2
 8024eaa:	300c      	adds	r0, #12
 8024eac:	f7fe fecc 	bl	8023c48 <memcpy>
 8024eb0:	0029      	movs	r1, r5
 8024eb2:	9803      	ldr	r0, [sp, #12]
 8024eb4:	f000 fa10 	bl	80252d8 <_Bfree>
 8024eb8:	0025      	movs	r5, r4
 8024eba:	692b      	ldr	r3, [r5, #16]
 8024ebc:	1c5a      	adds	r2, r3, #1
 8024ebe:	612a      	str	r2, [r5, #16]
 8024ec0:	2201      	movs	r2, #1
 8024ec2:	3304      	adds	r3, #4
 8024ec4:	009b      	lsls	r3, r3, #2
 8024ec6:	18eb      	adds	r3, r5, r3
 8024ec8:	605a      	str	r2, [r3, #4]
 8024eca:	e7bb      	b.n	8024e44 <__gethex+0x374>
 8024ecc:	692a      	ldr	r2, [r5, #16]
 8024ece:	9902      	ldr	r1, [sp, #8]
 8024ed0:	428a      	cmp	r2, r1
 8024ed2:	dd0b      	ble.n	8024eec <__gethex+0x41c>
 8024ed4:	2101      	movs	r1, #1
 8024ed6:	0028      	movs	r0, r5
 8024ed8:	f7ff fd92 	bl	8024a00 <rshift>
 8024edc:	9b01      	ldr	r3, [sp, #4]
 8024ede:	3701      	adds	r7, #1
 8024ee0:	689b      	ldr	r3, [r3, #8]
 8024ee2:	42bb      	cmp	r3, r7
 8024ee4:	da00      	bge.n	8024ee8 <__gethex+0x418>
 8024ee6:	e6df      	b.n	8024ca8 <__gethex+0x1d8>
 8024ee8:	2601      	movs	r6, #1
 8024eea:	e7bf      	b.n	8024e6c <__gethex+0x39c>
 8024eec:	221f      	movs	r2, #31
 8024eee:	9c00      	ldr	r4, [sp, #0]
 8024ef0:	9900      	ldr	r1, [sp, #0]
 8024ef2:	4014      	ands	r4, r2
 8024ef4:	4211      	tst	r1, r2
 8024ef6:	d0f7      	beq.n	8024ee8 <__gethex+0x418>
 8024ef8:	9a04      	ldr	r2, [sp, #16]
 8024efa:	189b      	adds	r3, r3, r2
 8024efc:	3b04      	subs	r3, #4
 8024efe:	6818      	ldr	r0, [r3, #0]
 8024f00:	f000 fa9e 	bl	8025440 <__hi0bits>
 8024f04:	2320      	movs	r3, #32
 8024f06:	1b1b      	subs	r3, r3, r4
 8024f08:	4298      	cmp	r0, r3
 8024f0a:	dbe3      	blt.n	8024ed4 <__gethex+0x404>
 8024f0c:	e7ec      	b.n	8024ee8 <__gethex+0x418>
 8024f0e:	46c0      	nop			@ (mov r8, r8)
 8024f10:	0802b919 	.word	0x0802b919
 8024f14:	0802b92a 	.word	0x0802b92a

08024f18 <L_shift>:
 8024f18:	2308      	movs	r3, #8
 8024f1a:	b570      	push	{r4, r5, r6, lr}
 8024f1c:	2520      	movs	r5, #32
 8024f1e:	1a9a      	subs	r2, r3, r2
 8024f20:	0092      	lsls	r2, r2, #2
 8024f22:	1aad      	subs	r5, r5, r2
 8024f24:	6843      	ldr	r3, [r0, #4]
 8024f26:	6804      	ldr	r4, [r0, #0]
 8024f28:	001e      	movs	r6, r3
 8024f2a:	40ae      	lsls	r6, r5
 8024f2c:	40d3      	lsrs	r3, r2
 8024f2e:	4334      	orrs	r4, r6
 8024f30:	6004      	str	r4, [r0, #0]
 8024f32:	6043      	str	r3, [r0, #4]
 8024f34:	3004      	adds	r0, #4
 8024f36:	4288      	cmp	r0, r1
 8024f38:	d3f4      	bcc.n	8024f24 <L_shift+0xc>
 8024f3a:	bd70      	pop	{r4, r5, r6, pc}

08024f3c <__match>:
 8024f3c:	b530      	push	{r4, r5, lr}
 8024f3e:	6803      	ldr	r3, [r0, #0]
 8024f40:	780c      	ldrb	r4, [r1, #0]
 8024f42:	3301      	adds	r3, #1
 8024f44:	2c00      	cmp	r4, #0
 8024f46:	d102      	bne.n	8024f4e <__match+0x12>
 8024f48:	6003      	str	r3, [r0, #0]
 8024f4a:	2001      	movs	r0, #1
 8024f4c:	bd30      	pop	{r4, r5, pc}
 8024f4e:	781a      	ldrb	r2, [r3, #0]
 8024f50:	0015      	movs	r5, r2
 8024f52:	3d41      	subs	r5, #65	@ 0x41
 8024f54:	2d19      	cmp	r5, #25
 8024f56:	d800      	bhi.n	8024f5a <__match+0x1e>
 8024f58:	3220      	adds	r2, #32
 8024f5a:	3101      	adds	r1, #1
 8024f5c:	42a2      	cmp	r2, r4
 8024f5e:	d0ef      	beq.n	8024f40 <__match+0x4>
 8024f60:	2000      	movs	r0, #0
 8024f62:	e7f3      	b.n	8024f4c <__match+0x10>

08024f64 <__hexnan>:
 8024f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f66:	680b      	ldr	r3, [r1, #0]
 8024f68:	b08b      	sub	sp, #44	@ 0x2c
 8024f6a:	9201      	str	r2, [sp, #4]
 8024f6c:	9901      	ldr	r1, [sp, #4]
 8024f6e:	115a      	asrs	r2, r3, #5
 8024f70:	0092      	lsls	r2, r2, #2
 8024f72:	188a      	adds	r2, r1, r2
 8024f74:	9202      	str	r2, [sp, #8]
 8024f76:	0019      	movs	r1, r3
 8024f78:	221f      	movs	r2, #31
 8024f7a:	4011      	ands	r1, r2
 8024f7c:	9008      	str	r0, [sp, #32]
 8024f7e:	9106      	str	r1, [sp, #24]
 8024f80:	4213      	tst	r3, r2
 8024f82:	d002      	beq.n	8024f8a <__hexnan+0x26>
 8024f84:	9b02      	ldr	r3, [sp, #8]
 8024f86:	3304      	adds	r3, #4
 8024f88:	9302      	str	r3, [sp, #8]
 8024f8a:	9b02      	ldr	r3, [sp, #8]
 8024f8c:	2500      	movs	r5, #0
 8024f8e:	1f1f      	subs	r7, r3, #4
 8024f90:	003e      	movs	r6, r7
 8024f92:	003c      	movs	r4, r7
 8024f94:	9b08      	ldr	r3, [sp, #32]
 8024f96:	603d      	str	r5, [r7, #0]
 8024f98:	681b      	ldr	r3, [r3, #0]
 8024f9a:	9507      	str	r5, [sp, #28]
 8024f9c:	9305      	str	r3, [sp, #20]
 8024f9e:	9503      	str	r5, [sp, #12]
 8024fa0:	9b05      	ldr	r3, [sp, #20]
 8024fa2:	3301      	adds	r3, #1
 8024fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fa6:	9b05      	ldr	r3, [sp, #20]
 8024fa8:	785b      	ldrb	r3, [r3, #1]
 8024faa:	9304      	str	r3, [sp, #16]
 8024fac:	2b00      	cmp	r3, #0
 8024fae:	d028      	beq.n	8025002 <__hexnan+0x9e>
 8024fb0:	9804      	ldr	r0, [sp, #16]
 8024fb2:	f7ff fd78 	bl	8024aa6 <__hexdig_fun>
 8024fb6:	2800      	cmp	r0, #0
 8024fb8:	d155      	bne.n	8025066 <__hexnan+0x102>
 8024fba:	9b04      	ldr	r3, [sp, #16]
 8024fbc:	2b20      	cmp	r3, #32
 8024fbe:	d819      	bhi.n	8024ff4 <__hexnan+0x90>
 8024fc0:	9b03      	ldr	r3, [sp, #12]
 8024fc2:	9a07      	ldr	r2, [sp, #28]
 8024fc4:	4293      	cmp	r3, r2
 8024fc6:	dd12      	ble.n	8024fee <__hexnan+0x8a>
 8024fc8:	42b4      	cmp	r4, r6
 8024fca:	d206      	bcs.n	8024fda <__hexnan+0x76>
 8024fcc:	2d07      	cmp	r5, #7
 8024fce:	dc04      	bgt.n	8024fda <__hexnan+0x76>
 8024fd0:	002a      	movs	r2, r5
 8024fd2:	0031      	movs	r1, r6
 8024fd4:	0020      	movs	r0, r4
 8024fd6:	f7ff ff9f 	bl	8024f18 <L_shift>
 8024fda:	9b01      	ldr	r3, [sp, #4]
 8024fdc:	2508      	movs	r5, #8
 8024fde:	429c      	cmp	r4, r3
 8024fe0:	d905      	bls.n	8024fee <__hexnan+0x8a>
 8024fe2:	1f26      	subs	r6, r4, #4
 8024fe4:	2500      	movs	r5, #0
 8024fe6:	0034      	movs	r4, r6
 8024fe8:	9b03      	ldr	r3, [sp, #12]
 8024fea:	6035      	str	r5, [r6, #0]
 8024fec:	9307      	str	r3, [sp, #28]
 8024fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ff0:	9305      	str	r3, [sp, #20]
 8024ff2:	e7d5      	b.n	8024fa0 <__hexnan+0x3c>
 8024ff4:	9b04      	ldr	r3, [sp, #16]
 8024ff6:	2b29      	cmp	r3, #41	@ 0x29
 8024ff8:	d15a      	bne.n	80250b0 <__hexnan+0x14c>
 8024ffa:	9b05      	ldr	r3, [sp, #20]
 8024ffc:	9a08      	ldr	r2, [sp, #32]
 8024ffe:	3302      	adds	r3, #2
 8025000:	6013      	str	r3, [r2, #0]
 8025002:	9b03      	ldr	r3, [sp, #12]
 8025004:	2b00      	cmp	r3, #0
 8025006:	d053      	beq.n	80250b0 <__hexnan+0x14c>
 8025008:	42b4      	cmp	r4, r6
 802500a:	d206      	bcs.n	802501a <__hexnan+0xb6>
 802500c:	2d07      	cmp	r5, #7
 802500e:	dc04      	bgt.n	802501a <__hexnan+0xb6>
 8025010:	002a      	movs	r2, r5
 8025012:	0031      	movs	r1, r6
 8025014:	0020      	movs	r0, r4
 8025016:	f7ff ff7f 	bl	8024f18 <L_shift>
 802501a:	9b01      	ldr	r3, [sp, #4]
 802501c:	429c      	cmp	r4, r3
 802501e:	d936      	bls.n	802508e <__hexnan+0x12a>
 8025020:	001a      	movs	r2, r3
 8025022:	0023      	movs	r3, r4
 8025024:	cb02      	ldmia	r3!, {r1}
 8025026:	c202      	stmia	r2!, {r1}
 8025028:	429f      	cmp	r7, r3
 802502a:	d2fb      	bcs.n	8025024 <__hexnan+0xc0>
 802502c:	9b02      	ldr	r3, [sp, #8]
 802502e:	1c61      	adds	r1, r4, #1
 8025030:	1eda      	subs	r2, r3, #3
 8025032:	2304      	movs	r3, #4
 8025034:	4291      	cmp	r1, r2
 8025036:	d805      	bhi.n	8025044 <__hexnan+0xe0>
 8025038:	9b02      	ldr	r3, [sp, #8]
 802503a:	3b04      	subs	r3, #4
 802503c:	1b1b      	subs	r3, r3, r4
 802503e:	089b      	lsrs	r3, r3, #2
 8025040:	3301      	adds	r3, #1
 8025042:	009b      	lsls	r3, r3, #2
 8025044:	9a01      	ldr	r2, [sp, #4]
 8025046:	18d3      	adds	r3, r2, r3
 8025048:	2200      	movs	r2, #0
 802504a:	c304      	stmia	r3!, {r2}
 802504c:	429f      	cmp	r7, r3
 802504e:	d2fc      	bcs.n	802504a <__hexnan+0xe6>
 8025050:	683b      	ldr	r3, [r7, #0]
 8025052:	2b00      	cmp	r3, #0
 8025054:	d104      	bne.n	8025060 <__hexnan+0xfc>
 8025056:	9b01      	ldr	r3, [sp, #4]
 8025058:	429f      	cmp	r7, r3
 802505a:	d127      	bne.n	80250ac <__hexnan+0x148>
 802505c:	2301      	movs	r3, #1
 802505e:	603b      	str	r3, [r7, #0]
 8025060:	2005      	movs	r0, #5
 8025062:	b00b      	add	sp, #44	@ 0x2c
 8025064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025066:	9b03      	ldr	r3, [sp, #12]
 8025068:	3501      	adds	r5, #1
 802506a:	3301      	adds	r3, #1
 802506c:	9303      	str	r3, [sp, #12]
 802506e:	2d08      	cmp	r5, #8
 8025070:	dd06      	ble.n	8025080 <__hexnan+0x11c>
 8025072:	9b01      	ldr	r3, [sp, #4]
 8025074:	429c      	cmp	r4, r3
 8025076:	d9ba      	bls.n	8024fee <__hexnan+0x8a>
 8025078:	2300      	movs	r3, #0
 802507a:	2501      	movs	r5, #1
 802507c:	3c04      	subs	r4, #4
 802507e:	6023      	str	r3, [r4, #0]
 8025080:	220f      	movs	r2, #15
 8025082:	6823      	ldr	r3, [r4, #0]
 8025084:	4010      	ands	r0, r2
 8025086:	011b      	lsls	r3, r3, #4
 8025088:	4303      	orrs	r3, r0
 802508a:	6023      	str	r3, [r4, #0]
 802508c:	e7af      	b.n	8024fee <__hexnan+0x8a>
 802508e:	9b06      	ldr	r3, [sp, #24]
 8025090:	2b00      	cmp	r3, #0
 8025092:	d0dd      	beq.n	8025050 <__hexnan+0xec>
 8025094:	2320      	movs	r3, #32
 8025096:	9a06      	ldr	r2, [sp, #24]
 8025098:	9902      	ldr	r1, [sp, #8]
 802509a:	1a9b      	subs	r3, r3, r2
 802509c:	2201      	movs	r2, #1
 802509e:	4252      	negs	r2, r2
 80250a0:	40da      	lsrs	r2, r3
 80250a2:	3904      	subs	r1, #4
 80250a4:	680b      	ldr	r3, [r1, #0]
 80250a6:	4013      	ands	r3, r2
 80250a8:	600b      	str	r3, [r1, #0]
 80250aa:	e7d1      	b.n	8025050 <__hexnan+0xec>
 80250ac:	3f04      	subs	r7, #4
 80250ae:	e7cf      	b.n	8025050 <__hexnan+0xec>
 80250b0:	2004      	movs	r0, #4
 80250b2:	e7d6      	b.n	8025062 <__hexnan+0xfe>

080250b4 <malloc>:
 80250b4:	b510      	push	{r4, lr}
 80250b6:	4b03      	ldr	r3, [pc, #12]	@ (80250c4 <malloc+0x10>)
 80250b8:	0001      	movs	r1, r0
 80250ba:	6818      	ldr	r0, [r3, #0]
 80250bc:	f000 f826 	bl	802510c <_malloc_r>
 80250c0:	bd10      	pop	{r4, pc}
 80250c2:	46c0      	nop			@ (mov r8, r8)
 80250c4:	200003e0 	.word	0x200003e0

080250c8 <sbrk_aligned>:
 80250c8:	b570      	push	{r4, r5, r6, lr}
 80250ca:	4e0f      	ldr	r6, [pc, #60]	@ (8025108 <sbrk_aligned+0x40>)
 80250cc:	000d      	movs	r5, r1
 80250ce:	6831      	ldr	r1, [r6, #0]
 80250d0:	0004      	movs	r4, r0
 80250d2:	2900      	cmp	r1, #0
 80250d4:	d102      	bne.n	80250dc <sbrk_aligned+0x14>
 80250d6:	f001 f989 	bl	80263ec <_sbrk_r>
 80250da:	6030      	str	r0, [r6, #0]
 80250dc:	0029      	movs	r1, r5
 80250de:	0020      	movs	r0, r4
 80250e0:	f001 f984 	bl	80263ec <_sbrk_r>
 80250e4:	1c43      	adds	r3, r0, #1
 80250e6:	d103      	bne.n	80250f0 <sbrk_aligned+0x28>
 80250e8:	2501      	movs	r5, #1
 80250ea:	426d      	negs	r5, r5
 80250ec:	0028      	movs	r0, r5
 80250ee:	bd70      	pop	{r4, r5, r6, pc}
 80250f0:	2303      	movs	r3, #3
 80250f2:	1cc5      	adds	r5, r0, #3
 80250f4:	439d      	bics	r5, r3
 80250f6:	42a8      	cmp	r0, r5
 80250f8:	d0f8      	beq.n	80250ec <sbrk_aligned+0x24>
 80250fa:	1a29      	subs	r1, r5, r0
 80250fc:	0020      	movs	r0, r4
 80250fe:	f001 f975 	bl	80263ec <_sbrk_r>
 8025102:	3001      	adds	r0, #1
 8025104:	d1f2      	bne.n	80250ec <sbrk_aligned+0x24>
 8025106:	e7ef      	b.n	80250e8 <sbrk_aligned+0x20>
 8025108:	200035e8 	.word	0x200035e8

0802510c <_malloc_r>:
 802510c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802510e:	2203      	movs	r2, #3
 8025110:	1ccb      	adds	r3, r1, #3
 8025112:	4393      	bics	r3, r2
 8025114:	3308      	adds	r3, #8
 8025116:	0005      	movs	r5, r0
 8025118:	001f      	movs	r7, r3
 802511a:	2b0c      	cmp	r3, #12
 802511c:	d234      	bcs.n	8025188 <_malloc_r+0x7c>
 802511e:	270c      	movs	r7, #12
 8025120:	42b9      	cmp	r1, r7
 8025122:	d833      	bhi.n	802518c <_malloc_r+0x80>
 8025124:	0028      	movs	r0, r5
 8025126:	f000 f883 	bl	8025230 <__malloc_lock>
 802512a:	4e37      	ldr	r6, [pc, #220]	@ (8025208 <_malloc_r+0xfc>)
 802512c:	6833      	ldr	r3, [r6, #0]
 802512e:	001c      	movs	r4, r3
 8025130:	2c00      	cmp	r4, #0
 8025132:	d12f      	bne.n	8025194 <_malloc_r+0x88>
 8025134:	0039      	movs	r1, r7
 8025136:	0028      	movs	r0, r5
 8025138:	f7ff ffc6 	bl	80250c8 <sbrk_aligned>
 802513c:	0004      	movs	r4, r0
 802513e:	1c43      	adds	r3, r0, #1
 8025140:	d15f      	bne.n	8025202 <_malloc_r+0xf6>
 8025142:	6834      	ldr	r4, [r6, #0]
 8025144:	9400      	str	r4, [sp, #0]
 8025146:	9b00      	ldr	r3, [sp, #0]
 8025148:	2b00      	cmp	r3, #0
 802514a:	d14a      	bne.n	80251e2 <_malloc_r+0xd6>
 802514c:	2c00      	cmp	r4, #0
 802514e:	d052      	beq.n	80251f6 <_malloc_r+0xea>
 8025150:	6823      	ldr	r3, [r4, #0]
 8025152:	0028      	movs	r0, r5
 8025154:	18e3      	adds	r3, r4, r3
 8025156:	9900      	ldr	r1, [sp, #0]
 8025158:	9301      	str	r3, [sp, #4]
 802515a:	f001 f947 	bl	80263ec <_sbrk_r>
 802515e:	9b01      	ldr	r3, [sp, #4]
 8025160:	4283      	cmp	r3, r0
 8025162:	d148      	bne.n	80251f6 <_malloc_r+0xea>
 8025164:	6823      	ldr	r3, [r4, #0]
 8025166:	0028      	movs	r0, r5
 8025168:	1aff      	subs	r7, r7, r3
 802516a:	0039      	movs	r1, r7
 802516c:	f7ff ffac 	bl	80250c8 <sbrk_aligned>
 8025170:	3001      	adds	r0, #1
 8025172:	d040      	beq.n	80251f6 <_malloc_r+0xea>
 8025174:	6823      	ldr	r3, [r4, #0]
 8025176:	19db      	adds	r3, r3, r7
 8025178:	6023      	str	r3, [r4, #0]
 802517a:	6833      	ldr	r3, [r6, #0]
 802517c:	685a      	ldr	r2, [r3, #4]
 802517e:	2a00      	cmp	r2, #0
 8025180:	d133      	bne.n	80251ea <_malloc_r+0xde>
 8025182:	9b00      	ldr	r3, [sp, #0]
 8025184:	6033      	str	r3, [r6, #0]
 8025186:	e019      	b.n	80251bc <_malloc_r+0xb0>
 8025188:	2b00      	cmp	r3, #0
 802518a:	dac9      	bge.n	8025120 <_malloc_r+0x14>
 802518c:	230c      	movs	r3, #12
 802518e:	602b      	str	r3, [r5, #0]
 8025190:	2000      	movs	r0, #0
 8025192:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025194:	6821      	ldr	r1, [r4, #0]
 8025196:	1bc9      	subs	r1, r1, r7
 8025198:	d420      	bmi.n	80251dc <_malloc_r+0xd0>
 802519a:	290b      	cmp	r1, #11
 802519c:	d90a      	bls.n	80251b4 <_malloc_r+0xa8>
 802519e:	19e2      	adds	r2, r4, r7
 80251a0:	6027      	str	r7, [r4, #0]
 80251a2:	42a3      	cmp	r3, r4
 80251a4:	d104      	bne.n	80251b0 <_malloc_r+0xa4>
 80251a6:	6032      	str	r2, [r6, #0]
 80251a8:	6863      	ldr	r3, [r4, #4]
 80251aa:	6011      	str	r1, [r2, #0]
 80251ac:	6053      	str	r3, [r2, #4]
 80251ae:	e005      	b.n	80251bc <_malloc_r+0xb0>
 80251b0:	605a      	str	r2, [r3, #4]
 80251b2:	e7f9      	b.n	80251a8 <_malloc_r+0x9c>
 80251b4:	6862      	ldr	r2, [r4, #4]
 80251b6:	42a3      	cmp	r3, r4
 80251b8:	d10e      	bne.n	80251d8 <_malloc_r+0xcc>
 80251ba:	6032      	str	r2, [r6, #0]
 80251bc:	0028      	movs	r0, r5
 80251be:	f000 f83f 	bl	8025240 <__malloc_unlock>
 80251c2:	0020      	movs	r0, r4
 80251c4:	2207      	movs	r2, #7
 80251c6:	300b      	adds	r0, #11
 80251c8:	1d23      	adds	r3, r4, #4
 80251ca:	4390      	bics	r0, r2
 80251cc:	1ac2      	subs	r2, r0, r3
 80251ce:	4298      	cmp	r0, r3
 80251d0:	d0df      	beq.n	8025192 <_malloc_r+0x86>
 80251d2:	1a1b      	subs	r3, r3, r0
 80251d4:	50a3      	str	r3, [r4, r2]
 80251d6:	e7dc      	b.n	8025192 <_malloc_r+0x86>
 80251d8:	605a      	str	r2, [r3, #4]
 80251da:	e7ef      	b.n	80251bc <_malloc_r+0xb0>
 80251dc:	0023      	movs	r3, r4
 80251de:	6864      	ldr	r4, [r4, #4]
 80251e0:	e7a6      	b.n	8025130 <_malloc_r+0x24>
 80251e2:	9c00      	ldr	r4, [sp, #0]
 80251e4:	6863      	ldr	r3, [r4, #4]
 80251e6:	9300      	str	r3, [sp, #0]
 80251e8:	e7ad      	b.n	8025146 <_malloc_r+0x3a>
 80251ea:	001a      	movs	r2, r3
 80251ec:	685b      	ldr	r3, [r3, #4]
 80251ee:	42a3      	cmp	r3, r4
 80251f0:	d1fb      	bne.n	80251ea <_malloc_r+0xde>
 80251f2:	2300      	movs	r3, #0
 80251f4:	e7da      	b.n	80251ac <_malloc_r+0xa0>
 80251f6:	230c      	movs	r3, #12
 80251f8:	0028      	movs	r0, r5
 80251fa:	602b      	str	r3, [r5, #0]
 80251fc:	f000 f820 	bl	8025240 <__malloc_unlock>
 8025200:	e7c6      	b.n	8025190 <_malloc_r+0x84>
 8025202:	6007      	str	r7, [r0, #0]
 8025204:	e7da      	b.n	80251bc <_malloc_r+0xb0>
 8025206:	46c0      	nop			@ (mov r8, r8)
 8025208:	200035ec 	.word	0x200035ec

0802520c <__ascii_mbtowc>:
 802520c:	b082      	sub	sp, #8
 802520e:	2900      	cmp	r1, #0
 8025210:	d100      	bne.n	8025214 <__ascii_mbtowc+0x8>
 8025212:	a901      	add	r1, sp, #4
 8025214:	1e10      	subs	r0, r2, #0
 8025216:	d006      	beq.n	8025226 <__ascii_mbtowc+0x1a>
 8025218:	2b00      	cmp	r3, #0
 802521a:	d006      	beq.n	802522a <__ascii_mbtowc+0x1e>
 802521c:	7813      	ldrb	r3, [r2, #0]
 802521e:	600b      	str	r3, [r1, #0]
 8025220:	7810      	ldrb	r0, [r2, #0]
 8025222:	1e43      	subs	r3, r0, #1
 8025224:	4198      	sbcs	r0, r3
 8025226:	b002      	add	sp, #8
 8025228:	4770      	bx	lr
 802522a:	2002      	movs	r0, #2
 802522c:	4240      	negs	r0, r0
 802522e:	e7fa      	b.n	8025226 <__ascii_mbtowc+0x1a>

08025230 <__malloc_lock>:
 8025230:	b510      	push	{r4, lr}
 8025232:	4802      	ldr	r0, [pc, #8]	@ (802523c <__malloc_lock+0xc>)
 8025234:	f7fe fcfb 	bl	8023c2e <__retarget_lock_acquire_recursive>
 8025238:	bd10      	pop	{r4, pc}
 802523a:	46c0      	nop			@ (mov r8, r8)
 802523c:	200035e4 	.word	0x200035e4

08025240 <__malloc_unlock>:
 8025240:	b510      	push	{r4, lr}
 8025242:	4802      	ldr	r0, [pc, #8]	@ (802524c <__malloc_unlock+0xc>)
 8025244:	f7fe fcf4 	bl	8023c30 <__retarget_lock_release_recursive>
 8025248:	bd10      	pop	{r4, pc}
 802524a:	46c0      	nop			@ (mov r8, r8)
 802524c:	200035e4 	.word	0x200035e4

08025250 <_Balloc>:
 8025250:	b570      	push	{r4, r5, r6, lr}
 8025252:	69c5      	ldr	r5, [r0, #28]
 8025254:	0006      	movs	r6, r0
 8025256:	000c      	movs	r4, r1
 8025258:	2d00      	cmp	r5, #0
 802525a:	d10e      	bne.n	802527a <_Balloc+0x2a>
 802525c:	2010      	movs	r0, #16
 802525e:	f7ff ff29 	bl	80250b4 <malloc>
 8025262:	1e02      	subs	r2, r0, #0
 8025264:	61f0      	str	r0, [r6, #28]
 8025266:	d104      	bne.n	8025272 <_Balloc+0x22>
 8025268:	216b      	movs	r1, #107	@ 0x6b
 802526a:	4b19      	ldr	r3, [pc, #100]	@ (80252d0 <_Balloc+0x80>)
 802526c:	4819      	ldr	r0, [pc, #100]	@ (80252d4 <_Balloc+0x84>)
 802526e:	f001 f8cf 	bl	8026410 <__assert_func>
 8025272:	6045      	str	r5, [r0, #4]
 8025274:	6085      	str	r5, [r0, #8]
 8025276:	6005      	str	r5, [r0, #0]
 8025278:	60c5      	str	r5, [r0, #12]
 802527a:	69f5      	ldr	r5, [r6, #28]
 802527c:	68eb      	ldr	r3, [r5, #12]
 802527e:	2b00      	cmp	r3, #0
 8025280:	d013      	beq.n	80252aa <_Balloc+0x5a>
 8025282:	69f3      	ldr	r3, [r6, #28]
 8025284:	00a2      	lsls	r2, r4, #2
 8025286:	68db      	ldr	r3, [r3, #12]
 8025288:	189b      	adds	r3, r3, r2
 802528a:	6818      	ldr	r0, [r3, #0]
 802528c:	2800      	cmp	r0, #0
 802528e:	d118      	bne.n	80252c2 <_Balloc+0x72>
 8025290:	2101      	movs	r1, #1
 8025292:	000d      	movs	r5, r1
 8025294:	40a5      	lsls	r5, r4
 8025296:	1d6a      	adds	r2, r5, #5
 8025298:	0030      	movs	r0, r6
 802529a:	0092      	lsls	r2, r2, #2
 802529c:	f001 f8d6 	bl	802644c <_calloc_r>
 80252a0:	2800      	cmp	r0, #0
 80252a2:	d00c      	beq.n	80252be <_Balloc+0x6e>
 80252a4:	6044      	str	r4, [r0, #4]
 80252a6:	6085      	str	r5, [r0, #8]
 80252a8:	e00d      	b.n	80252c6 <_Balloc+0x76>
 80252aa:	2221      	movs	r2, #33	@ 0x21
 80252ac:	2104      	movs	r1, #4
 80252ae:	0030      	movs	r0, r6
 80252b0:	f001 f8cc 	bl	802644c <_calloc_r>
 80252b4:	69f3      	ldr	r3, [r6, #28]
 80252b6:	60e8      	str	r0, [r5, #12]
 80252b8:	68db      	ldr	r3, [r3, #12]
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d1e1      	bne.n	8025282 <_Balloc+0x32>
 80252be:	2000      	movs	r0, #0
 80252c0:	bd70      	pop	{r4, r5, r6, pc}
 80252c2:	6802      	ldr	r2, [r0, #0]
 80252c4:	601a      	str	r2, [r3, #0]
 80252c6:	2300      	movs	r3, #0
 80252c8:	6103      	str	r3, [r0, #16]
 80252ca:	60c3      	str	r3, [r0, #12]
 80252cc:	e7f8      	b.n	80252c0 <_Balloc+0x70>
 80252ce:	46c0      	nop			@ (mov r8, r8)
 80252d0:	0802b8aa 	.word	0x0802b8aa
 80252d4:	0802b98a 	.word	0x0802b98a

080252d8 <_Bfree>:
 80252d8:	b570      	push	{r4, r5, r6, lr}
 80252da:	69c6      	ldr	r6, [r0, #28]
 80252dc:	0005      	movs	r5, r0
 80252de:	000c      	movs	r4, r1
 80252e0:	2e00      	cmp	r6, #0
 80252e2:	d10e      	bne.n	8025302 <_Bfree+0x2a>
 80252e4:	2010      	movs	r0, #16
 80252e6:	f7ff fee5 	bl	80250b4 <malloc>
 80252ea:	1e02      	subs	r2, r0, #0
 80252ec:	61e8      	str	r0, [r5, #28]
 80252ee:	d104      	bne.n	80252fa <_Bfree+0x22>
 80252f0:	218f      	movs	r1, #143	@ 0x8f
 80252f2:	4b09      	ldr	r3, [pc, #36]	@ (8025318 <_Bfree+0x40>)
 80252f4:	4809      	ldr	r0, [pc, #36]	@ (802531c <_Bfree+0x44>)
 80252f6:	f001 f88b 	bl	8026410 <__assert_func>
 80252fa:	6046      	str	r6, [r0, #4]
 80252fc:	6086      	str	r6, [r0, #8]
 80252fe:	6006      	str	r6, [r0, #0]
 8025300:	60c6      	str	r6, [r0, #12]
 8025302:	2c00      	cmp	r4, #0
 8025304:	d007      	beq.n	8025316 <_Bfree+0x3e>
 8025306:	69eb      	ldr	r3, [r5, #28]
 8025308:	6862      	ldr	r2, [r4, #4]
 802530a:	68db      	ldr	r3, [r3, #12]
 802530c:	0092      	lsls	r2, r2, #2
 802530e:	189b      	adds	r3, r3, r2
 8025310:	681a      	ldr	r2, [r3, #0]
 8025312:	6022      	str	r2, [r4, #0]
 8025314:	601c      	str	r4, [r3, #0]
 8025316:	bd70      	pop	{r4, r5, r6, pc}
 8025318:	0802b8aa 	.word	0x0802b8aa
 802531c:	0802b98a 	.word	0x0802b98a

08025320 <__multadd>:
 8025320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025322:	000f      	movs	r7, r1
 8025324:	9001      	str	r0, [sp, #4]
 8025326:	000c      	movs	r4, r1
 8025328:	001e      	movs	r6, r3
 802532a:	2000      	movs	r0, #0
 802532c:	690d      	ldr	r5, [r1, #16]
 802532e:	3714      	adds	r7, #20
 8025330:	683b      	ldr	r3, [r7, #0]
 8025332:	3001      	adds	r0, #1
 8025334:	b299      	uxth	r1, r3
 8025336:	4351      	muls	r1, r2
 8025338:	0c1b      	lsrs	r3, r3, #16
 802533a:	4353      	muls	r3, r2
 802533c:	1989      	adds	r1, r1, r6
 802533e:	0c0e      	lsrs	r6, r1, #16
 8025340:	199b      	adds	r3, r3, r6
 8025342:	0c1e      	lsrs	r6, r3, #16
 8025344:	b289      	uxth	r1, r1
 8025346:	041b      	lsls	r3, r3, #16
 8025348:	185b      	adds	r3, r3, r1
 802534a:	c708      	stmia	r7!, {r3}
 802534c:	4285      	cmp	r5, r0
 802534e:	dcef      	bgt.n	8025330 <__multadd+0x10>
 8025350:	2e00      	cmp	r6, #0
 8025352:	d022      	beq.n	802539a <__multadd+0x7a>
 8025354:	68a3      	ldr	r3, [r4, #8]
 8025356:	42ab      	cmp	r3, r5
 8025358:	dc19      	bgt.n	802538e <__multadd+0x6e>
 802535a:	6861      	ldr	r1, [r4, #4]
 802535c:	9801      	ldr	r0, [sp, #4]
 802535e:	3101      	adds	r1, #1
 8025360:	f7ff ff76 	bl	8025250 <_Balloc>
 8025364:	1e07      	subs	r7, r0, #0
 8025366:	d105      	bne.n	8025374 <__multadd+0x54>
 8025368:	003a      	movs	r2, r7
 802536a:	21ba      	movs	r1, #186	@ 0xba
 802536c:	4b0c      	ldr	r3, [pc, #48]	@ (80253a0 <__multadd+0x80>)
 802536e:	480d      	ldr	r0, [pc, #52]	@ (80253a4 <__multadd+0x84>)
 8025370:	f001 f84e 	bl	8026410 <__assert_func>
 8025374:	0021      	movs	r1, r4
 8025376:	6922      	ldr	r2, [r4, #16]
 8025378:	310c      	adds	r1, #12
 802537a:	3202      	adds	r2, #2
 802537c:	0092      	lsls	r2, r2, #2
 802537e:	300c      	adds	r0, #12
 8025380:	f7fe fc62 	bl	8023c48 <memcpy>
 8025384:	0021      	movs	r1, r4
 8025386:	9801      	ldr	r0, [sp, #4]
 8025388:	f7ff ffa6 	bl	80252d8 <_Bfree>
 802538c:	003c      	movs	r4, r7
 802538e:	1d2b      	adds	r3, r5, #4
 8025390:	009b      	lsls	r3, r3, #2
 8025392:	18e3      	adds	r3, r4, r3
 8025394:	3501      	adds	r5, #1
 8025396:	605e      	str	r6, [r3, #4]
 8025398:	6125      	str	r5, [r4, #16]
 802539a:	0020      	movs	r0, r4
 802539c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802539e:	46c0      	nop			@ (mov r8, r8)
 80253a0:	0802b919 	.word	0x0802b919
 80253a4:	0802b98a 	.word	0x0802b98a

080253a8 <__s2b>:
 80253a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80253aa:	0007      	movs	r7, r0
 80253ac:	0018      	movs	r0, r3
 80253ae:	000c      	movs	r4, r1
 80253b0:	3008      	adds	r0, #8
 80253b2:	2109      	movs	r1, #9
 80253b4:	9301      	str	r3, [sp, #4]
 80253b6:	0015      	movs	r5, r2
 80253b8:	f7da ff7e 	bl	80002b8 <__divsi3>
 80253bc:	2301      	movs	r3, #1
 80253be:	2100      	movs	r1, #0
 80253c0:	4283      	cmp	r3, r0
 80253c2:	db0a      	blt.n	80253da <__s2b+0x32>
 80253c4:	0038      	movs	r0, r7
 80253c6:	f7ff ff43 	bl	8025250 <_Balloc>
 80253ca:	1e01      	subs	r1, r0, #0
 80253cc:	d108      	bne.n	80253e0 <__s2b+0x38>
 80253ce:	000a      	movs	r2, r1
 80253d0:	4b19      	ldr	r3, [pc, #100]	@ (8025438 <__s2b+0x90>)
 80253d2:	481a      	ldr	r0, [pc, #104]	@ (802543c <__s2b+0x94>)
 80253d4:	31d3      	adds	r1, #211	@ 0xd3
 80253d6:	f001 f81b 	bl	8026410 <__assert_func>
 80253da:	005b      	lsls	r3, r3, #1
 80253dc:	3101      	adds	r1, #1
 80253de:	e7ef      	b.n	80253c0 <__s2b+0x18>
 80253e0:	9b08      	ldr	r3, [sp, #32]
 80253e2:	6143      	str	r3, [r0, #20]
 80253e4:	2301      	movs	r3, #1
 80253e6:	6103      	str	r3, [r0, #16]
 80253e8:	2d09      	cmp	r5, #9
 80253ea:	dd18      	ble.n	802541e <__s2b+0x76>
 80253ec:	0023      	movs	r3, r4
 80253ee:	3309      	adds	r3, #9
 80253f0:	001e      	movs	r6, r3
 80253f2:	9300      	str	r3, [sp, #0]
 80253f4:	1964      	adds	r4, r4, r5
 80253f6:	7833      	ldrb	r3, [r6, #0]
 80253f8:	220a      	movs	r2, #10
 80253fa:	0038      	movs	r0, r7
 80253fc:	3b30      	subs	r3, #48	@ 0x30
 80253fe:	f7ff ff8f 	bl	8025320 <__multadd>
 8025402:	3601      	adds	r6, #1
 8025404:	0001      	movs	r1, r0
 8025406:	42a6      	cmp	r6, r4
 8025408:	d1f5      	bne.n	80253f6 <__s2b+0x4e>
 802540a:	002c      	movs	r4, r5
 802540c:	9b00      	ldr	r3, [sp, #0]
 802540e:	3c08      	subs	r4, #8
 8025410:	191c      	adds	r4, r3, r4
 8025412:	002e      	movs	r6, r5
 8025414:	9b01      	ldr	r3, [sp, #4]
 8025416:	429e      	cmp	r6, r3
 8025418:	db04      	blt.n	8025424 <__s2b+0x7c>
 802541a:	0008      	movs	r0, r1
 802541c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802541e:	2509      	movs	r5, #9
 8025420:	340a      	adds	r4, #10
 8025422:	e7f6      	b.n	8025412 <__s2b+0x6a>
 8025424:	1b63      	subs	r3, r4, r5
 8025426:	5d9b      	ldrb	r3, [r3, r6]
 8025428:	220a      	movs	r2, #10
 802542a:	0038      	movs	r0, r7
 802542c:	3b30      	subs	r3, #48	@ 0x30
 802542e:	f7ff ff77 	bl	8025320 <__multadd>
 8025432:	3601      	adds	r6, #1
 8025434:	0001      	movs	r1, r0
 8025436:	e7ed      	b.n	8025414 <__s2b+0x6c>
 8025438:	0802b919 	.word	0x0802b919
 802543c:	0802b98a 	.word	0x0802b98a

08025440 <__hi0bits>:
 8025440:	2280      	movs	r2, #128	@ 0x80
 8025442:	0003      	movs	r3, r0
 8025444:	0252      	lsls	r2, r2, #9
 8025446:	2000      	movs	r0, #0
 8025448:	4293      	cmp	r3, r2
 802544a:	d201      	bcs.n	8025450 <__hi0bits+0x10>
 802544c:	041b      	lsls	r3, r3, #16
 802544e:	3010      	adds	r0, #16
 8025450:	2280      	movs	r2, #128	@ 0x80
 8025452:	0452      	lsls	r2, r2, #17
 8025454:	4293      	cmp	r3, r2
 8025456:	d201      	bcs.n	802545c <__hi0bits+0x1c>
 8025458:	3008      	adds	r0, #8
 802545a:	021b      	lsls	r3, r3, #8
 802545c:	2280      	movs	r2, #128	@ 0x80
 802545e:	0552      	lsls	r2, r2, #21
 8025460:	4293      	cmp	r3, r2
 8025462:	d201      	bcs.n	8025468 <__hi0bits+0x28>
 8025464:	3004      	adds	r0, #4
 8025466:	011b      	lsls	r3, r3, #4
 8025468:	2280      	movs	r2, #128	@ 0x80
 802546a:	05d2      	lsls	r2, r2, #23
 802546c:	4293      	cmp	r3, r2
 802546e:	d201      	bcs.n	8025474 <__hi0bits+0x34>
 8025470:	3002      	adds	r0, #2
 8025472:	009b      	lsls	r3, r3, #2
 8025474:	2b00      	cmp	r3, #0
 8025476:	db03      	blt.n	8025480 <__hi0bits+0x40>
 8025478:	3001      	adds	r0, #1
 802547a:	4213      	tst	r3, r2
 802547c:	d100      	bne.n	8025480 <__hi0bits+0x40>
 802547e:	2020      	movs	r0, #32
 8025480:	4770      	bx	lr

08025482 <__lo0bits>:
 8025482:	6803      	ldr	r3, [r0, #0]
 8025484:	0001      	movs	r1, r0
 8025486:	2207      	movs	r2, #7
 8025488:	0018      	movs	r0, r3
 802548a:	4010      	ands	r0, r2
 802548c:	4213      	tst	r3, r2
 802548e:	d00d      	beq.n	80254ac <__lo0bits+0x2a>
 8025490:	3a06      	subs	r2, #6
 8025492:	2000      	movs	r0, #0
 8025494:	4213      	tst	r3, r2
 8025496:	d105      	bne.n	80254a4 <__lo0bits+0x22>
 8025498:	3002      	adds	r0, #2
 802549a:	4203      	tst	r3, r0
 802549c:	d003      	beq.n	80254a6 <__lo0bits+0x24>
 802549e:	40d3      	lsrs	r3, r2
 80254a0:	0010      	movs	r0, r2
 80254a2:	600b      	str	r3, [r1, #0]
 80254a4:	4770      	bx	lr
 80254a6:	089b      	lsrs	r3, r3, #2
 80254a8:	600b      	str	r3, [r1, #0]
 80254aa:	e7fb      	b.n	80254a4 <__lo0bits+0x22>
 80254ac:	b29a      	uxth	r2, r3
 80254ae:	2a00      	cmp	r2, #0
 80254b0:	d101      	bne.n	80254b6 <__lo0bits+0x34>
 80254b2:	2010      	movs	r0, #16
 80254b4:	0c1b      	lsrs	r3, r3, #16
 80254b6:	b2da      	uxtb	r2, r3
 80254b8:	2a00      	cmp	r2, #0
 80254ba:	d101      	bne.n	80254c0 <__lo0bits+0x3e>
 80254bc:	3008      	adds	r0, #8
 80254be:	0a1b      	lsrs	r3, r3, #8
 80254c0:	071a      	lsls	r2, r3, #28
 80254c2:	d101      	bne.n	80254c8 <__lo0bits+0x46>
 80254c4:	3004      	adds	r0, #4
 80254c6:	091b      	lsrs	r3, r3, #4
 80254c8:	079a      	lsls	r2, r3, #30
 80254ca:	d101      	bne.n	80254d0 <__lo0bits+0x4e>
 80254cc:	3002      	adds	r0, #2
 80254ce:	089b      	lsrs	r3, r3, #2
 80254d0:	07da      	lsls	r2, r3, #31
 80254d2:	d4e9      	bmi.n	80254a8 <__lo0bits+0x26>
 80254d4:	3001      	adds	r0, #1
 80254d6:	085b      	lsrs	r3, r3, #1
 80254d8:	d1e6      	bne.n	80254a8 <__lo0bits+0x26>
 80254da:	2020      	movs	r0, #32
 80254dc:	e7e2      	b.n	80254a4 <__lo0bits+0x22>
	...

080254e0 <__i2b>:
 80254e0:	b510      	push	{r4, lr}
 80254e2:	000c      	movs	r4, r1
 80254e4:	2101      	movs	r1, #1
 80254e6:	f7ff feb3 	bl	8025250 <_Balloc>
 80254ea:	2800      	cmp	r0, #0
 80254ec:	d107      	bne.n	80254fe <__i2b+0x1e>
 80254ee:	2146      	movs	r1, #70	@ 0x46
 80254f0:	4c05      	ldr	r4, [pc, #20]	@ (8025508 <__i2b+0x28>)
 80254f2:	0002      	movs	r2, r0
 80254f4:	4b05      	ldr	r3, [pc, #20]	@ (802550c <__i2b+0x2c>)
 80254f6:	0020      	movs	r0, r4
 80254f8:	31ff      	adds	r1, #255	@ 0xff
 80254fa:	f000 ff89 	bl	8026410 <__assert_func>
 80254fe:	2301      	movs	r3, #1
 8025500:	6144      	str	r4, [r0, #20]
 8025502:	6103      	str	r3, [r0, #16]
 8025504:	bd10      	pop	{r4, pc}
 8025506:	46c0      	nop			@ (mov r8, r8)
 8025508:	0802b98a 	.word	0x0802b98a
 802550c:	0802b919 	.word	0x0802b919

08025510 <__multiply>:
 8025510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025512:	0014      	movs	r4, r2
 8025514:	690a      	ldr	r2, [r1, #16]
 8025516:	6923      	ldr	r3, [r4, #16]
 8025518:	000d      	movs	r5, r1
 802551a:	b08b      	sub	sp, #44	@ 0x2c
 802551c:	429a      	cmp	r2, r3
 802551e:	db02      	blt.n	8025526 <__multiply+0x16>
 8025520:	0023      	movs	r3, r4
 8025522:	000c      	movs	r4, r1
 8025524:	001d      	movs	r5, r3
 8025526:	6927      	ldr	r7, [r4, #16]
 8025528:	692e      	ldr	r6, [r5, #16]
 802552a:	6861      	ldr	r1, [r4, #4]
 802552c:	19bb      	adds	r3, r7, r6
 802552e:	9303      	str	r3, [sp, #12]
 8025530:	68a3      	ldr	r3, [r4, #8]
 8025532:	19ba      	adds	r2, r7, r6
 8025534:	4293      	cmp	r3, r2
 8025536:	da00      	bge.n	802553a <__multiply+0x2a>
 8025538:	3101      	adds	r1, #1
 802553a:	f7ff fe89 	bl	8025250 <_Balloc>
 802553e:	9002      	str	r0, [sp, #8]
 8025540:	2800      	cmp	r0, #0
 8025542:	d106      	bne.n	8025552 <__multiply+0x42>
 8025544:	21b1      	movs	r1, #177	@ 0xb1
 8025546:	4b49      	ldr	r3, [pc, #292]	@ (802566c <__multiply+0x15c>)
 8025548:	4849      	ldr	r0, [pc, #292]	@ (8025670 <__multiply+0x160>)
 802554a:	9a02      	ldr	r2, [sp, #8]
 802554c:	0049      	lsls	r1, r1, #1
 802554e:	f000 ff5f 	bl	8026410 <__assert_func>
 8025552:	9b02      	ldr	r3, [sp, #8]
 8025554:	2200      	movs	r2, #0
 8025556:	3314      	adds	r3, #20
 8025558:	469c      	mov	ip, r3
 802555a:	19bb      	adds	r3, r7, r6
 802555c:	009b      	lsls	r3, r3, #2
 802555e:	4463      	add	r3, ip
 8025560:	9304      	str	r3, [sp, #16]
 8025562:	4663      	mov	r3, ip
 8025564:	9904      	ldr	r1, [sp, #16]
 8025566:	428b      	cmp	r3, r1
 8025568:	d32a      	bcc.n	80255c0 <__multiply+0xb0>
 802556a:	0023      	movs	r3, r4
 802556c:	00bf      	lsls	r7, r7, #2
 802556e:	3314      	adds	r3, #20
 8025570:	3514      	adds	r5, #20
 8025572:	9308      	str	r3, [sp, #32]
 8025574:	00b6      	lsls	r6, r6, #2
 8025576:	19db      	adds	r3, r3, r7
 8025578:	9305      	str	r3, [sp, #20]
 802557a:	19ab      	adds	r3, r5, r6
 802557c:	9309      	str	r3, [sp, #36]	@ 0x24
 802557e:	2304      	movs	r3, #4
 8025580:	9306      	str	r3, [sp, #24]
 8025582:	0023      	movs	r3, r4
 8025584:	9a05      	ldr	r2, [sp, #20]
 8025586:	3315      	adds	r3, #21
 8025588:	9501      	str	r5, [sp, #4]
 802558a:	429a      	cmp	r2, r3
 802558c:	d305      	bcc.n	802559a <__multiply+0x8a>
 802558e:	1b13      	subs	r3, r2, r4
 8025590:	3b15      	subs	r3, #21
 8025592:	089b      	lsrs	r3, r3, #2
 8025594:	3301      	adds	r3, #1
 8025596:	009b      	lsls	r3, r3, #2
 8025598:	9306      	str	r3, [sp, #24]
 802559a:	9b01      	ldr	r3, [sp, #4]
 802559c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802559e:	4293      	cmp	r3, r2
 80255a0:	d310      	bcc.n	80255c4 <__multiply+0xb4>
 80255a2:	9b03      	ldr	r3, [sp, #12]
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	dd05      	ble.n	80255b4 <__multiply+0xa4>
 80255a8:	9b04      	ldr	r3, [sp, #16]
 80255aa:	3b04      	subs	r3, #4
 80255ac:	9304      	str	r3, [sp, #16]
 80255ae:	681b      	ldr	r3, [r3, #0]
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	d056      	beq.n	8025662 <__multiply+0x152>
 80255b4:	9b02      	ldr	r3, [sp, #8]
 80255b6:	9a03      	ldr	r2, [sp, #12]
 80255b8:	0018      	movs	r0, r3
 80255ba:	611a      	str	r2, [r3, #16]
 80255bc:	b00b      	add	sp, #44	@ 0x2c
 80255be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80255c0:	c304      	stmia	r3!, {r2}
 80255c2:	e7cf      	b.n	8025564 <__multiply+0x54>
 80255c4:	9b01      	ldr	r3, [sp, #4]
 80255c6:	6818      	ldr	r0, [r3, #0]
 80255c8:	b280      	uxth	r0, r0
 80255ca:	2800      	cmp	r0, #0
 80255cc:	d01e      	beq.n	802560c <__multiply+0xfc>
 80255ce:	4667      	mov	r7, ip
 80255d0:	2500      	movs	r5, #0
 80255d2:	9e08      	ldr	r6, [sp, #32]
 80255d4:	ce02      	ldmia	r6!, {r1}
 80255d6:	683b      	ldr	r3, [r7, #0]
 80255d8:	9307      	str	r3, [sp, #28]
 80255da:	b28b      	uxth	r3, r1
 80255dc:	4343      	muls	r3, r0
 80255de:	001a      	movs	r2, r3
 80255e0:	466b      	mov	r3, sp
 80255e2:	0c09      	lsrs	r1, r1, #16
 80255e4:	8b9b      	ldrh	r3, [r3, #28]
 80255e6:	4341      	muls	r1, r0
 80255e8:	18d3      	adds	r3, r2, r3
 80255ea:	9a07      	ldr	r2, [sp, #28]
 80255ec:	195b      	adds	r3, r3, r5
 80255ee:	0c12      	lsrs	r2, r2, #16
 80255f0:	1889      	adds	r1, r1, r2
 80255f2:	0c1a      	lsrs	r2, r3, #16
 80255f4:	188a      	adds	r2, r1, r2
 80255f6:	b29b      	uxth	r3, r3
 80255f8:	0c15      	lsrs	r5, r2, #16
 80255fa:	0412      	lsls	r2, r2, #16
 80255fc:	431a      	orrs	r2, r3
 80255fe:	9b05      	ldr	r3, [sp, #20]
 8025600:	c704      	stmia	r7!, {r2}
 8025602:	42b3      	cmp	r3, r6
 8025604:	d8e6      	bhi.n	80255d4 <__multiply+0xc4>
 8025606:	4663      	mov	r3, ip
 8025608:	9a06      	ldr	r2, [sp, #24]
 802560a:	509d      	str	r5, [r3, r2]
 802560c:	9b01      	ldr	r3, [sp, #4]
 802560e:	6818      	ldr	r0, [r3, #0]
 8025610:	0c00      	lsrs	r0, r0, #16
 8025612:	d020      	beq.n	8025656 <__multiply+0x146>
 8025614:	4663      	mov	r3, ip
 8025616:	0025      	movs	r5, r4
 8025618:	4661      	mov	r1, ip
 802561a:	2700      	movs	r7, #0
 802561c:	681b      	ldr	r3, [r3, #0]
 802561e:	3514      	adds	r5, #20
 8025620:	682a      	ldr	r2, [r5, #0]
 8025622:	680e      	ldr	r6, [r1, #0]
 8025624:	b292      	uxth	r2, r2
 8025626:	4342      	muls	r2, r0
 8025628:	0c36      	lsrs	r6, r6, #16
 802562a:	1992      	adds	r2, r2, r6
 802562c:	19d2      	adds	r2, r2, r7
 802562e:	0416      	lsls	r6, r2, #16
 8025630:	b29b      	uxth	r3, r3
 8025632:	431e      	orrs	r6, r3
 8025634:	600e      	str	r6, [r1, #0]
 8025636:	cd40      	ldmia	r5!, {r6}
 8025638:	684b      	ldr	r3, [r1, #4]
 802563a:	0c36      	lsrs	r6, r6, #16
 802563c:	4346      	muls	r6, r0
 802563e:	b29b      	uxth	r3, r3
 8025640:	0c12      	lsrs	r2, r2, #16
 8025642:	18f3      	adds	r3, r6, r3
 8025644:	189b      	adds	r3, r3, r2
 8025646:	9a05      	ldr	r2, [sp, #20]
 8025648:	0c1f      	lsrs	r7, r3, #16
 802564a:	3104      	adds	r1, #4
 802564c:	42aa      	cmp	r2, r5
 802564e:	d8e7      	bhi.n	8025620 <__multiply+0x110>
 8025650:	4662      	mov	r2, ip
 8025652:	9906      	ldr	r1, [sp, #24]
 8025654:	5053      	str	r3, [r2, r1]
 8025656:	9b01      	ldr	r3, [sp, #4]
 8025658:	3304      	adds	r3, #4
 802565a:	9301      	str	r3, [sp, #4]
 802565c:	2304      	movs	r3, #4
 802565e:	449c      	add	ip, r3
 8025660:	e79b      	b.n	802559a <__multiply+0x8a>
 8025662:	9b03      	ldr	r3, [sp, #12]
 8025664:	3b01      	subs	r3, #1
 8025666:	9303      	str	r3, [sp, #12]
 8025668:	e79b      	b.n	80255a2 <__multiply+0x92>
 802566a:	46c0      	nop			@ (mov r8, r8)
 802566c:	0802b919 	.word	0x0802b919
 8025670:	0802b98a 	.word	0x0802b98a

08025674 <__pow5mult>:
 8025674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025676:	2303      	movs	r3, #3
 8025678:	0015      	movs	r5, r2
 802567a:	0007      	movs	r7, r0
 802567c:	000e      	movs	r6, r1
 802567e:	401a      	ands	r2, r3
 8025680:	421d      	tst	r5, r3
 8025682:	d008      	beq.n	8025696 <__pow5mult+0x22>
 8025684:	4925      	ldr	r1, [pc, #148]	@ (802571c <__pow5mult+0xa8>)
 8025686:	3a01      	subs	r2, #1
 8025688:	0092      	lsls	r2, r2, #2
 802568a:	5852      	ldr	r2, [r2, r1]
 802568c:	2300      	movs	r3, #0
 802568e:	0031      	movs	r1, r6
 8025690:	f7ff fe46 	bl	8025320 <__multadd>
 8025694:	0006      	movs	r6, r0
 8025696:	10ad      	asrs	r5, r5, #2
 8025698:	d03d      	beq.n	8025716 <__pow5mult+0xa2>
 802569a:	69fc      	ldr	r4, [r7, #28]
 802569c:	2c00      	cmp	r4, #0
 802569e:	d10f      	bne.n	80256c0 <__pow5mult+0x4c>
 80256a0:	2010      	movs	r0, #16
 80256a2:	f7ff fd07 	bl	80250b4 <malloc>
 80256a6:	1e02      	subs	r2, r0, #0
 80256a8:	61f8      	str	r0, [r7, #28]
 80256aa:	d105      	bne.n	80256b8 <__pow5mult+0x44>
 80256ac:	21b4      	movs	r1, #180	@ 0xb4
 80256ae:	4b1c      	ldr	r3, [pc, #112]	@ (8025720 <__pow5mult+0xac>)
 80256b0:	481c      	ldr	r0, [pc, #112]	@ (8025724 <__pow5mult+0xb0>)
 80256b2:	31ff      	adds	r1, #255	@ 0xff
 80256b4:	f000 feac 	bl	8026410 <__assert_func>
 80256b8:	6044      	str	r4, [r0, #4]
 80256ba:	6084      	str	r4, [r0, #8]
 80256bc:	6004      	str	r4, [r0, #0]
 80256be:	60c4      	str	r4, [r0, #12]
 80256c0:	69fb      	ldr	r3, [r7, #28]
 80256c2:	689c      	ldr	r4, [r3, #8]
 80256c4:	9301      	str	r3, [sp, #4]
 80256c6:	2c00      	cmp	r4, #0
 80256c8:	d108      	bne.n	80256dc <__pow5mult+0x68>
 80256ca:	0038      	movs	r0, r7
 80256cc:	4916      	ldr	r1, [pc, #88]	@ (8025728 <__pow5mult+0xb4>)
 80256ce:	f7ff ff07 	bl	80254e0 <__i2b>
 80256d2:	9b01      	ldr	r3, [sp, #4]
 80256d4:	0004      	movs	r4, r0
 80256d6:	6098      	str	r0, [r3, #8]
 80256d8:	2300      	movs	r3, #0
 80256da:	6003      	str	r3, [r0, #0]
 80256dc:	2301      	movs	r3, #1
 80256de:	421d      	tst	r5, r3
 80256e0:	d00a      	beq.n	80256f8 <__pow5mult+0x84>
 80256e2:	0031      	movs	r1, r6
 80256e4:	0022      	movs	r2, r4
 80256e6:	0038      	movs	r0, r7
 80256e8:	f7ff ff12 	bl	8025510 <__multiply>
 80256ec:	0031      	movs	r1, r6
 80256ee:	9001      	str	r0, [sp, #4]
 80256f0:	0038      	movs	r0, r7
 80256f2:	f7ff fdf1 	bl	80252d8 <_Bfree>
 80256f6:	9e01      	ldr	r6, [sp, #4]
 80256f8:	106d      	asrs	r5, r5, #1
 80256fa:	d00c      	beq.n	8025716 <__pow5mult+0xa2>
 80256fc:	6820      	ldr	r0, [r4, #0]
 80256fe:	2800      	cmp	r0, #0
 8025700:	d107      	bne.n	8025712 <__pow5mult+0x9e>
 8025702:	0022      	movs	r2, r4
 8025704:	0021      	movs	r1, r4
 8025706:	0038      	movs	r0, r7
 8025708:	f7ff ff02 	bl	8025510 <__multiply>
 802570c:	2300      	movs	r3, #0
 802570e:	6020      	str	r0, [r4, #0]
 8025710:	6003      	str	r3, [r0, #0]
 8025712:	0004      	movs	r4, r0
 8025714:	e7e2      	b.n	80256dc <__pow5mult+0x68>
 8025716:	0030      	movs	r0, r6
 8025718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802571a:	46c0      	nop			@ (mov r8, r8)
 802571c:	0802b9e4 	.word	0x0802b9e4
 8025720:	0802b8aa 	.word	0x0802b8aa
 8025724:	0802b98a 	.word	0x0802b98a
 8025728:	00000271 	.word	0x00000271

0802572c <__lshift>:
 802572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802572e:	000c      	movs	r4, r1
 8025730:	0016      	movs	r6, r2
 8025732:	6923      	ldr	r3, [r4, #16]
 8025734:	1157      	asrs	r7, r2, #5
 8025736:	b085      	sub	sp, #20
 8025738:	18fb      	adds	r3, r7, r3
 802573a:	9301      	str	r3, [sp, #4]
 802573c:	3301      	adds	r3, #1
 802573e:	9300      	str	r3, [sp, #0]
 8025740:	6849      	ldr	r1, [r1, #4]
 8025742:	68a3      	ldr	r3, [r4, #8]
 8025744:	9002      	str	r0, [sp, #8]
 8025746:	9a00      	ldr	r2, [sp, #0]
 8025748:	4293      	cmp	r3, r2
 802574a:	db10      	blt.n	802576e <__lshift+0x42>
 802574c:	9802      	ldr	r0, [sp, #8]
 802574e:	f7ff fd7f 	bl	8025250 <_Balloc>
 8025752:	2300      	movs	r3, #0
 8025754:	0001      	movs	r1, r0
 8025756:	0005      	movs	r5, r0
 8025758:	001a      	movs	r2, r3
 802575a:	3114      	adds	r1, #20
 802575c:	4298      	cmp	r0, r3
 802575e:	d10c      	bne.n	802577a <__lshift+0x4e>
 8025760:	21ef      	movs	r1, #239	@ 0xef
 8025762:	002a      	movs	r2, r5
 8025764:	4b25      	ldr	r3, [pc, #148]	@ (80257fc <__lshift+0xd0>)
 8025766:	4826      	ldr	r0, [pc, #152]	@ (8025800 <__lshift+0xd4>)
 8025768:	0049      	lsls	r1, r1, #1
 802576a:	f000 fe51 	bl	8026410 <__assert_func>
 802576e:	3101      	adds	r1, #1
 8025770:	005b      	lsls	r3, r3, #1
 8025772:	e7e8      	b.n	8025746 <__lshift+0x1a>
 8025774:	0098      	lsls	r0, r3, #2
 8025776:	500a      	str	r2, [r1, r0]
 8025778:	3301      	adds	r3, #1
 802577a:	42bb      	cmp	r3, r7
 802577c:	dbfa      	blt.n	8025774 <__lshift+0x48>
 802577e:	43fb      	mvns	r3, r7
 8025780:	17db      	asrs	r3, r3, #31
 8025782:	401f      	ands	r7, r3
 8025784:	00bf      	lsls	r7, r7, #2
 8025786:	0023      	movs	r3, r4
 8025788:	201f      	movs	r0, #31
 802578a:	19c9      	adds	r1, r1, r7
 802578c:	0037      	movs	r7, r6
 802578e:	6922      	ldr	r2, [r4, #16]
 8025790:	3314      	adds	r3, #20
 8025792:	0092      	lsls	r2, r2, #2
 8025794:	189a      	adds	r2, r3, r2
 8025796:	4007      	ands	r7, r0
 8025798:	4206      	tst	r6, r0
 802579a:	d029      	beq.n	80257f0 <__lshift+0xc4>
 802579c:	3001      	adds	r0, #1
 802579e:	1bc0      	subs	r0, r0, r7
 80257a0:	9003      	str	r0, [sp, #12]
 80257a2:	468c      	mov	ip, r1
 80257a4:	2000      	movs	r0, #0
 80257a6:	681e      	ldr	r6, [r3, #0]
 80257a8:	40be      	lsls	r6, r7
 80257aa:	4306      	orrs	r6, r0
 80257ac:	4660      	mov	r0, ip
 80257ae:	c040      	stmia	r0!, {r6}
 80257b0:	4684      	mov	ip, r0
 80257b2:	9e03      	ldr	r6, [sp, #12]
 80257b4:	cb01      	ldmia	r3!, {r0}
 80257b6:	40f0      	lsrs	r0, r6
 80257b8:	429a      	cmp	r2, r3
 80257ba:	d8f4      	bhi.n	80257a6 <__lshift+0x7a>
 80257bc:	0026      	movs	r6, r4
 80257be:	3615      	adds	r6, #21
 80257c0:	2304      	movs	r3, #4
 80257c2:	42b2      	cmp	r2, r6
 80257c4:	d304      	bcc.n	80257d0 <__lshift+0xa4>
 80257c6:	1b13      	subs	r3, r2, r4
 80257c8:	3b15      	subs	r3, #21
 80257ca:	089b      	lsrs	r3, r3, #2
 80257cc:	3301      	adds	r3, #1
 80257ce:	009b      	lsls	r3, r3, #2
 80257d0:	50c8      	str	r0, [r1, r3]
 80257d2:	2800      	cmp	r0, #0
 80257d4:	d002      	beq.n	80257dc <__lshift+0xb0>
 80257d6:	9b01      	ldr	r3, [sp, #4]
 80257d8:	3302      	adds	r3, #2
 80257da:	9300      	str	r3, [sp, #0]
 80257dc:	9b00      	ldr	r3, [sp, #0]
 80257de:	9802      	ldr	r0, [sp, #8]
 80257e0:	3b01      	subs	r3, #1
 80257e2:	0021      	movs	r1, r4
 80257e4:	612b      	str	r3, [r5, #16]
 80257e6:	f7ff fd77 	bl	80252d8 <_Bfree>
 80257ea:	0028      	movs	r0, r5
 80257ec:	b005      	add	sp, #20
 80257ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257f0:	cb01      	ldmia	r3!, {r0}
 80257f2:	c101      	stmia	r1!, {r0}
 80257f4:	429a      	cmp	r2, r3
 80257f6:	d8fb      	bhi.n	80257f0 <__lshift+0xc4>
 80257f8:	e7f0      	b.n	80257dc <__lshift+0xb0>
 80257fa:	46c0      	nop			@ (mov r8, r8)
 80257fc:	0802b919 	.word	0x0802b919
 8025800:	0802b98a 	.word	0x0802b98a

08025804 <__mcmp>:
 8025804:	b530      	push	{r4, r5, lr}
 8025806:	690b      	ldr	r3, [r1, #16]
 8025808:	6904      	ldr	r4, [r0, #16]
 802580a:	0002      	movs	r2, r0
 802580c:	1ae0      	subs	r0, r4, r3
 802580e:	429c      	cmp	r4, r3
 8025810:	d10f      	bne.n	8025832 <__mcmp+0x2e>
 8025812:	3214      	adds	r2, #20
 8025814:	009b      	lsls	r3, r3, #2
 8025816:	3114      	adds	r1, #20
 8025818:	0014      	movs	r4, r2
 802581a:	18c9      	adds	r1, r1, r3
 802581c:	18d2      	adds	r2, r2, r3
 802581e:	3a04      	subs	r2, #4
 8025820:	3904      	subs	r1, #4
 8025822:	6815      	ldr	r5, [r2, #0]
 8025824:	680b      	ldr	r3, [r1, #0]
 8025826:	429d      	cmp	r5, r3
 8025828:	d004      	beq.n	8025834 <__mcmp+0x30>
 802582a:	2001      	movs	r0, #1
 802582c:	429d      	cmp	r5, r3
 802582e:	d200      	bcs.n	8025832 <__mcmp+0x2e>
 8025830:	3802      	subs	r0, #2
 8025832:	bd30      	pop	{r4, r5, pc}
 8025834:	4294      	cmp	r4, r2
 8025836:	d3f2      	bcc.n	802581e <__mcmp+0x1a>
 8025838:	e7fb      	b.n	8025832 <__mcmp+0x2e>
	...

0802583c <__mdiff>:
 802583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802583e:	000c      	movs	r4, r1
 8025840:	b087      	sub	sp, #28
 8025842:	9000      	str	r0, [sp, #0]
 8025844:	0011      	movs	r1, r2
 8025846:	0020      	movs	r0, r4
 8025848:	0017      	movs	r7, r2
 802584a:	f7ff ffdb 	bl	8025804 <__mcmp>
 802584e:	1e05      	subs	r5, r0, #0
 8025850:	d110      	bne.n	8025874 <__mdiff+0x38>
 8025852:	0001      	movs	r1, r0
 8025854:	9800      	ldr	r0, [sp, #0]
 8025856:	f7ff fcfb 	bl	8025250 <_Balloc>
 802585a:	1e02      	subs	r2, r0, #0
 802585c:	d104      	bne.n	8025868 <__mdiff+0x2c>
 802585e:	4b40      	ldr	r3, [pc, #256]	@ (8025960 <__mdiff+0x124>)
 8025860:	4840      	ldr	r0, [pc, #256]	@ (8025964 <__mdiff+0x128>)
 8025862:	4941      	ldr	r1, [pc, #260]	@ (8025968 <__mdiff+0x12c>)
 8025864:	f000 fdd4 	bl	8026410 <__assert_func>
 8025868:	2301      	movs	r3, #1
 802586a:	6145      	str	r5, [r0, #20]
 802586c:	6103      	str	r3, [r0, #16]
 802586e:	0010      	movs	r0, r2
 8025870:	b007      	add	sp, #28
 8025872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025874:	2600      	movs	r6, #0
 8025876:	42b0      	cmp	r0, r6
 8025878:	da03      	bge.n	8025882 <__mdiff+0x46>
 802587a:	0023      	movs	r3, r4
 802587c:	003c      	movs	r4, r7
 802587e:	001f      	movs	r7, r3
 8025880:	3601      	adds	r6, #1
 8025882:	6861      	ldr	r1, [r4, #4]
 8025884:	9800      	ldr	r0, [sp, #0]
 8025886:	f7ff fce3 	bl	8025250 <_Balloc>
 802588a:	1e02      	subs	r2, r0, #0
 802588c:	d103      	bne.n	8025896 <__mdiff+0x5a>
 802588e:	4b34      	ldr	r3, [pc, #208]	@ (8025960 <__mdiff+0x124>)
 8025890:	4834      	ldr	r0, [pc, #208]	@ (8025964 <__mdiff+0x128>)
 8025892:	4936      	ldr	r1, [pc, #216]	@ (802596c <__mdiff+0x130>)
 8025894:	e7e6      	b.n	8025864 <__mdiff+0x28>
 8025896:	6923      	ldr	r3, [r4, #16]
 8025898:	3414      	adds	r4, #20
 802589a:	9300      	str	r3, [sp, #0]
 802589c:	009b      	lsls	r3, r3, #2
 802589e:	18e3      	adds	r3, r4, r3
 80258a0:	0021      	movs	r1, r4
 80258a2:	9401      	str	r4, [sp, #4]
 80258a4:	003c      	movs	r4, r7
 80258a6:	9302      	str	r3, [sp, #8]
 80258a8:	693b      	ldr	r3, [r7, #16]
 80258aa:	3414      	adds	r4, #20
 80258ac:	009b      	lsls	r3, r3, #2
 80258ae:	18e3      	adds	r3, r4, r3
 80258b0:	9303      	str	r3, [sp, #12]
 80258b2:	0003      	movs	r3, r0
 80258b4:	60c6      	str	r6, [r0, #12]
 80258b6:	468c      	mov	ip, r1
 80258b8:	2000      	movs	r0, #0
 80258ba:	3314      	adds	r3, #20
 80258bc:	9304      	str	r3, [sp, #16]
 80258be:	9305      	str	r3, [sp, #20]
 80258c0:	4663      	mov	r3, ip
 80258c2:	cb20      	ldmia	r3!, {r5}
 80258c4:	b2a9      	uxth	r1, r5
 80258c6:	000e      	movs	r6, r1
 80258c8:	469c      	mov	ip, r3
 80258ca:	cc08      	ldmia	r4!, {r3}
 80258cc:	0c2d      	lsrs	r5, r5, #16
 80258ce:	b299      	uxth	r1, r3
 80258d0:	1a71      	subs	r1, r6, r1
 80258d2:	1809      	adds	r1, r1, r0
 80258d4:	0c1b      	lsrs	r3, r3, #16
 80258d6:	1408      	asrs	r0, r1, #16
 80258d8:	1aeb      	subs	r3, r5, r3
 80258da:	181b      	adds	r3, r3, r0
 80258dc:	1418      	asrs	r0, r3, #16
 80258de:	b289      	uxth	r1, r1
 80258e0:	041b      	lsls	r3, r3, #16
 80258e2:	4319      	orrs	r1, r3
 80258e4:	9b05      	ldr	r3, [sp, #20]
 80258e6:	c302      	stmia	r3!, {r1}
 80258e8:	9305      	str	r3, [sp, #20]
 80258ea:	9b03      	ldr	r3, [sp, #12]
 80258ec:	42a3      	cmp	r3, r4
 80258ee:	d8e7      	bhi.n	80258c0 <__mdiff+0x84>
 80258f0:	0039      	movs	r1, r7
 80258f2:	9c03      	ldr	r4, [sp, #12]
 80258f4:	3115      	adds	r1, #21
 80258f6:	2304      	movs	r3, #4
 80258f8:	428c      	cmp	r4, r1
 80258fa:	d304      	bcc.n	8025906 <__mdiff+0xca>
 80258fc:	1be3      	subs	r3, r4, r7
 80258fe:	3b15      	subs	r3, #21
 8025900:	089b      	lsrs	r3, r3, #2
 8025902:	3301      	adds	r3, #1
 8025904:	009b      	lsls	r3, r3, #2
 8025906:	9901      	ldr	r1, [sp, #4]
 8025908:	18cd      	adds	r5, r1, r3
 802590a:	9904      	ldr	r1, [sp, #16]
 802590c:	002e      	movs	r6, r5
 802590e:	18cb      	adds	r3, r1, r3
 8025910:	001f      	movs	r7, r3
 8025912:	9902      	ldr	r1, [sp, #8]
 8025914:	428e      	cmp	r6, r1
 8025916:	d311      	bcc.n	802593c <__mdiff+0x100>
 8025918:	9c02      	ldr	r4, [sp, #8]
 802591a:	1ee9      	subs	r1, r5, #3
 802591c:	2000      	movs	r0, #0
 802591e:	428c      	cmp	r4, r1
 8025920:	d304      	bcc.n	802592c <__mdiff+0xf0>
 8025922:	0021      	movs	r1, r4
 8025924:	3103      	adds	r1, #3
 8025926:	1b49      	subs	r1, r1, r5
 8025928:	0889      	lsrs	r1, r1, #2
 802592a:	0088      	lsls	r0, r1, #2
 802592c:	181b      	adds	r3, r3, r0
 802592e:	3b04      	subs	r3, #4
 8025930:	6819      	ldr	r1, [r3, #0]
 8025932:	2900      	cmp	r1, #0
 8025934:	d010      	beq.n	8025958 <__mdiff+0x11c>
 8025936:	9b00      	ldr	r3, [sp, #0]
 8025938:	6113      	str	r3, [r2, #16]
 802593a:	e798      	b.n	802586e <__mdiff+0x32>
 802593c:	4684      	mov	ip, r0
 802593e:	ce02      	ldmia	r6!, {r1}
 8025940:	b288      	uxth	r0, r1
 8025942:	4460      	add	r0, ip
 8025944:	1400      	asrs	r0, r0, #16
 8025946:	0c0c      	lsrs	r4, r1, #16
 8025948:	1904      	adds	r4, r0, r4
 802594a:	4461      	add	r1, ip
 802594c:	1420      	asrs	r0, r4, #16
 802594e:	b289      	uxth	r1, r1
 8025950:	0424      	lsls	r4, r4, #16
 8025952:	4321      	orrs	r1, r4
 8025954:	c702      	stmia	r7!, {r1}
 8025956:	e7dc      	b.n	8025912 <__mdiff+0xd6>
 8025958:	9900      	ldr	r1, [sp, #0]
 802595a:	3901      	subs	r1, #1
 802595c:	9100      	str	r1, [sp, #0]
 802595e:	e7e6      	b.n	802592e <__mdiff+0xf2>
 8025960:	0802b919 	.word	0x0802b919
 8025964:	0802b98a 	.word	0x0802b98a
 8025968:	00000237 	.word	0x00000237
 802596c:	00000245 	.word	0x00000245

08025970 <__ulp>:
 8025970:	b510      	push	{r4, lr}
 8025972:	2400      	movs	r4, #0
 8025974:	4b0c      	ldr	r3, [pc, #48]	@ (80259a8 <__ulp+0x38>)
 8025976:	4a0d      	ldr	r2, [pc, #52]	@ (80259ac <__ulp+0x3c>)
 8025978:	400b      	ands	r3, r1
 802597a:	189b      	adds	r3, r3, r2
 802597c:	42a3      	cmp	r3, r4
 802597e:	dc06      	bgt.n	802598e <__ulp+0x1e>
 8025980:	425b      	negs	r3, r3
 8025982:	151a      	asrs	r2, r3, #20
 8025984:	2a13      	cmp	r2, #19
 8025986:	dc05      	bgt.n	8025994 <__ulp+0x24>
 8025988:	2380      	movs	r3, #128	@ 0x80
 802598a:	031b      	lsls	r3, r3, #12
 802598c:	4113      	asrs	r3, r2
 802598e:	0019      	movs	r1, r3
 8025990:	0020      	movs	r0, r4
 8025992:	bd10      	pop	{r4, pc}
 8025994:	3a14      	subs	r2, #20
 8025996:	2401      	movs	r4, #1
 8025998:	2a1e      	cmp	r2, #30
 802599a:	dc02      	bgt.n	80259a2 <__ulp+0x32>
 802599c:	2480      	movs	r4, #128	@ 0x80
 802599e:	0624      	lsls	r4, r4, #24
 80259a0:	40d4      	lsrs	r4, r2
 80259a2:	2300      	movs	r3, #0
 80259a4:	e7f3      	b.n	802598e <__ulp+0x1e>
 80259a6:	46c0      	nop			@ (mov r8, r8)
 80259a8:	7ff00000 	.word	0x7ff00000
 80259ac:	fcc00000 	.word	0xfcc00000

080259b0 <__b2d>:
 80259b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80259b2:	0006      	movs	r6, r0
 80259b4:	6903      	ldr	r3, [r0, #16]
 80259b6:	3614      	adds	r6, #20
 80259b8:	009b      	lsls	r3, r3, #2
 80259ba:	18f3      	adds	r3, r6, r3
 80259bc:	1f1d      	subs	r5, r3, #4
 80259be:	682c      	ldr	r4, [r5, #0]
 80259c0:	000f      	movs	r7, r1
 80259c2:	0020      	movs	r0, r4
 80259c4:	9301      	str	r3, [sp, #4]
 80259c6:	f7ff fd3b 	bl	8025440 <__hi0bits>
 80259ca:	2220      	movs	r2, #32
 80259cc:	1a12      	subs	r2, r2, r0
 80259ce:	603a      	str	r2, [r7, #0]
 80259d0:	0003      	movs	r3, r0
 80259d2:	4a1c      	ldr	r2, [pc, #112]	@ (8025a44 <__b2d+0x94>)
 80259d4:	280a      	cmp	r0, #10
 80259d6:	dc15      	bgt.n	8025a04 <__b2d+0x54>
 80259d8:	210b      	movs	r1, #11
 80259da:	0027      	movs	r7, r4
 80259dc:	1a09      	subs	r1, r1, r0
 80259de:	40cf      	lsrs	r7, r1
 80259e0:	433a      	orrs	r2, r7
 80259e2:	468c      	mov	ip, r1
 80259e4:	0011      	movs	r1, r2
 80259e6:	2200      	movs	r2, #0
 80259e8:	42ae      	cmp	r6, r5
 80259ea:	d202      	bcs.n	80259f2 <__b2d+0x42>
 80259ec:	9a01      	ldr	r2, [sp, #4]
 80259ee:	3a08      	subs	r2, #8
 80259f0:	6812      	ldr	r2, [r2, #0]
 80259f2:	3315      	adds	r3, #21
 80259f4:	409c      	lsls	r4, r3
 80259f6:	4663      	mov	r3, ip
 80259f8:	0027      	movs	r7, r4
 80259fa:	40da      	lsrs	r2, r3
 80259fc:	4317      	orrs	r7, r2
 80259fe:	0038      	movs	r0, r7
 8025a00:	b003      	add	sp, #12
 8025a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a04:	2700      	movs	r7, #0
 8025a06:	42ae      	cmp	r6, r5
 8025a08:	d202      	bcs.n	8025a10 <__b2d+0x60>
 8025a0a:	9d01      	ldr	r5, [sp, #4]
 8025a0c:	3d08      	subs	r5, #8
 8025a0e:	682f      	ldr	r7, [r5, #0]
 8025a10:	210b      	movs	r1, #11
 8025a12:	4249      	negs	r1, r1
 8025a14:	468c      	mov	ip, r1
 8025a16:	449c      	add	ip, r3
 8025a18:	2b0b      	cmp	r3, #11
 8025a1a:	d010      	beq.n	8025a3e <__b2d+0x8e>
 8025a1c:	4661      	mov	r1, ip
 8025a1e:	2320      	movs	r3, #32
 8025a20:	408c      	lsls	r4, r1
 8025a22:	1a5b      	subs	r3, r3, r1
 8025a24:	0039      	movs	r1, r7
 8025a26:	40d9      	lsrs	r1, r3
 8025a28:	430c      	orrs	r4, r1
 8025a2a:	4322      	orrs	r2, r4
 8025a2c:	0011      	movs	r1, r2
 8025a2e:	2200      	movs	r2, #0
 8025a30:	42b5      	cmp	r5, r6
 8025a32:	d901      	bls.n	8025a38 <__b2d+0x88>
 8025a34:	3d04      	subs	r5, #4
 8025a36:	682a      	ldr	r2, [r5, #0]
 8025a38:	4664      	mov	r4, ip
 8025a3a:	40a7      	lsls	r7, r4
 8025a3c:	e7dd      	b.n	80259fa <__b2d+0x4a>
 8025a3e:	4322      	orrs	r2, r4
 8025a40:	0011      	movs	r1, r2
 8025a42:	e7dc      	b.n	80259fe <__b2d+0x4e>
 8025a44:	3ff00000 	.word	0x3ff00000

08025a48 <__d2b>:
 8025a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025a4a:	2101      	movs	r1, #1
 8025a4c:	0016      	movs	r6, r2
 8025a4e:	001f      	movs	r7, r3
 8025a50:	f7ff fbfe 	bl	8025250 <_Balloc>
 8025a54:	1e04      	subs	r4, r0, #0
 8025a56:	d105      	bne.n	8025a64 <__d2b+0x1c>
 8025a58:	0022      	movs	r2, r4
 8025a5a:	4b25      	ldr	r3, [pc, #148]	@ (8025af0 <__d2b+0xa8>)
 8025a5c:	4825      	ldr	r0, [pc, #148]	@ (8025af4 <__d2b+0xac>)
 8025a5e:	4926      	ldr	r1, [pc, #152]	@ (8025af8 <__d2b+0xb0>)
 8025a60:	f000 fcd6 	bl	8026410 <__assert_func>
 8025a64:	033b      	lsls	r3, r7, #12
 8025a66:	007d      	lsls	r5, r7, #1
 8025a68:	0b1b      	lsrs	r3, r3, #12
 8025a6a:	0d6d      	lsrs	r5, r5, #21
 8025a6c:	d002      	beq.n	8025a74 <__d2b+0x2c>
 8025a6e:	2280      	movs	r2, #128	@ 0x80
 8025a70:	0352      	lsls	r2, r2, #13
 8025a72:	4313      	orrs	r3, r2
 8025a74:	9301      	str	r3, [sp, #4]
 8025a76:	2e00      	cmp	r6, #0
 8025a78:	d025      	beq.n	8025ac6 <__d2b+0x7e>
 8025a7a:	4668      	mov	r0, sp
 8025a7c:	9600      	str	r6, [sp, #0]
 8025a7e:	f7ff fd00 	bl	8025482 <__lo0bits>
 8025a82:	9b01      	ldr	r3, [sp, #4]
 8025a84:	9900      	ldr	r1, [sp, #0]
 8025a86:	2800      	cmp	r0, #0
 8025a88:	d01b      	beq.n	8025ac2 <__d2b+0x7a>
 8025a8a:	2220      	movs	r2, #32
 8025a8c:	001e      	movs	r6, r3
 8025a8e:	1a12      	subs	r2, r2, r0
 8025a90:	4096      	lsls	r6, r2
 8025a92:	0032      	movs	r2, r6
 8025a94:	40c3      	lsrs	r3, r0
 8025a96:	430a      	orrs	r2, r1
 8025a98:	6162      	str	r2, [r4, #20]
 8025a9a:	9301      	str	r3, [sp, #4]
 8025a9c:	9e01      	ldr	r6, [sp, #4]
 8025a9e:	61a6      	str	r6, [r4, #24]
 8025aa0:	1e73      	subs	r3, r6, #1
 8025aa2:	419e      	sbcs	r6, r3
 8025aa4:	3601      	adds	r6, #1
 8025aa6:	6126      	str	r6, [r4, #16]
 8025aa8:	2d00      	cmp	r5, #0
 8025aaa:	d014      	beq.n	8025ad6 <__d2b+0x8e>
 8025aac:	2635      	movs	r6, #53	@ 0x35
 8025aae:	4b13      	ldr	r3, [pc, #76]	@ (8025afc <__d2b+0xb4>)
 8025ab0:	18ed      	adds	r5, r5, r3
 8025ab2:	9b08      	ldr	r3, [sp, #32]
 8025ab4:	182d      	adds	r5, r5, r0
 8025ab6:	601d      	str	r5, [r3, #0]
 8025ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025aba:	1a36      	subs	r6, r6, r0
 8025abc:	601e      	str	r6, [r3, #0]
 8025abe:	0020      	movs	r0, r4
 8025ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025ac2:	6161      	str	r1, [r4, #20]
 8025ac4:	e7ea      	b.n	8025a9c <__d2b+0x54>
 8025ac6:	a801      	add	r0, sp, #4
 8025ac8:	f7ff fcdb 	bl	8025482 <__lo0bits>
 8025acc:	9b01      	ldr	r3, [sp, #4]
 8025ace:	2601      	movs	r6, #1
 8025ad0:	6163      	str	r3, [r4, #20]
 8025ad2:	3020      	adds	r0, #32
 8025ad4:	e7e7      	b.n	8025aa6 <__d2b+0x5e>
 8025ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8025b00 <__d2b+0xb8>)
 8025ad8:	18c0      	adds	r0, r0, r3
 8025ada:	9b08      	ldr	r3, [sp, #32]
 8025adc:	6018      	str	r0, [r3, #0]
 8025ade:	4b09      	ldr	r3, [pc, #36]	@ (8025b04 <__d2b+0xbc>)
 8025ae0:	18f3      	adds	r3, r6, r3
 8025ae2:	009b      	lsls	r3, r3, #2
 8025ae4:	18e3      	adds	r3, r4, r3
 8025ae6:	6958      	ldr	r0, [r3, #20]
 8025ae8:	f7ff fcaa 	bl	8025440 <__hi0bits>
 8025aec:	0176      	lsls	r6, r6, #5
 8025aee:	e7e3      	b.n	8025ab8 <__d2b+0x70>
 8025af0:	0802b919 	.word	0x0802b919
 8025af4:	0802b98a 	.word	0x0802b98a
 8025af8:	0000030f 	.word	0x0000030f
 8025afc:	fffffbcd 	.word	0xfffffbcd
 8025b00:	fffffbce 	.word	0xfffffbce
 8025b04:	3fffffff 	.word	0x3fffffff

08025b08 <__ratio>:
 8025b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b0a:	b087      	sub	sp, #28
 8025b0c:	000f      	movs	r7, r1
 8025b0e:	a904      	add	r1, sp, #16
 8025b10:	0006      	movs	r6, r0
 8025b12:	f7ff ff4d 	bl	80259b0 <__b2d>
 8025b16:	9000      	str	r0, [sp, #0]
 8025b18:	9101      	str	r1, [sp, #4]
 8025b1a:	9b00      	ldr	r3, [sp, #0]
 8025b1c:	9c01      	ldr	r4, [sp, #4]
 8025b1e:	0038      	movs	r0, r7
 8025b20:	a905      	add	r1, sp, #20
 8025b22:	9302      	str	r3, [sp, #8]
 8025b24:	9403      	str	r4, [sp, #12]
 8025b26:	f7ff ff43 	bl	80259b0 <__b2d>
 8025b2a:	000d      	movs	r5, r1
 8025b2c:	0002      	movs	r2, r0
 8025b2e:	000b      	movs	r3, r1
 8025b30:	6930      	ldr	r0, [r6, #16]
 8025b32:	6939      	ldr	r1, [r7, #16]
 8025b34:	9e04      	ldr	r6, [sp, #16]
 8025b36:	1a40      	subs	r0, r0, r1
 8025b38:	9905      	ldr	r1, [sp, #20]
 8025b3a:	0140      	lsls	r0, r0, #5
 8025b3c:	1a71      	subs	r1, r6, r1
 8025b3e:	1841      	adds	r1, r0, r1
 8025b40:	0508      	lsls	r0, r1, #20
 8025b42:	2900      	cmp	r1, #0
 8025b44:	dd08      	ble.n	8025b58 <__ratio+0x50>
 8025b46:	9901      	ldr	r1, [sp, #4]
 8025b48:	1841      	adds	r1, r0, r1
 8025b4a:	9103      	str	r1, [sp, #12]
 8025b4c:	9802      	ldr	r0, [sp, #8]
 8025b4e:	9903      	ldr	r1, [sp, #12]
 8025b50:	f7dc f930 	bl	8001db4 <__aeabi_ddiv>
 8025b54:	b007      	add	sp, #28
 8025b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b58:	1a2b      	subs	r3, r5, r0
 8025b5a:	e7f7      	b.n	8025b4c <__ratio+0x44>

08025b5c <__copybits>:
 8025b5c:	b570      	push	{r4, r5, r6, lr}
 8025b5e:	0014      	movs	r4, r2
 8025b60:	0005      	movs	r5, r0
 8025b62:	3901      	subs	r1, #1
 8025b64:	6913      	ldr	r3, [r2, #16]
 8025b66:	1149      	asrs	r1, r1, #5
 8025b68:	3101      	adds	r1, #1
 8025b6a:	0089      	lsls	r1, r1, #2
 8025b6c:	3414      	adds	r4, #20
 8025b6e:	009b      	lsls	r3, r3, #2
 8025b70:	1841      	adds	r1, r0, r1
 8025b72:	18e3      	adds	r3, r4, r3
 8025b74:	42a3      	cmp	r3, r4
 8025b76:	d80d      	bhi.n	8025b94 <__copybits+0x38>
 8025b78:	0014      	movs	r4, r2
 8025b7a:	3411      	adds	r4, #17
 8025b7c:	2500      	movs	r5, #0
 8025b7e:	429c      	cmp	r4, r3
 8025b80:	d803      	bhi.n	8025b8a <__copybits+0x2e>
 8025b82:	1a9b      	subs	r3, r3, r2
 8025b84:	3b11      	subs	r3, #17
 8025b86:	089b      	lsrs	r3, r3, #2
 8025b88:	009d      	lsls	r5, r3, #2
 8025b8a:	2300      	movs	r3, #0
 8025b8c:	1940      	adds	r0, r0, r5
 8025b8e:	4281      	cmp	r1, r0
 8025b90:	d803      	bhi.n	8025b9a <__copybits+0x3e>
 8025b92:	bd70      	pop	{r4, r5, r6, pc}
 8025b94:	cc40      	ldmia	r4!, {r6}
 8025b96:	c540      	stmia	r5!, {r6}
 8025b98:	e7ec      	b.n	8025b74 <__copybits+0x18>
 8025b9a:	c008      	stmia	r0!, {r3}
 8025b9c:	e7f7      	b.n	8025b8e <__copybits+0x32>

08025b9e <__any_on>:
 8025b9e:	0002      	movs	r2, r0
 8025ba0:	6900      	ldr	r0, [r0, #16]
 8025ba2:	b510      	push	{r4, lr}
 8025ba4:	3214      	adds	r2, #20
 8025ba6:	114b      	asrs	r3, r1, #5
 8025ba8:	4298      	cmp	r0, r3
 8025baa:	db13      	blt.n	8025bd4 <__any_on+0x36>
 8025bac:	dd0c      	ble.n	8025bc8 <__any_on+0x2a>
 8025bae:	241f      	movs	r4, #31
 8025bb0:	0008      	movs	r0, r1
 8025bb2:	4020      	ands	r0, r4
 8025bb4:	4221      	tst	r1, r4
 8025bb6:	d007      	beq.n	8025bc8 <__any_on+0x2a>
 8025bb8:	0099      	lsls	r1, r3, #2
 8025bba:	588c      	ldr	r4, [r1, r2]
 8025bbc:	0021      	movs	r1, r4
 8025bbe:	40c1      	lsrs	r1, r0
 8025bc0:	4081      	lsls	r1, r0
 8025bc2:	2001      	movs	r0, #1
 8025bc4:	428c      	cmp	r4, r1
 8025bc6:	d104      	bne.n	8025bd2 <__any_on+0x34>
 8025bc8:	009b      	lsls	r3, r3, #2
 8025bca:	18d3      	adds	r3, r2, r3
 8025bcc:	4293      	cmp	r3, r2
 8025bce:	d803      	bhi.n	8025bd8 <__any_on+0x3a>
 8025bd0:	2000      	movs	r0, #0
 8025bd2:	bd10      	pop	{r4, pc}
 8025bd4:	0003      	movs	r3, r0
 8025bd6:	e7f7      	b.n	8025bc8 <__any_on+0x2a>
 8025bd8:	3b04      	subs	r3, #4
 8025bda:	6819      	ldr	r1, [r3, #0]
 8025bdc:	2900      	cmp	r1, #0
 8025bde:	d0f5      	beq.n	8025bcc <__any_on+0x2e>
 8025be0:	2001      	movs	r0, #1
 8025be2:	e7f6      	b.n	8025bd2 <__any_on+0x34>

08025be4 <__ascii_wctomb>:
 8025be4:	0003      	movs	r3, r0
 8025be6:	1e08      	subs	r0, r1, #0
 8025be8:	d005      	beq.n	8025bf6 <__ascii_wctomb+0x12>
 8025bea:	2aff      	cmp	r2, #255	@ 0xff
 8025bec:	d904      	bls.n	8025bf8 <__ascii_wctomb+0x14>
 8025bee:	228a      	movs	r2, #138	@ 0x8a
 8025bf0:	2001      	movs	r0, #1
 8025bf2:	601a      	str	r2, [r3, #0]
 8025bf4:	4240      	negs	r0, r0
 8025bf6:	4770      	bx	lr
 8025bf8:	2001      	movs	r0, #1
 8025bfa:	700a      	strb	r2, [r1, #0]
 8025bfc:	e7fb      	b.n	8025bf6 <__ascii_wctomb+0x12>
	...

08025c00 <__ssputs_r>:
 8025c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c02:	688e      	ldr	r6, [r1, #8]
 8025c04:	b085      	sub	sp, #20
 8025c06:	001f      	movs	r7, r3
 8025c08:	000c      	movs	r4, r1
 8025c0a:	680b      	ldr	r3, [r1, #0]
 8025c0c:	9002      	str	r0, [sp, #8]
 8025c0e:	9203      	str	r2, [sp, #12]
 8025c10:	42be      	cmp	r6, r7
 8025c12:	d830      	bhi.n	8025c76 <__ssputs_r+0x76>
 8025c14:	210c      	movs	r1, #12
 8025c16:	5e62      	ldrsh	r2, [r4, r1]
 8025c18:	2190      	movs	r1, #144	@ 0x90
 8025c1a:	00c9      	lsls	r1, r1, #3
 8025c1c:	420a      	tst	r2, r1
 8025c1e:	d028      	beq.n	8025c72 <__ssputs_r+0x72>
 8025c20:	2003      	movs	r0, #3
 8025c22:	6921      	ldr	r1, [r4, #16]
 8025c24:	1a5b      	subs	r3, r3, r1
 8025c26:	9301      	str	r3, [sp, #4]
 8025c28:	6963      	ldr	r3, [r4, #20]
 8025c2a:	4343      	muls	r3, r0
 8025c2c:	9801      	ldr	r0, [sp, #4]
 8025c2e:	0fdd      	lsrs	r5, r3, #31
 8025c30:	18ed      	adds	r5, r5, r3
 8025c32:	1c7b      	adds	r3, r7, #1
 8025c34:	181b      	adds	r3, r3, r0
 8025c36:	106d      	asrs	r5, r5, #1
 8025c38:	42ab      	cmp	r3, r5
 8025c3a:	d900      	bls.n	8025c3e <__ssputs_r+0x3e>
 8025c3c:	001d      	movs	r5, r3
 8025c3e:	0552      	lsls	r2, r2, #21
 8025c40:	d528      	bpl.n	8025c94 <__ssputs_r+0x94>
 8025c42:	0029      	movs	r1, r5
 8025c44:	9802      	ldr	r0, [sp, #8]
 8025c46:	f7ff fa61 	bl	802510c <_malloc_r>
 8025c4a:	1e06      	subs	r6, r0, #0
 8025c4c:	d02c      	beq.n	8025ca8 <__ssputs_r+0xa8>
 8025c4e:	9a01      	ldr	r2, [sp, #4]
 8025c50:	6921      	ldr	r1, [r4, #16]
 8025c52:	f7fd fff9 	bl	8023c48 <memcpy>
 8025c56:	89a2      	ldrh	r2, [r4, #12]
 8025c58:	4b18      	ldr	r3, [pc, #96]	@ (8025cbc <__ssputs_r+0xbc>)
 8025c5a:	401a      	ands	r2, r3
 8025c5c:	2380      	movs	r3, #128	@ 0x80
 8025c5e:	4313      	orrs	r3, r2
 8025c60:	81a3      	strh	r3, [r4, #12]
 8025c62:	9b01      	ldr	r3, [sp, #4]
 8025c64:	6126      	str	r6, [r4, #16]
 8025c66:	18f6      	adds	r6, r6, r3
 8025c68:	6026      	str	r6, [r4, #0]
 8025c6a:	003e      	movs	r6, r7
 8025c6c:	6165      	str	r5, [r4, #20]
 8025c6e:	1aed      	subs	r5, r5, r3
 8025c70:	60a5      	str	r5, [r4, #8]
 8025c72:	42be      	cmp	r6, r7
 8025c74:	d900      	bls.n	8025c78 <__ssputs_r+0x78>
 8025c76:	003e      	movs	r6, r7
 8025c78:	0032      	movs	r2, r6
 8025c7a:	9903      	ldr	r1, [sp, #12]
 8025c7c:	6820      	ldr	r0, [r4, #0]
 8025c7e:	f000 fb7e 	bl	802637e <memmove>
 8025c82:	2000      	movs	r0, #0
 8025c84:	68a3      	ldr	r3, [r4, #8]
 8025c86:	1b9b      	subs	r3, r3, r6
 8025c88:	60a3      	str	r3, [r4, #8]
 8025c8a:	6823      	ldr	r3, [r4, #0]
 8025c8c:	199b      	adds	r3, r3, r6
 8025c8e:	6023      	str	r3, [r4, #0]
 8025c90:	b005      	add	sp, #20
 8025c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025c94:	002a      	movs	r2, r5
 8025c96:	9802      	ldr	r0, [sp, #8]
 8025c98:	f000 fc05 	bl	80264a6 <_realloc_r>
 8025c9c:	1e06      	subs	r6, r0, #0
 8025c9e:	d1e0      	bne.n	8025c62 <__ssputs_r+0x62>
 8025ca0:	6921      	ldr	r1, [r4, #16]
 8025ca2:	9802      	ldr	r0, [sp, #8]
 8025ca4:	f7fe fe62 	bl	802496c <_free_r>
 8025ca8:	230c      	movs	r3, #12
 8025caa:	2001      	movs	r0, #1
 8025cac:	9a02      	ldr	r2, [sp, #8]
 8025cae:	4240      	negs	r0, r0
 8025cb0:	6013      	str	r3, [r2, #0]
 8025cb2:	89a2      	ldrh	r2, [r4, #12]
 8025cb4:	3334      	adds	r3, #52	@ 0x34
 8025cb6:	4313      	orrs	r3, r2
 8025cb8:	81a3      	strh	r3, [r4, #12]
 8025cba:	e7e9      	b.n	8025c90 <__ssputs_r+0x90>
 8025cbc:	fffffb7f 	.word	0xfffffb7f

08025cc0 <_svfiprintf_r>:
 8025cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025cc2:	b0a1      	sub	sp, #132	@ 0x84
 8025cc4:	9003      	str	r0, [sp, #12]
 8025cc6:	001d      	movs	r5, r3
 8025cc8:	898b      	ldrh	r3, [r1, #12]
 8025cca:	000f      	movs	r7, r1
 8025ccc:	0016      	movs	r6, r2
 8025cce:	061b      	lsls	r3, r3, #24
 8025cd0:	d511      	bpl.n	8025cf6 <_svfiprintf_r+0x36>
 8025cd2:	690b      	ldr	r3, [r1, #16]
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	d10e      	bne.n	8025cf6 <_svfiprintf_r+0x36>
 8025cd8:	2140      	movs	r1, #64	@ 0x40
 8025cda:	f7ff fa17 	bl	802510c <_malloc_r>
 8025cde:	6038      	str	r0, [r7, #0]
 8025ce0:	6138      	str	r0, [r7, #16]
 8025ce2:	2800      	cmp	r0, #0
 8025ce4:	d105      	bne.n	8025cf2 <_svfiprintf_r+0x32>
 8025ce6:	230c      	movs	r3, #12
 8025ce8:	9a03      	ldr	r2, [sp, #12]
 8025cea:	6013      	str	r3, [r2, #0]
 8025cec:	2001      	movs	r0, #1
 8025cee:	4240      	negs	r0, r0
 8025cf0:	e0cf      	b.n	8025e92 <_svfiprintf_r+0x1d2>
 8025cf2:	2340      	movs	r3, #64	@ 0x40
 8025cf4:	617b      	str	r3, [r7, #20]
 8025cf6:	2300      	movs	r3, #0
 8025cf8:	ac08      	add	r4, sp, #32
 8025cfa:	6163      	str	r3, [r4, #20]
 8025cfc:	3320      	adds	r3, #32
 8025cfe:	7663      	strb	r3, [r4, #25]
 8025d00:	3310      	adds	r3, #16
 8025d02:	76a3      	strb	r3, [r4, #26]
 8025d04:	9507      	str	r5, [sp, #28]
 8025d06:	0035      	movs	r5, r6
 8025d08:	782b      	ldrb	r3, [r5, #0]
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	d001      	beq.n	8025d12 <_svfiprintf_r+0x52>
 8025d0e:	2b25      	cmp	r3, #37	@ 0x25
 8025d10:	d148      	bne.n	8025da4 <_svfiprintf_r+0xe4>
 8025d12:	1bab      	subs	r3, r5, r6
 8025d14:	9305      	str	r3, [sp, #20]
 8025d16:	42b5      	cmp	r5, r6
 8025d18:	d00b      	beq.n	8025d32 <_svfiprintf_r+0x72>
 8025d1a:	0032      	movs	r2, r6
 8025d1c:	0039      	movs	r1, r7
 8025d1e:	9803      	ldr	r0, [sp, #12]
 8025d20:	f7ff ff6e 	bl	8025c00 <__ssputs_r>
 8025d24:	3001      	adds	r0, #1
 8025d26:	d100      	bne.n	8025d2a <_svfiprintf_r+0x6a>
 8025d28:	e0ae      	b.n	8025e88 <_svfiprintf_r+0x1c8>
 8025d2a:	6963      	ldr	r3, [r4, #20]
 8025d2c:	9a05      	ldr	r2, [sp, #20]
 8025d2e:	189b      	adds	r3, r3, r2
 8025d30:	6163      	str	r3, [r4, #20]
 8025d32:	782b      	ldrb	r3, [r5, #0]
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	d100      	bne.n	8025d3a <_svfiprintf_r+0x7a>
 8025d38:	e0a6      	b.n	8025e88 <_svfiprintf_r+0x1c8>
 8025d3a:	2201      	movs	r2, #1
 8025d3c:	2300      	movs	r3, #0
 8025d3e:	4252      	negs	r2, r2
 8025d40:	6062      	str	r2, [r4, #4]
 8025d42:	a904      	add	r1, sp, #16
 8025d44:	3254      	adds	r2, #84	@ 0x54
 8025d46:	1852      	adds	r2, r2, r1
 8025d48:	1c6e      	adds	r6, r5, #1
 8025d4a:	6023      	str	r3, [r4, #0]
 8025d4c:	60e3      	str	r3, [r4, #12]
 8025d4e:	60a3      	str	r3, [r4, #8]
 8025d50:	7013      	strb	r3, [r2, #0]
 8025d52:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025d54:	4b54      	ldr	r3, [pc, #336]	@ (8025ea8 <_svfiprintf_r+0x1e8>)
 8025d56:	2205      	movs	r2, #5
 8025d58:	0018      	movs	r0, r3
 8025d5a:	7831      	ldrb	r1, [r6, #0]
 8025d5c:	9305      	str	r3, [sp, #20]
 8025d5e:	f7fd ff68 	bl	8023c32 <memchr>
 8025d62:	1c75      	adds	r5, r6, #1
 8025d64:	2800      	cmp	r0, #0
 8025d66:	d11f      	bne.n	8025da8 <_svfiprintf_r+0xe8>
 8025d68:	6822      	ldr	r2, [r4, #0]
 8025d6a:	06d3      	lsls	r3, r2, #27
 8025d6c:	d504      	bpl.n	8025d78 <_svfiprintf_r+0xb8>
 8025d6e:	2353      	movs	r3, #83	@ 0x53
 8025d70:	a904      	add	r1, sp, #16
 8025d72:	185b      	adds	r3, r3, r1
 8025d74:	2120      	movs	r1, #32
 8025d76:	7019      	strb	r1, [r3, #0]
 8025d78:	0713      	lsls	r3, r2, #28
 8025d7a:	d504      	bpl.n	8025d86 <_svfiprintf_r+0xc6>
 8025d7c:	2353      	movs	r3, #83	@ 0x53
 8025d7e:	a904      	add	r1, sp, #16
 8025d80:	185b      	adds	r3, r3, r1
 8025d82:	212b      	movs	r1, #43	@ 0x2b
 8025d84:	7019      	strb	r1, [r3, #0]
 8025d86:	7833      	ldrb	r3, [r6, #0]
 8025d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8025d8a:	d016      	beq.n	8025dba <_svfiprintf_r+0xfa>
 8025d8c:	0035      	movs	r5, r6
 8025d8e:	2100      	movs	r1, #0
 8025d90:	200a      	movs	r0, #10
 8025d92:	68e3      	ldr	r3, [r4, #12]
 8025d94:	782a      	ldrb	r2, [r5, #0]
 8025d96:	1c6e      	adds	r6, r5, #1
 8025d98:	3a30      	subs	r2, #48	@ 0x30
 8025d9a:	2a09      	cmp	r2, #9
 8025d9c:	d950      	bls.n	8025e40 <_svfiprintf_r+0x180>
 8025d9e:	2900      	cmp	r1, #0
 8025da0:	d111      	bne.n	8025dc6 <_svfiprintf_r+0x106>
 8025da2:	e017      	b.n	8025dd4 <_svfiprintf_r+0x114>
 8025da4:	3501      	adds	r5, #1
 8025da6:	e7af      	b.n	8025d08 <_svfiprintf_r+0x48>
 8025da8:	9b05      	ldr	r3, [sp, #20]
 8025daa:	6822      	ldr	r2, [r4, #0]
 8025dac:	1ac0      	subs	r0, r0, r3
 8025dae:	2301      	movs	r3, #1
 8025db0:	4083      	lsls	r3, r0
 8025db2:	4313      	orrs	r3, r2
 8025db4:	002e      	movs	r6, r5
 8025db6:	6023      	str	r3, [r4, #0]
 8025db8:	e7cc      	b.n	8025d54 <_svfiprintf_r+0x94>
 8025dba:	9b07      	ldr	r3, [sp, #28]
 8025dbc:	1d19      	adds	r1, r3, #4
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	9107      	str	r1, [sp, #28]
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	db01      	blt.n	8025dca <_svfiprintf_r+0x10a>
 8025dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025dc8:	e004      	b.n	8025dd4 <_svfiprintf_r+0x114>
 8025dca:	425b      	negs	r3, r3
 8025dcc:	60e3      	str	r3, [r4, #12]
 8025dce:	2302      	movs	r3, #2
 8025dd0:	4313      	orrs	r3, r2
 8025dd2:	6023      	str	r3, [r4, #0]
 8025dd4:	782b      	ldrb	r3, [r5, #0]
 8025dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8025dd8:	d10c      	bne.n	8025df4 <_svfiprintf_r+0x134>
 8025dda:	786b      	ldrb	r3, [r5, #1]
 8025ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8025dde:	d134      	bne.n	8025e4a <_svfiprintf_r+0x18a>
 8025de0:	9b07      	ldr	r3, [sp, #28]
 8025de2:	3502      	adds	r5, #2
 8025de4:	1d1a      	adds	r2, r3, #4
 8025de6:	681b      	ldr	r3, [r3, #0]
 8025de8:	9207      	str	r2, [sp, #28]
 8025dea:	2b00      	cmp	r3, #0
 8025dec:	da01      	bge.n	8025df2 <_svfiprintf_r+0x132>
 8025dee:	2301      	movs	r3, #1
 8025df0:	425b      	negs	r3, r3
 8025df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8025df4:	4e2d      	ldr	r6, [pc, #180]	@ (8025eac <_svfiprintf_r+0x1ec>)
 8025df6:	2203      	movs	r2, #3
 8025df8:	0030      	movs	r0, r6
 8025dfa:	7829      	ldrb	r1, [r5, #0]
 8025dfc:	f7fd ff19 	bl	8023c32 <memchr>
 8025e00:	2800      	cmp	r0, #0
 8025e02:	d006      	beq.n	8025e12 <_svfiprintf_r+0x152>
 8025e04:	2340      	movs	r3, #64	@ 0x40
 8025e06:	1b80      	subs	r0, r0, r6
 8025e08:	4083      	lsls	r3, r0
 8025e0a:	6822      	ldr	r2, [r4, #0]
 8025e0c:	3501      	adds	r5, #1
 8025e0e:	4313      	orrs	r3, r2
 8025e10:	6023      	str	r3, [r4, #0]
 8025e12:	7829      	ldrb	r1, [r5, #0]
 8025e14:	2206      	movs	r2, #6
 8025e16:	4826      	ldr	r0, [pc, #152]	@ (8025eb0 <_svfiprintf_r+0x1f0>)
 8025e18:	1c6e      	adds	r6, r5, #1
 8025e1a:	7621      	strb	r1, [r4, #24]
 8025e1c:	f7fd ff09 	bl	8023c32 <memchr>
 8025e20:	2800      	cmp	r0, #0
 8025e22:	d038      	beq.n	8025e96 <_svfiprintf_r+0x1d6>
 8025e24:	4b23      	ldr	r3, [pc, #140]	@ (8025eb4 <_svfiprintf_r+0x1f4>)
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	d122      	bne.n	8025e70 <_svfiprintf_r+0x1b0>
 8025e2a:	2207      	movs	r2, #7
 8025e2c:	9b07      	ldr	r3, [sp, #28]
 8025e2e:	3307      	adds	r3, #7
 8025e30:	4393      	bics	r3, r2
 8025e32:	3308      	adds	r3, #8
 8025e34:	9307      	str	r3, [sp, #28]
 8025e36:	6963      	ldr	r3, [r4, #20]
 8025e38:	9a04      	ldr	r2, [sp, #16]
 8025e3a:	189b      	adds	r3, r3, r2
 8025e3c:	6163      	str	r3, [r4, #20]
 8025e3e:	e762      	b.n	8025d06 <_svfiprintf_r+0x46>
 8025e40:	4343      	muls	r3, r0
 8025e42:	0035      	movs	r5, r6
 8025e44:	2101      	movs	r1, #1
 8025e46:	189b      	adds	r3, r3, r2
 8025e48:	e7a4      	b.n	8025d94 <_svfiprintf_r+0xd4>
 8025e4a:	2300      	movs	r3, #0
 8025e4c:	200a      	movs	r0, #10
 8025e4e:	0019      	movs	r1, r3
 8025e50:	3501      	adds	r5, #1
 8025e52:	6063      	str	r3, [r4, #4]
 8025e54:	782a      	ldrb	r2, [r5, #0]
 8025e56:	1c6e      	adds	r6, r5, #1
 8025e58:	3a30      	subs	r2, #48	@ 0x30
 8025e5a:	2a09      	cmp	r2, #9
 8025e5c:	d903      	bls.n	8025e66 <_svfiprintf_r+0x1a6>
 8025e5e:	2b00      	cmp	r3, #0
 8025e60:	d0c8      	beq.n	8025df4 <_svfiprintf_r+0x134>
 8025e62:	9109      	str	r1, [sp, #36]	@ 0x24
 8025e64:	e7c6      	b.n	8025df4 <_svfiprintf_r+0x134>
 8025e66:	4341      	muls	r1, r0
 8025e68:	0035      	movs	r5, r6
 8025e6a:	2301      	movs	r3, #1
 8025e6c:	1889      	adds	r1, r1, r2
 8025e6e:	e7f1      	b.n	8025e54 <_svfiprintf_r+0x194>
 8025e70:	aa07      	add	r2, sp, #28
 8025e72:	9200      	str	r2, [sp, #0]
 8025e74:	0021      	movs	r1, r4
 8025e76:	003a      	movs	r2, r7
 8025e78:	4b0f      	ldr	r3, [pc, #60]	@ (8025eb8 <_svfiprintf_r+0x1f8>)
 8025e7a:	9803      	ldr	r0, [sp, #12]
 8025e7c:	f7fc ffb2 	bl	8022de4 <_printf_float>
 8025e80:	9004      	str	r0, [sp, #16]
 8025e82:	9b04      	ldr	r3, [sp, #16]
 8025e84:	3301      	adds	r3, #1
 8025e86:	d1d6      	bne.n	8025e36 <_svfiprintf_r+0x176>
 8025e88:	89bb      	ldrh	r3, [r7, #12]
 8025e8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025e8c:	065b      	lsls	r3, r3, #25
 8025e8e:	d500      	bpl.n	8025e92 <_svfiprintf_r+0x1d2>
 8025e90:	e72c      	b.n	8025cec <_svfiprintf_r+0x2c>
 8025e92:	b021      	add	sp, #132	@ 0x84
 8025e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e96:	aa07      	add	r2, sp, #28
 8025e98:	9200      	str	r2, [sp, #0]
 8025e9a:	0021      	movs	r1, r4
 8025e9c:	003a      	movs	r2, r7
 8025e9e:	4b06      	ldr	r3, [pc, #24]	@ (8025eb8 <_svfiprintf_r+0x1f8>)
 8025ea0:	9803      	ldr	r0, [sp, #12]
 8025ea2:	f7fd fa4d 	bl	8023340 <_printf_i>
 8025ea6:	e7eb      	b.n	8025e80 <_svfiprintf_r+0x1c0>
 8025ea8:	0802bae0 	.word	0x0802bae0
 8025eac:	0802bae6 	.word	0x0802bae6
 8025eb0:	0802baea 	.word	0x0802baea
 8025eb4:	08022de5 	.word	0x08022de5
 8025eb8:	08025c01 	.word	0x08025c01

08025ebc <__sfputc_r>:
 8025ebc:	6893      	ldr	r3, [r2, #8]
 8025ebe:	b510      	push	{r4, lr}
 8025ec0:	3b01      	subs	r3, #1
 8025ec2:	6093      	str	r3, [r2, #8]
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	da04      	bge.n	8025ed2 <__sfputc_r+0x16>
 8025ec8:	6994      	ldr	r4, [r2, #24]
 8025eca:	42a3      	cmp	r3, r4
 8025ecc:	db07      	blt.n	8025ede <__sfputc_r+0x22>
 8025ece:	290a      	cmp	r1, #10
 8025ed0:	d005      	beq.n	8025ede <__sfputc_r+0x22>
 8025ed2:	6813      	ldr	r3, [r2, #0]
 8025ed4:	1c58      	adds	r0, r3, #1
 8025ed6:	6010      	str	r0, [r2, #0]
 8025ed8:	7019      	strb	r1, [r3, #0]
 8025eda:	0008      	movs	r0, r1
 8025edc:	bd10      	pop	{r4, pc}
 8025ede:	f7fd fd37 	bl	8023950 <__swbuf_r>
 8025ee2:	0001      	movs	r1, r0
 8025ee4:	e7f9      	b.n	8025eda <__sfputc_r+0x1e>

08025ee6 <__sfputs_r>:
 8025ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ee8:	0006      	movs	r6, r0
 8025eea:	000f      	movs	r7, r1
 8025eec:	0014      	movs	r4, r2
 8025eee:	18d5      	adds	r5, r2, r3
 8025ef0:	42ac      	cmp	r4, r5
 8025ef2:	d101      	bne.n	8025ef8 <__sfputs_r+0x12>
 8025ef4:	2000      	movs	r0, #0
 8025ef6:	e007      	b.n	8025f08 <__sfputs_r+0x22>
 8025ef8:	7821      	ldrb	r1, [r4, #0]
 8025efa:	003a      	movs	r2, r7
 8025efc:	0030      	movs	r0, r6
 8025efe:	f7ff ffdd 	bl	8025ebc <__sfputc_r>
 8025f02:	3401      	adds	r4, #1
 8025f04:	1c43      	adds	r3, r0, #1
 8025f06:	d1f3      	bne.n	8025ef0 <__sfputs_r+0xa>
 8025f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025f0c <_vfiprintf_r>:
 8025f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f0e:	b0a1      	sub	sp, #132	@ 0x84
 8025f10:	000f      	movs	r7, r1
 8025f12:	0015      	movs	r5, r2
 8025f14:	001e      	movs	r6, r3
 8025f16:	9003      	str	r0, [sp, #12]
 8025f18:	2800      	cmp	r0, #0
 8025f1a:	d004      	beq.n	8025f26 <_vfiprintf_r+0x1a>
 8025f1c:	6a03      	ldr	r3, [r0, #32]
 8025f1e:	2b00      	cmp	r3, #0
 8025f20:	d101      	bne.n	8025f26 <_vfiprintf_r+0x1a>
 8025f22:	f7fd fbab 	bl	802367c <__sinit>
 8025f26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025f28:	07db      	lsls	r3, r3, #31
 8025f2a:	d405      	bmi.n	8025f38 <_vfiprintf_r+0x2c>
 8025f2c:	89bb      	ldrh	r3, [r7, #12]
 8025f2e:	059b      	lsls	r3, r3, #22
 8025f30:	d402      	bmi.n	8025f38 <_vfiprintf_r+0x2c>
 8025f32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025f34:	f7fd fe7b 	bl	8023c2e <__retarget_lock_acquire_recursive>
 8025f38:	89bb      	ldrh	r3, [r7, #12]
 8025f3a:	071b      	lsls	r3, r3, #28
 8025f3c:	d502      	bpl.n	8025f44 <_vfiprintf_r+0x38>
 8025f3e:	693b      	ldr	r3, [r7, #16]
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	d113      	bne.n	8025f6c <_vfiprintf_r+0x60>
 8025f44:	0039      	movs	r1, r7
 8025f46:	9803      	ldr	r0, [sp, #12]
 8025f48:	f7fd fd44 	bl	80239d4 <__swsetup_r>
 8025f4c:	2800      	cmp	r0, #0
 8025f4e:	d00d      	beq.n	8025f6c <_vfiprintf_r+0x60>
 8025f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025f52:	07db      	lsls	r3, r3, #31
 8025f54:	d503      	bpl.n	8025f5e <_vfiprintf_r+0x52>
 8025f56:	2001      	movs	r0, #1
 8025f58:	4240      	negs	r0, r0
 8025f5a:	b021      	add	sp, #132	@ 0x84
 8025f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f5e:	89bb      	ldrh	r3, [r7, #12]
 8025f60:	059b      	lsls	r3, r3, #22
 8025f62:	d4f8      	bmi.n	8025f56 <_vfiprintf_r+0x4a>
 8025f64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025f66:	f7fd fe63 	bl	8023c30 <__retarget_lock_release_recursive>
 8025f6a:	e7f4      	b.n	8025f56 <_vfiprintf_r+0x4a>
 8025f6c:	2300      	movs	r3, #0
 8025f6e:	ac08      	add	r4, sp, #32
 8025f70:	6163      	str	r3, [r4, #20]
 8025f72:	3320      	adds	r3, #32
 8025f74:	7663      	strb	r3, [r4, #25]
 8025f76:	3310      	adds	r3, #16
 8025f78:	76a3      	strb	r3, [r4, #26]
 8025f7a:	9607      	str	r6, [sp, #28]
 8025f7c:	002e      	movs	r6, r5
 8025f7e:	7833      	ldrb	r3, [r6, #0]
 8025f80:	2b00      	cmp	r3, #0
 8025f82:	d001      	beq.n	8025f88 <_vfiprintf_r+0x7c>
 8025f84:	2b25      	cmp	r3, #37	@ 0x25
 8025f86:	d148      	bne.n	802601a <_vfiprintf_r+0x10e>
 8025f88:	1b73      	subs	r3, r6, r5
 8025f8a:	9305      	str	r3, [sp, #20]
 8025f8c:	42ae      	cmp	r6, r5
 8025f8e:	d00b      	beq.n	8025fa8 <_vfiprintf_r+0x9c>
 8025f90:	002a      	movs	r2, r5
 8025f92:	0039      	movs	r1, r7
 8025f94:	9803      	ldr	r0, [sp, #12]
 8025f96:	f7ff ffa6 	bl	8025ee6 <__sfputs_r>
 8025f9a:	3001      	adds	r0, #1
 8025f9c:	d100      	bne.n	8025fa0 <_vfiprintf_r+0x94>
 8025f9e:	e0ae      	b.n	80260fe <_vfiprintf_r+0x1f2>
 8025fa0:	6963      	ldr	r3, [r4, #20]
 8025fa2:	9a05      	ldr	r2, [sp, #20]
 8025fa4:	189b      	adds	r3, r3, r2
 8025fa6:	6163      	str	r3, [r4, #20]
 8025fa8:	7833      	ldrb	r3, [r6, #0]
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d100      	bne.n	8025fb0 <_vfiprintf_r+0xa4>
 8025fae:	e0a6      	b.n	80260fe <_vfiprintf_r+0x1f2>
 8025fb0:	2201      	movs	r2, #1
 8025fb2:	2300      	movs	r3, #0
 8025fb4:	4252      	negs	r2, r2
 8025fb6:	6062      	str	r2, [r4, #4]
 8025fb8:	a904      	add	r1, sp, #16
 8025fba:	3254      	adds	r2, #84	@ 0x54
 8025fbc:	1852      	adds	r2, r2, r1
 8025fbe:	1c75      	adds	r5, r6, #1
 8025fc0:	6023      	str	r3, [r4, #0]
 8025fc2:	60e3      	str	r3, [r4, #12]
 8025fc4:	60a3      	str	r3, [r4, #8]
 8025fc6:	7013      	strb	r3, [r2, #0]
 8025fc8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025fca:	4b59      	ldr	r3, [pc, #356]	@ (8026130 <_vfiprintf_r+0x224>)
 8025fcc:	2205      	movs	r2, #5
 8025fce:	0018      	movs	r0, r3
 8025fd0:	7829      	ldrb	r1, [r5, #0]
 8025fd2:	9305      	str	r3, [sp, #20]
 8025fd4:	f7fd fe2d 	bl	8023c32 <memchr>
 8025fd8:	1c6e      	adds	r6, r5, #1
 8025fda:	2800      	cmp	r0, #0
 8025fdc:	d11f      	bne.n	802601e <_vfiprintf_r+0x112>
 8025fde:	6822      	ldr	r2, [r4, #0]
 8025fe0:	06d3      	lsls	r3, r2, #27
 8025fe2:	d504      	bpl.n	8025fee <_vfiprintf_r+0xe2>
 8025fe4:	2353      	movs	r3, #83	@ 0x53
 8025fe6:	a904      	add	r1, sp, #16
 8025fe8:	185b      	adds	r3, r3, r1
 8025fea:	2120      	movs	r1, #32
 8025fec:	7019      	strb	r1, [r3, #0]
 8025fee:	0713      	lsls	r3, r2, #28
 8025ff0:	d504      	bpl.n	8025ffc <_vfiprintf_r+0xf0>
 8025ff2:	2353      	movs	r3, #83	@ 0x53
 8025ff4:	a904      	add	r1, sp, #16
 8025ff6:	185b      	adds	r3, r3, r1
 8025ff8:	212b      	movs	r1, #43	@ 0x2b
 8025ffa:	7019      	strb	r1, [r3, #0]
 8025ffc:	782b      	ldrb	r3, [r5, #0]
 8025ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8026000:	d016      	beq.n	8026030 <_vfiprintf_r+0x124>
 8026002:	002e      	movs	r6, r5
 8026004:	2100      	movs	r1, #0
 8026006:	200a      	movs	r0, #10
 8026008:	68e3      	ldr	r3, [r4, #12]
 802600a:	7832      	ldrb	r2, [r6, #0]
 802600c:	1c75      	adds	r5, r6, #1
 802600e:	3a30      	subs	r2, #48	@ 0x30
 8026010:	2a09      	cmp	r2, #9
 8026012:	d950      	bls.n	80260b6 <_vfiprintf_r+0x1aa>
 8026014:	2900      	cmp	r1, #0
 8026016:	d111      	bne.n	802603c <_vfiprintf_r+0x130>
 8026018:	e017      	b.n	802604a <_vfiprintf_r+0x13e>
 802601a:	3601      	adds	r6, #1
 802601c:	e7af      	b.n	8025f7e <_vfiprintf_r+0x72>
 802601e:	9b05      	ldr	r3, [sp, #20]
 8026020:	6822      	ldr	r2, [r4, #0]
 8026022:	1ac0      	subs	r0, r0, r3
 8026024:	2301      	movs	r3, #1
 8026026:	4083      	lsls	r3, r0
 8026028:	4313      	orrs	r3, r2
 802602a:	0035      	movs	r5, r6
 802602c:	6023      	str	r3, [r4, #0]
 802602e:	e7cc      	b.n	8025fca <_vfiprintf_r+0xbe>
 8026030:	9b07      	ldr	r3, [sp, #28]
 8026032:	1d19      	adds	r1, r3, #4
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	9107      	str	r1, [sp, #28]
 8026038:	2b00      	cmp	r3, #0
 802603a:	db01      	blt.n	8026040 <_vfiprintf_r+0x134>
 802603c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802603e:	e004      	b.n	802604a <_vfiprintf_r+0x13e>
 8026040:	425b      	negs	r3, r3
 8026042:	60e3      	str	r3, [r4, #12]
 8026044:	2302      	movs	r3, #2
 8026046:	4313      	orrs	r3, r2
 8026048:	6023      	str	r3, [r4, #0]
 802604a:	7833      	ldrb	r3, [r6, #0]
 802604c:	2b2e      	cmp	r3, #46	@ 0x2e
 802604e:	d10c      	bne.n	802606a <_vfiprintf_r+0x15e>
 8026050:	7873      	ldrb	r3, [r6, #1]
 8026052:	2b2a      	cmp	r3, #42	@ 0x2a
 8026054:	d134      	bne.n	80260c0 <_vfiprintf_r+0x1b4>
 8026056:	9b07      	ldr	r3, [sp, #28]
 8026058:	3602      	adds	r6, #2
 802605a:	1d1a      	adds	r2, r3, #4
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	9207      	str	r2, [sp, #28]
 8026060:	2b00      	cmp	r3, #0
 8026062:	da01      	bge.n	8026068 <_vfiprintf_r+0x15c>
 8026064:	2301      	movs	r3, #1
 8026066:	425b      	negs	r3, r3
 8026068:	9309      	str	r3, [sp, #36]	@ 0x24
 802606a:	4d32      	ldr	r5, [pc, #200]	@ (8026134 <_vfiprintf_r+0x228>)
 802606c:	2203      	movs	r2, #3
 802606e:	0028      	movs	r0, r5
 8026070:	7831      	ldrb	r1, [r6, #0]
 8026072:	f7fd fdde 	bl	8023c32 <memchr>
 8026076:	2800      	cmp	r0, #0
 8026078:	d006      	beq.n	8026088 <_vfiprintf_r+0x17c>
 802607a:	2340      	movs	r3, #64	@ 0x40
 802607c:	1b40      	subs	r0, r0, r5
 802607e:	4083      	lsls	r3, r0
 8026080:	6822      	ldr	r2, [r4, #0]
 8026082:	3601      	adds	r6, #1
 8026084:	4313      	orrs	r3, r2
 8026086:	6023      	str	r3, [r4, #0]
 8026088:	7831      	ldrb	r1, [r6, #0]
 802608a:	2206      	movs	r2, #6
 802608c:	482a      	ldr	r0, [pc, #168]	@ (8026138 <_vfiprintf_r+0x22c>)
 802608e:	1c75      	adds	r5, r6, #1
 8026090:	7621      	strb	r1, [r4, #24]
 8026092:	f7fd fdce 	bl	8023c32 <memchr>
 8026096:	2800      	cmp	r0, #0
 8026098:	d040      	beq.n	802611c <_vfiprintf_r+0x210>
 802609a:	4b28      	ldr	r3, [pc, #160]	@ (802613c <_vfiprintf_r+0x230>)
 802609c:	2b00      	cmp	r3, #0
 802609e:	d122      	bne.n	80260e6 <_vfiprintf_r+0x1da>
 80260a0:	2207      	movs	r2, #7
 80260a2:	9b07      	ldr	r3, [sp, #28]
 80260a4:	3307      	adds	r3, #7
 80260a6:	4393      	bics	r3, r2
 80260a8:	3308      	adds	r3, #8
 80260aa:	9307      	str	r3, [sp, #28]
 80260ac:	6963      	ldr	r3, [r4, #20]
 80260ae:	9a04      	ldr	r2, [sp, #16]
 80260b0:	189b      	adds	r3, r3, r2
 80260b2:	6163      	str	r3, [r4, #20]
 80260b4:	e762      	b.n	8025f7c <_vfiprintf_r+0x70>
 80260b6:	4343      	muls	r3, r0
 80260b8:	002e      	movs	r6, r5
 80260ba:	2101      	movs	r1, #1
 80260bc:	189b      	adds	r3, r3, r2
 80260be:	e7a4      	b.n	802600a <_vfiprintf_r+0xfe>
 80260c0:	2300      	movs	r3, #0
 80260c2:	200a      	movs	r0, #10
 80260c4:	0019      	movs	r1, r3
 80260c6:	3601      	adds	r6, #1
 80260c8:	6063      	str	r3, [r4, #4]
 80260ca:	7832      	ldrb	r2, [r6, #0]
 80260cc:	1c75      	adds	r5, r6, #1
 80260ce:	3a30      	subs	r2, #48	@ 0x30
 80260d0:	2a09      	cmp	r2, #9
 80260d2:	d903      	bls.n	80260dc <_vfiprintf_r+0x1d0>
 80260d4:	2b00      	cmp	r3, #0
 80260d6:	d0c8      	beq.n	802606a <_vfiprintf_r+0x15e>
 80260d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80260da:	e7c6      	b.n	802606a <_vfiprintf_r+0x15e>
 80260dc:	4341      	muls	r1, r0
 80260de:	002e      	movs	r6, r5
 80260e0:	2301      	movs	r3, #1
 80260e2:	1889      	adds	r1, r1, r2
 80260e4:	e7f1      	b.n	80260ca <_vfiprintf_r+0x1be>
 80260e6:	aa07      	add	r2, sp, #28
 80260e8:	9200      	str	r2, [sp, #0]
 80260ea:	0021      	movs	r1, r4
 80260ec:	003a      	movs	r2, r7
 80260ee:	4b14      	ldr	r3, [pc, #80]	@ (8026140 <_vfiprintf_r+0x234>)
 80260f0:	9803      	ldr	r0, [sp, #12]
 80260f2:	f7fc fe77 	bl	8022de4 <_printf_float>
 80260f6:	9004      	str	r0, [sp, #16]
 80260f8:	9b04      	ldr	r3, [sp, #16]
 80260fa:	3301      	adds	r3, #1
 80260fc:	d1d6      	bne.n	80260ac <_vfiprintf_r+0x1a0>
 80260fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026100:	07db      	lsls	r3, r3, #31
 8026102:	d405      	bmi.n	8026110 <_vfiprintf_r+0x204>
 8026104:	89bb      	ldrh	r3, [r7, #12]
 8026106:	059b      	lsls	r3, r3, #22
 8026108:	d402      	bmi.n	8026110 <_vfiprintf_r+0x204>
 802610a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802610c:	f7fd fd90 	bl	8023c30 <__retarget_lock_release_recursive>
 8026110:	89bb      	ldrh	r3, [r7, #12]
 8026112:	065b      	lsls	r3, r3, #25
 8026114:	d500      	bpl.n	8026118 <_vfiprintf_r+0x20c>
 8026116:	e71e      	b.n	8025f56 <_vfiprintf_r+0x4a>
 8026118:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802611a:	e71e      	b.n	8025f5a <_vfiprintf_r+0x4e>
 802611c:	aa07      	add	r2, sp, #28
 802611e:	9200      	str	r2, [sp, #0]
 8026120:	0021      	movs	r1, r4
 8026122:	003a      	movs	r2, r7
 8026124:	4b06      	ldr	r3, [pc, #24]	@ (8026140 <_vfiprintf_r+0x234>)
 8026126:	9803      	ldr	r0, [sp, #12]
 8026128:	f7fd f90a 	bl	8023340 <_printf_i>
 802612c:	e7e3      	b.n	80260f6 <_vfiprintf_r+0x1ea>
 802612e:	46c0      	nop			@ (mov r8, r8)
 8026130:	0802bae0 	.word	0x0802bae0
 8026134:	0802bae6 	.word	0x0802bae6
 8026138:	0802baea 	.word	0x0802baea
 802613c:	08022de5 	.word	0x08022de5
 8026140:	08025ee7 	.word	0x08025ee7

08026144 <__sflush_r>:
 8026144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026146:	220c      	movs	r2, #12
 8026148:	5e8b      	ldrsh	r3, [r1, r2]
 802614a:	0005      	movs	r5, r0
 802614c:	000c      	movs	r4, r1
 802614e:	071a      	lsls	r2, r3, #28
 8026150:	d456      	bmi.n	8026200 <__sflush_r+0xbc>
 8026152:	684a      	ldr	r2, [r1, #4]
 8026154:	2a00      	cmp	r2, #0
 8026156:	dc02      	bgt.n	802615e <__sflush_r+0x1a>
 8026158:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802615a:	2a00      	cmp	r2, #0
 802615c:	dd4e      	ble.n	80261fc <__sflush_r+0xb8>
 802615e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8026160:	2f00      	cmp	r7, #0
 8026162:	d04b      	beq.n	80261fc <__sflush_r+0xb8>
 8026164:	2200      	movs	r2, #0
 8026166:	2080      	movs	r0, #128	@ 0x80
 8026168:	682e      	ldr	r6, [r5, #0]
 802616a:	602a      	str	r2, [r5, #0]
 802616c:	001a      	movs	r2, r3
 802616e:	0140      	lsls	r0, r0, #5
 8026170:	6a21      	ldr	r1, [r4, #32]
 8026172:	4002      	ands	r2, r0
 8026174:	4203      	tst	r3, r0
 8026176:	d033      	beq.n	80261e0 <__sflush_r+0x9c>
 8026178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802617a:	89a3      	ldrh	r3, [r4, #12]
 802617c:	075b      	lsls	r3, r3, #29
 802617e:	d506      	bpl.n	802618e <__sflush_r+0x4a>
 8026180:	6863      	ldr	r3, [r4, #4]
 8026182:	1ad2      	subs	r2, r2, r3
 8026184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026186:	2b00      	cmp	r3, #0
 8026188:	d001      	beq.n	802618e <__sflush_r+0x4a>
 802618a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802618c:	1ad2      	subs	r2, r2, r3
 802618e:	2300      	movs	r3, #0
 8026190:	0028      	movs	r0, r5
 8026192:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8026194:	6a21      	ldr	r1, [r4, #32]
 8026196:	47b8      	blx	r7
 8026198:	89a2      	ldrh	r2, [r4, #12]
 802619a:	1c43      	adds	r3, r0, #1
 802619c:	d106      	bne.n	80261ac <__sflush_r+0x68>
 802619e:	6829      	ldr	r1, [r5, #0]
 80261a0:	291d      	cmp	r1, #29
 80261a2:	d846      	bhi.n	8026232 <__sflush_r+0xee>
 80261a4:	4b29      	ldr	r3, [pc, #164]	@ (802624c <__sflush_r+0x108>)
 80261a6:	410b      	asrs	r3, r1
 80261a8:	07db      	lsls	r3, r3, #31
 80261aa:	d442      	bmi.n	8026232 <__sflush_r+0xee>
 80261ac:	2300      	movs	r3, #0
 80261ae:	6063      	str	r3, [r4, #4]
 80261b0:	6923      	ldr	r3, [r4, #16]
 80261b2:	6023      	str	r3, [r4, #0]
 80261b4:	04d2      	lsls	r2, r2, #19
 80261b6:	d505      	bpl.n	80261c4 <__sflush_r+0x80>
 80261b8:	1c43      	adds	r3, r0, #1
 80261ba:	d102      	bne.n	80261c2 <__sflush_r+0x7e>
 80261bc:	682b      	ldr	r3, [r5, #0]
 80261be:	2b00      	cmp	r3, #0
 80261c0:	d100      	bne.n	80261c4 <__sflush_r+0x80>
 80261c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80261c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80261c6:	602e      	str	r6, [r5, #0]
 80261c8:	2900      	cmp	r1, #0
 80261ca:	d017      	beq.n	80261fc <__sflush_r+0xb8>
 80261cc:	0023      	movs	r3, r4
 80261ce:	3344      	adds	r3, #68	@ 0x44
 80261d0:	4299      	cmp	r1, r3
 80261d2:	d002      	beq.n	80261da <__sflush_r+0x96>
 80261d4:	0028      	movs	r0, r5
 80261d6:	f7fe fbc9 	bl	802496c <_free_r>
 80261da:	2300      	movs	r3, #0
 80261dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80261de:	e00d      	b.n	80261fc <__sflush_r+0xb8>
 80261e0:	2301      	movs	r3, #1
 80261e2:	0028      	movs	r0, r5
 80261e4:	47b8      	blx	r7
 80261e6:	0002      	movs	r2, r0
 80261e8:	1c43      	adds	r3, r0, #1
 80261ea:	d1c6      	bne.n	802617a <__sflush_r+0x36>
 80261ec:	682b      	ldr	r3, [r5, #0]
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d0c3      	beq.n	802617a <__sflush_r+0x36>
 80261f2:	2b1d      	cmp	r3, #29
 80261f4:	d001      	beq.n	80261fa <__sflush_r+0xb6>
 80261f6:	2b16      	cmp	r3, #22
 80261f8:	d11a      	bne.n	8026230 <__sflush_r+0xec>
 80261fa:	602e      	str	r6, [r5, #0]
 80261fc:	2000      	movs	r0, #0
 80261fe:	e01e      	b.n	802623e <__sflush_r+0xfa>
 8026200:	690e      	ldr	r6, [r1, #16]
 8026202:	2e00      	cmp	r6, #0
 8026204:	d0fa      	beq.n	80261fc <__sflush_r+0xb8>
 8026206:	680f      	ldr	r7, [r1, #0]
 8026208:	600e      	str	r6, [r1, #0]
 802620a:	1bba      	subs	r2, r7, r6
 802620c:	9201      	str	r2, [sp, #4]
 802620e:	2200      	movs	r2, #0
 8026210:	079b      	lsls	r3, r3, #30
 8026212:	d100      	bne.n	8026216 <__sflush_r+0xd2>
 8026214:	694a      	ldr	r2, [r1, #20]
 8026216:	60a2      	str	r2, [r4, #8]
 8026218:	9b01      	ldr	r3, [sp, #4]
 802621a:	2b00      	cmp	r3, #0
 802621c:	ddee      	ble.n	80261fc <__sflush_r+0xb8>
 802621e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8026220:	0032      	movs	r2, r6
 8026222:	001f      	movs	r7, r3
 8026224:	0028      	movs	r0, r5
 8026226:	9b01      	ldr	r3, [sp, #4]
 8026228:	6a21      	ldr	r1, [r4, #32]
 802622a:	47b8      	blx	r7
 802622c:	2800      	cmp	r0, #0
 802622e:	dc07      	bgt.n	8026240 <__sflush_r+0xfc>
 8026230:	89a2      	ldrh	r2, [r4, #12]
 8026232:	2340      	movs	r3, #64	@ 0x40
 8026234:	2001      	movs	r0, #1
 8026236:	4313      	orrs	r3, r2
 8026238:	b21b      	sxth	r3, r3
 802623a:	81a3      	strh	r3, [r4, #12]
 802623c:	4240      	negs	r0, r0
 802623e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026240:	9b01      	ldr	r3, [sp, #4]
 8026242:	1836      	adds	r6, r6, r0
 8026244:	1a1b      	subs	r3, r3, r0
 8026246:	9301      	str	r3, [sp, #4]
 8026248:	e7e6      	b.n	8026218 <__sflush_r+0xd4>
 802624a:	46c0      	nop			@ (mov r8, r8)
 802624c:	dfbffffe 	.word	0xdfbffffe

08026250 <_fflush_r>:
 8026250:	690b      	ldr	r3, [r1, #16]
 8026252:	b570      	push	{r4, r5, r6, lr}
 8026254:	0005      	movs	r5, r0
 8026256:	000c      	movs	r4, r1
 8026258:	2b00      	cmp	r3, #0
 802625a:	d102      	bne.n	8026262 <_fflush_r+0x12>
 802625c:	2500      	movs	r5, #0
 802625e:	0028      	movs	r0, r5
 8026260:	bd70      	pop	{r4, r5, r6, pc}
 8026262:	2800      	cmp	r0, #0
 8026264:	d004      	beq.n	8026270 <_fflush_r+0x20>
 8026266:	6a03      	ldr	r3, [r0, #32]
 8026268:	2b00      	cmp	r3, #0
 802626a:	d101      	bne.n	8026270 <_fflush_r+0x20>
 802626c:	f7fd fa06 	bl	802367c <__sinit>
 8026270:	220c      	movs	r2, #12
 8026272:	5ea3      	ldrsh	r3, [r4, r2]
 8026274:	2b00      	cmp	r3, #0
 8026276:	d0f1      	beq.n	802625c <_fflush_r+0xc>
 8026278:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802627a:	07d2      	lsls	r2, r2, #31
 802627c:	d404      	bmi.n	8026288 <_fflush_r+0x38>
 802627e:	059b      	lsls	r3, r3, #22
 8026280:	d402      	bmi.n	8026288 <_fflush_r+0x38>
 8026282:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026284:	f7fd fcd3 	bl	8023c2e <__retarget_lock_acquire_recursive>
 8026288:	0028      	movs	r0, r5
 802628a:	0021      	movs	r1, r4
 802628c:	f7ff ff5a 	bl	8026144 <__sflush_r>
 8026290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026292:	0005      	movs	r5, r0
 8026294:	07db      	lsls	r3, r3, #31
 8026296:	d4e2      	bmi.n	802625e <_fflush_r+0xe>
 8026298:	89a3      	ldrh	r3, [r4, #12]
 802629a:	059b      	lsls	r3, r3, #22
 802629c:	d4df      	bmi.n	802625e <_fflush_r+0xe>
 802629e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80262a0:	f7fd fcc6 	bl	8023c30 <__retarget_lock_release_recursive>
 80262a4:	e7db      	b.n	802625e <_fflush_r+0xe>
	...

080262a8 <__swhatbuf_r>:
 80262a8:	b570      	push	{r4, r5, r6, lr}
 80262aa:	000e      	movs	r6, r1
 80262ac:	001d      	movs	r5, r3
 80262ae:	230e      	movs	r3, #14
 80262b0:	5ec9      	ldrsh	r1, [r1, r3]
 80262b2:	0014      	movs	r4, r2
 80262b4:	b096      	sub	sp, #88	@ 0x58
 80262b6:	2900      	cmp	r1, #0
 80262b8:	da0c      	bge.n	80262d4 <__swhatbuf_r+0x2c>
 80262ba:	89b2      	ldrh	r2, [r6, #12]
 80262bc:	2380      	movs	r3, #128	@ 0x80
 80262be:	0011      	movs	r1, r2
 80262c0:	4019      	ands	r1, r3
 80262c2:	421a      	tst	r2, r3
 80262c4:	d114      	bne.n	80262f0 <__swhatbuf_r+0x48>
 80262c6:	2380      	movs	r3, #128	@ 0x80
 80262c8:	00db      	lsls	r3, r3, #3
 80262ca:	2000      	movs	r0, #0
 80262cc:	6029      	str	r1, [r5, #0]
 80262ce:	6023      	str	r3, [r4, #0]
 80262d0:	b016      	add	sp, #88	@ 0x58
 80262d2:	bd70      	pop	{r4, r5, r6, pc}
 80262d4:	466a      	mov	r2, sp
 80262d6:	f000 f865 	bl	80263a4 <_fstat_r>
 80262da:	2800      	cmp	r0, #0
 80262dc:	dbed      	blt.n	80262ba <__swhatbuf_r+0x12>
 80262de:	23f0      	movs	r3, #240	@ 0xf0
 80262e0:	9901      	ldr	r1, [sp, #4]
 80262e2:	021b      	lsls	r3, r3, #8
 80262e4:	4019      	ands	r1, r3
 80262e6:	4b04      	ldr	r3, [pc, #16]	@ (80262f8 <__swhatbuf_r+0x50>)
 80262e8:	18c9      	adds	r1, r1, r3
 80262ea:	424b      	negs	r3, r1
 80262ec:	4159      	adcs	r1, r3
 80262ee:	e7ea      	b.n	80262c6 <__swhatbuf_r+0x1e>
 80262f0:	2100      	movs	r1, #0
 80262f2:	2340      	movs	r3, #64	@ 0x40
 80262f4:	e7e9      	b.n	80262ca <__swhatbuf_r+0x22>
 80262f6:	46c0      	nop			@ (mov r8, r8)
 80262f8:	ffffe000 	.word	0xffffe000

080262fc <__smakebuf_r>:
 80262fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262fe:	2602      	movs	r6, #2
 8026300:	898b      	ldrh	r3, [r1, #12]
 8026302:	0005      	movs	r5, r0
 8026304:	000c      	movs	r4, r1
 8026306:	b085      	sub	sp, #20
 8026308:	4233      	tst	r3, r6
 802630a:	d007      	beq.n	802631c <__smakebuf_r+0x20>
 802630c:	0023      	movs	r3, r4
 802630e:	3347      	adds	r3, #71	@ 0x47
 8026310:	6023      	str	r3, [r4, #0]
 8026312:	6123      	str	r3, [r4, #16]
 8026314:	2301      	movs	r3, #1
 8026316:	6163      	str	r3, [r4, #20]
 8026318:	b005      	add	sp, #20
 802631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802631c:	ab03      	add	r3, sp, #12
 802631e:	aa02      	add	r2, sp, #8
 8026320:	f7ff ffc2 	bl	80262a8 <__swhatbuf_r>
 8026324:	9f02      	ldr	r7, [sp, #8]
 8026326:	9001      	str	r0, [sp, #4]
 8026328:	0039      	movs	r1, r7
 802632a:	0028      	movs	r0, r5
 802632c:	f7fe feee 	bl	802510c <_malloc_r>
 8026330:	2800      	cmp	r0, #0
 8026332:	d108      	bne.n	8026346 <__smakebuf_r+0x4a>
 8026334:	220c      	movs	r2, #12
 8026336:	5ea3      	ldrsh	r3, [r4, r2]
 8026338:	059a      	lsls	r2, r3, #22
 802633a:	d4ed      	bmi.n	8026318 <__smakebuf_r+0x1c>
 802633c:	2203      	movs	r2, #3
 802633e:	4393      	bics	r3, r2
 8026340:	431e      	orrs	r6, r3
 8026342:	81a6      	strh	r6, [r4, #12]
 8026344:	e7e2      	b.n	802630c <__smakebuf_r+0x10>
 8026346:	2380      	movs	r3, #128	@ 0x80
 8026348:	89a2      	ldrh	r2, [r4, #12]
 802634a:	6020      	str	r0, [r4, #0]
 802634c:	4313      	orrs	r3, r2
 802634e:	81a3      	strh	r3, [r4, #12]
 8026350:	9b03      	ldr	r3, [sp, #12]
 8026352:	6120      	str	r0, [r4, #16]
 8026354:	6167      	str	r7, [r4, #20]
 8026356:	2b00      	cmp	r3, #0
 8026358:	d00c      	beq.n	8026374 <__smakebuf_r+0x78>
 802635a:	0028      	movs	r0, r5
 802635c:	230e      	movs	r3, #14
 802635e:	5ee1      	ldrsh	r1, [r4, r3]
 8026360:	f000 f832 	bl	80263c8 <_isatty_r>
 8026364:	2800      	cmp	r0, #0
 8026366:	d005      	beq.n	8026374 <__smakebuf_r+0x78>
 8026368:	2303      	movs	r3, #3
 802636a:	89a2      	ldrh	r2, [r4, #12]
 802636c:	439a      	bics	r2, r3
 802636e:	3b02      	subs	r3, #2
 8026370:	4313      	orrs	r3, r2
 8026372:	81a3      	strh	r3, [r4, #12]
 8026374:	89a3      	ldrh	r3, [r4, #12]
 8026376:	9a01      	ldr	r2, [sp, #4]
 8026378:	4313      	orrs	r3, r2
 802637a:	81a3      	strh	r3, [r4, #12]
 802637c:	e7cc      	b.n	8026318 <__smakebuf_r+0x1c>

0802637e <memmove>:
 802637e:	b510      	push	{r4, lr}
 8026380:	4288      	cmp	r0, r1
 8026382:	d806      	bhi.n	8026392 <memmove+0x14>
 8026384:	2300      	movs	r3, #0
 8026386:	429a      	cmp	r2, r3
 8026388:	d008      	beq.n	802639c <memmove+0x1e>
 802638a:	5ccc      	ldrb	r4, [r1, r3]
 802638c:	54c4      	strb	r4, [r0, r3]
 802638e:	3301      	adds	r3, #1
 8026390:	e7f9      	b.n	8026386 <memmove+0x8>
 8026392:	188b      	adds	r3, r1, r2
 8026394:	4298      	cmp	r0, r3
 8026396:	d2f5      	bcs.n	8026384 <memmove+0x6>
 8026398:	3a01      	subs	r2, #1
 802639a:	d200      	bcs.n	802639e <memmove+0x20>
 802639c:	bd10      	pop	{r4, pc}
 802639e:	5c8b      	ldrb	r3, [r1, r2]
 80263a0:	5483      	strb	r3, [r0, r2]
 80263a2:	e7f9      	b.n	8026398 <memmove+0x1a>

080263a4 <_fstat_r>:
 80263a4:	2300      	movs	r3, #0
 80263a6:	b570      	push	{r4, r5, r6, lr}
 80263a8:	4d06      	ldr	r5, [pc, #24]	@ (80263c4 <_fstat_r+0x20>)
 80263aa:	0004      	movs	r4, r0
 80263ac:	0008      	movs	r0, r1
 80263ae:	0011      	movs	r1, r2
 80263b0:	602b      	str	r3, [r5, #0]
 80263b2:	f7ea fdbb 	bl	8010f2c <_fstat>
 80263b6:	1c43      	adds	r3, r0, #1
 80263b8:	d103      	bne.n	80263c2 <_fstat_r+0x1e>
 80263ba:	682b      	ldr	r3, [r5, #0]
 80263bc:	2b00      	cmp	r3, #0
 80263be:	d000      	beq.n	80263c2 <_fstat_r+0x1e>
 80263c0:	6023      	str	r3, [r4, #0]
 80263c2:	bd70      	pop	{r4, r5, r6, pc}
 80263c4:	200035e0 	.word	0x200035e0

080263c8 <_isatty_r>:
 80263c8:	2300      	movs	r3, #0
 80263ca:	b570      	push	{r4, r5, r6, lr}
 80263cc:	4d06      	ldr	r5, [pc, #24]	@ (80263e8 <_isatty_r+0x20>)
 80263ce:	0004      	movs	r4, r0
 80263d0:	0008      	movs	r0, r1
 80263d2:	602b      	str	r3, [r5, #0]
 80263d4:	f7ea fdb8 	bl	8010f48 <_isatty>
 80263d8:	1c43      	adds	r3, r0, #1
 80263da:	d103      	bne.n	80263e4 <_isatty_r+0x1c>
 80263dc:	682b      	ldr	r3, [r5, #0]
 80263de:	2b00      	cmp	r3, #0
 80263e0:	d000      	beq.n	80263e4 <_isatty_r+0x1c>
 80263e2:	6023      	str	r3, [r4, #0]
 80263e4:	bd70      	pop	{r4, r5, r6, pc}
 80263e6:	46c0      	nop			@ (mov r8, r8)
 80263e8:	200035e0 	.word	0x200035e0

080263ec <_sbrk_r>:
 80263ec:	2300      	movs	r3, #0
 80263ee:	b570      	push	{r4, r5, r6, lr}
 80263f0:	4d06      	ldr	r5, [pc, #24]	@ (802640c <_sbrk_r+0x20>)
 80263f2:	0004      	movs	r4, r0
 80263f4:	0008      	movs	r0, r1
 80263f6:	602b      	str	r3, [r5, #0]
 80263f8:	f7ea fdba 	bl	8010f70 <_sbrk>
 80263fc:	1c43      	adds	r3, r0, #1
 80263fe:	d103      	bne.n	8026408 <_sbrk_r+0x1c>
 8026400:	682b      	ldr	r3, [r5, #0]
 8026402:	2b00      	cmp	r3, #0
 8026404:	d000      	beq.n	8026408 <_sbrk_r+0x1c>
 8026406:	6023      	str	r3, [r4, #0]
 8026408:	bd70      	pop	{r4, r5, r6, pc}
 802640a:	46c0      	nop			@ (mov r8, r8)
 802640c:	200035e0 	.word	0x200035e0

08026410 <__assert_func>:
 8026410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8026412:	0014      	movs	r4, r2
 8026414:	001a      	movs	r2, r3
 8026416:	4b09      	ldr	r3, [pc, #36]	@ (802643c <__assert_func+0x2c>)
 8026418:	0005      	movs	r5, r0
 802641a:	681b      	ldr	r3, [r3, #0]
 802641c:	000e      	movs	r6, r1
 802641e:	68d8      	ldr	r0, [r3, #12]
 8026420:	4b07      	ldr	r3, [pc, #28]	@ (8026440 <__assert_func+0x30>)
 8026422:	2c00      	cmp	r4, #0
 8026424:	d101      	bne.n	802642a <__assert_func+0x1a>
 8026426:	4b07      	ldr	r3, [pc, #28]	@ (8026444 <__assert_func+0x34>)
 8026428:	001c      	movs	r4, r3
 802642a:	4907      	ldr	r1, [pc, #28]	@ (8026448 <__assert_func+0x38>)
 802642c:	9301      	str	r3, [sp, #4]
 802642e:	9402      	str	r4, [sp, #8]
 8026430:	002b      	movs	r3, r5
 8026432:	9600      	str	r6, [sp, #0]
 8026434:	f000 f866 	bl	8026504 <fiprintf>
 8026438:	f000 f874 	bl	8026524 <abort>
 802643c:	200003e0 	.word	0x200003e0
 8026440:	0802baf1 	.word	0x0802baf1
 8026444:	0802bb2c 	.word	0x0802bb2c
 8026448:	0802bafe 	.word	0x0802bafe

0802644c <_calloc_r>:
 802644c:	b570      	push	{r4, r5, r6, lr}
 802644e:	0c0b      	lsrs	r3, r1, #16
 8026450:	0c15      	lsrs	r5, r2, #16
 8026452:	2b00      	cmp	r3, #0
 8026454:	d11e      	bne.n	8026494 <_calloc_r+0x48>
 8026456:	2d00      	cmp	r5, #0
 8026458:	d10c      	bne.n	8026474 <_calloc_r+0x28>
 802645a:	b289      	uxth	r1, r1
 802645c:	b294      	uxth	r4, r2
 802645e:	434c      	muls	r4, r1
 8026460:	0021      	movs	r1, r4
 8026462:	f7fe fe53 	bl	802510c <_malloc_r>
 8026466:	1e05      	subs	r5, r0, #0
 8026468:	d01a      	beq.n	80264a0 <_calloc_r+0x54>
 802646a:	0022      	movs	r2, r4
 802646c:	2100      	movs	r1, #0
 802646e:	f7fd fb0f 	bl	8023a90 <memset>
 8026472:	e016      	b.n	80264a2 <_calloc_r+0x56>
 8026474:	1c2b      	adds	r3, r5, #0
 8026476:	1c0c      	adds	r4, r1, #0
 8026478:	b289      	uxth	r1, r1
 802647a:	b292      	uxth	r2, r2
 802647c:	434a      	muls	r2, r1
 802647e:	b29b      	uxth	r3, r3
 8026480:	b2a1      	uxth	r1, r4
 8026482:	4359      	muls	r1, r3
 8026484:	0c14      	lsrs	r4, r2, #16
 8026486:	190c      	adds	r4, r1, r4
 8026488:	0c23      	lsrs	r3, r4, #16
 802648a:	d107      	bne.n	802649c <_calloc_r+0x50>
 802648c:	0424      	lsls	r4, r4, #16
 802648e:	b292      	uxth	r2, r2
 8026490:	4314      	orrs	r4, r2
 8026492:	e7e5      	b.n	8026460 <_calloc_r+0x14>
 8026494:	2d00      	cmp	r5, #0
 8026496:	d101      	bne.n	802649c <_calloc_r+0x50>
 8026498:	1c14      	adds	r4, r2, #0
 802649a:	e7ed      	b.n	8026478 <_calloc_r+0x2c>
 802649c:	230c      	movs	r3, #12
 802649e:	6003      	str	r3, [r0, #0]
 80264a0:	2500      	movs	r5, #0
 80264a2:	0028      	movs	r0, r5
 80264a4:	bd70      	pop	{r4, r5, r6, pc}

080264a6 <_realloc_r>:
 80264a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80264a8:	0006      	movs	r6, r0
 80264aa:	000c      	movs	r4, r1
 80264ac:	0015      	movs	r5, r2
 80264ae:	2900      	cmp	r1, #0
 80264b0:	d105      	bne.n	80264be <_realloc_r+0x18>
 80264b2:	0011      	movs	r1, r2
 80264b4:	f7fe fe2a 	bl	802510c <_malloc_r>
 80264b8:	0004      	movs	r4, r0
 80264ba:	0020      	movs	r0, r4
 80264bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80264be:	2a00      	cmp	r2, #0
 80264c0:	d103      	bne.n	80264ca <_realloc_r+0x24>
 80264c2:	f7fe fa53 	bl	802496c <_free_r>
 80264c6:	2400      	movs	r4, #0
 80264c8:	e7f7      	b.n	80264ba <_realloc_r+0x14>
 80264ca:	f000 f832 	bl	8026532 <_malloc_usable_size_r>
 80264ce:	0007      	movs	r7, r0
 80264d0:	4285      	cmp	r5, r0
 80264d2:	d802      	bhi.n	80264da <_realloc_r+0x34>
 80264d4:	0843      	lsrs	r3, r0, #1
 80264d6:	42ab      	cmp	r3, r5
 80264d8:	d3ef      	bcc.n	80264ba <_realloc_r+0x14>
 80264da:	0029      	movs	r1, r5
 80264dc:	0030      	movs	r0, r6
 80264de:	f7fe fe15 	bl	802510c <_malloc_r>
 80264e2:	9001      	str	r0, [sp, #4]
 80264e4:	2800      	cmp	r0, #0
 80264e6:	d0ee      	beq.n	80264c6 <_realloc_r+0x20>
 80264e8:	002a      	movs	r2, r5
 80264ea:	42bd      	cmp	r5, r7
 80264ec:	d900      	bls.n	80264f0 <_realloc_r+0x4a>
 80264ee:	003a      	movs	r2, r7
 80264f0:	0021      	movs	r1, r4
 80264f2:	9801      	ldr	r0, [sp, #4]
 80264f4:	f7fd fba8 	bl	8023c48 <memcpy>
 80264f8:	0021      	movs	r1, r4
 80264fa:	0030      	movs	r0, r6
 80264fc:	f7fe fa36 	bl	802496c <_free_r>
 8026500:	9c01      	ldr	r4, [sp, #4]
 8026502:	e7da      	b.n	80264ba <_realloc_r+0x14>

08026504 <fiprintf>:
 8026504:	b40e      	push	{r1, r2, r3}
 8026506:	b517      	push	{r0, r1, r2, r4, lr}
 8026508:	4c05      	ldr	r4, [pc, #20]	@ (8026520 <fiprintf+0x1c>)
 802650a:	ab05      	add	r3, sp, #20
 802650c:	cb04      	ldmia	r3!, {r2}
 802650e:	0001      	movs	r1, r0
 8026510:	6820      	ldr	r0, [r4, #0]
 8026512:	9301      	str	r3, [sp, #4]
 8026514:	f7ff fcfa 	bl	8025f0c <_vfiprintf_r>
 8026518:	bc1e      	pop	{r1, r2, r3, r4}
 802651a:	bc08      	pop	{r3}
 802651c:	b003      	add	sp, #12
 802651e:	4718      	bx	r3
 8026520:	200003e0 	.word	0x200003e0

08026524 <abort>:
 8026524:	2006      	movs	r0, #6
 8026526:	b510      	push	{r4, lr}
 8026528:	f000 f834 	bl	8026594 <raise>
 802652c:	2001      	movs	r0, #1
 802652e:	f7ea fcc9 	bl	8010ec4 <_exit>

08026532 <_malloc_usable_size_r>:
 8026532:	1f0b      	subs	r3, r1, #4
 8026534:	681b      	ldr	r3, [r3, #0]
 8026536:	1f18      	subs	r0, r3, #4
 8026538:	2b00      	cmp	r3, #0
 802653a:	da01      	bge.n	8026540 <_malloc_usable_size_r+0xe>
 802653c:	580b      	ldr	r3, [r1, r0]
 802653e:	18c0      	adds	r0, r0, r3
 8026540:	4770      	bx	lr

08026542 <_raise_r>:
 8026542:	b570      	push	{r4, r5, r6, lr}
 8026544:	0004      	movs	r4, r0
 8026546:	000d      	movs	r5, r1
 8026548:	291f      	cmp	r1, #31
 802654a:	d904      	bls.n	8026556 <_raise_r+0x14>
 802654c:	2316      	movs	r3, #22
 802654e:	6003      	str	r3, [r0, #0]
 8026550:	2001      	movs	r0, #1
 8026552:	4240      	negs	r0, r0
 8026554:	bd70      	pop	{r4, r5, r6, pc}
 8026556:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8026558:	2b00      	cmp	r3, #0
 802655a:	d004      	beq.n	8026566 <_raise_r+0x24>
 802655c:	008a      	lsls	r2, r1, #2
 802655e:	189b      	adds	r3, r3, r2
 8026560:	681a      	ldr	r2, [r3, #0]
 8026562:	2a00      	cmp	r2, #0
 8026564:	d108      	bne.n	8026578 <_raise_r+0x36>
 8026566:	0020      	movs	r0, r4
 8026568:	f000 f830 	bl	80265cc <_getpid_r>
 802656c:	002a      	movs	r2, r5
 802656e:	0001      	movs	r1, r0
 8026570:	0020      	movs	r0, r4
 8026572:	f000 f819 	bl	80265a8 <_kill_r>
 8026576:	e7ed      	b.n	8026554 <_raise_r+0x12>
 8026578:	2a01      	cmp	r2, #1
 802657a:	d009      	beq.n	8026590 <_raise_r+0x4e>
 802657c:	1c51      	adds	r1, r2, #1
 802657e:	d103      	bne.n	8026588 <_raise_r+0x46>
 8026580:	2316      	movs	r3, #22
 8026582:	6003      	str	r3, [r0, #0]
 8026584:	2001      	movs	r0, #1
 8026586:	e7e5      	b.n	8026554 <_raise_r+0x12>
 8026588:	2100      	movs	r1, #0
 802658a:	0028      	movs	r0, r5
 802658c:	6019      	str	r1, [r3, #0]
 802658e:	4790      	blx	r2
 8026590:	2000      	movs	r0, #0
 8026592:	e7df      	b.n	8026554 <_raise_r+0x12>

08026594 <raise>:
 8026594:	b510      	push	{r4, lr}
 8026596:	4b03      	ldr	r3, [pc, #12]	@ (80265a4 <raise+0x10>)
 8026598:	0001      	movs	r1, r0
 802659a:	6818      	ldr	r0, [r3, #0]
 802659c:	f7ff ffd1 	bl	8026542 <_raise_r>
 80265a0:	bd10      	pop	{r4, pc}
 80265a2:	46c0      	nop			@ (mov r8, r8)
 80265a4:	200003e0 	.word	0x200003e0

080265a8 <_kill_r>:
 80265a8:	2300      	movs	r3, #0
 80265aa:	b570      	push	{r4, r5, r6, lr}
 80265ac:	4d06      	ldr	r5, [pc, #24]	@ (80265c8 <_kill_r+0x20>)
 80265ae:	0004      	movs	r4, r0
 80265b0:	0008      	movs	r0, r1
 80265b2:	0011      	movs	r1, r2
 80265b4:	602b      	str	r3, [r5, #0]
 80265b6:	f7ea fc75 	bl	8010ea4 <_kill>
 80265ba:	1c43      	adds	r3, r0, #1
 80265bc:	d103      	bne.n	80265c6 <_kill_r+0x1e>
 80265be:	682b      	ldr	r3, [r5, #0]
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	d000      	beq.n	80265c6 <_kill_r+0x1e>
 80265c4:	6023      	str	r3, [r4, #0]
 80265c6:	bd70      	pop	{r4, r5, r6, pc}
 80265c8:	200035e0 	.word	0x200035e0

080265cc <_getpid_r>:
 80265cc:	b510      	push	{r4, lr}
 80265ce:	f7ea fc63 	bl	8010e98 <_getpid>
 80265d2:	bd10      	pop	{r4, pc}

080265d4 <pow>:
 80265d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80265d6:	0014      	movs	r4, r2
 80265d8:	001d      	movs	r5, r3
 80265da:	9000      	str	r0, [sp, #0]
 80265dc:	9101      	str	r1, [sp, #4]
 80265de:	f000 f959 	bl	8026894 <__ieee754_pow>
 80265e2:	0022      	movs	r2, r4
 80265e4:	0006      	movs	r6, r0
 80265e6:	000f      	movs	r7, r1
 80265e8:	002b      	movs	r3, r5
 80265ea:	0020      	movs	r0, r4
 80265ec:	0029      	movs	r1, r5
 80265ee:	f7dc fe89 	bl	8003304 <__aeabi_dcmpun>
 80265f2:	2800      	cmp	r0, #0
 80265f4:	d13f      	bne.n	8026676 <pow+0xa2>
 80265f6:	9800      	ldr	r0, [sp, #0]
 80265f8:	9901      	ldr	r1, [sp, #4]
 80265fa:	2200      	movs	r2, #0
 80265fc:	2300      	movs	r3, #0
 80265fe:	f7d9 ff57 	bl	80004b0 <__aeabi_dcmpeq>
 8026602:	2800      	cmp	r0, #0
 8026604:	d019      	beq.n	802663a <pow+0x66>
 8026606:	2200      	movs	r2, #0
 8026608:	2300      	movs	r3, #0
 802660a:	0020      	movs	r0, r4
 802660c:	0029      	movs	r1, r5
 802660e:	f7d9 ff4f 	bl	80004b0 <__aeabi_dcmpeq>
 8026612:	2800      	cmp	r0, #0
 8026614:	d146      	bne.n	80266a4 <pow+0xd0>
 8026616:	0020      	movs	r0, r4
 8026618:	0029      	movs	r1, r5
 802661a:	f000 f88d 	bl	8026738 <finite>
 802661e:	2800      	cmp	r0, #0
 8026620:	d029      	beq.n	8026676 <pow+0xa2>
 8026622:	2200      	movs	r2, #0
 8026624:	2300      	movs	r3, #0
 8026626:	0020      	movs	r0, r4
 8026628:	0029      	movs	r1, r5
 802662a:	f7d9 ff47 	bl	80004bc <__aeabi_dcmplt>
 802662e:	2800      	cmp	r0, #0
 8026630:	d021      	beq.n	8026676 <pow+0xa2>
 8026632:	f7fd fad1 	bl	8023bd8 <__errno>
 8026636:	2322      	movs	r3, #34	@ 0x22
 8026638:	e01c      	b.n	8026674 <pow+0xa0>
 802663a:	0030      	movs	r0, r6
 802663c:	0039      	movs	r1, r7
 802663e:	f000 f87b 	bl	8026738 <finite>
 8026642:	2800      	cmp	r0, #0
 8026644:	d11b      	bne.n	802667e <pow+0xaa>
 8026646:	9800      	ldr	r0, [sp, #0]
 8026648:	9901      	ldr	r1, [sp, #4]
 802664a:	f000 f875 	bl	8026738 <finite>
 802664e:	2800      	cmp	r0, #0
 8026650:	d015      	beq.n	802667e <pow+0xaa>
 8026652:	0020      	movs	r0, r4
 8026654:	0029      	movs	r1, r5
 8026656:	f000 f86f 	bl	8026738 <finite>
 802665a:	2800      	cmp	r0, #0
 802665c:	d00f      	beq.n	802667e <pow+0xaa>
 802665e:	0032      	movs	r2, r6
 8026660:	003b      	movs	r3, r7
 8026662:	0030      	movs	r0, r6
 8026664:	0039      	movs	r1, r7
 8026666:	f7dc fe4d 	bl	8003304 <__aeabi_dcmpun>
 802666a:	2800      	cmp	r0, #0
 802666c:	d0e1      	beq.n	8026632 <pow+0x5e>
 802666e:	f7fd fab3 	bl	8023bd8 <__errno>
 8026672:	2321      	movs	r3, #33	@ 0x21
 8026674:	6003      	str	r3, [r0, #0]
 8026676:	0030      	movs	r0, r6
 8026678:	0039      	movs	r1, r7
 802667a:	b003      	add	sp, #12
 802667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802667e:	2200      	movs	r2, #0
 8026680:	2300      	movs	r3, #0
 8026682:	0030      	movs	r0, r6
 8026684:	0039      	movs	r1, r7
 8026686:	f7d9 ff13 	bl	80004b0 <__aeabi_dcmpeq>
 802668a:	2800      	cmp	r0, #0
 802668c:	d0f3      	beq.n	8026676 <pow+0xa2>
 802668e:	9800      	ldr	r0, [sp, #0]
 8026690:	9901      	ldr	r1, [sp, #4]
 8026692:	f000 f851 	bl	8026738 <finite>
 8026696:	2800      	cmp	r0, #0
 8026698:	d0ed      	beq.n	8026676 <pow+0xa2>
 802669a:	0020      	movs	r0, r4
 802669c:	0029      	movs	r1, r5
 802669e:	f000 f84b 	bl	8026738 <finite>
 80266a2:	e7c4      	b.n	802662e <pow+0x5a>
 80266a4:	2600      	movs	r6, #0
 80266a6:	4f01      	ldr	r7, [pc, #4]	@ (80266ac <pow+0xd8>)
 80266a8:	e7e5      	b.n	8026676 <pow+0xa2>
 80266aa:	46c0      	nop			@ (mov r8, r8)
 80266ac:	3ff00000 	.word	0x3ff00000

080266b0 <expf>:
 80266b0:	b570      	push	{r4, r5, r6, lr}
 80266b2:	1c04      	adds	r4, r0, #0
 80266b4:	f000 fe1e 	bl	80272f4 <__ieee754_expf>
 80266b8:	1c05      	adds	r5, r0, #0
 80266ba:	1c20      	adds	r0, r4, #0
 80266bc:	f000 f844 	bl	8026748 <finitef>
 80266c0:	2800      	cmp	r0, #0
 80266c2:	d00b      	beq.n	80266dc <expf+0x2c>
 80266c4:	490c      	ldr	r1, [pc, #48]	@ (80266f8 <expf+0x48>)
 80266c6:	1c20      	adds	r0, r4, #0
 80266c8:	f7d9 ff46 	bl	8000558 <__aeabi_fcmpgt>
 80266cc:	2800      	cmp	r0, #0
 80266ce:	d007      	beq.n	80266e0 <expf+0x30>
 80266d0:	f7fd fa82 	bl	8023bd8 <__errno>
 80266d4:	25ff      	movs	r5, #255	@ 0xff
 80266d6:	2322      	movs	r3, #34	@ 0x22
 80266d8:	05ed      	lsls	r5, r5, #23
 80266da:	6003      	str	r3, [r0, #0]
 80266dc:	1c28      	adds	r0, r5, #0
 80266de:	bd70      	pop	{r4, r5, r6, pc}
 80266e0:	4906      	ldr	r1, [pc, #24]	@ (80266fc <expf+0x4c>)
 80266e2:	1c20      	adds	r0, r4, #0
 80266e4:	f7d9 ff24 	bl	8000530 <__aeabi_fcmplt>
 80266e8:	2800      	cmp	r0, #0
 80266ea:	d0f7      	beq.n	80266dc <expf+0x2c>
 80266ec:	f7fd fa74 	bl	8023bd8 <__errno>
 80266f0:	2322      	movs	r3, #34	@ 0x22
 80266f2:	2500      	movs	r5, #0
 80266f4:	6003      	str	r3, [r0, #0]
 80266f6:	e7f1      	b.n	80266dc <expf+0x2c>
 80266f8:	42b17217 	.word	0x42b17217
 80266fc:	c2cff1b5 	.word	0xc2cff1b5

08026700 <sqrtf>:
 8026700:	b570      	push	{r4, r5, r6, lr}
 8026702:	1c05      	adds	r5, r0, #0
 8026704:	f000 f82a 	bl	802675c <__ieee754_sqrtf>
 8026708:	1c29      	adds	r1, r5, #0
 802670a:	1c04      	adds	r4, r0, #0
 802670c:	1c28      	adds	r0, r5, #0
 802670e:	f7da ff29 	bl	8001564 <__aeabi_fcmpun>
 8026712:	2800      	cmp	r0, #0
 8026714:	d10e      	bne.n	8026734 <sqrtf+0x34>
 8026716:	2100      	movs	r1, #0
 8026718:	1c28      	adds	r0, r5, #0
 802671a:	f7d9 ff09 	bl	8000530 <__aeabi_fcmplt>
 802671e:	2800      	cmp	r0, #0
 8026720:	d008      	beq.n	8026734 <sqrtf+0x34>
 8026722:	f7fd fa59 	bl	8023bd8 <__errno>
 8026726:	2321      	movs	r3, #33	@ 0x21
 8026728:	2100      	movs	r1, #0
 802672a:	6003      	str	r3, [r0, #0]
 802672c:	1c08      	adds	r0, r1, #0
 802672e:	f7da fa51 	bl	8000bd4 <__aeabi_fdiv>
 8026732:	1c04      	adds	r4, r0, #0
 8026734:	1c20      	adds	r0, r4, #0
 8026736:	bd70      	pop	{r4, r5, r6, pc}

08026738 <finite>:
 8026738:	4b02      	ldr	r3, [pc, #8]	@ (8026744 <finite+0xc>)
 802673a:	0048      	lsls	r0, r1, #1
 802673c:	0840      	lsrs	r0, r0, #1
 802673e:	18c0      	adds	r0, r0, r3
 8026740:	0fc0      	lsrs	r0, r0, #31
 8026742:	4770      	bx	lr
 8026744:	80100000 	.word	0x80100000

08026748 <finitef>:
 8026748:	22ff      	movs	r2, #255	@ 0xff
 802674a:	0043      	lsls	r3, r0, #1
 802674c:	085b      	lsrs	r3, r3, #1
 802674e:	2001      	movs	r0, #1
 8026750:	05d2      	lsls	r2, r2, #23
 8026752:	4293      	cmp	r3, r2
 8026754:	db00      	blt.n	8026758 <finitef+0x10>
 8026756:	2000      	movs	r0, #0
 8026758:	4770      	bx	lr
	...

0802675c <__ieee754_sqrtf>:
 802675c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802675e:	0003      	movs	r3, r0
 8026760:	0042      	lsls	r2, r0, #1
 8026762:	1c04      	adds	r4, r0, #0
 8026764:	20ff      	movs	r0, #255	@ 0xff
 8026766:	0852      	lsrs	r2, r2, #1
 8026768:	05c0      	lsls	r0, r0, #23
 802676a:	4282      	cmp	r2, r0
 802676c:	d30a      	bcc.n	8026784 <__ieee754_sqrtf+0x28>
 802676e:	1c21      	adds	r1, r4, #0
 8026770:	1c20      	adds	r0, r4, #0
 8026772:	f7da fc15 	bl	8000fa0 <__aeabi_fmul>
 8026776:	1c01      	adds	r1, r0, #0
 8026778:	1c20      	adds	r0, r4, #0
 802677a:	f7da f8a1 	bl	80008c0 <__aeabi_fadd>
 802677e:	1c04      	adds	r4, r0, #0
 8026780:	1c20      	adds	r0, r4, #0
 8026782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026784:	2a00      	cmp	r2, #0
 8026786:	d0fb      	beq.n	8026780 <__ieee754_sqrtf+0x24>
 8026788:	2c00      	cmp	r4, #0
 802678a:	da07      	bge.n	802679c <__ieee754_sqrtf+0x40>
 802678c:	1c21      	adds	r1, r4, #0
 802678e:	1c20      	adds	r0, r4, #0
 8026790:	f7da fd44 	bl	800121c <__aeabi_fsub>
 8026794:	1c01      	adds	r1, r0, #0
 8026796:	f7da fa1d 	bl	8000bd4 <__aeabi_fdiv>
 802679a:	e7f0      	b.n	802677e <__ieee754_sqrtf+0x22>
 802679c:	0022      	movs	r2, r4
 802679e:	15e1      	asrs	r1, r4, #23
 80267a0:	4002      	ands	r2, r0
 80267a2:	4204      	tst	r4, r0
 80267a4:	d046      	beq.n	8026834 <__ieee754_sqrtf+0xd8>
 80267a6:	2280      	movs	r2, #128	@ 0x80
 80267a8:	000f      	movs	r7, r1
 80267aa:	025b      	lsls	r3, r3, #9
 80267ac:	0a5b      	lsrs	r3, r3, #9
 80267ae:	0412      	lsls	r2, r2, #16
 80267b0:	3f7f      	subs	r7, #127	@ 0x7f
 80267b2:	4313      	orrs	r3, r2
 80267b4:	07c9      	lsls	r1, r1, #31
 80267b6:	d400      	bmi.n	80267ba <__ieee754_sqrtf+0x5e>
 80267b8:	005b      	lsls	r3, r3, #1
 80267ba:	2400      	movs	r4, #0
 80267bc:	2180      	movs	r1, #128	@ 0x80
 80267be:	2019      	movs	r0, #25
 80267c0:	0026      	movs	r6, r4
 80267c2:	107f      	asrs	r7, r7, #1
 80267c4:	005b      	lsls	r3, r3, #1
 80267c6:	0449      	lsls	r1, r1, #17
 80267c8:	1875      	adds	r5, r6, r1
 80267ca:	001a      	movs	r2, r3
 80267cc:	429d      	cmp	r5, r3
 80267ce:	dc02      	bgt.n	80267d6 <__ieee754_sqrtf+0x7a>
 80267d0:	186e      	adds	r6, r5, r1
 80267d2:	1b5a      	subs	r2, r3, r5
 80267d4:	1864      	adds	r4, r4, r1
 80267d6:	3801      	subs	r0, #1
 80267d8:	0053      	lsls	r3, r2, #1
 80267da:	0849      	lsrs	r1, r1, #1
 80267dc:	2800      	cmp	r0, #0
 80267de:	d1f3      	bne.n	80267c8 <__ieee754_sqrtf+0x6c>
 80267e0:	2a00      	cmp	r2, #0
 80267e2:	d019      	beq.n	8026818 <__ieee754_sqrtf+0xbc>
 80267e4:	4d17      	ldr	r5, [pc, #92]	@ (8026844 <__ieee754_sqrtf+0xe8>)
 80267e6:	4e18      	ldr	r6, [pc, #96]	@ (8026848 <__ieee754_sqrtf+0xec>)
 80267e8:	6828      	ldr	r0, [r5, #0]
 80267ea:	6831      	ldr	r1, [r6, #0]
 80267ec:	682b      	ldr	r3, [r5, #0]
 80267ee:	9301      	str	r3, [sp, #4]
 80267f0:	f7da fd14 	bl	800121c <__aeabi_fsub>
 80267f4:	1c01      	adds	r1, r0, #0
 80267f6:	9801      	ldr	r0, [sp, #4]
 80267f8:	f7d9 fea4 	bl	8000544 <__aeabi_fcmple>
 80267fc:	2800      	cmp	r0, #0
 80267fe:	d00b      	beq.n	8026818 <__ieee754_sqrtf+0xbc>
 8026800:	6828      	ldr	r0, [r5, #0]
 8026802:	6831      	ldr	r1, [r6, #0]
 8026804:	f7da f85c 	bl	80008c0 <__aeabi_fadd>
 8026808:	682d      	ldr	r5, [r5, #0]
 802680a:	1c01      	adds	r1, r0, #0
 802680c:	1c28      	adds	r0, r5, #0
 802680e:	f7d9 fe8f 	bl	8000530 <__aeabi_fcmplt>
 8026812:	2800      	cmp	r0, #0
 8026814:	d011      	beq.n	802683a <__ieee754_sqrtf+0xde>
 8026816:	3402      	adds	r4, #2
 8026818:	23fc      	movs	r3, #252	@ 0xfc
 802681a:	1064      	asrs	r4, r4, #1
 802681c:	059b      	lsls	r3, r3, #22
 802681e:	18e3      	adds	r3, r4, r3
 8026820:	05fc      	lsls	r4, r7, #23
 8026822:	18e4      	adds	r4, r4, r3
 8026824:	e7ac      	b.n	8026780 <__ieee754_sqrtf+0x24>
 8026826:	005b      	lsls	r3, r3, #1
 8026828:	3201      	adds	r2, #1
 802682a:	4203      	tst	r3, r0
 802682c:	d0fb      	beq.n	8026826 <__ieee754_sqrtf+0xca>
 802682e:	3a01      	subs	r2, #1
 8026830:	1a89      	subs	r1, r1, r2
 8026832:	e7b8      	b.n	80267a6 <__ieee754_sqrtf+0x4a>
 8026834:	2080      	movs	r0, #128	@ 0x80
 8026836:	0400      	lsls	r0, r0, #16
 8026838:	e7f7      	b.n	802682a <__ieee754_sqrtf+0xce>
 802683a:	2301      	movs	r3, #1
 802683c:	3401      	adds	r4, #1
 802683e:	439c      	bics	r4, r3
 8026840:	e7ea      	b.n	8026818 <__ieee754_sqrtf+0xbc>
 8026842:	46c0      	nop			@ (mov r8, r8)
 8026844:	20000434 	.word	0x20000434
 8026848:	20000430 	.word	0x20000430

0802684c <roundf>:
 802684c:	0dc3      	lsrs	r3, r0, #23
 802684e:	b2db      	uxtb	r3, r3
 8026850:	3b7f      	subs	r3, #127	@ 0x7f
 8026852:	0002      	movs	r2, r0
 8026854:	b510      	push	{r4, lr}
 8026856:	2b16      	cmp	r3, #22
 8026858:	dc13      	bgt.n	8026882 <roundf+0x36>
 802685a:	2b00      	cmp	r3, #0
 802685c:	da07      	bge.n	802686e <roundf+0x22>
 802685e:	0fc2      	lsrs	r2, r0, #31
 8026860:	07d0      	lsls	r0, r2, #31
 8026862:	3301      	adds	r3, #1
 8026864:	d102      	bne.n	802686c <roundf+0x20>
 8026866:	23fe      	movs	r3, #254	@ 0xfe
 8026868:	059b      	lsls	r3, r3, #22
 802686a:	4318      	orrs	r0, r3
 802686c:	bd10      	pop	{r4, pc}
 802686e:	4908      	ldr	r1, [pc, #32]	@ (8026890 <roundf+0x44>)
 8026870:	4119      	asrs	r1, r3
 8026872:	4208      	tst	r0, r1
 8026874:	d0fa      	beq.n	802686c <roundf+0x20>
 8026876:	2080      	movs	r0, #128	@ 0x80
 8026878:	03c0      	lsls	r0, r0, #15
 802687a:	4118      	asrs	r0, r3
 802687c:	1880      	adds	r0, r0, r2
 802687e:	4388      	bics	r0, r1
 8026880:	e7f4      	b.n	802686c <roundf+0x20>
 8026882:	2b80      	cmp	r3, #128	@ 0x80
 8026884:	d1f2      	bne.n	802686c <roundf+0x20>
 8026886:	1c01      	adds	r1, r0, #0
 8026888:	f7da f81a 	bl	80008c0 <__aeabi_fadd>
 802688c:	e7ee      	b.n	802686c <roundf+0x20>
 802688e:	46c0      	nop			@ (mov r8, r8)
 8026890:	007fffff 	.word	0x007fffff

08026894 <__ieee754_pow>:
 8026894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026896:	b095      	sub	sp, #84	@ 0x54
 8026898:	9202      	str	r2, [sp, #8]
 802689a:	9303      	str	r3, [sp, #12]
 802689c:	9b03      	ldr	r3, [sp, #12]
 802689e:	9a03      	ldr	r2, [sp, #12]
 80268a0:	9306      	str	r3, [sp, #24]
 80268a2:	0052      	lsls	r2, r2, #1
 80268a4:	9b02      	ldr	r3, [sp, #8]
 80268a6:	0852      	lsrs	r2, r2, #1
 80268a8:	9204      	str	r2, [sp, #16]
 80268aa:	001a      	movs	r2, r3
 80268ac:	000f      	movs	r7, r1
 80268ae:	9904      	ldr	r1, [sp, #16]
 80268b0:	0006      	movs	r6, r0
 80268b2:	430a      	orrs	r2, r1
 80268b4:	d119      	bne.n	80268ea <__ieee754_pow+0x56>
 80268b6:	2180      	movs	r1, #128	@ 0x80
 80268b8:	0309      	lsls	r1, r1, #12
 80268ba:	4079      	eors	r1, r7
 80268bc:	0002      	movs	r2, r0
 80268be:	000b      	movs	r3, r1
 80268c0:	1892      	adds	r2, r2, r2
 80268c2:	415b      	adcs	r3, r3
 80268c4:	499b      	ldr	r1, [pc, #620]	@ (8026b34 <__ieee754_pow+0x2a0>)
 80268c6:	428b      	cmp	r3, r1
 80268c8:	d806      	bhi.n	80268d8 <__ieee754_pow+0x44>
 80268ca:	d001      	beq.n	80268d0 <__ieee754_pow+0x3c>
 80268cc:	f000 fcde 	bl	802728c <__ieee754_pow+0x9f8>
 80268d0:	2a00      	cmp	r2, #0
 80268d2:	d101      	bne.n	80268d8 <__ieee754_pow+0x44>
 80268d4:	f000 fcda 	bl	802728c <__ieee754_pow+0x9f8>
 80268d8:	9a02      	ldr	r2, [sp, #8]
 80268da:	9b03      	ldr	r3, [sp, #12]
 80268dc:	0030      	movs	r0, r6
 80268de:	0039      	movs	r1, r7
 80268e0:	f7da ff04 	bl	80016ec <__aeabi_dadd>
 80268e4:	9000      	str	r0, [sp, #0]
 80268e6:	9101      	str	r1, [sp, #4]
 80268e8:	e0af      	b.n	8026a4a <__ieee754_pow+0x1b6>
 80268ea:	4a93      	ldr	r2, [pc, #588]	@ (8026b38 <__ieee754_pow+0x2a4>)
 80268ec:	007c      	lsls	r4, r7, #1
 80268ee:	9708      	str	r7, [sp, #32]
 80268f0:	900e      	str	r0, [sp, #56]	@ 0x38
 80268f2:	0864      	lsrs	r4, r4, #1
 80268f4:	4294      	cmp	r4, r2
 80268f6:	d809      	bhi.n	802690c <__ieee754_pow+0x78>
 80268f8:	d101      	bne.n	80268fe <__ieee754_pow+0x6a>
 80268fa:	2800      	cmp	r0, #0
 80268fc:	d1ec      	bne.n	80268d8 <__ieee754_pow+0x44>
 80268fe:	9904      	ldr	r1, [sp, #16]
 8026900:	4a8d      	ldr	r2, [pc, #564]	@ (8026b38 <__ieee754_pow+0x2a4>)
 8026902:	4291      	cmp	r1, r2
 8026904:	d802      	bhi.n	802690c <__ieee754_pow+0x78>
 8026906:	d10c      	bne.n	8026922 <__ieee754_pow+0x8e>
 8026908:	2b00      	cmp	r3, #0
 802690a:	d00a      	beq.n	8026922 <__ieee754_pow+0x8e>
 802690c:	4b8b      	ldr	r3, [pc, #556]	@ (8026b3c <__ieee754_pow+0x2a8>)
 802690e:	18fb      	adds	r3, r7, r3
 8026910:	4333      	orrs	r3, r6
 8026912:	d1e1      	bne.n	80268d8 <__ieee754_pow+0x44>
 8026914:	2180      	movs	r1, #128	@ 0x80
 8026916:	9803      	ldr	r0, [sp, #12]
 8026918:	0309      	lsls	r1, r1, #12
 802691a:	4048      	eors	r0, r1
 802691c:	0003      	movs	r3, r0
 802691e:	9a02      	ldr	r2, [sp, #8]
 8026920:	e7ce      	b.n	80268c0 <__ieee754_pow+0x2c>
 8026922:	2500      	movs	r5, #0
 8026924:	9a08      	ldr	r2, [sp, #32]
 8026926:	940a      	str	r4, [sp, #40]	@ 0x28
 8026928:	42aa      	cmp	r2, r5
 802692a:	da68      	bge.n	80269fe <__ieee754_pow+0x16a>
 802692c:	4a84      	ldr	r2, [pc, #528]	@ (8026b40 <__ieee754_pow+0x2ac>)
 802692e:	9904      	ldr	r1, [sp, #16]
 8026930:	4291      	cmp	r1, r2
 8026932:	d863      	bhi.n	80269fc <__ieee754_pow+0x168>
 8026934:	4a83      	ldr	r2, [pc, #524]	@ (8026b44 <__ieee754_pow+0x2b0>)
 8026936:	4291      	cmp	r1, r2
 8026938:	d910      	bls.n	802695c <__ieee754_pow+0xc8>
 802693a:	150a      	asrs	r2, r1, #20
 802693c:	4982      	ldr	r1, [pc, #520]	@ (8026b48 <__ieee754_pow+0x2b4>)
 802693e:	1852      	adds	r2, r2, r1
 8026940:	2a14      	cmp	r2, #20
 8026942:	dd3b      	ble.n	80269bc <__ieee754_pow+0x128>
 8026944:	2134      	movs	r1, #52	@ 0x34
 8026946:	1a89      	subs	r1, r1, r2
 8026948:	9a02      	ldr	r2, [sp, #8]
 802694a:	40ca      	lsrs	r2, r1
 802694c:	0010      	movs	r0, r2
 802694e:	4088      	lsls	r0, r1
 8026950:	4298      	cmp	r0, r3
 8026952:	d103      	bne.n	802695c <__ieee754_pow+0xc8>
 8026954:	2101      	movs	r1, #1
 8026956:	3502      	adds	r5, #2
 8026958:	400a      	ands	r2, r1
 802695a:	1aad      	subs	r5, r5, r2
 802695c:	2b00      	cmp	r3, #0
 802695e:	d03d      	beq.n	80269dc <__ieee754_pow+0x148>
 8026960:	0030      	movs	r0, r6
 8026962:	0039      	movs	r1, r7
 8026964:	f000 fcc2 	bl	80272ec <fabs>
 8026968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802696a:	9000      	str	r0, [sp, #0]
 802696c:	9101      	str	r1, [sp, #4]
 802696e:	2b00      	cmp	r3, #0
 8026970:	d000      	beq.n	8026974 <__ieee754_pow+0xe0>
 8026972:	e093      	b.n	8026a9c <__ieee754_pow+0x208>
 8026974:	4a75      	ldr	r2, [pc, #468]	@ (8026b4c <__ieee754_pow+0x2b8>)
 8026976:	00bb      	lsls	r3, r7, #2
 8026978:	089b      	lsrs	r3, r3, #2
 802697a:	4293      	cmp	r3, r2
 802697c:	d002      	beq.n	8026984 <__ieee754_pow+0xf0>
 802697e:	2c00      	cmp	r4, #0
 8026980:	d000      	beq.n	8026984 <__ieee754_pow+0xf0>
 8026982:	e08b      	b.n	8026a9c <__ieee754_pow+0x208>
 8026984:	9b06      	ldr	r3, [sp, #24]
 8026986:	2b00      	cmp	r3, #0
 8026988:	da07      	bge.n	802699a <__ieee754_pow+0x106>
 802698a:	9a00      	ldr	r2, [sp, #0]
 802698c:	9b01      	ldr	r3, [sp, #4]
 802698e:	2000      	movs	r0, #0
 8026990:	496e      	ldr	r1, [pc, #440]	@ (8026b4c <__ieee754_pow+0x2b8>)
 8026992:	f7db fa0f 	bl	8001db4 <__aeabi_ddiv>
 8026996:	9000      	str	r0, [sp, #0]
 8026998:	9101      	str	r1, [sp, #4]
 802699a:	9b08      	ldr	r3, [sp, #32]
 802699c:	2b00      	cmp	r3, #0
 802699e:	da54      	bge.n	8026a4a <__ieee754_pow+0x1b6>
 80269a0:	4b66      	ldr	r3, [pc, #408]	@ (8026b3c <__ieee754_pow+0x2a8>)
 80269a2:	18e4      	adds	r4, r4, r3
 80269a4:	432c      	orrs	r4, r5
 80269a6:	d000      	beq.n	80269aa <__ieee754_pow+0x116>
 80269a8:	e06d      	b.n	8026a86 <__ieee754_pow+0x1f2>
 80269aa:	9a00      	ldr	r2, [sp, #0]
 80269ac:	9b01      	ldr	r3, [sp, #4]
 80269ae:	0010      	movs	r0, r2
 80269b0:	0019      	movs	r1, r3
 80269b2:	f7dc f90b 	bl	8002bcc <__aeabi_dsub>
 80269b6:	0002      	movs	r2, r0
 80269b8:	000b      	movs	r3, r1
 80269ba:	e01c      	b.n	80269f6 <__ieee754_pow+0x162>
 80269bc:	2b00      	cmp	r3, #0
 80269be:	d1cf      	bne.n	8026960 <__ieee754_pow+0xcc>
 80269c0:	3314      	adds	r3, #20
 80269c2:	1a9a      	subs	r2, r3, r2
 80269c4:	9b04      	ldr	r3, [sp, #16]
 80269c6:	4113      	asrs	r3, r2
 80269c8:	0019      	movs	r1, r3
 80269ca:	4091      	lsls	r1, r2
 80269cc:	000a      	movs	r2, r1
 80269ce:	9904      	ldr	r1, [sp, #16]
 80269d0:	428a      	cmp	r2, r1
 80269d2:	d103      	bne.n	80269dc <__ieee754_pow+0x148>
 80269d4:	2201      	movs	r2, #1
 80269d6:	2502      	movs	r5, #2
 80269d8:	4013      	ands	r3, r2
 80269da:	1aed      	subs	r5, r5, r3
 80269dc:	4b5b      	ldr	r3, [pc, #364]	@ (8026b4c <__ieee754_pow+0x2b8>)
 80269de:	9a04      	ldr	r2, [sp, #16]
 80269e0:	429a      	cmp	r2, r3
 80269e2:	d136      	bne.n	8026a52 <__ieee754_pow+0x1be>
 80269e4:	9b06      	ldr	r3, [sp, #24]
 80269e6:	9600      	str	r6, [sp, #0]
 80269e8:	9701      	str	r7, [sp, #4]
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	da2d      	bge.n	8026a4a <__ieee754_pow+0x1b6>
 80269ee:	0032      	movs	r2, r6
 80269f0:	003b      	movs	r3, r7
 80269f2:	2000      	movs	r0, #0
 80269f4:	4955      	ldr	r1, [pc, #340]	@ (8026b4c <__ieee754_pow+0x2b8>)
 80269f6:	f7db f9dd 	bl	8001db4 <__aeabi_ddiv>
 80269fa:	e773      	b.n	80268e4 <__ieee754_pow+0x50>
 80269fc:	2502      	movs	r5, #2
 80269fe:	2b00      	cmp	r3, #0
 8026a00:	d1ae      	bne.n	8026960 <__ieee754_pow+0xcc>
 8026a02:	9b04      	ldr	r3, [sp, #16]
 8026a04:	4a4c      	ldr	r2, [pc, #304]	@ (8026b38 <__ieee754_pow+0x2a4>)
 8026a06:	4293      	cmp	r3, r2
 8026a08:	d1e8      	bne.n	80269dc <__ieee754_pow+0x148>
 8026a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8026b3c <__ieee754_pow+0x2a8>)
 8026a0c:	18e3      	adds	r3, r4, r3
 8026a0e:	4333      	orrs	r3, r6
 8026a10:	d101      	bne.n	8026a16 <__ieee754_pow+0x182>
 8026a12:	f000 fc3b 	bl	802728c <__ieee754_pow+0x9f8>
 8026a16:	4b4b      	ldr	r3, [pc, #300]	@ (8026b44 <__ieee754_pow+0x2b0>)
 8026a18:	429c      	cmp	r4, r3
 8026a1a:	d909      	bls.n	8026a30 <__ieee754_pow+0x19c>
 8026a1c:	9b06      	ldr	r3, [sp, #24]
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	da01      	bge.n	8026a26 <__ieee754_pow+0x192>
 8026a22:	f000 fc37 	bl	8027294 <__ieee754_pow+0xa00>
 8026a26:	9b02      	ldr	r3, [sp, #8]
 8026a28:	9c03      	ldr	r4, [sp, #12]
 8026a2a:	9300      	str	r3, [sp, #0]
 8026a2c:	9401      	str	r4, [sp, #4]
 8026a2e:	e00c      	b.n	8026a4a <__ieee754_pow+0x1b6>
 8026a30:	9b06      	ldr	r3, [sp, #24]
 8026a32:	2b00      	cmp	r3, #0
 8026a34:	db01      	blt.n	8026a3a <__ieee754_pow+0x1a6>
 8026a36:	f000 fc2d 	bl	8027294 <__ieee754_pow+0xa00>
 8026a3a:	2280      	movs	r2, #128	@ 0x80
 8026a3c:	0612      	lsls	r2, r2, #24
 8026a3e:	4694      	mov	ip, r2
 8026a40:	9b02      	ldr	r3, [sp, #8]
 8026a42:	9300      	str	r3, [sp, #0]
 8026a44:	9b03      	ldr	r3, [sp, #12]
 8026a46:	4463      	add	r3, ip
 8026a48:	9301      	str	r3, [sp, #4]
 8026a4a:	9800      	ldr	r0, [sp, #0]
 8026a4c:	9901      	ldr	r1, [sp, #4]
 8026a4e:	b015      	add	sp, #84	@ 0x54
 8026a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a52:	2380      	movs	r3, #128	@ 0x80
 8026a54:	9a06      	ldr	r2, [sp, #24]
 8026a56:	05db      	lsls	r3, r3, #23
 8026a58:	429a      	cmp	r2, r3
 8026a5a:	d106      	bne.n	8026a6a <__ieee754_pow+0x1d6>
 8026a5c:	0032      	movs	r2, r6
 8026a5e:	003b      	movs	r3, r7
 8026a60:	0030      	movs	r0, r6
 8026a62:	0039      	movs	r1, r7
 8026a64:	f7db fdea 	bl	800263c <__aeabi_dmul>
 8026a68:	e73c      	b.n	80268e4 <__ieee754_pow+0x50>
 8026a6a:	4b39      	ldr	r3, [pc, #228]	@ (8026b50 <__ieee754_pow+0x2bc>)
 8026a6c:	9a06      	ldr	r2, [sp, #24]
 8026a6e:	429a      	cmp	r2, r3
 8026a70:	d000      	beq.n	8026a74 <__ieee754_pow+0x1e0>
 8026a72:	e775      	b.n	8026960 <__ieee754_pow+0xcc>
 8026a74:	9b08      	ldr	r3, [sp, #32]
 8026a76:	2b00      	cmp	r3, #0
 8026a78:	da00      	bge.n	8026a7c <__ieee754_pow+0x1e8>
 8026a7a:	e771      	b.n	8026960 <__ieee754_pow+0xcc>
 8026a7c:	0030      	movs	r0, r6
 8026a7e:	0039      	movs	r1, r7
 8026a80:	f000 fde4 	bl	802764c <__ieee754_sqrt>
 8026a84:	e72e      	b.n	80268e4 <__ieee754_pow+0x50>
 8026a86:	2d01      	cmp	r5, #1
 8026a88:	d1df      	bne.n	8026a4a <__ieee754_pow+0x1b6>
 8026a8a:	9800      	ldr	r0, [sp, #0]
 8026a8c:	2180      	movs	r1, #128	@ 0x80
 8026a8e:	0002      	movs	r2, r0
 8026a90:	9801      	ldr	r0, [sp, #4]
 8026a92:	0609      	lsls	r1, r1, #24
 8026a94:	1843      	adds	r3, r0, r1
 8026a96:	9200      	str	r2, [sp, #0]
 8026a98:	9301      	str	r3, [sp, #4]
 8026a9a:	e7d6      	b.n	8026a4a <__ieee754_pow+0x1b6>
 8026a9c:	0ffb      	lsrs	r3, r7, #31
 8026a9e:	3b01      	subs	r3, #1
 8026aa0:	001a      	movs	r2, r3
 8026aa2:	432a      	orrs	r2, r5
 8026aa4:	d104      	bne.n	8026ab0 <__ieee754_pow+0x21c>
 8026aa6:	0032      	movs	r2, r6
 8026aa8:	003b      	movs	r3, r7
 8026aaa:	0030      	movs	r0, r6
 8026aac:	0039      	movs	r1, r7
 8026aae:	e780      	b.n	80269b2 <__ieee754_pow+0x11e>
 8026ab0:	3d01      	subs	r5, #1
 8026ab2:	2200      	movs	r2, #0
 8026ab4:	431d      	orrs	r5, r3
 8026ab6:	d015      	beq.n	8026ae4 <__ieee754_pow+0x250>
 8026ab8:	4b24      	ldr	r3, [pc, #144]	@ (8026b4c <__ieee754_pow+0x2b8>)
 8026aba:	9208      	str	r2, [sp, #32]
 8026abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8026abe:	2384      	movs	r3, #132	@ 0x84
 8026ac0:	9a04      	ldr	r2, [sp, #16]
 8026ac2:	05db      	lsls	r3, r3, #23
 8026ac4:	429a      	cmp	r2, r3
 8026ac6:	d800      	bhi.n	8026aca <__ieee754_pow+0x236>
 8026ac8:	e102      	b.n	8026cd0 <__ieee754_pow+0x43c>
 8026aca:	4b22      	ldr	r3, [pc, #136]	@ (8026b54 <__ieee754_pow+0x2c0>)
 8026acc:	429a      	cmp	r2, r3
 8026ace:	d912      	bls.n	8026af6 <__ieee754_pow+0x262>
 8026ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8026b44 <__ieee754_pow+0x2b0>)
 8026ad2:	429c      	cmp	r4, r3
 8026ad4:	d808      	bhi.n	8026ae8 <__ieee754_pow+0x254>
 8026ad6:	9b06      	ldr	r3, [sp, #24]
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	da08      	bge.n	8026aee <__ieee754_pow+0x25a>
 8026adc:	2000      	movs	r0, #0
 8026ade:	f000 fd8b 	bl	80275f8 <__math_oflow>
 8026ae2:	e6ff      	b.n	80268e4 <__ieee754_pow+0x50>
 8026ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8026b58 <__ieee754_pow+0x2c4>)
 8026ae6:	e7e8      	b.n	8026aba <__ieee754_pow+0x226>
 8026ae8:	9b06      	ldr	r3, [sp, #24]
 8026aea:	2b00      	cmp	r3, #0
 8026aec:	dcf6      	bgt.n	8026adc <__ieee754_pow+0x248>
 8026aee:	2000      	movs	r0, #0
 8026af0:	f000 fd7b 	bl	80275ea <__math_uflow>
 8026af4:	e6f6      	b.n	80268e4 <__ieee754_pow+0x50>
 8026af6:	4b19      	ldr	r3, [pc, #100]	@ (8026b5c <__ieee754_pow+0x2c8>)
 8026af8:	429c      	cmp	r4, r3
 8026afa:	d80b      	bhi.n	8026b14 <__ieee754_pow+0x280>
 8026afc:	9808      	ldr	r0, [sp, #32]
 8026afe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b00:	2300      	movs	r3, #0
 8026b02:	2200      	movs	r2, #0
 8026b04:	f7d9 fcda 	bl	80004bc <__aeabi_dcmplt>
 8026b08:	1e43      	subs	r3, r0, #1
 8026b0a:	4198      	sbcs	r0, r3
 8026b0c:	9b06      	ldr	r3, [sp, #24]
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	daee      	bge.n	8026af0 <__ieee754_pow+0x25c>
 8026b12:	e7e4      	b.n	8026ade <__ieee754_pow+0x24a>
 8026b14:	4b0d      	ldr	r3, [pc, #52]	@ (8026b4c <__ieee754_pow+0x2b8>)
 8026b16:	2200      	movs	r2, #0
 8026b18:	429c      	cmp	r4, r3
 8026b1a:	d921      	bls.n	8026b60 <__ieee754_pow+0x2cc>
 8026b1c:	9808      	ldr	r0, [sp, #32]
 8026b1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b20:	2300      	movs	r3, #0
 8026b22:	f7d9 fccb 	bl	80004bc <__aeabi_dcmplt>
 8026b26:	1e43      	subs	r3, r0, #1
 8026b28:	4198      	sbcs	r0, r3
 8026b2a:	9b06      	ldr	r3, [sp, #24]
 8026b2c:	2b00      	cmp	r3, #0
 8026b2e:	dcd6      	bgt.n	8026ade <__ieee754_pow+0x24a>
 8026b30:	e7de      	b.n	8026af0 <__ieee754_pow+0x25c>
 8026b32:	46c0      	nop			@ (mov r8, r8)
 8026b34:	fff00000 	.word	0xfff00000
 8026b38:	7ff00000 	.word	0x7ff00000
 8026b3c:	c0100000 	.word	0xc0100000
 8026b40:	433fffff 	.word	0x433fffff
 8026b44:	3fefffff 	.word	0x3fefffff
 8026b48:	fffffc01 	.word	0xfffffc01
 8026b4c:	3ff00000 	.word	0x3ff00000
 8026b50:	3fe00000 	.word	0x3fe00000
 8026b54:	43f00000 	.word	0x43f00000
 8026b58:	bff00000 	.word	0xbff00000
 8026b5c:	3feffffe 	.word	0x3feffffe
 8026b60:	9800      	ldr	r0, [sp, #0]
 8026b62:	9901      	ldr	r1, [sp, #4]
 8026b64:	4b4f      	ldr	r3, [pc, #316]	@ (8026ca4 <__ieee754_pow+0x410>)
 8026b66:	f7dc f831 	bl	8002bcc <__aeabi_dsub>
 8026b6a:	22c0      	movs	r2, #192	@ 0xc0
 8026b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8026ca8 <__ieee754_pow+0x414>)
 8026b6e:	05d2      	lsls	r2, r2, #23
 8026b70:	0006      	movs	r6, r0
 8026b72:	000f      	movs	r7, r1
 8026b74:	f7db fd62 	bl	800263c <__aeabi_dmul>
 8026b78:	4a4c      	ldr	r2, [pc, #304]	@ (8026cac <__ieee754_pow+0x418>)
 8026b7a:	9004      	str	r0, [sp, #16]
 8026b7c:	9105      	str	r1, [sp, #20]
 8026b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8026cb0 <__ieee754_pow+0x41c>)
 8026b80:	0030      	movs	r0, r6
 8026b82:	0039      	movs	r1, r7
 8026b84:	f7db fd5a 	bl	800263c <__aeabi_dmul>
 8026b88:	2200      	movs	r2, #0
 8026b8a:	9000      	str	r0, [sp, #0]
 8026b8c:	9101      	str	r1, [sp, #4]
 8026b8e:	4b49      	ldr	r3, [pc, #292]	@ (8026cb4 <__ieee754_pow+0x420>)
 8026b90:	0030      	movs	r0, r6
 8026b92:	0039      	movs	r1, r7
 8026b94:	f7db fd52 	bl	800263c <__aeabi_dmul>
 8026b98:	0002      	movs	r2, r0
 8026b9a:	000b      	movs	r3, r1
 8026b9c:	4846      	ldr	r0, [pc, #280]	@ (8026cb8 <__ieee754_pow+0x424>)
 8026b9e:	4947      	ldr	r1, [pc, #284]	@ (8026cbc <__ieee754_pow+0x428>)
 8026ba0:	f7dc f814 	bl	8002bcc <__aeabi_dsub>
 8026ba4:	0032      	movs	r2, r6
 8026ba6:	003b      	movs	r3, r7
 8026ba8:	f7db fd48 	bl	800263c <__aeabi_dmul>
 8026bac:	0002      	movs	r2, r0
 8026bae:	000b      	movs	r3, r1
 8026bb0:	2000      	movs	r0, #0
 8026bb2:	4943      	ldr	r1, [pc, #268]	@ (8026cc0 <__ieee754_pow+0x42c>)
 8026bb4:	f7dc f80a 	bl	8002bcc <__aeabi_dsub>
 8026bb8:	0032      	movs	r2, r6
 8026bba:	0004      	movs	r4, r0
 8026bbc:	000d      	movs	r5, r1
 8026bbe:	003b      	movs	r3, r7
 8026bc0:	0030      	movs	r0, r6
 8026bc2:	0039      	movs	r1, r7
 8026bc4:	f7db fd3a 	bl	800263c <__aeabi_dmul>
 8026bc8:	0002      	movs	r2, r0
 8026bca:	000b      	movs	r3, r1
 8026bcc:	0020      	movs	r0, r4
 8026bce:	0029      	movs	r1, r5
 8026bd0:	f7db fd34 	bl	800263c <__aeabi_dmul>
 8026bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8026cc4 <__ieee754_pow+0x430>)
 8026bd6:	4b34      	ldr	r3, [pc, #208]	@ (8026ca8 <__ieee754_pow+0x414>)
 8026bd8:	f7db fd30 	bl	800263c <__aeabi_dmul>
 8026bdc:	0002      	movs	r2, r0
 8026bde:	000b      	movs	r3, r1
 8026be0:	9800      	ldr	r0, [sp, #0]
 8026be2:	9901      	ldr	r1, [sp, #4]
 8026be4:	f7db fff2 	bl	8002bcc <__aeabi_dsub>
 8026be8:	0002      	movs	r2, r0
 8026bea:	000b      	movs	r3, r1
 8026bec:	0004      	movs	r4, r0
 8026bee:	000d      	movs	r5, r1
 8026bf0:	9804      	ldr	r0, [sp, #16]
 8026bf2:	9905      	ldr	r1, [sp, #20]
 8026bf4:	f7da fd7a 	bl	80016ec <__aeabi_dadd>
 8026bf8:	9a04      	ldr	r2, [sp, #16]
 8026bfa:	9b05      	ldr	r3, [sp, #20]
 8026bfc:	2000      	movs	r0, #0
 8026bfe:	9000      	str	r0, [sp, #0]
 8026c00:	9101      	str	r1, [sp, #4]
 8026c02:	f7db ffe3 	bl	8002bcc <__aeabi_dsub>
 8026c06:	0002      	movs	r2, r0
 8026c08:	000b      	movs	r3, r1
 8026c0a:	0020      	movs	r0, r4
 8026c0c:	0029      	movs	r1, r5
 8026c0e:	f7db ffdd 	bl	8002bcc <__aeabi_dsub>
 8026c12:	9b02      	ldr	r3, [sp, #8]
 8026c14:	9c03      	ldr	r4, [sp, #12]
 8026c16:	9304      	str	r3, [sp, #16]
 8026c18:	9405      	str	r4, [sp, #20]
 8026c1a:	2300      	movs	r3, #0
 8026c1c:	9304      	str	r3, [sp, #16]
 8026c1e:	9c04      	ldr	r4, [sp, #16]
 8026c20:	9d05      	ldr	r5, [sp, #20]
 8026c22:	0006      	movs	r6, r0
 8026c24:	000f      	movs	r7, r1
 8026c26:	9802      	ldr	r0, [sp, #8]
 8026c28:	9903      	ldr	r1, [sp, #12]
 8026c2a:	0022      	movs	r2, r4
 8026c2c:	002b      	movs	r3, r5
 8026c2e:	f7db ffcd 	bl	8002bcc <__aeabi_dsub>
 8026c32:	9a00      	ldr	r2, [sp, #0]
 8026c34:	9b01      	ldr	r3, [sp, #4]
 8026c36:	f7db fd01 	bl	800263c <__aeabi_dmul>
 8026c3a:	9a02      	ldr	r2, [sp, #8]
 8026c3c:	9b03      	ldr	r3, [sp, #12]
 8026c3e:	9006      	str	r0, [sp, #24]
 8026c40:	9107      	str	r1, [sp, #28]
 8026c42:	0030      	movs	r0, r6
 8026c44:	0039      	movs	r1, r7
 8026c46:	f7db fcf9 	bl	800263c <__aeabi_dmul>
 8026c4a:	0002      	movs	r2, r0
 8026c4c:	000b      	movs	r3, r1
 8026c4e:	9806      	ldr	r0, [sp, #24]
 8026c50:	9907      	ldr	r1, [sp, #28]
 8026c52:	f7da fd4b 	bl	80016ec <__aeabi_dadd>
 8026c56:	0022      	movs	r2, r4
 8026c58:	002b      	movs	r3, r5
 8026c5a:	9002      	str	r0, [sp, #8]
 8026c5c:	9103      	str	r1, [sp, #12]
 8026c5e:	9800      	ldr	r0, [sp, #0]
 8026c60:	9901      	ldr	r1, [sp, #4]
 8026c62:	f7db fceb 	bl	800263c <__aeabi_dmul>
 8026c66:	000b      	movs	r3, r1
 8026c68:	0002      	movs	r2, r0
 8026c6a:	0006      	movs	r6, r0
 8026c6c:	000f      	movs	r7, r1
 8026c6e:	9802      	ldr	r0, [sp, #8]
 8026c70:	9903      	ldr	r1, [sp, #12]
 8026c72:	f7da fd3b 	bl	80016ec <__aeabi_dadd>
 8026c76:	9000      	str	r0, [sp, #0]
 8026c78:	9101      	str	r1, [sp, #4]
 8026c7a:	9c01      	ldr	r4, [sp, #4]
 8026c7c:	4b12      	ldr	r3, [pc, #72]	@ (8026cc8 <__ieee754_pow+0x434>)
 8026c7e:	9406      	str	r4, [sp, #24]
 8026c80:	429c      	cmp	r4, r3
 8026c82:	dc00      	bgt.n	8026c86 <__ieee754_pow+0x3f2>
 8026c84:	e222      	b.n	80270cc <__ieee754_pow+0x838>
 8026c86:	4a11      	ldr	r2, [pc, #68]	@ (8026ccc <__ieee754_pow+0x438>)
 8026c88:	18a3      	adds	r3, r4, r2
 8026c8a:	9a00      	ldr	r2, [sp, #0]
 8026c8c:	4313      	orrs	r3, r2
 8026c8e:	d100      	bne.n	8026c92 <__ieee754_pow+0x3fe>
 8026c90:	e1a0      	b.n	8026fd4 <__ieee754_pow+0x740>
 8026c92:	9808      	ldr	r0, [sp, #32]
 8026c94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026c96:	2300      	movs	r3, #0
 8026c98:	2200      	movs	r2, #0
 8026c9a:	f7d9 fc0f 	bl	80004bc <__aeabi_dcmplt>
 8026c9e:	1e43      	subs	r3, r0, #1
 8026ca0:	4198      	sbcs	r0, r3
 8026ca2:	e71c      	b.n	8026ade <__ieee754_pow+0x24a>
 8026ca4:	3ff00000 	.word	0x3ff00000
 8026ca8:	3ff71547 	.word	0x3ff71547
 8026cac:	f85ddf44 	.word	0xf85ddf44
 8026cb0:	3e54ae0b 	.word	0x3e54ae0b
 8026cb4:	3fd00000 	.word	0x3fd00000
 8026cb8:	55555555 	.word	0x55555555
 8026cbc:	3fd55555 	.word	0x3fd55555
 8026cc0:	3fe00000 	.word	0x3fe00000
 8026cc4:	652b82fe 	.word	0x652b82fe
 8026cc8:	408fffff 	.word	0x408fffff
 8026ccc:	bf700000 	.word	0xbf700000
 8026cd0:	4be0      	ldr	r3, [pc, #896]	@ (8027054 <__ieee754_pow+0x7c0>)
 8026cd2:	2200      	movs	r2, #0
 8026cd4:	423b      	tst	r3, r7
 8026cd6:	d10b      	bne.n	8026cf0 <__ieee754_pow+0x45c>
 8026cd8:	9800      	ldr	r0, [sp, #0]
 8026cda:	9901      	ldr	r1, [sp, #4]
 8026cdc:	2200      	movs	r2, #0
 8026cde:	4bde      	ldr	r3, [pc, #888]	@ (8027058 <__ieee754_pow+0x7c4>)
 8026ce0:	f7db fcac 	bl	800263c <__aeabi_dmul>
 8026ce4:	2235      	movs	r2, #53	@ 0x35
 8026ce6:	9000      	str	r0, [sp, #0]
 8026ce8:	9101      	str	r1, [sp, #4]
 8026cea:	9b01      	ldr	r3, [sp, #4]
 8026cec:	4252      	negs	r2, r2
 8026cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8026cf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026cf2:	49da      	ldr	r1, [pc, #872]	@ (802705c <__ieee754_pow+0x7c8>)
 8026cf4:	151b      	asrs	r3, r3, #20
 8026cf6:	185b      	adds	r3, r3, r1
 8026cf8:	189b      	adds	r3, r3, r2
 8026cfa:	930e      	str	r3, [sp, #56]	@ 0x38
 8026cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026cfe:	4dd8      	ldr	r5, [pc, #864]	@ (8027060 <__ieee754_pow+0x7cc>)
 8026d00:	031b      	lsls	r3, r3, #12
 8026d02:	4ad8      	ldr	r2, [pc, #864]	@ (8027064 <__ieee754_pow+0x7d0>)
 8026d04:	0b1b      	lsrs	r3, r3, #12
 8026d06:	2600      	movs	r6, #0
 8026d08:	431d      	orrs	r5, r3
 8026d0a:	4293      	cmp	r3, r2
 8026d0c:	dd09      	ble.n	8026d22 <__ieee754_pow+0x48e>
 8026d0e:	4ad6      	ldr	r2, [pc, #856]	@ (8027068 <__ieee754_pow+0x7d4>)
 8026d10:	3601      	adds	r6, #1
 8026d12:	4293      	cmp	r3, r2
 8026d14:	dd05      	ble.n	8026d22 <__ieee754_pow+0x48e>
 8026d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026d18:	199b      	adds	r3, r3, r6
 8026d1a:	2600      	movs	r6, #0
 8026d1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d1e:	4bd3      	ldr	r3, [pc, #844]	@ (802706c <__ieee754_pow+0x7d8>)
 8026d20:	18ed      	adds	r5, r5, r3
 8026d22:	9800      	ldr	r0, [sp, #0]
 8026d24:	9901      	ldr	r1, [sp, #4]
 8026d26:	0029      	movs	r1, r5
 8026d28:	4bd1      	ldr	r3, [pc, #836]	@ (8027070 <__ieee754_pow+0x7dc>)
 8026d2a:	00f2      	lsls	r2, r6, #3
 8026d2c:	189b      	adds	r3, r3, r2
 8026d2e:	685c      	ldr	r4, [r3, #4]
 8026d30:	681b      	ldr	r3, [r3, #0]
 8026d32:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026d38:	001a      	movs	r2, r3
 8026d3a:	0023      	movs	r3, r4
 8026d3c:	900c      	str	r0, [sp, #48]	@ 0x30
 8026d3e:	910d      	str	r1, [sp, #52]	@ 0x34
 8026d40:	f7db ff44 	bl	8002bcc <__aeabi_dsub>
 8026d44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026d48:	9010      	str	r0, [sp, #64]	@ 0x40
 8026d4a:	9111      	str	r1, [sp, #68]	@ 0x44
 8026d4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026d4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026d50:	f7da fccc 	bl	80016ec <__aeabi_dadd>
 8026d54:	0002      	movs	r2, r0
 8026d56:	000b      	movs	r3, r1
 8026d58:	2000      	movs	r0, #0
 8026d5a:	49c1      	ldr	r1, [pc, #772]	@ (8027060 <__ieee754_pow+0x7cc>)
 8026d5c:	f7db f82a 	bl	8001db4 <__aeabi_ddiv>
 8026d60:	0002      	movs	r2, r0
 8026d62:	000b      	movs	r3, r1
 8026d64:	9012      	str	r0, [sp, #72]	@ 0x48
 8026d66:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026d68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026d6a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026d6c:	f7db fc66 	bl	800263c <__aeabi_dmul>
 8026d70:	9006      	str	r0, [sp, #24]
 8026d72:	9107      	str	r1, [sp, #28]
 8026d74:	9b06      	ldr	r3, [sp, #24]
 8026d76:	9c07      	ldr	r4, [sp, #28]
 8026d78:	2180      	movs	r1, #128	@ 0x80
 8026d7a:	9304      	str	r3, [sp, #16]
 8026d7c:	9405      	str	r4, [sp, #20]
 8026d7e:	2080      	movs	r0, #128	@ 0x80
 8026d80:	2300      	movs	r3, #0
 8026d82:	2200      	movs	r2, #0
 8026d84:	106d      	asrs	r5, r5, #1
 8026d86:	0589      	lsls	r1, r1, #22
 8026d88:	9304      	str	r3, [sp, #16]
 8026d8a:	4329      	orrs	r1, r5
 8026d8c:	0300      	lsls	r0, r0, #12
 8026d8e:	9b04      	ldr	r3, [sp, #16]
 8026d90:	9c05      	ldr	r4, [sp, #20]
 8026d92:	1809      	adds	r1, r1, r0
 8026d94:	9300      	str	r3, [sp, #0]
 8026d96:	9401      	str	r4, [sp, #4]
 8026d98:	04b6      	lsls	r6, r6, #18
 8026d9a:	198b      	adds	r3, r1, r6
 8026d9c:	9800      	ldr	r0, [sp, #0]
 8026d9e:	9901      	ldr	r1, [sp, #4]
 8026da0:	0014      	movs	r4, r2
 8026da2:	001d      	movs	r5, r3
 8026da4:	f7db fc4a 	bl	800263c <__aeabi_dmul>
 8026da8:	0002      	movs	r2, r0
 8026daa:	000b      	movs	r3, r1
 8026dac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026dae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026db0:	f7db ff0c 	bl	8002bcc <__aeabi_dsub>
 8026db4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026db8:	0006      	movs	r6, r0
 8026dba:	000f      	movs	r7, r1
 8026dbc:	0020      	movs	r0, r4
 8026dbe:	0029      	movs	r1, r5
 8026dc0:	f7db ff04 	bl	8002bcc <__aeabi_dsub>
 8026dc4:	0002      	movs	r2, r0
 8026dc6:	000b      	movs	r3, r1
 8026dc8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026dca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026dcc:	f7db fefe 	bl	8002bcc <__aeabi_dsub>
 8026dd0:	9a00      	ldr	r2, [sp, #0]
 8026dd2:	9b01      	ldr	r3, [sp, #4]
 8026dd4:	f7db fc32 	bl	800263c <__aeabi_dmul>
 8026dd8:	0002      	movs	r2, r0
 8026dda:	000b      	movs	r3, r1
 8026ddc:	0030      	movs	r0, r6
 8026dde:	0039      	movs	r1, r7
 8026de0:	f7db fef4 	bl	8002bcc <__aeabi_dsub>
 8026de4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026de6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026de8:	f7db fc28 	bl	800263c <__aeabi_dmul>
 8026dec:	9a06      	ldr	r2, [sp, #24]
 8026dee:	9b07      	ldr	r3, [sp, #28]
 8026df0:	900a      	str	r0, [sp, #40]	@ 0x28
 8026df2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026df4:	0010      	movs	r0, r2
 8026df6:	0019      	movs	r1, r3
 8026df8:	f7db fc20 	bl	800263c <__aeabi_dmul>
 8026dfc:	0006      	movs	r6, r0
 8026dfe:	000f      	movs	r7, r1
 8026e00:	4a9c      	ldr	r2, [pc, #624]	@ (8027074 <__ieee754_pow+0x7e0>)
 8026e02:	4b9d      	ldr	r3, [pc, #628]	@ (8027078 <__ieee754_pow+0x7e4>)
 8026e04:	f7db fc1a 	bl	800263c <__aeabi_dmul>
 8026e08:	4a9c      	ldr	r2, [pc, #624]	@ (802707c <__ieee754_pow+0x7e8>)
 8026e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8027080 <__ieee754_pow+0x7ec>)
 8026e0c:	f7da fc6e 	bl	80016ec <__aeabi_dadd>
 8026e10:	0032      	movs	r2, r6
 8026e12:	003b      	movs	r3, r7
 8026e14:	f7db fc12 	bl	800263c <__aeabi_dmul>
 8026e18:	4a9a      	ldr	r2, [pc, #616]	@ (8027084 <__ieee754_pow+0x7f0>)
 8026e1a:	4b9b      	ldr	r3, [pc, #620]	@ (8027088 <__ieee754_pow+0x7f4>)
 8026e1c:	f7da fc66 	bl	80016ec <__aeabi_dadd>
 8026e20:	0032      	movs	r2, r6
 8026e22:	003b      	movs	r3, r7
 8026e24:	f7db fc0a 	bl	800263c <__aeabi_dmul>
 8026e28:	4a98      	ldr	r2, [pc, #608]	@ (802708c <__ieee754_pow+0x7f8>)
 8026e2a:	4b99      	ldr	r3, [pc, #612]	@ (8027090 <__ieee754_pow+0x7fc>)
 8026e2c:	f7da fc5e 	bl	80016ec <__aeabi_dadd>
 8026e30:	0032      	movs	r2, r6
 8026e32:	003b      	movs	r3, r7
 8026e34:	f7db fc02 	bl	800263c <__aeabi_dmul>
 8026e38:	4a96      	ldr	r2, [pc, #600]	@ (8027094 <__ieee754_pow+0x800>)
 8026e3a:	4b97      	ldr	r3, [pc, #604]	@ (8027098 <__ieee754_pow+0x804>)
 8026e3c:	f7da fc56 	bl	80016ec <__aeabi_dadd>
 8026e40:	0032      	movs	r2, r6
 8026e42:	003b      	movs	r3, r7
 8026e44:	f7db fbfa 	bl	800263c <__aeabi_dmul>
 8026e48:	4a94      	ldr	r2, [pc, #592]	@ (802709c <__ieee754_pow+0x808>)
 8026e4a:	4b95      	ldr	r3, [pc, #596]	@ (80270a0 <__ieee754_pow+0x80c>)
 8026e4c:	f7da fc4e 	bl	80016ec <__aeabi_dadd>
 8026e50:	0032      	movs	r2, r6
 8026e52:	0004      	movs	r4, r0
 8026e54:	000d      	movs	r5, r1
 8026e56:	003b      	movs	r3, r7
 8026e58:	0030      	movs	r0, r6
 8026e5a:	0039      	movs	r1, r7
 8026e5c:	f7db fbee 	bl	800263c <__aeabi_dmul>
 8026e60:	0002      	movs	r2, r0
 8026e62:	000b      	movs	r3, r1
 8026e64:	0020      	movs	r0, r4
 8026e66:	0029      	movs	r1, r5
 8026e68:	f7db fbe8 	bl	800263c <__aeabi_dmul>
 8026e6c:	9a00      	ldr	r2, [sp, #0]
 8026e6e:	9b01      	ldr	r3, [sp, #4]
 8026e70:	0004      	movs	r4, r0
 8026e72:	000d      	movs	r5, r1
 8026e74:	9806      	ldr	r0, [sp, #24]
 8026e76:	9907      	ldr	r1, [sp, #28]
 8026e78:	f7da fc38 	bl	80016ec <__aeabi_dadd>
 8026e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e80:	f7db fbdc 	bl	800263c <__aeabi_dmul>
 8026e84:	0022      	movs	r2, r4
 8026e86:	002b      	movs	r3, r5
 8026e88:	f7da fc30 	bl	80016ec <__aeabi_dadd>
 8026e8c:	9a00      	ldr	r2, [sp, #0]
 8026e8e:	9b01      	ldr	r3, [sp, #4]
 8026e90:	900c      	str	r0, [sp, #48]	@ 0x30
 8026e92:	910d      	str	r1, [sp, #52]	@ 0x34
 8026e94:	0010      	movs	r0, r2
 8026e96:	0019      	movs	r1, r3
 8026e98:	f7db fbd0 	bl	800263c <__aeabi_dmul>
 8026e9c:	2200      	movs	r2, #0
 8026e9e:	4b81      	ldr	r3, [pc, #516]	@ (80270a4 <__ieee754_pow+0x810>)
 8026ea0:	0004      	movs	r4, r0
 8026ea2:	000d      	movs	r5, r1
 8026ea4:	f7da fc22 	bl	80016ec <__aeabi_dadd>
 8026ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026eac:	f7da fc1e 	bl	80016ec <__aeabi_dadd>
 8026eb0:	2000      	movs	r0, #0
 8026eb2:	000f      	movs	r7, r1
 8026eb4:	0006      	movs	r6, r0
 8026eb6:	0002      	movs	r2, r0
 8026eb8:	000b      	movs	r3, r1
 8026eba:	9800      	ldr	r0, [sp, #0]
 8026ebc:	9901      	ldr	r1, [sp, #4]
 8026ebe:	f7db fbbd 	bl	800263c <__aeabi_dmul>
 8026ec2:	2200      	movs	r2, #0
 8026ec4:	9000      	str	r0, [sp, #0]
 8026ec6:	9101      	str	r1, [sp, #4]
 8026ec8:	4b76      	ldr	r3, [pc, #472]	@ (80270a4 <__ieee754_pow+0x810>)
 8026eca:	0030      	movs	r0, r6
 8026ecc:	0039      	movs	r1, r7
 8026ece:	f7db fe7d 	bl	8002bcc <__aeabi_dsub>
 8026ed2:	0022      	movs	r2, r4
 8026ed4:	002b      	movs	r3, r5
 8026ed6:	f7db fe79 	bl	8002bcc <__aeabi_dsub>
 8026eda:	0002      	movs	r2, r0
 8026edc:	000b      	movs	r3, r1
 8026ede:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026ee0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026ee2:	f7db fe73 	bl	8002bcc <__aeabi_dsub>
 8026ee6:	9a06      	ldr	r2, [sp, #24]
 8026ee8:	9b07      	ldr	r3, [sp, #28]
 8026eea:	f7db fba7 	bl	800263c <__aeabi_dmul>
 8026eee:	0032      	movs	r2, r6
 8026ef0:	0004      	movs	r4, r0
 8026ef2:	000d      	movs	r5, r1
 8026ef4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026ef6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026ef8:	003b      	movs	r3, r7
 8026efa:	f7db fb9f 	bl	800263c <__aeabi_dmul>
 8026efe:	0002      	movs	r2, r0
 8026f00:	000b      	movs	r3, r1
 8026f02:	0020      	movs	r0, r4
 8026f04:	0029      	movs	r1, r5
 8026f06:	f7da fbf1 	bl	80016ec <__aeabi_dadd>
 8026f0a:	0004      	movs	r4, r0
 8026f0c:	000d      	movs	r5, r1
 8026f0e:	0002      	movs	r2, r0
 8026f10:	000b      	movs	r3, r1
 8026f12:	9800      	ldr	r0, [sp, #0]
 8026f14:	9901      	ldr	r1, [sp, #4]
 8026f16:	f7da fbe9 	bl	80016ec <__aeabi_dadd>
 8026f1a:	22e0      	movs	r2, #224	@ 0xe0
 8026f1c:	2000      	movs	r0, #0
 8026f1e:	4b62      	ldr	r3, [pc, #392]	@ (80270a8 <__ieee754_pow+0x814>)
 8026f20:	0612      	lsls	r2, r2, #24
 8026f22:	0006      	movs	r6, r0
 8026f24:	000f      	movs	r7, r1
 8026f26:	f7db fb89 	bl	800263c <__aeabi_dmul>
 8026f2a:	9006      	str	r0, [sp, #24]
 8026f2c:	9107      	str	r1, [sp, #28]
 8026f2e:	9a00      	ldr	r2, [sp, #0]
 8026f30:	9b01      	ldr	r3, [sp, #4]
 8026f32:	0030      	movs	r0, r6
 8026f34:	0039      	movs	r1, r7
 8026f36:	f7db fe49 	bl	8002bcc <__aeabi_dsub>
 8026f3a:	0002      	movs	r2, r0
 8026f3c:	000b      	movs	r3, r1
 8026f3e:	0020      	movs	r0, r4
 8026f40:	0029      	movs	r1, r5
 8026f42:	f7db fe43 	bl	8002bcc <__aeabi_dsub>
 8026f46:	4a59      	ldr	r2, [pc, #356]	@ (80270ac <__ieee754_pow+0x818>)
 8026f48:	4b57      	ldr	r3, [pc, #348]	@ (80270a8 <__ieee754_pow+0x814>)
 8026f4a:	f7db fb77 	bl	800263c <__aeabi_dmul>
 8026f4e:	4a58      	ldr	r2, [pc, #352]	@ (80270b0 <__ieee754_pow+0x81c>)
 8026f50:	0004      	movs	r4, r0
 8026f52:	000d      	movs	r5, r1
 8026f54:	0030      	movs	r0, r6
 8026f56:	0039      	movs	r1, r7
 8026f58:	4b56      	ldr	r3, [pc, #344]	@ (80270b4 <__ieee754_pow+0x820>)
 8026f5a:	f7db fb6f 	bl	800263c <__aeabi_dmul>
 8026f5e:	0002      	movs	r2, r0
 8026f60:	000b      	movs	r3, r1
 8026f62:	0020      	movs	r0, r4
 8026f64:	0029      	movs	r1, r5
 8026f66:	f7da fbc1 	bl	80016ec <__aeabi_dadd>
 8026f6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026f6c:	4b52      	ldr	r3, [pc, #328]	@ (80270b8 <__ieee754_pow+0x824>)
 8026f6e:	189b      	adds	r3, r3, r2
 8026f70:	681a      	ldr	r2, [r3, #0]
 8026f72:	685b      	ldr	r3, [r3, #4]
 8026f74:	f7da fbba 	bl	80016ec <__aeabi_dadd>
 8026f78:	900a      	str	r0, [sp, #40]	@ 0x28
 8026f7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f7c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8026f7e:	f7dc fa1f 	bl	80033c0 <__aeabi_i2d>
 8026f82:	0004      	movs	r4, r0
 8026f84:	000d      	movs	r5, r1
 8026f86:	9806      	ldr	r0, [sp, #24]
 8026f88:	9907      	ldr	r1, [sp, #28]
 8026f8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80270bc <__ieee754_pow+0x828>)
 8026f8e:	189b      	adds	r3, r3, r2
 8026f90:	681e      	ldr	r6, [r3, #0]
 8026f92:	685f      	ldr	r7, [r3, #4]
 8026f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f98:	f7da fba8 	bl	80016ec <__aeabi_dadd>
 8026f9c:	0032      	movs	r2, r6
 8026f9e:	003b      	movs	r3, r7
 8026fa0:	f7da fba4 	bl	80016ec <__aeabi_dadd>
 8026fa4:	0022      	movs	r2, r4
 8026fa6:	002b      	movs	r3, r5
 8026fa8:	f7da fba0 	bl	80016ec <__aeabi_dadd>
 8026fac:	2000      	movs	r0, #0
 8026fae:	0022      	movs	r2, r4
 8026fb0:	002b      	movs	r3, r5
 8026fb2:	9000      	str	r0, [sp, #0]
 8026fb4:	9101      	str	r1, [sp, #4]
 8026fb6:	f7db fe09 	bl	8002bcc <__aeabi_dsub>
 8026fba:	0032      	movs	r2, r6
 8026fbc:	003b      	movs	r3, r7
 8026fbe:	f7db fe05 	bl	8002bcc <__aeabi_dsub>
 8026fc2:	9a06      	ldr	r2, [sp, #24]
 8026fc4:	9b07      	ldr	r3, [sp, #28]
 8026fc6:	f7db fe01 	bl	8002bcc <__aeabi_dsub>
 8026fca:	0002      	movs	r2, r0
 8026fcc:	000b      	movs	r3, r1
 8026fce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026fd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026fd2:	e61c      	b.n	8026c0e <__ieee754_pow+0x37a>
 8026fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80270c0 <__ieee754_pow+0x82c>)
 8026fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80270c4 <__ieee754_pow+0x830>)
 8026fd8:	9802      	ldr	r0, [sp, #8]
 8026fda:	9903      	ldr	r1, [sp, #12]
 8026fdc:	f7da fb86 	bl	80016ec <__aeabi_dadd>
 8026fe0:	0032      	movs	r2, r6
 8026fe2:	003b      	movs	r3, r7
 8026fe4:	9004      	str	r0, [sp, #16]
 8026fe6:	9105      	str	r1, [sp, #20]
 8026fe8:	9800      	ldr	r0, [sp, #0]
 8026fea:	9901      	ldr	r1, [sp, #4]
 8026fec:	f7db fdee 	bl	8002bcc <__aeabi_dsub>
 8026ff0:	0002      	movs	r2, r0
 8026ff2:	000b      	movs	r3, r1
 8026ff4:	9804      	ldr	r0, [sp, #16]
 8026ff6:	9905      	ldr	r1, [sp, #20]
 8026ff8:	f7d9 fa74 	bl	80004e4 <__aeabi_dcmpgt>
 8026ffc:	2800      	cmp	r0, #0
 8026ffe:	d000      	beq.n	8027002 <__ieee754_pow+0x76e>
 8027000:	e647      	b.n	8026c92 <__ieee754_pow+0x3fe>
 8027002:	2580      	movs	r5, #128	@ 0x80
 8027004:	4b30      	ldr	r3, [pc, #192]	@ (80270c8 <__ieee754_pow+0x834>)
 8027006:	036d      	lsls	r5, r5, #13
 8027008:	1524      	asrs	r4, r4, #20
 802700a:	18e4      	adds	r4, r4, r3
 802700c:	002b      	movs	r3, r5
 802700e:	4123      	asrs	r3, r4
 8027010:	9a06      	ldr	r2, [sp, #24]
 8027012:	4912      	ldr	r1, [pc, #72]	@ (802705c <__ieee754_pow+0x7c8>)
 8027014:	189b      	adds	r3, r3, r2
 8027016:	005a      	lsls	r2, r3, #1
 8027018:	4c14      	ldr	r4, [pc, #80]	@ (802706c <__ieee754_pow+0x7d8>)
 802701a:	0d52      	lsrs	r2, r2, #21
 802701c:	1852      	adds	r2, r2, r1
 802701e:	4114      	asrs	r4, r2
 8027020:	401c      	ands	r4, r3
 8027022:	0021      	movs	r1, r4
 8027024:	2414      	movs	r4, #20
 8027026:	031b      	lsls	r3, r3, #12
 8027028:	0b1b      	lsrs	r3, r3, #12
 802702a:	432b      	orrs	r3, r5
 802702c:	1aa2      	subs	r2, r4, r2
 802702e:	4113      	asrs	r3, r2
 8027030:	9300      	str	r3, [sp, #0]
 8027032:	9b06      	ldr	r3, [sp, #24]
 8027034:	2000      	movs	r0, #0
 8027036:	2b00      	cmp	r3, #0
 8027038:	da02      	bge.n	8027040 <__ieee754_pow+0x7ac>
 802703a:	9b00      	ldr	r3, [sp, #0]
 802703c:	425b      	negs	r3, r3
 802703e:	9300      	str	r3, [sp, #0]
 8027040:	0002      	movs	r2, r0
 8027042:	000b      	movs	r3, r1
 8027044:	0030      	movs	r0, r6
 8027046:	0039      	movs	r1, r7
 8027048:	f7db fdc0 	bl	8002bcc <__aeabi_dsub>
 802704c:	0006      	movs	r6, r0
 802704e:	000f      	movs	r7, r1
 8027050:	e065      	b.n	802711e <__ieee754_pow+0x88a>
 8027052:	46c0      	nop			@ (mov r8, r8)
 8027054:	7ff00000 	.word	0x7ff00000
 8027058:	43400000 	.word	0x43400000
 802705c:	fffffc01 	.word	0xfffffc01
 8027060:	3ff00000 	.word	0x3ff00000
 8027064:	0003988e 	.word	0x0003988e
 8027068:	000bb679 	.word	0x000bb679
 802706c:	fff00000 	.word	0xfff00000
 8027070:	0802bb50 	.word	0x0802bb50
 8027074:	4a454eef 	.word	0x4a454eef
 8027078:	3fca7e28 	.word	0x3fca7e28
 802707c:	93c9db65 	.word	0x93c9db65
 8027080:	3fcd864a 	.word	0x3fcd864a
 8027084:	a91d4101 	.word	0xa91d4101
 8027088:	3fd17460 	.word	0x3fd17460
 802708c:	518f264d 	.word	0x518f264d
 8027090:	3fd55555 	.word	0x3fd55555
 8027094:	db6fabff 	.word	0xdb6fabff
 8027098:	3fdb6db6 	.word	0x3fdb6db6
 802709c:	33333303 	.word	0x33333303
 80270a0:	3fe33333 	.word	0x3fe33333
 80270a4:	40080000 	.word	0x40080000
 80270a8:	3feec709 	.word	0x3feec709
 80270ac:	dc3a03fd 	.word	0xdc3a03fd
 80270b0:	145b01f5 	.word	0x145b01f5
 80270b4:	be3e2fe0 	.word	0xbe3e2fe0
 80270b8:	0802bb30 	.word	0x0802bb30
 80270bc:	0802bb40 	.word	0x0802bb40
 80270c0:	652b82fe 	.word	0x652b82fe
 80270c4:	3c971547 	.word	0x3c971547
 80270c8:	fffffc02 	.word	0xfffffc02
 80270cc:	9b01      	ldr	r3, [sp, #4]
 80270ce:	005c      	lsls	r4, r3, #1
 80270d0:	4b72      	ldr	r3, [pc, #456]	@ (802729c <__ieee754_pow+0xa08>)
 80270d2:	0864      	lsrs	r4, r4, #1
 80270d4:	429c      	cmp	r4, r3
 80270d6:	d91c      	bls.n	8027112 <__ieee754_pow+0x87e>
 80270d8:	4a71      	ldr	r2, [pc, #452]	@ (80272a0 <__ieee754_pow+0xa0c>)
 80270da:	9b01      	ldr	r3, [sp, #4]
 80270dc:	189b      	adds	r3, r3, r2
 80270de:	9a00      	ldr	r2, [sp, #0]
 80270e0:	4313      	orrs	r3, r2
 80270e2:	d008      	beq.n	80270f6 <__ieee754_pow+0x862>
 80270e4:	9808      	ldr	r0, [sp, #32]
 80270e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80270e8:	2300      	movs	r3, #0
 80270ea:	2200      	movs	r2, #0
 80270ec:	f7d9 f9e6 	bl	80004bc <__aeabi_dcmplt>
 80270f0:	1e43      	subs	r3, r0, #1
 80270f2:	4198      	sbcs	r0, r3
 80270f4:	e4fc      	b.n	8026af0 <__ieee754_pow+0x25c>
 80270f6:	0032      	movs	r2, r6
 80270f8:	9800      	ldr	r0, [sp, #0]
 80270fa:	9901      	ldr	r1, [sp, #4]
 80270fc:	003b      	movs	r3, r7
 80270fe:	f7db fd65 	bl	8002bcc <__aeabi_dsub>
 8027102:	9a02      	ldr	r2, [sp, #8]
 8027104:	9b03      	ldr	r3, [sp, #12]
 8027106:	f7d9 f9f7 	bl	80004f8 <__aeabi_dcmpge>
 802710a:	2800      	cmp	r0, #0
 802710c:	d1ea      	bne.n	80270e4 <__ieee754_pow+0x850>
 802710e:	4c65      	ldr	r4, [pc, #404]	@ (80272a4 <__ieee754_pow+0xa10>)
 8027110:	e777      	b.n	8027002 <__ieee754_pow+0x76e>
 8027112:	9a04      	ldr	r2, [sp, #16]
 8027114:	4b64      	ldr	r3, [pc, #400]	@ (80272a8 <__ieee754_pow+0xa14>)
 8027116:	9200      	str	r2, [sp, #0]
 8027118:	429c      	cmp	r4, r3
 802711a:	d900      	bls.n	802711e <__ieee754_pow+0x88a>
 802711c:	e771      	b.n	8027002 <__ieee754_pow+0x76e>
 802711e:	9a02      	ldr	r2, [sp, #8]
 8027120:	9b03      	ldr	r3, [sp, #12]
 8027122:	0030      	movs	r0, r6
 8027124:	0039      	movs	r1, r7
 8027126:	f7da fae1 	bl	80016ec <__aeabi_dadd>
 802712a:	2000      	movs	r0, #0
 802712c:	2200      	movs	r2, #0
 802712e:	4b5f      	ldr	r3, [pc, #380]	@ (80272ac <__ieee754_pow+0xa18>)
 8027130:	9004      	str	r0, [sp, #16]
 8027132:	9105      	str	r1, [sp, #20]
 8027134:	f7db fa82 	bl	800263c <__aeabi_dmul>
 8027138:	0032      	movs	r2, r6
 802713a:	003b      	movs	r3, r7
 802713c:	9006      	str	r0, [sp, #24]
 802713e:	9107      	str	r1, [sp, #28]
 8027140:	9804      	ldr	r0, [sp, #16]
 8027142:	9905      	ldr	r1, [sp, #20]
 8027144:	f7db fd42 	bl	8002bcc <__aeabi_dsub>
 8027148:	0002      	movs	r2, r0
 802714a:	000b      	movs	r3, r1
 802714c:	9802      	ldr	r0, [sp, #8]
 802714e:	9903      	ldr	r1, [sp, #12]
 8027150:	f7db fd3c 	bl	8002bcc <__aeabi_dsub>
 8027154:	4a56      	ldr	r2, [pc, #344]	@ (80272b0 <__ieee754_pow+0xa1c>)
 8027156:	4b57      	ldr	r3, [pc, #348]	@ (80272b4 <__ieee754_pow+0xa20>)
 8027158:	f7db fa70 	bl	800263c <__aeabi_dmul>
 802715c:	4a56      	ldr	r2, [pc, #344]	@ (80272b8 <__ieee754_pow+0xa24>)
 802715e:	0004      	movs	r4, r0
 8027160:	000d      	movs	r5, r1
 8027162:	9804      	ldr	r0, [sp, #16]
 8027164:	9905      	ldr	r1, [sp, #20]
 8027166:	4b55      	ldr	r3, [pc, #340]	@ (80272bc <__ieee754_pow+0xa28>)
 8027168:	f7db fa68 	bl	800263c <__aeabi_dmul>
 802716c:	0002      	movs	r2, r0
 802716e:	000b      	movs	r3, r1
 8027170:	0020      	movs	r0, r4
 8027172:	0029      	movs	r1, r5
 8027174:	f7da faba 	bl	80016ec <__aeabi_dadd>
 8027178:	0004      	movs	r4, r0
 802717a:	000d      	movs	r5, r1
 802717c:	0002      	movs	r2, r0
 802717e:	000b      	movs	r3, r1
 8027180:	9806      	ldr	r0, [sp, #24]
 8027182:	9907      	ldr	r1, [sp, #28]
 8027184:	f7da fab2 	bl	80016ec <__aeabi_dadd>
 8027188:	9a06      	ldr	r2, [sp, #24]
 802718a:	9b07      	ldr	r3, [sp, #28]
 802718c:	0006      	movs	r6, r0
 802718e:	000f      	movs	r7, r1
 8027190:	f7db fd1c 	bl	8002bcc <__aeabi_dsub>
 8027194:	0002      	movs	r2, r0
 8027196:	000b      	movs	r3, r1
 8027198:	0020      	movs	r0, r4
 802719a:	0029      	movs	r1, r5
 802719c:	f7db fd16 	bl	8002bcc <__aeabi_dsub>
 80271a0:	0032      	movs	r2, r6
 80271a2:	9002      	str	r0, [sp, #8]
 80271a4:	9103      	str	r1, [sp, #12]
 80271a6:	003b      	movs	r3, r7
 80271a8:	0030      	movs	r0, r6
 80271aa:	0039      	movs	r1, r7
 80271ac:	f7db fa46 	bl	800263c <__aeabi_dmul>
 80271b0:	0004      	movs	r4, r0
 80271b2:	000d      	movs	r5, r1
 80271b4:	4a42      	ldr	r2, [pc, #264]	@ (80272c0 <__ieee754_pow+0xa2c>)
 80271b6:	4b43      	ldr	r3, [pc, #268]	@ (80272c4 <__ieee754_pow+0xa30>)
 80271b8:	f7db fa40 	bl	800263c <__aeabi_dmul>
 80271bc:	4a42      	ldr	r2, [pc, #264]	@ (80272c8 <__ieee754_pow+0xa34>)
 80271be:	4b43      	ldr	r3, [pc, #268]	@ (80272cc <__ieee754_pow+0xa38>)
 80271c0:	f7db fd04 	bl	8002bcc <__aeabi_dsub>
 80271c4:	0022      	movs	r2, r4
 80271c6:	002b      	movs	r3, r5
 80271c8:	f7db fa38 	bl	800263c <__aeabi_dmul>
 80271cc:	4a40      	ldr	r2, [pc, #256]	@ (80272d0 <__ieee754_pow+0xa3c>)
 80271ce:	4b41      	ldr	r3, [pc, #260]	@ (80272d4 <__ieee754_pow+0xa40>)
 80271d0:	f7da fa8c 	bl	80016ec <__aeabi_dadd>
 80271d4:	0022      	movs	r2, r4
 80271d6:	002b      	movs	r3, r5
 80271d8:	f7db fa30 	bl	800263c <__aeabi_dmul>
 80271dc:	4a3e      	ldr	r2, [pc, #248]	@ (80272d8 <__ieee754_pow+0xa44>)
 80271de:	4b3f      	ldr	r3, [pc, #252]	@ (80272dc <__ieee754_pow+0xa48>)
 80271e0:	f7db fcf4 	bl	8002bcc <__aeabi_dsub>
 80271e4:	0022      	movs	r2, r4
 80271e6:	002b      	movs	r3, r5
 80271e8:	f7db fa28 	bl	800263c <__aeabi_dmul>
 80271ec:	4a3c      	ldr	r2, [pc, #240]	@ (80272e0 <__ieee754_pow+0xa4c>)
 80271ee:	4b3d      	ldr	r3, [pc, #244]	@ (80272e4 <__ieee754_pow+0xa50>)
 80271f0:	f7da fa7c 	bl	80016ec <__aeabi_dadd>
 80271f4:	0022      	movs	r2, r4
 80271f6:	002b      	movs	r3, r5
 80271f8:	f7db fa20 	bl	800263c <__aeabi_dmul>
 80271fc:	0002      	movs	r2, r0
 80271fe:	000b      	movs	r3, r1
 8027200:	0030      	movs	r0, r6
 8027202:	0039      	movs	r1, r7
 8027204:	f7db fce2 	bl	8002bcc <__aeabi_dsub>
 8027208:	0004      	movs	r4, r0
 802720a:	000d      	movs	r5, r1
 802720c:	0002      	movs	r2, r0
 802720e:	000b      	movs	r3, r1
 8027210:	0030      	movs	r0, r6
 8027212:	0039      	movs	r1, r7
 8027214:	f7db fa12 	bl	800263c <__aeabi_dmul>
 8027218:	2380      	movs	r3, #128	@ 0x80
 802721a:	9004      	str	r0, [sp, #16]
 802721c:	9105      	str	r1, [sp, #20]
 802721e:	2200      	movs	r2, #0
 8027220:	0020      	movs	r0, r4
 8027222:	0029      	movs	r1, r5
 8027224:	05db      	lsls	r3, r3, #23
 8027226:	f7db fcd1 	bl	8002bcc <__aeabi_dsub>
 802722a:	0002      	movs	r2, r0
 802722c:	000b      	movs	r3, r1
 802722e:	9804      	ldr	r0, [sp, #16]
 8027230:	9905      	ldr	r1, [sp, #20]
 8027232:	f7da fdbf 	bl	8001db4 <__aeabi_ddiv>
 8027236:	9a02      	ldr	r2, [sp, #8]
 8027238:	9b03      	ldr	r3, [sp, #12]
 802723a:	0004      	movs	r4, r0
 802723c:	000d      	movs	r5, r1
 802723e:	0030      	movs	r0, r6
 8027240:	0039      	movs	r1, r7
 8027242:	f7db f9fb 	bl	800263c <__aeabi_dmul>
 8027246:	9a02      	ldr	r2, [sp, #8]
 8027248:	9b03      	ldr	r3, [sp, #12]
 802724a:	f7da fa4f 	bl	80016ec <__aeabi_dadd>
 802724e:	0002      	movs	r2, r0
 8027250:	000b      	movs	r3, r1
 8027252:	0020      	movs	r0, r4
 8027254:	0029      	movs	r1, r5
 8027256:	f7db fcb9 	bl	8002bcc <__aeabi_dsub>
 802725a:	0032      	movs	r2, r6
 802725c:	003b      	movs	r3, r7
 802725e:	f7db fcb5 	bl	8002bcc <__aeabi_dsub>
 8027262:	0002      	movs	r2, r0
 8027264:	000b      	movs	r3, r1
 8027266:	2000      	movs	r0, #0
 8027268:	491f      	ldr	r1, [pc, #124]	@ (80272e8 <__ieee754_pow+0xa54>)
 802726a:	f7db fcaf 	bl	8002bcc <__aeabi_dsub>
 802726e:	9b00      	ldr	r3, [sp, #0]
 8027270:	051b      	lsls	r3, r3, #20
 8027272:	185b      	adds	r3, r3, r1
 8027274:	151a      	asrs	r2, r3, #20
 8027276:	2a00      	cmp	r2, #0
 8027278:	dc06      	bgt.n	8027288 <__ieee754_pow+0x9f4>
 802727a:	9a00      	ldr	r2, [sp, #0]
 802727c:	f000 f92a 	bl	80274d4 <scalbn>
 8027280:	9a08      	ldr	r2, [sp, #32]
 8027282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027284:	f7ff fbee 	bl	8026a64 <__ieee754_pow+0x1d0>
 8027288:	0019      	movs	r1, r3
 802728a:	e7f9      	b.n	8027280 <__ieee754_pow+0x9ec>
 802728c:	2300      	movs	r3, #0
 802728e:	4c16      	ldr	r4, [pc, #88]	@ (80272e8 <__ieee754_pow+0xa54>)
 8027290:	f7ff fbcb 	bl	8026a2a <__ieee754_pow+0x196>
 8027294:	2300      	movs	r3, #0
 8027296:	2400      	movs	r4, #0
 8027298:	f7ff fbc7 	bl	8026a2a <__ieee754_pow+0x196>
 802729c:	4090cbff 	.word	0x4090cbff
 80272a0:	3f6f3400 	.word	0x3f6f3400
 80272a4:	4090cc00 	.word	0x4090cc00
 80272a8:	3fe00000 	.word	0x3fe00000
 80272ac:	3fe62e43 	.word	0x3fe62e43
 80272b0:	fefa39ef 	.word	0xfefa39ef
 80272b4:	3fe62e42 	.word	0x3fe62e42
 80272b8:	0ca86c39 	.word	0x0ca86c39
 80272bc:	be205c61 	.word	0xbe205c61
 80272c0:	72bea4d0 	.word	0x72bea4d0
 80272c4:	3e663769 	.word	0x3e663769
 80272c8:	c5d26bf1 	.word	0xc5d26bf1
 80272cc:	3ebbbd41 	.word	0x3ebbbd41
 80272d0:	af25de2c 	.word	0xaf25de2c
 80272d4:	3f11566a 	.word	0x3f11566a
 80272d8:	16bebd93 	.word	0x16bebd93
 80272dc:	3f66c16c 	.word	0x3f66c16c
 80272e0:	5555553e 	.word	0x5555553e
 80272e4:	3fc55555 	.word	0x3fc55555
 80272e8:	3ff00000 	.word	0x3ff00000

080272ec <fabs>:
 80272ec:	0049      	lsls	r1, r1, #1
 80272ee:	084b      	lsrs	r3, r1, #1
 80272f0:	0019      	movs	r1, r3
 80272f2:	4770      	bx	lr

080272f4 <__ieee754_expf>:
 80272f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80272f6:	21ff      	movs	r1, #255	@ 0xff
 80272f8:	0043      	lsls	r3, r0, #1
 80272fa:	1c04      	adds	r4, r0, #0
 80272fc:	085b      	lsrs	r3, r3, #1
 80272fe:	05c9      	lsls	r1, r1, #23
 8027300:	428b      	cmp	r3, r1
 8027302:	d904      	bls.n	802730e <__ieee754_expf+0x1a>
 8027304:	1c01      	adds	r1, r0, #0
 8027306:	1c20      	adds	r0, r4, #0
 8027308:	f7d9 fada 	bl	80008c0 <__aeabi_fadd>
 802730c:	e00d      	b.n	802732a <__ieee754_expf+0x36>
 802730e:	0fc6      	lsrs	r6, r0, #31
 8027310:	428b      	cmp	r3, r1
 8027312:	d104      	bne.n	802731e <__ieee754_expf+0x2a>
 8027314:	2e00      	cmp	r6, #0
 8027316:	d000      	beq.n	802731a <__ieee754_expf+0x26>
 8027318:	e0ba      	b.n	8027490 <__ieee754_expf+0x19c>
 802731a:	1c20      	adds	r0, r4, #0
 802731c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802731e:	495d      	ldr	r1, [pc, #372]	@ (8027494 <__ieee754_expf+0x1a0>)
 8027320:	4288      	cmp	r0, r1
 8027322:	dd04      	ble.n	802732e <__ieee754_expf+0x3a>
 8027324:	2000      	movs	r0, #0
 8027326:	f000 f98a 	bl	802763e <__math_oflowf>
 802732a:	1c04      	adds	r4, r0, #0
 802732c:	e7f5      	b.n	802731a <__ieee754_expf+0x26>
 802732e:	2800      	cmp	r0, #0
 8027330:	da06      	bge.n	8027340 <__ieee754_expf+0x4c>
 8027332:	4a59      	ldr	r2, [pc, #356]	@ (8027498 <__ieee754_expf+0x1a4>)
 8027334:	4293      	cmp	r3, r2
 8027336:	d903      	bls.n	8027340 <__ieee754_expf+0x4c>
 8027338:	2000      	movs	r0, #0
 802733a:	f000 f97a 	bl	8027632 <__math_uflowf>
 802733e:	e7f4      	b.n	802732a <__ieee754_expf+0x36>
 8027340:	4a56      	ldr	r2, [pc, #344]	@ (802749c <__ieee754_expf+0x1a8>)
 8027342:	4293      	cmp	r3, r2
 8027344:	d96e      	bls.n	8027424 <__ieee754_expf+0x130>
 8027346:	4a56      	ldr	r2, [pc, #344]	@ (80274a0 <__ieee754_expf+0x1ac>)
 8027348:	00b5      	lsls	r5, r6, #2
 802734a:	4293      	cmp	r3, r2
 802734c:	d84e      	bhi.n	80273ec <__ieee754_expf+0xf8>
 802734e:	4b55      	ldr	r3, [pc, #340]	@ (80274a4 <__ieee754_expf+0x1b0>)
 8027350:	1c20      	adds	r0, r4, #0
 8027352:	5959      	ldr	r1, [r3, r5]
 8027354:	f7d9 ff62 	bl	800121c <__aeabi_fsub>
 8027358:	4b53      	ldr	r3, [pc, #332]	@ (80274a8 <__ieee754_expf+0x1b4>)
 802735a:	1c07      	adds	r7, r0, #0
 802735c:	595b      	ldr	r3, [r3, r5]
 802735e:	2501      	movs	r5, #1
 8027360:	1bad      	subs	r5, r5, r6
 8027362:	9300      	str	r3, [sp, #0]
 8027364:	1bad      	subs	r5, r5, r6
 8027366:	9900      	ldr	r1, [sp, #0]
 8027368:	1c38      	adds	r0, r7, #0
 802736a:	f7d9 ff57 	bl	800121c <__aeabi_fsub>
 802736e:	1c04      	adds	r4, r0, #0
 8027370:	1c21      	adds	r1, r4, #0
 8027372:	1c20      	adds	r0, r4, #0
 8027374:	f7d9 fe14 	bl	8000fa0 <__aeabi_fmul>
 8027378:	494c      	ldr	r1, [pc, #304]	@ (80274ac <__ieee754_expf+0x1b8>)
 802737a:	1c06      	adds	r6, r0, #0
 802737c:	f7d9 fe10 	bl	8000fa0 <__aeabi_fmul>
 8027380:	494b      	ldr	r1, [pc, #300]	@ (80274b0 <__ieee754_expf+0x1bc>)
 8027382:	f7d9 ff4b 	bl	800121c <__aeabi_fsub>
 8027386:	1c31      	adds	r1, r6, #0
 8027388:	f7d9 fe0a 	bl	8000fa0 <__aeabi_fmul>
 802738c:	4949      	ldr	r1, [pc, #292]	@ (80274b4 <__ieee754_expf+0x1c0>)
 802738e:	f7d9 fa97 	bl	80008c0 <__aeabi_fadd>
 8027392:	1c31      	adds	r1, r6, #0
 8027394:	f7d9 fe04 	bl	8000fa0 <__aeabi_fmul>
 8027398:	4947      	ldr	r1, [pc, #284]	@ (80274b8 <__ieee754_expf+0x1c4>)
 802739a:	f7d9 ff3f 	bl	800121c <__aeabi_fsub>
 802739e:	1c31      	adds	r1, r6, #0
 80273a0:	f7d9 fdfe 	bl	8000fa0 <__aeabi_fmul>
 80273a4:	4945      	ldr	r1, [pc, #276]	@ (80274bc <__ieee754_expf+0x1c8>)
 80273a6:	f7d9 fa8b 	bl	80008c0 <__aeabi_fadd>
 80273aa:	1c31      	adds	r1, r6, #0
 80273ac:	f7d9 fdf8 	bl	8000fa0 <__aeabi_fmul>
 80273b0:	1c01      	adds	r1, r0, #0
 80273b2:	1c20      	adds	r0, r4, #0
 80273b4:	f7d9 ff32 	bl	800121c <__aeabi_fsub>
 80273b8:	1c01      	adds	r1, r0, #0
 80273ba:	1c06      	adds	r6, r0, #0
 80273bc:	1c20      	adds	r0, r4, #0
 80273be:	f7d9 fdef 	bl	8000fa0 <__aeabi_fmul>
 80273c2:	9001      	str	r0, [sp, #4]
 80273c4:	2d00      	cmp	r5, #0
 80273c6:	d140      	bne.n	802744a <__ieee754_expf+0x156>
 80273c8:	2180      	movs	r1, #128	@ 0x80
 80273ca:	1c30      	adds	r0, r6, #0
 80273cc:	05c9      	lsls	r1, r1, #23
 80273ce:	f7d9 ff25 	bl	800121c <__aeabi_fsub>
 80273d2:	1c01      	adds	r1, r0, #0
 80273d4:	9801      	ldr	r0, [sp, #4]
 80273d6:	f7d9 fbfd 	bl	8000bd4 <__aeabi_fdiv>
 80273da:	1c21      	adds	r1, r4, #0
 80273dc:	f7d9 ff1e 	bl	800121c <__aeabi_fsub>
 80273e0:	1c01      	adds	r1, r0, #0
 80273e2:	20fe      	movs	r0, #254	@ 0xfe
 80273e4:	0580      	lsls	r0, r0, #22
 80273e6:	f7d9 ff19 	bl	800121c <__aeabi_fsub>
 80273ea:	e79e      	b.n	802732a <__ieee754_expf+0x36>
 80273ec:	4934      	ldr	r1, [pc, #208]	@ (80274c0 <__ieee754_expf+0x1cc>)
 80273ee:	1c20      	adds	r0, r4, #0
 80273f0:	f7d9 fdd6 	bl	8000fa0 <__aeabi_fmul>
 80273f4:	4b33      	ldr	r3, [pc, #204]	@ (80274c4 <__ieee754_expf+0x1d0>)
 80273f6:	5959      	ldr	r1, [r3, r5]
 80273f8:	f7d9 fa62 	bl	80008c0 <__aeabi_fadd>
 80273fc:	f7da f8c8 	bl	8001590 <__aeabi_f2iz>
 8027400:	0005      	movs	r5, r0
 8027402:	f7da f8e5 	bl	80015d0 <__aeabi_i2f>
 8027406:	4930      	ldr	r1, [pc, #192]	@ (80274c8 <__ieee754_expf+0x1d4>)
 8027408:	1c06      	adds	r6, r0, #0
 802740a:	f7d9 fdc9 	bl	8000fa0 <__aeabi_fmul>
 802740e:	1c01      	adds	r1, r0, #0
 8027410:	1c20      	adds	r0, r4, #0
 8027412:	f7d9 ff03 	bl	800121c <__aeabi_fsub>
 8027416:	492d      	ldr	r1, [pc, #180]	@ (80274cc <__ieee754_expf+0x1d8>)
 8027418:	1c07      	adds	r7, r0, #0
 802741a:	1c30      	adds	r0, r6, #0
 802741c:	f7d9 fdc0 	bl	8000fa0 <__aeabi_fmul>
 8027420:	9000      	str	r0, [sp, #0]
 8027422:	e7a0      	b.n	8027366 <__ieee754_expf+0x72>
 8027424:	22d0      	movs	r2, #208	@ 0xd0
 8027426:	0592      	lsls	r2, r2, #22
 8027428:	4293      	cmp	r3, r2
 802742a:	d20c      	bcs.n	8027446 <__ieee754_expf+0x152>
 802742c:	4928      	ldr	r1, [pc, #160]	@ (80274d0 <__ieee754_expf+0x1dc>)
 802742e:	1c20      	adds	r0, r4, #0
 8027430:	f7d9 fa46 	bl	80008c0 <__aeabi_fadd>
 8027434:	21fe      	movs	r1, #254	@ 0xfe
 8027436:	0589      	lsls	r1, r1, #22
 8027438:	f7d9 f88e 	bl	8000558 <__aeabi_fcmpgt>
 802743c:	1e05      	subs	r5, r0, #0
 802743e:	d097      	beq.n	8027370 <__ieee754_expf+0x7c>
 8027440:	21fe      	movs	r1, #254	@ 0xfe
 8027442:	0589      	lsls	r1, r1, #22
 8027444:	e75f      	b.n	8027306 <__ieee754_expf+0x12>
 8027446:	2500      	movs	r5, #0
 8027448:	e792      	b.n	8027370 <__ieee754_expf+0x7c>
 802744a:	2080      	movs	r0, #128	@ 0x80
 802744c:	1c31      	adds	r1, r6, #0
 802744e:	05c0      	lsls	r0, r0, #23
 8027450:	f7d9 fee4 	bl	800121c <__aeabi_fsub>
 8027454:	1c01      	adds	r1, r0, #0
 8027456:	9801      	ldr	r0, [sp, #4]
 8027458:	f7d9 fbbc 	bl	8000bd4 <__aeabi_fdiv>
 802745c:	1c01      	adds	r1, r0, #0
 802745e:	9800      	ldr	r0, [sp, #0]
 8027460:	f7d9 fedc 	bl	800121c <__aeabi_fsub>
 8027464:	1c39      	adds	r1, r7, #0
 8027466:	f7d9 fed9 	bl	800121c <__aeabi_fsub>
 802746a:	1c01      	adds	r1, r0, #0
 802746c:	20fe      	movs	r0, #254	@ 0xfe
 802746e:	0580      	lsls	r0, r0, #22
 8027470:	f7d9 fed4 	bl	800121c <__aeabi_fsub>
 8027474:	002b      	movs	r3, r5
 8027476:	337d      	adds	r3, #125	@ 0x7d
 8027478:	db02      	blt.n	8027480 <__ieee754_expf+0x18c>
 802747a:	05ec      	lsls	r4, r5, #23
 802747c:	1824      	adds	r4, r4, r0
 802747e:	e74c      	b.n	802731a <__ieee754_expf+0x26>
 8027480:	21d8      	movs	r1, #216	@ 0xd8
 8027482:	3564      	adds	r5, #100	@ 0x64
 8027484:	05ed      	lsls	r5, r5, #23
 8027486:	1828      	adds	r0, r5, r0
 8027488:	0509      	lsls	r1, r1, #20
 802748a:	f7d9 fd89 	bl	8000fa0 <__aeabi_fmul>
 802748e:	e74c      	b.n	802732a <__ieee754_expf+0x36>
 8027490:	2400      	movs	r4, #0
 8027492:	e742      	b.n	802731a <__ieee754_expf+0x26>
 8027494:	42b17217 	.word	0x42b17217
 8027498:	42cff1b5 	.word	0x42cff1b5
 802749c:	3eb17218 	.word	0x3eb17218
 80274a0:	3f851591 	.word	0x3f851591
 80274a4:	0802bb68 	.word	0x0802bb68
 80274a8:	0802bb60 	.word	0x0802bb60
 80274ac:	3331bb4c 	.word	0x3331bb4c
 80274b0:	35ddea0e 	.word	0x35ddea0e
 80274b4:	388ab355 	.word	0x388ab355
 80274b8:	3b360b61 	.word	0x3b360b61
 80274bc:	3e2aaaab 	.word	0x3e2aaaab
 80274c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80274c4:	0802bb70 	.word	0x0802bb70
 80274c8:	3f317180 	.word	0x3f317180
 80274cc:	3717f7d1 	.word	0x3717f7d1
 80274d0:	7149f2ca 	.word	0x7149f2ca

080274d4 <scalbn>:
 80274d4:	004b      	lsls	r3, r1, #1
 80274d6:	b570      	push	{r4, r5, r6, lr}
 80274d8:	0d5b      	lsrs	r3, r3, #21
 80274da:	0014      	movs	r4, r2
 80274dc:	000d      	movs	r5, r1
 80274de:	2b00      	cmp	r3, #0
 80274e0:	d10f      	bne.n	8027502 <scalbn+0x2e>
 80274e2:	004b      	lsls	r3, r1, #1
 80274e4:	085b      	lsrs	r3, r3, #1
 80274e6:	4303      	orrs	r3, r0
 80274e8:	d012      	beq.n	8027510 <scalbn+0x3c>
 80274ea:	4b23      	ldr	r3, [pc, #140]	@ (8027578 <scalbn+0xa4>)
 80274ec:	2200      	movs	r2, #0
 80274ee:	f7db f8a5 	bl	800263c <__aeabi_dmul>
 80274f2:	4b22      	ldr	r3, [pc, #136]	@ (802757c <scalbn+0xa8>)
 80274f4:	429c      	cmp	r4, r3
 80274f6:	da0c      	bge.n	8027512 <scalbn+0x3e>
 80274f8:	4a21      	ldr	r2, [pc, #132]	@ (8027580 <scalbn+0xac>)
 80274fa:	4b22      	ldr	r3, [pc, #136]	@ (8027584 <scalbn+0xb0>)
 80274fc:	f7db f89e 	bl	800263c <__aeabi_dmul>
 8027500:	e006      	b.n	8027510 <scalbn+0x3c>
 8027502:	4a21      	ldr	r2, [pc, #132]	@ (8027588 <scalbn+0xb4>)
 8027504:	4293      	cmp	r3, r2
 8027506:	d108      	bne.n	802751a <scalbn+0x46>
 8027508:	0002      	movs	r2, r0
 802750a:	000b      	movs	r3, r1
 802750c:	f7da f8ee 	bl	80016ec <__aeabi_dadd>
 8027510:	bd70      	pop	{r4, r5, r6, pc}
 8027512:	000d      	movs	r5, r1
 8027514:	004b      	lsls	r3, r1, #1
 8027516:	0d5b      	lsrs	r3, r3, #21
 8027518:	3b36      	subs	r3, #54	@ 0x36
 802751a:	4a1c      	ldr	r2, [pc, #112]	@ (802758c <scalbn+0xb8>)
 802751c:	4294      	cmp	r4, r2
 802751e:	dd0a      	ble.n	8027536 <scalbn+0x62>
 8027520:	4c1b      	ldr	r4, [pc, #108]	@ (8027590 <scalbn+0xbc>)
 8027522:	4d1c      	ldr	r5, [pc, #112]	@ (8027594 <scalbn+0xc0>)
 8027524:	2900      	cmp	r1, #0
 8027526:	da01      	bge.n	802752c <scalbn+0x58>
 8027528:	4c19      	ldr	r4, [pc, #100]	@ (8027590 <scalbn+0xbc>)
 802752a:	4d1b      	ldr	r5, [pc, #108]	@ (8027598 <scalbn+0xc4>)
 802752c:	4a18      	ldr	r2, [pc, #96]	@ (8027590 <scalbn+0xbc>)
 802752e:	4b19      	ldr	r3, [pc, #100]	@ (8027594 <scalbn+0xc0>)
 8027530:	0020      	movs	r0, r4
 8027532:	0029      	movs	r1, r5
 8027534:	e7e2      	b.n	80274fc <scalbn+0x28>
 8027536:	18e2      	adds	r2, r4, r3
 8027538:	4b18      	ldr	r3, [pc, #96]	@ (802759c <scalbn+0xc8>)
 802753a:	429a      	cmp	r2, r3
 802753c:	dcf0      	bgt.n	8027520 <scalbn+0x4c>
 802753e:	2a00      	cmp	r2, #0
 8027540:	dd05      	ble.n	802754e <scalbn+0x7a>
 8027542:	4b17      	ldr	r3, [pc, #92]	@ (80275a0 <scalbn+0xcc>)
 8027544:	0512      	lsls	r2, r2, #20
 8027546:	402b      	ands	r3, r5
 8027548:	431a      	orrs	r2, r3
 802754a:	0011      	movs	r1, r2
 802754c:	e7e0      	b.n	8027510 <scalbn+0x3c>
 802754e:	0013      	movs	r3, r2
 8027550:	3335      	adds	r3, #53	@ 0x35
 8027552:	da08      	bge.n	8027566 <scalbn+0x92>
 8027554:	4c0a      	ldr	r4, [pc, #40]	@ (8027580 <scalbn+0xac>)
 8027556:	4d0b      	ldr	r5, [pc, #44]	@ (8027584 <scalbn+0xb0>)
 8027558:	2900      	cmp	r1, #0
 802755a:	da01      	bge.n	8027560 <scalbn+0x8c>
 802755c:	4c08      	ldr	r4, [pc, #32]	@ (8027580 <scalbn+0xac>)
 802755e:	4d11      	ldr	r5, [pc, #68]	@ (80275a4 <scalbn+0xd0>)
 8027560:	4a07      	ldr	r2, [pc, #28]	@ (8027580 <scalbn+0xac>)
 8027562:	4b08      	ldr	r3, [pc, #32]	@ (8027584 <scalbn+0xb0>)
 8027564:	e7e4      	b.n	8027530 <scalbn+0x5c>
 8027566:	4b0e      	ldr	r3, [pc, #56]	@ (80275a0 <scalbn+0xcc>)
 8027568:	3236      	adds	r2, #54	@ 0x36
 802756a:	401d      	ands	r5, r3
 802756c:	0512      	lsls	r2, r2, #20
 802756e:	432a      	orrs	r2, r5
 8027570:	0011      	movs	r1, r2
 8027572:	4b0d      	ldr	r3, [pc, #52]	@ (80275a8 <scalbn+0xd4>)
 8027574:	2200      	movs	r2, #0
 8027576:	e7c1      	b.n	80274fc <scalbn+0x28>
 8027578:	43500000 	.word	0x43500000
 802757c:	ffff3cb0 	.word	0xffff3cb0
 8027580:	c2f8f359 	.word	0xc2f8f359
 8027584:	01a56e1f 	.word	0x01a56e1f
 8027588:	000007ff 	.word	0x000007ff
 802758c:	0000c350 	.word	0x0000c350
 8027590:	8800759c 	.word	0x8800759c
 8027594:	7e37e43c 	.word	0x7e37e43c
 8027598:	fe37e43c 	.word	0xfe37e43c
 802759c:	000007fe 	.word	0x000007fe
 80275a0:	800fffff 	.word	0x800fffff
 80275a4:	81a56e1f 	.word	0x81a56e1f
 80275a8:	3c900000 	.word	0x3c900000

080275ac <with_errno>:
 80275ac:	b570      	push	{r4, r5, r6, lr}
 80275ae:	000d      	movs	r5, r1
 80275b0:	0016      	movs	r6, r2
 80275b2:	0004      	movs	r4, r0
 80275b4:	f7fc fb10 	bl	8023bd8 <__errno>
 80275b8:	0029      	movs	r1, r5
 80275ba:	6006      	str	r6, [r0, #0]
 80275bc:	0020      	movs	r0, r4
 80275be:	bd70      	pop	{r4, r5, r6, pc}

080275c0 <xflow>:
 80275c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80275c2:	0014      	movs	r4, r2
 80275c4:	001d      	movs	r5, r3
 80275c6:	2800      	cmp	r0, #0
 80275c8:	d002      	beq.n	80275d0 <xflow+0x10>
 80275ca:	2180      	movs	r1, #128	@ 0x80
 80275cc:	0609      	lsls	r1, r1, #24
 80275ce:	185b      	adds	r3, r3, r1
 80275d0:	9200      	str	r2, [sp, #0]
 80275d2:	9301      	str	r3, [sp, #4]
 80275d4:	9a00      	ldr	r2, [sp, #0]
 80275d6:	9b01      	ldr	r3, [sp, #4]
 80275d8:	0020      	movs	r0, r4
 80275da:	0029      	movs	r1, r5
 80275dc:	f7db f82e 	bl	800263c <__aeabi_dmul>
 80275e0:	2222      	movs	r2, #34	@ 0x22
 80275e2:	f7ff ffe3 	bl	80275ac <with_errno>
 80275e6:	b003      	add	sp, #12
 80275e8:	bd30      	pop	{r4, r5, pc}

080275ea <__math_uflow>:
 80275ea:	2380      	movs	r3, #128	@ 0x80
 80275ec:	b510      	push	{r4, lr}
 80275ee:	2200      	movs	r2, #0
 80275f0:	055b      	lsls	r3, r3, #21
 80275f2:	f7ff ffe5 	bl	80275c0 <xflow>
 80275f6:	bd10      	pop	{r4, pc}

080275f8 <__math_oflow>:
 80275f8:	23e0      	movs	r3, #224	@ 0xe0
 80275fa:	b510      	push	{r4, lr}
 80275fc:	2200      	movs	r2, #0
 80275fe:	05db      	lsls	r3, r3, #23
 8027600:	f7ff ffde 	bl	80275c0 <xflow>
 8027604:	bd10      	pop	{r4, pc}

08027606 <with_errnof>:
 8027606:	b570      	push	{r4, r5, r6, lr}
 8027608:	000d      	movs	r5, r1
 802760a:	1c04      	adds	r4, r0, #0
 802760c:	f7fc fae4 	bl	8023bd8 <__errno>
 8027610:	6005      	str	r5, [r0, #0]
 8027612:	1c20      	adds	r0, r4, #0
 8027614:	bd70      	pop	{r4, r5, r6, pc}

08027616 <xflowf>:
 8027616:	b510      	push	{r4, lr}
 8027618:	1c0b      	adds	r3, r1, #0
 802761a:	2800      	cmp	r0, #0
 802761c:	d002      	beq.n	8027624 <xflowf+0xe>
 802761e:	2380      	movs	r3, #128	@ 0x80
 8027620:	061b      	lsls	r3, r3, #24
 8027622:	18cb      	adds	r3, r1, r3
 8027624:	1c18      	adds	r0, r3, #0
 8027626:	f7d9 fcbb 	bl	8000fa0 <__aeabi_fmul>
 802762a:	2122      	movs	r1, #34	@ 0x22
 802762c:	f7ff ffeb 	bl	8027606 <with_errnof>
 8027630:	bd10      	pop	{r4, pc}

08027632 <__math_uflowf>:
 8027632:	2180      	movs	r1, #128	@ 0x80
 8027634:	b510      	push	{r4, lr}
 8027636:	0549      	lsls	r1, r1, #21
 8027638:	f7ff ffed 	bl	8027616 <xflowf>
 802763c:	bd10      	pop	{r4, pc}

0802763e <__math_oflowf>:
 802763e:	21e0      	movs	r1, #224	@ 0xe0
 8027640:	b510      	push	{r4, lr}
 8027642:	05c9      	lsls	r1, r1, #23
 8027644:	f7ff ffe7 	bl	8027616 <xflowf>
 8027648:	bd10      	pop	{r4, pc}
	...

0802764c <__ieee754_sqrt>:
 802764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802764e:	000a      	movs	r2, r1
 8027650:	000d      	movs	r5, r1
 8027652:	496d      	ldr	r1, [pc, #436]	@ (8027808 <__ieee754_sqrt+0x1bc>)
 8027654:	0004      	movs	r4, r0
 8027656:	0003      	movs	r3, r0
 8027658:	0008      	movs	r0, r1
 802765a:	b087      	sub	sp, #28
 802765c:	4028      	ands	r0, r5
 802765e:	4288      	cmp	r0, r1
 8027660:	d111      	bne.n	8027686 <__ieee754_sqrt+0x3a>
 8027662:	0022      	movs	r2, r4
 8027664:	002b      	movs	r3, r5
 8027666:	0020      	movs	r0, r4
 8027668:	0029      	movs	r1, r5
 802766a:	f7da ffe7 	bl	800263c <__aeabi_dmul>
 802766e:	0002      	movs	r2, r0
 8027670:	000b      	movs	r3, r1
 8027672:	0020      	movs	r0, r4
 8027674:	0029      	movs	r1, r5
 8027676:	f7da f839 	bl	80016ec <__aeabi_dadd>
 802767a:	0004      	movs	r4, r0
 802767c:	000d      	movs	r5, r1
 802767e:	0020      	movs	r0, r4
 8027680:	0029      	movs	r1, r5
 8027682:	b007      	add	sp, #28
 8027684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027686:	2d00      	cmp	r5, #0
 8027688:	dc11      	bgt.n	80276ae <__ieee754_sqrt+0x62>
 802768a:	0069      	lsls	r1, r5, #1
 802768c:	0849      	lsrs	r1, r1, #1
 802768e:	4321      	orrs	r1, r4
 8027690:	d0f5      	beq.n	802767e <__ieee754_sqrt+0x32>
 8027692:	2000      	movs	r0, #0
 8027694:	4285      	cmp	r5, r0
 8027696:	d010      	beq.n	80276ba <__ieee754_sqrt+0x6e>
 8027698:	0022      	movs	r2, r4
 802769a:	002b      	movs	r3, r5
 802769c:	0020      	movs	r0, r4
 802769e:	0029      	movs	r1, r5
 80276a0:	f7db fa94 	bl	8002bcc <__aeabi_dsub>
 80276a4:	0002      	movs	r2, r0
 80276a6:	000b      	movs	r3, r1
 80276a8:	f7da fb84 	bl	8001db4 <__aeabi_ddiv>
 80276ac:	e7e5      	b.n	802767a <__ieee754_sqrt+0x2e>
 80276ae:	1528      	asrs	r0, r5, #20
 80276b0:	d115      	bne.n	80276de <__ieee754_sqrt+0x92>
 80276b2:	2480      	movs	r4, #128	@ 0x80
 80276b4:	2100      	movs	r1, #0
 80276b6:	0364      	lsls	r4, r4, #13
 80276b8:	e007      	b.n	80276ca <__ieee754_sqrt+0x7e>
 80276ba:	0ada      	lsrs	r2, r3, #11
 80276bc:	3815      	subs	r0, #21
 80276be:	055b      	lsls	r3, r3, #21
 80276c0:	2a00      	cmp	r2, #0
 80276c2:	d0fa      	beq.n	80276ba <__ieee754_sqrt+0x6e>
 80276c4:	e7f5      	b.n	80276b2 <__ieee754_sqrt+0x66>
 80276c6:	0052      	lsls	r2, r2, #1
 80276c8:	3101      	adds	r1, #1
 80276ca:	4222      	tst	r2, r4
 80276cc:	d0fb      	beq.n	80276c6 <__ieee754_sqrt+0x7a>
 80276ce:	1e4c      	subs	r4, r1, #1
 80276d0:	1b00      	subs	r0, r0, r4
 80276d2:	2420      	movs	r4, #32
 80276d4:	001d      	movs	r5, r3
 80276d6:	1a64      	subs	r4, r4, r1
 80276d8:	40e5      	lsrs	r5, r4
 80276da:	408b      	lsls	r3, r1
 80276dc:	432a      	orrs	r2, r5
 80276de:	494b      	ldr	r1, [pc, #300]	@ (802780c <__ieee754_sqrt+0x1c0>)
 80276e0:	0312      	lsls	r2, r2, #12
 80276e2:	1844      	adds	r4, r0, r1
 80276e4:	2180      	movs	r1, #128	@ 0x80
 80276e6:	0b12      	lsrs	r2, r2, #12
 80276e8:	0349      	lsls	r1, r1, #13
 80276ea:	4311      	orrs	r1, r2
 80276ec:	07c0      	lsls	r0, r0, #31
 80276ee:	d403      	bmi.n	80276f8 <__ieee754_sqrt+0xac>
 80276f0:	0fda      	lsrs	r2, r3, #31
 80276f2:	0049      	lsls	r1, r1, #1
 80276f4:	1851      	adds	r1, r2, r1
 80276f6:	005b      	lsls	r3, r3, #1
 80276f8:	2500      	movs	r5, #0
 80276fa:	1062      	asrs	r2, r4, #1
 80276fc:	0049      	lsls	r1, r1, #1
 80276fe:	2480      	movs	r4, #128	@ 0x80
 8027700:	9205      	str	r2, [sp, #20]
 8027702:	0fda      	lsrs	r2, r3, #31
 8027704:	1852      	adds	r2, r2, r1
 8027706:	2016      	movs	r0, #22
 8027708:	0029      	movs	r1, r5
 802770a:	005b      	lsls	r3, r3, #1
 802770c:	03a4      	lsls	r4, r4, #14
 802770e:	190e      	adds	r6, r1, r4
 8027710:	4296      	cmp	r6, r2
 8027712:	dc02      	bgt.n	802771a <__ieee754_sqrt+0xce>
 8027714:	1931      	adds	r1, r6, r4
 8027716:	1b92      	subs	r2, r2, r6
 8027718:	192d      	adds	r5, r5, r4
 802771a:	0fde      	lsrs	r6, r3, #31
 802771c:	0052      	lsls	r2, r2, #1
 802771e:	3801      	subs	r0, #1
 8027720:	1992      	adds	r2, r2, r6
 8027722:	005b      	lsls	r3, r3, #1
 8027724:	0864      	lsrs	r4, r4, #1
 8027726:	2800      	cmp	r0, #0
 8027728:	d1f1      	bne.n	802770e <__ieee754_sqrt+0xc2>
 802772a:	2620      	movs	r6, #32
 802772c:	2780      	movs	r7, #128	@ 0x80
 802772e:	0004      	movs	r4, r0
 8027730:	9604      	str	r6, [sp, #16]
 8027732:	063f      	lsls	r7, r7, #24
 8027734:	19c6      	adds	r6, r0, r7
 8027736:	46b4      	mov	ip, r6
 8027738:	4291      	cmp	r1, r2
 802773a:	db02      	blt.n	8027742 <__ieee754_sqrt+0xf6>
 802773c:	d114      	bne.n	8027768 <__ieee754_sqrt+0x11c>
 802773e:	429e      	cmp	r6, r3
 8027740:	d812      	bhi.n	8027768 <__ieee754_sqrt+0x11c>
 8027742:	4660      	mov	r0, ip
 8027744:	4666      	mov	r6, ip
 8027746:	19c0      	adds	r0, r0, r7
 8027748:	9100      	str	r1, [sp, #0]
 802774a:	2e00      	cmp	r6, #0
 802774c:	da03      	bge.n	8027756 <__ieee754_sqrt+0x10a>
 802774e:	43c6      	mvns	r6, r0
 8027750:	0ff6      	lsrs	r6, r6, #31
 8027752:	198e      	adds	r6, r1, r6
 8027754:	9600      	str	r6, [sp, #0]
 8027756:	1a52      	subs	r2, r2, r1
 8027758:	4563      	cmp	r3, ip
 802775a:	4189      	sbcs	r1, r1
 802775c:	4249      	negs	r1, r1
 802775e:	1a52      	subs	r2, r2, r1
 8027760:	4661      	mov	r1, ip
 8027762:	1a5b      	subs	r3, r3, r1
 8027764:	9900      	ldr	r1, [sp, #0]
 8027766:	19e4      	adds	r4, r4, r7
 8027768:	0fde      	lsrs	r6, r3, #31
 802776a:	0052      	lsls	r2, r2, #1
 802776c:	1992      	adds	r2, r2, r6
 802776e:	9e04      	ldr	r6, [sp, #16]
 8027770:	005b      	lsls	r3, r3, #1
 8027772:	3e01      	subs	r6, #1
 8027774:	087f      	lsrs	r7, r7, #1
 8027776:	9604      	str	r6, [sp, #16]
 8027778:	2e00      	cmp	r6, #0
 802777a:	d1db      	bne.n	8027734 <__ieee754_sqrt+0xe8>
 802777c:	431a      	orrs	r2, r3
 802777e:	d01f      	beq.n	80277c0 <__ieee754_sqrt+0x174>
 8027780:	4e23      	ldr	r6, [pc, #140]	@ (8027810 <__ieee754_sqrt+0x1c4>)
 8027782:	4f24      	ldr	r7, [pc, #144]	@ (8027814 <__ieee754_sqrt+0x1c8>)
 8027784:	6830      	ldr	r0, [r6, #0]
 8027786:	6871      	ldr	r1, [r6, #4]
 8027788:	683a      	ldr	r2, [r7, #0]
 802778a:	687b      	ldr	r3, [r7, #4]
 802778c:	9200      	str	r2, [sp, #0]
 802778e:	9301      	str	r3, [sp, #4]
 8027790:	6832      	ldr	r2, [r6, #0]
 8027792:	6873      	ldr	r3, [r6, #4]
 8027794:	9202      	str	r2, [sp, #8]
 8027796:	9303      	str	r3, [sp, #12]
 8027798:	9a00      	ldr	r2, [sp, #0]
 802779a:	9b01      	ldr	r3, [sp, #4]
 802779c:	f7db fa16 	bl	8002bcc <__aeabi_dsub>
 80277a0:	0002      	movs	r2, r0
 80277a2:	000b      	movs	r3, r1
 80277a4:	9802      	ldr	r0, [sp, #8]
 80277a6:	9903      	ldr	r1, [sp, #12]
 80277a8:	f7d8 fe92 	bl	80004d0 <__aeabi_dcmple>
 80277ac:	2800      	cmp	r0, #0
 80277ae:	d007      	beq.n	80277c0 <__ieee754_sqrt+0x174>
 80277b0:	6830      	ldr	r0, [r6, #0]
 80277b2:	6871      	ldr	r1, [r6, #4]
 80277b4:	683a      	ldr	r2, [r7, #0]
 80277b6:	687b      	ldr	r3, [r7, #4]
 80277b8:	1c67      	adds	r7, r4, #1
 80277ba:	d10f      	bne.n	80277dc <__ieee754_sqrt+0x190>
 80277bc:	9c04      	ldr	r4, [sp, #16]
 80277be:	3501      	adds	r5, #1
 80277c0:	4b15      	ldr	r3, [pc, #84]	@ (8027818 <__ieee754_sqrt+0x1cc>)
 80277c2:	106a      	asrs	r2, r5, #1
 80277c4:	18d2      	adds	r2, r2, r3
 80277c6:	0863      	lsrs	r3, r4, #1
 80277c8:	07ed      	lsls	r5, r5, #31
 80277ca:	d502      	bpl.n	80277d2 <__ieee754_sqrt+0x186>
 80277cc:	2180      	movs	r1, #128	@ 0x80
 80277ce:	0609      	lsls	r1, r1, #24
 80277d0:	430b      	orrs	r3, r1
 80277d2:	9905      	ldr	r1, [sp, #20]
 80277d4:	001c      	movs	r4, r3
 80277d6:	0509      	lsls	r1, r1, #20
 80277d8:	188d      	adds	r5, r1, r2
 80277da:	e750      	b.n	802767e <__ieee754_sqrt+0x32>
 80277dc:	f7d9 ff86 	bl	80016ec <__aeabi_dadd>
 80277e0:	6877      	ldr	r7, [r6, #4]
 80277e2:	6836      	ldr	r6, [r6, #0]
 80277e4:	0002      	movs	r2, r0
 80277e6:	000b      	movs	r3, r1
 80277e8:	0030      	movs	r0, r6
 80277ea:	0039      	movs	r1, r7
 80277ec:	f7d8 fe66 	bl	80004bc <__aeabi_dcmplt>
 80277f0:	2800      	cmp	r0, #0
 80277f2:	d004      	beq.n	80277fe <__ieee754_sqrt+0x1b2>
 80277f4:	3402      	adds	r4, #2
 80277f6:	4263      	negs	r3, r4
 80277f8:	4163      	adcs	r3, r4
 80277fa:	18ed      	adds	r5, r5, r3
 80277fc:	e7e0      	b.n	80277c0 <__ieee754_sqrt+0x174>
 80277fe:	2301      	movs	r3, #1
 8027800:	3401      	adds	r4, #1
 8027802:	439c      	bics	r4, r3
 8027804:	e7dc      	b.n	80277c0 <__ieee754_sqrt+0x174>
 8027806:	46c0      	nop			@ (mov r8, r8)
 8027808:	7ff00000 	.word	0x7ff00000
 802780c:	fffffc01 	.word	0xfffffc01
 8027810:	20000440 	.word	0x20000440
 8027814:	20000438 	.word	0x20000438
 8027818:	3fe00000 	.word	0x3fe00000

0802781c <_init>:
 802781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802781e:	46c0      	nop			@ (mov r8, r8)
 8027820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027822:	bc08      	pop	{r3}
 8027824:	469e      	mov	lr, r3
 8027826:	4770      	bx	lr

08027828 <_fini>:
 8027828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802782a:	46c0      	nop			@ (mov r8, r8)
 802782c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802782e:	bc08      	pop	{r3}
 8027830:	469e      	mov	lr, r3
 8027832:	4770      	bx	lr
