
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023088  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eb0  08023148  08023148  00024148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025ff8  08025ff8  0002842c  2**0
                  CONTENTS
  4 .ARM          00000008  08025ff8  08025ff8  00026ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026000  08026000  0002842c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026000  08026000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026004  08026004  00027004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000042c  20000000  08026008  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003394  2000042c  08026434  0002842c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200037c0  08026434  000287c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002842c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f98  00000000  00000000  00028454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000934d  00000000  00000000  0005c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa8  00000000  00000000  00065740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fa5  00000000  00000000  000681e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af7  00000000  00000000  0006a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000419d1  00000000  00000000  0008cc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05f8  00000000  00000000  000ce655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016ec4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ade0  00000000  00000000  0016ed00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00179ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00179b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000042c 	.word	0x2000042c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023130 	.word	0x08023130

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000430 	.word	0x20000430
 8000104:	08023130 	.word	0x08023130

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08025210 	.word	0x08025210
 8000e0c:	08025250 	.word	0x08025250
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802528c 	.word	0x0802528c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fba4 	bl	800fdb0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fbfb 	bl	800fe80 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fbae 	bl	800fe0c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000448 	.word	0x20000448

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fb2a 	bl	800fdb0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fb59 	bl	800fe28 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fb3d 	bl	800fe0c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000028 	.word	0x20000028

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fac4 	bl	800ed44 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a0c 	.word	0x20000a0c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd82 	bl	80062e0 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fddf 	bl	80063a4 <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000574 	.word	0x20000574
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000578 	.word	0x20000578

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a3c 	.word	0x20000a3c
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a48 	.word	0x20000a48
 8003884:	20000a4c 	.word	0x20000a4c

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a50 	.word	0x20000a50
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a70 	.word	0x20000a70
 80038f0:	20000a74 	.word	0x20000a74

080038f4 <setHIDS>:

#ifdef SSD1306

#endif

void setHIDS(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <setHIDS+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8003904:	4b03      	ldr	r3, [pc, #12]	@ (8003914 <setHIDS+0x20>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000a18 	.word	0x20000a18

08003918 <setVOC>:

void setVOC(uint16_t voc){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	0002      	movs	r2, r0
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <setVOC+0x1c>)
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	831a      	strh	r2, [r3, #24]
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000a18 	.word	0x20000a18

08003938 <setMic>:

void setMic(float dB){
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  MeasVal.dBA = dB;
 8003940:	4b03      	ldr	r3, [pc, #12]	@ (8003950 <setMic+0x18>)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	20000a18 	.word	0x20000a18

08003954 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	0002      	movs	r2, r0
 800395c:	1dbb      	adds	r3, r7, #6
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	1c0a      	adds	r2, r1, #0
 8003964:	801a      	strh	r2, [r3, #0]
  MeasVal.airPM2 = PM2 / 10.0f;
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	0018      	movs	r0, r3
 800396c:	f7fd fe30 	bl	80015d0 <__aeabi_i2f>
 8003970:	1c03      	adds	r3, r0, #0
 8003972:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <setPMsen50+0x54>)
 8003974:	1c18      	adds	r0, r3, #0
 8003976:	f7fd f92d 	bl	8000bd4 <__aeabi_fdiv>
 800397a:	1c03      	adds	r3, r0, #0
 800397c:	1c1a      	adds	r2, r3, #0
 800397e:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <setPMsen50+0x58>)
 8003980:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	0018      	movs	r0, r3
 8003988:	f7fd fe22 	bl	80015d0 <__aeabi_i2f>
 800398c:	1c03      	adds	r3, r0, #0
 800398e:	4906      	ldr	r1, [pc, #24]	@ (80039a8 <setPMsen50+0x54>)
 8003990:	1c18      	adds	r0, r3, #0
 8003992:	f7fd f91f 	bl	8000bd4 <__aeabi_fdiv>
 8003996:	1c03      	adds	r3, r0, #0
 8003998:	1c1a      	adds	r2, r3, #0
 800399a:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <setPMsen50+0x58>)
 800399c:	60da      	str	r2, [r3, #12]
}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b002      	add	sp, #8
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	41200000 	.word	0x41200000
 80039ac:	20000a18 	.word	0x20000a18

080039b0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	0005      	movs	r5, r0
 80039b8:	000c      	movs	r4, r1
 80039ba:	0010      	movs	r0, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	1dbb      	adds	r3, r7, #6
 80039c0:	1c2a      	adds	r2, r5, #0
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	1c22      	adds	r2, r4, #0
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	1cbb      	adds	r3, r7, #2
 80039cc:	1c02      	adds	r2, r0, #0
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	003b      	movs	r3, r7
 80039d2:	1c0a      	adds	r2, r1, #0
 80039d4:	801a      	strh	r2, [r3, #0]
  MeasVal.airPM2 = PM2 / 10.0f;
 80039d6:	1dbb      	adds	r3, r7, #6
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fd fdf8 	bl	80015d0 <__aeabi_i2f>
 80039e0:	1c03      	adds	r3, r0, #0
 80039e2:	491d      	ldr	r1, [pc, #116]	@ (8003a58 <setPMs+0xa8>)
 80039e4:	1c18      	adds	r0, r3, #0
 80039e6:	f7fd f8f5 	bl	8000bd4 <__aeabi_fdiv>
 80039ea:	1c03      	adds	r3, r0, #0
 80039ec:	1c1a      	adds	r2, r3, #0
 80039ee:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <setPMs+0xac>)
 80039f0:	609a      	str	r2, [r3, #8]
  MeasVal.airPM10 = PM10 / 10.0f;
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fd fdea 	bl	80015d0 <__aeabi_i2f>
 80039fc:	1c03      	adds	r3, r0, #0
 80039fe:	4916      	ldr	r1, [pc, #88]	@ (8003a58 <setPMs+0xa8>)
 8003a00:	1c18      	adds	r0, r3, #0
 8003a02:	f7fd f8e7 	bl	8000bd4 <__aeabi_fdiv>
 8003a06:	1c03      	adds	r3, r0, #0
 8003a08:	1c1a      	adds	r2, r3, #0
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <setPMs+0xac>)
 8003a0c:	60da      	str	r2, [r3, #12]
  MeasVal.VOCIndex = voc / 10.0f;
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7fd fddc 	bl	80015d0 <__aeabi_i2f>
 8003a18:	1c03      	adds	r3, r0, #0
 8003a1a:	490f      	ldr	r1, [pc, #60]	@ (8003a58 <setPMs+0xa8>)
 8003a1c:	1c18      	adds	r0, r3, #0
 8003a1e:	f7fd f8d9 	bl	8000bd4 <__aeabi_fdiv>
 8003a22:	1c03      	adds	r3, r0, #0
 8003a24:	1c18      	adds	r0, r3, #0
 8003a26:	f7fc fdf9 	bl	800061c <__aeabi_f2uiz>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <setPMs+0xac>)
 8003a30:	831a      	strh	r2, [r3, #24]
  MeasVal.airNOx = nox / 10.0f;
 8003a32:	003b      	movs	r3, r7
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fd fdca 	bl	80015d0 <__aeabi_i2f>
 8003a3c:	1c03      	adds	r3, r0, #0
 8003a3e:	4906      	ldr	r1, [pc, #24]	@ (8003a58 <setPMs+0xa8>)
 8003a40:	1c18      	adds	r0, r3, #0
 8003a42:	f7fd f8c7 	bl	8000bd4 <__aeabi_fdiv>
 8003a46:	1c03      	adds	r3, r0, #0
 8003a48:	1c1a      	adds	r2, r3, #0
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <setPMs+0xac>)
 8003a4c:	61da      	str	r2, [r3, #28]
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bdb0      	pop	{r4, r5, r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	41200000 	.word	0x41200000
 8003a5c:	20000a18 	.word	0x20000a18

08003a60 <SetConfigMode>:

void SetConfigMode(){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <SetConfigMode+0x30>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4053      	eors	r3, r2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <SetConfigMode+0x34>)
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <SetConfigMode+0x38>)
 8003a76:	0019      	movs	r1, r3
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f00a fd23 	bl	800e4c4 <CreateLine>
  }
  ReconfigSet = true;
 8003a7e:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <SetConfigMode+0x30>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <SetConfigMode+0x3c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000557 	.word	0x20000557
 8003a94:	08023148 	.word	0x08023148
 8003a98:	08023168 	.word	0x08023168
 8003a9c:	200001fb 	.word	0x200001fb

08003aa0 <GetReconfigMode>:

bool GetReconfigMode() {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003aa4:	4b02      	ldr	r3, [pc, #8]	@ (8003ab0 <GetReconfigMode+0x10>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	20000557 	.word	0x20000557

08003ab4 <ESP_GetUID>:

void ESP_GetUID(){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003ab8:	f00b f98e 	bl	800edd8 <HAL_GetUIDw0>
 8003abc:	0002      	movs	r2, r0
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <ESP_GetUID+0x28>)
 8003ac0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003ac2:	f00b f993 	bl	800edec <HAL_GetUIDw1>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <ESP_GetUID+0x28>)
 8003aca:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003acc:	f00b f998 	bl	800ee00 <HAL_GetUIDw2>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	4b02      	ldr	r3, [pc, #8]	@ (8003adc <ESP_GetUID+0x28>)
 8003ad4:	609a      	str	r2, [r3, #8]
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000560 	.word	0x20000560

08003ae0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003ae8:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <ESP_Init+0x2c>)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003aee:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <ESP_Init+0x30>)
 8003af0:	2202      	movs	r2, #2
 8003af2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003af4:	f7ff ffde 	bl	8003ab4 <ESP_GetUID>
  beurs = checkEEprom();
 8003af8:	f7ff fe90 	bl	800381c <checkEEprom>
 8003afc:	0003      	movs	r3, r0
 8003afe:	001a      	movs	r2, r3
 8003b00:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <ESP_Init+0x34>)
 8003b02:	701a      	strb	r2, [r3, #0]
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000044c 	.word	0x2000044c
 8003b10:	20000030 	.word	0x20000030
 8003b14:	2000055a 	.word	0x2000055a

08003b18 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	000a      	movs	r2, r1
 8003b22:	1cbb      	adds	r3, r7, #2
 8003b24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <ESP_Send+0x54>)
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	250f      	movs	r5, #15
 8003b2c:	197c      	adds	r4, r7, r5
 8003b2e:	1cbb      	adds	r3, r7, #2
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0019      	movs	r1, r3
 8003b36:	f013 fc2f 	bl	8017398 <HAL_UART_Transmit_DMA>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b3e:	197b      	adds	r3, r7, r5
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <ESP_Send+0x58>)
 8003b48:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <ESP_Send+0x5c>)
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f00a fcb9 	bl	800e4c4 <CreateLine>
    return false;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e006      	b.n	8003b64 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a07      	ldr	r2, [pc, #28]	@ (8003b78 <ESP_Send+0x60>)
 8003b5a:	4908      	ldr	r1, [pc, #32]	@ (8003b7c <ESP_Send+0x64>)
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	f00a fcb1 	bl	800e4c4 <CreateLine>
#endif
  return true;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6c:	2000044c 	.word	0x2000044c
 8003b70:	0802316c 	.word	0x0802316c
 8003b74:	0802318c 	.word	0x0802318c
 8003b78:	08023190 	.word	0x08023190
 8003b7c:	08023168 	.word	0x08023168

08003b80 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	000a      	movs	r2, r1
 8003b8a:	1cbb      	adds	r3, r7, #2
 8003b8c:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003b8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ca4 <ESP_Receive+0x124>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003b94:	260f      	movs	r6, #15
 8003b96:	19bb      	adds	r3, r7, r6
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003b9c:	4b42      	ldr	r3, [pc, #264]	@ (8003ca8 <ESP_Receive+0x128>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	250e      	movs	r5, #14
 8003ba2:	197c      	adds	r4, r7, r5
 8003ba4:	1cbb      	adds	r3, r7, #2
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0019      	movs	r1, r3
 8003bac:	f013 fc84 	bl	80174b8 <HAL_UART_Receive_DMA>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bb4:	002c      	movs	r4, r5
 8003bb6:	193b      	adds	r3, r7, r4
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d100      	bne.n	8003bc0 <ESP_Receive+0x40>
 8003bbe:	e06c      	b.n	8003c9a <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bc0:	4b39      	ldr	r3, [pc, #228]	@ (8003ca8 <ESP_Receive+0x128>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2284      	movs	r2, #132	@ 0x84
 8003bc6:	589b      	ldr	r3, [r3, r2]
 8003bc8:	4a38      	ldr	r2, [pc, #224]	@ (8003cac <ESP_Receive+0x12c>)
 8003bca:	4939      	ldr	r1, [pc, #228]	@ (8003cb0 <ESP_Receive+0x130>)
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f00a fc79 	bl	800e4c4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d008      	beq.n	8003bee <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bdc:	4a35      	ldr	r2, [pc, #212]	@ (8003cb4 <ESP_Receive+0x134>)
 8003bde:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <ESP_Receive+0x130>)
 8003be0:	0019      	movs	r1, r3
 8003be2:	2001      	movs	r0, #1
 8003be4:	f00a fc6e 	bl	800e4c4 <CreateLine>
      reset = true;
 8003be8:	19bb      	adds	r3, r7, r6
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003bee:	230e      	movs	r3, #14
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d005      	beq.n	8003c06 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb8 <ESP_Receive+0x138>)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <ESP_Receive+0x130>)
 8003bfe:	0019      	movs	r1, r3
 8003c00:	2001      	movs	r0, #1
 8003c02:	f00a fc5f 	bl	800e4c4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c06:	230e      	movs	r3, #14
 8003c08:	18fb      	adds	r3, r7, r3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d005      	beq.n	8003c1e <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c12:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <ESP_Receive+0x13c>)
 8003c14:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <ESP_Receive+0x130>)
 8003c16:	0019      	movs	r1, r3
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f00a fc53 	bl	800e4c4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c1e:	230e      	movs	r3, #14
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	4013      	ands	r3, r2
 8003c28:	d005      	beq.n	8003c36 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c2a:	4a25      	ldr	r2, [pc, #148]	@ (8003cc0 <ESP_Receive+0x140>)
 8003c2c:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <ESP_Receive+0x130>)
 8003c2e:	0019      	movs	r1, r3
 8003c30:	2001      	movs	r0, #1
 8003c32:	f00a fc47 	bl	800e4c4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c36:	230e      	movs	r3, #14
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d005      	beq.n	8003c4e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c42:	4a20      	ldr	r2, [pc, #128]	@ (8003cc4 <ESP_Receive+0x144>)
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <ESP_Receive+0x130>)
 8003c46:	0019      	movs	r1, r3
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f00a fc3b 	bl	800e4c4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c4e:	230e      	movs	r3, #14
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2220      	movs	r2, #32
 8003c56:	4013      	ands	r3, r2
 8003c58:	d005      	beq.n	8003c66 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc8 <ESP_Receive+0x148>)
 8003c5c:	4b14      	ldr	r3, [pc, #80]	@ (8003cb0 <ESP_Receive+0x130>)
 8003c5e:	0019      	movs	r1, r3
 8003c60:	2001      	movs	r0, #1
 8003c62:	f00a fc2f 	bl	800e4c4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c66:	230e      	movs	r3, #14
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2240      	movs	r2, #64	@ 0x40
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d005      	beq.n	8003c7e <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c72:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <ESP_Receive+0x14c>)
 8003c74:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb0 <ESP_Receive+0x130>)
 8003c76:	0019      	movs	r1, r3
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f00a fc23 	bl	800e4c4 <CreateLine>
    }
#endif
    if (reset) {
 8003c7e:	230f      	movs	r3, #15
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <ESP_Receive+0x110>
      SetAllREDLED();
 8003c88:	f009 fca2 	bl	800d5d0 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003c8c:	f00b fd23 	bl	800f6d6 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <ESP_Receive+0x124>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
    return false;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <ESP_Receive+0x11c>
  }
  return true;
 8003c9a:	2301      	movs	r3, #1
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b005      	add	sp, #20
 8003ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca4:	20000450 	.word	0x20000450
 8003ca8:	2000044c 	.word	0x2000044c
 8003cac:	080231a0 	.word	0x080231a0
 8003cb0:	0802318c 	.word	0x0802318c
 8003cb4:	080231d0 	.word	0x080231d0
 8003cb8:	080231f4 	.word	0x080231f4
 8003cbc:	08023218 	.word	0x08023218
 8003cc0:	0802323c 	.word	0x0802323c
 8003cc4:	08023260 	.word	0x08023260
 8003cc8:	0802328c 	.word	0x0802328c
 8003ccc:	080232bc 	.word	0x080232bc

08003cd0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_UART_ErrorCallback+0x34>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d10c      	bne.n	8003cfc <HAL_UART_ErrorCallback+0x2c>
    if (huart->ErrorCode != 4) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2284      	movs	r2, #132	@ 0x84
 8003ce6:	589b      	ldr	r3, [r3, r2]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d007      	beq.n	8003cfc <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2284      	movs	r2, #132	@ 0x84
 8003cf0:	589b      	ldr	r3, [r3, r2]
 8003cf2:	4a05      	ldr	r2, [pc, #20]	@ (8003d08 <HAL_UART_ErrorCallback+0x38>)
 8003cf4:	4905      	ldr	r1, [pc, #20]	@ (8003d0c <HAL_UART_ErrorCallback+0x3c>)
 8003cf6:	2003      	movs	r0, #3
 8003cf8:	f00a fbe4 	bl	800e4c4 <CreateLine>
    }
  }
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000044c 	.word	0x2000044c
 8003d08:	080232ec 	.word	0x080232ec
 8003d0c:	08023168 	.word	0x08023168

08003d10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e010      	b.n	8003d42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	001a      	movs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1898      	adds	r0, r3, r2
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	001a      	movs	r2, r3
 8003d34:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <uint8ArrayToString+0x44>)
 8003d36:	0019      	movs	r1, r3
 8003d38:	f01c f918 	bl	801ff6c <siprintf>
  for (int i = 0; i < 12; i++)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b0b      	cmp	r3, #11
 8003d46:	ddeb      	ble.n	8003d20 <uint8ArrayToString+0x10>
  }
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	08023318 	.word	0x08023318

08003d58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b089      	sub	sp, #36	@ 0x24
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	0002      	movs	r2, r0
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d64:	4bd8      	ldr	r3, [pc, #864]	@ (80040c8 <CreateMessage+0x370>)
 8003d66:	48d9      	ldr	r0, [pc, #868]	@ (80040cc <CreateMessage+0x374>)
 8003d68:	220c      	movs	r2, #12
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	f7ff fcc4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d70:	4bd7      	ldr	r3, [pc, #860]	@ (80040d0 <CreateMessage+0x378>)
 8003d72:	48d8      	ldr	r0, [pc, #864]	@ (80040d4 <CreateMessage+0x37c>)
 8003d74:	220c      	movs	r2, #12
 8003d76:	0019      	movs	r1, r3
 8003d78:	f7ff fcbe 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d7c:	4bd6      	ldr	r3, [pc, #856]	@ (80040d8 <CreateMessage+0x380>)
 8003d7e:	48d7      	ldr	r0, [pc, #860]	@ (80040dc <CreateMessage+0x384>)
 8003d80:	220c      	movs	r2, #12
 8003d82:	0019      	movs	r1, r3
 8003d84:	f7ff fcb8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d88:	4bd5      	ldr	r3, [pc, #852]	@ (80040e0 <CreateMessage+0x388>)
 8003d8a:	48d6      	ldr	r0, [pc, #856]	@ (80040e4 <CreateMessage+0x38c>)
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	0019      	movs	r1, r3
 8003d90:	f7ff fcb2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d94:	4bd4      	ldr	r3, [pc, #848]	@ (80040e8 <CreateMessage+0x390>)
 8003d96:	48d5      	ldr	r0, [pc, #852]	@ (80040ec <CreateMessage+0x394>)
 8003d98:	220c      	movs	r2, #12
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	f7ff fcac 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003da0:	4bd3      	ldr	r3, [pc, #844]	@ (80040f0 <CreateMessage+0x398>)
 8003da2:	48d4      	ldr	r0, [pc, #848]	@ (80040f4 <CreateMessage+0x39c>)
 8003da4:	220c      	movs	r2, #12
 8003da6:	0019      	movs	r1, r3
 8003da8:	f7ff fca6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dac:	4bd2      	ldr	r3, [pc, #840]	@ (80040f8 <CreateMessage+0x3a0>)
 8003dae:	48d3      	ldr	r0, [pc, #844]	@ (80040fc <CreateMessage+0x3a4>)
 8003db0:	220c      	movs	r2, #12
 8003db2:	0019      	movs	r1, r3
 8003db4:	f7ff fca0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003db8:	4bd1      	ldr	r3, [pc, #836]	@ (8004100 <CreateMessage+0x3a8>)
 8003dba:	48d2      	ldr	r0, [pc, #840]	@ (8004104 <CreateMessage+0x3ac>)
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	f7ff fc9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003dc4:	4bd0      	ldr	r3, [pc, #832]	@ (8004108 <CreateMessage+0x3b0>)
 8003dc6:	48d1      	ldr	r0, [pc, #836]	@ (800410c <CreateMessage+0x3b4>)
 8003dc8:	220c      	movs	r2, #12
 8003dca:	0019      	movs	r1, r3
 8003dcc:	f7ff fc94 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003dd0:	f7ff fd5a 	bl	8003888 <checkName>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d006      	beq.n	8003de6 <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003dd8:	4bcd      	ldr	r3, [pc, #820]	@ (8004110 <CreateMessage+0x3b8>)
 8003dda:	48ce      	ldr	r0, [pc, #824]	@ (8004114 <CreateMessage+0x3bc>)
 8003ddc:	221e      	movs	r2, #30
 8003dde:	0019      	movs	r1, r3
 8003de0:	f7ff fc8a 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003de4:	e005      	b.n	8003df2 <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003de6:	4bca      	ldr	r3, [pc, #808]	@ (8004110 <CreateMessage+0x3b8>)
 8003de8:	4acb      	ldr	r2, [pc, #812]	@ (8004118 <CreateMessage+0x3c0>)
 8003dea:	6811      	ldr	r1, [r2, #0]
 8003dec:	6019      	str	r1, [r3, #0]
 8003dee:	7912      	ldrb	r2, [r2, #4]
 8003df0:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003df2:	f7ff fcef 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003df6:	2390      	movs	r3, #144	@ 0x90
 8003df8:	00da      	lsls	r2, r3, #3
 8003dfa:	4bc8      	ldr	r3, [pc, #800]	@ (800411c <CreateMessage+0x3c4>)
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f01c f9f8 	bl	80201f4 <memset>
  uint16_t index = 0;
 8003e04:	260e      	movs	r6, #14
 8003e06:	19bb      	adds	r3, r7, r6
 8003e08:	2200      	movs	r2, #0
 8003e0a:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e0c:	19bb      	adds	r3, r7, r6
 8003e0e:	881a      	ldrh	r2, [r3, #0]
 8003e10:	4bc2      	ldr	r3, [pc, #776]	@ (800411c <CreateMessage+0x3c4>)
 8003e12:	18d3      	adds	r3, r2, r3
 8003e14:	4ac2      	ldr	r2, [pc, #776]	@ (8004120 <CreateMessage+0x3c8>)
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f01c f8a7 	bl	801ff6c <siprintf>
  index = strlen(message);
 8003e1e:	4bbf      	ldr	r3, [pc, #764]	@ (800411c <CreateMessage+0x3c4>)
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fc f9a3 	bl	800016c <strlen>
 8003e26:	0002      	movs	r2, r0
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e2c:	4aa6      	ldr	r2, [pc, #664]	@ (80040c8 <CreateMessage+0x370>)
 8003e2e:	4bbd      	ldr	r3, [pc, #756]	@ (8004124 <CreateMessage+0x3cc>)
 8003e30:	0011      	movs	r1, r2
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7ff ff6c 	bl	8003d10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e38:	19bb      	adds	r3, r7, r6
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	4bb7      	ldr	r3, [pc, #732]	@ (800411c <CreateMessage+0x3c4>)
 8003e3e:	18d4      	adds	r4, r2, r3
 8003e40:	4bb9      	ldr	r3, [pc, #740]	@ (8004128 <CreateMessage+0x3d0>)
 8003e42:	689d      	ldr	r5, [r3, #8]
 8003e44:	4bb9      	ldr	r3, [pc, #740]	@ (800412c <CreateMessage+0x3d4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	1c18      	adds	r0, r3, #0
 8003e4a:	f7ff fb0b 	bl	8003464 <__aeabi_f2d>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	000b      	movs	r3, r1
 8003e52:	48af      	ldr	r0, [pc, #700]	@ (8004110 <CreateMessage+0x3b8>)
 8003e54:	49b6      	ldr	r1, [pc, #728]	@ (8004130 <CreateMessage+0x3d8>)
 8003e56:	9202      	str	r2, [sp, #8]
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	4bb2      	ldr	r3, [pc, #712]	@ (8004124 <CreateMessage+0x3cc>)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	0003      	movs	r3, r0
 8003e60:	002a      	movs	r2, r5
 8003e62:	0020      	movs	r0, r4
 8003e64:	f01c f882 	bl	801ff6c <siprintf>
  index = strlen(message);
 8003e68:	4bac      	ldr	r3, [pc, #688]	@ (800411c <CreateMessage+0x3c4>)
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7fc f97e 	bl	800016c <strlen>
 8003e70:	0002      	movs	r2, r0
 8003e72:	19bb      	adds	r3, r7, r6
 8003e74:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003e76:	4a96      	ldr	r2, [pc, #600]	@ (80040d0 <CreateMessage+0x378>)
 8003e78:	4baa      	ldr	r3, [pc, #680]	@ (8004124 <CreateMessage+0x3cc>)
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff ff47 	bl	8003d10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003e82:	19bb      	adds	r3, r7, r6
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	4ba5      	ldr	r3, [pc, #660]	@ (800411c <CreateMessage+0x3c4>)
 8003e88:	18d4      	adds	r4, r2, r3
 8003e8a:	4ba7      	ldr	r3, [pc, #668]	@ (8004128 <CreateMessage+0x3d0>)
 8003e8c:	689d      	ldr	r5, [r3, #8]
 8003e8e:	4ba7      	ldr	r3, [pc, #668]	@ (800412c <CreateMessage+0x3d4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	1c18      	adds	r0, r3, #0
 8003e94:	f7ff fae6 	bl	8003464 <__aeabi_f2d>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	000b      	movs	r3, r1
 8003e9c:	489c      	ldr	r0, [pc, #624]	@ (8004110 <CreateMessage+0x3b8>)
 8003e9e:	49a5      	ldr	r1, [pc, #660]	@ (8004134 <CreateMessage+0x3dc>)
 8003ea0:	9202      	str	r2, [sp, #8]
 8003ea2:	9303      	str	r3, [sp, #12]
 8003ea4:	4b9f      	ldr	r3, [pc, #636]	@ (8004124 <CreateMessage+0x3cc>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	002a      	movs	r2, r5
 8003eac:	0020      	movs	r0, r4
 8003eae:	f01c f85d 	bl	801ff6c <siprintf>
  index = strlen(message);
 8003eb2:	4b9a      	ldr	r3, [pc, #616]	@ (800411c <CreateMessage+0x3c4>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7fc f959 	bl	800016c <strlen>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	19bb      	adds	r3, r7, r6
 8003ebe:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ec0:	4a85      	ldr	r2, [pc, #532]	@ (80040d8 <CreateMessage+0x380>)
 8003ec2:	4b98      	ldr	r3, [pc, #608]	@ (8004124 <CreateMessage+0x3cc>)
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff ff22 	bl	8003d10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.dBA);
 8003ecc:	19bb      	adds	r3, r7, r6
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	4b92      	ldr	r3, [pc, #584]	@ (800411c <CreateMessage+0x3c4>)
 8003ed2:	18d4      	adds	r4, r2, r3
 8003ed4:	4b94      	ldr	r3, [pc, #592]	@ (8004128 <CreateMessage+0x3d0>)
 8003ed6:	689d      	ldr	r5, [r3, #8]
 8003ed8:	4b94      	ldr	r3, [pc, #592]	@ (800412c <CreateMessage+0x3d4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	1c18      	adds	r0, r3, #0
 8003ede:	f7ff fac1 	bl	8003464 <__aeabi_f2d>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	000b      	movs	r3, r1
 8003ee6:	488a      	ldr	r0, [pc, #552]	@ (8004110 <CreateMessage+0x3b8>)
 8003ee8:	4993      	ldr	r1, [pc, #588]	@ (8004138 <CreateMessage+0x3e0>)
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	9303      	str	r3, [sp, #12]
 8003eee:	4b8d      	ldr	r3, [pc, #564]	@ (8004124 <CreateMessage+0x3cc>)
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	002a      	movs	r2, r5
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	f01c f838 	bl	801ff6c <siprintf>
  index = strlen(message);
 8003efc:	4b87      	ldr	r3, [pc, #540]	@ (800411c <CreateMessage+0x3c4>)
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7fc f934 	bl	800016c <strlen>
 8003f04:	0002      	movs	r2, r0
 8003f06:	19bb      	adds	r3, r7, r6
 8003f08:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f0a:	4a75      	ldr	r2, [pc, #468]	@ (80040e0 <CreateMessage+0x388>)
 8003f0c:	4b85      	ldr	r3, [pc, #532]	@ (8004124 <CreateMessage+0x3cc>)
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff fefd 	bl	8003d10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8003f16:	19bb      	adds	r3, r7, r6
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	4b80      	ldr	r3, [pc, #512]	@ (800411c <CreateMessage+0x3c4>)
 8003f1c:	18d0      	adds	r0, r2, r3
 8003f1e:	4b82      	ldr	r3, [pc, #520]	@ (8004128 <CreateMessage+0x3d0>)
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	4b82      	ldr	r3, [pc, #520]	@ (800412c <CreateMessage+0x3d4>)
 8003f24:	8b1b      	ldrh	r3, [r3, #24]
 8003f26:	4c7a      	ldr	r4, [pc, #488]	@ (8004110 <CreateMessage+0x3b8>)
 8003f28:	4984      	ldr	r1, [pc, #528]	@ (800413c <CreateMessage+0x3e4>)
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	4b7d      	ldr	r3, [pc, #500]	@ (8004124 <CreateMessage+0x3cc>)
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	0023      	movs	r3, r4
 8003f32:	f01c f81b 	bl	801ff6c <siprintf>
  index = strlen(message);
 8003f36:	4b79      	ldr	r3, [pc, #484]	@ (800411c <CreateMessage+0x3c4>)
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fc f917 	bl	800016c <strlen>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	19bb      	adds	r3, r7, r6
 8003f42:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4053      	eors	r3, r2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d100      	bne.n	8003f54 <CreateMessage+0x1fc>
 8003f52:	e103      	b.n	800415c <CreateMessage+0x404>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f54:	4a64      	ldr	r2, [pc, #400]	@ (80040e8 <CreateMessage+0x390>)
 8003f56:	4b73      	ldr	r3, [pc, #460]	@ (8004124 <CreateMessage+0x3cc>)
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fed8 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f60:	19bb      	adds	r3, r7, r6
 8003f62:	881a      	ldrh	r2, [r3, #0]
 8003f64:	4b6d      	ldr	r3, [pc, #436]	@ (800411c <CreateMessage+0x3c4>)
 8003f66:	18d4      	adds	r4, r2, r3
 8003f68:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <CreateMessage+0x3d0>)
 8003f6a:	689d      	ldr	r5, [r3, #8]
 8003f6c:	4b74      	ldr	r3, [pc, #464]	@ (8004140 <CreateMessage+0x3e8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1c18      	adds	r0, r3, #0
 8003f72:	f7ff fa77 	bl	8003464 <__aeabi_f2d>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	4865      	ldr	r0, [pc, #404]	@ (8004110 <CreateMessage+0x3b8>)
 8003f7c:	4971      	ldr	r1, [pc, #452]	@ (8004144 <CreateMessage+0x3ec>)
 8003f7e:	9202      	str	r2, [sp, #8]
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	4b68      	ldr	r3, [pc, #416]	@ (8004124 <CreateMessage+0x3cc>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	0003      	movs	r3, r0
 8003f88:	002a      	movs	r2, r5
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f01b ffee 	bl	801ff6c <siprintf>
    index = strlen(message);
 8003f90:	4b62      	ldr	r3, [pc, #392]	@ (800411c <CreateMessage+0x3c4>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fc f8ea 	bl	800016c <strlen>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	19bb      	adds	r3, r7, r6
 8003f9c:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003f9e:	4a54      	ldr	r2, [pc, #336]	@ (80040f0 <CreateMessage+0x398>)
 8003fa0:	4b60      	ldr	r3, [pc, #384]	@ (8004124 <CreateMessage+0x3cc>)
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff feb3 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003faa:	19bb      	adds	r3, r7, r6
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	4b5b      	ldr	r3, [pc, #364]	@ (800411c <CreateMessage+0x3c4>)
 8003fb0:	18d4      	adds	r4, r2, r3
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004128 <CreateMessage+0x3d0>)
 8003fb4:	689d      	ldr	r5, [r3, #8]
 8003fb6:	4b64      	ldr	r3, [pc, #400]	@ (8004148 <CreateMessage+0x3f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1c18      	adds	r0, r3, #0
 8003fbc:	f7ff fa52 	bl	8003464 <__aeabi_f2d>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	4852      	ldr	r0, [pc, #328]	@ (8004110 <CreateMessage+0x3b8>)
 8003fc6:	4961      	ldr	r1, [pc, #388]	@ (800414c <CreateMessage+0x3f4>)
 8003fc8:	9202      	str	r2, [sp, #8]
 8003fca:	9303      	str	r3, [sp, #12]
 8003fcc:	4b55      	ldr	r3, [pc, #340]	@ (8004124 <CreateMessage+0x3cc>)
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	002a      	movs	r2, r5
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f01b ffc9 	bl	801ff6c <siprintf>
    index = strlen(message);
 8003fda:	4b50      	ldr	r3, [pc, #320]	@ (800411c <CreateMessage+0x3c4>)
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f8c5 	bl	800016c <strlen>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	19bb      	adds	r3, r7, r6
 8003fe6:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 8003fe8:	4a43      	ldr	r2, [pc, #268]	@ (80040f8 <CreateMessage+0x3a0>)
 8003fea:	4b4e      	ldr	r3, [pc, #312]	@ (8004124 <CreateMessage+0x3cc>)
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fe8e 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOx);
 8003ff4:	19bb      	adds	r3, r7, r6
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	4b48      	ldr	r3, [pc, #288]	@ (800411c <CreateMessage+0x3c4>)
 8003ffa:	18d4      	adds	r4, r2, r3
 8003ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8004128 <CreateMessage+0x3d0>)
 8003ffe:	689d      	ldr	r5, [r3, #8]
 8004000:	4b4a      	ldr	r3, [pc, #296]	@ (800412c <CreateMessage+0x3d4>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	1c18      	adds	r0, r3, #0
 8004006:	f7ff fa2d 	bl	8003464 <__aeabi_f2d>
 800400a:	0002      	movs	r2, r0
 800400c:	000b      	movs	r3, r1
 800400e:	4840      	ldr	r0, [pc, #256]	@ (8004110 <CreateMessage+0x3b8>)
 8004010:	494f      	ldr	r1, [pc, #316]	@ (8004150 <CreateMessage+0x3f8>)
 8004012:	9202      	str	r2, [sp, #8]
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	4b43      	ldr	r3, [pc, #268]	@ (8004124 <CreateMessage+0x3cc>)
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	0003      	movs	r3, r0
 800401c:	002a      	movs	r2, r5
 800401e:	0020      	movs	r0, r4
 8004020:	f01b ffa4 	bl	801ff6c <siprintf>
    index = strlen(message);
 8004024:	4b3d      	ldr	r3, [pc, #244]	@ (800411c <CreateMessage+0x3c4>)
 8004026:	0018      	movs	r0, r3
 8004028:	f7fc f8a0 	bl	800016c <strlen>
 800402c:	0002      	movs	r2, r0
 800402e:	19bb      	adds	r3, r7, r6
 8004030:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004032:	4a33      	ldr	r2, [pc, #204]	@ (8004100 <CreateMessage+0x3a8>)
 8004034:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <CreateMessage+0x3cc>)
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff fe69 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM2);
 800403e:	19bb      	adds	r3, r7, r6
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	4b36      	ldr	r3, [pc, #216]	@ (800411c <CreateMessage+0x3c4>)
 8004044:	18d4      	adds	r4, r2, r3
 8004046:	4b38      	ldr	r3, [pc, #224]	@ (8004128 <CreateMessage+0x3d0>)
 8004048:	689d      	ldr	r5, [r3, #8]
 800404a:	4b38      	ldr	r3, [pc, #224]	@ (800412c <CreateMessage+0x3d4>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	1c18      	adds	r0, r3, #0
 8004050:	f7ff fa08 	bl	8003464 <__aeabi_f2d>
 8004054:	0002      	movs	r2, r0
 8004056:	000b      	movs	r3, r1
 8004058:	482d      	ldr	r0, [pc, #180]	@ (8004110 <CreateMessage+0x3b8>)
 800405a:	493e      	ldr	r1, [pc, #248]	@ (8004154 <CreateMessage+0x3fc>)
 800405c:	9202      	str	r2, [sp, #8]
 800405e:	9303      	str	r3, [sp, #12]
 8004060:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <CreateMessage+0x3cc>)
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	0003      	movs	r3, r0
 8004066:	002a      	movs	r2, r5
 8004068:	0020      	movs	r0, r4
 800406a:	f01b ff7f 	bl	801ff6c <siprintf>
    index = strlen(message);
 800406e:	4b2b      	ldr	r3, [pc, #172]	@ (800411c <CreateMessage+0x3c4>)
 8004070:	0018      	movs	r0, r3
 8004072:	f7fc f87b 	bl	800016c <strlen>
 8004076:	0002      	movs	r2, r0
 8004078:	19bb      	adds	r3, r7, r6
 800407a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 800407c:	4a22      	ldr	r2, [pc, #136]	@ (8004108 <CreateMessage+0x3b0>)
 800407e:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <CreateMessage+0x3cc>)
 8004080:	0011      	movs	r1, r2
 8004082:	0018      	movs	r0, r3
 8004084:	f7ff fe44 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airPM10);
 8004088:	19bb      	adds	r3, r7, r6
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	4b23      	ldr	r3, [pc, #140]	@ (800411c <CreateMessage+0x3c4>)
 800408e:	18d4      	adds	r4, r2, r3
 8004090:	4b25      	ldr	r3, [pc, #148]	@ (8004128 <CreateMessage+0x3d0>)
 8004092:	689d      	ldr	r5, [r3, #8]
 8004094:	4b25      	ldr	r3, [pc, #148]	@ (800412c <CreateMessage+0x3d4>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	1c18      	adds	r0, r3, #0
 800409a:	f7ff f9e3 	bl	8003464 <__aeabi_f2d>
 800409e:	0002      	movs	r2, r0
 80040a0:	000b      	movs	r3, r1
 80040a2:	481b      	ldr	r0, [pc, #108]	@ (8004110 <CreateMessage+0x3b8>)
 80040a4:	492c      	ldr	r1, [pc, #176]	@ (8004158 <CreateMessage+0x400>)
 80040a6:	9202      	str	r2, [sp, #8]
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <CreateMessage+0x3cc>)
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	0003      	movs	r3, r0
 80040b0:	002a      	movs	r2, r5
 80040b2:	0020      	movs	r0, r4
 80040b4:	f01b ff5a 	bl	801ff6c <siprintf>
    index = strlen(message);
 80040b8:	4b18      	ldr	r3, [pc, #96]	@ (800411c <CreateMessage+0x3c4>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7fc f856 	bl	800016c <strlen>
 80040c0:	0002      	movs	r2, r0
 80040c2:	19bb      	adds	r3, r7, r6
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e06f      	b.n	80041a8 <CreateMessage+0x450>
 80040c8:	20000a78 	.word	0x20000a78
 80040cc:	0808000c 	.word	0x0808000c
 80040d0:	20000a84 	.word	0x20000a84
 80040d4:	08080018 	.word	0x08080018
 80040d8:	20000a90 	.word	0x20000a90
 80040dc:	08080048 	.word	0x08080048
 80040e0:	20000a9c 	.word	0x20000a9c
 80040e4:	08080030 	.word	0x08080030
 80040e8:	20000aa8 	.word	0x20000aa8
 80040ec:	0808006c 	.word	0x0808006c
 80040f0:	20000ab4 	.word	0x20000ab4
 80040f4:	08080078 	.word	0x08080078
 80040f8:	20000ac0 	.word	0x20000ac0
 80040fc:	08080024 	.word	0x08080024
 8004100:	20000acc 	.word	0x20000acc
 8004104:	08080054 	.word	0x08080054
 8004108:	20000ad8 	.word	0x20000ad8
 800410c:	08080060 	.word	0x08080060
 8004110:	20000ae4 	.word	0x20000ae4
 8004114:	08080090 	.word	0x08080090
 8004118:	080252ec 	.word	0x080252ec
 800411c:	2000057c 	.word	0x2000057c
 8004120:	08023320 	.word	0x08023320
 8004124:	20000b04 	.word	0x20000b04
 8004128:	20000560 	.word	0x20000560
 800412c:	20000a18 	.word	0x20000a18
 8004130:	08023324 	.word	0x08023324
 8004134:	08023378 	.word	0x08023378
 8004138:	080233d0 	.word	0x080233d0
 800413c:	0802342c 	.word	0x0802342c
 8004140:	20000574 	.word	0x20000574
 8004144:	08023480 	.word	0x08023480
 8004148:	20000578 	.word	0x20000578
 800414c:	080234e0 	.word	0x080234e0
 8004150:	08023540 	.word	0x08023540
 8004154:	08023598 	.word	0x08023598
 8004158:	080235f4 	.word	0x080235f4

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 800415c:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <CreateMessage+0x48c>)
 800415e:	4b22      	ldr	r3, [pc, #136]	@ (80041e8 <CreateMessage+0x490>)
 8004160:	0011      	movs	r1, r2
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fdd4 	bl	8003d10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8004168:	260e      	movs	r6, #14
 800416a:	19bb      	adds	r3, r7, r6
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ec <CreateMessage+0x494>)
 8004170:	18d4      	adds	r4, r2, r3
 8004172:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <CreateMessage+0x498>)
 8004174:	689d      	ldr	r5, [r3, #8]
 8004176:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <CreateMessage+0x49c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1c18      	adds	r0, r3, #0
 800417c:	f7ff f972 	bl	8003464 <__aeabi_f2d>
 8004180:	0002      	movs	r2, r0
 8004182:	000b      	movs	r3, r1
 8004184:	481c      	ldr	r0, [pc, #112]	@ (80041f8 <CreateMessage+0x4a0>)
 8004186:	491d      	ldr	r1, [pc, #116]	@ (80041fc <CreateMessage+0x4a4>)
 8004188:	9202      	str	r2, [sp, #8]
 800418a:	9303      	str	r3, [sp, #12]
 800418c:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <CreateMessage+0x490>)
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	0003      	movs	r3, r0
 8004192:	002a      	movs	r2, r5
 8004194:	0020      	movs	r0, r4
 8004196:	f01b fee9 	bl	801ff6c <siprintf>
    index = strlen(message);
 800419a:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <CreateMessage+0x494>)
 800419c:	0018      	movs	r0, r3
 800419e:	f7fb ffe5 	bl	800016c <strlen>
 80041a2:	0002      	movs	r2, r0
 80041a4:	19bb      	adds	r3, r7, r6
 80041a6:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  sprintf(&message[index], "]");
 80041a8:	230e      	movs	r3, #14
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <CreateMessage+0x494>)
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <CreateMessage+0x4a8>)
 80041b4:	0011      	movs	r1, r2
 80041b6:	0018      	movs	r0, r3
 80041b8:	f01b fed8 	bl	801ff6c <siprintf>
  Debug("Length of datagram: %d", strlen(message));
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <CreateMessage+0x494>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f7fb ffd4 	bl	800016c <strlen>
 80041c4:	0003      	movs	r3, r0
 80041c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004204 <CreateMessage+0x4ac>)
 80041c8:	490f      	ldr	r1, [pc, #60]	@ (8004208 <CreateMessage+0x4b0>)
 80041ca:	2003      	movs	r0, #3
 80041cc:	f00a f97a 	bl	800e4c4 <CreateLine>
  return strlen(message);
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <CreateMessage+0x494>)
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7fb ffca 	bl	800016c <strlen>
 80041d8:	0003      	movs	r3, r0
 80041da:	b29b      	uxth	r3, r3
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b005      	add	sp, #20
 80041e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e4:	20000aa8 	.word	0x20000aa8
 80041e8:	20000b04 	.word	0x20000b04
 80041ec:	2000057c 	.word	0x2000057c
 80041f0:	20000560 	.word	0x20000560
 80041f4:	20000574 	.word	0x20000574
 80041f8:	20000ae4 	.word	0x20000ae4
 80041fc:	0802364c 	.word	0x0802364c
 8004200:	080236a4 	.word	0x080236a4
 8004204:	080236a8 	.word	0x080236a8
 8004208:	08023168 	.word	0x08023168

0800420c <StartProg>:

void StartProg(){
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8004210:	2064      	movs	r0, #100	@ 0x64
 8004212:	f00a fda1 	bl	800ed58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004216:	4b15      	ldr	r3, [pc, #84]	@ (800426c <StartProg+0x60>)
 8004218:	2200      	movs	r2, #0
 800421a:	2101      	movs	r1, #1
 800421c:	0018      	movs	r0, r3
 800421e:	f00c f822 	bl	8010266 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004222:	2064      	movs	r0, #100	@ 0x64
 8004224:	f00a fd98 	bl	800ed58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004228:	4b10      	ldr	r3, [pc, #64]	@ (800426c <StartProg+0x60>)
 800422a:	2200      	movs	r2, #0
 800422c:	2102      	movs	r1, #2
 800422e:	0018      	movs	r0, r3
 8004230:	f00c f819 	bl	8010266 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004234:	23fa      	movs	r3, #250	@ 0xfa
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	0018      	movs	r0, r3
 800423a:	f00a fd8d 	bl	800ed58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <StartProg+0x60>)
 8004240:	2201      	movs	r2, #1
 8004242:	2101      	movs	r1, #1
 8004244:	0018      	movs	r0, r3
 8004246:	f00c f80e 	bl	8010266 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800424a:	23fa      	movs	r3, #250	@ 0xfa
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	0018      	movs	r0, r3
 8004250:	f00a fd82 	bl	800ed58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <StartProg+0x60>)
 8004256:	2201      	movs	r2, #1
 8004258:	2102      	movs	r1, #2
 800425a:	0018      	movs	r0, r3
 800425c:	f00c f803 	bl	8010266 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004260:	2028      	movs	r0, #40	@ 0x28
 8004262:	f00a fd79 	bl	800ed58 <HAL_Delay>
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	50001c00 	.word	0x50001c00

08004270 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004272:	b0d9      	sub	sp, #356	@ 0x164
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	0008      	movs	r0, r1
 800427a:	0011      	movs	r1, r2
 800427c:	4ba4      	ldr	r3, [pc, #656]	@ (8004510 <ParseBuffer+0x2a0>)
 800427e:	24b0      	movs	r4, #176	@ 0xb0
 8004280:	0064      	lsls	r4, r4, #1
 8004282:	191b      	adds	r3, r3, r4
 8004284:	19db      	adds	r3, r3, r7
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	4ba2      	ldr	r3, [pc, #648]	@ (8004514 <ParseBuffer+0x2a4>)
 800428c:	191b      	adds	r3, r3, r4
 800428e:	19db      	adds	r3, r3, r7
 8004290:	1c0a      	adds	r2, r1, #0
 8004292:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	005a      	lsls	r2, r3, #1
 8004298:	2348      	movs	r3, #72	@ 0x48
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2100      	movs	r1, #0
 800429e:	0018      	movs	r0, r3
 80042a0:	f01b ffa8 	bl	80201f4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042a4:	2360      	movs	r3, #96	@ 0x60
 80042a6:	33ff      	adds	r3, #255	@ 0xff
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	2203      	movs	r2, #3
 80042ac:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80042ae:	23ae      	movs	r3, #174	@ 0xae
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e013      	b.n	80042e2 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80042ba:	20ae      	movs	r0, #174	@ 0xae
 80042bc:	0040      	lsls	r0, r0, #1
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	18d2      	adds	r2, r2, r3
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	7811      	ldrb	r1, [r2, #0]
 80042cc:	4a92      	ldr	r2, [pc, #584]	@ (8004518 <ParseBuffer+0x2a8>)
 80042ce:	24b0      	movs	r4, #176	@ 0xb0
 80042d0:	0064      	lsls	r4, r4, #1
 80042d2:	1912      	adds	r2, r2, r4
 80042d4:	19d2      	adds	r2, r2, r7
 80042d6:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80042d8:	183b      	adds	r3, r7, r0
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	3201      	adds	r2, #1
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	23ae      	movs	r3, #174	@ 0xae
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	18fa      	adds	r2, r7, r3
 80042e8:	4b89      	ldr	r3, [pc, #548]	@ (8004510 <ParseBuffer+0x2a0>)
 80042ea:	21b0      	movs	r1, #176	@ 0xb0
 80042ec:	0049      	lsls	r1, r1, #1
 80042ee:	185b      	adds	r3, r3, r1
 80042f0:	19db      	adds	r3, r3, r7
 80042f2:	8812      	ldrh	r2, [r2, #0]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3df      	bcc.n	80042ba <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80042fa:	4b85      	ldr	r3, [pc, #532]	@ (8004510 <ParseBuffer+0x2a0>)
 80042fc:	185b      	adds	r3, r3, r1
 80042fe:	19db      	adds	r3, r3, r7
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	4a85      	ldr	r2, [pc, #532]	@ (8004518 <ParseBuffer+0x2a8>)
 8004304:	1852      	adds	r2, r2, r1
 8004306:	19d2      	adds	r2, r2, r7
 8004308:	2100      	movs	r1, #0
 800430a:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 800430c:	f00a f954 	bl	800e5b8 <GetVerboseLevel>
 8004310:	0003      	movs	r3, r0
 8004312:	2b03      	cmp	r3, #3
 8004314:	d106      	bne.n	8004324 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 8004316:	2348      	movs	r3, #72	@ 0x48
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	4a80      	ldr	r2, [pc, #512]	@ (800451c <ParseBuffer+0x2ac>)
 800431c:	4980      	ldr	r1, [pc, #512]	@ (8004520 <ParseBuffer+0x2b0>)
 800431e:	2003      	movs	r0, #3
 8004320:	f00a f8d0 	bl	800e4c4 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	26ac      	movs	r6, #172	@ 0xac
 8004328:	0076      	lsls	r6, r6, #1
 800432a:	19ba      	adds	r2, r7, r6
 800432c:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 800432e:	4b7d      	ldr	r3, [pc, #500]	@ (8004524 <ParseBuffer+0x2b4>)
 8004330:	25b0      	movs	r5, #176	@ 0xb0
 8004332:	006d      	lsls	r5, r5, #1
 8004334:	195b      	adds	r3, r3, r5
 8004336:	19db      	adds	r3, r3, r7
 8004338:	4a7b      	ldr	r2, [pc, #492]	@ (8004528 <ParseBuffer+0x2b8>)
 800433a:	8811      	ldrh	r1, [r2, #0]
 800433c:	8019      	strh	r1, [r3, #0]
 800433e:	7892      	ldrb	r2, [r2, #2]
 8004340:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004342:	4b7a      	ldr	r3, [pc, #488]	@ (800452c <ParseBuffer+0x2bc>)
 8004344:	195b      	adds	r3, r3, r5
 8004346:	19db      	adds	r3, r3, r7
 8004348:	4a79      	ldr	r2, [pc, #484]	@ (8004530 <ParseBuffer+0x2c0>)
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	6019      	str	r1, [r3, #0]
 800434e:	8892      	ldrh	r2, [r2, #4]
 8004350:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004352:	4b78      	ldr	r3, [pc, #480]	@ (8004534 <ParseBuffer+0x2c4>)
 8004354:	195b      	adds	r3, r3, r5
 8004356:	19db      	adds	r3, r3, r7
 8004358:	4a77      	ldr	r2, [pc, #476]	@ (8004538 <ParseBuffer+0x2c8>)
 800435a:	6811      	ldr	r1, [r2, #0]
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	7912      	ldrb	r2, [r2, #4]
 8004360:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004362:	4b76      	ldr	r3, [pc, #472]	@ (800453c <ParseBuffer+0x2cc>)
 8004364:	195b      	adds	r3, r3, r5
 8004366:	19db      	adds	r3, r3, r7
 8004368:	4a75      	ldr	r2, [pc, #468]	@ (8004540 <ParseBuffer+0x2d0>)
 800436a:	6811      	ldr	r1, [r2, #0]
 800436c:	6019      	str	r1, [r3, #0]
 800436e:	8892      	ldrh	r2, [r2, #4]
 8004370:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004372:	4b74      	ldr	r3, [pc, #464]	@ (8004544 <ParseBuffer+0x2d4>)
 8004374:	195b      	adds	r3, r3, r5
 8004376:	19db      	adds	r3, r3, r7
 8004378:	223e      	movs	r2, #62	@ 0x3e
 800437a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800437c:	4b72      	ldr	r3, [pc, #456]	@ (8004548 <ParseBuffer+0x2d8>)
 800437e:	195b      	adds	r3, r3, r5
 8004380:	19db      	adds	r3, r3, r7
 8004382:	4a72      	ldr	r2, [pc, #456]	@ (800454c <ParseBuffer+0x2dc>)
 8004384:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004386:	c313      	stmia	r3!, {r0, r1, r4}
 8004388:	8811      	ldrh	r1, [r2, #0]
 800438a:	8019      	strh	r1, [r3, #0]
 800438c:	7892      	ldrb	r2, [r2, #2]
 800438e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004390:	4b6f      	ldr	r3, [pc, #444]	@ (8004550 <ParseBuffer+0x2e0>)
 8004392:	195b      	adds	r3, r3, r5
 8004394:	19db      	adds	r3, r3, r7
 8004396:	4a6f      	ldr	r2, [pc, #444]	@ (8004554 <ParseBuffer+0x2e4>)
 8004398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800439a:	c313      	stmia	r3!, {r0, r1, r4}
 800439c:	8812      	ldrh	r2, [r2, #0]
 800439e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004514 <ParseBuffer+0x2a4>)
 80043a2:	195b      	adds	r3, r3, r5
 80043a4:	19db      	adds	r3, r3, r7
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 80043ac:	2344      	movs	r3, #68	@ 0x44
 80043ae:	18fa      	adds	r2, r7, r3
 80043b0:	2348      	movs	r3, #72	@ 0x48
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	0011      	movs	r1, r2
 80043b6:	0018      	movs	r0, r3
 80043b8:	f01b ff57 	bl	802026a <strstr>
 80043bc:	0003      	movs	r3, r0
 80043be:	19ba      	adds	r2, r7, r6
 80043c0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80043c2:	4b54      	ldr	r3, [pc, #336]	@ (8004514 <ParseBuffer+0x2a4>)
 80043c4:	22b0      	movs	r2, #176	@ 0xb0
 80043c6:	0052      	lsls	r2, r2, #1
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10c      	bne.n	80043ec <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80043d2:	232c      	movs	r3, #44	@ 0x2c
 80043d4:	18fa      	adds	r2, r7, r3
 80043d6:	2348      	movs	r3, #72	@ 0x48
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f01b ff44 	bl	802026a <strstr>
 80043e2:	0003      	movs	r3, r0
 80043e4:	22ac      	movs	r2, #172	@ 0xac
 80043e6:	0052      	lsls	r2, r2, #1
 80043e8:	18ba      	adds	r2, r7, r2
 80043ea:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80043ec:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <ParseBuffer+0x2a4>)
 80043ee:	22b0      	movs	r2, #176	@ 0xb0
 80043f0:	0052      	lsls	r2, r2, #1
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d10c      	bne.n	8004416 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80043fc:	2328      	movs	r3, #40	@ 0x28
 80043fe:	18fa      	adds	r2, r7, r3
 8004400:	2348      	movs	r3, #72	@ 0x48
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f01b ff2f 	bl	802026a <strstr>
 800440c:	0003      	movs	r3, r0
 800440e:	22ac      	movs	r2, #172	@ 0xac
 8004410:	0052      	lsls	r2, r2, #1
 8004412:	18ba      	adds	r2, r7, r2
 8004414:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <ParseBuffer+0x2a4>)
 8004418:	22b0      	movs	r2, #176	@ 0xb0
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	189b      	adds	r3, r3, r2
 800441e:	19db      	adds	r3, r3, r7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b05      	cmp	r3, #5
 8004424:	d10c      	bne.n	8004440 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8004426:	2308      	movs	r3, #8
 8004428:	18fa      	adds	r2, r7, r3
 800442a:	2348      	movs	r3, #72	@ 0x48
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f01b ff1a 	bl	802026a <strstr>
 8004436:	0003      	movs	r3, r0
 8004438:	22ac      	movs	r2, #172	@ 0xac
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	18ba      	adds	r2, r7, r2
 800443e:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004440:	233c      	movs	r3, #60	@ 0x3c
 8004442:	18fa      	adds	r2, r7, r3
 8004444:	2448      	movs	r4, #72	@ 0x48
 8004446:	193b      	adds	r3, r7, r4
 8004448:	0011      	movs	r1, r2
 800444a:	0018      	movs	r0, r3
 800444c:	f01b ff0d 	bl	802026a <strstr>
 8004450:	0003      	movs	r3, r0
 8004452:	22aa      	movs	r2, #170	@ 0xaa
 8004454:	0052      	lsls	r2, r2, #1
 8004456:	18ba      	adds	r2, r7, r2
 8004458:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800445a:	2318      	movs	r3, #24
 800445c:	18fa      	adds	r2, r7, r3
 800445e:	193b      	adds	r3, r7, r4
 8004460:	0011      	movs	r1, r2
 8004462:	0018      	movs	r0, r3
 8004464:	f01b ff01 	bl	802026a <strstr>
 8004468:	0003      	movs	r3, r0
 800446a:	22a8      	movs	r2, #168	@ 0xa8
 800446c:	0052      	lsls	r2, r2, #1
 800446e:	18ba      	adds	r2, r7, r2
 8004470:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004472:	4a39      	ldr	r2, [pc, #228]	@ (8004558 <ParseBuffer+0x2e8>)
 8004474:	193b      	adds	r3, r7, r4
 8004476:	0011      	movs	r1, r2
 8004478:	0018      	movs	r0, r3
 800447a:	f01b fef6 	bl	802026a <strstr>
 800447e:	0003      	movs	r3, r0
 8004480:	22a6      	movs	r2, #166	@ 0xa6
 8004482:	0052      	lsls	r2, r2, #1
 8004484:	18ba      	adds	r2, r7, r2
 8004486:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004488:	2334      	movs	r3, #52	@ 0x34
 800448a:	18fa      	adds	r2, r7, r3
 800448c:	193b      	adds	r3, r7, r4
 800448e:	0011      	movs	r1, r2
 8004490:	0018      	movs	r0, r3
 8004492:	f01b feea 	bl	802026a <strstr>
 8004496:	0003      	movs	r3, r0
 8004498:	22a4      	movs	r2, #164	@ 0xa4
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	18ba      	adds	r2, r7, r2
 800449e:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <ParseBuffer+0x2a0>)
 80044a2:	21b0      	movs	r1, #176	@ 0xb0
 80044a4:	0049      	lsls	r1, r1, #1
 80044a6:	185b      	adds	r3, r3, r1
 80044a8:	19db      	adds	r3, r3, r7
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d800      	bhi.n	80044b2 <ParseBuffer+0x242>
 80044b0:	e0c1      	b.n	8004636 <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80044b2:	22ac      	movs	r2, #172	@ 0xac
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d054      	beq.n	8004568 <ParseBuffer+0x2f8>
 80044be:	18bb      	adds	r3, r7, r2
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80044c6:	d14f      	bne.n	8004568 <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80044c8:	2360      	movs	r3, #96	@ 0x60
 80044ca:	33ff      	adds	r3, #255	@ 0xff
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80044d2:	4b22      	ldr	r3, [pc, #136]	@ (800455c <ParseBuffer+0x2ec>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d146      	bne.n	8004568 <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <ParseBuffer+0x2a0>)
 80044dc:	185b      	adds	r3, r3, r1
 80044de:	19db      	adds	r3, r3, r7
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80044e4:	d10b      	bne.n	80044fe <ParseBuffer+0x28e>
 80044e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <ParseBuffer+0x2a8>)
 80044e8:	185b      	adds	r3, r3, r1
 80044ea:	19db      	adds	r3, r3, r7
 80044ec:	2221      	movs	r2, #33	@ 0x21
 80044ee:	5c9b      	ldrb	r3, [r3, r2]
 80044f0:	2b32      	cmp	r3, #50	@ 0x32
 80044f2:	d104      	bne.n	80044fe <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	0018      	movs	r0, r3
 80044f8:	f002 f914 	bl	8006724 <ParseTime>
 80044fc:	e034      	b.n	8004568 <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 80044fe:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <ParseBuffer+0x2f0>)
 8004500:	4b18      	ldr	r3, [pc, #96]	@ (8004564 <ParseBuffer+0x2f4>)
 8004502:	0019      	movs	r1, r3
 8004504:	2001      	movs	r0, #1
 8004506:	f009 ffdd 	bl	800e4c4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800450a:	2306      	movs	r3, #6
 800450c:	e097      	b.n	800463e <ParseBuffer+0x3ce>
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	fffffea2 	.word	0xfffffea2
 8004514:	fffffea1 	.word	0xfffffea1
 8004518:	fffffee8 	.word	0xfffffee8
 800451c:	080236c0 	.word	0x080236c0
 8004520:	08023168 	.word	0x08023168
 8004524:	fffffee4 	.word	0xfffffee4
 8004528:	080236ec 	.word	0x080236ec
 800452c:	fffffedc 	.word	0xfffffedc
 8004530:	080236f0 	.word	0x080236f0
 8004534:	fffffed4 	.word	0xfffffed4
 8004538:	080236f8 	.word	0x080236f8
 800453c:	fffffecc 	.word	0xfffffecc
 8004540:	08023700 	.word	0x08023700
 8004544:	fffffec8 	.word	0xfffffec8
 8004548:	fffffeb8 	.word	0xfffffeb8
 800454c:	08023708 	.word	0x08023708
 8004550:	fffffea8 	.word	0xfffffea8
 8004554:	08023718 	.word	0x08023718
 8004558:	080252cc 	.word	0x080252cc
 800455c:	20000a12 	.word	0x20000a12
 8004560:	080236d8 	.word	0x080236d8
 8004564:	0802318c 	.word	0x0802318c
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004568:	22ac      	movs	r2, #172	@ 0xac
 800456a:	0052      	lsls	r2, r2, #1
 800456c:	18bb      	adds	r3, r7, r2
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <ParseBuffer+0x318>
 8004574:	18bb      	adds	r3, r7, r2
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b72      	cmp	r3, #114	@ 0x72
 800457c:	d104      	bne.n	8004588 <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 800457e:	2360      	movs	r3, #96	@ 0x60
 8004580:	33ff      	adds	r3, #255	@ 0xff
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2202      	movs	r2, #2
 8004586:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004588:	22ac      	movs	r2, #172	@ 0xac
 800458a:	0052      	lsls	r2, r2, #1
 800458c:	18bb      	adds	r3, r7, r2
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <ParseBuffer+0x338>
 8004594:	18bb      	adds	r3, r7, r2
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b3e      	cmp	r3, #62	@ 0x3e
 800459c:	d104      	bne.n	80045a8 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 800459e:	2360      	movs	r3, #96	@ 0x60
 80045a0:	33ff      	adds	r3, #255	@ 0xff
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2205      	movs	r2, #5
 80045a6:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045a8:	22ac      	movs	r2, #172	@ 0xac
 80045aa:	0052      	lsls	r2, r2, #1
 80045ac:	18bb      	adds	r3, r7, r2
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d009      	beq.n	80045c8 <ParseBuffer+0x358>
 80045b4:	18bb      	adds	r3, r7, r2
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80045bc:	d104      	bne.n	80045c8 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 80045be:	2360      	movs	r3, #96	@ 0x60
 80045c0:	33ff      	adds	r3, #255	@ 0xff
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	220b      	movs	r2, #11
 80045c6:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80045c8:	22aa      	movs	r2, #170	@ 0xaa
 80045ca:	0052      	lsls	r2, r2, #1
 80045cc:	18bb      	adds	r3, r7, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <ParseBuffer+0x36e>
 80045d4:	18bb      	adds	r3, r7, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b45      	cmp	r3, #69	@ 0x45
 80045dc:	d00a      	beq.n	80045f4 <ParseBuffer+0x384>
 80045de:	22a4      	movs	r2, #164	@ 0xa4
 80045e0:	0052      	lsls	r2, r2, #1
 80045e2:	18bb      	adds	r3, r7, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <ParseBuffer+0x38e>
 80045ea:	18bb      	adds	r3, r7, r2
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b46      	cmp	r3, #70	@ 0x46
 80045f2:	d104      	bne.n	80045fe <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 80045f4:	2360      	movs	r3, #96	@ 0x60
 80045f6:	33ff      	adds	r3, #255	@ 0xff
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80045fe:	22a8      	movs	r2, #168	@ 0xa8
 8004600:	0052      	lsls	r2, r2, #1
 8004602:	18bb      	adds	r3, r7, r2
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <ParseBuffer+0x3aa>
 800460a:	18bb      	adds	r3, r7, r2
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b57      	cmp	r3, #87	@ 0x57
 8004612:	d102      	bne.n	800461a <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <ParseBuffer+0x3d8>)
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800461a:	22a6      	movs	r2, #166	@ 0xa6
 800461c:	0052      	lsls	r2, r2, #1
 800461e:	18bb      	adds	r3, r7, r2
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <ParseBuffer+0x3c6>
 8004626:	18bb      	adds	r3, r7, r2
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b32      	cmp	r3, #50	@ 0x32
 800462e:	d102      	bne.n	8004636 <ParseBuffer+0x3c6>
      beurs = true;
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <ParseBuffer+0x3dc>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004636:	2360      	movs	r3, #96	@ 0x60
 8004638:	33ff      	adds	r3, #255	@ 0xff
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	781b      	ldrb	r3, [r3, #0]

}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b059      	add	sp, #356	@ 0x164
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	20000558 	.word	0x20000558
 800464c:	2000055a 	.word	0x2000055a

08004650 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004656:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <PollAwake+0x34>)
 8004658:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f7fb fd85 	bl	800016c <strlen>
 8004662:	0003      	movs	r3, r0
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	0011      	movs	r1, r2
 800466a:	0018      	movs	r0, r3
 800466c:	f7ff fa54 	bl	8003b18 <ESP_Send>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d001      	beq.n	8004678 <PollAwake+0x28>
    return true;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <PollAwake+0x2a>
  }
  else{
    return false;
 8004678:	2300      	movs	r3, #0
  }
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	08023728 	.word	0x08023728

08004688 <RFPower>:

bool RFPower(){
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <RFPower+0x34>)
 8004690:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fb fd69 	bl	800016c <strlen>
 800469a:	0003      	movs	r3, r0
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0011      	movs	r1, r2
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7ff fa38 	bl	8003b18 <ESP_Send>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d001      	beq.n	80046b0 <RFPower+0x28>
    return true;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <RFPower+0x2a>
  }
  else{
    return false;
 80046b0:	2300      	movs	r3, #0
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b002      	add	sp, #8
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	08023730 	.word	0x08023730

080046c0 <CheckRFPower>:

bool CheckRFPower(){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <CheckRFPower+0x34>)
 80046c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fb fd4d 	bl	800016c <strlen>
 80046d2:	0003      	movs	r3, r0
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	0011      	movs	r1, r2
 80046da:	0018      	movs	r0, r3
 80046dc:	f7ff fa1c 	bl	8003b18 <ESP_Send>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d001      	beq.n	80046e8 <CheckRFPower+0x28>
    return true;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <CheckRFPower+0x2a>
  }
  else{
    return false;
 80046e8:	2300      	movs	r3, #0
  }
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	08023740 	.word	0x08023740

080046f8 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80046fe:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <ATRestore+0x34>)
 8004700:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f7fb fd31 	bl	800016c <strlen>
 800470a:	0003      	movs	r3, r0
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	0011      	movs	r1, r2
 8004712:	0018      	movs	r0, r3
 8004714:	f7ff fa00 	bl	8003b18 <ESP_Send>
 8004718:	1e03      	subs	r3, r0, #0
 800471a:	d001      	beq.n	8004720 <ATRestore+0x28>
    return true;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <ATRestore+0x2a>
  }
  else{
    return false;
 8004720:	2300      	movs	r3, #0
  }
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	08023750 	.word	0x08023750

08004730 <CWINIT>:

bool CWINIT(){
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <CWINIT+0x34>)
 8004738:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fb fd15 	bl	800016c <strlen>
 8004742:	0003      	movs	r3, r0
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff f9e4 	bl	8003b18 <ESP_Send>
 8004750:	1e03      	subs	r3, r0, #0
 8004752:	d001      	beq.n	8004758 <CWINIT+0x28>
    return true;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <CWINIT+0x2a>
  }
  else{
    return false;
 8004758:	2300      	movs	r3, #0
  }
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	08023760 	.word	0x08023760

08004768 <CWMODE1>:

bool CWMODE1(){
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <CWMODE1+0x34>)
 8004770:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7fb fcf9 	bl	800016c <strlen>
 800477a:	0003      	movs	r3, r0
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff f9c8 	bl	8003b18 <ESP_Send>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d001      	beq.n	8004790 <CWMODE1+0x28>
    return true;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004790:	2300      	movs	r3, #0
  }
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	08023770 	.word	0x08023770

080047a0 <CWMODE2>:

bool CWMODE2(){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047a6:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <CWMODE2+0x34>)
 80047a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fb fcdd 	bl	800016c <strlen>
 80047b2:	0003      	movs	r3, r0
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0011      	movs	r1, r2
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff f9ac 	bl	8003b18 <ESP_Send>
 80047c0:	1e03      	subs	r3, r0, #0
 80047c2:	d001      	beq.n	80047c8 <CWMODE2+0x28>
    return true;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <CWMODE2+0x2a>
  }
  else{
    return false;
 80047c8:	2300      	movs	r3, #0
  }
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b002      	add	sp, #8
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	08023780 	.word	0x08023780

080047d8 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <CWAUTOCONN+0x34>)
 80047e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fb fcc1 	bl	800016c <strlen>
 80047ea:	0003      	movs	r3, r0
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0011      	movs	r1, r2
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff f990 	bl	8003b18 <ESP_Send>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d001      	beq.n	8004800 <CWAUTOCONN+0x28>
    return true;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004800:	2300      	movs	r3, #0
  }
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b002      	add	sp, #8
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	08023790 	.word	0x08023790

08004810 <CWJAP>:

bool CWJAP(){
 8004810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004812:	46c6      	mov	lr, r8
 8004814:	b500      	push	{lr}
 8004816:	b0a2      	sub	sp, #136	@ 0x88
 8004818:	af00      	add	r7, sp, #0
 800481a:	466b      	mov	r3, sp
 800481c:	4698      	mov	r8, r3
  beursTest = true;
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <CWJAP+0xf4>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004824:	2618      	movs	r6, #24
 8004826:	19bb      	adds	r3, r7, r6
 8004828:	2264      	movs	r2, #100	@ 0x64
 800482a:	2100      	movs	r1, #0
 800482c:	0018      	movs	r0, r3
 800482e:	f01b fce1 	bl	80201f4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004832:	4b35      	ldr	r3, [pc, #212]	@ (8004908 <CWJAP+0xf8>)
 8004834:	4a35      	ldr	r2, [pc, #212]	@ (800490c <CWJAP+0xfc>)
 8004836:	4936      	ldr	r1, [pc, #216]	@ (8004910 <CWJAP+0x100>)
 8004838:	19b8      	adds	r0, r7, r6
 800483a:	f01b fb97 	bl	801ff6c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800483e:	19bb      	adds	r3, r7, r6
 8004840:	0018      	movs	r0, r3
 8004842:	f7fb fc93 	bl	800016c <strlen>
 8004846:	0002      	movs	r2, r0
 8004848:	216f      	movs	r1, #111	@ 0x6f
 800484a:	0030      	movs	r0, r6
 800484c:	180b      	adds	r3, r1, r0
 800484e:	19db      	adds	r3, r3, r7
 8004850:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004852:	180b      	adds	r3, r1, r0
 8004854:	19db      	adds	r3, r3, r7
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	1e5a      	subs	r2, r3, #1
 800485c:	2180      	movs	r1, #128	@ 0x80
 800485e:	1879      	adds	r1, r7, r1
 8004860:	600a      	str	r2, [r1, #0]
 8004862:	001a      	movs	r2, r3
 8004864:	60ba      	str	r2, [r7, #8]
 8004866:	2200      	movs	r2, #0
 8004868:	60fa      	str	r2, [r7, #12]
 800486a:	68b8      	ldr	r0, [r7, #8]
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	0002      	movs	r2, r0
 8004870:	0f52      	lsrs	r2, r2, #29
 8004872:	000e      	movs	r6, r1
 8004874:	00f6      	lsls	r6, r6, #3
 8004876:	617e      	str	r6, [r7, #20]
 8004878:	697e      	ldr	r6, [r7, #20]
 800487a:	4316      	orrs	r6, r2
 800487c:	617e      	str	r6, [r7, #20]
 800487e:	0002      	movs	r2, r0
 8004880:	00d2      	lsls	r2, r2, #3
 8004882:	613a      	str	r2, [r7, #16]
 8004884:	001a      	movs	r2, r3
 8004886:	603a      	str	r2, [r7, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	6838      	ldr	r0, [r7, #0]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	0002      	movs	r2, r0
 8004892:	0f52      	lsrs	r2, r2, #29
 8004894:	000e      	movs	r6, r1
 8004896:	00f5      	lsls	r5, r6, #3
 8004898:	4315      	orrs	r5, r2
 800489a:	0002      	movs	r2, r0
 800489c:	00d4      	lsls	r4, r2, #3
 800489e:	3307      	adds	r3, #7
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	466a      	mov	r2, sp
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	469d      	mov	sp, r3
 80048aa:	466b      	mov	r3, sp
 80048ac:	3300      	adds	r3, #0
 80048ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80048b0:	246f      	movs	r4, #111	@ 0x6f
 80048b2:	2518      	movs	r5, #24
 80048b4:	1963      	adds	r3, r4, r5
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	001a      	movs	r2, r3
 80048be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048c0:	2100      	movs	r1, #0
 80048c2:	0018      	movs	r0, r3
 80048c4:	f01b fc96 	bl	80201f4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80048c8:	1963      	adds	r3, r4, r5
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	1979      	adds	r1, r7, r5
 80048d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048d2:	0018      	movs	r0, r3
 80048d4:	f01b fcb5 	bl	8020242 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80048d8:	1963      	adds	r3, r4, r5
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff f917 	bl	8003b18 <ESP_Send>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d001      	beq.n	80048f2 <CWJAP+0xe2>
    return true;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <CWJAP+0xe4>
  }
  else{
    return false;
 80048f2:	2300      	movs	r3, #0
 80048f4:	46c5      	mov	sp, r8
  }
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b022      	add	sp, #136	@ 0x88
 80048fc:	bc80      	pop	{r7}
 80048fe:	46b8      	mov	r8, r7
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	20000559 	.word	0x20000559
 8004908:	080252d8 	.word	0x080252d8
 800490c:	080252cc 	.word	0x080252cc
 8004910:	080237a4 	.word	0x080237a4

08004914 <CWMODE3>:

bool CWMODE3(){
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <CWMODE3+0x34>)
 800491c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f7fb fc23 	bl	800016c <strlen>
 8004926:	0003      	movs	r3, r0
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0011      	movs	r1, r2
 800492e:	0018      	movs	r0, r3
 8004930:	f7ff f8f2 	bl	8003b18 <ESP_Send>
 8004934:	1e03      	subs	r3, r0, #0
 8004936:	d001      	beq.n	800493c <CWMODE3+0x28>
    return true;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <CWMODE3+0x2a>
  }
  else{
    return false;
 800493c:	2300      	movs	r3, #0
  }
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b002      	add	sp, #8
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	080237bc 	.word	0x080237bc

0800494c <CWSTATE>:

bool CWSTATE(){
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <CWSTATE+0x34>)
 8004954:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f7fb fc07 	bl	800016c <strlen>
 800495e:	0003      	movs	r3, r0
 8004960:	b29a      	uxth	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0011      	movs	r1, r2
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff f8d6 	bl	8003b18 <ESP_Send>
 800496c:	1e03      	subs	r3, r0, #0
 800496e:	d001      	beq.n	8004974 <CWSTATE+0x28>
    return true;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004974:	2300      	movs	r3, #0
  }
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b002      	add	sp, #8
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	080237cc 	.word	0x080237cc

08004984 <CWSAP>:

bool CWSAP(){
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <CWSAP+0x34>)
 800498c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f7fb fbeb 	bl	800016c <strlen>
 8004996:	0003      	movs	r3, r0
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0011      	movs	r1, r2
 800499e:	0018      	movs	r0, r3
 80049a0:	f7ff f8ba 	bl	8003b18 <ESP_Send>
 80049a4:	1e03      	subs	r3, r0, #0
 80049a6:	d001      	beq.n	80049ac <CWSAP+0x28>
    return true;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <CWSAP+0x2a>
  }
  else{
    return false;
 80049ac:	2300      	movs	r3, #0
  }
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	080237dc 	.word	0x080237dc

080049bc <CIPMUX>:

bool CIPMUX(){
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <CIPMUX+0x34>)
 80049c4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f7fb fbcf 	bl	800016c <strlen>
 80049ce:	0003      	movs	r3, r0
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0011      	movs	r1, r2
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff f89e 	bl	8003b18 <ESP_Send>
 80049dc:	1e03      	subs	r3, r0, #0
 80049de:	d001      	beq.n	80049e4 <CIPMUX+0x28>
    return true;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <CIPMUX+0x2a>
  }
  else{
    return false;
 80049e4:	2300      	movs	r3, #0
  }
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b002      	add	sp, #8
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	08023800 	.word	0x08023800

080049f4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80049fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <WEBSERVER+0x34>)
 80049fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fb fbb3 	bl	800016c <strlen>
 8004a06:	0003      	movs	r3, r0
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0011      	movs	r1, r2
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff f882 	bl	8003b18 <ESP_Send>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d001      	beq.n	8004a1c <WEBSERVER+0x28>
    return true;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a1c:	2300      	movs	r3, #0
  }
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	08023810 	.word	0x08023810

08004a2c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b0c5      	sub	sp, #276	@ 0x114
 8004a30:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	2100      	movs	r1, #0
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f01b fbda 	bl	80201f4 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a40:	4b22      	ldr	r3, [pc, #136]	@ (8004acc <HTTPCPOST+0xa0>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	1dfc      	adds	r4, r7, #7
 8004a46:	34ff      	adds	r4, #255	@ 0xff
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7ff f985 	bl	8003d58 <CreateMessage>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004a52:	4b1e      	ldr	r3, [pc, #120]	@ (8004acc <HTTPCPOST+0xa0>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	33ff      	adds	r3, #255	@ 0xff
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <HTTPCPOST+0xa4>)
 8004a62:	491c      	ldr	r1, [pc, #112]	@ (8004ad4 <HTTPCPOST+0xa8>)
 8004a64:	1d38      	adds	r0, r7, #4
 8004a66:	f01b fa81 	bl	801ff6c <siprintf>
 8004a6a:	e016      	b.n	8004a9a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <HTTPCPOST+0xac>)
 8004a6e:	481b      	ldr	r0, [pc, #108]	@ (8004adc <HTTPCPOST+0xb0>)
 8004a70:	220c      	movs	r2, #12
 8004a72:	0019      	movs	r1, r3
 8004a74:	f7fe fe40 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004a78:	4a17      	ldr	r2, [pc, #92]	@ (8004ad8 <HTTPCPOST+0xac>)
 8004a7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HTTPCPOST+0xb4>)
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7ff f946 	bl	8003d10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004a84:	1dfb      	adds	r3, r7, #7
 8004a86:	33ff      	adds	r3, #255	@ 0xff
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	4c15      	ldr	r4, [pc, #84]	@ (8004ae0 <HTTPCPOST+0xb4>)
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <HTTPCPOST+0xb8>)
 8004a8e:	4916      	ldr	r1, [pc, #88]	@ (8004ae8 <HTTPCPOST+0xbc>)
 8004a90:	1d38      	adds	r0, r7, #4
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	0023      	movs	r3, r4
 8004a96:	f01b fa69 	bl	801ff6c <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7fb fb65 	bl	800016c <strlen>
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	1d7b      	adds	r3, r7, #5
 8004aa6:	33ff      	adds	r3, #255	@ 0xff
 8004aa8:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004aaa:	1d7b      	adds	r3, r7, #5
 8004aac:	33ff      	adds	r3, #255	@ 0xff
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7ff f82f 	bl	8003b18 <ESP_Send>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d001      	beq.n	8004ac2 <HTTPCPOST+0x96>
    return true;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004ac2:	2300      	movs	r3, #0
  }
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b043      	add	sp, #268	@ 0x10c
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	2000055a 	.word	0x2000055a
 8004ad0:	080252f4 	.word	0x080252f4
 8004ad4:	08023828 	.word	0x08023828
 8004ad8:	20000b20 	.word	0x20000b20
 8004adc:	08080000 	.word	0x08080000
 8004ae0:	20000b2c 	.word	0x20000b2c
 8004ae4:	08025330 	.word	0x08025330
 8004ae8:	08023860 	.word	0x08023860

08004aec <SENDDATA>:

bool SENDDATA(){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <SENDDATA+0x34>)
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7fb fb39 	bl	800016c <strlen>
 8004afa:	0002      	movs	r2, r0
 8004afc:	1dbb      	adds	r3, r7, #6
 8004afe:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b00:	1dbb      	adds	r3, r7, #6
 8004b02:	881a      	ldrh	r2, [r3, #0]
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <SENDDATA+0x34>)
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff f805 	bl	8003b18 <ESP_Send>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <SENDDATA+0x2a>
    return true;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b16:	2300      	movs	r3, #0
  }
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000057c 	.word	0x2000057c

08004b24 <SLEEP>:

bool SLEEP(){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <SLEEP+0x34>)
 8004b2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f7fb fb1b 	bl	800016c <strlen>
 8004b36:	0003      	movs	r3, r0
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0011      	movs	r1, r2
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fe ffea 	bl	8003b18 <ESP_Send>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	d001      	beq.n	8004b4c <SLEEP+0x28>
    return true;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <SLEEP+0x2a>
  }
  else{
    return false;
 8004b4c:	2300      	movs	r3, #0
  }
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	080238a0 	.word	0x080238a0

08004b5c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <CIPSNTPCFG+0x3c>)
 8004b64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fb faff 	bl	800016c <strlen>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fe ffce 	bl	8003b18 <ESP_Send>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d006      	beq.n	8004b8e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004b80:	23fa      	movs	r3, #250	@ 0xfa
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	0018      	movs	r0, r3
 8004b86:	f00a f8e7 	bl	800ed58 <HAL_Delay>
    return true;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004b8e:	2300      	movs	r3, #0
  }
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	080238b0 	.word	0x080238b0

08004b9c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <CIPSNTPTIME+0x34>)
 8004ba4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fb fadf 	bl	800016c <strlen>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0011      	movs	r1, r2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7fe ffae 	bl	8003b18 <ESP_Send>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d001      	beq.n	8004bc4 <CIPSNTPTIME+0x28>
    return true;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004bc4:	2300      	movs	r3, #0
  }
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b002      	add	sp, #8
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	08023900 	.word	0x08023900

08004bd4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <CIPSNTPINTV+0x34>)
 8004bdc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fb fac3 	bl	800016c <strlen>
 8004be6:	0003      	movs	r3, r0
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	0011      	movs	r1, r2
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fe ff92 	bl	8003b18 <ESP_Send>
 8004bf4:	1e03      	subs	r3, r0, #0
 8004bf6:	d001      	beq.n	8004bfc <CIPSNTPINTV+0x28>
    return true;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004bfc:	2300      	movs	r3, #0
  }
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	08023914 	.word	0x08023914

08004c0c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c0c:	b5b0      	push	{r4, r5, r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	0002      	movs	r2, r0
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c18:	4b6c      	ldr	r3, [pc, #432]	@ (8004dcc <DMA_ProcessBuffer+0x1c0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	200e      	movs	r0, #14
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	2180      	movs	r1, #128	@ 0x80
 8004c26:	0049      	lsls	r1, r1, #1
 8004c28:	1a8a      	subs	r2, r1, r2
 8004c2a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c2c:	230d      	movs	r3, #13
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	2203      	movs	r2, #3
 8004c32:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c34:	183b      	adds	r3, r7, r0
 8004c36:	881a      	ldrh	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d903      	bls.n	8004c48 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	2280      	movs	r2, #128	@ 0x80
 8004c44:	0052      	lsls	r2, r2, #1
 8004c46:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c48:	4b61      	ldr	r3, [pc, #388]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	001a      	movs	r2, r3
 8004c50:	230e      	movs	r3, #14
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d131      	bne.n	8004cbe <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004dd4 <DMA_ProcessBuffer+0x1c8>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b14      	cmp	r3, #20
 8004c60:	d91b      	bls.n	8004c9a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004c62:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd4 <DMA_ProcessBuffer+0x1c8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004c68:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd8 <DMA_ProcessBuffer+0x1cc>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <DMA_ProcessBuffer+0x74>
 8004c70:	4b5a      	ldr	r3, [pc, #360]	@ (8004ddc <DMA_ProcessBuffer+0x1d0>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004c78:	230d      	movs	r3, #13
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004c80:	4b55      	ldr	r3, [pc, #340]	@ (8004dd8 <DMA_ProcessBuffer+0x1cc>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d103      	bne.n	8004c90 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004c88:	4b55      	ldr	r3, [pc, #340]	@ (8004de0 <DMA_ProcessBuffer+0x1d4>)
 8004c8a:	220b      	movs	r2, #11
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e016      	b.n	8004cbe <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004c90:	230d      	movs	r3, #13
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	2206      	movs	r2, #6
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e011      	b.n	8004cbe <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004dd4 <DMA_ProcessBuffer+0x1c8>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8004dd4 <DMA_ProcessBuffer+0x1c8>)
 8004ca4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004ca6:	f00a f84d 	bl	800ed44 <HAL_GetTick>
 8004caa:	0003      	movs	r3, r0
 8004cac:	33f5      	adds	r3, #245	@ 0xf5
 8004cae:	33ff      	adds	r3, #255	@ 0xff
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004de4 <DMA_ProcessBuffer+0x1d8>)
 8004cb4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004cb6:	230d      	movs	r3, #13
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2204      	movs	r2, #4
 8004cbc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004cbe:	4b44      	ldr	r3, [pc, #272]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	210e      	movs	r1, #14
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <DMA_ProcessBuffer+0xc6>
 8004cd0:	e075      	b.n	8004dbe <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004cd2:	4b40      	ldr	r3, [pc, #256]	@ (8004dd4 <DMA_ProcessBuffer+0x1c8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004cd8:	4b43      	ldr	r3, [pc, #268]	@ (8004de8 <DMA_ProcessBuffer+0x1dc>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d109      	bne.n	8004cfc <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b3e      	ldr	r3, [pc, #248]	@ (8004de8 <DMA_ProcessBuffer+0x1dc>)
 8004cf0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004cf2:	230d      	movs	r3, #13
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e060      	b.n	8004dbe <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8004de8 <DMA_ProcessBuffer+0x1dc>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	001a      	movs	r2, r3
 8004d04:	210e      	movs	r1, #14
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d0e:	187b      	adds	r3, r7, r1
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <DMA_ProcessBuffer+0x1dc>)
 8004d16:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d18:	230d      	movs	r3, #13
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	220a      	movs	r2, #10
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e04d      	b.n	8004dbe <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d22:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	001a      	movs	r2, r3
 8004d2a:	210e      	movs	r1, #14
 8004d2c:	187b      	adds	r3, r7, r1
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d917      	bls.n	8004d64 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d34:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <DMA_ProcessBuffer+0x1e0>)
 8004d3e:	18d0      	adds	r0, r2, r3
 8004d40:	4b23      	ldr	r3, [pc, #140]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	001a      	movs	r2, r3
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	b299      	uxth	r1, r3
 8004d50:	230d      	movs	r3, #13
 8004d52:	18fc      	adds	r4, r7, r3
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	001a      	movs	r2, r3
 8004d5a:	f7ff fa89 	bl	8004270 <ParseBuffer>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	7023      	strb	r3, [r4, #0]
 8004d62:	e026      	b.n	8004db2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dec <DMA_ProcessBuffer+0x1e0>)
 8004d6e:	18d0      	adds	r0, r2, r3
 8004d70:	4b17      	ldr	r3, [pc, #92]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	001a      	movs	r2, r3
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	b299      	uxth	r1, r3
 8004d80:	250d      	movs	r5, #13
 8004d82:	197c      	adds	r4, r7, r5
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	001a      	movs	r2, r3
 8004d8a:	f7ff fa71 	bl	8004270 <ParseBuffer>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004d92:	210e      	movs	r1, #14
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004d9c:	197c      	adds	r4, r7, r5
 8004d9e:	1dfb      	adds	r3, r7, #7
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	8819      	ldrh	r1, [r3, #0]
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <DMA_ProcessBuffer+0x1e0>)
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff fa61 	bl	8004270 <ParseBuffer>
 8004dae:	0003      	movs	r3, r0
 8004db0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004db2:	230e      	movs	r3, #14
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <DMA_ProcessBuffer+0x1c4>)
 8004dbc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004dbe:	230d      	movs	r3, #13
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bdb0      	pop	{r4, r5, r7, pc}
 8004dcc:	20002304 	.word	0x20002304
 8004dd0:	20000b45 	.word	0x20000b45
 8004dd4:	20000a10 	.word	0x20000a10
 8004dd8:	20000a12 	.word	0x20000a12
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	20000030 	.word	0x20000030
 8004de4:	20000a0c 	.word	0x20000a0c
 8004de8:	20000b46 	.word	0x20000b46
 8004dec:	20000454 	.word	0x20000454

08004df0 <clearDMABuffer>:

void clearDMABuffer(){
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	005a      	lsls	r2, r3, #1
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <clearDMABuffer+0x18>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f01b f9f9 	bl	80201f4 <memset>
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000454 	.word	0x20000454

08004e0c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	0002      	movs	r2, r0
 8004e14:	1dfb      	adds	r3, r7, #7
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	1dbb      	adds	r3, r7, #6
 8004e1a:	1c0a      	adds	r2, r1, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e1e:	210f      	movs	r1, #15
 8004e20:	187b      	adds	r3, r7, r1
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e26:	1dbb      	adds	r3, r7, #6
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	1dfa      	adds	r2, r7, #7
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	4251      	negs	r1, r2
 8004e36:	414a      	adcs	r2, r1
 8004e38:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e3a:	1dbb      	adds	r3, r7, #6
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e42:	230f      	movs	r3, #15
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	1dfa      	adds	r2, r7, #7
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	3a02      	subs	r2, #2
 8004e4c:	4251      	negs	r1, r2
 8004e4e:	414a      	adcs	r2, r1
 8004e50:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d107      	bne.n	8004e6a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004e5a:	230f      	movs	r3, #15
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	1dfa      	adds	r2, r7, #7
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	3a05      	subs	r2, #5
 8004e64:	4251      	negs	r1, r2
 8004e66:	414a      	adcs	r2, r1
 8004e68:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d107      	bne.n	8004e82 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	1dfa      	adds	r2, r7, #7
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	3a0b      	subs	r2, #11
 8004e7c:	4251      	negs	r1, r2
 8004e7e:	414a      	adcs	r2, r1
 8004e80:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004e82:	230f      	movs	r3, #15
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	781b      	ldrb	r3, [r3, #0]
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b004      	add	sp, #16
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	0002      	movs	r2, r0
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004e9c:	230f      	movs	r3, #15
 8004e9e:	18fb      	adds	r3, r7, r3
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b14      	cmp	r3, #20
 8004eaa:	d900      	bls.n	8004eae <AT_Send+0x1e>
 8004eac:	e19e      	b.n	80051ec <AT_Send+0x35c>
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	4bd2      	ldr	r3, [pc, #840]	@ (80051fc <AT_Send+0x36c>)
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004eb8:	4bd1      	ldr	r3, [pc, #836]	@ (8005200 <AT_Send+0x370>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f009 faab 	bl	800e418 <TimestampIsReached>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d100      	bne.n	8004ec8 <AT_Send+0x38>
 8004ec6:	e190      	b.n	80051ea <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8004ec8:	4ace      	ldr	r2, [pc, #824]	@ (8005204 <AT_Send+0x374>)
 8004eca:	4bcf      	ldr	r3, [pc, #828]	@ (8005208 <AT_Send+0x378>)
 8004ecc:	0019      	movs	r1, r3
 8004ece:	2003      	movs	r0, #3
 8004ed0:	f009 faf8 	bl	800e4c4 <CreateLine>
    ATCommandSend = PollAwake();
 8004ed4:	230f      	movs	r3, #15
 8004ed6:	18fc      	adds	r4, r7, r3
 8004ed8:	f7ff fbba 	bl	8004650 <PollAwake>
 8004edc:	0003      	movs	r3, r0
 8004ede:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ee0:	f009 ff30 	bl	800ed44 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	3332      	adds	r3, #50	@ 0x32
 8004ee8:	001a      	movs	r2, r3
 8004eea:	4bc5      	ldr	r3, [pc, #788]	@ (8005200 <AT_Send+0x370>)
 8004eec:	601a      	str	r2, [r3, #0]
  }
  break;
 8004eee:	e17c      	b.n	80051ea <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004ef0:	4ac6      	ldr	r2, [pc, #792]	@ (800520c <AT_Send+0x37c>)
 8004ef2:	4bc5      	ldr	r3, [pc, #788]	@ (8005208 <AT_Send+0x378>)
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	f009 fae4 	bl	800e4c4 <CreateLine>
    ATCommandSend = RFPower();
 8004efc:	230f      	movs	r3, #15
 8004efe:	18fc      	adds	r4, r7, r3
 8004f00:	f7ff fbc2 	bl	8004688 <RFPower>
 8004f04:	0003      	movs	r3, r0
 8004f06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f08:	f009 ff1c 	bl	800ed44 <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	330a      	adds	r3, #10
 8004f10:	001a      	movs	r2, r3
 8004f12:	4bbb      	ldr	r3, [pc, #748]	@ (8005200 <AT_Send+0x370>)
 8004f14:	601a      	str	r2, [r3, #0]
    break;
 8004f16:	e169      	b.n	80051ec <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f18:	4abd      	ldr	r2, [pc, #756]	@ (8005210 <AT_Send+0x380>)
 8004f1a:	4bbb      	ldr	r3, [pc, #748]	@ (8005208 <AT_Send+0x378>)
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	2003      	movs	r0, #3
 8004f20:	f009 fad0 	bl	800e4c4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f24:	230f      	movs	r3, #15
 8004f26:	18fc      	adds	r4, r7, r3
 8004f28:	f7ff fbca 	bl	80046c0 <CheckRFPower>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f30:	f009 ff08 	bl	800ed44 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	330a      	adds	r3, #10
 8004f38:	001a      	movs	r2, r3
 8004f3a:	4bb1      	ldr	r3, [pc, #708]	@ (8005200 <AT_Send+0x370>)
 8004f3c:	601a      	str	r2, [r3, #0]
    break;
 8004f3e:	e155      	b.n	80051ec <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f40:	4ab4      	ldr	r2, [pc, #720]	@ (8005214 <AT_Send+0x384>)
 8004f42:	4bb1      	ldr	r3, [pc, #708]	@ (8005208 <AT_Send+0x378>)
 8004f44:	0019      	movs	r1, r3
 8004f46:	2003      	movs	r0, #3
 8004f48:	f009 fabc 	bl	800e4c4 <CreateLine>
    ATCommandSend = ATRestore();
 8004f4c:	230f      	movs	r3, #15
 8004f4e:	18fc      	adds	r4, r7, r3
 8004f50:	f7ff fbd2 	bl	80046f8 <ATRestore>
 8004f54:	0003      	movs	r3, r0
 8004f56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f58:	f009 fef4 	bl	800ed44 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	3332      	adds	r3, #50	@ 0x32
 8004f60:	001a      	movs	r2, r3
 8004f62:	4ba7      	ldr	r3, [pc, #668]	@ (8005200 <AT_Send+0x370>)
 8004f64:	601a      	str	r2, [r3, #0]
    break;
 8004f66:	e141      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004f68:	4aab      	ldr	r2, [pc, #684]	@ (8005218 <AT_Send+0x388>)
 8004f6a:	4ba7      	ldr	r3, [pc, #668]	@ (8005208 <AT_Send+0x378>)
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	2003      	movs	r0, #3
 8004f70:	f009 faa8 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWINIT();
 8004f74:	230f      	movs	r3, #15
 8004f76:	18fc      	adds	r4, r7, r3
 8004f78:	f7ff fbda 	bl	8004730 <CWINIT>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f80:	f009 fee0 	bl	800ed44 <HAL_GetTick>
 8004f84:	0003      	movs	r3, r0
 8004f86:	33f5      	adds	r3, #245	@ 0xf5
 8004f88:	33ff      	adds	r3, #255	@ 0xff
 8004f8a:	001a      	movs	r2, r3
 8004f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8005200 <AT_Send+0x370>)
 8004f8e:	601a      	str	r2, [r3, #0]
    break;
 8004f90:	e12c      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004f92:	4aa2      	ldr	r2, [pc, #648]	@ (800521c <AT_Send+0x38c>)
 8004f94:	4b9c      	ldr	r3, [pc, #624]	@ (8005208 <AT_Send+0x378>)
 8004f96:	0019      	movs	r1, r3
 8004f98:	2003      	movs	r0, #3
 8004f9a:	f009 fa93 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004f9e:	230f      	movs	r3, #15
 8004fa0:	18fc      	adds	r4, r7, r3
 8004fa2:	f7ff fcd3 	bl	800494c <CWSTATE>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004faa:	f009 fecb 	bl	800ed44 <HAL_GetTick>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	33f5      	adds	r3, #245	@ 0xf5
 8004fb2:	33ff      	adds	r3, #255	@ 0xff
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	4b92      	ldr	r3, [pc, #584]	@ (8005200 <AT_Send+0x370>)
 8004fb8:	601a      	str	r2, [r3, #0]
    break;
 8004fba:	e117      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004fbc:	4a98      	ldr	r2, [pc, #608]	@ (8005220 <AT_Send+0x390>)
 8004fbe:	4b92      	ldr	r3, [pc, #584]	@ (8005208 <AT_Send+0x378>)
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	f009 fa7e 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004fc8:	230f      	movs	r3, #15
 8004fca:	18fc      	adds	r4, r7, r3
 8004fcc:	f7ff fbcc 	bl	8004768 <CWMODE1>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fd4:	f009 feb6 	bl	800ed44 <HAL_GetTick>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	330a      	adds	r3, #10
 8004fdc:	001a      	movs	r2, r3
 8004fde:	4b88      	ldr	r3, [pc, #544]	@ (8005200 <AT_Send+0x370>)
 8004fe0:	601a      	str	r2, [r3, #0]
    break;
 8004fe2:	e103      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004fe4:	4a8e      	ldr	r2, [pc, #568]	@ (8005220 <AT_Send+0x390>)
 8004fe6:	4b88      	ldr	r3, [pc, #544]	@ (8005208 <AT_Send+0x378>)
 8004fe8:	0019      	movs	r1, r3
 8004fea:	2003      	movs	r0, #3
 8004fec:	f009 fa6a 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	18fc      	adds	r4, r7, r3
 8004ff4:	f7ff fbd4 	bl	80047a0 <CWMODE2>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ffc:	f009 fea2 	bl	800ed44 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	330a      	adds	r3, #10
 8005004:	001a      	movs	r2, r3
 8005006:	4b7e      	ldr	r3, [pc, #504]	@ (8005200 <AT_Send+0x370>)
 8005008:	601a      	str	r2, [r3, #0]
    break;
 800500a:	e0ef      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800500c:	4a85      	ldr	r2, [pc, #532]	@ (8005224 <AT_Send+0x394>)
 800500e:	4b7e      	ldr	r3, [pc, #504]	@ (8005208 <AT_Send+0x378>)
 8005010:	0019      	movs	r1, r3
 8005012:	2003      	movs	r0, #3
 8005014:	f009 fa56 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005018:	230f      	movs	r3, #15
 800501a:	18fc      	adds	r4, r7, r3
 800501c:	f7ff fbdc 	bl	80047d8 <CWAUTOCONN>
 8005020:	0003      	movs	r3, r0
 8005022:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005024:	f009 fe8e 	bl	800ed44 <HAL_GetTick>
 8005028:	0003      	movs	r3, r0
 800502a:	330a      	adds	r3, #10
 800502c:	001a      	movs	r2, r3
 800502e:	4b74      	ldr	r3, [pc, #464]	@ (8005200 <AT_Send+0x370>)
 8005030:	601a      	str	r2, [r3, #0]
    break;
 8005032:	e0db      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005034:	4a7c      	ldr	r2, [pc, #496]	@ (8005228 <AT_Send+0x398>)
 8005036:	4b74      	ldr	r3, [pc, #464]	@ (8005208 <AT_Send+0x378>)
 8005038:	0019      	movs	r1, r3
 800503a:	2003      	movs	r0, #3
 800503c:	f009 fa42 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWJAP();
 8005040:	230f      	movs	r3, #15
 8005042:	18fc      	adds	r4, r7, r3
 8005044:	f7ff fbe4 	bl	8004810 <CWJAP>
 8005048:	0003      	movs	r3, r0
 800504a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800504c:	f009 fe7a 	bl	800ed44 <HAL_GetTick>
 8005050:	0003      	movs	r3, r0
 8005052:	3332      	adds	r3, #50	@ 0x32
 8005054:	001a      	movs	r2, r3
 8005056:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <AT_Send+0x370>)
 8005058:	601a      	str	r2, [r3, #0]
    break;
 800505a:	e0c7      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800505c:	4a73      	ldr	r2, [pc, #460]	@ (800522c <AT_Send+0x39c>)
 800505e:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <AT_Send+0x378>)
 8005060:	0019      	movs	r1, r3
 8005062:	2003      	movs	r0, #3
 8005064:	f009 fa2e 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWMODE3();
 8005068:	230f      	movs	r3, #15
 800506a:	18fc      	adds	r4, r7, r3
 800506c:	f7ff fc52 	bl	8004914 <CWMODE3>
 8005070:	0003      	movs	r3, r0
 8005072:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005074:	f009 fe66 	bl	800ed44 <HAL_GetTick>
 8005078:	0003      	movs	r3, r0
 800507a:	330a      	adds	r3, #10
 800507c:	001a      	movs	r2, r3
 800507e:	4b60      	ldr	r3, [pc, #384]	@ (8005200 <AT_Send+0x370>)
 8005080:	601a      	str	r2, [r3, #0]
    break;
 8005082:	e0b3      	b.n	80051ec <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8005084:	4a6a      	ldr	r2, [pc, #424]	@ (8005230 <AT_Send+0x3a0>)
 8005086:	4b60      	ldr	r3, [pc, #384]	@ (8005208 <AT_Send+0x378>)
 8005088:	0019      	movs	r1, r3
 800508a:	2003      	movs	r0, #3
 800508c:	f009 fa1a 	bl	800e4c4 <CreateLine>
    ATCommandSend = CWSAP();
 8005090:	230f      	movs	r3, #15
 8005092:	18fc      	adds	r4, r7, r3
 8005094:	f7ff fc76 	bl	8004984 <CWSAP>
 8005098:	0003      	movs	r3, r0
 800509a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800509c:	f009 fe52 	bl	800ed44 <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	330a      	adds	r3, #10
 80050a4:	001a      	movs	r2, r3
 80050a6:	4b56      	ldr	r3, [pc, #344]	@ (8005200 <AT_Send+0x370>)
 80050a8:	601a      	str	r2, [r3, #0]
    break;
 80050aa:	e09f      	b.n	80051ec <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80050ac:	4a61      	ldr	r2, [pc, #388]	@ (8005234 <AT_Send+0x3a4>)
 80050ae:	4b56      	ldr	r3, [pc, #344]	@ (8005208 <AT_Send+0x378>)
 80050b0:	0019      	movs	r1, r3
 80050b2:	2003      	movs	r0, #3
 80050b4:	f009 fa06 	bl	800e4c4 <CreateLine>
    ATCommandSend = CIPMUX();
 80050b8:	230f      	movs	r3, #15
 80050ba:	18fc      	adds	r4, r7, r3
 80050bc:	f7ff fc7e 	bl	80049bc <CIPMUX>
 80050c0:	0003      	movs	r3, r0
 80050c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050c4:	f009 fe3e 	bl	800ed44 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	330a      	adds	r3, #10
 80050cc:	001a      	movs	r2, r3
 80050ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005200 <AT_Send+0x370>)
 80050d0:	601a      	str	r2, [r3, #0]
    break;
 80050d2:	e08b      	b.n	80051ec <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80050d4:	4a58      	ldr	r2, [pc, #352]	@ (8005238 <AT_Send+0x3a8>)
 80050d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005208 <AT_Send+0x378>)
 80050d8:	0019      	movs	r1, r3
 80050da:	2003      	movs	r0, #3
 80050dc:	f009 f9f2 	bl	800e4c4 <CreateLine>
    ATCommandSend = WEBSERVER();
 80050e0:	230f      	movs	r3, #15
 80050e2:	18fc      	adds	r4, r7, r3
 80050e4:	f7ff fc86 	bl	80049f4 <WEBSERVER>
 80050e8:	0003      	movs	r3, r0
 80050ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050ec:	f009 fe2a 	bl	800ed44 <HAL_GetTick>
 80050f0:	0003      	movs	r3, r0
 80050f2:	330a      	adds	r3, #10
 80050f4:	001a      	movs	r2, r3
 80050f6:	4b42      	ldr	r3, [pc, #264]	@ (8005200 <AT_Send+0x370>)
 80050f8:	601a      	str	r2, [r3, #0]
    break;
 80050fa:	e077      	b.n	80051ec <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80050fc:	230f      	movs	r3, #15
 80050fe:	18fc      	adds	r4, r7, r3
 8005100:	f7ff fc94 	bl	8004a2c <HTTPCPOST>
 8005104:	0003      	movs	r3, r0
 8005106:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005108:	f009 fe1c 	bl	800ed44 <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	33f5      	adds	r3, #245	@ 0xf5
 8005110:	33ff      	adds	r3, #255	@ 0xff
 8005112:	001a      	movs	r2, r3
 8005114:	4b3a      	ldr	r3, [pc, #232]	@ (8005200 <AT_Send+0x370>)
 8005116:	601a      	str	r2, [r3, #0]
    break;
 8005118:	e068      	b.n	80051ec <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800511a:	4a48      	ldr	r2, [pc, #288]	@ (800523c <AT_Send+0x3ac>)
 800511c:	4b3a      	ldr	r3, [pc, #232]	@ (8005208 <AT_Send+0x378>)
 800511e:	0019      	movs	r1, r3
 8005120:	2003      	movs	r0, #3
 8005122:	f009 f9cf 	bl	800e4c4 <CreateLine>
    ATCommandSend = SENDDATA();
 8005126:	230f      	movs	r3, #15
 8005128:	18fc      	adds	r4, r7, r3
 800512a:	f7ff fcdf 	bl	8004aec <SENDDATA>
 800512e:	0003      	movs	r3, r0
 8005130:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005132:	f009 fe07 	bl	800ed44 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	33f5      	adds	r3, #245	@ 0xf5
 800513a:	33ff      	adds	r3, #255	@ 0xff
 800513c:	001a      	movs	r2, r3
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <AT_Send+0x370>)
 8005140:	601a      	str	r2, [r3, #0]
    break;
 8005142:	e053      	b.n	80051ec <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005144:	4a3e      	ldr	r2, [pc, #248]	@ (8005240 <AT_Send+0x3b0>)
 8005146:	4b30      	ldr	r3, [pc, #192]	@ (8005208 <AT_Send+0x378>)
 8005148:	0019      	movs	r1, r3
 800514a:	2003      	movs	r0, #3
 800514c:	f009 f9ba 	bl	800e4c4 <CreateLine>
    ATCommandSend = SLEEP();
 8005150:	230f      	movs	r3, #15
 8005152:	18fc      	adds	r4, r7, r3
 8005154:	f7ff fce6 	bl	8004b24 <SLEEP>
 8005158:	0003      	movs	r3, r0
 800515a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800515c:	f009 fdf2 	bl	800ed44 <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	330a      	adds	r3, #10
 8005164:	001a      	movs	r2, r3
 8005166:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <AT_Send+0x370>)
 8005168:	601a      	str	r2, [r3, #0]
    break;
 800516a:	e03f      	b.n	80051ec <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800516c:	4a35      	ldr	r2, [pc, #212]	@ (8005244 <AT_Send+0x3b4>)
 800516e:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <AT_Send+0x378>)
 8005170:	0019      	movs	r1, r3
 8005172:	2003      	movs	r0, #3
 8005174:	f009 f9a6 	bl	800e4c4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005178:	230f      	movs	r3, #15
 800517a:	18fc      	adds	r4, r7, r3
 800517c:	f7ff fcee 	bl	8004b5c <CIPSNTPCFG>
 8005180:	0003      	movs	r3, r0
 8005182:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005184:	f009 fdde 	bl	800ed44 <HAL_GetTick>
 8005188:	0003      	movs	r3, r0
 800518a:	330a      	adds	r3, #10
 800518c:	001a      	movs	r2, r3
 800518e:	4b1c      	ldr	r3, [pc, #112]	@ (8005200 <AT_Send+0x370>)
 8005190:	601a      	str	r2, [r3, #0]
    break;
 8005192:	e02b      	b.n	80051ec <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005194:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <AT_Send+0x3b8>)
 8005196:	4b1c      	ldr	r3, [pc, #112]	@ (8005208 <AT_Send+0x378>)
 8005198:	0019      	movs	r1, r3
 800519a:	2003      	movs	r0, #3
 800519c:	f009 f992 	bl	800e4c4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051a0:	230f      	movs	r3, #15
 80051a2:	18fc      	adds	r4, r7, r3
 80051a4:	f7ff fcfa 	bl	8004b9c <CIPSNTPTIME>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051ac:	f009 fdca 	bl	800ed44 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	33f5      	adds	r3, #245	@ 0xf5
 80051b4:	33ff      	adds	r3, #255	@ 0xff
 80051b6:	001a      	movs	r2, r3
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <AT_Send+0x370>)
 80051ba:	601a      	str	r2, [r3, #0]
    break;
 80051bc:	e016      	b.n	80051ec <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051be:	4a23      	ldr	r2, [pc, #140]	@ (800524c <AT_Send+0x3bc>)
 80051c0:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <AT_Send+0x378>)
 80051c2:	0019      	movs	r1, r3
 80051c4:	2003      	movs	r0, #3
 80051c6:	f009 f97d 	bl	800e4c4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051ca:	230f      	movs	r3, #15
 80051cc:	18fc      	adds	r4, r7, r3
 80051ce:	f7ff fd01 	bl	8004bd4 <CIPSNTPINTV>
 80051d2:	0003      	movs	r3, r0
 80051d4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051d6:	f009 fdb5 	bl	800ed44 <HAL_GetTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	330a      	adds	r3, #10
 80051de:	001a      	movs	r2, r3
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <AT_Send+0x370>)
 80051e2:	601a      	str	r2, [r3, #0]
    break;
 80051e4:	e002      	b.n	80051ec <AT_Send+0x35c>

  case AT_END:
    break;
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	e000      	b.n	80051ec <AT_Send+0x35c>
  break;
 80051ea:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b005      	add	sp, #20
 80051f8:	bd90      	pop	{r4, r7, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	08025358 	.word	0x08025358
 8005200:	20000a0c 	.word	0x20000a0c
 8005204:	0802392c 	.word	0x0802392c
 8005208:	08023168 	.word	0x08023168
 800520c:	08023938 	.word	0x08023938
 8005210:	0802394c 	.word	0x0802394c
 8005214:	08023960 	.word	0x08023960
 8005218:	08023970 	.word	0x08023970
 800521c:	08023984 	.word	0x08023984
 8005220:	0802399c 	.word	0x0802399c
 8005224:	080239b4 	.word	0x080239b4
 8005228:	080239cc 	.word	0x080239cc
 800522c:	080239e0 	.word	0x080239e0
 8005230:	080239fc 	.word	0x080239fc
 8005234:	08023a18 	.word	0x08023a18
 8005238:	08023a34 	.word	0x08023a34
 800523c:	08023a50 	.word	0x08023a50
 8005240:	08023a60 	.word	0x08023a60
 8005244:	08023a84 	.word	0x08023a84
 8005248:	08023a98 	.word	0x08023a98
 800524c:	08023ab0 	.word	0x08023ab0

08005250 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005256:	1dfb      	adds	r3, r7, #7
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800525c:	4b7d      	ldr	r3, [pc, #500]	@ (8005454 <ESP_WakeTest+0x204>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b05      	cmp	r3, #5
 8005262:	d900      	bls.n	8005266 <ESP_WakeTest+0x16>
 8005264:	e0d9      	b.n	800541a <ESP_WakeTest+0x1ca>
 8005266:	009a      	lsls	r2, r3, #2
 8005268:	4b7b      	ldr	r3, [pc, #492]	@ (8005458 <ESP_WakeTest+0x208>)
 800526a:	18d3      	adds	r3, r2, r3
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005270:	4b7a      	ldr	r3, [pc, #488]	@ (800545c <ESP_WakeTest+0x20c>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	4053      	eors	r3, r2
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d036      	beq.n	80052ec <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800527e:	2380      	movs	r3, #128	@ 0x80
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	4877      	ldr	r0, [pc, #476]	@ (8005460 <ESP_WakeTest+0x210>)
 8005284:	2200      	movs	r2, #0
 8005286:	0019      	movs	r1, r3
 8005288:	f00a ffed 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800528c:	2032      	movs	r0, #50	@ 0x32
 800528e:	f009 fd63 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4872      	ldr	r0, [pc, #456]	@ (8005460 <ESP_WakeTest+0x210>)
 8005298:	2201      	movs	r2, #1
 800529a:	0019      	movs	r1, r3
 800529c:	f00a ffe3 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052a0:	200a      	movs	r0, #10
 80052a2:	f009 fd59 	bl	800ed58 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005464 <ESP_WakeTest+0x214>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	2101      	movs	r1, #1
 80052ac:	0018      	movs	r0, r3
 80052ae:	f00a ffda 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052b2:	200a      	movs	r0, #10
 80052b4:	f009 fd50 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <ESP_WakeTest+0x214>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	2102      	movs	r1, #2
 80052be:	0018      	movs	r0, r3
 80052c0:	f00a ffd1 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f009 fd47 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ca:	4b66      	ldr	r3, [pc, #408]	@ (8005464 <ESP_WakeTest+0x214>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	2101      	movs	r1, #1
 80052d0:	0018      	movs	r0, r3
 80052d2:	f00a ffc8 	bl	8010266 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052d6:	f009 fd35 	bl	800ed44 <HAL_GetTick>
 80052da:	0003      	movs	r3, r0
 80052dc:	22af      	movs	r2, #175	@ 0xaf
 80052de:	0092      	lsls	r2, r2, #2
 80052e0:	189a      	adds	r2, r3, r2
 80052e2:	4b61      	ldr	r3, [pc, #388]	@ (8005468 <ESP_WakeTest+0x218>)
 80052e4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80052e6:	4b5d      	ldr	r3, [pc, #372]	@ (800545c <ESP_WakeTest+0x20c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	005a      	lsls	r2, r3, #1
 80052f0:	4b5e      	ldr	r3, [pc, #376]	@ (800546c <ESP_WakeTest+0x21c>)
 80052f2:	0011      	movs	r1, r2
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7fe fc43 	bl	8003b80 <ESP_Receive>
 80052fa:	1e03      	subs	r3, r0, #0
 80052fc:	d100      	bne.n	8005300 <ESP_WakeTest+0xb0>
 80052fe:	e09f      	b.n	8005440 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005300:	4b54      	ldr	r3, [pc, #336]	@ (8005454 <ESP_WakeTest+0x204>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005306:	e09b      	b.n	8005440 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005308:	4b57      	ldr	r3, [pc, #348]	@ (8005468 <ESP_WakeTest+0x218>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0018      	movs	r0, r3
 800530e:	f009 f883 	bl	800e418 <TimestampIsReached>
 8005312:	1e03      	subs	r3, r0, #0
 8005314:	d100      	bne.n	8005318 <ESP_WakeTest+0xc8>
 8005316:	e095      	b.n	8005444 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005318:	4b55      	ldr	r3, [pc, #340]	@ (8005470 <ESP_WakeTest+0x220>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	1dfc      	adds	r4, r7, #7
 800531e:	0018      	movs	r0, r3
 8005320:	f7ff fdb6 	bl	8004e90 <AT_Send>
 8005324:	0003      	movs	r3, r0
 8005326:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005328:	1dfb      	adds	r3, r7, #7
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d100      	bne.n	8005332 <ESP_WakeTest+0xe2>
 8005330:	e088      	b.n	8005444 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005332:	4b48      	ldr	r3, [pc, #288]	@ (8005454 <ESP_WakeTest+0x204>)
 8005334:	2202      	movs	r2, #2
 8005336:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005338:	e084      	b.n	8005444 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800533a:	4b4b      	ldr	r3, [pc, #300]	@ (8005468 <ESP_WakeTest+0x218>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0018      	movs	r0, r3
 8005340:	f009 f86a 	bl	800e418 <TimestampIsReached>
 8005344:	1e03      	subs	r3, r0, #0
 8005346:	d100      	bne.n	800534a <ESP_WakeTest+0xfa>
 8005348:	e07e      	b.n	8005448 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800534a:	4b4a      	ldr	r3, [pc, #296]	@ (8005474 <ESP_WakeTest+0x224>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff fc5c 	bl	8004c0c <DMA_ProcessBuffer>
 8005354:	0003      	movs	r3, r0
 8005356:	001a      	movs	r2, r3
 8005358:	4b47      	ldr	r3, [pc, #284]	@ (8005478 <ESP_WakeTest+0x228>)
 800535a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800535c:	4b46      	ldr	r3, [pc, #280]	@ (8005478 <ESP_WakeTest+0x228>)
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	4b44      	ldr	r3, [pc, #272]	@ (8005474 <ESP_WakeTest+0x224>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	1dbc      	adds	r4, r7, #6
 8005366:	0019      	movs	r1, r3
 8005368:	0010      	movs	r0, r2
 800536a:	f7ff fd4f 	bl	8004e0c <ATCompare>
 800536e:	0003      	movs	r3, r0
 8005370:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005372:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <ESP_WakeTest+0x228>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d102      	bne.n	8005380 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800537a:	4b36      	ldr	r3, [pc, #216]	@ (8005454 <ESP_WakeTest+0x204>)
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005380:	4b3d      	ldr	r3, [pc, #244]	@ (8005478 <ESP_WakeTest+0x228>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b07      	cmp	r3, #7
 8005386:	d104      	bne.n	8005392 <ESP_WakeTest+0x142>
          StartProg();
 8005388:	f7fe ff40 	bl	800420c <StartProg>
          TestState = ESP_TEST_BOOT;
 800538c:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <ESP_WakeTest+0x204>)
 800538e:	2205      	movs	r2, #5
 8005390:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005392:	4b39      	ldr	r3, [pc, #228]	@ (8005478 <ESP_WakeTest+0x228>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d109      	bne.n	80053ae <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800539a:	f009 fcd3 	bl	800ed44 <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	3332      	adds	r3, #50	@ 0x32
 80053a2:	001a      	movs	r2, r3
 80053a4:	4b30      	ldr	r3, [pc, #192]	@ (8005468 <ESP_WakeTest+0x218>)
 80053a6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <ESP_WakeTest+0x204>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053ae:	1dbb      	adds	r3, r7, #6
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d048      	beq.n	8005448 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053b6:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <ESP_WakeTest+0x204>)
 80053b8:	2203      	movs	r2, #3
 80053ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053bc:	e044      	b.n	8005448 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <ESP_WakeTest+0x22c>)
 80053c0:	22fa      	movs	r2, #250	@ 0xfa
 80053c2:	0112      	lsls	r2, r2, #4
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80053c6:	f007 fee1 	bl	800d18c <Calculate_LED_ON>
 80053ca:	0003      	movs	r3, r0
 80053cc:	001a      	movs	r2, r3
 80053ce:	4b2b      	ldr	r3, [pc, #172]	@ (800547c <ESP_WakeTest+0x22c>)
 80053d0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80053d2:	4b2a      	ldr	r3, [pc, #168]	@ (800547c <ESP_WakeTest+0x22c>)
 80053d4:	22fa      	movs	r2, #250	@ 0xfa
 80053d6:	0112      	lsls	r2, r2, #4
 80053d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <ESP_WakeTest+0x204>)
 80053dc:	2204      	movs	r2, #4
 80053de:	701a      	strb	r2, [r3, #0]

      break;
 80053e0:	e033      	b.n	800544a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80053e2:	4b27      	ldr	r3, [pc, #156]	@ (8005480 <ESP_WakeTest+0x230>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80053e8:	4b1c      	ldr	r3, [pc, #112]	@ (800545c <ESP_WakeTest+0x20c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80053ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <ESP_WakeTest+0x214>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	2101      	movs	r1, #1
 80053f4:	0018      	movs	r0, r3
 80053f6:	f00a ff36 	bl	8010266 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	4818      	ldr	r0, [pc, #96]	@ (8005460 <ESP_WakeTest+0x210>)
 8005400:	2200      	movs	r2, #0
 8005402:	0019      	movs	r1, r3
 8005404:	f00a ff2f 	bl	8010266 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005408:	4b16      	ldr	r3, [pc, #88]	@ (8005464 <ESP_WakeTest+0x214>)
 800540a:	2200      	movs	r2, #0
 800540c:	2102      	movs	r1, #2
 800540e:	0018      	movs	r0, r3
 8005410:	f00a ff29 	bl	8010266 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005414:	f003 f832 	bl	800847c <SetESPMeasurementDone>
      break;
 8005418:	e017      	b.n	800544a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800541a:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <ESP_WakeTest+0x204>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
      break;
 8005420:	e013      	b.n	800544a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005422:	4b16      	ldr	r3, [pc, #88]	@ (800547c <ESP_WakeTest+0x22c>)
 8005424:	22fa      	movs	r2, #250	@ 0xfa
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800542a:	4b14      	ldr	r3, [pc, #80]	@ (800547c <ESP_WakeTest+0x22c>)
 800542c:	22fa      	movs	r2, #250	@ 0xfa
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005432:	f007 feab 	bl	800d18c <Calculate_LED_ON>
 8005436:	0003      	movs	r3, r0
 8005438:	001a      	movs	r2, r3
 800543a:	4b10      	ldr	r3, [pc, #64]	@ (800547c <ESP_WakeTest+0x22c>)
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800543e:	e004      	b.n	800544a <ESP_WakeTest+0x1fa>
      break;
 8005440:	46c0      	nop			@ (mov r8, r8)
 8005442:	e002      	b.n	800544a <ESP_WakeTest+0x1fa>
      break;
 8005444:	46c0      	nop			@ (mov r8, r8)
 8005446:	e000      	b.n	800544a <ESP_WakeTest+0x1fa>
      break;
 8005448:	46c0      	nop			@ (mov r8, r8)
  }
}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b003      	add	sp, #12
 8005450:	bd90      	pop	{r4, r7, pc}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	20000a14 	.word	0x20000a14
 8005458:	080253ac 	.word	0x080253ac
 800545c:	20000554 	.word	0x20000554
 8005460:	50000800 	.word	0x50000800
 8005464:	50001c00 	.word	0x50001c00
 8005468:	20000a0c 	.word	0x20000a0c
 800546c:	20000454 	.word	0x20000454
 8005470:	20000a12 	.word	0x20000a12
 8005474:	20000a11 	.word	0x20000a11
 8005478:	20000031 	.word	0x20000031
 800547c:	40000400 	.word	0x40000400
 8005480:	20000000 	.word	0x20000000

08005484 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8005490:	4be2      	ldr	r3, [pc, #904]	@ (800581c <ESP_Upkeep+0x398>)
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	4be2      	ldr	r3, [pc, #904]	@ (8005820 <ESP_Upkeep+0x39c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d024      	beq.n	80054e6 <ESP_Upkeep+0x62>
 800549c:	f009 f88c 	bl	800e5b8 <GetVerboseLevel>
 80054a0:	0003      	movs	r3, r0
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d11f      	bne.n	80054e6 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054a6:	4bdd      	ldr	r3, [pc, #884]	@ (800581c <ESP_Upkeep+0x398>)
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	4bdd      	ldr	r3, [pc, #884]	@ (8005820 <ESP_Upkeep+0x39c>)
 80054ac:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054ae:	4bdc      	ldr	r3, [pc, #880]	@ (8005820 <ESP_Upkeep+0x39c>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d103      	bne.n	80054be <ESP_Upkeep+0x3a>
 80054b6:	4bdb      	ldr	r3, [pc, #876]	@ (8005824 <ESP_Upkeep+0x3a0>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b0e      	cmp	r3, #14
 80054bc:	d013      	beq.n	80054e6 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054be:	4bd8      	ldr	r3, [pc, #864]	@ (8005820 <ESP_Upkeep+0x39c>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	001d      	movs	r5, r3
 80054c4:	4bd7      	ldr	r3, [pc, #860]	@ (8005824 <ESP_Upkeep+0x3a0>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	4bd7      	ldr	r3, [pc, #860]	@ (8005828 <ESP_Upkeep+0x3a4>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	001c      	movs	r4, r3
 80054d0:	4bd6      	ldr	r3, [pc, #856]	@ (800582c <ESP_Upkeep+0x3a8>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4ad6      	ldr	r2, [pc, #856]	@ (8005830 <ESP_Upkeep+0x3ac>)
 80054d6:	49d7      	ldr	r1, [pc, #860]	@ (8005834 <ESP_Upkeep+0x3b0>)
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	9401      	str	r4, [sp, #4]
 80054dc:	9000      	str	r0, [sp, #0]
 80054de:	002b      	movs	r3, r5
 80054e0:	2003      	movs	r0, #3
 80054e2:	f008 ffef 	bl	800e4c4 <CreateLine>
    }
  }
  switch (EspState) {
 80054e6:	4bcd      	ldr	r3, [pc, #820]	@ (800581c <ESP_Upkeep+0x398>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d901      	bls.n	80054f2 <ESP_Upkeep+0x6e>
 80054ee:	f000 fc30 	bl	8005d52 <ESP_Upkeep+0x8ce>
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	4bd0      	ldr	r3, [pc, #832]	@ (8005838 <ESP_Upkeep+0x3b4>)
 80054f6:	18d3      	adds	r3, r2, r3
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80054fc:	4bc7      	ldr	r3, [pc, #796]	@ (800581c <ESP_Upkeep+0x398>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
      break;
 8005502:	f000 fc3f 	bl	8005d84 <ESP_Upkeep+0x900>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 8005506:	f003 fa19 	bl	800893c <DisableConnectedDevices>
      SetESPIndicator();
 800550a:	f007 ffd1 	bl	800d4b0 <SetESPIndicator>
      if(!EspTurnedOn){
 800550e:	4bcb      	ldr	r3, [pc, #812]	@ (800583c <ESP_Upkeep+0x3b8>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2201      	movs	r2, #1
 8005514:	4053      	eors	r3, r2
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d036      	beq.n	800558a <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	48c7      	ldr	r0, [pc, #796]	@ (8005840 <ESP_Upkeep+0x3bc>)
 8005522:	2200      	movs	r2, #0
 8005524:	0019      	movs	r1, r3
 8005526:	f00a fe9e 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800552a:	2001      	movs	r0, #1
 800552c:	f009 fc14 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	48c2      	ldr	r0, [pc, #776]	@ (8005840 <ESP_Upkeep+0x3bc>)
 8005536:	2201      	movs	r2, #1
 8005538:	0019      	movs	r1, r3
 800553a:	f00a fe94 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800553e:	2001      	movs	r0, #1
 8005540:	f009 fc0a 	bl	800ed58 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005544:	4bbf      	ldr	r3, [pc, #764]	@ (8005844 <ESP_Upkeep+0x3c0>)
 8005546:	2200      	movs	r2, #0
 8005548:	2101      	movs	r1, #1
 800554a:	0018      	movs	r0, r3
 800554c:	f00a fe8b 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005550:	2001      	movs	r0, #1
 8005552:	f009 fc01 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005556:	4bbb      	ldr	r3, [pc, #748]	@ (8005844 <ESP_Upkeep+0x3c0>)
 8005558:	2201      	movs	r2, #1
 800555a:	2102      	movs	r1, #2
 800555c:	0018      	movs	r0, r3
 800555e:	f00a fe82 	bl	8010266 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005562:	2001      	movs	r0, #1
 8005564:	f009 fbf8 	bl	800ed58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005568:	4bb6      	ldr	r3, [pc, #728]	@ (8005844 <ESP_Upkeep+0x3c0>)
 800556a:	2201      	movs	r2, #1
 800556c:	2101      	movs	r1, #1
 800556e:	0018      	movs	r0, r3
 8005570:	f00a fe79 	bl	8010266 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005574:	f009 fbe6 	bl	800ed44 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	22af      	movs	r2, #175	@ 0xaf
 800557c:	0092      	lsls	r2, r2, #2
 800557e:	189a      	adds	r2, r3, r2
 8005580:	4bb1      	ldr	r3, [pc, #708]	@ (8005848 <ESP_Upkeep+0x3c4>)
 8005582:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005584:	4bad      	ldr	r3, [pc, #692]	@ (800583c <ESP_Upkeep+0x3b8>)
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800558a:	2380      	movs	r3, #128	@ 0x80
 800558c:	005a      	lsls	r2, r3, #1
 800558e:	4baf      	ldr	r3, [pc, #700]	@ (800584c <ESP_Upkeep+0x3c8>)
 8005590:	0011      	movs	r1, r2
 8005592:	0018      	movs	r0, r3
 8005594:	f7fe faf4 	bl	8003b80 <ESP_Receive>
 8005598:	1e03      	subs	r3, r0, #0
 800559a:	d101      	bne.n	80055a0 <ESP_Upkeep+0x11c>
 800559c:	f000 fbe5 	bl	8005d6a <ESP_Upkeep+0x8e6>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055a0:	4b9e      	ldr	r3, [pc, #632]	@ (800581c <ESP_Upkeep+0x398>)
 80055a2:	220f      	movs	r2, #15
 80055a4:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055a6:	f009 fbcd 	bl	800ed44 <HAL_GetTick>
 80055aa:	0003      	movs	r3, r0
 80055ac:	22fa      	movs	r2, #250	@ 0xfa
 80055ae:	00d2      	lsls	r2, r2, #3
 80055b0:	189a      	adds	r2, r3, r2
 80055b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005850 <ESP_Upkeep+0x3cc>)
 80055b4:	601a      	str	r2, [r3, #0]
      }
      break;
 80055b6:	f000 fbd8 	bl	8005d6a <ESP_Upkeep+0x8e6>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055ba:	2001      	movs	r0, #1
 80055bc:	f7ff fb26 	bl	8004c0c <DMA_ProcessBuffer>
 80055c0:	0003      	movs	r3, r0
 80055c2:	001a      	movs	r2, r3
 80055c4:	4ba3      	ldr	r3, [pc, #652]	@ (8005854 <ESP_Upkeep+0x3d0>)
 80055c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005854 <ESP_Upkeep+0x3d0>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	1dbc      	adds	r4, r7, #6
 80055ce:	2101      	movs	r1, #1
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff fc1b 	bl	8004e0c <ATCompare>
 80055d6:	0003      	movs	r3, r0
 80055d8:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d108      	bne.n	80055f4 <ESP_Upkeep+0x170>
 80055e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005850 <ESP_Upkeep+0x3cc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f008 ff16 	bl	800e418 <TimestampIsReached>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d101      	bne.n	80055f4 <ESP_Upkeep+0x170>
 80055f0:	f000 fbbd 	bl	8005d6e <ESP_Upkeep+0x8ea>
          EspState = ESP_STATE_MODE_SELECT;
 80055f4:	4b89      	ldr	r3, [pc, #548]	@ (800581c <ESP_Upkeep+0x398>)
 80055f6:	220b      	movs	r2, #11
 80055f8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80055fa:	f000 fbb8 	bl	8005d6e <ESP_Upkeep+0x8ea>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80055fe:	4b96      	ldr	r3, [pc, #600]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005600:	2209      	movs	r2, #9
 8005602:	2114      	movs	r1, #20
 8005604:	0018      	movs	r0, r3
 8005606:	f01a fdf5 	bl	80201f4 <memset>
      if(!InitIsDone || WifiReset){
 800560a:	4b94      	ldr	r3, [pc, #592]	@ (800585c <ESP_Upkeep+0x3d8>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	4053      	eors	r3, r2
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <ESP_Upkeep+0x19c>
 8005618:	4b91      	ldr	r3, [pc, #580]	@ (8005860 <ESP_Upkeep+0x3dc>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01a      	beq.n	8005656 <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005620:	4b8d      	ldr	r3, [pc, #564]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005622:	4a90      	ldr	r2, [pc, #576]	@ (8005864 <ESP_Upkeep+0x3e0>)
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	6019      	str	r1, [r3, #0]
 8005628:	8891      	ldrh	r1, [r2, #4]
 800562a:	8099      	strh	r1, [r3, #4]
 800562c:	7992      	ldrb	r2, [r2, #6]
 800562e:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005630:	4b7a      	ldr	r3, [pc, #488]	@ (800581c <ESP_Upkeep+0x398>)
 8005632:	2204      	movs	r2, #4
 8005634:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005636:	4b8c      	ldr	r3, [pc, #560]	@ (8005868 <ESP_Upkeep+0x3e4>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800563c:	4b7a      	ldr	r3, [pc, #488]	@ (8005828 <ESP_Upkeep+0x3a4>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005642:	4b89      	ldr	r3, [pc, #548]	@ (8005868 <ESP_Upkeep+0x3e4>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	001a      	movs	r2, r3
 8005648:	4b83      	ldr	r3, [pc, #524]	@ (8005858 <ESP_Upkeep+0x3d4>)
 800564a:	5c9a      	ldrb	r2, [r3, r2]
 800564c:	4b75      	ldr	r3, [pc, #468]	@ (8005824 <ESP_Upkeep+0x3a0>)
 800564e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005650:	4b76      	ldr	r3, [pc, #472]	@ (800582c <ESP_Upkeep+0x3a8>)
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005656:	4b81      	ldr	r3, [pc, #516]	@ (800585c <ESP_Upkeep+0x3d8>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01f      	beq.n	800569e <ESP_Upkeep+0x21a>
 800565e:	4b83      	ldr	r3, [pc, #524]	@ (800586c <ESP_Upkeep+0x3e8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2201      	movs	r2, #1
 8005664:	4053      	eors	r3, r2
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d018      	beq.n	800569e <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800566c:	4b7a      	ldr	r3, [pc, #488]	@ (8005858 <ESP_Upkeep+0x3d4>)
 800566e:	4a80      	ldr	r2, [pc, #512]	@ (8005870 <ESP_Upkeep+0x3ec>)
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	6019      	str	r1, [r3, #0]
 8005674:	8892      	ldrh	r2, [r2, #4]
 8005676:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005678:	4b68      	ldr	r3, [pc, #416]	@ (800581c <ESP_Upkeep+0x398>)
 800567a:	2204      	movs	r2, #4
 800567c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800567e:	4b7a      	ldr	r3, [pc, #488]	@ (8005868 <ESP_Upkeep+0x3e4>)
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005684:	4b68      	ldr	r3, [pc, #416]	@ (8005828 <ESP_Upkeep+0x3a4>)
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800568a:	4b77      	ldr	r3, [pc, #476]	@ (8005868 <ESP_Upkeep+0x3e4>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	001a      	movs	r2, r3
 8005690:	4b71      	ldr	r3, [pc, #452]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005692:	5c9a      	ldrb	r2, [r3, r2]
 8005694:	4b63      	ldr	r3, [pc, #396]	@ (8005824 <ESP_Upkeep+0x3a0>)
 8005696:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005698:	4b64      	ldr	r3, [pc, #400]	@ (800582c <ESP_Upkeep+0x3a8>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800569e:	4b6f      	ldr	r3, [pc, #444]	@ (800585c <ESP_Upkeep+0x3d8>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d021      	beq.n	80056ea <ESP_Upkeep+0x266>
 80056a6:	4b71      	ldr	r3, [pc, #452]	@ (800586c <ESP_Upkeep+0x3e8>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <ESP_Upkeep+0x266>
 80056ae:	4b71      	ldr	r3, [pc, #452]	@ (8005874 <ESP_Upkeep+0x3f0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	4053      	eors	r3, r2
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d016      	beq.n	80056ea <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005878 <ESP_Upkeep+0x3f4>)
 80056be:	881a      	ldrh	r2, [r3, #0]
 80056c0:	4b65      	ldr	r3, [pc, #404]	@ (8005858 <ESP_Upkeep+0x3d4>)
 80056c2:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056c4:	4b55      	ldr	r3, [pc, #340]	@ (800581c <ESP_Upkeep+0x398>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056ca:	4b67      	ldr	r3, [pc, #412]	@ (8005868 <ESP_Upkeep+0x3e4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80056d0:	4b55      	ldr	r3, [pc, #340]	@ (8005828 <ESP_Upkeep+0x3a4>)
 80056d2:	2204      	movs	r2, #4
 80056d4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056d6:	4b64      	ldr	r3, [pc, #400]	@ (8005868 <ESP_Upkeep+0x3e4>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	001a      	movs	r2, r3
 80056dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005858 <ESP_Upkeep+0x3d4>)
 80056de:	5c9a      	ldrb	r2, [r3, r2]
 80056e0:	4b50      	ldr	r3, [pc, #320]	@ (8005824 <ESP_Upkeep+0x3a0>)
 80056e2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056e4:	4b51      	ldr	r3, [pc, #324]	@ (800582c <ESP_Upkeep+0x3a8>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80056ea:	4b5c      	ldr	r3, [pc, #368]	@ (800585c <ESP_Upkeep+0x3d8>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d02c      	beq.n	800574c <ESP_Upkeep+0x2c8>
 80056f2:	4b5e      	ldr	r3, [pc, #376]	@ (800586c <ESP_Upkeep+0x3e8>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d028      	beq.n	800574c <ESP_Upkeep+0x2c8>
 80056fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005874 <ESP_Upkeep+0x3f0>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d024      	beq.n	800574c <ESP_Upkeep+0x2c8>
 8005702:	4b5e      	ldr	r3, [pc, #376]	@ (800587c <ESP_Upkeep+0x3f8>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	4053      	eors	r3, r2
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01d      	beq.n	800574c <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005710:	4b51      	ldr	r3, [pc, #324]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005712:	4a5b      	ldr	r2, [pc, #364]	@ (8005880 <ESP_Upkeep+0x3fc>)
 8005714:	8811      	ldrh	r1, [r2, #0]
 8005716:	8019      	strh	r1, [r3, #0]
 8005718:	7892      	ldrb	r2, [r2, #2]
 800571a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800571c:	4b3f      	ldr	r3, [pc, #252]	@ (800581c <ESP_Upkeep+0x398>)
 800571e:	2204      	movs	r2, #4
 8005720:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <ESP_Upkeep+0x3e4>)
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005728:	4b3f      	ldr	r3, [pc, #252]	@ (8005828 <ESP_Upkeep+0x3a4>)
 800572a:	2202      	movs	r2, #2
 800572c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800572e:	f009 fb09 	bl	800ed44 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	4b53      	ldr	r3, [pc, #332]	@ (8005884 <ESP_Upkeep+0x400>)
 8005736:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005738:	4b4b      	ldr	r3, [pc, #300]	@ (8005868 <ESP_Upkeep+0x3e4>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	001a      	movs	r2, r3
 800573e:	4b46      	ldr	r3, [pc, #280]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005740:	5c9a      	ldrb	r2, [r3, r2]
 8005742:	4b38      	ldr	r3, [pc, #224]	@ (8005824 <ESP_Upkeep+0x3a0>)
 8005744:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005746:	4b39      	ldr	r3, [pc, #228]	@ (800582c <ESP_Upkeep+0x3a8>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800574c:	4b43      	ldr	r3, [pc, #268]	@ (800585c <ESP_Upkeep+0x3d8>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d027      	beq.n	80057a4 <ESP_Upkeep+0x320>
 8005754:	4b45      	ldr	r3, [pc, #276]	@ (800586c <ESP_Upkeep+0x3e8>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d023      	beq.n	80057a4 <ESP_Upkeep+0x320>
 800575c:	4b45      	ldr	r3, [pc, #276]	@ (8005874 <ESP_Upkeep+0x3f0>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01f      	beq.n	80057a4 <ESP_Upkeep+0x320>
 8005764:	4b45      	ldr	r3, [pc, #276]	@ (800587c <ESP_Upkeep+0x3f8>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800576c:	4b46      	ldr	r3, [pc, #280]	@ (8005888 <ESP_Upkeep+0x404>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b39      	ldr	r3, [pc, #228]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005772:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005774:	4b29      	ldr	r3, [pc, #164]	@ (800581c <ESP_Upkeep+0x398>)
 8005776:	2204      	movs	r2, #4
 8005778:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800577a:	4b3b      	ldr	r3, [pc, #236]	@ (8005868 <ESP_Upkeep+0x3e4>)
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005780:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <ESP_Upkeep+0x3a4>)
 8005782:	2205      	movs	r2, #5
 8005784:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005786:	f009 fadd 	bl	800ed44 <HAL_GetTick>
 800578a:	0002      	movs	r2, r0
 800578c:	4b3d      	ldr	r3, [pc, #244]	@ (8005884 <ESP_Upkeep+0x400>)
 800578e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005790:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <ESP_Upkeep+0x3e4>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	001a      	movs	r2, r3
 8005796:	4b30      	ldr	r3, [pc, #192]	@ (8005858 <ESP_Upkeep+0x3d4>)
 8005798:	5c9a      	ldrb	r2, [r3, r2]
 800579a:	4b22      	ldr	r3, [pc, #136]	@ (8005824 <ESP_Upkeep+0x3a0>)
 800579c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800579e:	4b23      	ldr	r3, [pc, #140]	@ (800582c <ESP_Upkeep+0x3a8>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80057a4:	4b39      	ldr	r3, [pc, #228]	@ (800588c <ESP_Upkeep+0x408>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d100      	bne.n	80057ae <ESP_Upkeep+0x32a>
 80057ac:	e2e1      	b.n	8005d72 <ESP_Upkeep+0x8ee>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80057ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005858 <ESP_Upkeep+0x3d4>)
 80057b0:	4a37      	ldr	r2, [pc, #220]	@ (8005890 <ESP_Upkeep+0x40c>)
 80057b2:	6811      	ldr	r1, [r2, #0]
 80057b4:	6019      	str	r1, [r3, #0]
 80057b6:	7912      	ldrb	r2, [r2, #4]
 80057b8:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80057ba:	4a36      	ldr	r2, [pc, #216]	@ (8005894 <ESP_Upkeep+0x410>)
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <ESP_Upkeep+0x3b0>)
 80057be:	0019      	movs	r1, r3
 80057c0:	2003      	movs	r0, #3
 80057c2:	f008 fe7f 	bl	800e4c4 <CreateLine>
        DisableConnectedDevices();
 80057c6:	f003 f8b9 	bl	800893c <DisableConnectedDevices>
        usblog = false;
 80057ca:	4b33      	ldr	r3, [pc, #204]	@ (8005898 <ESP_Upkeep+0x414>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057d0:	4b12      	ldr	r3, [pc, #72]	@ (800581c <ESP_Upkeep+0x398>)
 80057d2:	2204      	movs	r2, #4
 80057d4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057d6:	4b24      	ldr	r3, [pc, #144]	@ (8005868 <ESP_Upkeep+0x3e4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80057dc:	4b12      	ldr	r3, [pc, #72]	@ (8005828 <ESP_Upkeep+0x3a4>)
 80057de:	2203      	movs	r2, #3
 80057e0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80057e2:	4b21      	ldr	r3, [pc, #132]	@ (8005868 <ESP_Upkeep+0x3e4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	001a      	movs	r2, r3
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <ESP_Upkeep+0x3d4>)
 80057ea:	5c9a      	ldrb	r2, [r3, r2]
 80057ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <ESP_Upkeep+0x3a0>)
 80057ee:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057f0:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <ESP_Upkeep+0x3a8>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80057f6:	e2bc      	b.n	8005d72 <ESP_Upkeep+0x8ee>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80057f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <ESP_Upkeep+0x3a0>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	1dfc      	adds	r4, r7, #7
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff fb46 	bl	8004e90 <AT_Send>
 8005804:	0003      	movs	r3, r0
 8005806:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <ESP_Upkeep+0x38e>
 8005810:	e2b1      	b.n	8005d76 <ESP_Upkeep+0x8f2>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005812:	4b02      	ldr	r3, [pc, #8]	@ (800581c <ESP_Upkeep+0x398>)
 8005814:	2203      	movs	r2, #3
 8005816:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005818:	e2ad      	b.n	8005d76 <ESP_Upkeep+0x8f2>
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	20000030 	.word	0x20000030
 8005820:	20000002 	.word	0x20000002
 8005824:	20000a12 	.word	0x20000a12
 8005828:	20000a13 	.word	0x20000a13
 800582c:	20000a11 	.word	0x20000a11
 8005830:	08023ad0 	.word	0x08023ad0
 8005834:	08023168 	.word	0x08023168
 8005838:	080253c4 	.word	0x080253c4
 800583c:	20000554 	.word	0x20000554
 8005840:	50000800 	.word	0x50000800
 8005844:	50001c00 	.word	0x50001c00
 8005848:	20000a0c 	.word	0x20000a0c
 800584c:	20000454 	.word	0x20000454
 8005850:	20000b48 	.word	0x20000b48
 8005854:	20000032 	.word	0x20000032
 8005858:	200009fc 	.word	0x200009fc
 800585c:	20000555 	.word	0x20000555
 8005860:	20000556 	.word	0x20000556
 8005864:	20000004 	.word	0x20000004
 8005868:	20000a06 	.word	0x20000a06
 800586c:	20000558 	.word	0x20000558
 8005870:	20000014 	.word	0x20000014
 8005874:	20000559 	.word	0x20000559
 8005878:	20000010 	.word	0x20000010
 800587c:	20000001 	.word	0x20000001
 8005880:	2000000c 	.word	0x2000000c
 8005884:	2000056c 	.word	0x2000056c
 8005888:	20000024 	.word	0x20000024
 800588c:	20000557 	.word	0x20000557
 8005890:	2000001c 	.word	0x2000001c
 8005894:	08023afc 	.word	0x08023afc
 8005898:	200001fb 	.word	0x200001fb

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800589c:	4bc8      	ldr	r3, [pc, #800]	@ (8005bc0 <ESP_Upkeep+0x73c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <ESP_Upkeep+0x430>
 80058a4:	4bc7      	ldr	r3, [pc, #796]	@ (8005bc4 <ESP_Upkeep+0x740>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d003      	beq.n	80058b4 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 80058ac:	4bc6      	ldr	r3, [pc, #792]	@ (8005bc8 <ESP_Upkeep+0x744>)
 80058ae:	220b      	movs	r2, #11
 80058b0:	701a      	strb	r2, [r3, #0]
        break;
 80058b2:	e267      	b.n	8005d84 <ESP_Upkeep+0x900>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80058b4:	4bc5      	ldr	r3, [pc, #788]	@ (8005bcc <ESP_Upkeep+0x748>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f008 fdad 	bl	800e418 <TimestampIsReached>
 80058be:	1e03      	subs	r3, r0, #0
 80058c0:	d100      	bne.n	80058c4 <ESP_Upkeep+0x440>
 80058c2:	e25a      	b.n	8005d7a <ESP_Upkeep+0x8f6>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058c4:	4bc2      	ldr	r3, [pc, #776]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff f99f 	bl	8004c0c <DMA_ProcessBuffer>
 80058ce:	0003      	movs	r3, r0
 80058d0:	001a      	movs	r2, r3
 80058d2:	4bc0      	ldr	r3, [pc, #768]	@ (8005bd4 <ESP_Upkeep+0x750>)
 80058d4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058d6:	4bbf      	ldr	r3, [pc, #764]	@ (8005bd4 <ESP_Upkeep+0x750>)
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	4bbd      	ldr	r3, [pc, #756]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	1d7c      	adds	r4, r7, #5
 80058e0:	0019      	movs	r1, r3
 80058e2:	0010      	movs	r0, r2
 80058e4:	f7ff fa92 	bl	8004e0c <ATCompare>
 80058e8:	0003      	movs	r3, r0
 80058ea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80058ec:	4bb9      	ldr	r3, [pc, #740]	@ (8005bd4 <ESP_Upkeep+0x750>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d138      	bne.n	8005966 <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 80058f4:	4bb8      	ldr	r3, [pc, #736]	@ (8005bd8 <ESP_Upkeep+0x754>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b0f      	cmp	r3, #15
 80058fa:	d108      	bne.n	800590e <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 80058fc:	4bb6      	ldr	r3, [pc, #728]	@ (8005bd8 <ESP_Upkeep+0x754>)
 80058fe:	220e      	movs	r2, #14
 8005900:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005902:	4bb3      	ldr	r3, [pc, #716]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005908:	4bb4      	ldr	r3, [pc, #720]	@ (8005bdc <ESP_Upkeep+0x758>)
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800590e:	4bae      	ldr	r3, [pc, #696]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005910:	2204      	movs	r2, #4
 8005912:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005914:	4bb2      	ldr	r3, [pc, #712]	@ (8005be0 <ESP_Upkeep+0x75c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4bb0      	ldr	r3, [pc, #704]	@ (8005be0 <ESP_Upkeep+0x75c>)
 800591e:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005920:	4baf      	ldr	r3, [pc, #700]	@ (8005be0 <ESP_Upkeep+0x75c>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d91e      	bls.n	8005966 <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005928:	f009 fa0c 	bl	800ed44 <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	4aad      	ldr	r2, [pc, #692]	@ (8005be4 <ESP_Upkeep+0x760>)
 8005930:	189a      	adds	r2, r3, r2
 8005932:	4ba6      	ldr	r3, [pc, #664]	@ (8005bcc <ESP_Upkeep+0x748>)
 8005934:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005936:	4bac      	ldr	r3, [pc, #688]	@ (8005be8 <ESP_Upkeep+0x764>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 800593c:	f7ff fa58 	bl	8004df0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005940:	f009 fa00 	bl	800ed44 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	4ba9      	ldr	r3, [pc, #676]	@ (8005bec <ESP_Upkeep+0x768>)
 8005948:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800594a:	4ba8      	ldr	r3, [pc, #672]	@ (8005bec <ESP_Upkeep+0x768>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4ba8      	ldr	r3, [pc, #672]	@ (8005bf0 <ESP_Upkeep+0x76c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	4aa7      	ldr	r2, [pc, #668]	@ (8005bf4 <ESP_Upkeep+0x770>)
 8005956:	49a8      	ldr	r1, [pc, #672]	@ (8005bf8 <ESP_Upkeep+0x774>)
 8005958:	2001      	movs	r0, #1
 800595a:	f008 fdb3 	bl	800e4c4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800595e:	4b9a      	ldr	r3, [pc, #616]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005960:	220d      	movs	r2, #13
 8005962:	701a      	strb	r2, [r3, #0]
            break;
 8005964:	e20e      	b.n	8005d84 <ESP_Upkeep+0x900>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005966:	4b9b      	ldr	r3, [pc, #620]	@ (8005bd4 <ESP_Upkeep+0x750>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d106      	bne.n	800597c <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 800596e:	f009 f9e9 	bl	800ed44 <HAL_GetTick>
 8005972:	0003      	movs	r3, r0
 8005974:	330a      	adds	r3, #10
 8005976:	001a      	movs	r2, r3
 8005978:	4b94      	ldr	r3, [pc, #592]	@ (8005bcc <ESP_Upkeep+0x748>)
 800597a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800597c:	4b95      	ldr	r3, [pc, #596]	@ (8005bd4 <ESP_Upkeep+0x750>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b0a      	cmp	r3, #10
 8005982:	d106      	bne.n	8005992 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005984:	f009 f9de 	bl	800ed44 <HAL_GetTick>
 8005988:	0003      	movs	r3, r0
 800598a:	330a      	adds	r3, #10
 800598c:	001a      	movs	r2, r3
 800598e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <ESP_Upkeep+0x748>)
 8005990:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005992:	4b90      	ldr	r3, [pc, #576]	@ (8005bd4 <ESP_Upkeep+0x750>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b06      	cmp	r3, #6
 8005998:	d14b      	bne.n	8005a32 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 800599a:	4b98      	ldr	r3, [pc, #608]	@ (8005bfc <ESP_Upkeep+0x778>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b96      	ldr	r3, [pc, #600]	@ (8005bfc <ESP_Upkeep+0x778>)
 80059a4:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059a6:	4a96      	ldr	r2, [pc, #600]	@ (8005c00 <ESP_Upkeep+0x77c>)
 80059a8:	4b93      	ldr	r3, [pc, #588]	@ (8005bf8 <ESP_Upkeep+0x774>)
 80059aa:	0019      	movs	r1, r3
 80059ac:	2001      	movs	r0, #1
 80059ae:	f008 fd89 	bl	800e4c4 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059b2:	4b92      	ldr	r3, [pc, #584]	@ (8005bfc <ESP_Upkeep+0x778>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d924      	bls.n	8005a04 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 80059ba:	f009 f9c3 	bl	800ed44 <HAL_GetTick>
 80059be:	0003      	movs	r3, r0
 80059c0:	4a90      	ldr	r2, [pc, #576]	@ (8005c04 <ESP_Upkeep+0x780>)
 80059c2:	189a      	adds	r2, r3, r2
 80059c4:	4b81      	ldr	r3, [pc, #516]	@ (8005bcc <ESP_Upkeep+0x748>)
 80059c6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059c8:	4b87      	ldr	r3, [pc, #540]	@ (8005be8 <ESP_Upkeep+0x764>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80059ce:	f7ff fa0f 	bl	8004df0 <clearDMABuffer>
            stop = HAL_GetTick();
 80059d2:	f009 f9b7 	bl	800ed44 <HAL_GetTick>
 80059d6:	0002      	movs	r2, r0
 80059d8:	4b84      	ldr	r3, [pc, #528]	@ (8005bec <ESP_Upkeep+0x768>)
 80059da:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80059dc:	4b83      	ldr	r3, [pc, #524]	@ (8005bec <ESP_Upkeep+0x768>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b83      	ldr	r3, [pc, #524]	@ (8005bf0 <ESP_Upkeep+0x76c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	4a88      	ldr	r2, [pc, #544]	@ (8005c08 <ESP_Upkeep+0x784>)
 80059e8:	4983      	ldr	r1, [pc, #524]	@ (8005bf8 <ESP_Upkeep+0x774>)
 80059ea:	2001      	movs	r0, #1
 80059ec:	f008 fd6a 	bl	800e4c4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80059f0:	4b75      	ldr	r3, [pc, #468]	@ (8005bc8 <ESP_Upkeep+0x744>)
 80059f2:	220d      	movs	r2, #13
 80059f4:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 80059f6:	4b78      	ldr	r3, [pc, #480]	@ (8005bd8 <ESP_Upkeep+0x754>)
 80059f8:	2214      	movs	r2, #20
 80059fa:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 80059fc:	4b74      	ldr	r3, [pc, #464]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
            break;
 8005a02:	e1bf      	b.n	8005d84 <ESP_Upkeep+0x900>
          }
          if(ATCommand != AT_SENDDATA){
 8005a04:	4b74      	ldr	r3, [pc, #464]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b0f      	cmp	r3, #15
 8005a0a:	d003      	beq.n	8005a14 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005a0c:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005a0e:	2204      	movs	r2, #4
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e00e      	b.n	8005a32 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a14:	4b70      	ldr	r3, [pc, #448]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a16:	220e      	movs	r2, #14
 8005a18:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a1a:	4b70      	ldr	r3, [pc, #448]	@ (8005bdc <ESP_Upkeep+0x758>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4b6e      	ldr	r3, [pc, #440]	@ (8005bdc <ESP_Upkeep+0x758>)
 8005a24:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a26:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005a28:	2202      	movs	r2, #2
 8005a2a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a2c:	4b66      	ldr	r3, [pc, #408]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005a2e:	2204      	movs	r2, #4
 8005a30:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a32:	1d7b      	adds	r3, r7, #5
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d100      	bne.n	8005a3c <ESP_Upkeep+0x5b8>
 8005a3a:	e19e      	b.n	8005d7a <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_NEXT_AT;
 8005a3c:	4b62      	ldr	r3, [pc, #392]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005a3e:	2205      	movs	r2, #5
 8005a40:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a42:	e19a      	b.n	8005d7a <ESP_Upkeep+0x8f6>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005a44:	4b65      	ldr	r3, [pc, #404]	@ (8005bdc <ESP_Upkeep+0x758>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	4b63      	ldr	r3, [pc, #396]	@ (8005bdc <ESP_Upkeep+0x758>)
 8005a4e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a50:	4b62      	ldr	r3, [pc, #392]	@ (8005bdc <ESP_Upkeep+0x758>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	001a      	movs	r2, r3
 8005a56:	4b6d      	ldr	r3, [pc, #436]	@ (8005c0c <ESP_Upkeep+0x788>)
 8005a58:	5c9a      	ldrb	r2, [r3, r2]
 8005a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a5c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d102      	bne.n	8005a6c <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a66:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b0e      	cmp	r3, #14
 8005a72:	d102      	bne.n	8005a7a <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a74:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005a76:	2202      	movs	r2, #2
 8005a78:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b0e      	cmp	r3, #14
 8005a80:	d006      	beq.n	8005a90 <ESP_Upkeep+0x60c>
 8005a82:	4b55      	ldr	r3, [pc, #340]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d002      	beq.n	8005a90 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a8a:	4b51      	ldr	r3, [pc, #324]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005a90:	4b51      	ldr	r3, [pc, #324]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b11      	cmp	r3, #17
 8005a96:	d102      	bne.n	8005a9e <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005a98:	4b4d      	ldr	r3, [pc, #308]	@ (8005bd0 <ESP_Upkeep+0x74c>)
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8005bd8 <ESP_Upkeep+0x754>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b14      	cmp	r3, #20
 8005aaa:	d000      	beq.n	8005aae <ESP_Upkeep+0x62a>
 8005aac:	e167      	b.n	8005d7e <ESP_Upkeep+0x8fa>
        if(Mode == AT_MODE_SEND){
 8005aae:	4b45      	ldr	r3, [pc, #276]	@ (8005bc4 <ESP_Upkeep+0x740>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d122      	bne.n	8005afc <ESP_Upkeep+0x678>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ab6:	f009 f945 	bl	800ed44 <HAL_GetTick>
 8005aba:	0003      	movs	r3, r0
 8005abc:	4a49      	ldr	r2, [pc, #292]	@ (8005be4 <ESP_Upkeep+0x760>)
 8005abe:	189a      	adds	r2, r3, r2
 8005ac0:	4b42      	ldr	r3, [pc, #264]	@ (8005bcc <ESP_Upkeep+0x748>)
 8005ac2:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ac4:	f7ff f994 	bl	8004df0 <clearDMABuffer>
          stop = HAL_GetTick();
 8005ac8:	f009 f93c 	bl	800ed44 <HAL_GetTick>
 8005acc:	0002      	movs	r2, r0
 8005ace:	4b47      	ldr	r3, [pc, #284]	@ (8005bec <ESP_Upkeep+0x768>)
 8005ad0:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005ad2:	4b46      	ldr	r3, [pc, #280]	@ (8005bec <ESP_Upkeep+0x768>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b46      	ldr	r3, [pc, #280]	@ (8005bf0 <ESP_Upkeep+0x76c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	4a4c      	ldr	r2, [pc, #304]	@ (8005c10 <ESP_Upkeep+0x78c>)
 8005ade:	494d      	ldr	r1, [pc, #308]	@ (8005c14 <ESP_Upkeep+0x790>)
 8005ae0:	2002      	movs	r0, #2
 8005ae2:	f008 fcef 	bl	800e4c4 <CreateLine>
          ResetdBAmax();
 8005ae6:	f002 ff47 	bl	8008978 <ResetdBAmax>
          showTime();
 8005aea:	f000 fcdf 	bl	80064ac <showTime>
          ESPTransmitDone = true;
 8005aee:	4b3e      	ldr	r3, [pc, #248]	@ (8005be8 <ESP_Upkeep+0x764>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005af4:	4b34      	ldr	r3, [pc, #208]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005af6:	220d      	movs	r2, #13
 8005af8:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005afa:	e140      	b.n	8005d7e <ESP_Upkeep+0x8fa>
        else if (Mode == AT_MODE_GETTIME) {
 8005afc:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <ESP_Upkeep+0x740>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d12c      	bne.n	8005b5e <ESP_Upkeep+0x6da>
            setTime = false;
 8005b04:	4b44      	ldr	r3, [pc, #272]	@ (8005c18 <ESP_Upkeep+0x794>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b0a:	f009 f91b 	bl	800ed44 <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	4a42      	ldr	r2, [pc, #264]	@ (8005c1c <ESP_Upkeep+0x798>)
 8005b12:	189a      	adds	r2, r3, r2
 8005b14:	4b42      	ldr	r3, [pc, #264]	@ (8005c20 <ESP_Upkeep+0x79c>)
 8005b16:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b18:	4b41      	ldr	r3, [pc, #260]	@ (8005c20 <ESP_Upkeep+0x79c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <ESP_Upkeep+0x7a0>)
 8005b1e:	493d      	ldr	r1, [pc, #244]	@ (8005c14 <ESP_Upkeep+0x790>)
 8005b20:	2002      	movs	r0, #2
 8005b22:	f008 fccf 	bl	800e4c4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b26:	4b40      	ldr	r3, [pc, #256]	@ (8005c28 <ESP_Upkeep+0x7a4>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b28      	ldr	r3, [pc, #160]	@ (8005bcc <ESP_Upkeep+0x748>)
 8005b2c:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005b2e:	f7ff f95f 	bl	8004df0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b32:	f009 f907 	bl	800ed44 <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	4b2c      	ldr	r3, [pc, #176]	@ (8005bec <ESP_Upkeep+0x768>)
 8005b3a:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <ESP_Upkeep+0x768>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf0 <ESP_Upkeep+0x76c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a39      	ldr	r2, [pc, #228]	@ (8005c2c <ESP_Upkeep+0x7a8>)
 8005b48:	4932      	ldr	r1, [pc, #200]	@ (8005c14 <ESP_Upkeep+0x790>)
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	f008 fcba 	bl	800e4c4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005b52:	220d      	movs	r2, #13
 8005b54:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b56:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc4 <ESP_Upkeep+0x740>)
 8005b58:	2202      	movs	r2, #2
 8005b5a:	701a      	strb	r2, [r3, #0]
    break;
 8005b5c:	e10f      	b.n	8005d7e <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_RESET;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005b60:	2209      	movs	r2, #9
 8005b62:	701a      	strb	r2, [r3, #0]
    break;
 8005b64:	e10b      	b.n	8005d7e <ESP_Upkeep+0x8fa>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005b66:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <ESP_Upkeep+0x7ac>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b6c:	4b31      	ldr	r3, [pc, #196]	@ (8005c34 <ESP_Upkeep+0x7b0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2101      	movs	r1, #1
 8005b72:	0018      	movs	r0, r3
 8005b74:	f00a fb77 	bl	8010266 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b78:	2001      	movs	r0, #1
 8005b7a:	f009 f8ed 	bl	800ed58 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005b7e:	2380      	movs	r3, #128	@ 0x80
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	482d      	ldr	r0, [pc, #180]	@ (8005c38 <ESP_Upkeep+0x7b4>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	0019      	movs	r1, r3
 8005b88:	f00a fb6d 	bl	8010266 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f009 f8e3 	bl	800ed58 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005b92:	4b28      	ldr	r3, [pc, #160]	@ (8005c34 <ESP_Upkeep+0x7b0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	2102      	movs	r1, #2
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f00a fb64 	bl	8010266 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <ESP_Upkeep+0x744>)
 8005ba0:	2209      	movs	r2, #9
 8005ba2:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ba4:	f002 fea0 	bl	80088e8 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	f009 f8d5 	bl	800ed58 <HAL_Delay>
      ResetESPIndicator();
 8005bae:	f007 fc97 	bl	800d4e0 <ResetESPIndicator>
      errorcntr = 0;
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <ESP_Upkeep+0x75c>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bb8:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <ESP_Upkeep+0x778>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
      break;
 8005bbe:	e0e1      	b.n	8005d84 <ESP_Upkeep+0x900>
 8005bc0:	20000557 	.word	0x20000557
 8005bc4:	20000a13 	.word	0x20000a13
 8005bc8:	20000030 	.word	0x20000030
 8005bcc:	20000a0c 	.word	0x20000a0c
 8005bd0:	20000a11 	.word	0x20000a11
 8005bd4:	20000032 	.word	0x20000032
 8005bd8:	20000a12 	.word	0x20000a12
 8005bdc:	20000a06 	.word	0x20000a06
 8005be0:	20000a07 	.word	0x20000a07
 8005be4:	0003a980 	.word	0x0003a980
 8005be8:	2000055c 	.word	0x2000055c
 8005bec:	20000570 	.word	0x20000570
 8005bf0:	2000056c 	.word	0x2000056c
 8005bf4:	08023b2c 	.word	0x08023b2c
 8005bf8:	0802318c 	.word	0x0802318c
 8005bfc:	20000a08 	.word	0x20000a08
 8005c00:	08023b60 	.word	0x08023b60
 8005c04:	0000c350 	.word	0x0000c350
 8005c08:	08023b9c 	.word	0x08023b9c
 8005c0c:	200009fc 	.word	0x200009fc
 8005c10:	08023bcc 	.word	0x08023bcc
 8005c14:	08023be4 	.word	0x08023be4
 8005c18:	20000001 	.word	0x20000001
 8005c1c:	047e7c4f 	.word	0x047e7c4f
 8005c20:	20000028 	.word	0x20000028
 8005c24:	08023be8 	.word	0x08023be8
 8005c28:	2000002c 	.word	0x2000002c
 8005c2c:	08023c2c 	.word	0x08023c2c
 8005c30:	20000554 	.word	0x20000554
 8005c34:	50001c00 	.word	0x50001c00
 8005c38:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c3c:	4b54      	ldr	r3, [pc, #336]	@ (8005d90 <ESP_Upkeep+0x90c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f008 fbe9 	bl	800e418 <TimestampIsReached>
 8005c46:	1e03      	subs	r3, r0, #0
 8005c48:	d103      	bne.n	8005c52 <ESP_Upkeep+0x7ce>
 8005c4a:	4b52      	ldr	r3, [pc, #328]	@ (8005d94 <ESP_Upkeep+0x910>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d043      	beq.n	8005cda <ESP_Upkeep+0x856>
        ESPTransmitDone = false;
 8005c52:	4b51      	ldr	r3, [pc, #324]	@ (8005d98 <ESP_Upkeep+0x914>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c58:	4b50      	ldr	r3, [pc, #320]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <ESP_Upkeep+0x7e8>
          InitIsDone = true;
 8005c60:	4b4f      	ldr	r3, [pc, #316]	@ (8005da0 <ESP_Upkeep+0x91c>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c66:	4b4f      	ldr	r3, [pc, #316]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005c68:	220b      	movs	r2, #11
 8005c6a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d108      	bne.n	8005c86 <ESP_Upkeep+0x802>
          ConnectionMade = true;
 8005c74:	4b4c      	ldr	r3, [pc, #304]	@ (8005da8 <ESP_Upkeep+0x924>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8005dac <ESP_Upkeep+0x928>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c80:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005c82:	220b      	movs	r2, #11
 8005c84:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005c86:	4b45      	ldr	r3, [pc, #276]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d102      	bne.n	8005c94 <ESP_Upkeep+0x810>
          EspState = ESP_STATE_INIT;
 8005c8e:	4b45      	ldr	r3, [pc, #276]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005c94:	4b41      	ldr	r3, [pc, #260]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d108      	bne.n	8005cae <ESP_Upkeep+0x82a>
          EspState = ESP_STATE_CONFIG;
 8005c9c:	4b41      	ldr	r3, [pc, #260]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005c9e:	220e      	movs	r2, #14
 8005ca0:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005ca2:	4a43      	ldr	r2, [pc, #268]	@ (8005db0 <ESP_Upkeep+0x92c>)
 8005ca4:	4b43      	ldr	r3, [pc, #268]	@ (8005db4 <ESP_Upkeep+0x930>)
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f008 fc0b 	bl	800e4c4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cae:	4b3b      	ldr	r3, [pc, #236]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d105      	bne.n	8005cc2 <ESP_Upkeep+0x83e>
          EspState = ESP_STATE_MODE_SELECT;
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005cb8:	220b      	movs	r2, #11
 8005cba:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005db8 <ESP_Upkeep+0x934>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cc2:	4b34      	ldr	r3, [pc, #208]	@ (8005d94 <ESP_Upkeep+0x910>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d020      	beq.n	8005d0c <ESP_Upkeep+0x888>
 8005cca:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d01c      	beq.n	8005d0c <ESP_Upkeep+0x888>
          EspState = ESP_STATE_INIT;
 8005cd2:	4b34      	ldr	r3, [pc, #208]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005cd8:	e018      	b.n	8005d0c <ESP_Upkeep+0x888>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005cda:	4b38      	ldr	r3, [pc, #224]	@ (8005dbc <ESP_Upkeep+0x938>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f008 fb9a 	bl	800e418 <TimestampIsReached>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d04c      	beq.n	8005d82 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND ) {
 8005ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d148      	bne.n	8005d82 <ESP_Upkeep+0x8fe>
           Mode = AT_MODE_GETTIME;
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <ESP_Upkeep+0x918>)
 8005cf2:	2205      	movs	r2, #5
 8005cf4:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005cfc:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <ESP_Upkeep+0x90c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <ESP_Upkeep+0x93c>)
 8005d02:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005d04:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc4 <ESP_Upkeep+0x940>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d0a:	e03a      	b.n	8005d82 <ESP_Upkeep+0x8fe>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005d0c:	46c0      	nop			@ (mov r8, r8)
      break;
 8005d0e:	e038      	b.n	8005d82 <ESP_Upkeep+0x8fe>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005d10:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc8 <ESP_Upkeep+0x944>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4053      	eors	r3, r2
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d008      	beq.n	8005d30 <ESP_Upkeep+0x8ac>
        Info("Do nothing until reset");
 8005d1e:	4a24      	ldr	r2, [pc, #144]	@ (8005db0 <ESP_Upkeep+0x92c>)
 8005d20:	4b24      	ldr	r3, [pc, #144]	@ (8005db4 <ESP_Upkeep+0x930>)
 8005d22:	0019      	movs	r1, r3
 8005d24:	2002      	movs	r0, #2
 8005d26:	f008 fbcd 	bl	800e4c4 <CreateLine>
        msgdone = true;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	@ (8005dc8 <ESP_Upkeep+0x944>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005d30:	f017 f848 	bl	801cdc4 <GetUsbRxPointer>
 8005d34:	0003      	movs	r3, r0
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f8c0 	bl	8005ebc <Process_PC_Config>
      break;
 8005d3c:	e022      	b.n	8005d84 <ESP_Upkeep+0x900>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d3e:	4a23      	ldr	r2, [pc, #140]	@ (8005dcc <ESP_Upkeep+0x948>)
 8005d40:	4b23      	ldr	r3, [pc, #140]	@ (8005dd0 <ESP_Upkeep+0x94c>)
 8005d42:	0019      	movs	r1, r3
 8005d44:	2001      	movs	r0, #1
 8005d46:	f008 fbbd 	bl	800e4c4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	701a      	strb	r2, [r3, #0]
      break;
 8005d50:	e018      	b.n	8005d84 <ESP_Upkeep+0x900>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d52:	4a20      	ldr	r2, [pc, #128]	@ (8005dd4 <ESP_Upkeep+0x950>)
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <ESP_Upkeep+0x94c>)
 8005d56:	0019      	movs	r1, r3
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f008 fbb3 	bl	800e4c4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	701a      	strb	r2, [r3, #0]
      break;
 8005d64:	e00e      	b.n	8005d84 <ESP_Upkeep+0x900>
      break;
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	e00c      	b.n	8005d84 <ESP_Upkeep+0x900>
      break;
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	e00a      	b.n	8005d84 <ESP_Upkeep+0x900>
        break;
 8005d6e:	46c0      	nop			@ (mov r8, r8)
 8005d70:	e008      	b.n	8005d84 <ESP_Upkeep+0x900>
    break;
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	e006      	b.n	8005d84 <ESP_Upkeep+0x900>
    break;
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	e004      	b.n	8005d84 <ESP_Upkeep+0x900>
      break;
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	e002      	b.n	8005d84 <ESP_Upkeep+0x900>
    break;
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	e000      	b.n	8005d84 <ESP_Upkeep+0x900>
      break;
 8005d82:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <ESP_Upkeep+0x920>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b002      	add	sp, #8
 8005d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d90:	20000a0c 	.word	0x20000a0c
 8005d94:	20000557 	.word	0x20000557
 8005d98:	2000055c 	.word	0x2000055c
 8005d9c:	20000a13 	.word	0x20000a13
 8005da0:	20000555 	.word	0x20000555
 8005da4:	20000030 	.word	0x20000030
 8005da8:	20000558 	.word	0x20000558
 8005dac:	2000055a 	.word	0x2000055a
 8005db0:	08023c4c 	.word	0x08023c4c
 8005db4:	08023be4 	.word	0x08023be4
 8005db8:	20000559 	.word	0x20000559
 8005dbc:	20000028 	.word	0x20000028
 8005dc0:	2000002c 	.word	0x2000002c
 8005dc4:	20000001 	.word	0x20000001
 8005dc8:	2000055b 	.word	0x2000055b
 8005dcc:	08023c64 	.word	0x08023c64
 8005dd0:	0802318c 	.word	0x0802318c
 8005dd4:	08023c78 	.word	0x08023c78

08005dd8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005de0:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <I2CSensors_Init+0x30>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005de6:	4a09      	ldr	r2, [pc, #36]	@ (8005e0c <I2CSensors_Init+0x34>)
 8005de8:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <I2CSensors_Init+0x38>)
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f008 fccd 	bl	800e78c <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005df2:	4a06      	ldr	r2, [pc, #24]	@ (8005e0c <I2CSensors_Init+0x34>)
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <I2CSensors_Init+0x38>)
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f005 fc83 	bl	800b704 <SGP_Init>
}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b002      	add	sp, #8
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	20000b4c 	.word	0x20000b4c
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e15 	.word	0x08005e15

08005e14 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e14:	b5b0      	push	{r4, r5, r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6039      	str	r1, [r7, #0]
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	1dfb      	adds	r3, r7, #7
 8005e20:	1c02      	adds	r2, r0, #0
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	1dbb      	adds	r3, r7, #6
 8005e26:	1c0a      	adds	r2, r1, #0
 8005e28:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e64 <ReadI2C+0x50>)
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	18db      	adds	r3, r3, r3
 8005e36:	b299      	uxth	r1, r3
 8005e38:	1dbb      	adds	r3, r7, #6
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	250f      	movs	r5, #15
 8005e40:	197c      	adds	r4, r7, r5
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	f00a fdf4 	bl	8010a30 <HAL_I2C_Master_Receive_DMA>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e4c:	197b      	adds	r3, r7, r5
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <ReadI2C+0x44>
        return false;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <ReadI2C+0x46>
    }
    return true;
 8005e58:	2301      	movs	r3, #1
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bdb0      	pop	{r4, r5, r7, pc}
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	20000b4c 	.word	0x20000b4c

08005e68 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6039      	str	r1, [r7, #0]
 8005e70:	0011      	movs	r1, r2
 8005e72:	1dfb      	adds	r3, r7, #7
 8005e74:	1c02      	adds	r2, r0, #0
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	1dbb      	adds	r3, r7, #6
 8005e7a:	1c0a      	adds	r2, r1, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <WriteI2C+0x50>)
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	1dfb      	adds	r3, r7, #7
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	18db      	adds	r3, r3, r3
 8005e8a:	b299      	uxth	r1, r3
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	250f      	movs	r5, #15
 8005e94:	197c      	adds	r4, r7, r5
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	f00a fcc4 	bl	8010824 <HAL_I2C_Master_Transmit_DMA>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ea0:	197b      	adds	r3, r7, r5
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <WriteI2C+0x44>
        return false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <WriteI2C+0x46>
    }
    return true;
 8005eac:	2301      	movs	r3, #1
}
 8005eae:	0018      	movs	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b004      	add	sp, #16
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	20000b4c 	.word	0x20000b4c

08005ebc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b0c3      	sub	sp, #268	@ 0x10c
 8005ec0:	af3e      	add	r7, sp, #248	@ 0xf8
 8005ec2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005ec4:	f016 ff9e 	bl	801ce04 <GetUsbRxDataSize>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d971      	bls.n	8005fb6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2123      	movs	r1, #35	@ 0x23
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f01a f994 	bl	8020204 <strchr>
 8005edc:	0003      	movs	r3, r0
 8005ede:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d065      	beq.n	8005fb2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	785a      	ldrb	r2, [r3, #1]
 8005eea:	4b34      	ldr	r3, [pc, #208]	@ (8005fbc <Process_PC_Config+0x100>)
 8005eec:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	789a      	ldrb	r2, [r3, #2]
 8005ef2:	4b32      	ldr	r3, [pc, #200]	@ (8005fbc <Process_PC_Config+0x100>)
 8005ef4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005ef6:	4b31      	ldr	r3, [pc, #196]	@ (8005fbc <Process_PC_Config+0x100>)
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	3305      	adds	r3, #5
 8005efc:	001a      	movs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d351      	bcc.n	8005fa8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	1cd9      	adds	r1, r3, #3
 8005f08:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f10:	0018      	movs	r0, r3
 8005f12:	f01a fa4b 	bl	80203ac <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005f16:	4b29      	ldr	r3, [pc, #164]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	3303      	adds	r3, #3
 8005f1c:	001a      	movs	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	b21a      	sxth	r2, r3
 8005f28:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	18cb      	adds	r3, r1, r3
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	4313      	orrs	r3, r2
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	b299      	uxth	r1, r3
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f3e:	2381      	movs	r3, #129	@ 0x81
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f44:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f46:	2381      	movs	r3, #129	@ 0x81
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	5ad4      	ldrh	r4, [r2, r3]
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	3303      	adds	r3, #3
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0011      	movs	r1, r2
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f975 	bl	8006248 <CRC16_ARC>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	429c      	cmp	r4, r3
 8005f62:	d007      	beq.n	8005f74 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f66:	785a      	ldrb	r2, [r3, #1]
 8005f68:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f000 f919 	bl	80061a4 <Create_Message>
 8005f72:	e016      	b.n	8005fa2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f74:	4c11      	ldr	r4, [pc, #68]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f76:	466b      	mov	r3, sp
 8005f78:	0018      	movs	r0, r3
 8005f7a:	0023      	movs	r3, r4
 8005f7c:	3310      	adds	r3, #16
 8005f7e:	22f4      	movs	r2, #244	@ 0xf4
 8005f80:	0019      	movs	r1, r3
 8005f82:	f01a fa13 	bl	80203ac <memcpy>
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	68a2      	ldr	r2, [r4, #8]
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	f000 f819 	bl	8005fc4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005f92:	4b0a      	ldr	r3, [pc, #40]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f94:	7818      	ldrb	r0, [r3, #0]
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <Process_PC_Config+0x100>)
 8005f98:	785a      	ldrb	r2, [r3, #1]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <Process_PC_Config+0x104>)
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	f000 f901 	bl	80061a4 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005fa2:	f016 ff17 	bl	801cdd4 <ResetUsbRxDataSize>
                return;
 8005fa6:	e006      	b.n	8005fb6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f016 ff34 	bl	801ce18 <GetUsbRxNextChunk>
 8005fb0:	e001      	b.n	8005fb6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005fb2:	f016 ff0f 	bl	801cdd4 <ResetUsbRxDataSize>
        }
    }
}
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b005      	add	sp, #20
 8005fba:	bd90      	pop	{r4, r7, pc}
 8005fbc:	20000b50 	.word	0x20000b50
 8005fc0:	20000b52 	.word	0x20000b52

08005fc4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	b5b0      	push	{r4, r5, r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	2518      	movs	r5, #24
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	6020      	str	r0, [r4, #0]
 8005fd2:	6061      	str	r1, [r4, #4]
 8005fd4:	60a2      	str	r2, [r4, #8]
 8005fd6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005fd8:	197b      	adds	r3, r7, r5
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fde:	d100      	bne.n	8005fe2 <ProcessCmd+0x1e>
 8005fe0:	e09c      	b.n	800611c <ProcessCmd+0x158>
 8005fe2:	dd00      	ble.n	8005fe6 <ProcessCmd+0x22>
 8005fe4:	e0bc      	b.n	8006160 <ProcessCmd+0x19c>
 8005fe6:	2b0c      	cmp	r3, #12
 8005fe8:	dc0a      	bgt.n	8006000 <ProcessCmd+0x3c>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da00      	bge.n	8005ff0 <ProcessCmd+0x2c>
 8005fee:	e0b7      	b.n	8006160 <ProcessCmd+0x19c>
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d900      	bls.n	8005ff6 <ProcessCmd+0x32>
 8005ff4:	e0b4      	b.n	8006160 <ProcessCmd+0x19c>
 8005ff6:	009a      	lsls	r2, r3, #2
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	@ (8006170 <ProcessCmd+0x1ac>)
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	469f      	mov	pc, r3
 8006000:	2bfd      	cmp	r3, #253	@ 0xfd
 8006002:	d100      	bne.n	8006006 <ProcessCmd+0x42>
 8006004:	e084      	b.n	8006110 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8006006:	e0ab      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006008:	2118      	movs	r1, #24
 800600a:	187b      	adds	r3, r7, r1
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	001a      	movs	r2, r3
 8006010:	187b      	adds	r3, r7, r1
 8006012:	1c99      	adds	r1, r3, #2
 8006014:	4857      	ldr	r0, [pc, #348]	@ (8006174 <ProcessCmd+0x1b0>)
 8006016:	230c      	movs	r3, #12
 8006018:	f7fd fb52 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800601c:	e0a0      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800601e:	2118      	movs	r1, #24
 8006020:	187b      	adds	r3, r7, r1
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	001a      	movs	r2, r3
 8006026:	187b      	adds	r3, r7, r1
 8006028:	1c99      	adds	r1, r3, #2
 800602a:	4853      	ldr	r0, [pc, #332]	@ (8006178 <ProcessCmd+0x1b4>)
 800602c:	230c      	movs	r3, #12
 800602e:	f7fd fb47 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006032:	e095      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006034:	2118      	movs	r1, #24
 8006036:	187b      	adds	r3, r7, r1
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	001a      	movs	r2, r3
 800603c:	187b      	adds	r3, r7, r1
 800603e:	1c99      	adds	r1, r3, #2
 8006040:	484e      	ldr	r0, [pc, #312]	@ (800617c <ProcessCmd+0x1b8>)
 8006042:	230c      	movs	r3, #12
 8006044:	f7fd fb3c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006048:	e08a      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800604a:	2118      	movs	r1, #24
 800604c:	187b      	adds	r3, r7, r1
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	001a      	movs	r2, r3
 8006052:	187b      	adds	r3, r7, r1
 8006054:	1c99      	adds	r1, r3, #2
 8006056:	484a      	ldr	r0, [pc, #296]	@ (8006180 <ProcessCmd+0x1bc>)
 8006058:	230c      	movs	r3, #12
 800605a:	f7fd fb31 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800605e:	e07f      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006060:	2118      	movs	r1, #24
 8006062:	187b      	adds	r3, r7, r1
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	001a      	movs	r2, r3
 8006068:	187b      	adds	r3, r7, r1
 800606a:	1c99      	adds	r1, r3, #2
 800606c:	4845      	ldr	r0, [pc, #276]	@ (8006184 <ProcessCmd+0x1c0>)
 800606e:	230c      	movs	r3, #12
 8006070:	f7fd fb26 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006074:	e074      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006076:	2118      	movs	r1, #24
 8006078:	187b      	adds	r3, r7, r1
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	001a      	movs	r2, r3
 800607e:	187b      	adds	r3, r7, r1
 8006080:	1c99      	adds	r1, r3, #2
 8006082:	4841      	ldr	r0, [pc, #260]	@ (8006188 <ProcessCmd+0x1c4>)
 8006084:	230c      	movs	r3, #12
 8006086:	f7fd fb1b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800608a:	e069      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800608c:	2118      	movs	r1, #24
 800608e:	187b      	adds	r3, r7, r1
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	001a      	movs	r2, r3
 8006094:	187b      	adds	r3, r7, r1
 8006096:	1c99      	adds	r1, r3, #2
 8006098:	483c      	ldr	r0, [pc, #240]	@ (800618c <ProcessCmd+0x1c8>)
 800609a:	230c      	movs	r3, #12
 800609c:	f7fd fb10 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060a0:	e05e      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80060a2:	2118      	movs	r1, #24
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	001a      	movs	r2, r3
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	1c99      	adds	r1, r3, #2
 80060ae:	4838      	ldr	r0, [pc, #224]	@ (8006190 <ProcessCmd+0x1cc>)
 80060b0:	231e      	movs	r3, #30
 80060b2:	f7fd fb05 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b6:	e053      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b8:	2118      	movs	r1, #24
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	001a      	movs	r2, r3
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	1c99      	adds	r1, r3, #2
 80060c4:	4833      	ldr	r0, [pc, #204]	@ (8006194 <ProcessCmd+0x1d0>)
 80060c6:	230c      	movs	r3, #12
 80060c8:	f7fd fafa 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060cc:	e048      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060ce:	2118      	movs	r1, #24
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	001a      	movs	r2, r3
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	1c99      	adds	r1, r3, #2
 80060da:	482f      	ldr	r0, [pc, #188]	@ (8006198 <ProcessCmd+0x1d4>)
 80060dc:	230c      	movs	r3, #12
 80060de:	f7fd faef 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060e2:	e03d      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e4:	2118      	movs	r1, #24
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	001a      	movs	r2, r3
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	1c99      	adds	r1, r3, #2
 80060f0:	482a      	ldr	r0, [pc, #168]	@ (800619c <ProcessCmd+0x1d8>)
 80060f2:	230c      	movs	r3, #12
 80060f4:	f7fd fae4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f8:	e032      	b.n	8006160 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060fa:	2118      	movs	r1, #24
 80060fc:	187b      	adds	r3, r7, r1
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	001a      	movs	r2, r3
 8006102:	187b      	adds	r3, r7, r1
 8006104:	1c99      	adds	r1, r3, #2
 8006106:	4826      	ldr	r0, [pc, #152]	@ (80061a0 <ProcessCmd+0x1dc>)
 8006108:	230c      	movs	r3, #12
 800610a:	f7fd fad9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800610e:	e027      	b.n	8006160 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006110:	4b18      	ldr	r3, [pc, #96]	@ (8006174 <ProcessCmd+0x1b0>)
 8006112:	21ba      	movs	r1, #186	@ 0xba
 8006114:	0018      	movs	r0, r3
 8006116:	f7fd fb18 	bl	800374a <ClearEEprom>
        break;
 800611a:	e021      	b.n	8006160 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800611c:	2118      	movs	r1, #24
 800611e:	187b      	adds	r3, r7, r1
 8006120:	789b      	ldrb	r3, [r3, #2]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	187b      	adds	r3, r7, r1
 8006128:	78db      	ldrb	r3, [r3, #3]
 800612a:	b21b      	sxth	r3, r3
 800612c:	4313      	orrs	r3, r2
 800612e:	b21a      	sxth	r2, r3
 8006130:	1dbb      	adds	r3, r7, #6
 8006132:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006134:	1dbb      	adds	r3, r7, #6
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	23c0      	movs	r3, #192	@ 0xc0
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	429a      	cmp	r2, r3
 800613e:	d207      	bcs.n	8006150 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006140:	1dbb      	adds	r3, r7, #6
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	4a0b      	ldr	r2, [pc, #44]	@ (8006174 <ProcessCmd+0x1b0>)
 8006146:	0019      	movs	r1, r3
 8006148:	0010      	movs	r0, r2
 800614a:	f7fd fafe 	bl	800374a <ClearEEprom>
            break;
 800614e:	e006      	b.n	800615e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006150:	23c0      	movs	r3, #192	@ 0xc0
 8006152:	015b      	lsls	r3, r3, #5
 8006154:	4a07      	ldr	r2, [pc, #28]	@ (8006174 <ProcessCmd+0x1b0>)
 8006156:	0019      	movs	r1, r3
 8006158:	0010      	movs	r0, r2
 800615a:	f7fd faf6 	bl	800374a <ClearEEprom>
            break;
 800615e:	46c0      	nop			@ (mov r8, r8)
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bcb0      	pop	{r4, r5, r7}
 8006168:	bc08      	pop	{r3}
 800616a:	b004      	add	sp, #16
 800616c:	4718      	bx	r3
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	08025404 	.word	0x08025404
 8006174:	08080000 	.word	0x08080000
 8006178:	0808000c 	.word	0x0808000c
 800617c:	08080018 	.word	0x08080018
 8006180:	08080024 	.word	0x08080024
 8006184:	08080030 	.word	0x08080030
 8006188:	0808003c 	.word	0x0808003c
 800618c:	08080048 	.word	0x08080048
 8006190:	08080090 	.word	0x08080090
 8006194:	08080078 	.word	0x08080078
 8006198:	0808006c 	.word	0x0808006c
 800619c:	08080060 	.word	0x08080060
 80061a0:	08080054 	.word	0x08080054

080061a4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80061a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6039      	str	r1, [r7, #0]
 80061ac:	0011      	movs	r1, r2
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	1c02      	adds	r2, r0, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	1dbb      	adds	r3, r7, #6
 80061b6:	1c0a      	adds	r2, r1, #0
 80061b8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061ba:	2223      	movs	r2, #35	@ 0x23
 80061bc:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <Create_Message+0x9c>)
 80061be:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006240 <Create_Message+0x9c>)
 80061c2:	1dfa      	adds	r2, r7, #7
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <Create_Message+0x9c>)
 80061ca:	1dba      	adds	r2, r7, #6
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061d0:	1dbb      	adds	r3, r7, #6
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <Create_Message+0xa0>)
 80061d8:	0018      	movs	r0, r3
 80061da:	f01a f8e7 	bl	80203ac <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80061de:	1dbb      	adds	r3, r7, #6
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	250e      	movs	r5, #14
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	3203      	adds	r2, #3
 80061ea:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80061ec:	260c      	movs	r6, #12
 80061ee:	19bc      	adds	r4, r7, r6
 80061f0:	197b      	adds	r3, r7, r5
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	4b12      	ldr	r3, [pc, #72]	@ (8006240 <Create_Message+0x9c>)
 80061f6:	0011      	movs	r1, r2
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 f825 	bl	8006248 <CRC16_ARC>
 80061fe:	0003      	movs	r3, r0
 8006200:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006202:	0030      	movs	r0, r6
 8006204:	183b      	adds	r3, r7, r0
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b29a      	uxth	r2, r3
 800620c:	197b      	adds	r3, r7, r5
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b2d1      	uxtb	r1, r2
 8006212:	4a0b      	ldr	r2, [pc, #44]	@ (8006240 <Create_Message+0x9c>)
 8006214:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006216:	197b      	adds	r3, r7, r5
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	183a      	adds	r2, r7, r0
 800621e:	8812      	ldrh	r2, [r2, #0]
 8006220:	b2d1      	uxtb	r1, r2
 8006222:	4a07      	ldr	r2, [pc, #28]	@ (8006240 <Create_Message+0x9c>)
 8006224:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006226:	197b      	adds	r3, r7, r5
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	3302      	adds	r3, #2
 800622c:	b29a      	uxth	r2, r3
 800622e:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <Create_Message+0x9c>)
 8006230:	0011      	movs	r1, r2
 8006232:	0018      	movs	r0, r3
 8006234:	f016 fd8c 	bl	801cd50 <CDC_Transmit_FS>
}
 8006238:	46c0      	nop			@ (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	b005      	add	sp, #20
 800623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006240:	20000c54 	.word	0x20000c54
 8006244:	20000c57 	.word	0x20000c57

08006248 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	000a      	movs	r2, r1
 8006252:	1cbb      	adds	r3, r7, #2
 8006254:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006256:	2316      	movs	r3, #22
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2200      	movs	r2, #0
 800625c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e02e      	b.n	80062c2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	18d3      	adds	r3, r2, r3
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	0019      	movs	r1, r3
 800626e:	2216      	movs	r2, #22
 8006270:	18bb      	adds	r3, r7, r2
 8006272:	18ba      	adds	r2, r7, r2
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	404a      	eors	r2, r1
 8006278:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e01a      	b.n	80062b6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006280:	2116      	movs	r1, #22
 8006282:	187b      	adds	r3, r7, r1
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d00b      	beq.n	80062a4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 800628c:	187b      	adds	r3, r7, r1
 800628e:	187a      	adds	r2, r7, r1
 8006290:	8812      	ldrh	r2, [r2, #0]
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006296:	187b      	adds	r3, r7, r1
 8006298:	187a      	adds	r2, r7, r1
 800629a:	8812      	ldrh	r2, [r2, #0]
 800629c:	490f      	ldr	r1, [pc, #60]	@ (80062dc <CRC16_ARC+0x94>)
 800629e:	404a      	eors	r2, r1
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e005      	b.n	80062b0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80062a4:	2216      	movs	r2, #22
 80062a6:	18bb      	adds	r3, r7, r2
 80062a8:	18ba      	adds	r2, r7, r2
 80062aa:	8812      	ldrh	r2, [r2, #0]
 80062ac:	0852      	lsrs	r2, r2, #1
 80062ae:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b07      	cmp	r3, #7
 80062ba:	dde1      	ble.n	8006280 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3301      	adds	r3, #1
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	1cbb      	adds	r3, r7, #2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	dbcb      	blt.n	8006264 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062cc:	2316      	movs	r3, #22
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	881b      	ldrh	r3, [r3, #0]
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b006      	add	sp, #24
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	ffffa001 	.word	0xffffa001

080062e0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80062e4:	4b26      	ldr	r3, [pc, #152]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <ReadBatteryVoltage+0xa4>)
 80062e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062ea:	4b25      	ldr	r3, [pc, #148]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062ec:	2280      	movs	r2, #128	@ 0x80
 80062ee:	0152      	lsls	r2, r2, #5
 80062f0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062f2:	4a23      	ldr	r2, [pc, #140]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 80062f4:	4b24      	ldr	r3, [pc, #144]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f008 fffb 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 80062fe:	1e03      	subs	r3, r0, #0
 8006300:	d001      	beq.n	8006306 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006302:	f002 f803 	bl	800830c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006306:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006308:	0018      	movs	r0, r3
 800630a:	f008 fef7 	bl	800f0fc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800630e:	4b1e      	ldr	r3, [pc, #120]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006310:	2101      	movs	r1, #1
 8006312:	0018      	movs	r0, r3
 8006314:	f008 ff46 	bl	800f1a4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006318:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 800631a:	0018      	movs	r0, r3
 800631c:	f008 ffde 	bl	800f2dc <HAL_ADC_GetValue>
 8006320:	0002      	movs	r2, r0
 8006322:	4b1a      	ldr	r3, [pc, #104]	@ (800638c <ReadBatteryVoltage+0xac>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4353      	muls	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	4919      	ldr	r1, [pc, #100]	@ (8006390 <ReadBatteryVoltage+0xb0>)
 800632c:	0018      	movs	r0, r3
 800632e:	f7f9 ff39 	bl	80001a4 <__udivsi3>
 8006332:	0003      	movs	r3, r0
 8006334:	001a      	movs	r2, r3
 8006336:	4b17      	ldr	r3, [pc, #92]	@ (8006394 <ReadBatteryVoltage+0xb4>)
 8006338:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800633a:	4b16      	ldr	r3, [pc, #88]	@ (8006394 <ReadBatteryVoltage+0xb4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	0018      	movs	r0, r3
 8006340:	f7fb f992 	bl	8001668 <__aeabi_ui2f>
 8006344:	1c03      	adds	r3, r0, #0
 8006346:	4914      	ldr	r1, [pc, #80]	@ (8006398 <ReadBatteryVoltage+0xb8>)
 8006348:	1c18      	adds	r0, r3, #0
 800634a:	f7fa fc43 	bl	8000bd4 <__aeabi_fdiv>
 800634e:	1c03      	adds	r3, r0, #0
 8006350:	1c1a      	adds	r2, r3, #0
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <ReadBatteryVoltage+0xbc>)
 8006354:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006356:	4b0a      	ldr	r3, [pc, #40]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 8006358:	4a0a      	ldr	r2, [pc, #40]	@ (8006384 <ReadBatteryVoltage+0xa4>)
 800635a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800635c:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 800635e:	4a10      	ldr	r2, [pc, #64]	@ (80063a0 <ReadBatteryVoltage+0xc0>)
 8006360:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006362:	4a07      	ldr	r2, [pc, #28]	@ (8006380 <ReadBatteryVoltage+0xa0>)
 8006364:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <ReadBatteryVoltage+0xa8>)
 8006366:	0011      	movs	r1, r2
 8006368:	0018      	movs	r0, r3
 800636a:	f008 ffc3 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 800636e:	1e03      	subs	r3, r0, #0
 8006370:	d001      	beq.n	8006376 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006372:	f001 ffcb 	bl	800830c <Error_Handler>
  }
  return trueValue;
 8006376:	4b09      	ldr	r3, [pc, #36]	@ (800639c <ReadBatteryVoltage+0xbc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 }
 800637a:	1c18      	adds	r0, r3, #0
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000d5c 	.word	0x20000d5c
 8006384:	38004000 	.word	0x38004000
 8006388:	20000d98 	.word	0x20000d98
 800638c:	20000034 	.word	0x20000034
 8006390:	00000fff 	.word	0x00000fff
 8006394:	20000d64 	.word	0x20000d64
 8006398:	447a0000 	.word	0x447a0000
 800639c:	20000d68 	.word	0x20000d68
 80063a0:	00001001 	.word	0x00001001

080063a4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063aa:	4a22      	ldr	r2, [pc, #136]	@ (8006434 <ReadSolarVoltage+0x90>)
 80063ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80063ae:	4b20      	ldr	r3, [pc, #128]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063b0:	2280      	movs	r2, #128	@ 0x80
 80063b2:	0152      	lsls	r2, r2, #5
 80063b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006430 <ReadSolarVoltage+0x8c>)
 80063b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063ba:	0011      	movs	r1, r2
 80063bc:	0018      	movs	r0, r3
 80063be:	f008 ff99 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 80063c2:	1e03      	subs	r3, r0, #0
 80063c4:	d001      	beq.n	80063ca <ReadSolarVoltage+0x26>
    Error_Handler();
 80063c6:	f001 ffa1 	bl	800830c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063cc:	0018      	movs	r0, r3
 80063ce:	f008 fe95 	bl	800f0fc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063d2:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063d4:	2101      	movs	r1, #1
 80063d6:	0018      	movs	r0, r3
 80063d8:	f008 fee4 	bl	800f1a4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80063dc:	4b16      	ldr	r3, [pc, #88]	@ (8006438 <ReadSolarVoltage+0x94>)
 80063de:	0018      	movs	r0, r3
 80063e0:	f008 ff7c 	bl	800f2dc <HAL_ADC_GetValue>
 80063e4:	0002      	movs	r2, r0
 80063e6:	4b15      	ldr	r3, [pc, #84]	@ (800643c <ReadSolarVoltage+0x98>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	435a      	muls	r2, r3
 80063ec:	0013      	movs	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	4913      	ldr	r1, [pc, #76]	@ (8006440 <ReadSolarVoltage+0x9c>)
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7f9 fed5 	bl	80001a4 <__udivsi3>
 80063fa:	0003      	movs	r3, r0
 80063fc:	001a      	movs	r2, r3
 80063fe:	4b11      	ldr	r3, [pc, #68]	@ (8006444 <ReadSolarVoltage+0xa0>)
 8006400:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <ReadSolarVoltage+0x8c>)
 8006404:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <ReadSolarVoltage+0x90>)
 8006406:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <ReadSolarVoltage+0x8c>)
 800640a:	4a0f      	ldr	r2, [pc, #60]	@ (8006448 <ReadSolarVoltage+0xa4>)
 800640c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800640e:	4a08      	ldr	r2, [pc, #32]	@ (8006430 <ReadSolarVoltage+0x8c>)
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <ReadSolarVoltage+0x94>)
 8006412:	0011      	movs	r1, r2
 8006414:	0018      	movs	r0, r3
 8006416:	f008 ff6d 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 800641a:	1e03      	subs	r3, r0, #0
 800641c:	d001      	beq.n	8006422 <ReadSolarVoltage+0x7e>
    Error_Handler();
 800641e:	f001 ff75 	bl	800830c <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <ReadSolarVoltage+0xa0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 }
 8006428:	0018      	movs	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	20000d5c 	.word	0x20000d5c
 8006434:	3c008000 	.word	0x3c008000
 8006438:	20000d98 	.word	0x20000d98
 800643c:	20000034 	.word	0x20000034
 8006440:	00000fff 	.word	0x00000fff
 8006444:	20000d6c 	.word	0x20000d6c
 8006448:	00001001 	.word	0x00001001

0800644c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006450:	23a0      	movs	r3, #160	@ 0xa0
 8006452:	05db      	lsls	r3, r3, #23
 8006454:	2180      	movs	r1, #128	@ 0x80
 8006456:	0018      	movs	r0, r3
 8006458:	f009 fee8 	bl	801022c <HAL_GPIO_ReadPin>
 800645c:	0003      	movs	r3, r0
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	4193      	sbcs	r3, r2
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800646a:	b580      	push	{r7, lr}
 800646c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	23a0      	movs	r3, #160	@ 0xa0
 8006474:	05db      	lsls	r3, r3, #23
 8006476:	0011      	movs	r1, r2
 8006478:	0018      	movs	r0, r3
 800647a:	f009 fed7 	bl	801022c <HAL_GPIO_ReadPin>
 800647e:	0003      	movs	r3, r0
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	4193      	sbcs	r3, r2
 8006484:	b2db      	uxtb	r3, r3
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <UserButton_Pressed+0x1c>)
 8006492:	2104      	movs	r1, #4
 8006494:	0018      	movs	r0, r3
 8006496:	f009 fec9 	bl	801022c <HAL_GPIO_ReadPin>
 800649a:	0003      	movs	r3, r0
 800649c:	425a      	negs	r2, r3
 800649e:	4153      	adcs	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	50000c00 	.word	0x50000c00

080064ac <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	46d6      	mov	lr, sl
 80064b0:	464f      	mov	r7, r9
 80064b2:	4646      	mov	r6, r8
 80064b4:	b5c0      	push	{r6, r7, lr}
 80064b6:	b08e      	sub	sp, #56	@ 0x38
 80064b8:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064ba:	4b21      	ldr	r3, [pc, #132]	@ (8006540 <showTime+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064c2:	003a      	movs	r2, r7
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	0011      	movs	r1, r2
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 fa2b 	bl	8006924 <RTC_GetTime>
  UpdateSystemUptime();
 80064ce:	f000 f83f 	bl	8006550 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d2:	003b      	movs	r3, r7
 80064d4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064d6:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d8:	003b      	movs	r3, r7
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064de:	4b19      	ldr	r3, [pc, #100]	@ (8006544 <showTime+0x98>)
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064e4:	003b      	movs	r3, r7
 80064e6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e8:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ee:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f4:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fa:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064fc:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <showTime+0x9c>)
 80064fe:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006500:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006502:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <showTime+0x9c>)
 8006504:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006506:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006508:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <showTime+0x9c>)
 800650a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800650c:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800650e:	4b0e      	ldr	r3, [pc, #56]	@ (8006548 <showTime+0x9c>)
 8006510:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006512:	480e      	ldr	r0, [pc, #56]	@ (800654c <showTime+0xa0>)
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	4643      	mov	r3, r8
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	4663      	mov	r3, ip
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9603      	str	r6, [sp, #12]
 8006520:	9502      	str	r5, [sp, #8]
 8006522:	9401      	str	r4, [sp, #4]
 8006524:	9100      	str	r1, [sp, #0]
 8006526:	4653      	mov	r3, sl
 8006528:	4649      	mov	r1, r9
 800652a:	f019 fcaf 	bl	801fe8c <iprintf>
 800652e:	e000      	b.n	8006532 <showTime+0x86>
    return;
 8006530:	46c0      	nop			@ (mov r8, r8)
}
 8006532:	46bd      	mov	sp, r7
 8006534:	b006      	add	sp, #24
 8006536:	bce0      	pop	{r5, r6, r7}
 8006538:	46ba      	mov	sl, r7
 800653a:	46b1      	mov	r9, r6
 800653c:	46a8      	mov	r8, r5
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	20000d7c 	.word	0x20000d7c
 8006544:	20000054 	.word	0x20000054
 8006548:	20000d70 	.word	0x20000d70
 800654c:	08023cf4 	.word	0x08023cf4

08006550 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006556:	003a      	movs	r2, r7
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	0011      	movs	r1, r2
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f9e1 	bl	8006924 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006562:	1d3a      	adds	r2, r7, #4
 8006564:	003b      	movs	r3, r7
 8006566:	0011      	movs	r1, r2
 8006568:	0018      	movs	r0, r3
 800656a:	f000 fba5 	bl	8006cb8 <makeTime>
 800656e:	0002      	movs	r2, r0
 8006570:	4b1e      	ldr	r3, [pc, #120]	@ (80065ec <UpdateSystemUptime+0x9c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	213c      	movs	r1, #60	@ 0x3c
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fe95 	bl	80002b0 <__aeabi_uidivmod>
 8006586:	000b      	movs	r3, r1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b19      	ldr	r3, [pc, #100]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 800658c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	213c      	movs	r1, #60	@ 0x3c
 8006592:	0018      	movs	r0, r3
 8006594:	f7f9 fe06 	bl	80001a4 <__udivsi3>
 8006598:	0003      	movs	r3, r0
 800659a:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	213c      	movs	r1, #60	@ 0x3c
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7f9 fe85 	bl	80002b0 <__aeabi_uidivmod>
 80065a6:	000b      	movs	r3, r1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065ac:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	213c      	movs	r1, #60	@ 0x3c
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fdf6 	bl	80001a4 <__udivsi3>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2118      	movs	r1, #24
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7f9 fe75 	bl	80002b0 <__aeabi_uidivmod>
 80065c6:	000b      	movs	r3, r1
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065cc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2118      	movs	r1, #24
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7f9 fde6 	bl	80001a4 <__udivsi3>
 80065d8:	0003      	movs	r3, r0
 80065da:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b03      	ldr	r3, [pc, #12]	@ (80065f0 <UpdateSystemUptime+0xa0>)
 80065e2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80065e4:	46c0      	nop			@ (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b008      	add	sp, #32
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000d7c 	.word	0x20000d7c
 80065f0:	20000d70 	.word	0x20000d70

080065f4 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	0008      	movs	r0, r1
 80065fe:	0011      	movs	r1, r2
 8006600:	1cfb      	adds	r3, r7, #3
 8006602:	1c02      	adds	r2, r0, #0
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	1cbb      	adds	r3, r7, #2
 8006608:	1c0a      	adds	r2, r1, #0
 800660a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 800660c:	230e      	movs	r3, #14
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006614:	230f      	movs	r3, #15
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	1cfa      	adds	r2, r7, #3
 800661a:	7812      	ldrb	r2, [r2, #0]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e015      	b.n	800664c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006620:	200f      	movs	r0, #15
 8006622:	183b      	adds	r3, r7, r0
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	18d2      	adds	r2, r2, r3
 800662a:	240e      	movs	r4, #14
 800662c:	193b      	adds	r3, r7, r4
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	7811      	ldrb	r1, [r2, #0]
 8006632:	2208      	movs	r2, #8
 8006634:	18ba      	adds	r2, r7, r2
 8006636:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006638:	193b      	adds	r3, r7, r4
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	193b      	adds	r3, r7, r4
 800663e:	3201      	adds	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006642:	183b      	adds	r3, r7, r0
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	183b      	adds	r3, r7, r0
 8006648:	3201      	adds	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	200f      	movs	r0, #15
 800664e:	183a      	adds	r2, r7, r0
 8006650:	1cbb      	adds	r3, r7, #2
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d9e2      	bls.n	8006620 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800665a:	230e      	movs	r3, #14
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	18ba      	adds	r2, r7, r2
 8006664:	2100      	movs	r1, #0
 8006666:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006668:	1cfb      	adds	r3, r7, #3
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b13      	cmp	r3, #19
 800666e:	d849      	bhi.n	8006704 <aBuff2int+0x110>
    if (start == 17) { //month
 8006670:	1cfb      	adds	r3, r7, #3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b11      	cmp	r3, #17
 8006676:	d122      	bne.n	80066be <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006678:	183b      	adds	r3, r7, r0
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e018      	b.n	80066b2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006680:	240f      	movs	r4, #15
 8006682:	193b      	adds	r3, r7, r4
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	4b25      	ldr	r3, [pc, #148]	@ (800671c <aBuff2int+0x128>)
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	58d2      	ldr	r2, [r2, r3]
 800668c:	2308      	movs	r3, #8
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	0011      	movs	r1, r2
 8006692:	0018      	movs	r0, r3
 8006694:	f7f9 fd60 	bl	8000158 <strcmp>
 8006698:	1e03      	subs	r3, r0, #0
 800669a:	d104      	bne.n	80066a6 <aBuff2int+0xb2>
          return i+1;
 800669c:	193b      	adds	r3, r7, r4
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e035      	b.n	8006712 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80066a6:	210f      	movs	r1, #15
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	3201      	adds	r2, #1
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	230f      	movs	r3, #15
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b0b      	cmp	r3, #11
 80066ba:	d9e1      	bls.n	8006680 <aBuff2int+0x8c>
 80066bc:	e022      	b.n	8006704 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066be:	230f      	movs	r3, #15
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e018      	b.n	80066fa <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066c8:	240f      	movs	r4, #15
 80066ca:	193b      	adds	r3, r7, r4
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <aBuff2int+0x12c>)
 80066d0:	0092      	lsls	r2, r2, #2
 80066d2:	58d2      	ldr	r2, [r2, r3]
 80066d4:	2308      	movs	r3, #8
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	0011      	movs	r1, r2
 80066da:	0018      	movs	r0, r3
 80066dc:	f7f9 fd3c 	bl	8000158 <strcmp>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d104      	bne.n	80066ee <aBuff2int+0xfa>
          return i+1;
 80066e4:	193b      	adds	r3, r7, r4
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e011      	b.n	8006712 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80066ee:	210f      	movs	r1, #15
 80066f0:	187b      	adds	r3, r7, r1
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	187b      	adds	r3, r7, r1
 80066f6:	3201      	adds	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	230f      	movs	r3, #15
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b06      	cmp	r3, #6
 8006702:	d9e1      	bls.n	80066c8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006704:	2308      	movs	r3, #8
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	0018      	movs	r0, r3
 800670a:	f017 ffe4 	bl	801e6d6 <atoi>
 800670e:	0003      	movs	r3, r0
 8006710:	b2db      	uxtb	r3, r3
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b005      	add	sp, #20
 8006718:	bd90      	pop	{r4, r7, pc}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	20000054 	.word	0x20000054
 8006720:	20000038 	.word	0x20000038

08006724 <ParseTime>:

void ParseTime(char* buffer) {
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	b08b      	sub	sp, #44	@ 0x2c
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800672c:	2408      	movs	r4, #8
 800672e:	193a      	adds	r2, r7, r4
 8006730:	260c      	movs	r6, #12
 8006732:	19bb      	adds	r3, r7, r6
 8006734:	0011      	movs	r1, r2
 8006736:	0018      	movs	r0, r3
 8006738:	f000 f8f4 	bl	8006924 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2219      	movs	r2, #25
 8006740:	2118      	movs	r1, #24
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff ff56 	bl	80065f4 <aBuff2int>
 8006748:	0003      	movs	r3, r0
 800674a:	001a      	movs	r2, r3
 800674c:	19bb      	adds	r3, r7, r6
 800674e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	221c      	movs	r2, #28
 8006754:	211b      	movs	r1, #27
 8006756:	0018      	movs	r0, r3
 8006758:	f7ff ff4c 	bl	80065f4 <aBuff2int>
 800675c:	0003      	movs	r3, r0
 800675e:	001a      	movs	r2, r3
 8006760:	19bb      	adds	r3, r7, r6
 8006762:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	221f      	movs	r2, #31
 8006768:	211e      	movs	r1, #30
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff ff42 	bl	80065f4 <aBuff2int>
 8006770:	0003      	movs	r3, r0
 8006772:	001a      	movs	r2, r3
 8006774:	19bb      	adds	r3, r7, r6
 8006776:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	@ 0x24
 800677c:	2123      	movs	r1, #35	@ 0x23
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff ff38 	bl	80065f4 <aBuff2int>
 8006784:	0003      	movs	r3, r0
 8006786:	001a      	movs	r2, r3
 8006788:	0025      	movs	r5, r4
 800678a:	197b      	adds	r3, r7, r5
 800678c:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2213      	movs	r2, #19
 8006792:	2111      	movs	r1, #17
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff ff2d 	bl	80065f4 <aBuff2int>
 800679a:	0003      	movs	r3, r0
 800679c:	001a      	movs	r2, r3
 800679e:	197b      	adds	r3, r7, r5
 80067a0:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2216      	movs	r2, #22
 80067a6:	2115      	movs	r1, #21
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff ff23 	bl	80065f4 <aBuff2int>
 80067ae:	0003      	movs	r3, r0
 80067b0:	001a      	movs	r2, r3
 80067b2:	197b      	adds	r3, r7, r5
 80067b4:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	220f      	movs	r2, #15
 80067ba:	210d      	movs	r1, #13
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff ff19 	bl	80065f4 <aBuff2int>
 80067c2:	0003      	movs	r3, r0
 80067c4:	001a      	movs	r2, r3
 80067c6:	197b      	adds	r3, r7, r5
 80067c8:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067ca:	19bb      	adds	r3, r7, r6
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	001c      	movs	r4, r3
 80067d0:	19bb      	adds	r3, r7, r6
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	0018      	movs	r0, r3
 80067d6:	19bb      	adds	r3, r7, r6
 80067d8:	789b      	ldrb	r3, [r3, #2]
 80067da:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <ParseTime+0x128>)
 80067dc:	491c      	ldr	r1, [pc, #112]	@ (8006850 <ParseTime+0x12c>)
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	0023      	movs	r3, r4
 80067e4:	2003      	movs	r0, #3
 80067e6:	f007 fe6d 	bl	800e4c4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80067ea:	197b      	adds	r3, r7, r5
 80067ec:	789b      	ldrb	r3, [r3, #2]
 80067ee:	001c      	movs	r4, r3
 80067f0:	197b      	adds	r3, r7, r5
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	0018      	movs	r0, r3
 80067f6:	197b      	adds	r3, r7, r5
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <ParseTime+0x130>)
 80067fc:	4914      	ldr	r1, [pc, #80]	@ (8006850 <ParseTime+0x12c>)
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	0023      	movs	r3, r4
 8006804:	2003      	movs	r0, #3
 8006806:	f007 fe5d 	bl	800e4c4 <CreateLine>
  RTC_SetTime(&currentTime);
 800680a:	19bb      	adds	r3, r7, r6
 800680c:	0018      	movs	r0, r3
 800680e:	f000 f825 	bl	800685c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006812:	197b      	adds	r3, r7, r5
 8006814:	0018      	movs	r0, r3
 8006816:	f000 f847 	bl	80068a8 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800681a:	197b      	adds	r3, r7, r5
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b02      	cmp	r3, #2
 8006820:	d101      	bne.n	8006826 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006822:	f002 fcd5 	bl	80091d0 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006826:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <ParseTime+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800682e:	230c      	movs	r3, #12
 8006830:	18fa      	adds	r2, r7, r3
 8006832:	2308      	movs	r3, #8
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	0011      	movs	r1, r2
 8006838:	0018      	movs	r0, r3
 800683a:	f000 fa3d 	bl	8006cb8 <makeTime>
 800683e:	0002      	movs	r2, r0
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <ParseTime+0x134>)
 8006842:	601a      	str	r2, [r3, #0]
  }
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b009      	add	sp, #36	@ 0x24
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684c:	08023d4c 	.word	0x08023d4c
 8006850:	08023d84 	.word	0x08023d84
 8006854:	08023d88 	.word	0x08023d88
 8006858:	20000d7c 	.word	0x20000d7c

0800685c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006876:	4b09      	ldr	r3, [pc, #36]	@ (800689c <RTC_SetTime+0x40>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	0018      	movs	r0, r3
 8006880:	f00f fb80 	bl	8015f84 <HAL_RTC_SetTime>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d005      	beq.n	8006894 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8006888:	4a05      	ldr	r2, [pc, #20]	@ (80068a0 <RTC_SetTime+0x44>)
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <RTC_SetTime+0x48>)
 800688c:	0019      	movs	r1, r3
 800688e:	2001      	movs	r0, #1
 8006890:	f007 fe18 	bl	800e4c4 <CreateLine>
    }
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20000d78 	.word	0x20000d78
 80068a0:	08023dbc 	.word	0x08023dbc
 80068a4:	08023dd8 	.word	0x08023dd8

080068a8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80068b0:	4b16      	ldr	r3, [pc, #88]	@ (800690c <RTC_SetDate+0x64>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	0018      	movs	r0, r3
 80068ba:	f00f fc6b 	bl	8016194 <HAL_RTC_SetDate>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d005      	beq.n	80068ce <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80068c2:	4a13      	ldr	r2, [pc, #76]	@ (8006910 <RTC_SetDate+0x68>)
 80068c4:	4b13      	ldr	r3, [pc, #76]	@ (8006914 <RTC_SetDate+0x6c>)
 80068c6:	0019      	movs	r1, r3
 80068c8:	2001      	movs	r0, #1
 80068ca:	f007 fdfb 	bl	800e4c4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068ce:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <RTC_SetDate+0x64>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2101      	movs	r1, #1
 80068d4:	0018      	movs	r0, r3
 80068d6:	f00f ffa3 	bl	8016820 <HAL_RTCEx_BKUPRead>
 80068da:	0003      	movs	r3, r0
 80068dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006918 <RTC_SetDate+0x70>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d010      	beq.n	8006904 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068e2:	4a0e      	ldr	r2, [pc, #56]	@ (800691c <RTC_SetDate+0x74>)
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <RTC_SetDate+0x78>)
 80068e6:	0019      	movs	r1, r3
 80068e8:	2003      	movs	r0, #3
 80068ea:	f007 fdeb 	bl	800e4c4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80068ee:	f00e fac9 	bl	8014e84 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <RTC_SetDate+0x64>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a08      	ldr	r2, [pc, #32]	@ (8006918 <RTC_SetDate+0x70>)
 80068f8:	2101      	movs	r1, #1
 80068fa:	0018      	movs	r0, r3
 80068fc:	f00f ff78 	bl	80167f0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006900:	f00e face 	bl	8014ea0 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006904:	46c0      	nop			@ (mov r8, r8)
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000d78 	.word	0x20000d78
 8006910:	08023ddc 	.word	0x08023ddc
 8006914:	08023dd8 	.word	0x08023dd8
 8006918:	0000bebe 	.word	0x0000bebe
 800691c:	08023df8 	.word	0x08023df8
 8006920:	08023d84 	.word	0x08023d84

08006924 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800692e:	250f      	movs	r5, #15
 8006930:	197b      	adds	r3, r7, r5
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006936:	230e      	movs	r3, #14
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800693e:	260c      	movs	r6, #12
 8006940:	19bc      	adds	r4, r7, r6
 8006942:	f006 fe73 	bl	800d62c <powerCheck>
 8006946:	0003      	movs	r3, r0
 8006948:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800694a:	19bb      	adds	r3, r7, r6
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006952:	197b      	adds	r3, r7, r5
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	197b      	adds	r3, r7, r5
 8006958:	3201      	adds	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800695c:	230d      	movs	r3, #13
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e039      	b.n	80069da <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006966:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <RTC_GetTime+0xd0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	0018      	movs	r0, r3
 8006970:	f00f fbb2 	bl	80160d8 <HAL_RTC_GetTime>
 8006974:	1e03      	subs	r3, r0, #0
 8006976:	d005      	beq.n	8006984 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006978:	4a1f      	ldr	r2, [pc, #124]	@ (80069f8 <RTC_GetTime+0xd4>)
 800697a:	4b20      	ldr	r3, [pc, #128]	@ (80069fc <RTC_GetTime+0xd8>)
 800697c:	0019      	movs	r1, r3
 800697e:	2001      	movs	r0, #1
 8006980:	f007 fda0 	bl	800e4c4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006984:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <RTC_GetTime+0xd0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	0018      	movs	r0, r3
 800698e:	f00f fc95 	bl	80162bc <HAL_RTC_GetDate>
 8006992:	1e03      	subs	r3, r0, #0
 8006994:	d005      	beq.n	80069a2 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006996:	4a1a      	ldr	r2, [pc, #104]	@ (8006a00 <RTC_GetTime+0xdc>)
 8006998:	4b18      	ldr	r3, [pc, #96]	@ (80069fc <RTC_GetTime+0xd8>)
 800699a:	0019      	movs	r1, r3
 800699c:	2001      	movs	r0, #1
 800699e:	f007 fd91 	bl	800e4c4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80069a2:	230c      	movs	r3, #12
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d110      	bne.n	80069ce <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	210e      	movs	r1, #14
 80069b2:	187a      	adds	r2, r7, r1
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d018      	beq.n	80069ec <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069ba:	187b      	adds	r3, r7, r1
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
        t++;
 80069c2:	210f      	movs	r1, #15
 80069c4:	187b      	adds	r3, r7, r1
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069ce:	210d      	movs	r1, #13
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	187b      	adds	r3, r7, r1
 80069d6:	3201      	adds	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	230d      	movs	r3, #13
 80069dc:	18fa      	adds	r2, r7, r3
 80069de:	230f      	movs	r3, #15
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	7812      	ldrb	r2, [r2, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d3bd      	bcc.n	8006966 <RTC_GetTime+0x42>
 80069ea:	e000      	b.n	80069ee <RTC_GetTime+0xca>
      }
      else {
        return;
 80069ec:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b005      	add	sp, #20
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	20000d78 	.word	0x20000d78
 80069f8:	08023e10 	.word	0x08023e10
 80069fc:	08023dd8 	.word	0x08023dd8
 8006a00:	08023e2c 	.word	0x08023e2c

08006a04 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a0a:	003a      	movs	r2, r7
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	0011      	movs	r1, r2
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7ff ff87 	bl	8006924 <RTC_GetTime>
  return currentDate.WeekDay;
 8006a16:	003b      	movs	r3, r7
 8006a18:	781b      	ldrb	r3, [r3, #0]
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b006      	add	sp, #24
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b086      	sub	sp, #24
 8006a26:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a28:	003a      	movs	r2, r7
 8006a2a:	1d3b      	adds	r3, r7, #4
 8006a2c:	0011      	movs	r1, r2
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7ff ff78 	bl	8006924 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a34:	1d3a      	adds	r2, r7, #4
 8006a36:	003b      	movs	r3, r7
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 f93c 	bl	8006cb8 <makeTime>
 8006a40:	0003      	movs	r3, r0
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b006      	add	sp, #24
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b08d      	sub	sp, #52	@ 0x34
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a56:	240c      	movs	r4, #12
 8006a58:	193a      	adds	r2, r7, r4
 8006a5a:	2508      	movs	r5, #8
 8006a5c:	1979      	adds	r1, r7, r5
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 f9f3 	bl	8006e4c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a66:	002a      	movs	r2, r5
 8006a68:	18bb      	adds	r3, r7, r2
 8006a6a:	789b      	ldrb	r3, [r3, #2]
 8006a6c:	001e      	movs	r6, r3
 8006a6e:	18bb      	adds	r3, r7, r2
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	469c      	mov	ip, r3
 8006a74:	18bb      	adds	r3, r7, r2
 8006a76:	78db      	ldrb	r3, [r3, #3]
 8006a78:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a7a:	0021      	movs	r1, r4
 8006a7c:	187b      	adds	r3, r7, r1
 8006a7e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a80:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a82:	187b      	adds	r3, r7, r1
 8006a84:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a86:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a8c:	4906      	ldr	r1, [pc, #24]	@ (8006aa8 <getUTCfromPosixTime+0x5c>)
 8006a8e:	6838      	ldr	r0, [r7, #0]
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	9502      	str	r5, [sp, #8]
 8006a94:	9401      	str	r4, [sp, #4]
 8006a96:	9200      	str	r2, [sp, #0]
 8006a98:	4663      	mov	r3, ip
 8006a9a:	0032      	movs	r2, r6
 8006a9c:	f019 fa66 	bl	801ff6c <siprintf>
}
 8006aa0:	46c0      	nop			@ (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b009      	add	sp, #36	@ 0x24
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	08023e48 	.word	0x08023e48

08006aac <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f00f fdfd 	bl	80166b8 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006abe:	4b0e      	ldr	r3, [pc, #56]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	22ff      	movs	r2, #255	@ 0xff
 8006ac8:	401a      	ands	r2, r3
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	490a      	ldr	r1, [pc, #40]	@ (8006afc <RTC_SetWakeUpTimer+0x50>)
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <RTC_SetWakeUpTimer+0x54>)
 8006ad8:	2280      	movs	r2, #128	@ 0x80
 8006ada:	0352      	lsls	r2, r2, #13
 8006adc:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006ade:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <RTC_SetWakeUpTimer+0x4c>)
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	0019      	movs	r1, r3
 8006aea:	f00f fd0d 	bl	8016508 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b002      	add	sp, #8
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	20000d78 	.word	0x20000d78
 8006afc:	fffffb7f 	.word	0xfffffb7f
 8006b00:	40010400 	.word	0x40010400

08006b04 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006b08:	4a0b      	ldr	r2, [pc, #44]	@ (8006b38 <Enter_Standby_Mode+0x34>)
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <Enter_Standby_Mode+0x38>)
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	2003      	movs	r0, #3
 8006b10:	f007 fcd8 	bl	800e4c4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006b14:	2064      	movs	r0, #100	@ 0x64
 8006b16:	f008 f91f 	bl	800ed58 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <Enter_Standby_Mode+0x3c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f00f fdca 	bl	80166b8 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006b24:	f000 fe14 	bl	8007750 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006b28:	f008 f93a 	bl	800eda0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006b2c:	f00e fa24 	bl	8014f78 <HAL_PWR_EnterSTANDBYMode>
}
 8006b30:	46c0      	nop			@ (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	08023e9c 	.word	0x08023e9c
 8006b3c:	08023d84 	.word	0x08023d84
 8006b40:	20000d78 	.word	0x20000d78

08006b44 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	0002      	movs	r2, r0
 8006b4c:	1dbb      	adds	r3, r7, #6
 8006b4e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b50:	4b46      	ldr	r3, [pc, #280]	@ (8006c6c <Enter_Stop_Mode+0x128>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b58:	f002 fb0e 	bl	8009178 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b5c:	f7ff fbc0 	bl	80062e0 <ReadBatteryVoltage>
 8006b60:	1c03      	adds	r3, r0, #0
 8006b62:	1c18      	adds	r0, r3, #0
 8006b64:	f7fc fc7e 	bl	8003464 <__aeabi_f2d>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	4840      	ldr	r0, [pc, #256]	@ (8006c70 <Enter_Stop_Mode+0x12c>)
 8006b6e:	4941      	ldr	r1, [pc, #260]	@ (8006c74 <Enter_Stop_Mode+0x130>)
 8006b70:	9200      	str	r2, [sp, #0]
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	0002      	movs	r2, r0
 8006b76:	2002      	movs	r0, #2
 8006b78:	f007 fca4 	bl	800e4c4 <CreateLine>
  powerDisplay(powerCheck());
 8006b7c:	f006 fd56 	bl	800d62c <powerCheck>
 8006b80:	0003      	movs	r3, r0
 8006b82:	0018      	movs	r0, r3
 8006b84:	f006 fd6e 	bl	800d664 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006b88:	1dbb      	adds	r3, r7, #6
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c78 <Enter_Stop_Mode+0x134>)
 8006b8e:	493b      	ldr	r1, [pc, #236]	@ (8006c7c <Enter_Stop_Mode+0x138>)
 8006b90:	2003      	movs	r0, #3
 8006b92:	f007 fc97 	bl	800e4c4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006b96:	f7ff ff44 	bl	8006a22 <getPosixTime>
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	1dbb      	adds	r3, r7, #6
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	4a37      	ldr	r2, [pc, #220]	@ (8006c80 <Enter_Stop_Mode+0x13c>)
 8006ba4:	0011      	movs	r1, r2
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7ff ff50 	bl	8006a4c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006bac:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <Enter_Stop_Mode+0x13c>)
 8006bae:	4a35      	ldr	r2, [pc, #212]	@ (8006c84 <Enter_Stop_Mode+0x140>)
 8006bb0:	4930      	ldr	r1, [pc, #192]	@ (8006c74 <Enter_Stop_Mode+0x130>)
 8006bb2:	2002      	movs	r0, #2
 8006bb4:	f007 fc86 	bl	800e4c4 <CreateLine>
  HAL_Delay(100);
 8006bb8:	2064      	movs	r0, #100	@ 0x64
 8006bba:	f008 f8cd 	bl	800ed58 <HAL_Delay>
  HAL_SuspendTick();
 8006bbe:	f008 f8ef 	bl	800eda0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006bc2:	1dbb      	adds	r3, r7, #6
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff ff70 	bl	8006aac <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bcc:	2101      	movs	r1, #1
 8006bce:	2001      	movs	r0, #1
 8006bd0:	f00e f976 	bl	8014ec0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bd4:	f001 fa54 	bl	8008080 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f002 fa5b 	bl	8009098 <sen5x_enable>
 8006be2:	1e03      	subs	r3, r0, #0
 8006be4:	d01c      	beq.n	8006c20 <Enter_Stop_Mode+0xdc>
    showTime();
 8006be6:	f7ff fc61 	bl	80064ac <showTime>
    set_light_on_state();
 8006bea:	f002 ff4d 	bl	8009a88 <set_light_on_state>
    if (!userToggle) {
 8006bee:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <Enter_Stop_Mode+0x144>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	4053      	eors	r3, r2
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <Enter_Stop_Mode+0xdc>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006bfc:	201c      	movs	r0, #28
 8006bfe:	f7ff ff55 	bl	8006aac <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006c02:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <Enter_Stop_Mode+0x134>)
 8006c04:	491d      	ldr	r1, [pc, #116]	@ (8006c7c <Enter_Stop_Mode+0x138>)
 8006c06:	231c      	movs	r3, #28
 8006c08:	2003      	movs	r0, #3
 8006c0a:	f007 fc5b 	bl	800e4c4 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	2001      	movs	r0, #1
 8006c12:	f00e f955 	bl	8014ec0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006c16:	f001 fa33 	bl	8008080 <SystemClock_Config>
      setsen5xReadTimer(0);
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f002 fa1a 	bl	8009054 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c20:	f008 f8cc 	bl	800edbc <HAL_ResumeTick>
  showTime();
 8006c24:	f7ff fc42 	bl	80064ac <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c28:	f001 fec2 	bl	80089b0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c2c:	f004 fd60 	bl	800b6f0 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c30:	2000      	movs	r0, #0
 8006c32:	f002 fa21 	bl	8009078 <setsen5xSamplecounter>
  setESPTimeStamp(2500);
 8006c36:	4b15      	ldr	r3, [pc, #84]	@ (8006c8c <Enter_Stop_Mode+0x148>)
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7fc fdb9 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f004 fd44 	bl	800b6cc <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c44:	2000      	movs	r0, #0
 8006c46:	f007 fe01 	bl	800e84c <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f001 fe9e 	bl	800898c <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <Enter_Stop_Mode+0x14c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c56:	f008 f875 	bl	800ed44 <HAL_GetTick>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <Enter_Stop_Mode+0x150>)
 8006c5e:	189a      	adds	r2, r3, r2
 8006c60:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <Enter_Stop_Mode+0x154>)
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b002      	add	sp, #8
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20001065 	.word	0x20001065
 8006c70:	08023ec0 	.word	0x08023ec0
 8006c74:	08023ed8 	.word	0x08023ed8
 8006c78:	08023edc 	.word	0x08023edc
 8006c7c:	08023d84 	.word	0x08023d84
 8006c80:	20000d80 	.word	0x20000d80
 8006c84:	08023f00 	.word	0x08023f00
 8006c88:	20002002 	.word	0x20002002
 8006c8c:	000009c4 	.word	0x000009c4
 8006c90:	2000055c 	.word	0x2000055c
 8006c94:	000008fc 	.word	0x000008fc
 8006c98:	20000fc8 	.word	0x20000fc8

08006c9c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	@ (8006cb4 <InitClock+0x18>)
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	20000d78 	.word	0x20000d78

08006cb8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	0013      	movs	r3, r2
 8006cca:	025b      	lsls	r3, r3, #9
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	011a      	lsls	r2, r3, #4
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	01d3      	lsls	r3, r2, #7
 8006cdc:	001a      	movs	r2, r3
 8006cde:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e028      	b.n	8006d38 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a53      	ldr	r2, [pc, #332]	@ (8006e38 <makeTime+0x180>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	db21      	blt.n	8006d32 <makeTime+0x7a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a52      	ldr	r2, [pc, #328]	@ (8006e3c <makeTime+0x184>)
 8006cf2:	4694      	mov	ip, r2
 8006cf4:	4463      	add	r3, ip
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d119      	bne.n	8006d32 <makeTime+0x7a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a4e      	ldr	r2, [pc, #312]	@ (8006e3c <makeTime+0x184>)
 8006d02:	4694      	mov	ip, r2
 8006d04:	4463      	add	r3, ip
 8006d06:	2164      	movs	r1, #100	@ 0x64
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7f9 fbbb 	bl	8000484 <__aeabi_idivmod>
 8006d0e:	1e0b      	subs	r3, r1, #0
 8006d10:	d10a      	bne.n	8006d28 <makeTime+0x70>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a49      	ldr	r2, [pc, #292]	@ (8006e3c <makeTime+0x184>)
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	22c8      	movs	r2, #200	@ 0xc8
 8006d1c:	0051      	lsls	r1, r2, #1
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7f9 fbb0 	bl	8000484 <__aeabi_idivmod>
 8006d24:	1e0b      	subs	r3, r1, #0
 8006d26:	d104      	bne.n	8006d32 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a45      	ldr	r2, [pc, #276]	@ (8006e40 <makeTime+0x188>)
 8006d2c:	4694      	mov	ip, r2
 8006d2e:	4463      	add	r3, ip
 8006d30:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	78db      	ldrb	r3, [r3, #3]
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	dbd0      	blt.n	8006ce6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e03c      	b.n	8006dc4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d125      	bne.n	8006d9c <makeTime+0xe4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	4a39      	ldr	r2, [pc, #228]	@ (8006e3c <makeTime+0x184>)
 8006d56:	4694      	mov	ip, r2
 8006d58:	4463      	add	r3, ip
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d11c      	bne.n	8006d9c <makeTime+0xe4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	78db      	ldrb	r3, [r3, #3]
 8006d66:	4a35      	ldr	r2, [pc, #212]	@ (8006e3c <makeTime+0x184>)
 8006d68:	4694      	mov	ip, r2
 8006d6a:	4463      	add	r3, ip
 8006d6c:	2164      	movs	r1, #100	@ 0x64
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7f9 fb88 	bl	8000484 <__aeabi_idivmod>
 8006d74:	1e0b      	subs	r3, r1, #0
 8006d76:	d10b      	bne.n	8006d90 <makeTime+0xd8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e3c <makeTime+0x184>)
 8006d7e:	4694      	mov	ip, r2
 8006d80:	4463      	add	r3, ip
 8006d82:	22c8      	movs	r2, #200	@ 0xc8
 8006d84:	0051      	lsls	r1, r2, #1
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7f9 fb7c 	bl	8000484 <__aeabi_idivmod>
 8006d8c:	1e0b      	subs	r3, r1, #0
 8006d8e:	d105      	bne.n	8006d9c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a2c      	ldr	r2, [pc, #176]	@ (8006e44 <makeTime+0x18c>)
 8006d94:	4694      	mov	ip, r2
 8006d96:	4463      	add	r3, ip
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	e010      	b.n	8006dbe <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4a29      	ldr	r2, [pc, #164]	@ (8006e48 <makeTime+0x190>)
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	001a      	movs	r2, r3
 8006da6:	0013      	movs	r3, r2
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	011a      	lsls	r2, r3, #4
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	0113      	lsls	r3, r2, #4
 8006db2:	1a9b      	subs	r3, r3, r2
 8006db4:	01db      	lsls	r3, r3, #7
 8006db6:	001a      	movs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	001a      	movs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	dbbc      	blt.n	8006d4a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	789b      	ldrb	r3, [r3, #2]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	001a      	movs	r2, r3
 8006dd8:	0013      	movs	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	189b      	adds	r3, r3, r2
 8006dde:	011a      	lsls	r2, r3, #4
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	0113      	lsls	r3, r2, #4
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	01db      	lsls	r3, r3, #7
 8006de8:	001a      	movs	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	189b      	adds	r3, r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	001a      	movs	r2, r3
 8006df6:	0013      	movs	r3, r2
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	011a      	lsls	r2, r3, #4
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	0113      	lsls	r3, r2, #4
 8006e02:	001a      	movs	r2, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	189b      	adds	r3, r3, r2
 8006e08:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	001a      	movs	r2, r3
 8006e10:	0013      	movs	r3, r2
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	1a9b      	subs	r3, r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	001a      	movs	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	789b      	ldrb	r3, [r3, #2]
 8006e24:	001a      	movs	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
}
 8006e2e:	0018      	movs	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b004      	add	sp, #16
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	46c0      	nop			@ (mov r8, r8)
 8006e38:	fffff84f 	.word	0xfffff84f
 8006e3c:	000007b2 	.word	0x000007b2
 8006e40:	00015180 	.word	0x00015180
 8006e44:	00263b80 	.word	0x00263b80
 8006e48:	08025438 	.word	0x08025438

08006e4c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b089      	sub	sp, #36	@ 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	213c      	movs	r1, #60	@ 0x3c
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7f9 fa25 	bl	80002b0 <__aeabi_uidivmod>
 8006e66:	000b      	movs	r3, r1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	213c      	movs	r1, #60	@ 0x3c
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7f9 f996 	bl	80001a4 <__udivsi3>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	213c      	movs	r1, #60	@ 0x3c
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7f9 fa15 	bl	80002b0 <__aeabi_uidivmod>
 8006e86:	000b      	movs	r3, r1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	213c      	movs	r1, #60	@ 0x3c
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7f9 f986 	bl	80001a4 <__udivsi3>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2118      	movs	r1, #24
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7f9 fa05 	bl	80002b0 <__aeabi_uidivmod>
 8006ea6:	000b      	movs	r3, r1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2118      	movs	r1, #24
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f7f9 f976 	bl	80001a4 <__udivsi3>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2107      	movs	r1, #7
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7f9 f9f4 	bl	80002b0 <__aeabi_uidivmod>
 8006ec8:	000b      	movs	r3, r1
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ed4:	231f      	movs	r3, #31
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ee0:	e005      	b.n	8006eee <breakPosixTime+0xa2>
    year++;
 8006ee2:	211f      	movs	r1, #31
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	3201      	adds	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006eee:	241f      	movs	r4, #31
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4a64      	ldr	r2, [pc, #400]	@ (8007088 <breakPosixTime+0x23c>)
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	4463      	add	r3, ip
 8006efa:	001a      	movs	r2, r3
 8006efc:	2303      	movs	r3, #3
 8006efe:	4013      	ands	r3, r2
 8006f00:	d119      	bne.n	8006f36 <breakPosixTime+0xea>
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	4a60      	ldr	r2, [pc, #384]	@ (8007088 <breakPosixTime+0x23c>)
 8006f08:	4694      	mov	ip, r2
 8006f0a:	4463      	add	r3, ip
 8006f0c:	2164      	movs	r1, #100	@ 0x64
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f7f9 fab8 	bl	8000484 <__aeabi_idivmod>
 8006f14:	1e0b      	subs	r3, r1, #0
 8006f16:	d10b      	bne.n	8006f30 <breakPosixTime+0xe4>
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8007088 <breakPosixTime+0x23c>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	22c8      	movs	r2, #200	@ 0xc8
 8006f24:	0051      	lsls	r1, r2, #1
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 faac 	bl	8000484 <__aeabi_idivmod>
 8006f2c:	1e0b      	subs	r3, r1, #0
 8006f2e:	d102      	bne.n	8006f36 <breakPosixTime+0xea>
 8006f30:	23b7      	movs	r3, #183	@ 0xb7
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	e001      	b.n	8006f3a <breakPosixTime+0xee>
 8006f36:	236e      	movs	r3, #110	@ 0x6e
 8006f38:	33ff      	adds	r3, #255	@ 0xff
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	18d3      	adds	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d9cc      	bls.n	8006ee2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	241f      	movs	r4, #31
 8006f4c:	193a      	adds	r2, r7, r4
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a4c      	ldr	r2, [pc, #304]	@ (8007088 <breakPosixTime+0x23c>)
 8006f58:	4694      	mov	ip, r2
 8006f5a:	4463      	add	r3, ip
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	2303      	movs	r3, #3
 8006f60:	4013      	ands	r3, r2
 8006f62:	d119      	bne.n	8006f98 <breakPosixTime+0x14c>
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	4a47      	ldr	r2, [pc, #284]	@ (8007088 <breakPosixTime+0x23c>)
 8006f6a:	4694      	mov	ip, r2
 8006f6c:	4463      	add	r3, ip
 8006f6e:	2164      	movs	r1, #100	@ 0x64
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7f9 fa87 	bl	8000484 <__aeabi_idivmod>
 8006f76:	1e0b      	subs	r3, r1, #0
 8006f78:	d10b      	bne.n	8006f92 <breakPosixTime+0x146>
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4a42      	ldr	r2, [pc, #264]	@ (8007088 <breakPosixTime+0x23c>)
 8006f80:	4694      	mov	ip, r2
 8006f82:	4463      	add	r3, ip
 8006f84:	22c8      	movs	r2, #200	@ 0xc8
 8006f86:	0051      	lsls	r1, r2, #1
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7f9 fa7b 	bl	8000484 <__aeabi_idivmod>
 8006f8e:	1e0b      	subs	r3, r1, #0
 8006f90:	d102      	bne.n	8006f98 <breakPosixTime+0x14c>
 8006f92:	23b7      	movs	r3, #183	@ 0xb7
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	e001      	b.n	8006f9c <breakPosixTime+0x150>
 8006f98:	236e      	movs	r3, #110	@ 0x6e
 8006f9a:	33ff      	adds	r3, #255	@ 0xff
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	61bb      	str	r3, [r7, #24]

  days=0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  month=0;
 8006fae:	211e      	movs	r1, #30
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006fb6:	231d      	movs	r3, #29
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	e048      	b.n	8007058 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fc6:	231e      	movs	r3, #30
 8006fc8:	18fb      	adds	r3, r7, r3
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d12a      	bne.n	8007026 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fd0:	241f      	movs	r4, #31
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <breakPosixTime+0x23c>)
 8006fd8:	4694      	mov	ip, r2
 8006fda:	4463      	add	r3, ip
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2303      	movs	r3, #3
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d11b      	bne.n	800701c <breakPosixTime+0x1d0>
 8006fe4:	193b      	adds	r3, r7, r4
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	@ (8007088 <breakPosixTime+0x23c>)
 8006fea:	4694      	mov	ip, r2
 8006fec:	4463      	add	r3, ip
 8006fee:	2164      	movs	r1, #100	@ 0x64
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7f9 fa47 	bl	8000484 <__aeabi_idivmod>
 8006ff6:	1e0b      	subs	r3, r1, #0
 8006ff8:	d10b      	bne.n	8007012 <breakPosixTime+0x1c6>
 8006ffa:	193b      	adds	r3, r7, r4
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4a22      	ldr	r2, [pc, #136]	@ (8007088 <breakPosixTime+0x23c>)
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	22c8      	movs	r2, #200	@ 0xc8
 8007006:	0051      	lsls	r1, r2, #1
 8007008:	0018      	movs	r0, r3
 800700a:	f7f9 fa3b 	bl	8000484 <__aeabi_idivmod>
 800700e:	1e0b      	subs	r3, r1, #0
 8007010:	d104      	bne.n	800701c <breakPosixTime+0x1d0>
        monthLength=29;
 8007012:	231d      	movs	r3, #29
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	221d      	movs	r2, #29
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e00c      	b.n	8007036 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800701c:	231d      	movs	r3, #29
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	221c      	movs	r2, #28
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e007      	b.n	8007036 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007026:	231e      	movs	r3, #30
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	231d      	movs	r3, #29
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	4916      	ldr	r1, [pc, #88]	@ (800708c <breakPosixTime+0x240>)
 8007032:	5c8a      	ldrb	r2, [r1, r2]
 8007034:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007036:	211d      	movs	r1, #29
 8007038:	187b      	adds	r3, r7, r1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	429a      	cmp	r2, r3
 8007040:	d310      	bcc.n	8007064 <breakPosixTime+0x218>
      time -= monthLength;
 8007042:	187b      	adds	r3, r7, r1
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800704c:	211e      	movs	r1, #30
 800704e:	187b      	adds	r3, r7, r1
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	187b      	adds	r3, r7, r1
 8007054:	3201      	adds	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	231e      	movs	r3, #30
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b0b      	cmp	r3, #11
 8007060:	d9b1      	bls.n	8006fc6 <breakPosixTime+0x17a>
 8007062:	e000      	b.n	8007066 <breakPosixTime+0x21a>
    } else {
        break;
 8007064:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007066:	231e      	movs	r3, #30
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	3301      	adds	r3, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	709a      	strb	r2, [r3, #2]
}
 8007080:	46c0      	nop			@ (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b009      	add	sp, #36	@ 0x24
 8007086:	bd90      	pop	{r4, r7, pc}
 8007088:	000007b2 	.word	0x000007b2
 800708c:	08025438 	.word	0x08025438

08007090 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007096:	003b      	movs	r3, r7
 8007098:	0018      	movs	r0, r3
 800709a:	2308      	movs	r3, #8
 800709c:	001a      	movs	r2, r3
 800709e:	2100      	movs	r1, #0
 80070a0:	f019 f8a8 	bl	80201f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80070a4:	4b30      	ldr	r3, [pc, #192]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070a6:	4a31      	ldr	r2, [pc, #196]	@ (800716c <MX_ADC_Init+0xdc>)
 80070a8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80070aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80070b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070b2:	22c0      	movs	r2, #192	@ 0xc0
 80070b4:	0612      	lsls	r2, r2, #24
 80070b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070be:	4b2a      	ldr	r3, [pc, #168]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070c4:	4b28      	ldr	r3, [pc, #160]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070ca:	4b27      	ldr	r3, [pc, #156]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070d0:	4b25      	ldr	r3, [pc, #148]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070d2:	2220      	movs	r2, #32
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070d8:	4b23      	ldr	r3, [pc, #140]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070da:	2221      	movs	r2, #33	@ 0x21
 80070dc:	2101      	movs	r1, #1
 80070de:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070e0:	4b21      	ldr	r3, [pc, #132]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070e6:	4b20      	ldr	r3, [pc, #128]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070e8:	22c2      	movs	r2, #194	@ 0xc2
 80070ea:	32ff      	adds	r2, #255	@ 0xff
 80070ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80070ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070f0:	222c      	movs	r2, #44	@ 0x2c
 80070f2:	2100      	movs	r1, #0
 80070f4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070f8:	2204      	movs	r2, #4
 80070fa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <MX_ADC_Init+0xd8>)
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007102:	4b19      	ldr	r3, [pc, #100]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007104:	2200      	movs	r2, #0
 8007106:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007108:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <MX_ADC_Init+0xd8>)
 800710a:	2200      	movs	r2, #0
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800710e:	4b16      	ldr	r3, [pc, #88]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007110:	2200      	movs	r2, #0
 8007112:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007114:	4b14      	ldr	r3, [pc, #80]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007116:	0018      	movs	r0, r3
 8007118:	f007 fe7c 	bl	800ee14 <HAL_ADC_Init>
 800711c:	1e03      	subs	r3, r0, #0
 800711e:	d001      	beq.n	8007124 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007120:	f001 f8f4 	bl	800830c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007124:	003b      	movs	r3, r7
 8007126:	4a12      	ldr	r2, [pc, #72]	@ (8007170 <MX_ADC_Init+0xe0>)
 8007128:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800712a:	003b      	movs	r3, r7
 800712c:	2280      	movs	r2, #128	@ 0x80
 800712e:	0152      	lsls	r2, r2, #5
 8007130:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007132:	003a      	movs	r2, r7
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007136:	0011      	movs	r1, r2
 8007138:	0018      	movs	r0, r3
 800713a:	f008 f8db 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 800713e:	1e03      	subs	r3, r0, #0
 8007140:	d001      	beq.n	8007146 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007142:	f001 f8e3 	bl	800830c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007146:	003b      	movs	r3, r7
 8007148:	4a0a      	ldr	r2, [pc, #40]	@ (8007174 <MX_ADC_Init+0xe4>)
 800714a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800714c:	003a      	movs	r2, r7
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <MX_ADC_Init+0xd8>)
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f008 f8ce 	bl	800f2f4 <HAL_ADC_ConfigChannel>
 8007158:	1e03      	subs	r3, r0, #0
 800715a:	d001      	beq.n	8007160 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800715c:	f001 f8d6 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007160:	46c0      	nop			@ (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b002      	add	sp, #8
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000d98 	.word	0x20000d98
 800716c:	40012400 	.word	0x40012400
 8007170:	38004000 	.word	0x38004000
 8007174:	3c008000 	.word	0x3c008000

08007178 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b089      	sub	sp, #36	@ 0x24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007180:	240c      	movs	r4, #12
 8007182:	193b      	adds	r3, r7, r4
 8007184:	0018      	movs	r0, r3
 8007186:	2314      	movs	r3, #20
 8007188:	001a      	movs	r2, r3
 800718a:	2100      	movs	r1, #0
 800718c:	f019 f832 	bl	80201f4 <memset>
  if(adcHandle->Instance==ADC1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <HAL_ADC_MspInit+0x70>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d121      	bne.n	80071de <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800719a:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 800719c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800719e:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	0089      	lsls	r1, r1, #2
 80071a4:	430a      	orrs	r2, r1
 80071a6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071a8:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071ae:	2104      	movs	r1, #4
 80071b0:	430a      	orrs	r2, r1
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071b4:	4b0d      	ldr	r3, [pc, #52]	@ (80071ec <HAL_ADC_MspInit+0x74>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	2204      	movs	r2, #4
 80071ba:	4013      	ands	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071c0:	193b      	adds	r3, r7, r4
 80071c2:	2230      	movs	r2, #48	@ 0x30
 80071c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071c6:	193b      	adds	r3, r7, r4
 80071c8:	2203      	movs	r2, #3
 80071ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071cc:	193b      	adds	r3, r7, r4
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071d2:	193b      	adds	r3, r7, r4
 80071d4:	4a06      	ldr	r2, [pc, #24]	@ (80071f0 <HAL_ADC_MspInit+0x78>)
 80071d6:	0019      	movs	r1, r3
 80071d8:	0010      	movs	r0, r2
 80071da:	f008 fea9 	bl	800ff30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b009      	add	sp, #36	@ 0x24
 80071e4:	bd90      	pop	{r4, r7, pc}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	40012400 	.word	0x40012400
 80071ec:	40021000 	.word	0x40021000
 80071f0:	50000800 	.word	0x50000800

080071f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071fa:	4b10      	ldr	r3, [pc, #64]	@ (800723c <MX_DMA_Init+0x48>)
 80071fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <MX_DMA_Init+0x48>)
 8007200:	2101      	movs	r1, #1
 8007202:	430a      	orrs	r2, r1
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <MX_DMA_Init+0x48>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720a:	2201      	movs	r2, #1
 800720c:	4013      	ands	r3, r2
 800720e:	607b      	str	r3, [r7, #4]
 8007210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	200a      	movs	r0, #10
 8007218:	f008 fa38 	bl	800f68c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800721c:	200a      	movs	r0, #10
 800721e:	f008 fa4a 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007222:	2200      	movs	r2, #0
 8007224:	2103      	movs	r1, #3
 8007226:	200b      	movs	r0, #11
 8007228:	f008 fa30 	bl	800f68c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800722c:	200b      	movs	r0, #11
 800722e:	f008 fa42 	bl	800f6b6 <HAL_NVIC_EnableIRQ>

}
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	b002      	add	sp, #8
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	40021000 	.word	0x40021000

08007240 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007250:	d901      	bls.n	8007256 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007252:	237f      	movs	r3, #127	@ 0x7f
 8007254:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007256:	2017      	movs	r0, #23
 8007258:	183b      	adds	r3, r7, r0
 800725a:	490d      	ldr	r1, [pc, #52]	@ (8007290 <accessLUT10log10+0x50>)
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	188a      	adds	r2, r1, r2
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007264:	0001      	movs	r1, r0
 8007266:	187b      	adds	r3, r7, r1
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2206      	movs	r2, #6
 800726c:	4113      	asrs	r3, r2
 800726e:	001a      	movs	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007274:	187b      	adds	r3, r7, r1
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2106      	movs	r1, #6
 800727e:	408b      	lsls	r3, r1
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b006      	add	sp, #24
 800728c:	bd80      	pop	{r7, pc}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	08025444 	.word	0x08025444

08007294 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007294:	b5b0      	push	{r4, r5, r7, lr}
 8007296:	b090      	sub	sp, #64	@ 0x40
 8007298:	af00      	add	r7, sp, #0
 800729a:	6138      	str	r0, [r7, #16]
 800729c:	6179      	str	r1, [r7, #20]
 800729e:	60fa      	str	r2, [r7, #12]
 80072a0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80072a2:	2308      	movs	r3, #8
 80072a4:	001a      	movs	r2, r3
 80072a6:	3a20      	subs	r2, #32
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	db03      	blt.n	80072b4 <efficient10log10+0x20>
 80072ac:	2101      	movs	r1, #1
 80072ae:	4091      	lsls	r1, r2
 80072b0:	000d      	movs	r5, r1
 80072b2:	e008      	b.n	80072c6 <efficient10log10+0x32>
 80072b4:	2220      	movs	r2, #32
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	2101      	movs	r1, #1
 80072ba:	40d1      	lsrs	r1, r2
 80072bc:	000a      	movs	r2, r1
 80072be:	2100      	movs	r1, #0
 80072c0:	4099      	lsls	r1, r3
 80072c2:	000d      	movs	r5, r1
 80072c4:	4315      	orrs	r5, r2
 80072c6:	2201      	movs	r2, #1
 80072c8:	409a      	lsls	r2, r3
 80072ca:	0014      	movs	r4, r2
 80072cc:	2201      	movs	r2, #1
 80072ce:	4252      	negs	r2, r2
 80072d0:	17d3      	asrs	r3, r2, #31
 80072d2:	1912      	adds	r2, r2, r4
 80072d4:	416b      	adcs	r3, r5
 80072d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072d8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072da:	2336      	movs	r3, #54	@ 0x36
 80072dc:	2208      	movs	r2, #8
 80072de:	189b      	adds	r3, r3, r2
 80072e0:	19db      	adds	r3, r3, r7
 80072e2:	2200      	movs	r2, #0
 80072e4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072e6:	e017      	b.n	8007318 <efficient10log10+0x84>
    {
        P = P >> 1;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	0852      	lsrs	r2, r2, #1
 80072f0:	603a      	str	r2, [r7, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	431a      	orrs	r2, r3
 80072f6:	603a      	str	r2, [r7, #0]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	687c      	ldr	r4, [r7, #4]
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	617c      	str	r4, [r7, #20]
        bShift++;
 8007306:	2136      	movs	r1, #54	@ 0x36
 8007308:	2008      	movs	r0, #8
 800730a:	180b      	adds	r3, r1, r0
 800730c:	19db      	adds	r3, r3, r7
 800730e:	881a      	ldrh	r2, [r3, #0]
 8007310:	180b      	adds	r3, r1, r0
 8007312:	19db      	adds	r3, r3, r7
 8007314:	3201      	adds	r2, #1
 8007316:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	429a      	cmp	r2, r3
 800731e:	d8e3      	bhi.n	80072e8 <efficient10log10+0x54>
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007324:	429a      	cmp	r2, r3
 8007326:	d103      	bne.n	8007330 <efficient10log10+0x9c>
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	429a      	cmp	r2, r3
 800732e:	d8db      	bhi.n	80072e8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	2308      	movs	r3, #8
 8007334:	3b01      	subs	r3, #1
 8007336:	2101      	movs	r1, #1
 8007338:	4099      	lsls	r1, r3
 800733a:	000b      	movs	r3, r1
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007348:	231c      	movs	r3, #28
 800734a:	2408      	movs	r4, #8
 800734c:	191b      	adds	r3, r3, r4
 800734e:	19da      	adds	r2, r3, r7
 8007350:	2320      	movs	r3, #32
 8007352:	191b      	adds	r3, r3, r4
 8007354:	19d9      	adds	r1, r3, r7
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff ff71 	bl	8007240 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800735e:	2215      	movs	r2, #21
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007364:	2036      	movs	r0, #54	@ 0x36
 8007366:	1902      	adds	r2, r0, r4
 8007368:	19d2      	adds	r2, r2, r7
 800736a:	8812      	ldrh	r2, [r2, #0]
 800736c:	2103      	movs	r1, #3
 800736e:	434a      	muls	r2, r1
 8007370:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007372:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007374:	0021      	movs	r1, r4
 8007376:	1843      	adds	r3, r0, r1
 8007378:	19db      	adds	r3, r3, r7
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	4353      	muls	r3, r2
 8007380:	2203      	movs	r2, #3
 8007382:	4113      	asrs	r3, r2
 8007384:	001a      	movs	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800738a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800738c:	2314      	movs	r3, #20
 800738e:	185b      	adds	r3, r3, r1
 8007390:	19da      	adds	r2, r3, r7
 8007392:	2318      	movs	r3, #24
 8007394:	185b      	adds	r3, r3, r1
 8007396:	19db      	adds	r3, r3, r7
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f80a 	bl	80073b4 <correctIntFracNumber>
    integerPart[0] = intPart;
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	601a      	str	r2, [r3, #0]
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b010      	add	sp, #64	@ 0x40
 80073b2:	bdb0      	pop	{r4, r5, r7, pc}

080073b4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80073be:	e00a      	b.n	80073d6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3b0a      	subs	r3, #10
 80073d0:	001a      	movs	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	dcf0      	bgt.n	80073c0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073de:	e00a      	b.n	80073f6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330a      	adds	r3, #10
 80073f0:	001a      	movs	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3309      	adds	r3, #9
 80073fc:	dbf0      	blt.n	80073e0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da0f      	bge.n	8007426 <correctIntFracNumber+0x72>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd0b      	ble.n	8007426 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3b0a      	subs	r3, #10
 800741e:	001a      	movs	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007424:	e012      	b.n	800744c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd0e      	ble.n	800744c <correctIntFracNumber+0x98>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	da0a      	bge.n	800744c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330a      	adds	r3, #10
 8007446:	001a      	movs	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	46c0      	nop			@ (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}

08007454 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b08b      	sub	sp, #44	@ 0x2c
 8007458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800745a:	2414      	movs	r4, #20
 800745c:	193b      	adds	r3, r7, r4
 800745e:	0018      	movs	r0, r3
 8007460:	2314      	movs	r3, #20
 8007462:	001a      	movs	r2, r3
 8007464:	2100      	movs	r1, #0
 8007466:	f018 fec5 	bl	80201f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	4b8a      	ldr	r3, [pc, #552]	@ (8007694 <MX_GPIO_Init+0x240>)
 800746c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746e:	4b89      	ldr	r3, [pc, #548]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007470:	2104      	movs	r1, #4
 8007472:	430a      	orrs	r2, r1
 8007474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007476:	4b87      	ldr	r3, [pc, #540]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	2204      	movs	r2, #4
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007482:	4b84      	ldr	r3, [pc, #528]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4b83      	ldr	r3, [pc, #524]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007488:	2180      	movs	r1, #128	@ 0x80
 800748a:	430a      	orrs	r2, r1
 800748c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800748e:	4b81      	ldr	r3, [pc, #516]	@ (8007694 <MX_GPIO_Init+0x240>)
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	2280      	movs	r2, #128	@ 0x80
 8007494:	4013      	ands	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800749a:	4b7e      	ldr	r3, [pc, #504]	@ (8007694 <MX_GPIO_Init+0x240>)
 800749c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749e:	4b7d      	ldr	r3, [pc, #500]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074a0:	2101      	movs	r1, #1
 80074a2:	430a      	orrs	r2, r1
 80074a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	2201      	movs	r2, #1
 80074ac:	4013      	ands	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074b2:	4b78      	ldr	r3, [pc, #480]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4b77      	ldr	r3, [pc, #476]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074b8:	2102      	movs	r1, #2
 80074ba:	430a      	orrs	r2, r1
 80074bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074be:	4b75      	ldr	r3, [pc, #468]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	2202      	movs	r2, #2
 80074c4:	4013      	ands	r3, r2
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ca:	4b72      	ldr	r3, [pc, #456]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ce:	4b71      	ldr	r3, [pc, #452]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074d0:	2108      	movs	r1, #8
 80074d2:	430a      	orrs	r2, r1
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007694 <MX_GPIO_Init+0x240>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	2208      	movs	r2, #8
 80074dc:	4013      	ands	r3, r2
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007698 <MX_GPIO_Init+0x244>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	2101      	movs	r1, #1
 80074e8:	0018      	movs	r0, r3
 80074ea:	f008 febc 	bl	8010266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80074ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007698 <MX_GPIO_Init+0x244>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	2102      	movs	r1, #2
 80074f4:	0018      	movs	r0, r3
 80074f6:	f008 feb6 	bl	8010266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80074fa:	4968      	ldr	r1, [pc, #416]	@ (800769c <MX_GPIO_Init+0x248>)
 80074fc:	4b68      	ldr	r3, [pc, #416]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80074fe:	2201      	movs	r2, #1
 8007500:	0018      	movs	r0, r3
 8007502:	f008 feb0 	bl	8010266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007506:	2380      	movs	r3, #128	@ 0x80
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4866      	ldr	r0, [pc, #408]	@ (80076a4 <MX_GPIO_Init+0x250>)
 800750c:	2201      	movs	r2, #1
 800750e:	0019      	movs	r1, r3
 8007510:	f008 fea9 	bl	8010266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	015b      	lsls	r3, r3, #5
 8007518:	4862      	ldr	r0, [pc, #392]	@ (80076a4 <MX_GPIO_Init+0x250>)
 800751a:	2200      	movs	r2, #0
 800751c:	0019      	movs	r1, r3
 800751e:	f008 fea2 	bl	8010266 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007522:	193b      	adds	r3, r7, r4
 8007524:	4a60      	ldr	r2, [pc, #384]	@ (80076a8 <MX_GPIO_Init+0x254>)
 8007526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007528:	193b      	adds	r3, r7, r4
 800752a:	2203      	movs	r2, #3
 800752c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	193b      	adds	r3, r7, r4
 8007530:	2200      	movs	r2, #0
 8007532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007534:	193b      	adds	r3, r7, r4
 8007536:	4a5b      	ldr	r2, [pc, #364]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007538:	0019      	movs	r1, r3
 800753a:	0010      	movs	r0, r2
 800753c:	f008 fcf8 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007540:	193b      	adds	r3, r7, r4
 8007542:	2203      	movs	r2, #3
 8007544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007546:	193b      	adds	r3, r7, r4
 8007548:	2201      	movs	r2, #1
 800754a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754c:	193b      	adds	r3, r7, r4
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007552:	193b      	adds	r3, r7, r4
 8007554:	2200      	movs	r2, #0
 8007556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007558:	193b      	adds	r3, r7, r4
 800755a:	4a4f      	ldr	r2, [pc, #316]	@ (8007698 <MX_GPIO_Init+0x244>)
 800755c:	0019      	movs	r1, r3
 800755e:	0010      	movs	r0, r2
 8007560:	f008 fce6 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007564:	193b      	adds	r3, r7, r4
 8007566:	2270      	movs	r2, #112	@ 0x70
 8007568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800756a:	193b      	adds	r3, r7, r4
 800756c:	2203      	movs	r2, #3
 800756e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	193b      	adds	r3, r7, r4
 8007572:	2200      	movs	r2, #0
 8007574:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007576:	193a      	adds	r2, r7, r4
 8007578:	23a0      	movs	r3, #160	@ 0xa0
 800757a:	05db      	lsls	r3, r3, #23
 800757c:	0011      	movs	r1, r2
 800757e:	0018      	movs	r0, r3
 8007580:	f008 fcd6 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007584:	193b      	adds	r3, r7, r4
 8007586:	22c0      	movs	r2, #192	@ 0xc0
 8007588:	0052      	lsls	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2200      	movs	r2, #0
 8007590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007598:	193a      	adds	r2, r7, r4
 800759a:	23a0      	movs	r3, #160	@ 0xa0
 800759c:	05db      	lsls	r3, r3, #23
 800759e:	0011      	movs	r1, r2
 80075a0:	0018      	movs	r0, r3
 80075a2:	f008 fcc5 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80075a6:	193b      	adds	r3, r7, r4
 80075a8:	4a3c      	ldr	r2, [pc, #240]	@ (800769c <MX_GPIO_Init+0x248>)
 80075aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	2201      	movs	r2, #1
 80075b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	2200      	movs	r2, #0
 80075b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b8:	193b      	adds	r3, r7, r4
 80075ba:	2200      	movs	r2, #0
 80075bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075be:	193b      	adds	r3, r7, r4
 80075c0:	4a37      	ldr	r2, [pc, #220]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80075c2:	0019      	movs	r1, r3
 80075c4:	0010      	movs	r0, r2
 80075c6:	f008 fcb3 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075ca:	193b      	adds	r3, r7, r4
 80075cc:	4a37      	ldr	r2, [pc, #220]	@ (80076ac <MX_GPIO_Init+0x258>)
 80075ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	2203      	movs	r2, #3
 80075d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d6:	193b      	adds	r3, r7, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	4a30      	ldr	r2, [pc, #192]	@ (80076a0 <MX_GPIO_Init+0x24c>)
 80075e0:	0019      	movs	r1, r3
 80075e2:	0010      	movs	r0, r2
 80075e4:	f008 fca4 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80075e8:	0021      	movs	r1, r4
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	2280      	movs	r2, #128	@ 0x80
 80075ee:	0092      	lsls	r2, r2, #2
 80075f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075f2:	000c      	movs	r4, r1
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	2200      	movs	r2, #0
 80075f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fa:	193b      	adds	r3, r7, r4
 80075fc:	2200      	movs	r2, #0
 80075fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007600:	193b      	adds	r3, r7, r4
 8007602:	4a28      	ldr	r2, [pc, #160]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007604:	0019      	movs	r1, r3
 8007606:	0010      	movs	r0, r2
 8007608:	f008 fc92 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800760c:	193b      	adds	r3, r7, r4
 800760e:	2280      	movs	r2, #128	@ 0x80
 8007610:	0212      	lsls	r2, r2, #8
 8007612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007614:	193b      	adds	r3, r7, r4
 8007616:	2288      	movs	r2, #136	@ 0x88
 8007618:	0352      	lsls	r2, r2, #13
 800761a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	193b      	adds	r3, r7, r4
 800761e:	2200      	movs	r2, #0
 8007620:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007622:	193a      	adds	r2, r7, r4
 8007624:	23a0      	movs	r3, #160	@ 0xa0
 8007626:	05db      	lsls	r3, r3, #23
 8007628:	0011      	movs	r1, r2
 800762a:	0018      	movs	r0, r3
 800762c:	f008 fc80 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007630:	0021      	movs	r1, r4
 8007632:	187b      	adds	r3, r7, r1
 8007634:	22c0      	movs	r2, #192	@ 0xc0
 8007636:	0152      	lsls	r2, r2, #5
 8007638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800763a:	000c      	movs	r4, r1
 800763c:	193b      	adds	r3, r7, r4
 800763e:	2201      	movs	r2, #1
 8007640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007642:	193b      	adds	r3, r7, r4
 8007644:	2200      	movs	r2, #0
 8007646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007648:	193b      	adds	r3, r7, r4
 800764a:	2200      	movs	r2, #0
 800764c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800764e:	193b      	adds	r3, r7, r4
 8007650:	4a14      	ldr	r2, [pc, #80]	@ (80076a4 <MX_GPIO_Init+0x250>)
 8007652:	0019      	movs	r1, r3
 8007654:	0010      	movs	r0, r2
 8007656:	f008 fc6b 	bl	800ff30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800765a:	0021      	movs	r1, r4
 800765c:	187b      	adds	r3, r7, r1
 800765e:	2204      	movs	r2, #4
 8007660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007662:	187b      	adds	r3, r7, r1
 8007664:	2200      	movs	r2, #0
 8007666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007668:	187b      	adds	r3, r7, r1
 800766a:	2201      	movs	r2, #1
 800766c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800766e:	187b      	adds	r3, r7, r1
 8007670:	4a0f      	ldr	r2, [pc, #60]	@ (80076b0 <MX_GPIO_Init+0x25c>)
 8007672:	0019      	movs	r1, r3
 8007674:	0010      	movs	r0, r2
 8007676:	f008 fc5b 	bl	800ff30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	2007      	movs	r0, #7
 8007680:	f008 f804 	bl	800f68c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007684:	2007      	movs	r0, #7
 8007686:	f008 f816 	bl	800f6b6 <HAL_NVIC_EnableIRQ>

}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	46bd      	mov	sp, r7
 800768e:	b00b      	add	sp, #44	@ 0x2c
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	40021000 	.word	0x40021000
 8007698:	50001c00 	.word	0x50001c00
 800769c:	00000301 	.word	0x00000301
 80076a0:	50000400 	.word	0x50000400
 80076a4:	50000800 	.word	0x50000800
 80076a8:	0000200c 	.word	0x0000200c
 80076ac:	0000403e 	.word	0x0000403e
 80076b0:	50000c00 	.word	0x50000c00

080076b4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2100      	movs	r1, #0
 80076c2:	0018      	movs	r0, r3
 80076c4:	f00f f9aa 	bl	8016a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2108      	movs	r1, #8
 80076cc:	0018      	movs	r0, r3
 80076ce:	f00f f9a5 	bl	8016a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	210c      	movs	r1, #12
 80076d6:	0018      	movs	r0, r3
 80076d8:	f00f f9a0 	bl	8016a1c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	05db      	lsls	r3, r3, #23
 80076e0:	22fa      	movs	r2, #250	@ 0xfa
 80076e2:	0112      	lsls	r2, r2, #4
 80076e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80076e6:	2380      	movs	r3, #128	@ 0x80
 80076e8:	05db      	lsls	r3, r3, #23
 80076ea:	22fa      	movs	r2, #250	@ 0xfa
 80076ec:	0112      	lsls	r2, r2, #4
 80076ee:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80076f0:	2380      	movs	r3, #128	@ 0x80
 80076f2:	05db      	lsls	r3, r3, #23
 80076f4:	22fa      	movs	r2, #250	@ 0xfa
 80076f6:	0112      	lsls	r2, r2, #4
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	05db      	lsls	r3, r3, #23
 80076fe:	22fa      	movs	r2, #250	@ 0xfa
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2100      	movs	r1, #0
 8007708:	0018      	movs	r0, r3
 800770a:	f00f f987 	bl	8016a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2104      	movs	r1, #4
 8007712:	0018      	movs	r0, r3
 8007714:	f00f f982 	bl	8016a1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2108      	movs	r1, #8
 800771c:	0018      	movs	r0, r3
 800771e:	f00f f97d 	bl	8016a1c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007722:	4b0a      	ldr	r3, [pc, #40]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 8007724:	22fa      	movs	r2, #250	@ 0xfa
 8007726:	0112      	lsls	r2, r2, #4
 8007728:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800772a:	4b08      	ldr	r3, [pc, #32]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 800772c:	22fa      	movs	r2, #250	@ 0xfa
 800772e:	0112      	lsls	r2, r2, #4
 8007730:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007732:	4b06      	ldr	r3, [pc, #24]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 8007734:	22fa      	movs	r2, #250	@ 0xfa
 8007736:	0112      	lsls	r2, r2, #4
 8007738:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800773a:	4b04      	ldr	r3, [pc, #16]	@ (800774c <GPIO_InitPWMLEDs+0x98>)
 800773c:	22fa      	movs	r2, #250	@ 0xfa
 800773e:	0112      	lsls	r2, r2, #4
 8007740:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	46bd      	mov	sp, r7
 8007746:	b002      	add	sp, #8
 8007748:	bd80      	pop	{r7, pc}
 800774a:	46c0      	nop			@ (mov r8, r8)
 800774c:	40000400 	.word	0x40000400

08007750 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	0018      	movs	r0, r3
 800775a:	2314      	movs	r3, #20
 800775c:	001a      	movs	r2, r3
 800775e:	2100      	movs	r1, #0
 8007760:	f018 fd48 	bl	80201f4 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007764:	1d3b      	adds	r3, r7, #4
 8007766:	2205      	movs	r2, #5
 8007768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	2203      	movs	r2, #3
 800776e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007776:	1d3a      	adds	r2, r7, #4
 8007778:	23a0      	movs	r3, #160	@ 0xa0
 800777a:	05db      	lsls	r3, r3, #23
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f008 fbd6 	bl	800ff30 <HAL_GPIO_Init>
}
 8007784:	46c0      	nop			@ (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	b006      	add	sp, #24
 800778a:	bd80      	pop	{r7, pc}

0800778c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <MX_I2C1_Init+0x74>)
 8007792:	4a1c      	ldr	r2, [pc, #112]	@ (8007804 <MX_I2C1_Init+0x78>)
 8007794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007796:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <MX_I2C1_Init+0x74>)
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <MX_I2C1_Init+0x7c>)
 800779a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800779c:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <MX_I2C1_Init+0x74>)
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077a2:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80077ae:	4b14      	ldr	r3, [pc, #80]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077b4:	4b12      	ldr	r3, [pc, #72]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077ba:	4b11      	ldr	r3, [pc, #68]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077bc:	2200      	movs	r2, #0
 80077be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077c8:	0018      	movs	r0, r3
 80077ca:	f008 fd85 	bl	80102d8 <HAL_I2C_Init>
 80077ce:	1e03      	subs	r3, r0, #0
 80077d0:	d001      	beq.n	80077d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80077d2:	f000 fd9b 	bl	800830c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077d8:	2100      	movs	r1, #0
 80077da:	0018      	movs	r0, r3
 80077dc:	f00b f956 	bl	8012a8c <HAL_I2CEx_ConfigAnalogFilter>
 80077e0:	1e03      	subs	r3, r0, #0
 80077e2:	d001      	beq.n	80077e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80077e4:	f000 fd92 	bl	800830c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <MX_I2C1_Init+0x74>)
 80077ea:	2100      	movs	r1, #0
 80077ec:	0018      	movs	r0, r3
 80077ee:	f00b f999 	bl	8012b24 <HAL_I2CEx_ConfigDigitalFilter>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d001      	beq.n	80077fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80077f6:	f000 fd89 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000df4 	.word	0x20000df4
 8007804:	40005400 	.word	0x40005400
 8007808:	00503d58 	.word	0x00503d58

0800780c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007810:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007812:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <MX_I2C2_Init+0x78>)
 8007814:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007816:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007818:	4a1b      	ldr	r2, [pc, #108]	@ (8007888 <MX_I2C2_Init+0x7c>)
 800781a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800781c:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <MX_I2C2_Init+0x74>)
 800781e:	2200      	movs	r2, #0
 8007820:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007822:	4b17      	ldr	r3, [pc, #92]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007824:	2201      	movs	r2, #1
 8007826:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <MX_I2C2_Init+0x74>)
 800782a:	2200      	movs	r2, #0
 800782c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800782e:	4b14      	ldr	r3, [pc, #80]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007830:	2200      	movs	r2, #0
 8007832:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007836:	2200      	movs	r2, #0
 8007838:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800783a:	4b11      	ldr	r3, [pc, #68]	@ (8007880 <MX_I2C2_Init+0x74>)
 800783c:	2200      	movs	r2, #0
 800783e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007846:	4b0e      	ldr	r3, [pc, #56]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007848:	0018      	movs	r0, r3
 800784a:	f008 fd45 	bl	80102d8 <HAL_I2C_Init>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d001      	beq.n	8007856 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007852:	f000 fd5b 	bl	800830c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007856:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <MX_I2C2_Init+0x74>)
 8007858:	2100      	movs	r1, #0
 800785a:	0018      	movs	r0, r3
 800785c:	f00b f916 	bl	8012a8c <HAL_I2CEx_ConfigAnalogFilter>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d001      	beq.n	8007868 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007864:	f000 fd52 	bl	800830c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007868:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <MX_I2C2_Init+0x74>)
 800786a:	2100      	movs	r1, #0
 800786c:	0018      	movs	r0, r3
 800786e:	f00b f959 	bl	8012b24 <HAL_I2CEx_ConfigDigitalFilter>
 8007872:	1e03      	subs	r3, r0, #0
 8007874:	d001      	beq.n	800787a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007876:	f000 fd49 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800787a:	46c0      	nop			@ (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000e48 	.word	0x20000e48
 8007884:	40005800 	.word	0x40005800
 8007888:	00503d58 	.word	0x00503d58

0800788c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b08b      	sub	sp, #44	@ 0x2c
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007894:	2414      	movs	r4, #20
 8007896:	193b      	adds	r3, r7, r4
 8007898:	0018      	movs	r0, r3
 800789a:	2314      	movs	r3, #20
 800789c:	001a      	movs	r2, r3
 800789e:	2100      	movs	r1, #0
 80078a0:	f018 fca8 	bl	80201f4 <memset>
  if(i2cHandle->Instance==I2C1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007a20 <HAL_I2C_MspInit+0x194>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d000      	beq.n	80078b0 <HAL_I2C_MspInit+0x24>
 80078ae:	e083      	b.n	80079b8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078b6:	2102      	movs	r1, #2
 80078b8:	430a      	orrs	r2, r1
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078bc:	4b59      	ldr	r3, [pc, #356]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	2202      	movs	r2, #2
 80078c2:	4013      	ands	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078c8:	0021      	movs	r1, r4
 80078ca:	187b      	adds	r3, r7, r1
 80078cc:	22c0      	movs	r2, #192	@ 0xc0
 80078ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	2212      	movs	r2, #18
 80078d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	187b      	adds	r3, r7, r1
 80078d8:	2200      	movs	r2, #0
 80078da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078dc:	187b      	adds	r3, r7, r1
 80078de:	2203      	movs	r2, #3
 80078e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80078e2:	187b      	adds	r3, r7, r1
 80078e4:	2201      	movs	r2, #1
 80078e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e8:	187b      	adds	r3, r7, r1
 80078ea:	4a4f      	ldr	r2, [pc, #316]	@ (8007a28 <HAL_I2C_MspInit+0x19c>)
 80078ec:	0019      	movs	r1, r3
 80078ee:	0010      	movs	r0, r2
 80078f0:	f008 fb1e 	bl	800ff30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80078fa:	2180      	movs	r1, #128	@ 0x80
 80078fc:	0389      	lsls	r1, r1, #14
 80078fe:	430a      	orrs	r2, r1
 8007900:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007902:	4b4a      	ldr	r3, [pc, #296]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007904:	4a4a      	ldr	r2, [pc, #296]	@ (8007a30 <HAL_I2C_MspInit+0x1a4>)
 8007906:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007908:	4b48      	ldr	r3, [pc, #288]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800790a:	2206      	movs	r2, #6
 800790c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800790e:	4b47      	ldr	r3, [pc, #284]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007914:	4b45      	ldr	r3, [pc, #276]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007916:	2200      	movs	r2, #0
 8007918:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800791a:	4b44      	ldr	r3, [pc, #272]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800791c:	2280      	movs	r2, #128	@ 0x80
 800791e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007920:	4b42      	ldr	r3, [pc, #264]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007922:	2200      	movs	r2, #0
 8007924:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007926:	4b41      	ldr	r3, [pc, #260]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007928:	2200      	movs	r2, #0
 800792a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800792c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007932:	4b3e      	ldr	r3, [pc, #248]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007934:	2200      	movs	r2, #0
 8007936:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007938:	4b3c      	ldr	r3, [pc, #240]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800793a:	0018      	movs	r0, r3
 800793c:	f007 fedc 	bl	800f6f8 <HAL_DMA_Init>
 8007940:	1e03      	subs	r3, r0, #0
 8007942:	d001      	beq.n	8007948 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007944:	f000 fce2 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a38      	ldr	r2, [pc, #224]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800794e:	4b37      	ldr	r3, [pc, #220]	@ (8007a2c <HAL_I2C_MspInit+0x1a0>)
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007954:	4b37      	ldr	r3, [pc, #220]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007956:	4a38      	ldr	r2, [pc, #224]	@ (8007a38 <HAL_I2C_MspInit+0x1ac>)
 8007958:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800795a:	4b36      	ldr	r3, [pc, #216]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800795c:	2206      	movs	r2, #6
 800795e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007960:	4b34      	ldr	r3, [pc, #208]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007962:	2210      	movs	r2, #16
 8007964:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007966:	4b33      	ldr	r3, [pc, #204]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007968:	2200      	movs	r2, #0
 800796a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800796c:	4b31      	ldr	r3, [pc, #196]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800796e:	2280      	movs	r2, #128	@ 0x80
 8007970:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007972:	4b30      	ldr	r3, [pc, #192]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007974:	2200      	movs	r2, #0
 8007976:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007978:	4b2e      	ldr	r3, [pc, #184]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800797a:	2200      	movs	r2, #0
 800797c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800797e:	4b2d      	ldr	r3, [pc, #180]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007980:	2200      	movs	r2, #0
 8007982:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007984:	4b2b      	ldr	r3, [pc, #172]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 8007986:	2200      	movs	r2, #0
 8007988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800798a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800798c:	0018      	movs	r0, r3
 800798e:	f007 feb3 	bl	800f6f8 <HAL_DMA_Init>
 8007992:	1e03      	subs	r3, r0, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007996:	f000 fcb9 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a25      	ldr	r2, [pc, #148]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
 80079a0:	4b24      	ldr	r3, [pc, #144]	@ (8007a34 <HAL_I2C_MspInit+0x1a8>)
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80079a6:	2200      	movs	r2, #0
 80079a8:	2100      	movs	r1, #0
 80079aa:	2017      	movs	r0, #23
 80079ac:	f007 fe6e 	bl	800f68c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80079b0:	2017      	movs	r0, #23
 80079b2:	f007 fe80 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80079b6:	e02e      	b.n	8007a16 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a3c <HAL_I2C_MspInit+0x1b0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d129      	bne.n	8007a16 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079c2:	4b18      	ldr	r3, [pc, #96]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4b17      	ldr	r3, [pc, #92]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079c8:	2102      	movs	r1, #2
 80079ca:	430a      	orrs	r2, r1
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	2202      	movs	r2, #2
 80079d4:	4013      	ands	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80079da:	2114      	movs	r1, #20
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	22c0      	movs	r2, #192	@ 0xc0
 80079e0:	0112      	lsls	r2, r2, #4
 80079e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80079e4:	187b      	adds	r3, r7, r1
 80079e6:	2212      	movs	r2, #18
 80079e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ea:	187b      	adds	r3, r7, r1
 80079ec:	2200      	movs	r2, #0
 80079ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079f0:	187b      	adds	r3, r7, r1
 80079f2:	2203      	movs	r2, #3
 80079f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80079f6:	187b      	adds	r3, r7, r1
 80079f8:	2206      	movs	r2, #6
 80079fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079fc:	187b      	adds	r3, r7, r1
 80079fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007a28 <HAL_I2C_MspInit+0x19c>)
 8007a00:	0019      	movs	r1, r3
 8007a02:	0010      	movs	r0, r2
 8007a04:	f008 fa94 	bl	800ff30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 8007a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0c:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_I2C_MspInit+0x198>)
 8007a0e:	2180      	movs	r1, #128	@ 0x80
 8007a10:	03c9      	lsls	r1, r1, #15
 8007a12:	430a      	orrs	r2, r1
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b00b      	add	sp, #44	@ 0x2c
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	40005400 	.word	0x40005400
 8007a24:	40021000 	.word	0x40021000
 8007a28:	50000400 	.word	0x50000400
 8007a2c:	20000e9c 	.word	0x20000e9c
 8007a30:	40020030 	.word	0x40020030
 8007a34:	20000ee4 	.word	0x20000ee4
 8007a38:	4002001c 	.word	0x4002001c
 8007a3c:	40005800 	.word	0x40005800

08007a40 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007a44:	4b10      	ldr	r3, [pc, #64]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a46:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <MX_I2S2_Init+0x4c>)
 8007a48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a4c:	22c0      	movs	r2, #192	@ 0xc0
 8007a4e:	0092      	lsls	r2, r2, #2
 8007a50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007a58:	4b0b      	ldr	r3, [pc, #44]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a64:	4b08      	ldr	r3, [pc, #32]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a66:	22fa      	movs	r2, #250	@ 0xfa
 8007a68:	0192      	lsls	r2, r2, #6
 8007a6a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a72:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <MX_I2S2_Init+0x48>)
 8007a74:	0018      	movs	r0, r3
 8007a76:	f00b f8a1 	bl	8012bbc <HAL_I2S_Init>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d001      	beq.n	8007a82 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a7e:	f000 fc45 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000f2c 	.word	0x20000f2c
 8007a8c:	40003800 	.word	0x40003800

08007a90 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b089      	sub	sp, #36	@ 0x24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a98:	240c      	movs	r4, #12
 8007a9a:	193b      	adds	r3, r7, r4
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	2314      	movs	r3, #20
 8007aa0:	001a      	movs	r2, r3
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f018 fba6 	bl	80201f4 <memset>
  if(i2sHandle->Instance==SPI2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2d      	ldr	r2, [pc, #180]	@ (8007b64 <HAL_I2S_MspInit+0xd4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d154      	bne.n	8007b5c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ab8:	2180      	movs	r1, #128	@ 0x80
 8007aba:	01c9      	lsls	r1, r1, #7
 8007abc:	430a      	orrs	r2, r1
 8007abe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac0:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac4:	4b28      	ldr	r3, [pc, #160]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007acc:	4b26      	ldr	r3, [pc, #152]	@ (8007b68 <HAL_I2S_MspInit+0xd8>)
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007ad8:	193b      	adds	r3, r7, r4
 8007ada:	22b0      	movs	r2, #176	@ 0xb0
 8007adc:	0212      	lsls	r2, r2, #8
 8007ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae0:	0021      	movs	r1, r4
 8007ae2:	187b      	adds	r3, r7, r1
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae8:	187b      	adds	r3, r7, r1
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aee:	187b      	adds	r3, r7, r1
 8007af0:	2200      	movs	r2, #0
 8007af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <HAL_I2S_MspInit+0xdc>)
 8007afe:	0019      	movs	r1, r3
 8007b00:	0010      	movs	r0, r2
 8007b02:	f008 fa15 	bl	800ff30 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b08:	4a1a      	ldr	r2, [pc, #104]	@ (8007b74 <HAL_I2S_MspInit+0xe4>)
 8007b0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007b0c:	4b18      	ldr	r3, [pc, #96]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b0e:	2202      	movs	r2, #2
 8007b10:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b12:	4b17      	ldr	r3, [pc, #92]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b18:	4b15      	ldr	r3, [pc, #84]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b20:	2280      	movs	r2, #128	@ 0x80
 8007b22:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007b24:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b26:	2280      	movs	r2, #128	@ 0x80
 8007b28:	0052      	lsls	r2, r2, #1
 8007b2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b2e:	2280      	movs	r2, #128	@ 0x80
 8007b30:	00d2      	lsls	r2, r2, #3
 8007b32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007b34:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b36:	2220      	movs	r2, #32
 8007b38:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b42:	0018      	movs	r0, r3
 8007b44:	f007 fdd8 	bl	800f6f8 <HAL_DMA_Init>
 8007b48:	1e03      	subs	r3, r0, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007b4c:	f000 fbde 	bl	800830c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a07      	ldr	r2, [pc, #28]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b56:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <HAL_I2S_MspInit+0xe0>)
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b5c:	46c0      	nop			@ (mov r8, r8)
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b009      	add	sp, #36	@ 0x24
 8007b62:	bd90      	pop	{r4, r7, pc}
 8007b64:	40003800 	.word	0x40003800
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	50000400 	.word	0x50000400
 8007b70:	20000f68 	.word	0x20000f68
 8007b74:	40020044 	.word	0x40020044

08007b78 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  testDone = true;
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf8 <SetTestDone+0x80>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007b82:	23fa      	movs	r3, #250	@ 0xfa
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	0018      	movs	r0, r3
 8007b88:	f007 f8e6 	bl	800ed58 <HAL_Delay>
  SetDBLED(false, false, true);
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2100      	movs	r1, #0
 8007b90:	2000      	movs	r0, #0
 8007b92:	f005 fb77 	bl	800d284 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007b96:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <SetTestDone+0x84>)
 8007b98:	23fa      	movs	r3, #250	@ 0xfa
 8007b9a:	0119      	lsls	r1, r3, #4
 8007b9c:	23fa      	movs	r3, #250	@ 0xfa
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f005 fb3b 	bl	800d21c <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007ba6:	4a15      	ldr	r2, [pc, #84]	@ (8007bfc <SetTestDone+0x84>)
 8007ba8:	23fa      	movs	r3, #250	@ 0xfa
 8007baa:	0119      	lsls	r1, r3, #4
 8007bac:	23fa      	movs	r3, #250	@ 0xfa
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f005 fbb1 	bl	800d318 <SetVocLED>
  HAL_Delay(500);
 8007bb6:	23fa      	movs	r3, #250	@ 0xfa
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f007 f8cc 	bl	800ed58 <HAL_Delay>
  SetDBLED(false, false, false);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f005 fb5d 	bl	800d284 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007bca:	23fa      	movs	r3, #250	@ 0xfa
 8007bcc:	011a      	lsls	r2, r3, #4
 8007bce:	23fa      	movs	r3, #250	@ 0xfa
 8007bd0:	0119      	lsls	r1, r3, #4
 8007bd2:	23fa      	movs	r3, #250	@ 0xfa
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f005 fb20 	bl	800d21c <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007bdc:	23fa      	movs	r3, #250	@ 0xfa
 8007bde:	011a      	lsls	r2, r3, #4
 8007be0:	23fa      	movs	r3, #250	@ 0xfa
 8007be2:	0119      	lsls	r1, r3, #4
 8007be4:	23fa      	movs	r3, #250	@ 0xfa
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	0018      	movs	r0, r3
 8007bea:	f005 fb95 	bl	800d318 <SetVocLED>
  InitDone();
 8007bee:	f005 fa69 	bl	800d0c4 <InitDone>
}
 8007bf2:	46c0      	nop			@ (mov r8, r8)
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000fb0 	.word	0x20000fb0
 8007bfc:	00000bb8 	.word	0x00000bb8

08007c00 <FlashLEDs>:

void FlashLEDs(){
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007c06:	1dfb      	adds	r3, r7, #7
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
 8007c0c:	e021      	b.n	8007c52 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007c0e:	2201      	movs	r2, #1
 8007c10:	2101      	movs	r1, #1
 8007c12:	2001      	movs	r0, #1
 8007c14:	f005 fb36 	bl	800d284 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007c18:	4a12      	ldr	r2, [pc, #72]	@ (8007c64 <FlashLEDs+0x64>)
 8007c1a:	23fa      	movs	r3, #250	@ 0xfa
 8007c1c:	0119      	lsls	r1, r3, #4
 8007c1e:	23fa      	movs	r3, #250	@ 0xfa
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	0018      	movs	r0, r3
 8007c24:	f005 fafa 	bl	800d21c <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007c28:	4a0e      	ldr	r2, [pc, #56]	@ (8007c64 <FlashLEDs+0x64>)
 8007c2a:	23fa      	movs	r3, #250	@ 0xfa
 8007c2c:	0119      	lsls	r1, r3, #4
 8007c2e:	23fa      	movs	r3, #250	@ 0xfa
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	0018      	movs	r0, r3
 8007c34:	f005 fb70 	bl	800d318 <SetVocLED>
    HAL_Delay(250);
 8007c38:	20fa      	movs	r0, #250	@ 0xfa
 8007c3a:	f007 f88d 	bl	800ed58 <HAL_Delay>
    SetLEDsOff();
 8007c3e:	f005 fcab 	bl	800d598 <SetLEDsOff>
    HAL_Delay(250);
 8007c42:	20fa      	movs	r0, #250	@ 0xfa
 8007c44:	f007 f888 	bl	800ed58 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007c48:	1dfb      	adds	r3, r7, #7
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	1dfb      	adds	r3, r7, #7
 8007c4e:	3201      	adds	r2, #1
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	1dfb      	adds	r3, r7, #7
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d9d9      	bls.n	8007c0e <FlashLEDs+0xe>
  }
}
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b002      	add	sp, #8
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	00000bb8 	.word	0x00000bb8

08007c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c6e:	f007 f803 	bl	800ec78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c72:	f000 fa05 	bl	8008080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c76:	f7ff fbed 	bl	8007454 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c7a:	f7ff fabb 	bl	80071f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8007c7e:	f7ff fd85 	bl	800778c <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c82:	f7ff fedd 	bl	8007a40 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007c86:	f006 fa2b 	bl	800e0e0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007c8a:	f7ff fdbf 	bl	800780c <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c8e:	f006 f81f 	bl	800dcd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c92:	f006 f891 	bl	800ddb8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007c96:	f006 fa57 	bl	800e148 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007c9a:	f7ff f9f9 	bl	8007090 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007c9e:	f014 ffb7 	bl	801cc10 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007ca2:	f001 f93f 	bl	8008f24 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ca6:	f006 f9e5 	bl	800e074 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007caa:	f006 f903 	bl	800deb4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007cae:	4acd      	ldr	r2, [pc, #820]	@ (8007fe4 <main+0x37c>)
 8007cb0:	4bcd      	ldr	r3, [pc, #820]	@ (8007fe8 <main+0x380>)
 8007cb2:	0011      	movs	r1, r2
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7ff fcfd 	bl	80076b4 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8007cba:	f006 fc87 	bl	800e5cc <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8007cbe:	f005 fe91 	bl	800d9e4 <Battery_Upkeep>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	4bc9      	ldr	r3, [pc, #804]	@ (8007fec <main+0x384>)
 8007cc8:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8007cca:	4bc8      	ldr	r3, [pc, #800]	@ (8007fec <main+0x384>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d113      	bne.n	8007cfa <main+0x92>
    SetAllREDLED();
 8007cd2:	f005 fc7d 	bl	800d5d0 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007cd6:	f7fe fb03 	bl	80062e0 <ReadBatteryVoltage>
 8007cda:	1c03      	adds	r3, r0, #0
 8007cdc:	1c18      	adds	r0, r3, #0
 8007cde:	f7fb fbc1 	bl	8003464 <__aeabi_f2d>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	48c2      	ldr	r0, [pc, #776]	@ (8007ff0 <main+0x388>)
 8007ce8:	49c2      	ldr	r1, [pc, #776]	@ (8007ff4 <main+0x38c>)
 8007cea:	9200      	str	r2, [sp, #0]
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	0002      	movs	r2, r0
 8007cf0:	2002      	movs	r0, #2
 8007cf2:	f006 fbe7 	bl	800e4c4 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8007cf6:	f7fe ff05 	bl	8006b04 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8007cfa:	f7fe fbc7 	bl	800648c <UserButton_Pressed>
 8007cfe:	1e03      	subs	r3, r0, #0
 8007d00:	d004      	beq.n	8007d0c <main+0xa4>
    EnableESPProg();
 8007d02:	f015 f855 	bl	801cdb0 <EnableESPProg>
    ESP_Programming = true;
 8007d06:	4bbc      	ldr	r3, [pc, #752]	@ (8007ff8 <main+0x390>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007d0c:	2003      	movs	r0, #3
 8007d0e:	f006 fc43 	bl	800e598 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d12:	49ba      	ldr	r1, [pc, #744]	@ (8007ffc <main+0x394>)
 8007d14:	4bba      	ldr	r3, [pc, #744]	@ (8008000 <main+0x398>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f00f fadf 	bl	80172dc <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007d1e:	4bb9      	ldr	r3, [pc, #740]	@ (8008004 <main+0x39c>)
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7fe ffbb 	bl	8006c9c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007d26:	4ab8      	ldr	r2, [pc, #736]	@ (8008008 <main+0x3a0>)
 8007d28:	49b8      	ldr	r1, [pc, #736]	@ (800800c <main+0x3a4>)
 8007d2a:	48b9      	ldr	r0, [pc, #740]	@ (8008010 <main+0x3a8>)
 8007d2c:	230b      	movs	r3, #11
 8007d2e:	f004 fb3f 	bl	800c3b0 <soundInit>
 8007d32:	0003      	movs	r3, r0
 8007d34:	001a      	movs	r2, r3
 8007d36:	2301      	movs	r3, #1
 8007d38:	4053      	eors	r3, r2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007d40:	4ab4      	ldr	r2, [pc, #720]	@ (8008014 <main+0x3ac>)
 8007d42:	4bb5      	ldr	r3, [pc, #724]	@ (8008018 <main+0x3b0>)
 8007d44:	21fb      	movs	r1, #251	@ 0xfb
 8007d46:	0018      	movs	r0, r3
 8007d48:	f006 fc74 	bl	800e634 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007d4c:	4bb3      	ldr	r3, [pc, #716]	@ (800801c <main+0x3b4>)
 8007d4e:	4ab4      	ldr	r2, [pc, #720]	@ (8008020 <main+0x3b8>)
 8007d50:	49ae      	ldr	r1, [pc, #696]	@ (800800c <main+0x3a4>)
 8007d52:	48b4      	ldr	r0, [pc, #720]	@ (8008024 <main+0x3bc>)
 8007d54:	f000 fb9c 	bl	8008490 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8007d58:	f006 fff4 	bl	800ed44 <HAL_GetTick>
 8007d5c:	0003      	movs	r3, r0
 8007d5e:	4ab2      	ldr	r2, [pc, #712]	@ (8008028 <main+0x3c0>)
 8007d60:	189a      	adds	r2, r3, r2
 8007d62:	4bb2      	ldr	r3, [pc, #712]	@ (800802c <main+0x3c4>)
 8007d64:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007d66:	f7fe fb71 	bl	800644c <Check_USB_PowerOn>
 8007d6a:	0003      	movs	r3, r0
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	4193      	sbcs	r3, r2
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2201      	movs	r2, #1
 8007d74:	4053      	eors	r3, r2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	1c1a      	adds	r2, r3, #0
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	4bab      	ldr	r3, [pc, #684]	@ (8008030 <main+0x3c8>)
 8007d82:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007d84:	4bab      	ldr	r3, [pc, #684]	@ (8008034 <main+0x3cc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f006 fb45 	bl	800e418 <TimestampIsReached>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d00e      	beq.n	8007db0 <main+0x148>
      charge = Battery_Upkeep();
 8007d92:	f005 fe27 	bl	800d9e4 <Battery_Upkeep>
 8007d96:	0003      	movs	r3, r0
 8007d98:	001a      	movs	r2, r3
 8007d9a:	4b94      	ldr	r3, [pc, #592]	@ (8007fec <main+0x384>)
 8007d9c:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d9e:	f006 ffd1 	bl	800ed44 <HAL_GetTick>
 8007da2:	0003      	movs	r3, r0
 8007da4:	4aa4      	ldr	r2, [pc, #656]	@ (8008038 <main+0x3d0>)
 8007da6:	189a      	adds	r2, r3, r2
 8007da8:	4ba2      	ldr	r3, [pc, #648]	@ (8008034 <main+0x3cc>)
 8007daa:	601a      	str	r2, [r3, #0]
        showTime();
 8007dac:	f7fe fb7e 	bl	80064ac <showTime>
    }
    configCheck();
 8007db0:	f005 fca0 	bl	800d6f4 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007db4:	4ba1      	ldr	r3, [pc, #644]	@ (800803c <main+0x3d4>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007dba:	4b8c      	ldr	r3, [pc, #560]	@ (8007fec <main+0x384>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d003      	beq.n	8007dca <main+0x162>
 8007dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8007fec <main+0x384>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <main+0x16c>
          FlashLEDs();
 8007dca:	f7ff ff19 	bl	8007c00 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007dce:	4b9c      	ldr	r3, [pc, #624]	@ (8008040 <main+0x3d8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007dd4:	4b85      	ldr	r3, [pc, #532]	@ (8007fec <main+0x384>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <main+0x188>
 8007ddc:	4b99      	ldr	r3, [pc, #612]	@ (8008044 <main+0x3dc>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	d105      	bne.n	8007df0 <main+0x188>
          batteryEmpty = true;
 8007de4:	4b98      	ldr	r3, [pc, #608]	@ (8008048 <main+0x3e0>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007dea:	f7fe fe8b 	bl	8006b04 <Enter_Standby_Mode>
 8007dee:	e002      	b.n	8007df6 <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8007df0:	4b95      	ldr	r3, [pc, #596]	@ (8008048 <main+0x3e0>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007df6:	4b95      	ldr	r3, [pc, #596]	@ (800804c <main+0x3e4>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d100      	bne.n	8007e00 <main+0x198>
 8007dfe:	e0b0      	b.n	8007f62 <main+0x2fa>
 8007e00:	4b7d      	ldr	r3, [pc, #500]	@ (8007ff8 <main+0x390>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2201      	movs	r2, #1
 8007e06:	4053      	eors	r3, r2
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d100      	bne.n	8007e10 <main+0x1a8>
 8007e0e:	e0a8      	b.n	8007f62 <main+0x2fa>
 8007e10:	4b8d      	ldr	r3, [pc, #564]	@ (8008048 <main+0x3e0>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	4053      	eors	r3, r2
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d100      	bne.n	8007e20 <main+0x1b8>
 8007e1e:	e0a0      	b.n	8007f62 <main+0x2fa>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007e20:	4b83      	ldr	r3, [pc, #524]	@ (8008030 <main+0x3c8>)
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	4b8a      	ldr	r3, [pc, #552]	@ (8008050 <main+0x3e8>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d026      	beq.n	8007e7a <main+0x212>
        Info("USB power state change detected");
 8007e2c:	4a89      	ldr	r2, [pc, #548]	@ (8008054 <main+0x3ec>)
 8007e2e:	4b71      	ldr	r3, [pc, #452]	@ (8007ff4 <main+0x38c>)
 8007e30:	0019      	movs	r1, r3
 8007e32:	2002      	movs	r0, #2
 8007e34:	f006 fb46 	bl	800e4c4 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007e38:	f000 fab0 	bl	800839c <IsSGPPresent>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d009      	beq.n	8007e54 <main+0x1ec>
 8007e40:	4b83      	ldr	r3, [pc, #524]	@ (8008050 <main+0x3e8>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	4053      	eors	r3, r2
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <main+0x1ec>
          SetVOCSensorDIS_ENA(true);
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f000 faae 	bl	80083b0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007e54:	4b80      	ldr	r3, [pc, #512]	@ (8008058 <main+0x3f0>)
 8007e56:	791b      	ldrb	r3, [r3, #4]
 8007e58:	2b34      	cmp	r3, #52	@ 0x34
 8007e5a:	d003      	beq.n	8007e64 <main+0x1fc>
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <main+0x3f0>)
 8007e5e:	791b      	ldrb	r3, [r3, #4]
 8007e60:	2b35      	cmp	r3, #53	@ 0x35
 8007e62:	d106      	bne.n	8007e72 <main+0x20a>
 8007e64:	4b7a      	ldr	r3, [pc, #488]	@ (8008050 <main+0x3e8>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <main+0x20a>
          SetVOCSensorDIS_ENA(false);
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f000 fa9f 	bl	80083b0 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007e72:	4b77      	ldr	r3, [pc, #476]	@ (8008050 <main+0x3e8>)
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	4b6e      	ldr	r3, [pc, #440]	@ (8008030 <main+0x3c8>)
 8007e78:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007e7a:	4b78      	ldr	r3, [pc, #480]	@ (800805c <main+0x3f4>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d00d      	beq.n	8007e9e <main+0x236>
 8007e82:	4b76      	ldr	r3, [pc, #472]	@ (800805c <main+0x3f4>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d009      	beq.n	8007e9e <main+0x236>
 8007e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008040 <main+0x3d8>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <main+0x236>
        HIDSstate = HIDS_Upkeep();
 8007e92:	f006 fe3b 	bl	800eb0c <HIDS_Upkeep>
 8007e96:	0003      	movs	r3, r0
 8007e98:	001a      	movs	r2, r3
 8007e9a:	4b71      	ldr	r3, [pc, #452]	@ (8008060 <main+0x3f8>)
 8007e9c:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e9e:	4b70      	ldr	r3, [pc, #448]	@ (8008060 <main+0x3f8>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d00d      	beq.n	8007ec2 <main+0x25a>
 8007ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8008060 <main+0x3f8>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d009      	beq.n	8007ec2 <main+0x25a>
 8007eae:	4b64      	ldr	r3, [pc, #400]	@ (8008040 <main+0x3d8>)
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <main+0x25a>
        SGPstate = SGP_Upkeep();
 8007eb6:	f004 f8e1 	bl	800c07c <SGP_Upkeep>
 8007eba:	0003      	movs	r3, r0
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	4b67      	ldr	r3, [pc, #412]	@ (800805c <main+0x3f4>)
 8007ec0:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8008040 <main+0x3d8>)
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <main+0x26e>
        MICstate = Mic_Upkeep();
 8007eca:	f000 ff17 	bl	8008cfc <Mic_Upkeep>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	001a      	movs	r2, r3
 8007ed2:	4b64      	ldr	r3, [pc, #400]	@ (8008064 <main+0x3fc>)
 8007ed4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007ed6:	4b45      	ldr	r3, [pc, #276]	@ (8007fec <main+0x384>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d803      	bhi.n	8007ee6 <main+0x27e>
 8007ede:	4b57      	ldr	r3, [pc, #348]	@ (800803c <main+0x3d4>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d016      	beq.n	8007f14 <main+0x2ac>
 8007ee6:	4b56      	ldr	r3, [pc, #344]	@ (8008040 <main+0x3d8>)
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d012      	beq.n	8007f14 <main+0x2ac>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007eee:	f001 f8a7 	bl	8009040 <sen5x_Get_sen5x_enable_state>
 8007ef2:	0003      	movs	r3, r0
 8007ef4:	001a      	movs	r2, r3
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4053      	eors	r3, r2
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <main+0x2a6>
 8007f00:	4b53      	ldr	r3, [pc, #332]	@ (8008050 <main+0x3e8>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <main+0x2a6>
          sen5x_enable(0);
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f001 f8c5 	bl	8009098 <sen5x_enable>
        }
        sen5x_statemachine();
 8007f0e:	f001 fdf9 	bl	8009b04 <sen5x_statemachine>
 8007f12:	e020      	b.n	8007f56 <main+0x2ee>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007f14:	4b35      	ldr	r3, [pc, #212]	@ (8007fec <main+0x384>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d81c      	bhi.n	8007f56 <main+0x2ee>
 8007f1c:	4b47      	ldr	r3, [pc, #284]	@ (800803c <main+0x3d4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2201      	movs	r2, #1
 8007f22:	4053      	eors	r3, r2
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <main+0x2ee>
 8007f2a:	4b45      	ldr	r3, [pc, #276]	@ (8008040 <main+0x3d8>)
 8007f2c:	789b      	ldrb	r3, [r3, #2]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d011      	beq.n	8007f56 <main+0x2ee>
        Info("Battery level insufficient for sen5x operation");
 8007f32:	4a4d      	ldr	r2, [pc, #308]	@ (8008068 <main+0x400>)
 8007f34:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff4 <main+0x38c>)
 8007f36:	0019      	movs	r1, r3
 8007f38:	2002      	movs	r0, #2
 8007f3a:	f006 fac3 	bl	800e4c4 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007f3e:	4b40      	ldr	r3, [pc, #256]	@ (8008040 <main+0x3d8>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007f44:	4b49      	ldr	r3, [pc, #292]	@ (800806c <main+0x404>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007f4a:	4b49      	ldr	r3, [pc, #292]	@ (8008070 <main+0x408>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <main+0x2ee>
          sen5x_Power_Off();
 8007f52:	f001 f911 	bl	8009178 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007f56:	f7fd fa95 	bl	8005484 <ESP_Upkeep>
 8007f5a:	0003      	movs	r3, r0
 8007f5c:	001a      	movs	r2, r3
 8007f5e:	4b39      	ldr	r3, [pc, #228]	@ (8008044 <main+0x3dc>)
 8007f60:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007f62:	4b3a      	ldr	r3, [pc, #232]	@ (800804c <main+0x3e4>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2201      	movs	r2, #1
 8007f68:	4053      	eors	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00f      	beq.n	8007f90 <main+0x328>
 8007f70:	4b21      	ldr	r3, [pc, #132]	@ (8007ff8 <main+0x390>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	4053      	eors	r3, r2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <main+0x328>
 8007f7e:	4b32      	ldr	r3, [pc, #200]	@ (8008048 <main+0x3e0>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	4053      	eors	r3, r2
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <main+0x328>
      Device_Test();  // for device with startup time
 8007f8c:	f000 fbc6 	bl	800871c <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f90:	4b2f      	ldr	r3, [pc, #188]	@ (8008050 <main+0x3e8>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2201      	movs	r2, #1
 8007f96:	4053      	eors	r3, r2
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d100      	bne.n	8007fa0 <main+0x338>
 8007f9e:	e6f1      	b.n	8007d84 <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007fa0:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <main+0x40c>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4053      	eors	r3, r2
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d100      	bne.n	8007fb0 <main+0x348>
 8007fae:	e6e9      	b.n	8007d84 <main+0x11c>
 8007fb0:	f000 fc32 	bl	8008818 <AllDevicesReady>
 8007fb4:	1e03      	subs	r3, r0, #0
 8007fb6:	d100      	bne.n	8007fba <main+0x352>
 8007fb8:	e6e4      	b.n	8007d84 <main+0x11c>
 8007fba:	4b2f      	ldr	r3, [pc, #188]	@ (8008078 <main+0x410>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d100      	bne.n	8007fc4 <main+0x35c>
 8007fc2:	e6df      	b.n	8007d84 <main+0x11c>
        EnabledConnectedDevices();
 8007fc4:	f000 fc90 	bl	80088e8 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800807c <main+0x414>)
 8007fca:	789b      	ldrb	r3, [r3, #2]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <main+0x36e>
 8007fd0:	23d7      	movs	r3, #215	@ 0xd7
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	e001      	b.n	8007fda <main+0x372>
 8007fd6:	23dc      	movs	r3, #220	@ 0xdc
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7fe fdb2 	bl	8006b44 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007fe0:	e6d0      	b.n	8007d84 <main+0x11c>
 8007fe2:	46c0      	nop			@ (mov r8, r8)
 8007fe4:	2000205c 	.word	0x2000205c
 8007fe8:	2000201c 	.word	0x2000201c
 8007fec:	20000fcc 	.word	0x20000fcc
 8007ff0:	08023f20 	.word	0x08023f20
 8007ff4:	08023f38 	.word	0x08023f38
 8007ff8:	20000fb1 	.word	0x20000fb1
 8007ffc:	20000fb8 	.word	0x20000fb8
 8008000:	20002194 	.word	0x20002194
 8008004:	20001040 	.word	0x20001040
 8008008:	2000209c 	.word	0x2000209c
 800800c:	20000f2c 	.word	0x20000f2c
 8008010:	20000f68 	.word	0x20000f68
 8008014:	08023f3c 	.word	0x08023f3c
 8008018:	08025514 	.word	0x08025514
 800801c:	2000224c 	.word	0x2000224c
 8008020:	20000d98 	.word	0x20000d98
 8008024:	20000df4 	.word	0x20000df4
 8008028:	000061a8 	.word	0x000061a8
 800802c:	20000fc8 	.word	0x20000fc8
 8008030:	20000fb3 	.word	0x20000fb3
 8008034:	20000088 	.word	0x20000088
 8008038:	0000c350 	.word	0x0000c350
 800803c:	20000084 	.word	0x20000084
 8008040:	20000fd0 	.word	0x20000fd0
 8008044:	20000fb7 	.word	0x20000fb7
 8008048:	20000fb2 	.word	0x20000fb2
 800804c:	20000fb0 	.word	0x20000fb0
 8008050:	20002001 	.word	0x20002001
 8008054:	08023f50 	.word	0x08023f50
 8008058:	20001068 	.word	0x20001068
 800805c:	20000fb4 	.word	0x20000fb4
 8008060:	20000fb5 	.word	0x20000fb5
 8008064:	20000fb6 	.word	0x20000fb6
 8008068:	08023f70 	.word	0x08023f70
 800806c:	20001066 	.word	0x20001066
 8008070:	20001065 	.word	0x20001065
 8008074:	20002002 	.word	0x20002002
 8008078:	2000055c 	.word	0x2000055c
 800807c:	20000fd4 	.word	0x20000fd4

08008080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b09d      	sub	sp, #116	@ 0x74
 8008084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008086:	2438      	movs	r4, #56	@ 0x38
 8008088:	193b      	adds	r3, r7, r4
 800808a:	0018      	movs	r0, r3
 800808c:	2338      	movs	r3, #56	@ 0x38
 800808e:	001a      	movs	r2, r3
 8008090:	2100      	movs	r1, #0
 8008092:	f018 f8af 	bl	80201f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008096:	2324      	movs	r3, #36	@ 0x24
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	0018      	movs	r0, r3
 800809c:	2314      	movs	r3, #20
 800809e:	001a      	movs	r2, r3
 80080a0:	2100      	movs	r1, #0
 80080a2:	f018 f8a7 	bl	80201f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080a6:	003b      	movs	r3, r7
 80080a8:	0018      	movs	r0, r3
 80080aa:	2324      	movs	r3, #36	@ 0x24
 80080ac:	001a      	movs	r2, r3
 80080ae:	2100      	movs	r1, #0
 80080b0:	f018 f8a0 	bl	80201f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080b4:	4b34      	ldr	r3, [pc, #208]	@ (8008188 <SystemClock_Config+0x108>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a34      	ldr	r2, [pc, #208]	@ (800818c <SystemClock_Config+0x10c>)
 80080ba:	401a      	ands	r2, r3
 80080bc:	4b32      	ldr	r3, [pc, #200]	@ (8008188 <SystemClock_Config+0x108>)
 80080be:	2180      	movs	r1, #128	@ 0x80
 80080c0:	0109      	lsls	r1, r1, #4
 80080c2:	430a      	orrs	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80080c6:	f00c fedd 	bl	8014e84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80080ca:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <SystemClock_Config+0x110>)
 80080cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ce:	4a2f      	ldr	r2, [pc, #188]	@ (800818c <SystemClock_Config+0x10c>)
 80080d0:	401a      	ands	r2, r3
 80080d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <SystemClock_Config+0x110>)
 80080d4:	2180      	movs	r1, #128	@ 0x80
 80080d6:	0149      	lsls	r1, r1, #5
 80080d8:	430a      	orrs	r2, r1
 80080da:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80080dc:	193b      	adds	r3, r7, r4
 80080de:	2226      	movs	r2, #38	@ 0x26
 80080e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80080e2:	193b      	adds	r3, r7, r4
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	0052      	lsls	r2, r2, #1
 80080e8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080ea:	0021      	movs	r1, r4
 80080ec:	187b      	adds	r3, r7, r1
 80080ee:	2201      	movs	r2, #1
 80080f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	2210      	movs	r2, #16
 80080f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	2201      	movs	r2, #1
 80080fc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80080fe:	187b      	adds	r3, r7, r1
 8008100:	2200      	movs	r2, #0
 8008102:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008104:	187b      	adds	r3, r7, r1
 8008106:	0018      	movs	r0, r3
 8008108:	f00c ff4c 	bl	8014fa4 <HAL_RCC_OscConfig>
 800810c:	1e03      	subs	r3, r0, #0
 800810e:	d001      	beq.n	8008114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008110:	f000 f8fc 	bl	800830c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008114:	2124      	movs	r1, #36	@ 0x24
 8008116:	187b      	adds	r3, r7, r1
 8008118:	220f      	movs	r2, #15
 800811a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800811c:	187b      	adds	r3, r7, r1
 800811e:	2201      	movs	r2, #1
 8008120:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008122:	187b      	adds	r3, r7, r1
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008128:	187b      	adds	r3, r7, r1
 800812a:	2200      	movs	r2, #0
 800812c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800812e:	187b      	adds	r3, r7, r1
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008134:	187b      	adds	r3, r7, r1
 8008136:	2100      	movs	r1, #0
 8008138:	0018      	movs	r0, r3
 800813a:	f00d fb07 	bl	801574c <HAL_RCC_ClockConfig>
 800813e:	1e03      	subs	r3, r0, #0
 8008140:	d001      	beq.n	8008146 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008142:	f000 f8e3 	bl	800830c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008146:	003b      	movs	r3, r7
 8008148:	226d      	movs	r2, #109	@ 0x6d
 800814a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800814c:	003b      	movs	r3, r7
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008152:	003b      	movs	r3, r7
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008158:	003b      	movs	r3, r7
 800815a:	2200      	movs	r2, #0
 800815c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800815e:	003b      	movs	r3, r7
 8008160:	2280      	movs	r2, #128	@ 0x80
 8008162:	0252      	lsls	r2, r2, #9
 8008164:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008166:	003b      	movs	r3, r7
 8008168:	2280      	movs	r2, #128	@ 0x80
 800816a:	04d2      	lsls	r2, r2, #19
 800816c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800816e:	003b      	movs	r3, r7
 8008170:	0018      	movs	r0, r3
 8008172:	f00d fd0f 	bl	8015b94 <HAL_RCCEx_PeriphCLKConfig>
 8008176:	1e03      	subs	r3, r0, #0
 8008178:	d001      	beq.n	800817e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800817a:	f000 f8c7 	bl	800830c <Error_Handler>
  }
}
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	46bd      	mov	sp, r7
 8008182:	b01d      	add	sp, #116	@ 0x74
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	46c0      	nop			@ (mov r8, r8)
 8008188:	40007000 	.word	0x40007000
 800818c:	ffffe7ff 	.word	0xffffe7ff
 8008190:	40021000 	.word	0x40021000

08008194 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008198:	4b2f      	ldr	r3, [pc, #188]	@ (8008258 <check_cli_command+0xc4>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	3b61      	subs	r3, #97	@ 0x61
 800819e:	2b13      	cmp	r3, #19
 80081a0:	d830      	bhi.n	8008204 <check_cli_command+0x70>
 80081a2:	009a      	lsls	r2, r3, #2
 80081a4:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <check_cli_command+0xc8>)
 80081a6:	18d3      	adds	r3, r2, r3
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80081ac:	4b2c      	ldr	r3, [pc, #176]	@ (8008260 <check_cli_command+0xcc>)
 80081ae:	0018      	movs	r0, r3
 80081b0:	f017 fed2 	bl	801ff58 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80081b4:	2003      	movs	r0, #3
 80081b6:	f006 f9ef 	bl	800e598 <SetVerboseLevel>
      break;
 80081ba:	e04a      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80081bc:	f7fb faee 	bl	800379c <forceNTPupdate>
    break;
 80081c0:	e047      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80081c2:	4b28      	ldr	r3, [pc, #160]	@ (8008264 <check_cli_command+0xd0>)
 80081c4:	0018      	movs	r0, r3
 80081c6:	f017 fec7 	bl	801ff58 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80081ca:	2002      	movs	r0, #2
 80081cc:	f006 f9e4 	bl	800e598 <SetVerboseLevel>
      break;
 80081d0:	e03f      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 80081d2:	4b25      	ldr	r3, [pc, #148]	@ (8008268 <check_cli_command+0xd4>)
 80081d4:	0018      	movs	r0, r3
 80081d6:	f017 febf 	bl	801ff58 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80081da:	2001      	movs	r0, #1
 80081dc:	f006 f9dc 	bl	800e598 <SetVerboseLevel>
      break;
 80081e0:	e037      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80081e2:	4b22      	ldr	r3, [pc, #136]	@ (800826c <check_cli_command+0xd8>)
 80081e4:	0018      	movs	r0, r3
 80081e6:	f017 feb7 	bl	801ff58 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081ea:	2000      	movs	r0, #0
 80081ec:	f006 f9d4 	bl	800e598 <SetVerboseLevel>
      break;
 80081f0:	e02f      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081f2:	f006 fda7 	bl	800ed44 <HAL_GetTick>
 80081f6:	0002      	movs	r2, r0
 80081f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008270 <check_cli_command+0xdc>)
 80081fa:	601a      	str	r2, [r3, #0]
      break;
 80081fc:	e029      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081fe:	f7fe f955 	bl	80064ac <showTime>
      break;
 8008202:	e026      	b.n	8008252 <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <check_cli_command+0xe0>)
 8008206:	4b1c      	ldr	r3, [pc, #112]	@ (8008278 <check_cli_command+0xe4>)
 8008208:	0019      	movs	r1, r3
 800820a:	2001      	movs	r0, #1
 800820c:	f006 f95a 	bl	800e4c4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008210:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <check_cli_command+0xe8>)
 8008212:	0018      	movs	r0, r3
 8008214:	f017 fea0 	bl	801ff58 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008218:	4b19      	ldr	r3, [pc, #100]	@ (8008280 <check_cli_command+0xec>)
 800821a:	0018      	movs	r0, r3
 800821c:	f017 fe9c 	bl	801ff58 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008220:	4b18      	ldr	r3, [pc, #96]	@ (8008284 <check_cli_command+0xf0>)
 8008222:	0018      	movs	r0, r3
 8008224:	f017 fe98 	bl	801ff58 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008228:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <check_cli_command+0xf4>)
 800822a:	0018      	movs	r0, r3
 800822c:	f017 fe94 	bl	801ff58 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008230:	4b16      	ldr	r3, [pc, #88]	@ (800828c <check_cli_command+0xf8>)
 8008232:	0018      	movs	r0, r3
 8008234:	f017 fe90 	bl	801ff58 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008238:	4b15      	ldr	r3, [pc, #84]	@ (8008290 <check_cli_command+0xfc>)
 800823a:	0018      	movs	r0, r3
 800823c:	f017 fe8c 	bl	801ff58 <puts>
      printf("s - Start particle measurement\r\n");
 8008240:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <check_cli_command+0x100>)
 8008242:	0018      	movs	r0, r3
 8008244:	f017 fe88 	bl	801ff58 <puts>
      printf("t - Show actual systemtime\r\n");
 8008248:	4b13      	ldr	r3, [pc, #76]	@ (8008298 <check_cli_command+0x104>)
 800824a:	0018      	movs	r0, r3
 800824c:	f017 fe84 	bl	801ff58 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008250:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000fb8 	.word	0x20000fb8
 800825c:	080254c4 	.word	0x080254c4
 8008260:	08023fa0 	.word	0x08023fa0
 8008264:	08023fbc 	.word	0x08023fbc
 8008268:	08023fd8 	.word	0x08023fd8
 800826c:	08023ff8 	.word	0x08023ff8
 8008270:	2000107c 	.word	0x2000107c
 8008274:	08024014 	.word	0x08024014
 8008278:	08024044 	.word	0x08024044
 800827c:	08024048 	.word	0x08024048
 8008280:	08024060 	.word	0x08024060
 8008284:	08024080 	.word	0x08024080
 8008288:	080240a4 	.word	0x080240a4
 800828c:	080240c4 	.word	0x080240c4
 8008290:	080240e8 	.word	0x080240e8
 8008294:	08024108 	.word	0x08024108
 8008298:	08024128 	.word	0x08024128

0800829c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80082a4:	4908      	ldr	r1, [pc, #32]	@ (80082c8 <HAL_UART_RxCpltCallback+0x2c>)
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <HAL_UART_RxCpltCallback+0x30>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	0018      	movs	r0, r3
 80082ac:	f00f f816 	bl	80172dc <HAL_UART_Receive_IT>
  check_cli_command();
 80082b0:	f7ff ff70 	bl	8008194 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80082b4:	4904      	ldr	r1, [pc, #16]	@ (80082c8 <HAL_UART_RxCpltCallback+0x2c>)
 80082b6:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <HAL_UART_RxCpltCallback+0x30>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	0018      	movs	r0, r3
 80082bc:	f00f f80e 	bl	80172dc <HAL_UART_Receive_IT>
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000fb8 	.word	0x20000fb8
 80082cc:	20002194 	.word	0x20002194

080082d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	0002      	movs	r2, r0
 80082d8:	1dbb      	adds	r3, r7, #6
 80082da:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	881a      	ldrh	r2, [r3, #0]
 80082e0:	2380      	movs	r3, #128	@ 0x80
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d10b      	bne.n	8008300 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 80082e8:	f005 fb90 	bl	800da0c <setuserToggle>
    if (GetPMSensorPresence()) {
 80082ec:	f000 f84c 	bl	8008388 <GetPMSensorPresence>
 80082f0:	1e03      	subs	r3, r0, #0
 80082f2:	d005      	beq.n	8008300 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <HAL_GPIO_EXTI_Callback+0x38>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 80082fa:	2064      	movs	r0, #100	@ 0x64
 80082fc:	f000 feaa 	bl	8009054 <setsen5xReadTimer>
    }
  }
}
 8008300:	46c0      	nop			@ (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000fd0 	.word	0x20000fd0

0800830c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008310:	b672      	cpsid	i
}
 8008312:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008314:	4a05      	ldr	r2, [pc, #20]	@ (800832c <Error_Handler+0x20>)
 8008316:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <Error_Handler+0x24>)
 8008318:	0019      	movs	r1, r3
 800831a:	2001      	movs	r0, #1
 800831c:	f006 f8d2 	bl	800e4c4 <CreateLine>
    HAL_Delay(2500);
 8008320:	4b04      	ldr	r3, [pc, #16]	@ (8008334 <Error_Handler+0x28>)
 8008322:	0018      	movs	r0, r3
 8008324:	f006 fd18 	bl	800ed58 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	e7f3      	b.n	8008314 <Error_Handler+0x8>
 800832c:	08024144 	.word	0x08024144
 8008330:	08024044 	.word	0x08024044
 8008334:	000009c4 	.word	0x000009c4

08008338 <testInit>:
#include "statusCheck.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800833c:	4b10      	ldr	r3, [pc, #64]	@ (8008380 <testInit+0x48>)
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008342:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <testInit+0x48>)
 8008344:	2200      	movs	r2, #0
 8008346:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008348:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <testInit+0x48>)
 800834a:	2200      	movs	r2, #0
 800834c:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 800834e:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <testInit+0x48>)
 8008350:	2200      	movs	r2, #0
 8008352:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008354:	4b0a      	ldr	r3, [pc, #40]	@ (8008380 <testInit+0x48>)
 8008356:	2200      	movs	r2, #0
 8008358:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 800835a:	4b09      	ldr	r3, [pc, #36]	@ (8008380 <testInit+0x48>)
 800835c:	2200      	movs	r2, #0
 800835e:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <testInit+0x4c>)
 8008362:	2201      	movs	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <testInit+0x4c>)
 8008368:	2201      	movs	r2, #1
 800836a:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <testInit+0x4c>)
 800836e:	2201      	movs	r2, #1
 8008370:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 8008372:	4b04      	ldr	r3, [pc, #16]	@ (8008384 <testInit+0x4c>)
 8008374:	2201      	movs	r2, #1
 8008376:	70da      	strb	r2, [r3, #3]
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	20000fd4 	.word	0x20000fd4
 8008384:	20000fd0 	.word	0x20000fd0

08008388 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800838c:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <GetPMSensorPresence+0x10>)
 800838e:	789b      	ldrb	r3, [r3, #2]
}
 8008390:	0018      	movs	r0, r3
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	20000fd4 	.word	0x20000fd4

0800839c <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80083a0:	4b02      	ldr	r3, [pc, #8]	@ (80083ac <IsSGPPresent+0x10>)
 80083a2:	785b      	ldrb	r3, [r3, #1]
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	20000fd4 	.word	0x20000fd4

080083b0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	0002      	movs	r2, r0
 80083b8:	1dfb      	adds	r3, r7, #7
 80083ba:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 80083bc:	4b0b      	ldr	r3, [pc, #44]	@ (80083ec <SetVOCSensorDIS_ENA+0x3c>)
 80083be:	1dfa      	adds	r2, r7, #7
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 80083c4:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <SetVOCSensorDIS_ENA+0x40>)
 80083c6:	1dfa      	adds	r2, r7, #7
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 80083cc:	1dfb      	adds	r3, r7, #7
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <SetVOCSensorDIS_ENA+0x28>
 80083d4:	4b07      	ldr	r3, [pc, #28]	@ (80083f4 <SetVOCSensorDIS_ENA+0x44>)
 80083d6:	e000      	b.n	80083da <SetVOCSensorDIS_ENA+0x2a>
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <SetVOCSensorDIS_ENA+0x48>)
 80083da:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <SetVOCSensorDIS_ENA+0x4c>)
 80083dc:	4908      	ldr	r1, [pc, #32]	@ (8008400 <SetVOCSensorDIS_ENA+0x50>)
 80083de:	2003      	movs	r0, #3
 80083e0:	f006 f870 	bl	800e4c4 <CreateLine>
}
 80083e4:	46c0      	nop			@ (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b002      	add	sp, #8
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000fd4 	.word	0x20000fd4
 80083f0:	20000fd0 	.word	0x20000fd0
 80083f4:	08024170 	.word	0x08024170
 80083f8:	08024178 	.word	0x08024178
 80083fc:	08024184 	.word	0x08024184
 8008400:	08024198 	.word	0x08024198

08008404 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008408:	4b02      	ldr	r3, [pc, #8]	@ (8008414 <IsPMSensorEnabled+0x10>)
 800840a:	789b      	ldrb	r3, [r3, #2]
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	46c0      	nop			@ (mov r8, r8)
 8008414:	20000fd0 	.word	0x20000fd0

08008418 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	0002      	movs	r2, r0
 8008420:	1dfb      	adds	r3, r7, #7
 8008422:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008424:	4b09      	ldr	r3, [pc, #36]	@ (800844c <SetVOCSensorStatus+0x34>)
 8008426:	795b      	ldrb	r3, [r3, #5]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800842c:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <SetVOCSensorStatus+0x38>)
 800842e:	1dfa      	adds	r2, r7, #7
 8008430:	7812      	ldrb	r2, [r2, #0]
 8008432:	705a      	strb	r2, [r3, #1]
  }
  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
 8008434:	1dfb      	adds	r3, r7, #7
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4a06      	ldr	r2, [pc, #24]	@ (8008454 <SetVOCSensorStatus+0x3c>)
 800843a:	4907      	ldr	r1, [pc, #28]	@ (8008458 <SetVOCSensorStatus+0x40>)
 800843c:	2003      	movs	r0, #3
 800843e:	f006 f841 	bl	800e4c4 <CreateLine>
}
 8008442:	46c0      	nop			@ (mov r8, r8)
 8008444:	46bd      	mov	sp, r7
 8008446:	b002      	add	sp, #8
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	20000fd4 	.word	0x20000fd4
 8008450:	20000fd0 	.word	0x20000fd0
 8008454:	0802419c 	.word	0x0802419c
 8008458:	08024198 	.word	0x08024198

0800845c <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	0002      	movs	r2, r0
 8008464:	1dfb      	adds	r3, r7, #7
 8008466:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008468:	4b03      	ldr	r3, [pc, #12]	@ (8008478 <SetPMSensorStatus+0x1c>)
 800846a:	1dfa      	adds	r2, r7, #7
 800846c:	7812      	ldrb	r2, [r2, #0]
 800846e:	709a      	strb	r2, [r3, #2]
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000fd0 	.word	0x20000fd0

0800847c <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008480:	4b02      	ldr	r3, [pc, #8]	@ (800848c <SetESPMeasurementDone+0x10>)
 8008482:	2201      	movs	r2, #1
 8008484:	711a      	strb	r2, [r3, #4]
}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000fd4 	.word	0x20000fd4

08008490 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  testInit();
 800849e:	f7ff ff4b 	bl	8008338 <testInit>
  I2CSensors_Init(sensorI2C);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fd fc97 	bl	8005dd8 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80084aa:	f006 fa3d 	bl	800e928 <HIDS_DeviceConnected>
 80084ae:	0003      	movs	r3, r0
 80084b0:	001a      	movs	r2, r3
 80084b2:	2301      	movs	r3, #1
 80084b4:	4053      	eors	r3, r2
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80084bc:	4a7f      	ldr	r2, [pc, #508]	@ (80086bc <Device_Init+0x22c>)
 80084be:	4b80      	ldr	r3, [pc, #512]	@ (80086c0 <Device_Init+0x230>)
 80084c0:	0019      	movs	r1, r3
 80084c2:	2001      	movs	r0, #1
 80084c4:	f005 fffe 	bl	800e4c4 <CreateLine>
     SensorProbe.HT_Present = false;
 80084c8:	4b7e      	ldr	r3, [pc, #504]	@ (80086c4 <Device_Init+0x234>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 80084ce:	4b7e      	ldr	r3, [pc, #504]	@ (80086c8 <Device_Init+0x238>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e008      	b.n	80084e8 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 80084d6:	4b7b      	ldr	r3, [pc, #492]	@ (80086c4 <Device_Init+0x234>)
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 80084dc:	4a7b      	ldr	r2, [pc, #492]	@ (80086cc <Device_Init+0x23c>)
 80084de:	4b7c      	ldr	r3, [pc, #496]	@ (80086d0 <Device_Init+0x240>)
 80084e0:	0019      	movs	r1, r3
 80084e2:	2003      	movs	r0, #3
 80084e4:	f005 ffee 	bl	800e4c4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 80084e8:	f003 fbbe 	bl	800bc68 <SGP_DeviceConnected>
 80084ec:	0003      	movs	r3, r0
 80084ee:	001a      	movs	r2, r3
 80084f0:	2301      	movs	r3, #1
 80084f2:	4053      	eors	r3, r2
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 80084fa:	4b72      	ldr	r3, [pc, #456]	@ (80086c4 <Device_Init+0x234>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008500:	4a74      	ldr	r2, [pc, #464]	@ (80086d4 <Device_Init+0x244>)
 8008502:	4b6f      	ldr	r3, [pc, #444]	@ (80086c0 <Device_Init+0x230>)
 8008504:	0019      	movs	r1, r3
 8008506:	2001      	movs	r0, #1
 8008508:	f005 ffdc 	bl	800e4c4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800850c:	4b6e      	ldr	r3, [pc, #440]	@ (80086c8 <Device_Init+0x238>)
 800850e:	2200      	movs	r2, #0
 8008510:	705a      	strb	r2, [r3, #1]
 8008512:	e00b      	b.n	800852c <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008514:	4b6b      	ldr	r3, [pc, #428]	@ (80086c4 <Device_Init+0x234>)
 8008516:	2201      	movs	r2, #1
 8008518:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800851a:	4b6a      	ldr	r3, [pc, #424]	@ (80086c4 <Device_Init+0x234>)
 800851c:	2201      	movs	r2, #1
 800851e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008520:	4a6d      	ldr	r2, [pc, #436]	@ (80086d8 <Device_Init+0x248>)
 8008522:	4b6b      	ldr	r3, [pc, #428]	@ (80086d0 <Device_Init+0x240>)
 8008524:	0019      	movs	r1, r3
 8008526:	2003      	movs	r0, #3
 8008528:	f005 ffcc 	bl	800e4c4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800852c:	4b65      	ldr	r3, [pc, #404]	@ (80086c4 <Device_Init+0x234>)
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <Device_Init+0xb8>
 8008534:	4b63      	ldr	r3, [pc, #396]	@ (80086c4 <Device_Init+0x234>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 800853c:	2200      	movs	r2, #0
 800853e:	2101      	movs	r1, #1
 8008540:	2000      	movs	r0, #0
 8008542:	f004 fe9f 	bl	800d284 <SetDBLED>
 8008546:	e018      	b.n	800857a <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	2001      	movs	r0, #1
 800854e:	f004 fe99 	bl	800d284 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008552:	4b62      	ldr	r3, [pc, #392]	@ (80086dc <Device_Init+0x24c>)
 8008554:	2200      	movs	r2, #0
 8008556:	2101      	movs	r1, #1
 8008558:	0018      	movs	r0, r3
 800855a:	f007 fe84 	bl	8010266 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800855e:	2380      	movs	r3, #128	@ 0x80
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	485e      	ldr	r0, [pc, #376]	@ (80086dc <Device_Init+0x24c>)
 8008564:	2201      	movs	r2, #1
 8008566:	0019      	movs	r1, r3
 8008568:	f007 fe7d 	bl	8010266 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800856c:	2380      	movs	r3, #128	@ 0x80
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	485a      	ldr	r0, [pc, #360]	@ (80086dc <Device_Init+0x24c>)
 8008572:	2201      	movs	r2, #1
 8008574:	0019      	movs	r1, r3
 8008576:	f007 fe76 	bl	8010266 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800857a:	4b53      	ldr	r3, [pc, #332]	@ (80086c8 <Device_Init+0x238>)
 800857c:	78db      	ldrb	r3, [r3, #3]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d028      	beq.n	80085d4 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008582:	4a57      	ldr	r2, [pc, #348]	@ (80086e0 <Device_Init+0x250>)
 8008584:	4b57      	ldr	r3, [pc, #348]	@ (80086e4 <Device_Init+0x254>)
 8008586:	0019      	movs	r1, r3
 8008588:	2002      	movs	r0, #2
 800858a:	f005 ff9b 	bl	800e4c4 <CreateLine>
    if (!enableMicrophone(true)) {
 800858e:	2001      	movs	r0, #1
 8008590:	f003 ff76 	bl	800c480 <enableMicrophone>
 8008594:	0003      	movs	r3, r0
 8008596:	001a      	movs	r2, r3
 8008598:	2301      	movs	r3, #1
 800859a:	4053      	eors	r3, r2
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80085a2:	4a51      	ldr	r2, [pc, #324]	@ (80086e8 <Device_Init+0x258>)
 80085a4:	4b46      	ldr	r3, [pc, #280]	@ (80086c0 <Device_Init+0x230>)
 80085a6:	0019      	movs	r1, r3
 80085a8:	2001      	movs	r0, #1
 80085aa:	f005 ff8b 	bl	800e4c4 <CreateLine>
      SensorProbe.MIC_Present = false;
 80085ae:	4b45      	ldr	r3, [pc, #276]	@ (80086c4 <Device_Init+0x234>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80085b4:	4b44      	ldr	r3, [pc, #272]	@ (80086c8 <Device_Init+0x238>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	70da      	strb	r2, [r3, #3]
 80085ba:	e00b      	b.n	80085d4 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80085bc:	4b41      	ldr	r3, [pc, #260]	@ (80086c4 <Device_Init+0x234>)
 80085be:	2201      	movs	r2, #1
 80085c0:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80085c2:	4b41      	ldr	r3, [pc, #260]	@ (80086c8 <Device_Init+0x238>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 80085c8:	4a48      	ldr	r2, [pc, #288]	@ (80086ec <Device_Init+0x25c>)
 80085ca:	4b41      	ldr	r3, [pc, #260]	@ (80086d0 <Device_Init+0x240>)
 80085cc:	0019      	movs	r1, r3
 80085ce:	2003      	movs	r0, #3
 80085d0:	f005 ff78 	bl	800e4c4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 80085d4:	f000 fe06 	bl	80091e4 <probe_sen5x>
 80085d8:	1e03      	subs	r3, r0, #0
 80085da:	d122      	bne.n	8008622 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 80085dc:	4a44      	ldr	r2, [pc, #272]	@ (80086f0 <Device_Init+0x260>)
 80085de:	4b3c      	ldr	r3, [pc, #240]	@ (80086d0 <Device_Init+0x240>)
 80085e0:	0019      	movs	r1, r3
 80085e2:	2003      	movs	r0, #3
 80085e4:	f005 ff6e 	bl	800e4c4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 80085e8:	4b36      	ldr	r3, [pc, #216]	@ (80086c4 <Device_Init+0x234>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 80085ee:	4b36      	ldr	r3, [pc, #216]	@ (80086c8 <Device_Init+0x238>)
 80085f0:	2201      	movs	r2, #1
 80085f2:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 80085f4:	4b3f      	ldr	r3, [pc, #252]	@ (80086f4 <Device_Init+0x264>)
 80085f6:	791b      	ldrb	r3, [r3, #4]
 80085f8:	2b34      	cmp	r3, #52	@ 0x34
 80085fa:	d003      	beq.n	8008604 <Device_Init+0x174>
 80085fc:	4b3d      	ldr	r3, [pc, #244]	@ (80086f4 <Device_Init+0x264>)
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b35      	cmp	r3, #53	@ 0x35
 8008602:	d11c      	bne.n	800863e <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008604:	4a3c      	ldr	r2, [pc, #240]	@ (80086f8 <Device_Init+0x268>)
 8008606:	4b37      	ldr	r3, [pc, #220]	@ (80086e4 <Device_Init+0x254>)
 8008608:	0019      	movs	r1, r3
 800860a:	2002      	movs	r0, #2
 800860c:	f005 ff5a 	bl	800e4c4 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008610:	4b2d      	ldr	r3, [pc, #180]	@ (80086c8 <Device_Init+0x238>)
 8008612:	2200      	movs	r2, #0
 8008614:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008616:	4b2b      	ldr	r3, [pc, #172]	@ (80086c4 <Device_Init+0x234>)
 8008618:	2200      	movs	r2, #0
 800861a:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 800861c:	f003 fd08 	bl	800c030 <SGP_SoftReset>
 8008620:	e00d      	b.n	800863e <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008622:	f000 fda9 	bl	8009178 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008626:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <Device_Init+0x26c>)
 8008628:	4b29      	ldr	r3, [pc, #164]	@ (80086d0 <Device_Init+0x240>)
 800862a:	0019      	movs	r1, r3
 800862c:	2003      	movs	r0, #3
 800862e:	f005 ff49 	bl	800e4c4 <CreateLine>
    SensorProbe.PM_Present = false;
 8008632:	4b24      	ldr	r3, [pc, #144]	@ (80086c4 <Device_Init+0x234>)
 8008634:	2200      	movs	r2, #0
 8008636:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008638:	4b23      	ldr	r3, [pc, #140]	@ (80086c8 <Device_Init+0x238>)
 800863a:	2200      	movs	r2, #0
 800863c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800863e:	4b21      	ldr	r3, [pc, #132]	@ (80086c4 <Device_Init+0x234>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <Device_Init+0x1ba>
 8008646:	4b2e      	ldr	r3, [pc, #184]	@ (8008700 <Device_Init+0x270>)
 8008648:	e000      	b.n	800864c <Device_Init+0x1bc>
 800864a:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <Device_Init+0x274>)
 800864c:	4a2e      	ldr	r2, [pc, #184]	@ (8008708 <Device_Init+0x278>)
 800864e:	4925      	ldr	r1, [pc, #148]	@ (80086e4 <Device_Init+0x254>)
 8008650:	2002      	movs	r0, #2
 8008652:	f005 ff37 	bl	800e4c4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008656:	4b1b      	ldr	r3, [pc, #108]	@ (80086c4 <Device_Init+0x234>)
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <Device_Init+0x1d2>
 800865e:	4b28      	ldr	r3, [pc, #160]	@ (8008700 <Device_Init+0x270>)
 8008660:	e000      	b.n	8008664 <Device_Init+0x1d4>
 8008662:	4b28      	ldr	r3, [pc, #160]	@ (8008704 <Device_Init+0x274>)
 8008664:	4a29      	ldr	r2, [pc, #164]	@ (800870c <Device_Init+0x27c>)
 8008666:	491f      	ldr	r1, [pc, #124]	@ (80086e4 <Device_Init+0x254>)
 8008668:	2002      	movs	r0, #2
 800866a:	f005 ff2b 	bl	800e4c4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <Device_Init+0x234>)
 8008670:	789b      	ldrb	r3, [r3, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <Device_Init+0x1ea>
 8008676:	4b22      	ldr	r3, [pc, #136]	@ (8008700 <Device_Init+0x270>)
 8008678:	e000      	b.n	800867c <Device_Init+0x1ec>
 800867a:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <Device_Init+0x274>)
 800867c:	4a24      	ldr	r2, [pc, #144]	@ (8008710 <Device_Init+0x280>)
 800867e:	4919      	ldr	r1, [pc, #100]	@ (80086e4 <Device_Init+0x254>)
 8008680:	2002      	movs	r0, #2
 8008682:	f005 ff1f 	bl	800e4c4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <Device_Init+0x234>)
 8008688:	78db      	ldrb	r3, [r3, #3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <Device_Init+0x202>
 800868e:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <Device_Init+0x270>)
 8008690:	e000      	b.n	8008694 <Device_Init+0x204>
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <Device_Init+0x274>)
 8008694:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <Device_Init+0x284>)
 8008696:	4913      	ldr	r1, [pc, #76]	@ (80086e4 <Device_Init+0x254>)
 8008698:	2002      	movs	r0, #2
 800869a:	f005 ff13 	bl	800e4c4 <CreateLine>
  ESP_Init(espUart);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7fb fa1d 	bl	8003ae0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80086a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008718 <Device_Init+0x288>)
 80086a8:	4b09      	ldr	r3, [pc, #36]	@ (80086d0 <Device_Init+0x240>)
 80086aa:	0019      	movs	r1, r3
 80086ac:	2003      	movs	r0, #3
 80086ae:	f005 ff09 	bl	800e4c4 <CreateLine>
}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b004      	add	sp, #16
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	080241cc 	.word	0x080241cc
 80086c0:	080241fc 	.word	0x080241fc
 80086c4:	20000fd4 	.word	0x20000fd4
 80086c8:	20000fd0 	.word	0x20000fd0
 80086cc:	08024200 	.word	0x08024200
 80086d0:	08024198 	.word	0x08024198
 80086d4:	0802422c 	.word	0x0802422c
 80086d8:	08024248 	.word	0x08024248
 80086dc:	50000400 	.word	0x50000400
 80086e0:	08024260 	.word	0x08024260
 80086e4:	08024284 	.word	0x08024284
 80086e8:	08024288 	.word	0x08024288
 80086ec:	080242b4 	.word	0x080242b4
 80086f0:	080242e0 	.word	0x080242e0
 80086f4:	20001068 	.word	0x20001068
 80086f8:	080242f8 	.word	0x080242f8
 80086fc:	08024348 	.word	0x08024348
 8008700:	0802436c 	.word	0x0802436c
 8008704:	08024370 	.word	0x08024370
 8008708:	08024374 	.word	0x08024374
 800870c:	08024390 	.word	0x08024390
 8008710:	080243ac 	.word	0x080243ac
 8008714:	080243c8 	.word	0x080243c8
 8008718:	080243e4 	.word	0x080243e4

0800871c <Device_Test>:

void Device_Test(){
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008720:	4b34      	ldr	r3, [pc, #208]	@ (80087f4 <Device_Test+0xd8>)
 8008722:	78db      	ldrb	r3, [r3, #3]
 8008724:	2201      	movs	r2, #1
 8008726:	4053      	eors	r3, r2
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d027      	beq.n	800877e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800872e:	f000 fab5 	bl	8008c9c <MIC_TestMeasurementDone>
 8008732:	1e03      	subs	r3, r0, #0
 8008734:	d011      	beq.n	800875a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008736:	4b2f      	ldr	r3, [pc, #188]	@ (80087f4 <Device_Test+0xd8>)
 8008738:	2201      	movs	r2, #1
 800873a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800873c:	4b2e      	ldr	r3, [pc, #184]	@ (80087f8 <Device_Test+0xdc>)
 800873e:	2201      	movs	r2, #1
 8008740:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008742:	f004 fd23 	bl	800d18c <Calculate_LED_ON>
 8008746:	0003      	movs	r3, r0
 8008748:	0019      	movs	r1, r3
 800874a:	23fa      	movs	r3, #250	@ 0xfa
 800874c:	011a      	lsls	r2, r3, #4
 800874e:	23fa      	movs	r3, #250	@ 0xfa
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	0018      	movs	r0, r3
 8008754:	f004 fd62 	bl	800d21c <SetStatusLED>
 8008758:	e011      	b.n	800877e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800875a:	f003 fe6d 	bl	800c438 <micSettlingComplete>
 800875e:	1e03      	subs	r3, r0, #0
 8008760:	d00d      	beq.n	800877e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008762:	4b25      	ldr	r3, [pc, #148]	@ (80087f8 <Device_Test+0xdc>)
 8008764:	2201      	movs	r2, #1
 8008766:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008768:	f004 fd10 	bl	800d18c <Calculate_LED_ON>
 800876c:	0003      	movs	r3, r0
 800876e:	0018      	movs	r0, r3
 8008770:	23fa      	movs	r3, #250	@ 0xfa
 8008772:	011a      	lsls	r2, r3, #4
 8008774:	23fa      	movs	r3, #250	@ 0xfa
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	0019      	movs	r1, r3
 800877a:	f004 fd4f 	bl	800d21c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800877e:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <Device_Test+0xd8>)
 8008780:	791b      	ldrb	r3, [r3, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	4053      	eors	r3, r2
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800878c:	f7fc fd60 	bl	8005250 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008790:	4b18      	ldr	r3, [pc, #96]	@ (80087f4 <Device_Test+0xd8>)
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <Device_Test+0x84>
 8008798:	4b16      	ldr	r3, [pc, #88]	@ (80087f4 <Device_Test+0xd8>)
 800879a:	78db      	ldrb	r3, [r3, #3]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <Device_Test+0x92>
 80087a0:	4b16      	ldr	r3, [pc, #88]	@ (80087fc <Device_Test+0xe0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f005 fe37 	bl	800e418 <TimestampIsReached>
 80087aa:	1e03      	subs	r3, r0, #0
 80087ac:	d01f      	beq.n	80087ee <Device_Test+0xd2>
    Info("Test completed");
 80087ae:	4a14      	ldr	r2, [pc, #80]	@ (8008800 <Device_Test+0xe4>)
 80087b0:	4b14      	ldr	r3, [pc, #80]	@ (8008804 <Device_Test+0xe8>)
 80087b2:	0019      	movs	r1, r3
 80087b4:	2002      	movs	r0, #2
 80087b6:	f005 fe85 	bl	800e4c4 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80087ba:	4b0e      	ldr	r3, [pc, #56]	@ (80087f4 <Device_Test+0xd8>)
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <Device_Test+0xaa>
 80087c2:	4b11      	ldr	r3, [pc, #68]	@ (8008808 <Device_Test+0xec>)
 80087c4:	e000      	b.n	80087c8 <Device_Test+0xac>
 80087c6:	4b11      	ldr	r3, [pc, #68]	@ (800880c <Device_Test+0xf0>)
 80087c8:	4a11      	ldr	r2, [pc, #68]	@ (8008810 <Device_Test+0xf4>)
 80087ca:	490e      	ldr	r1, [pc, #56]	@ (8008804 <Device_Test+0xe8>)
 80087cc:	2002      	movs	r0, #2
 80087ce:	f005 fe79 	bl	800e4c4 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80087d2:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <Device_Test+0xd8>)
 80087d4:	78db      	ldrb	r3, [r3, #3]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <Device_Test+0xc2>
 80087da:	4b0b      	ldr	r3, [pc, #44]	@ (8008808 <Device_Test+0xec>)
 80087dc:	e000      	b.n	80087e0 <Device_Test+0xc4>
 80087de:	4b0b      	ldr	r3, [pc, #44]	@ (800880c <Device_Test+0xf0>)
 80087e0:	4a0c      	ldr	r2, [pc, #48]	@ (8008814 <Device_Test+0xf8>)
 80087e2:	4908      	ldr	r1, [pc, #32]	@ (8008804 <Device_Test+0xe8>)
 80087e4:	2002      	movs	r0, #2
 80087e6:	f005 fe6d 	bl	800e4c4 <CreateLine>
    SetTestDone();
 80087ea:	f7ff f9c5 	bl	8007b78 <SetTestDone>
  }
}
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000fd4 	.word	0x20000fd4
 80087f8:	20000fd0 	.word	0x20000fd0
 80087fc:	20000fc8 	.word	0x20000fc8
 8008800:	08024408 	.word	0x08024408
 8008804:	08024284 	.word	0x08024284
 8008808:	08024418 	.word	0x08024418
 800880c:	08024420 	.word	0x08024420
 8008810:	08024428 	.word	0x08024428
 8008814:	0802443c 	.word	0x0802443c

08008818 <AllDevicesReady>:

bool AllDevicesReady() {
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800881c:	4b2a      	ldr	r3, [pc, #168]	@ (80088c8 <AllDevicesReady+0xb0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	0018      	movs	r0, r3
 8008822:	f005 fdf9 	bl	800e418 <TimestampIsReached>
 8008826:	1e03      	subs	r3, r0, #0
 8008828:	d04a      	beq.n	80088c0 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800882a:	4b28      	ldr	r3, [pc, #160]	@ (80088cc <AllDevicesReady+0xb4>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b06      	cmp	r3, #6
 8008830:	d102      	bne.n	8008838 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008832:	4b27      	ldr	r3, [pc, #156]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008838:	4b26      	ldr	r3, [pc, #152]	@ (80088d4 <AllDevicesReady+0xbc>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b07      	cmp	r3, #7
 800883e:	d006      	beq.n	800884e <AllDevicesReady+0x36>
 8008840:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <AllDevicesReady+0xc0>)
 8008842:	795b      	ldrb	r3, [r3, #5]
 8008844:	2201      	movs	r2, #1
 8008846:	4053      	eors	r3, r2
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 800884e:	4b20      	ldr	r3, [pc, #128]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008850:	2200      	movs	r2, #0
 8008852:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008854:	4b21      	ldr	r3, [pc, #132]	@ (80088dc <AllDevicesReady+0xc4>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d102      	bne.n	8008862 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 800885c:	4b1c      	ldr	r3, [pc, #112]	@ (80088d0 <AllDevicesReady+0xb8>)
 800885e:	2200      	movs	r2, #0
 8008860:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008862:	4b1f      	ldr	r3, [pc, #124]	@ (80088e0 <AllDevicesReady+0xc8>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d102      	bne.n	8008870 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 800886a:	4b19      	ldr	r3, [pc, #100]	@ (80088d0 <AllDevicesReady+0xb8>)
 800886c:	2200      	movs	r2, #0
 800886e:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008870:	4b1c      	ldr	r3, [pc, #112]	@ (80088e4 <AllDevicesReady+0xcc>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b09      	cmp	r3, #9
 8008876:	d123      	bne.n	80088c0 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008878:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <AllDevicesReady+0xb8>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	4053      	eors	r3, r2
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <AllDevicesReady+0x9c>
 8008886:	4b12      	ldr	r3, [pc, #72]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2201      	movs	r2, #1
 800888c:	4053      	eors	r3, r2
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00f      	beq.n	80088b4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008894:	4b0e      	ldr	r3, [pc, #56]	@ (80088d0 <AllDevicesReady+0xb8>)
 8008896:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008898:	2201      	movs	r2, #1
 800889a:	4053      	eors	r3, r2
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d008      	beq.n	80088b4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80088a2:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <AllDevicesReady+0xb8>)
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	2201      	movs	r2, #1
 80088a8:	4053      	eors	r3, r2
 80088aa:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <AllDevicesReady+0x9c>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <AllDevicesReady+0x9e>
 80088b4:	2300      	movs	r3, #0
 80088b6:	1c1a      	adds	r2, r3, #0
 80088b8:	2301      	movs	r3, #1
 80088ba:	4013      	ands	r3, r2
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e000      	b.n	80088c2 <AllDevicesReady+0xaa>
    }
  }
  return false;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	0018      	movs	r0, r3
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000fc8 	.word	0x20000fc8
 80088cc:	20000fb5 	.word	0x20000fb5
 80088d0:	20000fd0 	.word	0x20000fd0
 80088d4:	20000fb4 	.word	0x20000fb4
 80088d8:	20000fd4 	.word	0x20000fd4
 80088dc:	2000008d 	.word	0x2000008d
 80088e0:	20000fb6 	.word	0x20000fb6
 80088e4:	20000fb7 	.word	0x20000fb7

080088e8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 80088ec:	4b11      	ldr	r3, [pc, #68]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 80088f4:	4b10      	ldr	r3, [pc, #64]	@ (8008938 <EnabledConnectedDevices+0x50>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 80088fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d006      	beq.n	8008910 <EnabledConnectedDevices+0x28>
 8008902:	4b0c      	ldr	r3, [pc, #48]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800890a:	4b0b      	ldr	r3, [pc, #44]	@ (8008938 <EnabledConnectedDevices+0x50>)
 800890c:	2201      	movs	r2, #1
 800890e:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008910:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008912:	789b      	ldrb	r3, [r3, #2]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008918:	4b07      	ldr	r3, [pc, #28]	@ (8008938 <EnabledConnectedDevices+0x50>)
 800891a:	2201      	movs	r2, #1
 800891c:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800891e:	4b05      	ldr	r3, [pc, #20]	@ (8008934 <EnabledConnectedDevices+0x4c>)
 8008920:	78db      	ldrb	r3, [r3, #3]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008926:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <EnabledConnectedDevices+0x50>)
 8008928:	2201      	movs	r2, #1
 800892a:	70da      	strb	r2, [r3, #3]
  }
}
 800892c:	46c0      	nop			@ (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	46c0      	nop			@ (mov r8, r8)
 8008934:	20000fd4 	.word	0x20000fd4
 8008938:	20000fd0 	.word	0x20000fd0

0800893c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008940:	4a0a      	ldr	r2, [pc, #40]	@ (800896c <DisableConnectedDevices+0x30>)
 8008942:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <DisableConnectedDevices+0x34>)
 8008944:	0019      	movs	r1, r3
 8008946:	2003      	movs	r0, #3
 8008948:	f005 fdbc 	bl	800e4c4 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800894c:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <DisableConnectedDevices+0x38>)
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <DisableConnectedDevices+0x38>)
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008958:	4b06      	ldr	r3, [pc, #24]	@ (8008974 <DisableConnectedDevices+0x38>)
 800895a:	2200      	movs	r2, #0
 800895c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800895e:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <DisableConnectedDevices+0x38>)
 8008960:	2200      	movs	r2, #0
 8008962:	70da      	strb	r2, [r3, #3]
}
 8008964:	46c0      	nop			@ (mov r8, r8)
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	46c0      	nop			@ (mov r8, r8)
 800896c:	08024450 	.word	0x08024450
 8008970:	08024198 	.word	0x08024198
 8008974:	20000fd0 	.word	0x20000fd0

08008978 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800897c:	4b02      	ldr	r3, [pc, #8]	@ (8008988 <ResetdBAmax+0x10>)
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20001020 	.word	0x20001020

0800898c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008994:	f006 f9d6 	bl	800ed44 <HAL_GetTick>
 8008998:	0002      	movs	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	18d2      	adds	r2, r2, r3
 800899e:	4b03      	ldr	r3, [pc, #12]	@ (80089ac <setMICTimeStamp+0x20>)
 80089a0:	601a      	str	r2, [r3, #0]
}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b002      	add	sp, #8
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	20001028 	.word	0x20001028

080089b0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  counter = 0;
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <ResetDBACalculator+0x1c>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80089ba:	4b05      	ldr	r3, [pc, #20]	@ (80089d0 <ResetDBACalculator+0x20>)
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <ResetDBACalculator+0x24>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
}
 80089c6:	46c0      	nop			@ (mov r8, r8)
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20001024 	.word	0x20001024
 80089d0:	2000008c 	.word	0x2000008c
 80089d4:	20001025 	.word	0x20001025

080089d8 <MIC_Print>:

void MIC_Print(void) {
 80089d8:	b5b0      	push	{r4, r5, r7, lr}
 80089da:	b08a      	sub	sp, #40	@ 0x28
 80089dc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 80089de:	4b9d      	ldr	r3, [pc, #628]	@ (8008c54 <MIC_Print+0x27c>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	4b9d      	ldr	r3, [pc, #628]	@ (8008c58 <MIC_Print+0x280>)
 80089e4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 80089e6:	4b9d      	ldr	r3, [pc, #628]	@ (8008c5c <MIC_Print+0x284>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	001a      	movs	r2, r3
 80089ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008c58 <MIC_Print+0x280>)
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	4b9b      	ldr	r3, [pc, #620]	@ (8008c60 <MIC_Print+0x288>)
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	50d1      	str	r1, [r2, r3]
  counter++;
 80089f6:	4b99      	ldr	r3, [pc, #612]	@ (8008c5c <MIC_Print+0x284>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	4b97      	ldr	r3, [pc, #604]	@ (8008c5c <MIC_Print+0x284>)
 8008a00:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008a02:	4b96      	ldr	r3, [pc, #600]	@ (8008c5c <MIC_Print+0x284>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b09      	cmp	r3, #9
 8008a08:	d80b      	bhi.n	8008a22 <MIC_Print+0x4a>
 8008a0a:	4b96      	ldr	r3, [pc, #600]	@ (8008c64 <MIC_Print+0x28c>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4053      	eors	r3, r2
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <MIC_Print+0x4a>
    denominator = counter;
 8008a18:	4b90      	ldr	r3, [pc, #576]	@ (8008c5c <MIC_Print+0x284>)
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	4b92      	ldr	r3, [pc, #584]	@ (8008c68 <MIC_Print+0x290>)
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e005      	b.n	8008a2e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008a22:	4b91      	ldr	r3, [pc, #580]	@ (8008c68 <MIC_Print+0x290>)
 8008a24:	220a      	movs	r2, #10
 8008a26:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008a28:	4b8e      	ldr	r3, [pc, #568]	@ (8008c64 <MIC_Print+0x28c>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8008c6c <MIC_Print+0x294>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008a34:	230f      	movs	r3, #15
 8008a36:	18fb      	adds	r3, r7, r3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	e03e      	b.n	8008abc <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 8008a3e:	240f      	movs	r4, #15
 8008a40:	193b      	adds	r3, r7, r4
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b86      	ldr	r3, [pc, #536]	@ (8008c60 <MIC_Print+0x288>)
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	58d2      	ldr	r2, [r2, r3]
 8008a4a:	4b88      	ldr	r3, [pc, #544]	@ (8008c6c <MIC_Print+0x294>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	1c19      	adds	r1, r3, #0
 8008a50:	1c10      	adds	r0, r2, #0
 8008a52:	f7f7 ff35 	bl	80008c0 <__aeabi_fadd>
 8008a56:	1c03      	adds	r3, r0, #0
 8008a58:	1c1a      	adds	r2, r3, #0
 8008a5a:	4b84      	ldr	r3, [pc, #528]	@ (8008c6c <MIC_Print+0x294>)
 8008a5c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008a5e:	193b      	adds	r3, r7, r4
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	4b7f      	ldr	r3, [pc, #508]	@ (8008c60 <MIC_Print+0x288>)
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	58d2      	ldr	r2, [r2, r3]
 8008a68:	4b81      	ldr	r3, [pc, #516]	@ (8008c70 <MIC_Print+0x298>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	1c19      	adds	r1, r3, #0
 8008a6e:	1c10      	adds	r0, r2, #0
 8008a70:	f7f7 fd72 	bl	8000558 <__aeabi_fcmpgt>
 8008a74:	1e03      	subs	r3, r0, #0
 8008a76:	d006      	beq.n	8008a86 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	4b78      	ldr	r3, [pc, #480]	@ (8008c60 <MIC_Print+0x288>)
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	58d2      	ldr	r2, [r2, r3]
 8008a82:	4b7b      	ldr	r3, [pc, #492]	@ (8008c70 <MIC_Print+0x298>)
 8008a84:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008a86:	4b79      	ldr	r3, [pc, #484]	@ (8008c6c <MIC_Print+0x294>)
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	4b77      	ldr	r3, [pc, #476]	@ (8008c68 <MIC_Print+0x290>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7f8 fdea 	bl	8001668 <__aeabi_ui2f>
 8008a94:	1c03      	adds	r3, r0, #0
 8008a96:	1c19      	adds	r1, r3, #0
 8008a98:	1c20      	adds	r0, r4, #0
 8008a9a:	f7f8 f89b 	bl	8000bd4 <__aeabi_fdiv>
 8008a9e:	1c03      	adds	r3, r0, #0
 8008aa0:	1c1a      	adds	r2, r3, #0
 8008aa2:	4b74      	ldr	r3, [pc, #464]	@ (8008c74 <MIC_Print+0x29c>)
 8008aa4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 8008aa6:	4b72      	ldr	r3, [pc, #456]	@ (8008c70 <MIC_Print+0x298>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	1c18      	adds	r0, r3, #0
 8008aac:	f7fa ff44 	bl	8003938 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008ab0:	210f      	movs	r1, #15
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	187b      	adds	r3, r7, r1
 8008ab8:	3201      	adds	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	4b6a      	ldr	r3, [pc, #424]	@ (8008c68 <MIC_Print+0x290>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	220f      	movs	r2, #15
 8008ac2:	18ba      	adds	r2, r7, r2
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d3b9      	bcc.n	8008a3e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008aca:	4b63      	ldr	r3, [pc, #396]	@ (8008c58 <MIC_Print+0x280>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	1c18      	adds	r0, r3, #0
 8008ad0:	f7fa fcc8 	bl	8003464 <__aeabi_f2d>
 8008ad4:	6038      	str	r0, [r7, #0]
 8008ad6:	6079      	str	r1, [r7, #4]
 8008ad8:	4b65      	ldr	r3, [pc, #404]	@ (8008c70 <MIC_Print+0x298>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	1c18      	adds	r0, r3, #0
 8008ade:	f7fa fcc1 	bl	8003464 <__aeabi_f2d>
 8008ae2:	0004      	movs	r4, r0
 8008ae4:	000d      	movs	r5, r1
 8008ae6:	4b63      	ldr	r3, [pc, #396]	@ (8008c74 <MIC_Print+0x29c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	1c18      	adds	r0, r3, #0
 8008aec:	f7fa fcba 	bl	8003464 <__aeabi_f2d>
 8008af0:	0002      	movs	r2, r0
 8008af2:	000b      	movs	r3, r1
 8008af4:	4960      	ldr	r1, [pc, #384]	@ (8008c78 <MIC_Print+0x2a0>)
 8008af6:	9204      	str	r2, [sp, #16]
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	9402      	str	r4, [sp, #8]
 8008afc:	9503      	str	r5, [sp, #12]
 8008afe:	4b5f      	ldr	r3, [pc, #380]	@ (8008c7c <MIC_Print+0x2a4>)
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0008      	movs	r0, r1
 8008b08:	f017 f9c0 	bl	801fe8c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008b0c:	4b53      	ldr	r3, [pc, #332]	@ (8008c5c <MIC_Print+0x284>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b0a      	cmp	r3, #10
 8008b12:	d902      	bls.n	8008b1a <MIC_Print+0x142>
    counter = 0;
 8008b14:	4b51      	ldr	r3, [pc, #324]	@ (8008c5c <MIC_Print+0x284>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c58 <MIC_Print+0x280>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4958      	ldr	r1, [pc, #352]	@ (8008c80 <MIC_Print+0x2a8>)
 8008b20:	1c18      	adds	r0, r3, #0
 8008b22:	f7f7 fd23 	bl	800056c <__aeabi_fcmpge>
 8008b26:	1e03      	subs	r3, r0, #0
 8008b28:	d004      	beq.n	8008b34 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	2001      	movs	r0, #1
 8008b30:	f004 fba8 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008b34:	4b48      	ldr	r3, [pc, #288]	@ (8008c58 <MIC_Print+0x280>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4952      	ldr	r1, [pc, #328]	@ (8008c84 <MIC_Print+0x2ac>)
 8008b3a:	1c18      	adds	r0, r3, #0
 8008b3c:	f7f7 fd16 	bl	800056c <__aeabi_fcmpge>
 8008b40:	1e03      	subs	r3, r0, #0
 8008b42:	d00c      	beq.n	8008b5e <MIC_Print+0x186>
 8008b44:	4b44      	ldr	r3, [pc, #272]	@ (8008c58 <MIC_Print+0x280>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	494d      	ldr	r1, [pc, #308]	@ (8008c80 <MIC_Print+0x2a8>)
 8008b4a:	1c18      	adds	r0, r3, #0
 8008b4c:	f7f7 fcf0 	bl	8000530 <__aeabi_fcmplt>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d004      	beq.n	8008b5e <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f004 fb93 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c58 <MIC_Print+0x280>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4949      	ldr	r1, [pc, #292]	@ (8008c88 <MIC_Print+0x2b0>)
 8008b64:	1c18      	adds	r0, r3, #0
 8008b66:	f7f7 fd01 	bl	800056c <__aeabi_fcmpge>
 8008b6a:	1e03      	subs	r3, r0, #0
 8008b6c:	d00c      	beq.n	8008b88 <MIC_Print+0x1b0>
 8008b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8008c58 <MIC_Print+0x280>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4944      	ldr	r1, [pc, #272]	@ (8008c84 <MIC_Print+0x2ac>)
 8008b74:	1c18      	adds	r0, r3, #0
 8008b76:	f7f7 fcdb 	bl	8000530 <__aeabi_fcmplt>
 8008b7a:	1e03      	subs	r3, r0, #0
 8008b7c:	d004      	beq.n	8008b88 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2101      	movs	r1, #1
 8008b82:	2001      	movs	r0, #1
 8008b84:	f004 fb7e 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008b88:	4b33      	ldr	r3, [pc, #204]	@ (8008c58 <MIC_Print+0x280>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	493f      	ldr	r1, [pc, #252]	@ (8008c8c <MIC_Print+0x2b4>)
 8008b8e:	1c18      	adds	r0, r3, #0
 8008b90:	f7f7 fcec 	bl	800056c <__aeabi_fcmpge>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d00c      	beq.n	8008bb2 <MIC_Print+0x1da>
 8008b98:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <MIC_Print+0x280>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	493a      	ldr	r1, [pc, #232]	@ (8008c88 <MIC_Print+0x2b0>)
 8008b9e:	1c18      	adds	r0, r3, #0
 8008ba0:	f7f7 fcc6 	bl	8000530 <__aeabi_fcmplt>
 8008ba4:	1e03      	subs	r3, r0, #0
 8008ba6:	d004      	beq.n	8008bb2 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2101      	movs	r1, #1
 8008bac:	2000      	movs	r0, #0
 8008bae:	f004 fb69 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <MIC_Print+0x280>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4936      	ldr	r1, [pc, #216]	@ (8008c90 <MIC_Print+0x2b8>)
 8008bb8:	1c18      	adds	r0, r3, #0
 8008bba:	f7f7 fcd7 	bl	800056c <__aeabi_fcmpge>
 8008bbe:	1e03      	subs	r3, r0, #0
 8008bc0:	d00c      	beq.n	8008bdc <MIC_Print+0x204>
 8008bc2:	4b25      	ldr	r3, [pc, #148]	@ (8008c58 <MIC_Print+0x280>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4931      	ldr	r1, [pc, #196]	@ (8008c8c <MIC_Print+0x2b4>)
 8008bc8:	1c18      	adds	r0, r3, #0
 8008bca:	f7f7 fcb1 	bl	8000530 <__aeabi_fcmplt>
 8008bce:	1e03      	subs	r3, r0, #0
 8008bd0:	d004      	beq.n	8008bdc <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	f004 fb54 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c58 <MIC_Print+0x280>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	492c      	ldr	r1, [pc, #176]	@ (8008c94 <MIC_Print+0x2bc>)
 8008be2:	1c18      	adds	r0, r3, #0
 8008be4:	f7f7 fcc2 	bl	800056c <__aeabi_fcmpge>
 8008be8:	1e03      	subs	r3, r0, #0
 8008bea:	d00c      	beq.n	8008c06 <MIC_Print+0x22e>
 8008bec:	4b1a      	ldr	r3, [pc, #104]	@ (8008c58 <MIC_Print+0x280>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4927      	ldr	r1, [pc, #156]	@ (8008c90 <MIC_Print+0x2b8>)
 8008bf2:	1c18      	adds	r0, r3, #0
 8008bf4:	f7f7 fc9c 	bl	8000530 <__aeabi_fcmplt>
 8008bf8:	1e03      	subs	r3, r0, #0
 8008bfa:	d004      	beq.n	8008c06 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	2100      	movs	r1, #0
 8008c00:	2000      	movs	r0, #0
 8008c02:	f004 fb3f 	bl	800d284 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008c06:	4b14      	ldr	r3, [pc, #80]	@ (8008c58 <MIC_Print+0x280>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4923      	ldr	r1, [pc, #140]	@ (8008c98 <MIC_Print+0x2c0>)
 8008c0c:	1c18      	adds	r0, r3, #0
 8008c0e:	f7f7 fcad 	bl	800056c <__aeabi_fcmpge>
 8008c12:	1e03      	subs	r3, r0, #0
 8008c14:	d00c      	beq.n	8008c30 <MIC_Print+0x258>
 8008c16:	4b10      	ldr	r3, [pc, #64]	@ (8008c58 <MIC_Print+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	491e      	ldr	r1, [pc, #120]	@ (8008c94 <MIC_Print+0x2bc>)
 8008c1c:	1c18      	adds	r0, r3, #0
 8008c1e:	f7f7 fc87 	bl	8000530 <__aeabi_fcmplt>
 8008c22:	1e03      	subs	r3, r0, #0
 8008c24:	d004      	beq.n	8008c30 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008c26:	2201      	movs	r2, #1
 8008c28:	2100      	movs	r1, #0
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	f004 fb2a 	bl	800d284 <SetDBLED>
  }
  if(dBA < 35){//off
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <MIC_Print+0x280>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4918      	ldr	r1, [pc, #96]	@ (8008c98 <MIC_Print+0x2c0>)
 8008c36:	1c18      	adds	r0, r3, #0
 8008c38:	f7f7 fc7a 	bl	8000530 <__aeabi_fcmplt>
 8008c3c:	1e03      	subs	r3, r0, #0
 8008c3e:	d100      	bne.n	8008c42 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008c40:	e004      	b.n	8008c4c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008c42:	2200      	movs	r2, #0
 8008c44:	2100      	movs	r1, #0
 8008c46:	2000      	movs	r0, #0
 8008c48:	f004 fb1c 	bl	800d284 <SetDBLED>
}
 8008c4c:	46c0      	nop			@ (mov r8, r8)
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b004      	add	sp, #16
 8008c52:	bdb0      	pop	{r4, r5, r7, pc}
 8008c54:	2000101c 	.word	0x2000101c
 8008c58:	20000fe8 	.word	0x20000fe8
 8008c5c:	20001024 	.word	0x20001024
 8008c60:	20000fec 	.word	0x20000fec
 8008c64:	20001025 	.word	0x20001025
 8008c68:	2000008c 	.word	0x2000008c
 8008c6c:	20001018 	.word	0x20001018
 8008c70:	20001020 	.word	0x20001020
 8008c74:	20001014 	.word	0x20001014
 8008c78:	08024464 	.word	0x08024464
 8008c7c:	20000fdc 	.word	0x20000fdc
 8008c80:	42b40000 	.word	0x42b40000
 8008c84:	42a00000 	.word	0x42a00000
 8008c88:	428c0000 	.word	0x428c0000
 8008c8c:	42700000 	.word	0x42700000
 8008c90:	42480000 	.word	0x42480000
 8008c94:	42200000 	.word	0x42200000
 8008c98:	420c0000 	.word	0x420c0000

08008c9c <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008ca2:	4b11      	ldr	r3, [pc, #68]	@ (8008ce8 <MIC_TestMeasurementDone+0x4c>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4a10      	ldr	r2, [pc, #64]	@ (8008cec <MIC_TestMeasurementDone+0x50>)
 8008caa:	4911      	ldr	r1, [pc, #68]	@ (8008cf0 <MIC_TestMeasurementDone+0x54>)
 8008cac:	2002      	movs	r0, #2
 8008cae:	f005 fc09 	bl	800e4c4 <CreateLine>
  if(DataReady) {
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce8 <MIC_TestMeasurementDone+0x4c>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008cbc:	1dfb      	adds	r3, r7, #7
 8008cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf4 <MIC_TestMeasurementDone+0x58>)
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf4 <MIC_TestMeasurementDone+0x58>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	4a0b      	ldr	r2, [pc, #44]	@ (8008cf8 <MIC_TestMeasurementDone+0x5c>)
 8008ccc:	4908      	ldr	r1, [pc, #32]	@ (8008cf0 <MIC_TestMeasurementDone+0x54>)
 8008cce:	2002      	movs	r0, #2
 8008cd0:	f005 fbf8 	bl	800e4c4 <CreateLine>
    ResetMICIndicator();
 8008cd4:	f004 fbc4 	bl	800d460 <ResetMICIndicator>
    return Check;
 8008cd8:	1dfb      	adds	r3, r7, #7
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	e000      	b.n	8008ce0 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b002      	add	sp, #8
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20001167 	.word	0x20001167
 8008cec:	080244ac 	.word	0x080244ac
 8008cf0:	080244d8 	.word	0x080244d8
 8008cf4:	20001168 	.word	0x20001168
 8008cf8:	080244dc 	.word	0x080244dc

08008cfc <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008d02:	4b78      	ldr	r3, [pc, #480]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d100      	bne.n	8008d0c <Mic_Upkeep+0x10>
 8008d0a:	e0b8      	b.n	8008e7e <Mic_Upkeep+0x182>
 8008d0c:	dd00      	ble.n	8008d10 <Mic_Upkeep+0x14>
 8008d0e:	e0d3      	b.n	8008eb8 <Mic_Upkeep+0x1bc>
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d037      	beq.n	8008d84 <Mic_Upkeep+0x88>
 8008d14:	dd00      	ble.n	8008d18 <Mic_Upkeep+0x1c>
 8008d16:	e0cf      	b.n	8008eb8 <Mic_Upkeep+0x1bc>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <Mic_Upkeep+0x26>
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d014      	beq.n	8008d4a <Mic_Upkeep+0x4e>
 8008d20:	e0ca      	b.n	8008eb8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008d22:	2001      	movs	r0, #1
 8008d24:	f003 fbac 	bl	800c480 <enableMicrophone>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4053      	eors	r3, r2
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008d36:	4a6c      	ldr	r2, [pc, #432]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008d38:	4b6c      	ldr	r3, [pc, #432]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008d3a:	217f      	movs	r1, #127	@ 0x7f
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f005 fc79 	bl	800e634 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008d42:	4b68      	ldr	r3, [pc, #416]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]
    break;
 8008d48:	e0c5      	b.n	8008ed6 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008d4a:	f003 fb75 	bl	800c438 <micSettlingComplete>
 8008d4e:	1e03      	subs	r3, r0, #0
 8008d50:	d105      	bne.n	8008d5e <Mic_Upkeep+0x62>
 8008d52:	4b67      	ldr	r3, [pc, #412]	@ (8008ef0 <Mic_Upkeep+0x1f4>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d100      	bne.n	8008d5e <Mic_Upkeep+0x62>
 8008d5c:	e0b6      	b.n	8008ecc <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008d5e:	f003 fbf9 	bl	800c554 <startSPLcalculation>
 8008d62:	0003      	movs	r3, r0
 8008d64:	001a      	movs	r2, r3
 8008d66:	2301      	movs	r3, #1
 8008d68:	4053      	eors	r3, r2
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d005      	beq.n	8008d7c <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008d70:	4a5d      	ldr	r2, [pc, #372]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008d72:	4b5e      	ldr	r3, [pc, #376]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008d74:	2188      	movs	r1, #136	@ 0x88
 8008d76:	0018      	movs	r0, r3
 8008d78:	f005 fc5c 	bl	800e634 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008d7c:	4b59      	ldr	r3, [pc, #356]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008d82:	e0a3      	b.n	8008ecc <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008d84:	4b5b      	ldr	r3, [pc, #364]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	2101      	movs	r1, #1
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f003 fa36 	bl	800c1fc <getSoundData>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d100      	bne.n	8008d96 <Mic_Upkeep+0x9a>
 8008d94:	e09c      	b.n	8008ed0 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008d96:	f003 fb2f 	bl	800c3f8 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008d9a:	4b56      	ldr	r3, [pc, #344]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	001a      	movs	r2, r3
 8008da0:	4b54      	ldr	r3, [pc, #336]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	4954      	ldr	r1, [pc, #336]	@ (8008ef8 <Mic_Upkeep+0x1fc>)
 8008da6:	0038      	movs	r0, r7
 8008da8:	f017 f8e0 	bl	801ff6c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008dac:	4b51      	ldr	r3, [pc, #324]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008dae:	89db      	ldrh	r3, [r3, #14]
 8008db0:	001a      	movs	r2, r3
 8008db2:	4b50      	ldr	r3, [pc, #320]	@ (8008ef4 <Mic_Upkeep+0x1f8>)
 8008db4:	7c1b      	ldrb	r3, [r3, #16]
 8008db6:	4951      	ldr	r1, [pc, #324]	@ (8008efc <Mic_Upkeep+0x200>)
 8008db8:	4851      	ldr	r0, [pc, #324]	@ (8008f00 <Mic_Upkeep+0x204>)
 8008dba:	f017 f8d7 	bl	801ff6c <siprintf>
      dBValue = atof(dBbuffer);
 8008dbe:	003b      	movs	r3, r7
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f015 fc83 	bl	801e6cc <atof>
 8008dc6:	0002      	movs	r2, r0
 8008dc8:	000b      	movs	r3, r1
 8008dca:	0010      	movs	r0, r2
 8008dcc:	0019      	movs	r1, r3
 8008dce:	f7fa fb91 	bl	80034f4 <__aeabi_d2f>
 8008dd2:	1c02      	adds	r2, r0, #0
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008dd6:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	494a      	ldr	r1, [pc, #296]	@ (8008f08 <Mic_Upkeep+0x20c>)
 8008dde:	1c18      	adds	r0, r3, #0
 8008de0:	f7f8 f8de 	bl	8000fa0 <__aeabi_fmul>
 8008de4:	1c03      	adds	r3, r0, #0
 8008de6:	1c18      	adds	r0, r3, #0
 8008de8:	f7fa fb3c 	bl	8003464 <__aeabi_f2d>
 8008dec:	2200      	movs	r2, #0
 8008dee:	4b47      	ldr	r3, [pc, #284]	@ (8008f0c <Mic_Upkeep+0x210>)
 8008df0:	f7f8 fc7c 	bl	80016ec <__aeabi_dadd>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	0010      	movs	r0, r2
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	f7fa faa4 	bl	8003348 <__aeabi_d2iz>
 8008e00:	0003      	movs	r3, r0
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7fa fadc 	bl	80033c0 <__aeabi_i2d>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4b41      	ldr	r3, [pc, #260]	@ (8008f10 <Mic_Upkeep+0x214>)
 8008e0c:	f7f8 ffd2 	bl	8001db4 <__aeabi_ddiv>
 8008e10:	0002      	movs	r2, r0
 8008e12:	000b      	movs	r3, r1
 8008e14:	0010      	movs	r0, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	f7fa fb6c 	bl	80034f4 <__aeabi_d2f>
 8008e1c:	1c02      	adds	r2, r0, #0
 8008e1e:	4b39      	ldr	r3, [pc, #228]	@ (8008f04 <Mic_Upkeep+0x208>)
 8008e20:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008e22:	f7ff fdd9 	bl	80089d8 <MIC_Print>
      if (!startSPLcalculation()) {
 8008e26:	f003 fb95 	bl	800c554 <startSPLcalculation>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4053      	eors	r3, r2
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e38:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008e3c:	2198      	movs	r1, #152	@ 0x98
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f005 fbf8 	bl	800e634 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008e44:	2000      	movs	r0, #0
 8008e46:	f003 fb1b 	bl	800c480 <enableMicrophone>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4053      	eors	r3, r2
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008e58:	4a23      	ldr	r2, [pc, #140]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008e5c:	219b      	movs	r1, #155	@ 0x9b
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f005 fbe8 	bl	800e634 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008e64:	f005 ff6e 	bl	800ed44 <HAL_GetTick>
 8008e68:	0003      	movs	r3, r0
 8008e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f14 <Mic_Upkeep+0x218>)
 8008e6c:	189a      	adds	r2, r3, r2
 8008e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f18 <Mic_Upkeep+0x21c>)
 8008e70:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008e72:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008e74:	2203      	movs	r2, #3
 8008e76:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008e78:	f004 faf2 	bl	800d460 <ResetMICIndicator>
    }
    break;
 8008e7c:	e028      	b.n	8008ed0 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008e7e:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <Mic_Upkeep+0x21c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f005 fac8 	bl	800e418 <TimestampIsReached>
 8008e88:	1e03      	subs	r3, r0, #0
 8008e8a:	d023      	beq.n	8008ed4 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f003 faf7 	bl	800c480 <enableMicrophone>
 8008e92:	0003      	movs	r3, r0
 8008e94:	001a      	movs	r2, r3
 8008e96:	2301      	movs	r3, #1
 8008e98:	4053      	eors	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008ea0:	4a11      	ldr	r2, [pc, #68]	@ (8008ee8 <Mic_Upkeep+0x1ec>)
 8008ea2:	4b12      	ldr	r3, [pc, #72]	@ (8008eec <Mic_Upkeep+0x1f0>)
 8008ea4:	21a6      	movs	r1, #166	@ 0xa6
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f005 fbc4 	bl	800e634 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008eac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008eb2:	f004 fa93 	bl	800d3dc <SetMICIndicator>
    }
    break;
 8008eb6:	e00d      	b.n	8008ed4 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008eb8:	4a18      	ldr	r2, [pc, #96]	@ (8008f1c <Mic_Upkeep+0x220>)
 8008eba:	4b19      	ldr	r3, [pc, #100]	@ (8008f20 <Mic_Upkeep+0x224>)
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	2003      	movs	r0, #3
 8008ec0:	f005 fb00 	bl	800e4c4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008ec4:	4b07      	ldr	r3, [pc, #28]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
    break;
 8008eca:	e004      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ecc:	46c0      	nop			@ (mov r8, r8)
 8008ece:	e002      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ed0:	46c0      	nop			@ (mov r8, r8)
 8008ed2:	e000      	b.n	8008ed6 <Mic_Upkeep+0x1da>
    break;
 8008ed4:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	@ (8008ee4 <Mic_Upkeep+0x1e8>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b002      	add	sp, #8
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	2000103e 	.word	0x2000103e
 8008ee8:	080244f4 	.word	0x080244f4
 8008eec:	0802551c 	.word	0x0802551c
 8008ef0:	20001167 	.word	0x20001167
 8008ef4:	2000102c 	.word	0x2000102c
 8008ef8:	08024510 	.word	0x08024510
 8008efc:	08024518 	.word	0x08024518
 8008f00:	20000fdc 	.word	0x20000fdc
 8008f04:	2000101c 	.word	0x2000101c
 8008f08:	42c80000 	.word	0x42c80000
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	40590000 	.word	0x40590000
 8008f14:	000002f3 	.word	0x000002f3
 8008f18:	20001028 	.word	0x20001028
 8008f1c:	08024520 	.word	0x08024520
 8008f20:	08024540 	.word	0x08024540

08008f24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	2314      	movs	r3, #20
 8008f30:	001a      	movs	r2, r3
 8008f32:	2100      	movs	r1, #0
 8008f34:	f017 f95e 	bl	80201f4 <memset>
  RTC_DateTypeDef sDate = {0};
 8008f38:	003b      	movs	r3, r7
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f40:	4a2e      	ldr	r2, [pc, #184]	@ (8008ffc <MX_RTC_Init+0xd8>)
 8008f42:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008f44:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f4c:	227f      	movs	r2, #127	@ 0x7f
 8008f4e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008f50:	4b29      	ldr	r3, [pc, #164]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f52:	22ff      	movs	r2, #255	@ 0xff
 8008f54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f56:	4b28      	ldr	r3, [pc, #160]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008f5c:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f62:	4b25      	ldr	r3, [pc, #148]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f68:	4b23      	ldr	r3, [pc, #140]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f6e:	4b22      	ldr	r3, [pc, #136]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008f70:	0018      	movs	r0, r3
 8008f72:	f00c ff6b 	bl	8015e4c <HAL_RTC_Init>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d001      	beq.n	8008f7e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008f7a:	f7ff f9c7 	bl	800830c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f7e:	1d3b      	adds	r3, r7, #4
 8008f80:	220d      	movs	r2, #13
 8008f82:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f84:	1d3b      	adds	r3, r7, #4
 8008f86:	2200      	movs	r2, #0
 8008f88:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f8a:	1d3b      	adds	r3, r7, #4
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	2200      	movs	r2, #0
 8008f94:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	2200      	movs	r2, #0
 8008f9a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f9c:	1d39      	adds	r1, r7, #4
 8008f9e:	4b16      	ldr	r3, [pc, #88]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f00c ffee 	bl	8015f84 <HAL_RTC_SetTime>
 8008fa8:	1e03      	subs	r3, r0, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008fac:	f7ff f9ae 	bl	800830c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008fb0:	003b      	movs	r3, r7
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008fb6:	003b      	movs	r3, r7
 8008fb8:	2211      	movs	r2, #17
 8008fba:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008fbc:	003b      	movs	r3, r7
 8008fbe:	2217      	movs	r2, #23
 8008fc0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008fc2:	003b      	movs	r3, r7
 8008fc4:	2218      	movs	r2, #24
 8008fc6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008fc8:	0039      	movs	r1, r7
 8008fca:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f00d f8e0 	bl	8016194 <HAL_RTC_SetDate>
 8008fd4:	1e03      	subs	r3, r0, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008fd8:	f7ff f998 	bl	800830c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <MX_RTC_Init+0xd4>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f00d fa90 	bl	8016508 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008fe8:	1e03      	subs	r3, r0, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008fec:	f7ff f98e 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008ff0:	46c0      	nop			@ (mov r8, r8)
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b006      	add	sp, #24
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	20001040 	.word	0x20001040
 8008ffc:	40002800 	.word	0x40002800

08009000 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a0a      	ldr	r2, [pc, #40]	@ (8009038 <HAL_RTC_MspInit+0x38>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d10e      	bne.n	8009030 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <HAL_RTC_MspInit+0x3c>)
 8009014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009016:	4b09      	ldr	r3, [pc, #36]	@ (800903c <HAL_RTC_MspInit+0x3c>)
 8009018:	2180      	movs	r1, #128	@ 0x80
 800901a:	02c9      	lsls	r1, r1, #11
 800901c:	430a      	orrs	r2, r1
 800901e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009020:	2200      	movs	r2, #0
 8009022:	2100      	movs	r1, #0
 8009024:	2002      	movs	r0, #2
 8009026:	f006 fb31 	bl	800f68c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800902a:	2002      	movs	r0, #2
 800902c:	f006 fb43 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009030:	46c0      	nop			@ (mov r8, r8)
 8009032:	46bd      	mov	sp, r7
 8009034:	b002      	add	sp, #8
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40002800 	.word	0x40002800
 800903c:	40021000 	.word	0x40021000

08009040 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009044:	4b02      	ldr	r3, [pc, #8]	@ (8009050 <sen5x_Get_sen5x_enable_state+0x10>)
 8009046:	781b      	ldrb	r3, [r3, #0]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	20001067 	.word	0x20001067

08009054 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800905c:	f005 fe72 	bl	800ed44 <HAL_GetTick>
 8009060:	0002      	movs	r2, r0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	18d2      	adds	r2, r2, r3
 8009066:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <setsen5xReadTimer+0x20>)
 8009068:	601a      	str	r2, [r3, #0]
}
 800906a:	46c0      	nop			@ (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b002      	add	sp, #8
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	2000107c 	.word	0x2000107c

08009078 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	0002      	movs	r2, r0
 8009080:	1dfb      	adds	r3, r7, #7
 8009082:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009084:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <setsen5xSamplecounter+0x1c>)
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
}
 800908a:	46c0      	nop			@ (mov r8, r8)
 800908c:	46bd      	mov	sp, r7
 800908e:	b002      	add	sp, #8
 8009090:	bd80      	pop	{r7, pc}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	20001070 	.word	0x20001070

08009098 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80090a0:	f7ff f9b0 	bl	8008404 <IsPMSensorEnabled>
 80090a4:	1e03      	subs	r3, r0, #0
 80090a6:	d02c      	beq.n	8009102 <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80090a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009120 <sen5x_enable+0x88>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	4193      	sbcs	r3, r2
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2201      	movs	r2, #1
 80090b4:	4053      	eors	r3, r2
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	1c1a      	adds	r2, r3, #0
 80090ba:	2301      	movs	r3, #1
 80090bc:	4013      	ands	r3, r2
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	4b17      	ldr	r3, [pc, #92]	@ (8009120 <sen5x_enable+0x88>)
 80090c2:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80090c4:	4b16      	ldr	r3, [pc, #88]	@ (8009120 <sen5x_enable+0x88>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 80090cc:	2000      	movs	r0, #0
 80090ce:	f7ff ffc1 	bl	8009054 <setsen5xReadTimer>
 80090d2:	e009      	b.n	80090e8 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 80090d4:	f005 fe36 	bl	800ed44 <HAL_GetTick>
 80090d8:	0002      	movs	r2, r0
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2164      	movs	r1, #100	@ 0x64
 80090de:	434b      	muls	r3, r1
 80090e0:	18d3      	adds	r3, r2, r3
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff ffb6 	bl	8009054 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is : %s", sen5x_Enable?"enabled":"disabled");
 80090e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <sen5x_enable+0x88>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <sen5x_enable+0x5c>
 80090f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <sen5x_enable+0x8c>)
 80090f2:	e000      	b.n	80090f6 <sen5x_enable+0x5e>
 80090f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009128 <sen5x_enable+0x90>)
 80090f6:	4a0d      	ldr	r2, [pc, #52]	@ (800912c <sen5x_enable+0x94>)
 80090f8:	490d      	ldr	r1, [pc, #52]	@ (8009130 <sen5x_enable+0x98>)
 80090fa:	2002      	movs	r0, #2
 80090fc:	f005 f9e2 	bl	800e4c4 <CreateLine>
 8009100:	e005      	b.n	800910e <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009102:	4a0c      	ldr	r2, [pc, #48]	@ (8009134 <sen5x_enable+0x9c>)
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <sen5x_enable+0x98>)
 8009106:	0019      	movs	r1, r3
 8009108:	2002      	movs	r0, #2
 800910a:	f005 f9db 	bl	800e4c4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800910e:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <sen5x_enable+0xa0>)
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009114:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <sen5x_enable+0x88>)
 8009116:	781b      	ldrb	r3, [r3, #0]
}
 8009118:	0018      	movs	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	b002      	add	sp, #8
 800911e:	bd80      	pop	{r7, pc}
 8009120:	20001067 	.word	0x20001067
 8009124:	08024544 	.word	0x08024544
 8009128:	0802454c 	.word	0x0802454c
 800912c:	08024558 	.word	0x08024558
 8009130:	08024578 	.word	0x08024578
 8009134:	0802457c 	.word	0x0802457c
 8009138:	2000008d 	.word	0x2000008d

0800913c <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009140:	2380      	movs	r3, #128	@ 0x80
 8009142:	015b      	lsls	r3, r3, #5
 8009144:	4808      	ldr	r0, [pc, #32]	@ (8009168 <sen5x_Power_On+0x2c>)
 8009146:	2201      	movs	r2, #1
 8009148:	0019      	movs	r1, r3
 800914a:	f007 f88c 	bl	8010266 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800914e:	4a07      	ldr	r2, [pc, #28]	@ (800916c <sen5x_Power_On+0x30>)
 8009150:	4b07      	ldr	r3, [pc, #28]	@ (8009170 <sen5x_Power_On+0x34>)
 8009152:	0019      	movs	r1, r3
 8009154:	2003      	movs	r0, #3
 8009156:	f005 f9b5 	bl	800e4c4 <CreateLine>
  ssd1306_Init(&hi2c2);
  ssd1306_WriteString("dBA 120.00 peak 140.00", Font_7x10, White);
  ssd1306_UpdateScreen(&hi2c2);
  HAL_Delay(10000);
#endif
  sen5x_On = true;
 800915a:	4b06      	ldr	r3, [pc, #24]	@ (8009174 <sen5x_Power_On+0x38>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
}
 8009160:	46c0      	nop			@ (mov r8, r8)
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	50000800 	.word	0x50000800
 800916c:	0802459c 	.word	0x0802459c
 8009170:	080245b8 	.word	0x080245b8
 8009174:	20001065 	.word	0x20001065

08009178 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800917c:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <sen5x_Power_Off+0x40>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d006      	beq.n	8009192 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009184:	4a0d      	ldr	r2, [pc, #52]	@ (80091bc <sen5x_Power_Off+0x44>)
 8009186:	4b0e      	ldr	r3, [pc, #56]	@ (80091c0 <sen5x_Power_Off+0x48>)
 8009188:	0019      	movs	r1, r3
 800918a:	2003      	movs	r0, #3
 800918c:	f005 f99a 	bl	800e4c4 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009190:	e00f      	b.n	80091b2 <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 8009192:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <sen5x_Power_Off+0x4c>)
 8009194:	4b0a      	ldr	r3, [pc, #40]	@ (80091c0 <sen5x_Power_Off+0x48>)
 8009196:	0019      	movs	r1, r3
 8009198:	2003      	movs	r0, #3
 800919a:	f005 f993 	bl	800e4c4 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800919e:	2380      	movs	r3, #128	@ 0x80
 80091a0:	015b      	lsls	r3, r3, #5
 80091a2:	4809      	ldr	r0, [pc, #36]	@ (80091c8 <sen5x_Power_Off+0x50>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	0019      	movs	r1, r3
 80091a8:	f007 f85d 	bl	8010266 <HAL_GPIO_WritePin>
    sen5x_On = false;
 80091ac:	4b07      	ldr	r3, [pc, #28]	@ (80091cc <sen5x_Power_Off+0x54>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
}
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20001066 	.word	0x20001066
 80091bc:	080245bc 	.word	0x080245bc
 80091c0:	080245b8 	.word	0x080245b8
 80091c4:	080245ec 	.word	0x080245ec
 80091c8:	50000800 	.word	0x50000800
 80091cc:	20001065 	.word	0x20001065

080091d0 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <reset_fanCleaningDone+0x10>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	701a      	strb	r2, [r3, #0]
}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20001064 	.word	0x20001064

080091e4 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80091e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091e6:	b093      	sub	sp, #76	@ 0x4c
 80091e8:	af04      	add	r7, sp, #16
  int16_t error = 0;
 80091ea:	2436      	movs	r4, #54	@ 0x36
 80091ec:	193b      	adds	r3, r7, r4
 80091ee:	2200      	movs	r2, #0
 80091f0:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80091f2:	2335      	movs	r3, #53	@ 0x35
 80091f4:	18fb      	adds	r3, r7, r3
 80091f6:	2220      	movs	r2, #32
 80091f8:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 80091fa:	2334      	movs	r3, #52	@ 0x34
 80091fc:	18fb      	adds	r3, r7, r3
 80091fe:	2220      	movs	r2, #32
 8009200:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009202:	f7ff ff9b 	bl	800913c <sen5x_Power_On>
  error = sen5x_device_reset();
 8009206:	0025      	movs	r5, r4
 8009208:	193c      	adds	r4, r7, r4
 800920a:	f001 f903 	bl	800a414 <sen5x_device_reset>
 800920e:	0003      	movs	r3, r0
 8009210:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009212:	002c      	movs	r4, r5
 8009214:	193b      	adds	r3, r7, r4
 8009216:	2200      	movs	r2, #0
 8009218:	5e9b      	ldrsh	r3, [r3, r2]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00b      	beq.n	8009236 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800921e:	193b      	adds	r3, r7, r4
 8009220:	2200      	movs	r2, #0
 8009222:	5e9b      	ldrsh	r3, [r3, r2]
 8009224:	4a6d      	ldr	r2, [pc, #436]	@ (80093dc <probe_sen5x+0x1f8>)
 8009226:	496e      	ldr	r1, [pc, #440]	@ (80093e0 <probe_sen5x+0x1fc>)
 8009228:	2001      	movs	r0, #1
 800922a:	f005 f94b 	bl	800e4c4 <CreateLine>
      return error;
 800922e:	193b      	adds	r3, r7, r4
 8009230:	2200      	movs	r2, #0
 8009232:	5e9b      	ldrsh	r3, [r3, r2]
 8009234:	e0cd      	b.n	80093d2 <probe_sen5x+0x1ee>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8009236:	2536      	movs	r5, #54	@ 0x36
 8009238:	197c      	adds	r4, r7, r5
 800923a:	2335      	movs	r3, #53	@ 0x35
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	230c      	movs	r3, #12
 8009242:	18fb      	adds	r3, r7, r3
 8009244:	0011      	movs	r1, r2
 8009246:	0018      	movs	r0, r3
 8009248:	f000 ffd0 	bl	800a1ec <sen5x_get_serial_number>
 800924c:	0003      	movs	r3, r0
 800924e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009250:	197b      	adds	r3, r7, r5
 8009252:	2200      	movs	r2, #0
 8009254:	5e9b      	ldrsh	r3, [r3, r2]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800925a:	197b      	adds	r3, r7, r5
 800925c:	2200      	movs	r2, #0
 800925e:	5e9a      	ldrsh	r2, [r3, r2]
 8009260:	4b60      	ldr	r3, [pc, #384]	@ (80093e4 <probe_sen5x+0x200>)
 8009262:	0011      	movs	r1, r2
 8009264:	0018      	movs	r0, r3
 8009266:	f016 fe11 	bl	801fe8c <iprintf>
      return error;
 800926a:	197b      	adds	r3, r7, r5
 800926c:	2200      	movs	r2, #0
 800926e:	5e9b      	ldrsh	r3, [r3, r2]
 8009270:	e0af      	b.n	80093d2 <probe_sen5x+0x1ee>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009272:	230c      	movs	r3, #12
 8009274:	18fa      	adds	r2, r7, r3
 8009276:	4b5c      	ldr	r3, [pc, #368]	@ (80093e8 <probe_sen5x+0x204>)
 8009278:	0011      	movs	r1, r2
 800927a:	0018      	movs	r0, r3
 800927c:	f016 fe06 	bl	801fe8c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009280:	2536      	movs	r5, #54	@ 0x36
 8009282:	197c      	adds	r4, r7, r5
 8009284:	2334      	movs	r3, #52	@ 0x34
 8009286:	18fb      	adds	r3, r7, r3
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	4b58      	ldr	r3, [pc, #352]	@ (80093ec <probe_sen5x+0x208>)
 800928c:	0011      	movs	r1, r2
 800928e:	0018      	movs	r0, r3
 8009290:	f000 ff56 	bl	800a140 <sen5x_get_product_name>
 8009294:	0003      	movs	r3, r0
 8009296:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009298:	197b      	adds	r3, r7, r5
 800929a:	2200      	movs	r2, #0
 800929c:	5e9b      	ldrsh	r3, [r3, r2]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00b      	beq.n	80092ba <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 80092a2:	197b      	adds	r3, r7, r5
 80092a4:	2200      	movs	r2, #0
 80092a6:	5e9a      	ldrsh	r2, [r3, r2]
 80092a8:	4b51      	ldr	r3, [pc, #324]	@ (80093f0 <probe_sen5x+0x20c>)
 80092aa:	0011      	movs	r1, r2
 80092ac:	0018      	movs	r0, r3
 80092ae:	f016 fded 	bl	801fe8c <iprintf>
      return error;
 80092b2:	197b      	adds	r3, r7, r5
 80092b4:	2200      	movs	r2, #0
 80092b6:	5e9b      	ldrsh	r3, [r3, r2]
 80092b8:	e08b      	b.n	80093d2 <probe_sen5x+0x1ee>
  } else {
      printf("Product name: %s\r\n", product_name);
 80092ba:	4a4c      	ldr	r2, [pc, #304]	@ (80093ec <probe_sen5x+0x208>)
 80092bc:	4b4d      	ldr	r3, [pc, #308]	@ (80093f4 <probe_sen5x+0x210>)
 80092be:	0011      	movs	r1, r2
 80092c0:	0018      	movs	r0, r3
 80092c2:	f016 fde3 	bl	801fe8c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 80092c6:	2636      	movs	r6, #54	@ 0x36
 80092c8:	19bc      	adds	r4, r7, r6
 80092ca:	2308      	movs	r3, #8
 80092cc:	18fd      	adds	r5, r7, r3
 80092ce:	2309      	movs	r3, #9
 80092d0:	18fa      	adds	r2, r7, r3
 80092d2:	230a      	movs	r3, #10
 80092d4:	18f9      	adds	r1, r7, r3
 80092d6:	230b      	movs	r3, #11
 80092d8:	18f8      	adds	r0, r7, r3
 80092da:	1d7b      	adds	r3, r7, #5
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	1dbb      	adds	r3, r7, #6
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	1dfb      	adds	r3, r7, #7
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	002b      	movs	r3, r5
 80092e8:	f000 ffd6 	bl	800a298 <sen5x_get_version>
 80092ec:	0003      	movs	r3, r0
 80092ee:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80092f0:	19bb      	adds	r3, r7, r6
 80092f2:	2200      	movs	r2, #0
 80092f4:	5e9b      	ldrsh	r3, [r3, r2]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80092fa:	19bb      	adds	r3, r7, r6
 80092fc:	2200      	movs	r2, #0
 80092fe:	5e9a      	ldrsh	r2, [r3, r2]
 8009300:	4b3d      	ldr	r3, [pc, #244]	@ (80093f8 <probe_sen5x+0x214>)
 8009302:	0011      	movs	r1, r2
 8009304:	0018      	movs	r0, r3
 8009306:	f016 fdc1 	bl	801fe8c <iprintf>
      return error;
 800930a:	19bb      	adds	r3, r7, r6
 800930c:	2200      	movs	r2, #0
 800930e:	5e9b      	ldrsh	r3, [r3, r2]
 8009310:	e05f      	b.n	80093d2 <probe_sen5x+0x1ee>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009312:	230b      	movs	r3, #11
 8009314:	18fb      	adds	r3, r7, r3
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	0019      	movs	r1, r3
 800931a:	230a      	movs	r3, #10
 800931c:	18fb      	adds	r3, r7, r3
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	001a      	movs	r2, r3
 8009322:	2308      	movs	r3, #8
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	001c      	movs	r4, r3
 800932a:	1dfb      	adds	r3, r7, #7
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	4833      	ldr	r0, [pc, #204]	@ (80093fc <probe_sen5x+0x218>)
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	0023      	movs	r3, r4
 8009334:	f016 fdaa 	bl	801fe8c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8009338:	2300      	movs	r3, #0
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800933c:	262e      	movs	r6, #46	@ 0x2e
 800933e:	19bb      	adds	r3, r7, r6
 8009340:	2200      	movs	r2, #0
 8009342:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009344:	232c      	movs	r3, #44	@ 0x2c
 8009346:	18fb      	adds	r3, r7, r3
 8009348:	2200      	movs	r2, #0
 800934a:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800934c:	492c      	ldr	r1, [pc, #176]	@ (8009400 <probe_sen5x+0x21c>)
 800934e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009350:	f7f7 fe26 	bl	8000fa0 <__aeabi_fmul>
 8009354:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8009356:	1c18      	adds	r0, r3, #0
 8009358:	f7f8 f91a 	bl	8001590 <__aeabi_f2iz>
 800935c:	0003      	movs	r3, r0
 800935e:	b218      	sxth	r0, r3
 8009360:	2536      	movs	r5, #54	@ 0x36
 8009362:	197c      	adds	r4, r7, r5
 8009364:	232c      	movs	r3, #44	@ 0x2c
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	881a      	ldrh	r2, [r3, #0]
 800936a:	19bb      	adds	r3, r7, r6
 800936c:	2100      	movs	r1, #0
 800936e:	5e5b      	ldrsh	r3, [r3, r1]
 8009370:	0019      	movs	r1, r3
 8009372:	f000 fe81 	bl	800a078 <sen5x_set_temperature_offset_parameters>
 8009376:	0003      	movs	r3, r0
 8009378:	8023      	strh	r3, [r4, #0]
  if (error) {
 800937a:	197b      	adds	r3, r7, r5
 800937c:	2200      	movs	r2, #0
 800937e:	5e9b      	ldrsh	r3, [r3, r2]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009384:	197b      	adds	r3, r7, r5
 8009386:	2200      	movs	r2, #0
 8009388:	5e9b      	ldrsh	r3, [r3, r2]
 800938a:	4a1e      	ldr	r2, [pc, #120]	@ (8009404 <probe_sen5x+0x220>)
 800938c:	4914      	ldr	r1, [pc, #80]	@ (80093e0 <probe_sen5x+0x1fc>)
 800938e:	2001      	movs	r0, #1
 8009390:	f005 f898 	bl	800e4c4 <CreateLine>
      return error;
 8009394:	197b      	adds	r3, r7, r5
 8009396:	2200      	movs	r2, #0
 8009398:	5e9b      	ldrsh	r3, [r3, r2]
 800939a:	e01a      	b.n	80093d2 <probe_sen5x+0x1ee>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800939c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800939e:	f7fa f861 	bl	8003464 <__aeabi_f2d>
 80093a2:	0002      	movs	r2, r0
 80093a4:	000b      	movs	r3, r1
 80093a6:	4818      	ldr	r0, [pc, #96]	@ (8009408 <probe_sen5x+0x224>)
 80093a8:	4918      	ldr	r1, [pc, #96]	@ (800940c <probe_sen5x+0x228>)
 80093aa:	9200      	str	r2, [sp, #0]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	0002      	movs	r2, r0
 80093b0:	2002      	movs	r0, #2
 80093b2:	f005 f887 	bl	800e4c4 <CreateLine>
  }
  sen5x_Power_Off();
 80093b6:	f7ff fedf 	bl	8009178 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 80093ba:	f005 fcc3 	bl	800ed44 <HAL_GetTick>
 80093be:	0003      	movs	r3, r0
 80093c0:	22fa      	movs	r2, #250	@ 0xfa
 80093c2:	00d2      	lsls	r2, r2, #3
 80093c4:	189a      	adds	r2, r3, r2
 80093c6:	4b12      	ldr	r3, [pc, #72]	@ (8009410 <probe_sen5x+0x22c>)
 80093c8:	601a      	str	r2, [r3, #0]
  return error;
 80093ca:	2336      	movs	r3, #54	@ 0x36
 80093cc:	18fb      	adds	r3, r7, r3
 80093ce:	2200      	movs	r2, #0
 80093d0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80093d2:	0018      	movs	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b00f      	add	sp, #60	@ 0x3c
 80093d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	08024608 	.word	0x08024608
 80093e0:	08024634 	.word	0x08024634
 80093e4:	08024638 	.word	0x08024638
 80093e8:	08024668 	.word	0x08024668
 80093ec:	20001068 	.word	0x20001068
 80093f0:	0802467c 	.word	0x0802467c
 80093f4:	080246ac 	.word	0x080246ac
 80093f8:	080246c0 	.word	0x080246c0
 80093fc:	080246ec 	.word	0x080246ec
 8009400:	43480000 	.word	0x43480000
 8009404:	08024710 	.word	0x08024710
 8009408:	08024750 	.word	0x08024750
 800940c:	08024578 	.word	0x08024578
 8009410:	2000107c 	.word	0x2000107c

08009414 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009414:	b590      	push	{r4, r7, lr}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800941a:	1dbb      	adds	r3, r7, #6
 800941c:	2200      	movs	r2, #0
 800941e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009420:	4b1b      	ldr	r3, [pc, #108]	@ (8009490 <sen5x_lightup_measurement+0x7c>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 8009428:	4a1a      	ldr	r2, [pc, #104]	@ (8009494 <sen5x_lightup_measurement+0x80>)
 800942a:	4b1b      	ldr	r3, [pc, #108]	@ (8009498 <sen5x_lightup_measurement+0x84>)
 800942c:	0019      	movs	r1, r3
 800942e:	2002      	movs	r0, #2
 8009430:	f005 f848 	bl	800e4c4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009434:	1dbc      	adds	r4, r7, #6
 8009436:	f000 fcab 	bl	8009d90 <sen5x_start_measurement_without_pm>
 800943a:	0003      	movs	r3, r0
 800943c:	8023      	strh	r3, [r4, #0]
 800943e:	e00a      	b.n	8009456 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009440:	4a16      	ldr	r2, [pc, #88]	@ (800949c <sen5x_lightup_measurement+0x88>)
 8009442:	4b15      	ldr	r3, [pc, #84]	@ (8009498 <sen5x_lightup_measurement+0x84>)
 8009444:	0019      	movs	r1, r3
 8009446:	2002      	movs	r0, #2
 8009448:	f005 f83c 	bl	800e4c4 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800944c:	1dbc      	adds	r4, r7, #6
 800944e:	f000 fc71 	bl	8009d34 <sen5x_start_measurement>
 8009452:	0003      	movs	r3, r0
 8009454:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 8009456:	1dbb      	adds	r3, r7, #6
 8009458:	2200      	movs	r2, #0
 800945a:	5e9b      	ldrsh	r3, [r3, r2]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d008      	beq.n	8009472 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009460:	1dbb      	adds	r3, r7, #6
 8009462:	2200      	movs	r2, #0
 8009464:	5e9b      	ldrsh	r3, [r3, r2]
 8009466:	4a0e      	ldr	r2, [pc, #56]	@ (80094a0 <sen5x_lightup_measurement+0x8c>)
 8009468:	490e      	ldr	r1, [pc, #56]	@ (80094a4 <sen5x_lightup_measurement+0x90>)
 800946a:	2001      	movs	r0, #1
 800946c:	f005 f82a 	bl	800e4c4 <CreateLine>
 8009470:	e007      	b.n	8009482 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009472:	f7fd f81b 	bl	80064ac <showTime>
    Info("sen5x_start_measurement executed");
 8009476:	4a0c      	ldr	r2, [pc, #48]	@ (80094a8 <sen5x_lightup_measurement+0x94>)
 8009478:	4b07      	ldr	r3, [pc, #28]	@ (8009498 <sen5x_lightup_measurement+0x84>)
 800947a:	0019      	movs	r1, r3
 800947c:	2002      	movs	r0, #2
 800947e:	f005 f821 	bl	800e4c4 <CreateLine>
  }
  return error;
 8009482:	1dbb      	adds	r3, r7, #6
 8009484:	2200      	movs	r2, #0
 8009486:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009488:	0018      	movs	r0, r3
 800948a:	46bd      	mov	sp, r7
 800948c:	b003      	add	sp, #12
 800948e:	bd90      	pop	{r4, r7, pc}
 8009490:	20001066 	.word	0x20001066
 8009494:	08024788 	.word	0x08024788
 8009498:	08024578 	.word	0x08024578
 800949c:	080247b4 	.word	0x080247b4
 80094a0:	080247d4 	.word	0x080247d4
 80094a4:	08024634 	.word	0x08024634
 80094a8:	08024804 	.word	0x08024804

080094ac <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
  int16_t error = 0;
 80094b2:	1dbb      	adds	r3, r7, #6
 80094b4:	2200      	movs	r2, #0
 80094b6:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 80094b8:	4b21      	ldr	r3, [pc, #132]	@ (8009540 <sen5x_extinguish_measurement+0x94>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01e      	beq.n	80094fe <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 80094c0:	4a20      	ldr	r2, [pc, #128]	@ (8009544 <sen5x_extinguish_measurement+0x98>)
 80094c2:	4b21      	ldr	r3, [pc, #132]	@ (8009548 <sen5x_extinguish_measurement+0x9c>)
 80094c4:	0019      	movs	r1, r3
 80094c6:	2002      	movs	r0, #2
 80094c8:	f004 fffc 	bl	800e4c4 <CreateLine>
    Info("PM measurement is disabled");
 80094cc:	4a1f      	ldr	r2, [pc, #124]	@ (800954c <sen5x_extinguish_measurement+0xa0>)
 80094ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009548 <sen5x_extinguish_measurement+0x9c>)
 80094d0:	0019      	movs	r1, r3
 80094d2:	2002      	movs	r0, #2
 80094d4:	f004 fff6 	bl	800e4c4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80094d8:	1dbc      	adds	r4, r7, #6
 80094da:	f000 fc59 	bl	8009d90 <sen5x_start_measurement_without_pm>
 80094de:	0003      	movs	r3, r0
 80094e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 80094e2:	1dbb      	adds	r3, r7, #6
 80094e4:	2200      	movs	r2, #0
 80094e6:	5e9b      	ldrsh	r3, [r3, r2]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 80094ec:	1dbb      	adds	r3, r7, #6
 80094ee:	2200      	movs	r2, #0
 80094f0:	5e9b      	ldrsh	r3, [r3, r2]
 80094f2:	4a17      	ldr	r2, [pc, #92]	@ (8009550 <sen5x_extinguish_measurement+0xa4>)
 80094f4:	4917      	ldr	r1, [pc, #92]	@ (8009554 <sen5x_extinguish_measurement+0xa8>)
 80094f6:	2001      	movs	r0, #1
 80094f8:	f004 ffe4 	bl	800e4c4 <CreateLine>
 80094fc:	e019      	b.n	8009532 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 80094fe:	1dbc      	adds	r4, r7, #6
 8009500:	f000 fc74 	bl	8009dec <sen5x_stop_measurement>
 8009504:	0003      	movs	r3, r0
 8009506:	8023      	strh	r3, [r4, #0]
    showTime();
 8009508:	f7fc ffd0 	bl	80064ac <showTime>
    Info("sen5x_stop_measurement executed");
 800950c:	4a12      	ldr	r2, [pc, #72]	@ (8009558 <sen5x_extinguish_measurement+0xac>)
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <sen5x_extinguish_measurement+0x9c>)
 8009510:	0019      	movs	r1, r3
 8009512:	2002      	movs	r0, #2
 8009514:	f004 ffd6 	bl	800e4c4 <CreateLine>
    if (error) {
 8009518:	1dbb      	adds	r3, r7, #6
 800951a:	2200      	movs	r2, #0
 800951c:	5e9b      	ldrsh	r3, [r3, r2]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009522:	1dbb      	adds	r3, r7, #6
 8009524:	2200      	movs	r2, #0
 8009526:	5e9b      	ldrsh	r3, [r3, r2]
 8009528:	4a0c      	ldr	r2, [pc, #48]	@ (800955c <sen5x_extinguish_measurement+0xb0>)
 800952a:	490a      	ldr	r1, [pc, #40]	@ (8009554 <sen5x_extinguish_measurement+0xa8>)
 800952c:	2001      	movs	r0, #1
 800952e:	f004 ffc9 	bl	800e4c4 <CreateLine>
    }
  }
  return error;
 8009532:	1dbb      	adds	r3, r7, #6
 8009534:	2200      	movs	r2, #0
 8009536:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009538:	0018      	movs	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	b003      	add	sp, #12
 800953e:	bd90      	pop	{r4, r7, pc}
 8009540:	20001066 	.word	0x20001066
 8009544:	08024828 	.word	0x08024828
 8009548:	08024578 	.word	0x08024578
 800954c:	08024860 	.word	0x08024860
 8009550:	0802487c 	.word	0x0802487c
 8009554:	08024634 	.word	0x08024634
 8009558:	080248bc 	.word	0x080248bc
 800955c:	080248dc 	.word	0x080248dc

08009560 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009562:	b08d      	sub	sp, #52	@ 0x34
 8009564:	af04      	add	r7, sp, #16
 8009566:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009568:	261e      	movs	r6, #30
 800956a:	19bb      	adds	r3, r7, r6
 800956c:	2200      	movs	r2, #0
 800956e:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009570:	19bc      	adds	r4, r7, r6
 8009572:	2316      	movs	r3, #22
 8009574:	18fd      	adds	r5, r7, r3
 8009576:	2318      	movs	r3, #24
 8009578:	18fa      	adds	r2, r7, r3
 800957a:	231a      	movs	r3, #26
 800957c:	18f9      	adds	r1, r7, r3
 800957e:	231c      	movs	r3, #28
 8009580:	18f8      	adds	r0, r7, r3
 8009582:	230e      	movs	r3, #14
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	2310      	movs	r3, #16
 800958a:	18fb      	adds	r3, r7, r3
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	2312      	movs	r3, #18
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	2314      	movs	r3, #20
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	002b      	movs	r3, r5
 800959c:	f000 fca8 	bl	8009ef0 <sen5x_read_measured_values>
 80095a0:	0003      	movs	r3, r0
 80095a2:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 80095a4:	19bb      	adds	r3, r7, r6
 80095a6:	2200      	movs	r2, #0
 80095a8:	5e9b      	ldrsh	r3, [r3, r2]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <sen5x_read_measurement+0x56>
    return error;
 80095ae:	19bb      	adds	r3, r7, r6
 80095b0:	2200      	movs	r2, #0
 80095b2:	5e9b      	ldrsh	r3, [r3, r2]
 80095b4:	e02c      	b.n	8009610 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 80095b6:	231c      	movs	r3, #28
 80095b8:	18fb      	adds	r3, r7, r3
 80095ba:	881a      	ldrh	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 80095c0:	231a      	movs	r3, #26
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	881a      	ldrh	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 80095ca:	2318      	movs	r3, #24
 80095cc:	18fb      	adds	r3, r7, r3
 80095ce:	881a      	ldrh	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80095d4:	2316      	movs	r3, #22
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	881a      	ldrh	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80095de:	2314      	movs	r3, #20
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	2200      	movs	r2, #0
 80095e4:	5e9a      	ldrsh	r2, [r3, r2]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80095ea:	2312      	movs	r3, #18
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	2200      	movs	r2, #0
 80095f0:	5e9a      	ldrsh	r2, [r3, r2]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80095f6:	2310      	movs	r3, #16
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	2200      	movs	r2, #0
 80095fc:	5e9a      	ldrsh	r2, [r3, r2]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8009602:	230e      	movs	r3, #14
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	2200      	movs	r2, #0
 8009608:	5e9a      	ldrsh	r2, [r3, r2]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	81da      	strh	r2, [r3, #14]
  return 0;
 800960e:	2300      	movs	r3, #0
}
 8009610:	0018      	movs	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	b009      	add	sp, #36	@ 0x24
 8009616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009618 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800961c:	4b69      	ldr	r3, [pc, #420]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	4a69      	ldr	r2, [pc, #420]	@ (80097c8 <sen5x_printvalues+0x1b0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d013      	beq.n	800964e <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8009626:	4b67      	ldr	r3, [pc, #412]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	0018      	movs	r0, r3
 800962c:	f7f7 ffd0 	bl	80015d0 <__aeabi_i2f>
 8009630:	1c03      	adds	r3, r0, #0
 8009632:	4966      	ldr	r1, [pc, #408]	@ (80097cc <sen5x_printvalues+0x1b4>)
 8009634:	1c18      	adds	r0, r3, #0
 8009636:	f7f7 facd 	bl	8000bd4 <__aeabi_fdiv>
 800963a:	1c03      	adds	r3, r0, #0
 800963c:	1c18      	adds	r0, r3, #0
 800963e:	f7f9 ff11 	bl	8003464 <__aeabi_f2d>
 8009642:	0002      	movs	r2, r0
 8009644:	000b      	movs	r3, r1
 8009646:	4962      	ldr	r1, [pc, #392]	@ (80097d0 <sen5x_printvalues+0x1b8>)
 8009648:	0008      	movs	r0, r1
 800964a:	f016 fc1f 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800964e:	4b5d      	ldr	r3, [pc, #372]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	4a5d      	ldr	r2, [pc, #372]	@ (80097c8 <sen5x_printvalues+0x1b0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d013      	beq.n	8009680 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009658:	4b5a      	ldr	r3, [pc, #360]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 800965a:	885b      	ldrh	r3, [r3, #2]
 800965c:	0018      	movs	r0, r3
 800965e:	f7f7 ffb7 	bl	80015d0 <__aeabi_i2f>
 8009662:	1c03      	adds	r3, r0, #0
 8009664:	4959      	ldr	r1, [pc, #356]	@ (80097cc <sen5x_printvalues+0x1b4>)
 8009666:	1c18      	adds	r0, r3, #0
 8009668:	f7f7 fab4 	bl	8000bd4 <__aeabi_fdiv>
 800966c:	1c03      	adds	r3, r0, #0
 800966e:	1c18      	adds	r0, r3, #0
 8009670:	f7f9 fef8 	bl	8003464 <__aeabi_f2d>
 8009674:	0002      	movs	r2, r0
 8009676:	000b      	movs	r3, r1
 8009678:	4956      	ldr	r1, [pc, #344]	@ (80097d4 <sen5x_printvalues+0x1bc>)
 800967a:	0008      	movs	r0, r1
 800967c:	f016 fc06 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009680:	4b50      	ldr	r3, [pc, #320]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009682:	889b      	ldrh	r3, [r3, #4]
 8009684:	4a50      	ldr	r2, [pc, #320]	@ (80097c8 <sen5x_printvalues+0x1b0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d013      	beq.n	80096b2 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800968a:	4b4e      	ldr	r3, [pc, #312]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 800968c:	889b      	ldrh	r3, [r3, #4]
 800968e:	0018      	movs	r0, r3
 8009690:	f7f7 ff9e 	bl	80015d0 <__aeabi_i2f>
 8009694:	1c03      	adds	r3, r0, #0
 8009696:	494d      	ldr	r1, [pc, #308]	@ (80097cc <sen5x_printvalues+0x1b4>)
 8009698:	1c18      	adds	r0, r3, #0
 800969a:	f7f7 fa9b 	bl	8000bd4 <__aeabi_fdiv>
 800969e:	1c03      	adds	r3, r0, #0
 80096a0:	1c18      	adds	r0, r3, #0
 80096a2:	f7f9 fedf 	bl	8003464 <__aeabi_f2d>
 80096a6:	0002      	movs	r2, r0
 80096a8:	000b      	movs	r3, r1
 80096aa:	494b      	ldr	r1, [pc, #300]	@ (80097d8 <sen5x_printvalues+0x1c0>)
 80096ac:	0008      	movs	r0, r1
 80096ae:	f016 fbed 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 80096b2:	4b44      	ldr	r3, [pc, #272]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	4a44      	ldr	r2, [pc, #272]	@ (80097c8 <sen5x_printvalues+0x1b0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d013      	beq.n	80096e4 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 80096bc:	4b41      	ldr	r3, [pc, #260]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 80096be:	88db      	ldrh	r3, [r3, #6]
 80096c0:	0018      	movs	r0, r3
 80096c2:	f7f7 ff85 	bl	80015d0 <__aeabi_i2f>
 80096c6:	1c03      	adds	r3, r0, #0
 80096c8:	4940      	ldr	r1, [pc, #256]	@ (80097cc <sen5x_printvalues+0x1b4>)
 80096ca:	1c18      	adds	r0, r3, #0
 80096cc:	f7f7 fa82 	bl	8000bd4 <__aeabi_fdiv>
 80096d0:	1c03      	adds	r3, r0, #0
 80096d2:	1c18      	adds	r0, r3, #0
 80096d4:	f7f9 fec6 	bl	8003464 <__aeabi_f2d>
 80096d8:	0002      	movs	r2, r0
 80096da:	000b      	movs	r3, r1
 80096dc:	493f      	ldr	r1, [pc, #252]	@ (80097dc <sen5x_printvalues+0x1c4>)
 80096de:	0008      	movs	r0, r1
 80096e0:	f016 fbd4 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80096e4:	4b37      	ldr	r3, [pc, #220]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 80096e6:	2208      	movs	r2, #8
 80096e8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ea:	4a3d      	ldr	r2, [pc, #244]	@ (80097e0 <sen5x_printvalues+0x1c8>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d014      	beq.n	800971a <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80096f0:	4b34      	ldr	r3, [pc, #208]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 80096f2:	2208      	movs	r2, #8
 80096f4:	5e9b      	ldrsh	r3, [r3, r2]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f7f7 ff6a 	bl	80015d0 <__aeabi_i2f>
 80096fc:	1c03      	adds	r3, r0, #0
 80096fe:	4939      	ldr	r1, [pc, #228]	@ (80097e4 <sen5x_printvalues+0x1cc>)
 8009700:	1c18      	adds	r0, r3, #0
 8009702:	f7f7 fa67 	bl	8000bd4 <__aeabi_fdiv>
 8009706:	1c03      	adds	r3, r0, #0
 8009708:	1c18      	adds	r0, r3, #0
 800970a:	f7f9 feab 	bl	8003464 <__aeabi_f2d>
 800970e:	0002      	movs	r2, r0
 8009710:	000b      	movs	r3, r1
 8009712:	4935      	ldr	r1, [pc, #212]	@ (80097e8 <sen5x_printvalues+0x1d0>)
 8009714:	0008      	movs	r0, r1
 8009716:	f016 fbb9 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800971a:	4b2a      	ldr	r3, [pc, #168]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 800971c:	220a      	movs	r2, #10
 800971e:	5e9b      	ldrsh	r3, [r3, r2]
 8009720:	4a2f      	ldr	r2, [pc, #188]	@ (80097e0 <sen5x_printvalues+0x1c8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d014      	beq.n	8009750 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009726:	4b27      	ldr	r3, [pc, #156]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009728:	220a      	movs	r2, #10
 800972a:	5e9b      	ldrsh	r3, [r3, r2]
 800972c:	0018      	movs	r0, r3
 800972e:	f7f7 ff4f 	bl	80015d0 <__aeabi_i2f>
 8009732:	1c03      	adds	r3, r0, #0
 8009734:	492d      	ldr	r1, [pc, #180]	@ (80097ec <sen5x_printvalues+0x1d4>)
 8009736:	1c18      	adds	r0, r3, #0
 8009738:	f7f7 fa4c 	bl	8000bd4 <__aeabi_fdiv>
 800973c:	1c03      	adds	r3, r0, #0
 800973e:	1c18      	adds	r0, r3, #0
 8009740:	f7f9 fe90 	bl	8003464 <__aeabi_f2d>
 8009744:	0002      	movs	r2, r0
 8009746:	000b      	movs	r3, r1
 8009748:	4929      	ldr	r1, [pc, #164]	@ (80097f0 <sen5x_printvalues+0x1d8>)
 800974a:	0008      	movs	r0, r1
 800974c:	f016 fb9e 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009752:	220c      	movs	r2, #12
 8009754:	5e9b      	ldrsh	r3, [r3, r2]
 8009756:	4a22      	ldr	r2, [pc, #136]	@ (80097e0 <sen5x_printvalues+0x1c8>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d014      	beq.n	8009786 <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 800975c:	4b19      	ldr	r3, [pc, #100]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 800975e:	220c      	movs	r2, #12
 8009760:	5e9b      	ldrsh	r3, [r3, r2]
 8009762:	0018      	movs	r0, r3
 8009764:	f7f7 ff34 	bl	80015d0 <__aeabi_i2f>
 8009768:	1c03      	adds	r3, r0, #0
 800976a:	4918      	ldr	r1, [pc, #96]	@ (80097cc <sen5x_printvalues+0x1b4>)
 800976c:	1c18      	adds	r0, r3, #0
 800976e:	f7f7 fa31 	bl	8000bd4 <__aeabi_fdiv>
 8009772:	1c03      	adds	r3, r0, #0
 8009774:	1c18      	adds	r0, r3, #0
 8009776:	f7f9 fe75 	bl	8003464 <__aeabi_f2d>
 800977a:	0002      	movs	r2, r0
 800977c:	000b      	movs	r3, r1
 800977e:	491d      	ldr	r1, [pc, #116]	@ (80097f4 <sen5x_printvalues+0x1dc>)
 8009780:	0008      	movs	r0, r1
 8009782:	f016 fb83 	bl	801fe8c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009786:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009788:	220e      	movs	r2, #14
 800978a:	5e9b      	ldrsh	r3, [r3, r2]
 800978c:	4a14      	ldr	r2, [pc, #80]	@ (80097e0 <sen5x_printvalues+0x1c8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d014      	beq.n	80097bc <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009792:	4b0c      	ldr	r3, [pc, #48]	@ (80097c4 <sen5x_printvalues+0x1ac>)
 8009794:	220e      	movs	r2, #14
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	0018      	movs	r0, r3
 800979a:	f7f7 ff19 	bl	80015d0 <__aeabi_i2f>
 800979e:	1c03      	adds	r3, r0, #0
 80097a0:	490a      	ldr	r1, [pc, #40]	@ (80097cc <sen5x_printvalues+0x1b4>)
 80097a2:	1c18      	adds	r0, r3, #0
 80097a4:	f7f7 fa16 	bl	8000bd4 <__aeabi_fdiv>
 80097a8:	1c03      	adds	r3, r0, #0
 80097aa:	1c18      	adds	r0, r3, #0
 80097ac:	f7f9 fe5a 	bl	8003464 <__aeabi_f2d>
 80097b0:	0002      	movs	r2, r0
 80097b2:	000b      	movs	r3, r1
 80097b4:	4910      	ldr	r1, [pc, #64]	@ (80097f8 <sen5x_printvalues+0x1e0>)
 80097b6:	0008      	movs	r0, r1
 80097b8:	f016 fb68 	bl	801fe8c <iprintf>
  }
}
 80097bc:	46c0      	nop			@ (mov r8, r8)
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	20001080 	.word	0x20001080
 80097c8:	0000ffff 	.word	0x0000ffff
 80097cc:	41200000 	.word	0x41200000
 80097d0:	0802490c 	.word	0x0802490c
 80097d4:	08024938 	.word	0x08024938
 80097d8:	08024964 	.word	0x08024964
 80097dc:	08024990 	.word	0x08024990
 80097e0:	00007fff 	.word	0x00007fff
 80097e4:	42c80000 	.word	0x42c80000
 80097e8:	080249bc 	.word	0x080249bc
 80097ec:	43480000 	.word	0x43480000
 80097f0:	080249e0 	.word	0x080249e0
 80097f4:	08024a08 	.word	0x08024a08
 80097f8:	08024a20 	.word	0x08024a20

080097fc <sen5xStoreMax>:

void sen5xStoreMax() {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 8009800:	4b32      	ldr	r3, [pc, #200]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009802:	885b      	ldrh	r3, [r3, #2]
 8009804:	4a32      	ldr	r2, [pc, #200]	@ (80098d0 <sen5xStoreMax+0xd4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d009      	beq.n	800981e <sen5xStoreMax+0x22>
 800980a:	4b30      	ldr	r3, [pc, #192]	@ (80098cc <sen5xStoreMax+0xd0>)
 800980c:	885a      	ldrh	r2, [r3, #2]
 800980e:	4b31      	ldr	r3, [pc, #196]	@ (80098d4 <sen5xStoreMax+0xd8>)
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d903      	bls.n	800981e <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 8009816:	4b2d      	ldr	r3, [pc, #180]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009818:	885a      	ldrh	r2, [r3, #2]
 800981a:	4b2e      	ldr	r3, [pc, #184]	@ (80098d4 <sen5xStoreMax+0xd8>)
 800981c:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 800981e:	4b2b      	ldr	r3, [pc, #172]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	4a2b      	ldr	r2, [pc, #172]	@ (80098d0 <sen5xStoreMax+0xd4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d009      	beq.n	800983c <sen5xStoreMax+0x40>
 8009828:	4b28      	ldr	r3, [pc, #160]	@ (80098cc <sen5xStoreMax+0xd0>)
 800982a:	88da      	ldrh	r2, [r3, #6]
 800982c:	4b2a      	ldr	r3, [pc, #168]	@ (80098d8 <sen5xStoreMax+0xdc>)
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 8009834:	4b25      	ldr	r3, [pc, #148]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009836:	88da      	ldrh	r2, [r3, #6]
 8009838:	4b27      	ldr	r3, [pc, #156]	@ (80098d8 <sen5xStoreMax+0xdc>)
 800983a:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 800983c:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <sen5xStoreMax+0xd0>)
 800983e:	220c      	movs	r2, #12
 8009840:	5e9b      	ldrsh	r3, [r3, r2]
 8009842:	4a26      	ldr	r2, [pc, #152]	@ (80098dc <sen5xStoreMax+0xe0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00d      	beq.n	8009864 <sen5xStoreMax+0x68>
 8009848:	4b20      	ldr	r3, [pc, #128]	@ (80098cc <sen5xStoreMax+0xd0>)
 800984a:	220c      	movs	r2, #12
 800984c:	5e9b      	ldrsh	r3, [r3, r2]
 800984e:	001a      	movs	r2, r3
 8009850:	4b23      	ldr	r3, [pc, #140]	@ (80098e0 <sen5xStoreMax+0xe4>)
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	dd05      	ble.n	8009864 <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 8009858:	4b1c      	ldr	r3, [pc, #112]	@ (80098cc <sen5xStoreMax+0xd0>)
 800985a:	220c      	movs	r2, #12
 800985c:	5e9b      	ldrsh	r3, [r3, r2]
 800985e:	b29a      	uxth	r2, r3
 8009860:	4b1f      	ldr	r3, [pc, #124]	@ (80098e0 <sen5xStoreMax+0xe4>)
 8009862:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 8009864:	4b19      	ldr	r3, [pc, #100]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009866:	220e      	movs	r2, #14
 8009868:	5e9b      	ldrsh	r3, [r3, r2]
 800986a:	4a1c      	ldr	r2, [pc, #112]	@ (80098dc <sen5xStoreMax+0xe0>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00d      	beq.n	800988c <sen5xStoreMax+0x90>
 8009870:	4b16      	ldr	r3, [pc, #88]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009872:	220e      	movs	r2, #14
 8009874:	5e9b      	ldrsh	r3, [r3, r2]
 8009876:	001a      	movs	r2, r3
 8009878:	4b1a      	ldr	r3, [pc, #104]	@ (80098e4 <sen5xStoreMax+0xe8>)
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	dd05      	ble.n	800988c <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009880:	4b12      	ldr	r3, [pc, #72]	@ (80098cc <sen5xStoreMax+0xd0>)
 8009882:	220e      	movs	r2, #14
 8009884:	5e9b      	ldrsh	r3, [r3, r2]
 8009886:	b29a      	uxth	r2, r3
 8009888:	4b16      	ldr	r3, [pc, #88]	@ (80098e4 <sen5xStoreMax+0xe8>)
 800988a:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800988c:	4b16      	ldr	r3, [pc, #88]	@ (80098e8 <sen5xStoreMax+0xec>)
 800988e:	791b      	ldrb	r3, [r3, #4]
 8009890:	2b34      	cmp	r3, #52	@ 0x34
 8009892:	d003      	beq.n	800989c <sen5xStoreMax+0xa0>
 8009894:	4b14      	ldr	r3, [pc, #80]	@ (80098e8 <sen5xStoreMax+0xec>)
 8009896:	791b      	ldrb	r3, [r3, #4]
 8009898:	2b35      	cmp	r3, #53	@ 0x35
 800989a:	d10a      	bne.n	80098b2 <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 800989c:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <sen5xStoreMax+0xd8>)
 800989e:	8818      	ldrh	r0, [r3, #0]
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <sen5xStoreMax+0xdc>)
 80098a2:	8819      	ldrh	r1, [r3, #0]
 80098a4:	4b0e      	ldr	r3, [pc, #56]	@ (80098e0 <sen5xStoreMax+0xe4>)
 80098a6:	881a      	ldrh	r2, [r3, #0]
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <sen5xStoreMax+0xe8>)
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	f7fa f880 	bl	80039b0 <setPMs>
 80098b0:	e008      	b.n	80098c4 <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 80098b2:	4b08      	ldr	r3, [pc, #32]	@ (80098d4 <sen5xStoreMax+0xd8>)
 80098b4:	881a      	ldrh	r2, [r3, #0]
 80098b6:	4b08      	ldr	r3, [pc, #32]	@ (80098d8 <sen5xStoreMax+0xdc>)
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	0019      	movs	r1, r3
 80098bc:	0010      	movs	r0, r2
 80098be:	f7fa f849 	bl	8003954 <setPMsen50>
  }
}
 80098c2:	46c0      	nop			@ (mov r8, r8)
 80098c4:	46c0      	nop			@ (mov r8, r8)
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	20001080 	.word	0x20001080
 80098d0:	0000ffff 	.word	0x0000ffff
 80098d4:	20001072 	.word	0x20001072
 80098d8:	20001074 	.word	0x20001074
 80098dc:	00007fff 	.word	0x00007fff
 80098e0:	20001076 	.word	0x20001076
 80098e4:	20001078 	.word	0x20001078
 80098e8:	20001068 	.word	0x20001068

080098ec <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	6039      	str	r1, [r7, #0]
 80098f4:	0011      	movs	r1, r2
 80098f6:	1dfb      	adds	r3, r7, #7
 80098f8:	1c02      	adds	r2, r0, #0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	1d3b      	adds	r3, r7, #4
 80098fe:	1c0a      	adds	r2, r1, #0
 8009900:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009902:	1dfb      	adds	r3, r7, #7
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	18db      	adds	r3, r3, r3
 800990a:	b299      	uxth	r1, r3
 800990c:	1d3b      	adds	r3, r7, #4
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	4805      	ldr	r0, [pc, #20]	@ (8009928 <sensirion_i2c_hal_read+0x3c>)
 8009914:	2464      	movs	r4, #100	@ 0x64
 8009916:	9400      	str	r4, [sp, #0]
 8009918:	f006 fe7c 	bl	8010614 <HAL_I2C_Master_Receive>
 800991c:	0003      	movs	r3, r0
 800991e:	b25b      	sxtb	r3, r3
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b003      	add	sp, #12
 8009926:	bd90      	pop	{r4, r7, pc}
 8009928:	20000e48 	.word	0x20000e48

0800992c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b085      	sub	sp, #20
 8009930:	af02      	add	r7, sp, #8
 8009932:	6039      	str	r1, [r7, #0]
 8009934:	0011      	movs	r1, r2
 8009936:	1dfb      	adds	r3, r7, #7
 8009938:	1c02      	adds	r2, r0, #0
 800993a:	701a      	strb	r2, [r3, #0]
 800993c:	1d3b      	adds	r3, r7, #4
 800993e:	1c0a      	adds	r2, r1, #0
 8009940:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009942:	1dfb      	adds	r3, r7, #7
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	18db      	adds	r3, r3, r3
 800994a:	b299      	uxth	r1, r3
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4805      	ldr	r0, [pc, #20]	@ (8009968 <sensirion_i2c_hal_write+0x3c>)
 8009954:	2464      	movs	r4, #100	@ 0x64
 8009956:	9400      	str	r4, [sp, #0]
 8009958:	f006 fd54 	bl	8010404 <HAL_I2C_Master_Transmit>
 800995c:	0003      	movs	r3, r0
 800995e:	b25b      	sxtb	r3, r3
}
 8009960:	0018      	movs	r0, r3
 8009962:	46bd      	mov	sp, r7
 8009964:	b003      	add	sp, #12
 8009966:	bd90      	pop	{r4, r7, pc}
 8009968:	20000e48 	.word	0x20000e48

0800996c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	22fa      	movs	r2, #250	@ 0xfa
 8009978:	0091      	lsls	r1, r2, #2
 800997a:	0018      	movs	r0, r3
 800997c:	f7f6 fc12 	bl	80001a4 <__udivsi3>
 8009980:	0003      	movs	r3, r0
 8009982:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	22fa      	movs	r2, #250	@ 0xfa
 8009988:	0091      	lsls	r1, r2, #2
 800998a:	0018      	movs	r0, r3
 800998c:	f7f6 fc90 	bl	80002b0 <__aeabi_uidivmod>
 8009990:	1e0b      	subs	r3, r1, #0
 8009992:	d002      	beq.n	800999a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3301      	adds	r3, #1
 8009998:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	0018      	movs	r0, r3
 800999e:	f005 f9db 	bl	800ed58 <HAL_Delay>
}
 80099a2:	46c0      	nop			@ (mov r8, r8)
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b004      	add	sp, #16
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	0018      	movs	r0, r3
 80099ba:	f000 fcd9 	bl	800a370 <sen5x_read_device_status>
 80099be:	1e03      	subs	r3, r0, #0
 80099c0:	d007      	beq.n	80099d2 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 80099c2:	4a28      	ldr	r2, [pc, #160]	@ (8009a64 <sen5x_check_for_errors+0xb8>)
 80099c4:	4b28      	ldr	r3, [pc, #160]	@ (8009a68 <sen5x_check_for_errors+0xbc>)
 80099c6:	0019      	movs	r1, r3
 80099c8:	2001      	movs	r0, #1
 80099ca:	f004 fd7b 	bl	800e4c4 <CreateLine>
    return 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e043      	b.n	8009a5a <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <sen5x_check_for_errors+0x30>
    return 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	e03e      	b.n	8009a5a <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	2380      	movs	r3, #128	@ 0x80
 80099e0:	039b      	lsls	r3, r3, #14
 80099e2:	4013      	ands	r3, r2
 80099e4:	d005      	beq.n	80099f2 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80099e6:	4a21      	ldr	r2, [pc, #132]	@ (8009a6c <sen5x_check_for_errors+0xc0>)
 80099e8:	4b21      	ldr	r3, [pc, #132]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 80099ea:	0019      	movs	r1, r3
 80099ec:	2003      	movs	r0, #3
 80099ee:	f004 fd69 	bl	800e4c4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	2380      	movs	r3, #128	@ 0x80
 80099f6:	031b      	lsls	r3, r3, #12
 80099f8:	4013      	ands	r3, r2
 80099fa:	d005      	beq.n	8009a08 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80099fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009a74 <sen5x_check_for_errors+0xc8>)
 80099fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 8009a00:	0019      	movs	r1, r3
 8009a02:	2003      	movs	r0, #3
 8009a04:	f004 fd5e 	bl	800e4c4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2280      	movs	r2, #128	@ 0x80
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	d005      	beq.n	8009a1c <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009a10:	4a19      	ldr	r2, [pc, #100]	@ (8009a78 <sen5x_check_for_errors+0xcc>)
 8009a12:	4b17      	ldr	r3, [pc, #92]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 8009a14:	0019      	movs	r1, r3
 8009a16:	2003      	movs	r0, #3
 8009a18:	f004 fd54 	bl	800e4c4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2240      	movs	r2, #64	@ 0x40
 8009a20:	4013      	ands	r3, r2
 8009a22:	d005      	beq.n	8009a30 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009a24:	4a15      	ldr	r2, [pc, #84]	@ (8009a7c <sen5x_check_for_errors+0xd0>)
 8009a26:	4b12      	ldr	r3, [pc, #72]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 8009a28:	0019      	movs	r1, r3
 8009a2a:	2003      	movs	r0, #3
 8009a2c:	f004 fd4a 	bl	800e4c4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	4013      	ands	r3, r2
 8009a36:	d005      	beq.n	8009a44 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009a38:	4a11      	ldr	r2, [pc, #68]	@ (8009a80 <sen5x_check_for_errors+0xd4>)
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 8009a3c:	0019      	movs	r1, r3
 8009a3e:	2003      	movs	r0, #3
 8009a40:	f004 fd40 	bl	800e4c4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2210      	movs	r2, #16
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d005      	beq.n	8009a58 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8009a84 <sen5x_check_for_errors+0xd8>)
 8009a4e:	4b08      	ldr	r3, [pc, #32]	@ (8009a70 <sen5x_check_for_errors+0xc4>)
 8009a50:	0019      	movs	r1, r3
 8009a52:	2003      	movs	r0, #3
 8009a54:	f004 fd36 	bl	800e4c4 <CreateLine>
  }
  return 1;
 8009a58:	2301      	movs	r3, #1
}
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	b002      	add	sp, #8
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	46c0      	nop			@ (mov r8, r8)
 8009a64:	08024a38 	.word	0x08024a38
 8009a68:	08024634 	.word	0x08024634
 8009a6c:	08024a64 	.word	0x08024a64
 8009a70:	080245b8 	.word	0x080245b8
 8009a74:	08024a84 	.word	0x08024a84
 8009a78:	08024aa0 	.word	0x08024aa0
 8009a7c:	08024ac4 	.word	0x08024ac4
 8009a80:	08024ae4 	.word	0x08024ae4
 8009a84:	08024af8 	.word	0x08024af8

08009a88 <set_light_on_state>:

void set_light_on_state(void) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a8c:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <set_light_on_state+0x5c>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2201      	movs	r2, #1
 8009a92:	4053      	eors	r3, r2
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a9a:	f7ff fb4f 	bl	800913c <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009a9e:	4a12      	ldr	r2, [pc, #72]	@ (8009ae8 <set_light_on_state+0x60>)
 8009aa0:	4b12      	ldr	r3, [pc, #72]	@ (8009aec <set_light_on_state+0x64>)
 8009aa2:	0019      	movs	r1, r3
 8009aa4:	2003      	movs	r0, #3
 8009aa6:	f004 fd0d 	bl	800e4c4 <CreateLine>
 8009aaa:	e00a      	b.n	8009ac2 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009aac:	f005 f94a 	bl	800ed44 <HAL_GetTick>
 8009ab0:	0002      	movs	r2, r0
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8009af0 <set_light_on_state+0x68>)
 8009ab4:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8009af4 <set_light_on_state+0x6c>)
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8009aec <set_light_on_state+0x64>)
 8009aba:	0019      	movs	r1, r3
 8009abc:	2003      	movs	r0, #3
 8009abe:	f004 fd01 	bl	800e4c4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009ac2:	f7ff fca7 	bl	8009414 <sen5x_lightup_measurement>
 8009ac6:	1e03      	subs	r3, r0, #0
 8009ac8:	d005      	beq.n	8009ad6 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009aca:	4a0b      	ldr	r2, [pc, #44]	@ (8009af8 <set_light_on_state+0x70>)
 8009acc:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <set_light_on_state+0x74>)
 8009ace:	0019      	movs	r1, r3
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	f004 fcf7 	bl	800e4c4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <set_light_on_state+0x78>)
 8009ad8:	2203      	movs	r2, #3
 8009ada:	701a      	strb	r2, [r3, #0]
}
 8009adc:	46c0      	nop			@ (mov r8, r8)
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	46c0      	nop			@ (mov r8, r8)
 8009ae4:	20001065 	.word	0x20001065
 8009ae8:	08024b34 	.word	0x08024b34
 8009aec:	080245b8 	.word	0x080245b8
 8009af0:	2000107c 	.word	0x2000107c
 8009af4:	08024b60 	.word	0x08024b60
 8009af8:	08024b78 	.word	0x08024b78
 8009afc:	08024634 	.word	0x08024634
 8009b00:	2000008d 	.word	0x2000008d

08009b04 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009b0a:	1dfb      	adds	r3, r7, #7
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009b10:	4b75      	ldr	r3, [pc, #468]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	0018      	movs	r0, r3
 8009b16:	f004 fc7f 	bl	800e418 <TimestampIsReached>
 8009b1a:	1e03      	subs	r3, r0, #0
 8009b1c:	d100      	bne.n	8009b20 <sen5x_statemachine+0x1c>
 8009b1e:	e0df      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009b20:	4b72      	ldr	r3, [pc, #456]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d900      	bls.n	8009b2a <sen5x_statemachine+0x26>
 8009b28:	e0da      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
 8009b2a:	009a      	lsls	r2, r3, #2
 8009b2c:	4b70      	ldr	r3, [pc, #448]	@ (8009cf0 <sen5x_statemachine+0x1ec>)
 8009b2e:	18d3      	adds	r3, r2, r3
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009b34:	4a6f      	ldr	r2, [pc, #444]	@ (8009cf4 <sen5x_statemachine+0x1f0>)
 8009b36:	4b70      	ldr	r3, [pc, #448]	@ (8009cf8 <sen5x_statemachine+0x1f4>)
 8009b38:	0019      	movs	r1, r3
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f004 fcc2 	bl	800e4c4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009b40:	f005 f900 	bl	800ed44 <HAL_GetTick>
 8009b44:	0003      	movs	r3, r0
 8009b46:	4a6d      	ldr	r2, [pc, #436]	@ (8009cfc <sen5x_statemachine+0x1f8>)
 8009b48:	189a      	adds	r2, r3, r2
 8009b4a:	4b67      	ldr	r3, [pc, #412]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009b4c:	601a      	str	r2, [r3, #0]
      break;
 8009b4e:	e0c7      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009b50:	f005 f8f8 	bl	800ed44 <HAL_GetTick>
 8009b54:	0003      	movs	r3, r0
 8009b56:	4a6a      	ldr	r2, [pc, #424]	@ (8009d00 <sen5x_statemachine+0x1fc>)
 8009b58:	189a      	adds	r2, r3, r2
 8009b5a:	4b63      	ldr	r3, [pc, #396]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009b5c:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009b5e:	f7ff ff93 	bl	8009a88 <set_light_on_state>
      break;
 8009b62:	e0bd      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009b64:	4b61      	ldr	r3, [pc, #388]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009b66:	2202      	movs	r2, #2
 8009b68:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009b6a:	4b66      	ldr	r3, [pc, #408]	@ (8009d04 <sen5x_statemachine+0x200>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d905      	bls.n	8009b7e <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009b72:	4b5e      	ldr	r3, [pc, #376]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b78:	f7ff fafe 	bl	8009178 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b7c:	e0ad      	b.n	8009cda <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b7e:	f7ff ff15 	bl	80099ac <sen5x_check_for_errors>
 8009b82:	1e03      	subs	r3, r0, #0
 8009b84:	d100      	bne.n	8009b88 <sen5x_statemachine+0x84>
 8009b86:	e0a8      	b.n	8009cda <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b88:	f000 fc44 	bl	800a414 <sen5x_device_reset>
 8009b8c:	1e03      	subs	r3, r0, #0
 8009b8e:	d006      	beq.n	8009b9e <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b90:	4a5d      	ldr	r2, [pc, #372]	@ (8009d08 <sen5x_statemachine+0x204>)
 8009b92:	4b59      	ldr	r3, [pc, #356]	@ (8009cf8 <sen5x_statemachine+0x1f4>)
 8009b94:	0019      	movs	r1, r3
 8009b96:	2001      	movs	r0, #1
 8009b98:	f004 fc94 	bl	800e4c4 <CreateLine>
 8009b9c:	e005      	b.n	8009baa <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8009d0c <sen5x_statemachine+0x208>)
 8009ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8009d10 <sen5x_statemachine+0x20c>)
 8009ba2:	0019      	movs	r1, r3
 8009ba4:	2002      	movs	r0, #2
 8009ba6:	f004 fc8d 	bl	800e4c4 <CreateLine>
          sen5xErrors++;
 8009baa:	4b56      	ldr	r3, [pc, #344]	@ (8009d04 <sen5x_statemachine+0x200>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	4b54      	ldr	r3, [pc, #336]	@ (8009d04 <sen5x_statemachine+0x200>)
 8009bb4:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009bb6:	f005 f8c5 	bl	800ed44 <HAL_GetTick>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	3396      	adds	r3, #150	@ 0x96
 8009bbe:	001a      	movs	r2, r3
 8009bc0:	4b49      	ldr	r3, [pc, #292]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009bc2:	601a      	str	r2, [r3, #0]
      break;
 8009bc4:	e089      	b.n	8009cda <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009bc6:	1dfb      	adds	r3, r7, #7
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f000 f93f 	bl	8009e4c <sen5x_read_data_ready>
      if (data_ready) {
 8009bce:	1dfb      	adds	r3, r7, #7
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d028      	beq.n	8009c28 <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009bd6:	f003 fc99 	bl	800d50c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009bda:	4b4e      	ldr	r3, [pc, #312]	@ (8009d14 <sen5x_statemachine+0x210>)
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f7ff fcbf 	bl	8009560 <sen5x_read_measurement>
 8009be2:	1e03      	subs	r3, r0, #0
 8009be4:	d005      	beq.n	8009bf2 <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009be6:	4a4c      	ldr	r2, [pc, #304]	@ (8009d18 <sen5x_statemachine+0x214>)
 8009be8:	4b43      	ldr	r3, [pc, #268]	@ (8009cf8 <sen5x_statemachine+0x1f4>)
 8009bea:	0019      	movs	r1, r3
 8009bec:	2001      	movs	r0, #1
 8009bee:	f004 fc69 	bl	800e4c4 <CreateLine>
        }
        sen5xSamples++;
 8009bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	4b48      	ldr	r3, [pc, #288]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009bfc:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009bfe:	f7ff fdfd 	bl	80097fc <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009c02:	4b46      	ldr	r3, [pc, #280]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b1f      	cmp	r3, #31
 8009c08:	d102      	bne.n	8009c10 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009c0a:	4b44      	ldr	r3, [pc, #272]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009c10:	4b42      	ldr	r3, [pc, #264]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d901      	bls.n	8009c1c <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009c18:	f7ff fdf0 	bl	80097fc <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d101      	bne.n	8009c28 <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009c24:	f7ff fcf8 	bl	8009618 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009c28:	4b3d      	ldr	r3, [pc, #244]	@ (8009d20 <sen5x_statemachine+0x21c>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d103      	bne.n	8009c38 <sen5x_statemachine+0x134>
 8009c30:	4b3a      	ldr	r3, [pc, #232]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d952      	bls.n	8009cde <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009c38:	4b2c      	ldr	r3, [pc, #176]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009c3e:	e04e      	b.n	8009cde <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009c40:	f7fc fee0 	bl	8006a04 <RTC_GetWeekday>
 8009c44:	0003      	movs	r3, r0
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d118      	bne.n	8009c7c <sen5x_statemachine+0x178>
 8009c4a:	4b36      	ldr	r3, [pc, #216]	@ (8009d24 <sen5x_statemachine+0x220>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4053      	eors	r3, r2
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d011      	beq.n	8009c7c <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009c58:	f000 f9de 	bl	800a018 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009c5c:	4a32      	ldr	r2, [pc, #200]	@ (8009d28 <sen5x_statemachine+0x224>)
 8009c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8009d10 <sen5x_statemachine+0x20c>)
 8009c60:	0019      	movs	r1, r3
 8009c62:	2002      	movs	r0, #2
 8009c64:	f004 fc2e 	bl	800e4c4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009c68:	f005 f86c 	bl	800ed44 <HAL_GetTick>
 8009c6c:	0003      	movs	r3, r0
 8009c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8009d2c <sen5x_statemachine+0x228>)
 8009c70:	189a      	adds	r2, r3, r2
 8009c72:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009c74:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009c76:	4b2b      	ldr	r3, [pc, #172]	@ (8009d24 <sen5x_statemachine+0x220>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009c7e:	2205      	movs	r2, #5
 8009c80:	701a      	strb	r2, [r3, #0]
      break;
 8009c82:	e02d      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn) {
 8009c84:	4b26      	ldr	r3, [pc, #152]	@ (8009d20 <sen5x_statemachine+0x21c>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	4053      	eors	r3, r2
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d015      	beq.n	8009cbe <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c92:	f7ff fc0b 	bl	80094ac <sen5x_extinguish_measurement>
 8009c96:	1e03      	subs	r3, r0, #0
 8009c98:	d005      	beq.n	8009ca6 <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c9a:	4a25      	ldr	r2, [pc, #148]	@ (8009d30 <sen5x_statemachine+0x22c>)
 8009c9c:	4b16      	ldr	r3, [pc, #88]	@ (8009cf8 <sen5x_statemachine+0x1f4>)
 8009c9e:	0019      	movs	r1, r3
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f004 fc0f 	bl	800e4c4 <CreateLine>
        }
        sen5xSamples = 0;
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d1c <sen5x_statemachine+0x218>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009cac:	f7ff fa64 	bl	8009178 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f7fe fbd3 	bl	800845c <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	e002      	b.n	8009cc4 <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009cec <sen5x_statemachine+0x1e8>)
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009cc4:	f003 fc48 	bl	800d558 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009cc8:	f005 f83c 	bl	800ed44 <HAL_GetTick>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	22fa      	movs	r2, #250	@ 0xfa
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	189a      	adds	r2, r3, r2
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <sen5x_statemachine+0x1e4>)
 8009cd6:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009cd8:	e002      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
      break;
 8009cda:	46c0      	nop			@ (mov r8, r8)
 8009cdc:	e000      	b.n	8009ce0 <sen5x_statemachine+0x1dc>
      break;
 8009cde:	46c0      	nop			@ (mov r8, r8)
}
 8009ce0:	46c0      	nop			@ (mov r8, r8)
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b002      	add	sp, #8
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	2000107c 	.word	0x2000107c
 8009cec:	2000008d 	.word	0x2000008d
 8009cf0:	08025528 	.word	0x08025528
 8009cf4:	08024ba4 	.word	0x08024ba4
 8009cf8:	08024634 	.word	0x08024634
 8009cfc:	002fefd8 	.word	0x002fefd8
 8009d00:	00005910 	.word	0x00005910
 8009d04:	20001071 	.word	0x20001071
 8009d08:	08024bd4 	.word	0x08024bd4
 8009d0c:	08024bec 	.word	0x08024bec
 8009d10:	08024578 	.word	0x08024578
 8009d14:	20001080 	.word	0x20001080
 8009d18:	08024c04 	.word	0x08024c04
 8009d1c:	20001070 	.word	0x20001070
 8009d20:	20002001 	.word	0x20002001
 8009d24:	20001064 	.word	0x20001064
 8009d28:	08024c34 	.word	0x08024c34
 8009d2c:	00002710 	.word	0x00002710
 8009d30:	08024c4c 	.word	0x08024c4c

08009d34 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d3a:	1dbb      	adds	r3, r7, #6
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009d40:	1dbc      	adds	r4, r7, #6
 8009d42:	1dbb      	adds	r3, r7, #6
 8009d44:	8819      	ldrh	r1, [r3, #0]
 8009d46:	003b      	movs	r3, r7
 8009d48:	2221      	movs	r2, #33	@ 0x21
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	f001 fb56 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 8009d50:	0003      	movs	r3, r0
 8009d52:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d54:	1d3c      	adds	r4, r7, #4
 8009d56:	1dbb      	adds	r3, r7, #6
 8009d58:	881a      	ldrh	r2, [r3, #0]
 8009d5a:	003b      	movs	r3, r7
 8009d5c:	0019      	movs	r1, r3
 8009d5e:	2069      	movs	r0, #105	@ 0x69
 8009d60:	f001 fbd0 	bl	800b504 <sensirion_i2c_write_data>
 8009d64:	0003      	movs	r3, r0
 8009d66:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d68:	1d3b      	adds	r3, r7, #4
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <sen5x_start_measurement+0x46>
        return error;
 8009d72:	1d3b      	adds	r3, r7, #4
 8009d74:	2200      	movs	r2, #0
 8009d76:	5e9b      	ldrsh	r3, [r3, r2]
 8009d78:	e004      	b.n	8009d84 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d7a:	4b04      	ldr	r3, [pc, #16]	@ (8009d8c <sen5x_start_measurement+0x58>)
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f7ff fdf5 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	b003      	add	sp, #12
 8009d8a:	bd90      	pop	{r4, r7, pc}
 8009d8c:	0000c350 	.word	0x0000c350

08009d90 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d90:	b590      	push	{r4, r7, lr}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d96:	1dbb      	adds	r3, r7, #6
 8009d98:	2200      	movs	r2, #0
 8009d9a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009d9c:	1dbc      	adds	r4, r7, #6
 8009d9e:	1dbb      	adds	r3, r7, #6
 8009da0:	8819      	ldrh	r1, [r3, #0]
 8009da2:	003b      	movs	r3, r7
 8009da4:	2237      	movs	r2, #55	@ 0x37
 8009da6:	0018      	movs	r0, r3
 8009da8:	f001 fb28 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 8009dac:	0003      	movs	r3, r0
 8009dae:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009db0:	1d3c      	adds	r4, r7, #4
 8009db2:	1dbb      	adds	r3, r7, #6
 8009db4:	881a      	ldrh	r2, [r3, #0]
 8009db6:	003b      	movs	r3, r7
 8009db8:	0019      	movs	r1, r3
 8009dba:	2069      	movs	r0, #105	@ 0x69
 8009dbc:	f001 fba2 	bl	800b504 <sensirion_i2c_write_data>
 8009dc0:	0003      	movs	r3, r0
 8009dc2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009dc4:	1d3b      	adds	r3, r7, #4
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009dce:	1d3b      	adds	r3, r7, #4
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8009dd4:	e004      	b.n	8009de0 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009dd6:	4b04      	ldr	r3, [pc, #16]	@ (8009de8 <sen5x_start_measurement_without_pm+0x58>)
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f7ff fdc7 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	0018      	movs	r0, r3
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b003      	add	sp, #12
 8009de6:	bd90      	pop	{r4, r7, pc}
 8009de8:	0000c350 	.word	0x0000c350

08009dec <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009dec:	b590      	push	{r4, r7, lr}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009df2:	1dbb      	adds	r3, r7, #6
 8009df4:	2200      	movs	r2, #0
 8009df6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009df8:	1dbc      	adds	r4, r7, #6
 8009dfa:	2382      	movs	r3, #130	@ 0x82
 8009dfc:	005a      	lsls	r2, r3, #1
 8009dfe:	1dbb      	adds	r3, r7, #6
 8009e00:	8819      	ldrh	r1, [r3, #0]
 8009e02:	003b      	movs	r3, r7
 8009e04:	0018      	movs	r0, r3
 8009e06:	f001 faf9 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 8009e0a:	0003      	movs	r3, r0
 8009e0c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e0e:	1d3c      	adds	r4, r7, #4
 8009e10:	1dbb      	adds	r3, r7, #6
 8009e12:	881a      	ldrh	r2, [r3, #0]
 8009e14:	003b      	movs	r3, r7
 8009e16:	0019      	movs	r1, r3
 8009e18:	2069      	movs	r0, #105	@ 0x69
 8009e1a:	f001 fb73 	bl	800b504 <sensirion_i2c_write_data>
 8009e1e:	0003      	movs	r3, r0
 8009e20:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e22:	1d3b      	adds	r3, r7, #4
 8009e24:	2200      	movs	r2, #0
 8009e26:	5e9b      	ldrsh	r3, [r3, r2]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <sen5x_stop_measurement+0x48>
        return error;
 8009e2c:	1d3b      	adds	r3, r7, #4
 8009e2e:	2200      	movs	r2, #0
 8009e30:	5e9b      	ldrsh	r3, [r3, r2]
 8009e32:	e004      	b.n	8009e3e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009e34:	4b04      	ldr	r3, [pc, #16]	@ (8009e48 <sen5x_stop_measurement+0x5c>)
 8009e36:	0018      	movs	r0, r3
 8009e38:	f7ff fd98 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b003      	add	sp, #12
 8009e44:	bd90      	pop	{r4, r7, pc}
 8009e46:	46c0      	nop			@ (mov r8, r8)
 8009e48:	00030d40 	.word	0x00030d40

08009e4c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009e54:	250e      	movs	r5, #14
 8009e56:	197b      	adds	r3, r7, r5
 8009e58:	2200      	movs	r2, #0
 8009e5a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009e5c:	197c      	adds	r4, r7, r5
 8009e5e:	4a22      	ldr	r2, [pc, #136]	@ (8009ee8 <sen5x_read_data_ready+0x9c>)
 8009e60:	197b      	adds	r3, r7, r5
 8009e62:	8819      	ldrh	r1, [r3, #0]
 8009e64:	2308      	movs	r3, #8
 8009e66:	18fb      	adds	r3, r7, r3
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f001 fac7 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e72:	260c      	movs	r6, #12
 8009e74:	19bc      	adds	r4, r7, r6
 8009e76:	197b      	adds	r3, r7, r5
 8009e78:	881a      	ldrh	r2, [r3, #0]
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	0019      	movs	r1, r3
 8009e80:	2069      	movs	r0, #105	@ 0x69
 8009e82:	f001 fb3f 	bl	800b504 <sensirion_i2c_write_data>
 8009e86:	0003      	movs	r3, r0
 8009e88:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e8a:	19bb      	adds	r3, r7, r6
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <sen5x_read_data_ready+0x50>
        return error;
 8009e94:	19bb      	adds	r3, r7, r6
 8009e96:	2200      	movs	r2, #0
 8009e98:	5e9b      	ldrsh	r3, [r3, r2]
 8009e9a:	e020      	b.n	8009ede <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e9c:	4b13      	ldr	r3, [pc, #76]	@ (8009eec <sen5x_read_data_ready+0xa0>)
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f7ff fd64 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009ea4:	250c      	movs	r5, #12
 8009ea6:	197c      	adds	r4, r7, r5
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	18fb      	adds	r3, r7, r3
 8009eac:	2202      	movs	r2, #2
 8009eae:	0019      	movs	r1, r3
 8009eb0:	2069      	movs	r0, #105	@ 0x69
 8009eb2:	f001 fb3f 	bl	800b534 <sensirion_i2c_read_data_inplace>
 8009eb6:	0003      	movs	r3, r0
 8009eb8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009eba:	197b      	adds	r3, r7, r5
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <sen5x_read_data_ready+0x80>
        return error;
 8009ec4:	197b      	adds	r3, r7, r5
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8009eca:	e008      	b.n	8009ede <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009ecc:	2308      	movs	r3, #8
 8009ece:	18fb      	adds	r3, r7, r3
 8009ed0:	785b      	ldrb	r3, [r3, #1]
 8009ed2:	1e5a      	subs	r2, r3, #1
 8009ed4:	4193      	sbcs	r3, r2
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	0018      	movs	r0, r3
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	b005      	add	sp, #20
 8009ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee6:	46c0      	nop			@ (mov r8, r8)
 8009ee8:	00000202 	.word	0x00000202
 8009eec:	00004e20 	.word	0x00004e20

08009ef0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef2:	b08d      	sub	sp, #52	@ 0x34
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009efe:	252e      	movs	r5, #46	@ 0x2e
 8009f00:	197b      	adds	r3, r7, r5
 8009f02:	2200      	movs	r2, #0
 8009f04:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009f06:	197c      	adds	r4, r7, r5
 8009f08:	23f1      	movs	r3, #241	@ 0xf1
 8009f0a:	009a      	lsls	r2, r3, #2
 8009f0c:	197b      	adds	r3, r7, r5
 8009f0e:	8819      	ldrh	r1, [r3, #0]
 8009f10:	2314      	movs	r3, #20
 8009f12:	18fb      	adds	r3, r7, r3
 8009f14:	0018      	movs	r0, r3
 8009f16:	f001 fa71 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009f1e:	262c      	movs	r6, #44	@ 0x2c
 8009f20:	19bc      	adds	r4, r7, r6
 8009f22:	197b      	adds	r3, r7, r5
 8009f24:	881a      	ldrh	r2, [r3, #0]
 8009f26:	2314      	movs	r3, #20
 8009f28:	18fb      	adds	r3, r7, r3
 8009f2a:	0019      	movs	r1, r3
 8009f2c:	2069      	movs	r0, #105	@ 0x69
 8009f2e:	f001 fae9 	bl	800b504 <sensirion_i2c_write_data>
 8009f32:	0003      	movs	r3, r0
 8009f34:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f36:	19bb      	adds	r3, r7, r6
 8009f38:	2200      	movs	r2, #0
 8009f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <sen5x_read_measured_values+0x58>
        return error;
 8009f40:	19bb      	adds	r3, r7, r6
 8009f42:	2200      	movs	r2, #0
 8009f44:	5e9b      	ldrsh	r3, [r3, r2]
 8009f46:	e060      	b.n	800a00a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009f48:	4b32      	ldr	r3, [pc, #200]	@ (800a014 <sen5x_read_measured_values+0x124>)
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7ff fd0e 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009f50:	252c      	movs	r5, #44	@ 0x2c
 8009f52:	197c      	adds	r4, r7, r5
 8009f54:	2314      	movs	r3, #20
 8009f56:	18fb      	adds	r3, r7, r3
 8009f58:	2210      	movs	r2, #16
 8009f5a:	0019      	movs	r1, r3
 8009f5c:	2069      	movs	r0, #105	@ 0x69
 8009f5e:	f001 fae9 	bl	800b534 <sensirion_i2c_read_data_inplace>
 8009f62:	0003      	movs	r3, r0
 8009f64:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009f66:	197b      	adds	r3, r7, r5
 8009f68:	2200      	movs	r2, #0
 8009f6a:	5e9b      	ldrsh	r3, [r3, r2]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d003      	beq.n	8009f78 <sen5x_read_measured_values+0x88>
        return error;
 8009f70:	197b      	adds	r3, r7, r5
 8009f72:	2200      	movs	r2, #0
 8009f74:	5e9b      	ldrsh	r3, [r3, r2]
 8009f76:	e048      	b.n	800a00a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f78:	2414      	movs	r4, #20
 8009f7a:	193b      	adds	r3, r7, r4
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	f000 fa79 	bl	800a474 <sensirion_common_bytes_to_uint16_t>
 8009f82:	0003      	movs	r3, r0
 8009f84:	001a      	movs	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f8a:	193b      	adds	r3, r7, r4
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	0018      	movs	r0, r3
 8009f90:	f000 fa70 	bl	800a474 <sensirion_common_bytes_to_uint16_t>
 8009f94:	0003      	movs	r3, r0
 8009f96:	001a      	movs	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009f9c:	193b      	adds	r3, r7, r4
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f000 fa67 	bl	800a474 <sensirion_common_bytes_to_uint16_t>
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	001a      	movs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009fae:	193b      	adds	r3, r7, r4
 8009fb0:	3306      	adds	r3, #6
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f000 fa5e 	bl	800a474 <sensirion_common_bytes_to_uint16_t>
 8009fb8:	0003      	movs	r3, r0
 8009fba:	001a      	movs	r2, r3
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009fc0:	193b      	adds	r3, r7, r4
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f000 fa81 	bl	800a4cc <sensirion_common_bytes_to_int16_t>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	001a      	movs	r2, r3
 8009fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fd0:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009fd2:	193b      	adds	r3, r7, r4
 8009fd4:	330a      	adds	r3, #10
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	f000 fa78 	bl	800a4cc <sensirion_common_bytes_to_int16_t>
 8009fdc:	0003      	movs	r3, r0
 8009fde:	001a      	movs	r2, r3
 8009fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009fe4:	193b      	adds	r3, r7, r4
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f000 fa6f 	bl	800a4cc <sensirion_common_bytes_to_int16_t>
 8009fee:	0003      	movs	r3, r0
 8009ff0:	001a      	movs	r2, r3
 8009ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009ff6:	193b      	adds	r3, r7, r4
 8009ff8:	330e      	adds	r3, #14
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 fa66 	bl	800a4cc <sensirion_common_bytes_to_int16_t>
 800a000:	0003      	movs	r3, r0
 800a002:	001a      	movs	r2, r3
 800a004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a006:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	0018      	movs	r0, r3
 800a00c:	46bd      	mov	sp, r7
 800a00e:	b00d      	add	sp, #52	@ 0x34
 800a010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a012:	46c0      	nop			@ (mov r8, r8)
 800a014:	00004e20 	.word	0x00004e20

0800a018 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a018:	b590      	push	{r4, r7, lr}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a01e:	1dbb      	adds	r3, r7, #6
 800a020:	2200      	movs	r2, #0
 800a022:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a024:	1dbc      	adds	r4, r7, #6
 800a026:	4a12      	ldr	r2, [pc, #72]	@ (800a070 <sen5x_start_fan_cleaning+0x58>)
 800a028:	1dbb      	adds	r3, r7, #6
 800a02a:	8819      	ldrh	r1, [r3, #0]
 800a02c:	003b      	movs	r3, r7
 800a02e:	0018      	movs	r0, r3
 800a030:	f001 f9e4 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a034:	0003      	movs	r3, r0
 800a036:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a038:	1d3c      	adds	r4, r7, #4
 800a03a:	1dbb      	adds	r3, r7, #6
 800a03c:	881a      	ldrh	r2, [r3, #0]
 800a03e:	003b      	movs	r3, r7
 800a040:	0019      	movs	r1, r3
 800a042:	2069      	movs	r0, #105	@ 0x69
 800a044:	f001 fa5e 	bl	800b504 <sensirion_i2c_write_data>
 800a048:	0003      	movs	r3, r0
 800a04a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a04c:	1d3b      	adds	r3, r7, #4
 800a04e:	2200      	movs	r2, #0
 800a050:	5e9b      	ldrsh	r3, [r3, r2]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <sen5x_start_fan_cleaning+0x46>
        return error;
 800a056:	1d3b      	adds	r3, r7, #4
 800a058:	2200      	movs	r2, #0
 800a05a:	5e9b      	ldrsh	r3, [r3, r2]
 800a05c:	e004      	b.n	800a068 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a05e:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <sen5x_start_fan_cleaning+0x5c>)
 800a060:	0018      	movs	r0, r3
 800a062:	f7ff fc83 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a066:	2300      	movs	r3, #0
}
 800a068:	0018      	movs	r0, r3
 800a06a:	46bd      	mov	sp, r7
 800a06c:	b003      	add	sp, #12
 800a06e:	bd90      	pop	{r4, r7, pc}
 800a070:	00005607 	.word	0x00005607
 800a074:	00004e20 	.word	0x00004e20

0800a078 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	0004      	movs	r4, r0
 800a080:	0008      	movs	r0, r1
 800a082:	0011      	movs	r1, r2
 800a084:	1dbb      	adds	r3, r7, #6
 800a086:	1c22      	adds	r2, r4, #0
 800a088:	801a      	strh	r2, [r3, #0]
 800a08a:	1d3b      	adds	r3, r7, #4
 800a08c:	1c02      	adds	r2, r0, #0
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	1cbb      	adds	r3, r7, #2
 800a092:	1c0a      	adds	r2, r1, #0
 800a094:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a096:	2516      	movs	r5, #22
 800a098:	197b      	adds	r3, r7, r5
 800a09a:	2200      	movs	r2, #0
 800a09c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a09e:	197c      	adds	r4, r7, r5
 800a0a0:	4a25      	ldr	r2, [pc, #148]	@ (800a138 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a0a2:	197b      	adds	r3, r7, r5
 800a0a4:	8819      	ldrh	r1, [r3, #0]
 800a0a6:	2608      	movs	r6, #8
 800a0a8:	19bb      	adds	r3, r7, r6
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f001 f9a6 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a0b4:	197c      	adds	r4, r7, r5
 800a0b6:	1dbb      	adds	r3, r7, #6
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	5e9a      	ldrsh	r2, [r3, r2]
 800a0bc:	197b      	adds	r3, r7, r5
 800a0be:	8819      	ldrh	r1, [r3, #0]
 800a0c0:	19bb      	adds	r3, r7, r6
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f001 fa05 	bl	800b4d2 <sensirion_i2c_add_int16_t_to_buffer>
 800a0c8:	0003      	movs	r3, r0
 800a0ca:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a0cc:	197c      	adds	r4, r7, r5
 800a0ce:	1d3b      	adds	r3, r7, #4
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	5e9a      	ldrsh	r2, [r3, r2]
 800a0d4:	197b      	adds	r3, r7, r5
 800a0d6:	8819      	ldrh	r1, [r3, #0]
 800a0d8:	19bb      	adds	r3, r7, r6
 800a0da:	0018      	movs	r0, r3
 800a0dc:	f001 f9f9 	bl	800b4d2 <sensirion_i2c_add_int16_t_to_buffer>
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a0e4:	197c      	adds	r4, r7, r5
 800a0e6:	1cbb      	adds	r3, r7, #2
 800a0e8:	881a      	ldrh	r2, [r3, #0]
 800a0ea:	197b      	adds	r3, r7, r5
 800a0ec:	8819      	ldrh	r1, [r3, #0]
 800a0ee:	19bb      	adds	r3, r7, r6
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f001 f9af 	bl	800b454 <sensirion_i2c_add_uint16_t_to_buffer>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a0fa:	2214      	movs	r2, #20
 800a0fc:	18bc      	adds	r4, r7, r2
 800a0fe:	197b      	adds	r3, r7, r5
 800a100:	881a      	ldrh	r2, [r3, #0]
 800a102:	19bb      	adds	r3, r7, r6
 800a104:	0019      	movs	r1, r3
 800a106:	2069      	movs	r0, #105	@ 0x69
 800a108:	f001 f9fc 	bl	800b504 <sensirion_i2c_write_data>
 800a10c:	0003      	movs	r3, r0
 800a10e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a110:	2214      	movs	r2, #20
 800a112:	18bb      	adds	r3, r7, r2
 800a114:	2100      	movs	r1, #0
 800a116:	5e5b      	ldrsh	r3, [r3, r1]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a11c:	18bb      	adds	r3, r7, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	5e9b      	ldrsh	r3, [r3, r2]
 800a122:	e004      	b.n	800a12e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <sen5x_set_temperature_offset_parameters+0xc4>)
 800a126:	0018      	movs	r0, r3
 800a128:	f7ff fc20 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	0018      	movs	r0, r3
 800a130:	46bd      	mov	sp, r7
 800a132:	b007      	add	sp, #28
 800a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a136:	46c0      	nop			@ (mov r8, r8)
 800a138:	000060b2 	.word	0x000060b2
 800a13c:	00004e20 	.word	0x00004e20

0800a140 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a142:	b091      	sub	sp, #68	@ 0x44
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	000a      	movs	r2, r1
 800a14a:	1cfb      	adds	r3, r7, #3
 800a14c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a14e:	253e      	movs	r5, #62	@ 0x3e
 800a150:	197b      	adds	r3, r7, r5
 800a152:	2200      	movs	r2, #0
 800a154:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a156:	197c      	adds	r4, r7, r5
 800a158:	4a22      	ldr	r2, [pc, #136]	@ (800a1e4 <sen5x_get_product_name+0xa4>)
 800a15a:	197b      	adds	r3, r7, r5
 800a15c:	8819      	ldrh	r1, [r3, #0]
 800a15e:	230c      	movs	r3, #12
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	0018      	movs	r0, r3
 800a164:	f001 f94a 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a168:	0003      	movs	r3, r0
 800a16a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a16c:	263c      	movs	r6, #60	@ 0x3c
 800a16e:	19bc      	adds	r4, r7, r6
 800a170:	197b      	adds	r3, r7, r5
 800a172:	881a      	ldrh	r2, [r3, #0]
 800a174:	230c      	movs	r3, #12
 800a176:	18fb      	adds	r3, r7, r3
 800a178:	0019      	movs	r1, r3
 800a17a:	2069      	movs	r0, #105	@ 0x69
 800a17c:	f001 f9c2 	bl	800b504 <sensirion_i2c_write_data>
 800a180:	0003      	movs	r3, r0
 800a182:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a184:	19bb      	adds	r3, r7, r6
 800a186:	2200      	movs	r2, #0
 800a188:	5e9b      	ldrsh	r3, [r3, r2]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <sen5x_get_product_name+0x56>
        return error;
 800a18e:	19bb      	adds	r3, r7, r6
 800a190:	2200      	movs	r2, #0
 800a192:	5e9b      	ldrsh	r3, [r3, r2]
 800a194:	e021      	b.n	800a1da <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a196:	4b14      	ldr	r3, [pc, #80]	@ (800a1e8 <sen5x_get_product_name+0xa8>)
 800a198:	0018      	movs	r0, r3
 800a19a:	f7ff fbe7 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a19e:	253c      	movs	r5, #60	@ 0x3c
 800a1a0:	197c      	adds	r4, r7, r5
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	2220      	movs	r2, #32
 800a1a8:	0019      	movs	r1, r3
 800a1aa:	2069      	movs	r0, #105	@ 0x69
 800a1ac:	f001 f9c2 	bl	800b534 <sensirion_i2c_read_data_inplace>
 800a1b0:	0003      	movs	r3, r0
 800a1b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1b4:	197b      	adds	r3, r7, r5
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <sen5x_get_product_name+0x86>
        return error;
 800a1be:	197b      	adds	r3, r7, r5
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	5e9b      	ldrsh	r3, [r3, r2]
 800a1c4:	e009      	b.n	800a1da <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a1c6:	1cfb      	adds	r3, r7, #3
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	18fb      	adds	r3, r7, r3
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f000 f988 	bl	800a4e8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	0018      	movs	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b011      	add	sp, #68	@ 0x44
 800a1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	0000d014 	.word	0x0000d014
 800a1e8:	0000c350 	.word	0x0000c350

0800a1ec <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ee:	b091      	sub	sp, #68	@ 0x44
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	000a      	movs	r2, r1
 800a1f6:	1cfb      	adds	r3, r7, #3
 800a1f8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a1fa:	253e      	movs	r5, #62	@ 0x3e
 800a1fc:	197b      	adds	r3, r7, r5
 800a1fe:	2200      	movs	r2, #0
 800a200:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a202:	197c      	adds	r4, r7, r5
 800a204:	4a22      	ldr	r2, [pc, #136]	@ (800a290 <sen5x_get_serial_number+0xa4>)
 800a206:	197b      	adds	r3, r7, r5
 800a208:	8819      	ldrh	r1, [r3, #0]
 800a20a:	230c      	movs	r3, #12
 800a20c:	18fb      	adds	r3, r7, r3
 800a20e:	0018      	movs	r0, r3
 800a210:	f001 f8f4 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a214:	0003      	movs	r3, r0
 800a216:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a218:	263c      	movs	r6, #60	@ 0x3c
 800a21a:	19bc      	adds	r4, r7, r6
 800a21c:	197b      	adds	r3, r7, r5
 800a21e:	881a      	ldrh	r2, [r3, #0]
 800a220:	230c      	movs	r3, #12
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	0019      	movs	r1, r3
 800a226:	2069      	movs	r0, #105	@ 0x69
 800a228:	f001 f96c 	bl	800b504 <sensirion_i2c_write_data>
 800a22c:	0003      	movs	r3, r0
 800a22e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a230:	19bb      	adds	r3, r7, r6
 800a232:	2200      	movs	r2, #0
 800a234:	5e9b      	ldrsh	r3, [r3, r2]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <sen5x_get_serial_number+0x56>
        return error;
 800a23a:	19bb      	adds	r3, r7, r6
 800a23c:	2200      	movs	r2, #0
 800a23e:	5e9b      	ldrsh	r3, [r3, r2]
 800a240:	e021      	b.n	800a286 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a242:	4b14      	ldr	r3, [pc, #80]	@ (800a294 <sen5x_get_serial_number+0xa8>)
 800a244:	0018      	movs	r0, r3
 800a246:	f7ff fb91 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a24a:	253c      	movs	r5, #60	@ 0x3c
 800a24c:	197c      	adds	r4, r7, r5
 800a24e:	230c      	movs	r3, #12
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	2220      	movs	r2, #32
 800a254:	0019      	movs	r1, r3
 800a256:	2069      	movs	r0, #105	@ 0x69
 800a258:	f001 f96c 	bl	800b534 <sensirion_i2c_read_data_inplace>
 800a25c:	0003      	movs	r3, r0
 800a25e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a260:	197b      	adds	r3, r7, r5
 800a262:	2200      	movs	r2, #0
 800a264:	5e9b      	ldrsh	r3, [r3, r2]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <sen5x_get_serial_number+0x86>
        return error;
 800a26a:	197b      	adds	r3, r7, r5
 800a26c:	2200      	movs	r2, #0
 800a26e:	5e9b      	ldrsh	r3, [r3, r2]
 800a270:	e009      	b.n	800a286 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a272:	1cfb      	adds	r3, r7, #3
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b29a      	uxth	r2, r3
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	230c      	movs	r3, #12
 800a27c:	18fb      	adds	r3, r7, r3
 800a27e:	0018      	movs	r0, r3
 800a280:	f000 f932 	bl	800a4e8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a284:	2300      	movs	r3, #0
}
 800a286:	0018      	movs	r0, r3
 800a288:	46bd      	mov	sp, r7
 800a28a:	b011      	add	sp, #68	@ 0x44
 800a28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	0000d033 	.word	0x0000d033
 800a294:	0000c350 	.word	0x0000c350

0800a298 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a29a:	b089      	sub	sp, #36	@ 0x24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a2a6:	251e      	movs	r5, #30
 800a2a8:	197b      	adds	r3, r7, r5
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a2ae:	197c      	adds	r4, r7, r5
 800a2b0:	23d1      	movs	r3, #209	@ 0xd1
 800a2b2:	021a      	lsls	r2, r3, #8
 800a2b4:	197b      	adds	r3, r7, r5
 800a2b6:	8819      	ldrh	r1, [r3, #0]
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	18fb      	adds	r3, r7, r3
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f001 f89d 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2c6:	261c      	movs	r6, #28
 800a2c8:	19bc      	adds	r4, r7, r6
 800a2ca:	197b      	adds	r3, r7, r5
 800a2cc:	881a      	ldrh	r2, [r3, #0]
 800a2ce:	2310      	movs	r3, #16
 800a2d0:	18fb      	adds	r3, r7, r3
 800a2d2:	0019      	movs	r1, r3
 800a2d4:	2069      	movs	r0, #105	@ 0x69
 800a2d6:	f001 f915 	bl	800b504 <sensirion_i2c_write_data>
 800a2da:	0003      	movs	r3, r0
 800a2dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2de:	19bb      	adds	r3, r7, r6
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <sen5x_get_version+0x58>
        return error;
 800a2e8:	19bb      	adds	r3, r7, r6
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ee:	e038      	b.n	800a362 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a36c <sen5x_get_version+0xd4>)
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f7ff fb3a 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a2f8:	251c      	movs	r5, #28
 800a2fa:	197c      	adds	r4, r7, r5
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	18fb      	adds	r3, r7, r3
 800a300:	2208      	movs	r2, #8
 800a302:	0019      	movs	r1, r3
 800a304:	2069      	movs	r0, #105	@ 0x69
 800a306:	f001 f915 	bl	800b534 <sensirion_i2c_read_data_inplace>
 800a30a:	0003      	movs	r3, r0
 800a30c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a30e:	197b      	adds	r3, r7, r5
 800a310:	2200      	movs	r2, #0
 800a312:	5e9b      	ldrsh	r3, [r3, r2]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d003      	beq.n	800a320 <sen5x_get_version+0x88>
        return error;
 800a318:	197b      	adds	r3, r7, r5
 800a31a:	2200      	movs	r2, #0
 800a31c:	5e9b      	ldrsh	r3, [r3, r2]
 800a31e:	e020      	b.n	800a362 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a320:	2110      	movs	r1, #16
 800a322:	187b      	adds	r3, r7, r1
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a32a:	187b      	adds	r3, r7, r1
 800a32c:	785a      	ldrb	r2, [r3, #1]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a332:	187b      	adds	r3, r7, r1
 800a334:	789b      	ldrb	r3, [r3, #2]
 800a336:	1e5a      	subs	r2, r3, #1
 800a338:	4193      	sbcs	r3, r2
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a340:	187b      	adds	r3, r7, r1
 800a342:	78da      	ldrb	r2, [r3, #3]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a348:	187b      	adds	r3, r7, r1
 800a34a:	791a      	ldrb	r2, [r3, #4]
 800a34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a350:	187b      	adds	r3, r7, r1
 800a352:	795a      	ldrb	r2, [r3, #5]
 800a354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a356:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a358:	187b      	adds	r3, r7, r1
 800a35a:	799a      	ldrb	r2, [r3, #6]
 800a35c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a35e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a360:	2300      	movs	r3, #0
}
 800a362:	0018      	movs	r0, r3
 800a364:	46bd      	mov	sp, r7
 800a366:	b009      	add	sp, #36	@ 0x24
 800a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36a:	46c0      	nop			@ (mov r8, r8)
 800a36c:	00004e20 	.word	0x00004e20

0800a370 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a378:	2516      	movs	r5, #22
 800a37a:	197b      	adds	r3, r7, r5
 800a37c:	2200      	movs	r2, #0
 800a37e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a380:	197c      	adds	r4, r7, r5
 800a382:	4a22      	ldr	r2, [pc, #136]	@ (800a40c <sen5x_read_device_status+0x9c>)
 800a384:	197b      	adds	r3, r7, r5
 800a386:	8819      	ldrh	r1, [r3, #0]
 800a388:	230c      	movs	r3, #12
 800a38a:	18fb      	adds	r3, r7, r3
 800a38c:	0018      	movs	r0, r3
 800a38e:	f001 f835 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a392:	0003      	movs	r3, r0
 800a394:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a396:	2614      	movs	r6, #20
 800a398:	19bc      	adds	r4, r7, r6
 800a39a:	197b      	adds	r3, r7, r5
 800a39c:	881a      	ldrh	r2, [r3, #0]
 800a39e:	230c      	movs	r3, #12
 800a3a0:	18fb      	adds	r3, r7, r3
 800a3a2:	0019      	movs	r1, r3
 800a3a4:	2069      	movs	r0, #105	@ 0x69
 800a3a6:	f001 f8ad 	bl	800b504 <sensirion_i2c_write_data>
 800a3aa:	0003      	movs	r3, r0
 800a3ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3ae:	19bb      	adds	r3, r7, r6
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	5e9b      	ldrsh	r3, [r3, r2]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <sen5x_read_device_status+0x50>
        return error;
 800a3b8:	19bb      	adds	r3, r7, r6
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a3be:	e020      	b.n	800a402 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a3c0:	4b13      	ldr	r3, [pc, #76]	@ (800a410 <sen5x_read_device_status+0xa0>)
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f7ff fad2 	bl	800996c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a3c8:	2514      	movs	r5, #20
 800a3ca:	197c      	adds	r4, r7, r5
 800a3cc:	230c      	movs	r3, #12
 800a3ce:	18fb      	adds	r3, r7, r3
 800a3d0:	2204      	movs	r2, #4
 800a3d2:	0019      	movs	r1, r3
 800a3d4:	2069      	movs	r0, #105	@ 0x69
 800a3d6:	f001 f8ad 	bl	800b534 <sensirion_i2c_read_data_inplace>
 800a3da:	0003      	movs	r3, r0
 800a3dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3de:	197b      	adds	r3, r7, r5
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <sen5x_read_device_status+0x80>
        return error;
 800a3e8:	197b      	adds	r3, r7, r5
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a3ee:	e008      	b.n	800a402 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	18fb      	adds	r3, r7, r3
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f000 f850 	bl	800a49a <sensirion_common_bytes_to_uint32_t>
 800a3fa:	0002      	movs	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a400:	2300      	movs	r3, #0
}
 800a402:	0018      	movs	r0, r3
 800a404:	46bd      	mov	sp, r7
 800a406:	b007      	add	sp, #28
 800a408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	0000d206 	.word	0x0000d206
 800a410:	00004e20 	.word	0x00004e20

0800a414 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a41a:	1dbb      	adds	r3, r7, #6
 800a41c:	2200      	movs	r2, #0
 800a41e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a420:	1dbc      	adds	r4, r7, #6
 800a422:	4a12      	ldr	r2, [pc, #72]	@ (800a46c <sen5x_device_reset+0x58>)
 800a424:	1dbb      	adds	r3, r7, #6
 800a426:	8819      	ldrh	r1, [r3, #0]
 800a428:	003b      	movs	r3, r7
 800a42a:	0018      	movs	r0, r3
 800a42c:	f000 ffe6 	bl	800b3fc <sensirion_i2c_add_command_to_buffer>
 800a430:	0003      	movs	r3, r0
 800a432:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a434:	1d3c      	adds	r4, r7, #4
 800a436:	1dbb      	adds	r3, r7, #6
 800a438:	881a      	ldrh	r2, [r3, #0]
 800a43a:	003b      	movs	r3, r7
 800a43c:	0019      	movs	r1, r3
 800a43e:	2069      	movs	r0, #105	@ 0x69
 800a440:	f001 f860 	bl	800b504 <sensirion_i2c_write_data>
 800a444:	0003      	movs	r3, r0
 800a446:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a448:	1d3b      	adds	r3, r7, #4
 800a44a:	2200      	movs	r2, #0
 800a44c:	5e9b      	ldrsh	r3, [r3, r2]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <sen5x_device_reset+0x46>
        return error;
 800a452:	1d3b      	adds	r3, r7, #4
 800a454:	2200      	movs	r2, #0
 800a456:	5e9b      	ldrsh	r3, [r3, r2]
 800a458:	e004      	b.n	800a464 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a45a:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <sen5x_device_reset+0x5c>)
 800a45c:	0018      	movs	r0, r3
 800a45e:	f7ff fa85 	bl	800996c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a462:	2300      	movs	r3, #0
}
 800a464:	0018      	movs	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	b003      	add	sp, #12
 800a46a:	bd90      	pop	{r4, r7, pc}
 800a46c:	0000d304 	.word	0x0000d304
 800a470:	00030d40 	.word	0x00030d40

0800a474 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	021b      	lsls	r3, r3, #8
 800a482:	b21a      	sxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3301      	adds	r3, #1
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	4313      	orrs	r3, r2
 800a48e:	b21b      	sxth	r3, r3
 800a490:	b29b      	uxth	r3, r3
}
 800a492:	0018      	movs	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	b002      	add	sp, #8
 800a498:	bd80      	pop	{r7, pc}

0800a49a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	061a      	lsls	r2, r3, #24
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	041b      	lsls	r3, r3, #16
 800a4b0:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3302      	adds	r3, #2
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a4ba:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	3203      	adds	r2, #3
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	4313      	orrs	r3, r2
}
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b002      	add	sp, #8
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	f7ff ffcc 	bl	800a474 <sensirion_common_bytes_to_uint16_t>
 800a4dc:	0003      	movs	r3, r0
 800a4de:	b21b      	sxth	r3, r3
}
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	b002      	add	sp, #8
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	1dbb      	adds	r3, r7, #6
 800a4f4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a4f6:	2316      	movs	r3, #22
 800a4f8:	18fb      	adds	r3, r7, r3
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	801a      	strh	r2, [r3, #0]
 800a4fe:	e00f      	b.n	800a520 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a500:	2016      	movs	r0, #22
 800a502:	183b      	adds	r3, r7, r0
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	18d2      	adds	r2, r2, r3
 800a50a:	183b      	adds	r3, r7, r0
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	68b9      	ldr	r1, [r7, #8]
 800a510:	18cb      	adds	r3, r1, r3
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a516:	183b      	adds	r3, r7, r0
 800a518:	881a      	ldrh	r2, [r3, #0]
 800a51a:	183b      	adds	r3, r7, r0
 800a51c:	3201      	adds	r2, #1
 800a51e:	801a      	strh	r2, [r3, #0]
 800a520:	2316      	movs	r3, #22
 800a522:	18fa      	adds	r2, r7, r3
 800a524:	1dbb      	adds	r3, r7, #6
 800a526:	8812      	ldrh	r2, [r2, #0]
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d3e8      	bcc.n	800a500 <sensirion_common_copy_bytes+0x18>
    }
}
 800a52e:	46c0      	nop			@ (mov r8, r8)
 800a530:	46c0      	nop			@ (mov r8, r8)
 800a532:	46bd      	mov	sp, r7
 800a534:	b006      	add	sp, #24
 800a536:	bd80      	pop	{r7, pc}

0800a538 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d113      	bne.n	800a57e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	22fe      	movs	r2, #254	@ 0xfe
 800a55a:	0592      	lsls	r2, r2, #22
 800a55c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4a1a      	ldr	r2, [pc, #104]	@ (800a5cc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a562:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a568:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4a19      	ldr	r2, [pc, #100]	@ (800a5d4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a56e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a19      	ldr	r2, [pc, #100]	@ (800a5d8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a574:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4a18      	ldr	r2, [pc, #96]	@ (800a5dc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a57a:	61da      	str	r2, [r3, #28]
 800a57c:	e011      	b.n	800a5a2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4a17      	ldr	r2, [pc, #92]	@ (800a5e0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a582:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4a17      	ldr	r2, [pc, #92]	@ (800a5e4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a588:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	4a16      	ldr	r2, [pc, #88]	@ (800a5e8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a58e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4a16      	ldr	r2, [pc, #88]	@ (800a5ec <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a594:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4a15      	ldr	r2, [pc, #84]	@ (800a5f0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a59a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4a15      	ldr	r2, [pc, #84]	@ (800a5f4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a5a0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4a14      	ldr	r2, [pc, #80]	@ (800a5f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a5a6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4a14      	ldr	r2, [pc, #80]	@ (800a5fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a5ac:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4a12      	ldr	r2, [pc, #72]	@ (800a5fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a5b2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	4a12      	ldr	r2, [pc, #72]	@ (800a600 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a5b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f000 f833 	bl	800a628 <GasIndexAlgorithm_reset>
}
 800a5c2:	46c0      	nop			@ (mov r8, r8)
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	b004      	add	sp, #16
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	46c0      	nop			@ (mov r8, r8)
 800a5cc:	00002710 	.word	0x00002710
 800a5d0:	44340000 	.word	0x44340000
 800a5d4:	46859800 	.word	0x46859800
 800a5d8:	46a05000 	.word	0x46a05000
 800a5dc:	41f00000 	.word	0x41f00000
 800a5e0:	42c80000 	.word	0x42c80000
 800a5e4:	00004e20 	.word	0x00004e20
 800a5e8:	43340000 	.word	0x43340000
 800a5ec:	4528c000 	.word	0x4528c000
 800a5f0:	45a32000 	.word	0x45a32000
 800a5f4:	43aa0000 	.word	0x43aa0000
 800a5f8:	43660000 	.word	0x43660000
 800a5fc:	41400000 	.word	0x41400000
 800a600:	42480000 	.word	0x42480000

0800a604 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a60e:	4a05      	ldr	r2, [pc, #20]	@ (800a624 <GasIndexAlgorithm_init+0x20>)
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	0018      	movs	r0, r3
 800a616:	f7ff ff8f 	bl	800a538 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	46bd      	mov	sp, r7
 800a61e:	b002      	add	sp, #8
 800a620:	bd80      	pop	{r7, pc}
 800a622:	46c0      	nop			@ (mov r8, r8)
 800a624:	44610000 	.word	0x44610000

0800a628 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	0018      	movs	r0, r3
 800a646:	f000 f805 	bl	800a654 <GasIndexAlgorithm__init_instances>
}
 800a64a:	46c0      	nop			@ (mov r8, r8)
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b002      	add	sp, #8
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0018      	movs	r0, r3
 800a660:	f000 f8e8 	bl	800a834 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	0018      	movs	r0, r3
 800a668:	f000 f9a6 	bl	800a9b8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a66c:	1c04      	adds	r4, r0, #0
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0018      	movs	r0, r3
 800a672:	f000 f9ab 	bl	800a9cc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a676:	1c02      	adds	r2, r0, #0
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	1c21      	adds	r1, r4, #0
 800a67c:	0018      	movs	r0, r3
 800a67e:	f000 fc3b 	bl	800aef8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d107      	bne.n	800a69a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a68a:	23fe      	movs	r3, #254	@ 0xfe
 800a68c:	059b      	lsls	r3, r3, #22
 800a68e:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b8 <GasIndexAlgorithm__init_instances+0x64>)
 800a690:	490a      	ldr	r1, [pc, #40]	@ (800a6bc <GasIndexAlgorithm__init_instances+0x68>)
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fc86 	bl	800afa4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a698:	e005      	b.n	800a6a6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a69a:	4b09      	ldr	r3, [pc, #36]	@ (800a6c0 <GasIndexAlgorithm__init_instances+0x6c>)
 800a69c:	4a09      	ldr	r2, [pc, #36]	@ (800a6c4 <GasIndexAlgorithm__init_instances+0x70>)
 800a69e:	490a      	ldr	r1, [pc, #40]	@ (800a6c8 <GasIndexAlgorithm__init_instances+0x74>)
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fc7f 	bl	800afa4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f000 fd35 	bl	800b118 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a6ae:	46c0      	nop			@ (mov r8, r8)
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	b003      	add	sp, #12
 800a6b4:	bd90      	pop	{r4, r7, pc}
 800a6b6:	46c0      	nop			@ (mov r8, r8)
 800a6b8:	bc257a78 	.word	0xbc257a78
 800a6bc:	44198000 	.word	0x44198000
 800a6c0:	42c80000 	.word	0x42c80000
 800a6c4:	bbd4fdf4 	.word	0xbbd4fdf4
 800a6c8:	43550000 	.word	0x43550000

0800a6cc <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6dc:	4952      	ldr	r1, [pc, #328]	@ (800a828 <GasIndexAlgorithm_process+0x15c>)
 800a6de:	1c18      	adds	r0, r3, #0
 800a6e0:	f7f5 ff30 	bl	8000544 <__aeabi_fcmple>
 800a6e4:	1e03      	subs	r3, r0, #0
 800a6e6:	d00c      	beq.n	800a702 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	1c19      	adds	r1, r3, #0
 800a6f2:	1c10      	adds	r0, r2, #0
 800a6f4:	f7f6 f8e4 	bl	80008c0 <__aeabi_fadd>
 800a6f8:	1c03      	adds	r3, r0, #0
 800a6fa:	1c1a      	adds	r2, r3, #0
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	631a      	str	r2, [r3, #48]	@ 0x30
 800a700:	e080      	b.n	800a804 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dd25      	ble.n	800a754 <GasIndexAlgorithm_process+0x88>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4a48      	ldr	r2, [pc, #288]	@ (800a82c <GasIndexAlgorithm_process+0x160>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	dc21      	bgt.n	800a754 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	429a      	cmp	r2, r3
 800a718:	dc04      	bgt.n	800a724 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	3301      	adds	r3, #1
 800a720:	60bb      	str	r3, [r7, #8]
 800a722:	e00d      	b.n	800a740 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a41      	ldr	r2, [pc, #260]	@ (800a830 <GasIndexAlgorithm_process+0x164>)
 800a72a:	4694      	mov	ip, r2
 800a72c:	4463      	add	r3, ip
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	429a      	cmp	r2, r3
 800a732:	dd05      	ble.n	800a740 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	4a3d      	ldr	r2, [pc, #244]	@ (800a830 <GasIndexAlgorithm_process+0x164>)
 800a73a:	4694      	mov	ip, r2
 800a73c:	4463      	add	r3, ip
 800a73e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	0018      	movs	r0, r3
 800a74a:	f7f6 ff41 	bl	80015d0 <__aeabi_i2f>
 800a74e:	1c02      	adds	r2, r0, #0
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	0018      	movs	r0, r3
 800a760:	f000 f945 	bl	800a9ee <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a764:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a766:	d014      	beq.n	800a792 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	1c11      	adds	r1, r2, #0
 800a770:	0018      	movs	r0, r3
 800a772:	f000 fbd1 	bl	800af18 <GasIndexAlgorithm__mox_model__process>
 800a776:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	1c11      	adds	r1, r2, #0
 800a784:	0018      	movs	r0, r3
 800a786:	f000 fc25 	bl	800afd4 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a78a:	1c02      	adds	r2, r0, #0
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a790:	e003      	b.n	800a79a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1c11      	adds	r1, r2, #0
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	f000 fcec 	bl	800b180 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a7a8:	1c02      	adds	r2, r0, #0
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b2:	21fc      	movs	r1, #252	@ 0xfc
 800a7b4:	0589      	lsls	r1, r1, #22
 800a7b6:	1c18      	adds	r0, r3, #0
 800a7b8:	f7f5 feba 	bl	8000530 <__aeabi_fcmplt>
 800a7bc:	1e03      	subs	r3, r0, #0
 800a7be:	d003      	beq.n	800a7c8 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	22fc      	movs	r2, #252	@ 0xfc
 800a7c4:	0592      	lsls	r2, r2, #22
 800a7c6:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	1c18      	adds	r0, r3, #0
 800a7d0:	f7f5 fec2 	bl	8000558 <__aeabi_fcmpgt>
 800a7d4:	1e03      	subs	r3, r0, #0
 800a7d6:	d015      	beq.n	800a804 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	1c11      	adds	r1, r2, #0
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f000 fa4f 	bl	800ac84 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	f000 f8e5 	bl	800a9b8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a7ee:	1c04      	adds	r4, r0, #0
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f000 f8ea 	bl	800a9cc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a7f8:	1c02      	adds	r2, r0, #0
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	1c21      	adds	r1, r4, #0
 800a7fe:	0018      	movs	r0, r3
 800a800:	f000 fb7a 	bl	800aef8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a808:	21fc      	movs	r1, #252	@ 0xfc
 800a80a:	0589      	lsls	r1, r1, #22
 800a80c:	1c18      	adds	r0, r3, #0
 800a80e:	f7f6 f857 	bl	80008c0 <__aeabi_fadd>
 800a812:	1c03      	adds	r3, r0, #0
 800a814:	1c18      	adds	r0, r3, #0
 800a816:	f7f6 febb 	bl	8001590 <__aeabi_f2iz>
 800a81a:	0002      	movs	r2, r0
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
    return;
 800a820:	46c0      	nop			@ (mov r8, r8)
}
 800a822:	46bd      	mov	sp, r7
 800a824:	b005      	add	sp, #20
 800a826:	bd90      	pop	{r4, r7, pc}
 800a828:	42340000 	.word	0x42340000
 800a82c:	0000fde7 	.word	0x0000fde7
 800a830:	00007fff 	.word	0x00007fff

0800a834 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a834:	b5b0      	push	{r4, r5, r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	223c      	movs	r2, #60	@ 0x3c
 800a840:	2100      	movs	r1, #0
 800a842:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4952      	ldr	r1, [pc, #328]	@ (800a9a8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a85e:	1c18      	adds	r0, r3, #0
 800a860:	f7f6 f9b8 	bl	8000bd4 <__aeabi_fdiv>
 800a864:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a866:	2188      	movs	r1, #136	@ 0x88
 800a868:	05c9      	lsls	r1, r1, #23
 800a86a:	1c18      	adds	r0, r3, #0
 800a86c:	f7f6 fb98 	bl	8000fa0 <__aeabi_fmul>
 800a870:	1c03      	adds	r3, r0, #0
 800a872:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	494a      	ldr	r1, [pc, #296]	@ (800a9a8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a87e:	1c18      	adds	r0, r3, #0
 800a880:	f7f6 f9a8 	bl	8000bd4 <__aeabi_fdiv>
 800a884:	1c03      	adds	r3, r0, #0
 800a886:	1c19      	adds	r1, r3, #0
 800a888:	1c20      	adds	r0, r4, #0
 800a88a:	f7f6 f819 	bl	80008c0 <__aeabi_fadd>
 800a88e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a890:	1c19      	adds	r1, r3, #0
 800a892:	1c28      	adds	r0, r5, #0
 800a894:	f7f6 f99e 	bl	8000bd4 <__aeabi_fdiv>
 800a898:	1c03      	adds	r3, r0, #0
 800a89a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	4940      	ldr	r1, [pc, #256]	@ (800a9a8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a8a6:	1c18      	adds	r0, r3, #0
 800a8a8:	f7f6 f994 	bl	8000bd4 <__aeabi_fdiv>
 800a8ac:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a8ae:	2185      	movs	r1, #133	@ 0x85
 800a8b0:	05c9      	lsls	r1, r1, #23
 800a8b2:	1c18      	adds	r0, r3, #0
 800a8b4:	f7f6 fb74 	bl	8000fa0 <__aeabi_fmul>
 800a8b8:	1c03      	adds	r3, r0, #0
 800a8ba:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	4938      	ldr	r1, [pc, #224]	@ (800a9a8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a8c6:	1c18      	adds	r0, r3, #0
 800a8c8:	f7f6 f984 	bl	8000bd4 <__aeabi_fdiv>
 800a8cc:	1c03      	adds	r3, r0, #0
 800a8ce:	1c19      	adds	r1, r3, #0
 800a8d0:	1c20      	adds	r0, r4, #0
 800a8d2:	f7f5 fff5 	bl	80008c0 <__aeabi_fadd>
 800a8d6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a8d8:	1c19      	adds	r1, r3, #0
 800a8da:	1c28      	adds	r0, r5, #0
 800a8dc:	f7f6 f97a 	bl	8000bd4 <__aeabi_fdiv>
 800a8e0:	1c03      	adds	r3, r0, #0
 800a8e2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d118      	bne.n	800a922 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8f4:	2188      	movs	r1, #136	@ 0x88
 800a8f6:	05c9      	lsls	r1, r1, #23
 800a8f8:	1c18      	adds	r0, r3, #0
 800a8fa:	f7f6 fb51 	bl	8000fa0 <__aeabi_fmul>
 800a8fe:	1c03      	adds	r3, r0, #0
 800a900:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a906:	4929      	ldr	r1, [pc, #164]	@ (800a9ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a908:	1c18      	adds	r0, r3, #0
 800a90a:	f7f5 ffd9 	bl	80008c0 <__aeabi_fadd>
 800a90e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a910:	1c19      	adds	r1, r3, #0
 800a912:	1c20      	adds	r0, r4, #0
 800a914:	f7f6 f95e 	bl	8000bd4 <__aeabi_fdiv>
 800a918:	1c03      	adds	r3, r0, #0
 800a91a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a920:	e017      	b.n	800a952 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a926:	2188      	movs	r1, #136	@ 0x88
 800a928:	05c9      	lsls	r1, r1, #23
 800a92a:	1c18      	adds	r0, r3, #0
 800a92c:	f7f6 fb38 	bl	8000fa0 <__aeabi_fmul>
 800a930:	1c03      	adds	r3, r0, #0
 800a932:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a938:	491d      	ldr	r1, [pc, #116]	@ (800a9b0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a93a:	1c18      	adds	r0, r3, #0
 800a93c:	f7f5 ffc0 	bl	80008c0 <__aeabi_fadd>
 800a940:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a942:	1c19      	adds	r1, r3, #0
 800a944:	1c20      	adds	r0, r4, #0
 800a946:	f7f6 f945 	bl	8000bd4 <__aeabi_fdiv>
 800a94a:	1c03      	adds	r3, r0, #0
 800a94c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a956:	2185      	movs	r1, #133	@ 0x85
 800a958:	05c9      	lsls	r1, r1, #23
 800a95a:	1c18      	adds	r0, r3, #0
 800a95c:	f7f6 fb20 	bl	8000fa0 <__aeabi_fmul>
 800a960:	1c03      	adds	r3, r0, #0
 800a962:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4912      	ldr	r1, [pc, #72]	@ (800a9b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a96a:	1c18      	adds	r0, r3, #0
 800a96c:	f7f5 ffa8 	bl	80008c0 <__aeabi_fadd>
 800a970:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a972:	1c19      	adds	r1, r3, #0
 800a974:	1c20      	adds	r0, r4, #0
 800a976:	f7f6 f92d 	bl	8000bd4 <__aeabi_fdiv>
 800a97a:	1c03      	adds	r3, r0, #0
 800a97c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a9a0:	46c0      	nop			@ (mov r8, r8)
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	b002      	add	sp, #8
 800a9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a8:	45610000 	.word	0x45610000
 800a9ac:	44960000 	.word	0x44960000
 800a9b0:	41a00000 	.word	0x41a00000
 800a9b4:	451c4000 	.word	0x451c4000

0800a9b8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a9c4:	1c18      	adds	r0, r3, #0
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	b002      	add	sp, #8
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a9dc:	1c19      	adds	r1, r3, #0
 800a9de:	1c10      	adds	r0, r2, #0
 800a9e0:	f7f5 ff6e 	bl	80008c0 <__aeabi_fadd>
 800a9e4:	1c03      	adds	r3, r0, #0
}
 800a9e6:	1c18      	adds	r0, r3, #0
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	b002      	add	sp, #8
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	223c      	movs	r2, #60	@ 0x3c
 800a9fa:	5c9b      	ldrb	r3, [r3, r2]
}
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	b002      	add	sp, #8
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800aa04:	b5b0      	push	{r4, r5, r7, lr}
 800aa06:	b08c      	sub	sp, #48	@ 0x30
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800aa10:	1c19      	adds	r1, r3, #0
 800aa12:	4895      	ldr	r0, [pc, #596]	@ (800ac68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800aa14:	f7f6 fc02 	bl	800121c <__aeabi_fsub>
 800aa18:	1c03      	adds	r3, r0, #0
 800aa1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa20:	1c19      	adds	r1, r3, #0
 800aa22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa24:	f7f5 fd98 	bl	8000558 <__aeabi_fcmpgt>
 800aa28:	1e03      	subs	r3, r0, #0
 800aa2a:	d00b      	beq.n	800aa44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800aa34:	1c19      	adds	r1, r3, #0
 800aa36:	1c10      	adds	r0, r2, #0
 800aa38:	f7f5 ff42 	bl	80008c0 <__aeabi_fadd>
 800aa3c:	1c03      	adds	r3, r0, #0
 800aa3e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa48:	1c19      	adds	r1, r3, #0
 800aa4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa4c:	f7f5 fd84 	bl	8000558 <__aeabi_fcmpgt>
 800aa50:	1e03      	subs	r3, r0, #0
 800aa52:	d00b      	beq.n	800aa6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800aa5c:	1c19      	adds	r1, r3, #0
 800aa5e:	1c10      	adds	r0, r2, #0
 800aa60:	f7f5 ff2e 	bl	80008c0 <__aeabi_fadd>
 800aa64:	1c03      	adds	r3, r0, #0
 800aa66:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6959      	ldr	r1, [r3, #20]
 800aa70:	4a7e      	ldr	r2, [pc, #504]	@ (800ac6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	0018      	movs	r0, r3
 800aa76:	f000 f9f1 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	1c11      	adds	r1, r2, #0
 800aa82:	0018      	movs	r0, r3
 800aa84:	f000 f9fa 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa88:	1c03      	adds	r3, r0, #0
 800aa8a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa98:	1c19      	adds	r1, r3, #0
 800aa9a:	1c10      	adds	r0, r2, #0
 800aa9c:	f7f6 fbbe 	bl	800121c <__aeabi_fsub>
 800aaa0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aaa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaa4:	1c18      	adds	r0, r3, #0
 800aaa6:	f7f6 fa7b 	bl	8000fa0 <__aeabi_fmul>
 800aaaa:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aaac:	1c19      	adds	r1, r3, #0
 800aaae:	1c20      	adds	r0, r4, #0
 800aab0:	f7f5 ff06 	bl	80008c0 <__aeabi_fadd>
 800aab4:	1c03      	adds	r3, r0, #0
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aac0:	1c19      	adds	r1, r3, #0
 800aac2:	486b      	ldr	r0, [pc, #428]	@ (800ac70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aac4:	f7f6 fbaa 	bl	800121c <__aeabi_fsub>
 800aac8:	1c03      	adds	r3, r0, #0
 800aaca:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	1c11      	adds	r1, r2, #0
 800aad4:	0018      	movs	r0, r3
 800aad6:	f000 f9d1 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aada:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aadc:	1c19      	adds	r1, r3, #0
 800aade:	1c28      	adds	r0, r5, #0
 800aae0:	f7f6 fa5e 	bl	8000fa0 <__aeabi_fmul>
 800aae4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aae6:	1c19      	adds	r1, r3, #0
 800aae8:	1c20      	adds	r0, r4, #0
 800aaea:	f7f5 fee9 	bl	80008c0 <__aeabi_fadd>
 800aaee:	1c03      	adds	r3, r0, #0
 800aaf0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aaf2:	4a60      	ldr	r2, [pc, #384]	@ (800ac74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aaf4:	6a39      	ldr	r1, [r7, #32]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f000 f9af 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	1c11      	adds	r1, r2, #0
 800ab06:	0018      	movs	r0, r3
 800ab08:	f000 f9b8 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab0c:	1c03      	adds	r3, r0, #0
 800ab0e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ab10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab12:	69f8      	ldr	r0, [r7, #28]
 800ab14:	f7f6 fa44 	bl	8000fa0 <__aeabi_fmul>
 800ab18:	1c03      	adds	r3, r0, #0
 800ab1a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6999      	ldr	r1, [r3, #24]
 800ab24:	4a51      	ldr	r2, [pc, #324]	@ (800ac6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f000 f997 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	1c11      	adds	r1, r2, #0
 800ab36:	0018      	movs	r0, r3
 800ab38:	f000 f9a0 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab3c:	1c03      	adds	r3, r0, #0
 800ab3e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800ab4c:	1c19      	adds	r1, r3, #0
 800ab4e:	1c10      	adds	r0, r2, #0
 800ab50:	f7f6 fb64 	bl	800121c <__aeabi_fsub>
 800ab54:	1c03      	adds	r3, r0, #0
 800ab56:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800ab58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab5a:	69b8      	ldr	r0, [r7, #24]
 800ab5c:	f7f6 fb5e 	bl	800121c <__aeabi_fsub>
 800ab60:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800ab62:	1c19      	adds	r1, r3, #0
 800ab64:	1c28      	adds	r0, r5, #0
 800ab66:	f7f6 fa1b 	bl	8000fa0 <__aeabi_fmul>
 800ab6a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ab6c:	1c19      	adds	r1, r3, #0
 800ab6e:	1c20      	adds	r0, r4, #0
 800ab70:	f7f5 fea6 	bl	80008c0 <__aeabi_fadd>
 800ab74:	1c03      	adds	r3, r0, #0
 800ab76:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab80:	1c19      	adds	r1, r3, #0
 800ab82:	483b      	ldr	r0, [pc, #236]	@ (800ac70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab84:	f7f6 fb4a 	bl	800121c <__aeabi_fsub>
 800ab88:	1c03      	adds	r3, r0, #0
 800ab8a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	1c11      	adds	r1, r2, #0
 800ab94:	0018      	movs	r0, r3
 800ab96:	f000 f971 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab9a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ab9c:	1c19      	adds	r1, r3, #0
 800ab9e:	1c28      	adds	r0, r5, #0
 800aba0:	f7f6 f9fe 	bl	8000fa0 <__aeabi_fmul>
 800aba4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800aba6:	1c19      	adds	r1, r3, #0
 800aba8:	1c20      	adds	r0, r4, #0
 800abaa:	f7f5 fe89 	bl	80008c0 <__aeabi_fadd>
 800abae:	1c03      	adds	r3, r0, #0
 800abb0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800abb2:	4a30      	ldr	r2, [pc, #192]	@ (800ac74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800abb4:	6939      	ldr	r1, [r7, #16]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	0018      	movs	r0, r3
 800abba:	f000 f94f 	bl	800ae5c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	1c11      	adds	r1, r2, #0
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 f958 	bl	800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800abcc:	1c03      	adds	r3, r0, #0
 800abce:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800abd0:	6979      	ldr	r1, [r7, #20]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7f6 f9e4 	bl	8000fa0 <__aeabi_fmul>
 800abd8:	1c03      	adds	r3, r0, #0
 800abda:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4923      	ldr	r1, [pc, #140]	@ (800ac78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800abea:	1c18      	adds	r0, r3, #0
 800abec:	f7f5 fff2 	bl	8000bd4 <__aeabi_fdiv>
 800abf0:	1c03      	adds	r3, r0, #0
 800abf2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800abf4:	69f9      	ldr	r1, [r7, #28]
 800abf6:	20fe      	movs	r0, #254	@ 0xfe
 800abf8:	0580      	lsls	r0, r0, #22
 800abfa:	f7f6 fb0f 	bl	800121c <__aeabi_fsub>
 800abfe:	1c03      	adds	r3, r0, #0
 800ac00:	491e      	ldr	r1, [pc, #120]	@ (800ac7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ac02:	1c18      	adds	r0, r3, #0
 800ac04:	f7f6 f9cc 	bl	8000fa0 <__aeabi_fmul>
 800ac08:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ac0a:	491d      	ldr	r1, [pc, #116]	@ (800ac80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ac0c:	1c18      	adds	r0, r3, #0
 800ac0e:	f7f6 fb05 	bl	800121c <__aeabi_fsub>
 800ac12:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ac14:	1c19      	adds	r1, r3, #0
 800ac16:	1c28      	adds	r0, r5, #0
 800ac18:	f7f6 f9c2 	bl	8000fa0 <__aeabi_fmul>
 800ac1c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ac1e:	1c19      	adds	r1, r3, #0
 800ac20:	1c20      	adds	r0, r4, #0
 800ac22:	f7f5 fe4d 	bl	80008c0 <__aeabi_fadd>
 800ac26:	1c03      	adds	r3, r0, #0
 800ac28:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac32:	2100      	movs	r1, #0
 800ac34:	1c18      	adds	r0, r3, #0
 800ac36:	f7f5 fc7b 	bl	8000530 <__aeabi_fcmplt>
 800ac3a:	1e03      	subs	r3, r0, #0
 800ac3c:	d002      	beq.n	800ac44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ac4c:	1c19      	adds	r1, r3, #0
 800ac4e:	1c10      	adds	r0, r2, #0
 800ac50:	f7f5 fc82 	bl	8000558 <__aeabi_fcmpgt>
 800ac54:	1e03      	subs	r3, r0, #0
 800ac56:	d100      	bne.n	800ac5a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ac58:	e002      	b.n	800ac60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ac60:	46c0      	nop			@ (mov r8, r8)
 800ac62:	46bd      	mov	sp, r7
 800ac64:	b00c      	add	sp, #48	@ 0x30
 800ac66:	bdb0      	pop	{r4, r5, r7, pc}
 800ac68:	46fffe00 	.word	0x46fffe00
 800ac6c:	3c23d70a 	.word	0x3c23d70a
 800ac70:	43ff0000 	.word	0x43ff0000
 800ac74:	3db851ec 	.word	0x3db851ec
 800ac78:	42700000 	.word	0x42700000
 800ac7c:	3fa66666 	.word	0x3fa66666
 800ac80:	3e99999a 	.word	0x3e99999a

0800ac84 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	223c      	movs	r2, #60	@ 0x3c
 800ac92:	5c9b      	ldrb	r3, [r3, r2]
 800ac94:	2201      	movs	r2, #1
 800ac96:	4053      	eors	r3, r2
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	223c      	movs	r2, #60	@ 0x3c
 800aca2:	2101      	movs	r1, #1
 800aca4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800acb2:	e0c8      	b.n	800ae46 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb8:	4965      	ldr	r1, [pc, #404]	@ (800ae50 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800acba:	1c18      	adds	r0, r3, #0
 800acbc:	f7f5 fc56 	bl	800056c <__aeabi_fcmpge>
 800acc0:	1e03      	subs	r3, r0, #0
 800acc2:	d107      	bne.n	800acd4 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800acc8:	4962      	ldr	r1, [pc, #392]	@ (800ae54 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800acca:	1c18      	adds	r0, r3, #0
 800accc:	f7f5 fc3a 	bl	8000544 <__aeabi_fcmple>
 800acd0:	1e03      	subs	r3, r0, #0
 800acd2:	d00e      	beq.n	800acf2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800acdc:	1c19      	adds	r1, r3, #0
 800acde:	1c10      	adds	r0, r2, #0
 800ace0:	f7f5 fdee 	bl	80008c0 <__aeabi_fadd>
 800ace4:	1c03      	adds	r3, r0, #0
 800ace6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acf6:	1c19      	adds	r1, r3, #0
 800acf8:	6838      	ldr	r0, [r7, #0]
 800acfa:	f7f6 fa8f 	bl	800121c <__aeabi_fsub>
 800acfe:	1c03      	adds	r3, r0, #0
 800ad00:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	0018      	movs	r0, r3
 800ad06:	f7ff fe7d 	bl	800aa04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	1c19      	adds	r1, r3, #0
 800ad10:	6838      	ldr	r0, [r7, #0]
 800ad12:	f7f6 fa83 	bl	800121c <__aeabi_fsub>
 800ad16:	1c03      	adds	r3, r0, #0
 800ad18:	2185      	movs	r1, #133	@ 0x85
 800ad1a:	05c9      	lsls	r1, r1, #23
 800ad1c:	1c18      	adds	r0, r3, #0
 800ad1e:	f7f5 ff59 	bl	8000bd4 <__aeabi_fdiv>
 800ad22:	1c03      	adds	r3, r0, #0
 800ad24:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800ad26:	2100      	movs	r1, #0
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7f5 fc01 	bl	8000530 <__aeabi_fcmplt>
 800ad2e:	1e03      	subs	r3, r0, #0
 800ad30:	d008      	beq.n	800ad44 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	1c18      	adds	r0, r3, #0
 800ad3a:	f7f6 fa6f 	bl	800121c <__aeabi_fsub>
 800ad3e:	1c03      	adds	r3, r0, #0
 800ad40:	617b      	str	r3, [r7, #20]
 800ad42:	e007      	b.n	800ad54 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad48:	1c19      	adds	r1, r3, #0
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f7f5 fdb8 	bl	80008c0 <__aeabi_fadd>
 800ad50:	1c03      	adds	r3, r0, #0
 800ad52:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800ad54:	23fe      	movs	r3, #254	@ 0xfe
 800ad56:	059b      	lsls	r3, r3, #22
 800ad58:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ad5a:	493f      	ldr	r1, [pc, #252]	@ (800ae58 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad5c:	6978      	ldr	r0, [r7, #20]
 800ad5e:	f7f5 fbfb 	bl	8000558 <__aeabi_fcmpgt>
 800ad62:	1e03      	subs	r3, r0, #0
 800ad64:	d010      	beq.n	800ad88 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800ad66:	493c      	ldr	r1, [pc, #240]	@ (800ae58 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	f7f5 ff33 	bl	8000bd4 <__aeabi_fdiv>
 800ad6e:	1c03      	adds	r3, r0, #0
 800ad70:	1c1c      	adds	r4, r3, #0
 800ad72:	4939      	ldr	r1, [pc, #228]	@ (800ae58 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad74:	6978      	ldr	r0, [r7, #20]
 800ad76:	f7f5 ff2d 	bl	8000bd4 <__aeabi_fdiv>
 800ad7a:	1c03      	adds	r3, r0, #0
 800ad7c:	1c19      	adds	r1, r3, #0
 800ad7e:	1c20      	adds	r0, r4, #0
 800ad80:	f7f6 f90e 	bl	8000fa0 <__aeabi_fmul>
 800ad84:	1c03      	adds	r3, r0, #0
 800ad86:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad8c:	1c19      	adds	r1, r3, #0
 800ad8e:	2085      	movs	r0, #133	@ 0x85
 800ad90:	05c0      	lsls	r0, r0, #23
 800ad92:	f7f6 fa43 	bl	800121c <__aeabi_fsub>
 800ad96:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad98:	6939      	ldr	r1, [r7, #16]
 800ad9a:	1c18      	adds	r0, r3, #0
 800ad9c:	f7f6 f900 	bl	8000fa0 <__aeabi_fmul>
 800ada0:	1c03      	adds	r3, r0, #0
 800ada2:	1c18      	adds	r0, r3, #0
 800ada4:	f017 fff0 	bl	8022d88 <sqrtf>
 800ada8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800adb2:	2185      	movs	r1, #133	@ 0x85
 800adb4:	05c9      	lsls	r1, r1, #23
 800adb6:	6938      	ldr	r0, [r7, #16]
 800adb8:	f7f6 f8f2 	bl	8000fa0 <__aeabi_fmul>
 800adbc:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800adbe:	1c19      	adds	r1, r3, #0
 800adc0:	1c28      	adds	r0, r5, #0
 800adc2:	f7f5 ff07 	bl	8000bd4 <__aeabi_fdiv>
 800adc6:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800adc8:	1c19      	adds	r1, r3, #0
 800adca:	1c20      	adds	r0, r4, #0
 800adcc:	f7f6 f8e8 	bl	8000fa0 <__aeabi_fmul>
 800add0:	1c03      	adds	r3, r0, #0
 800add2:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	1c18      	adds	r0, r3, #0
 800addc:	f7f6 f8e0 	bl	8000fa0 <__aeabi_fmul>
 800ade0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ade2:	6939      	ldr	r1, [r7, #16]
 800ade4:	1c18      	adds	r0, r3, #0
 800ade6:	f7f5 fef5 	bl	8000bd4 <__aeabi_fdiv>
 800adea:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800adec:	68f9      	ldr	r1, [r7, #12]
 800adee:	1c18      	adds	r0, r3, #0
 800adf0:	f7f6 f8d6 	bl	8000fa0 <__aeabi_fmul>
 800adf4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800adf6:	1c19      	adds	r1, r3, #0
 800adf8:	1c20      	adds	r0, r4, #0
 800adfa:	f7f5 fd61 	bl	80008c0 <__aeabi_fadd>
 800adfe:	1c03      	adds	r3, r0, #0
 800ae00:	1c18      	adds	r0, r3, #0
 800ae02:	f017 ffc1 	bl	8022d88 <sqrtf>
 800ae06:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ae08:	1c19      	adds	r1, r3, #0
 800ae0a:	1c30      	adds	r0, r6, #0
 800ae0c:	f7f6 f8c8 	bl	8000fa0 <__aeabi_fmul>
 800ae10:	1c03      	adds	r3, r0, #0
 800ae12:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	1c18      	adds	r0, r3, #0
 800ae24:	f7f6 f8bc 	bl	8000fa0 <__aeabi_fmul>
 800ae28:	1c03      	adds	r3, r0, #0
 800ae2a:	2182      	movs	r1, #130	@ 0x82
 800ae2c:	05c9      	lsls	r1, r1, #23
 800ae2e:	1c18      	adds	r0, r3, #0
 800ae30:	f7f5 fed0 	bl	8000bd4 <__aeabi_fdiv>
 800ae34:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800ae36:	1c19      	adds	r1, r3, #0
 800ae38:	1c20      	adds	r0, r4, #0
 800ae3a:	f7f5 fd41 	bl	80008c0 <__aeabi_fadd>
 800ae3e:	1c03      	adds	r3, r0, #0
 800ae40:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ae46:	46c0      	nop			@ (mov r8, r8)
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	b007      	add	sp, #28
 800ae4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae4e:	46c0      	nop			@ (mov r8, r8)
 800ae50:	42c80000 	.word	0x42c80000
 800ae54:	c2c80000 	.word	0xc2c80000
 800ae58:	44b40000 	.word	0x44b40000

0800ae5c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae74:	46c0      	nop			@ (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b004      	add	sp, #16
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae8e:	1c19      	adds	r1, r3, #0
 800ae90:	6838      	ldr	r0, [r7, #0]
 800ae92:	f7f6 f9c3 	bl	800121c <__aeabi_fsub>
 800ae96:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae98:	1c19      	adds	r1, r3, #0
 800ae9a:	1c20      	adds	r0, r4, #0
 800ae9c:	f7f6 f880 	bl	8000fa0 <__aeabi_fmul>
 800aea0:	1c03      	adds	r3, r0, #0
 800aea2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800aea4:	4912      	ldr	r1, [pc, #72]	@ (800aef0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7f5 fb42 	bl	8000530 <__aeabi_fcmplt>
 800aeac:	1e03      	subs	r3, r0, #0
 800aeae:	d002      	beq.n	800aeb6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800aeb0:	23fe      	movs	r3, #254	@ 0xfe
 800aeb2:	059b      	lsls	r3, r3, #22
 800aeb4:	e018      	b.n	800aee8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800aeb6:	490f      	ldr	r1, [pc, #60]	@ (800aef4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7f5 fb4d 	bl	8000558 <__aeabi_fcmpgt>
 800aebe:	1e03      	subs	r3, r0, #0
 800aec0:	d001      	beq.n	800aec6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e010      	b.n	800aee8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	1c18      	adds	r0, r3, #0
 800aeca:	f017 ff35 	bl	8022d38 <expf>
 800aece:	1c03      	adds	r3, r0, #0
 800aed0:	21fe      	movs	r1, #254	@ 0xfe
 800aed2:	0589      	lsls	r1, r1, #22
 800aed4:	1c18      	adds	r0, r3, #0
 800aed6:	f7f5 fcf3 	bl	80008c0 <__aeabi_fadd>
 800aeda:	1c03      	adds	r3, r0, #0
 800aedc:	1c19      	adds	r1, r3, #0
 800aede:	20fe      	movs	r0, #254	@ 0xfe
 800aee0:	0580      	lsls	r0, r0, #22
 800aee2:	f7f5 fe77 	bl	8000bd4 <__aeabi_fdiv>
 800aee6:	1c03      	adds	r3, r0, #0
    }
}
 800aee8:	1c18      	adds	r0, r3, #0
 800aeea:	46bd      	mov	sp, r7
 800aeec:	b005      	add	sp, #20
 800aeee:	bd90      	pop	{r4, r7, pc}
 800aef0:	c2480000 	.word	0xc2480000
 800aef4:	42480000 	.word	0x42480000

0800aef8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800af10:	46c0      	nop			@ (mov r8, r8)
 800af12:	46bd      	mov	sp, r7
 800af14:	b004      	add	sp, #16
 800af16:	bd80      	pop	{r7, pc}

0800af18 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d114      	bne.n	800af54 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af2e:	1c19      	adds	r1, r3, #0
 800af30:	6838      	ldr	r0, [r7, #0]
 800af32:	f7f6 f973 	bl	800121c <__aeabi_fsub>
 800af36:	1c03      	adds	r3, r0, #0
 800af38:	4918      	ldr	r1, [pc, #96]	@ (800af9c <GasIndexAlgorithm__mox_model__process+0x84>)
 800af3a:	1c18      	adds	r0, r3, #0
 800af3c:	f7f5 fe4a 	bl	8000bd4 <__aeabi_fdiv>
 800af40:	1c03      	adds	r3, r0, #0
 800af42:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800af48:	1c19      	adds	r1, r3, #0
 800af4a:	1c10      	adds	r0, r2, #0
 800af4c:	f7f6 f828 	bl	8000fa0 <__aeabi_fmul>
 800af50:	1c03      	adds	r3, r0, #0
 800af52:	e01f      	b.n	800af94 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af58:	1c19      	adds	r1, r3, #0
 800af5a:	6838      	ldr	r0, [r7, #0]
 800af5c:	f7f6 f95e 	bl	800121c <__aeabi_fsub>
 800af60:	1c03      	adds	r3, r0, #0
 800af62:	1c1a      	adds	r2, r3, #0
 800af64:	2380      	movs	r3, #128	@ 0x80
 800af66:	061b      	lsls	r3, r3, #24
 800af68:	4053      	eors	r3, r2
 800af6a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af70:	490b      	ldr	r1, [pc, #44]	@ (800afa0 <GasIndexAlgorithm__mox_model__process+0x88>)
 800af72:	1c18      	adds	r0, r3, #0
 800af74:	f7f5 fca4 	bl	80008c0 <__aeabi_fadd>
 800af78:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af7a:	1c19      	adds	r1, r3, #0
 800af7c:	1c20      	adds	r0, r4, #0
 800af7e:	f7f5 fe29 	bl	8000bd4 <__aeabi_fdiv>
 800af82:	1c03      	adds	r3, r0, #0
 800af84:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af8a:	1c19      	adds	r1, r3, #0
 800af8c:	1c10      	adds	r0, r2, #0
 800af8e:	f7f6 f807 	bl	8000fa0 <__aeabi_fmul>
 800af92:	1c03      	adds	r3, r0, #0
    }
}
 800af94:	1c18      	adds	r0, r3, #0
 800af96:	46bd      	mov	sp, r7
 800af98:	b003      	add	sp, #12
 800af9a:	bd90      	pop	{r4, r7, pc}
 800af9c:	44fa0000 	.word	0x44fa0000
 800afa0:	435c0000 	.word	0x435c0000

0800afa4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2180      	movs	r1, #128	@ 0x80
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2184      	movs	r1, #132	@ 0x84
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2188      	movs	r1, #136	@ 0x88
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	505a      	str	r2, [r3, r1]
}
 800afca:	46c0      	nop			@ (mov r8, r8)
 800afcc:	46bd      	mov	sp, r7
 800afce:	b004      	add	sp, #16
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800afd4:	b590      	push	{r4, r7, lr}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2280      	movs	r2, #128	@ 0x80
 800afe2:	589c      	ldr	r4, [r3, r2]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2284      	movs	r2, #132	@ 0x84
 800afe8:	589b      	ldr	r3, [r3, r2]
 800afea:	1c19      	adds	r1, r3, #0
 800afec:	6838      	ldr	r0, [r7, #0]
 800afee:	f7f6 f915 	bl	800121c <__aeabi_fsub>
 800aff2:	1c03      	adds	r3, r0, #0
 800aff4:	1c19      	adds	r1, r3, #0
 800aff6:	1c20      	adds	r0, r4, #0
 800aff8:	f7f5 ffd2 	bl	8000fa0 <__aeabi_fmul>
 800affc:	1c03      	adds	r3, r0, #0
 800affe:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b000:	4940      	ldr	r1, [pc, #256]	@ (800b104 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b002:	68b8      	ldr	r0, [r7, #8]
 800b004:	f7f5 fa94 	bl	8000530 <__aeabi_fcmplt>
 800b008:	1e03      	subs	r3, r0, #0
 800b00a:	d001      	beq.n	800b010 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b00c:	4b3e      	ldr	r3, [pc, #248]	@ (800b108 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b00e:	e075      	b.n	800b0fc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b010:	493e      	ldr	r1, [pc, #248]	@ (800b10c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b012:	68b8      	ldr	r0, [r7, #8]
 800b014:	f7f5 faa0 	bl	8000558 <__aeabi_fcmpgt>
 800b018:	1e03      	subs	r3, r0, #0
 800b01a:	d001      	beq.n	800b020 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b01c:	2300      	movs	r3, #0
 800b01e:	e06d      	b.n	800b0fc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b020:	2100      	movs	r1, #0
 800b022:	6838      	ldr	r0, [r7, #0]
 800b024:	f7f5 faa2 	bl	800056c <__aeabi_fcmpge>
 800b028:	1e03      	subs	r3, r0, #0
 800b02a:	d047      	beq.n	800b0bc <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2288      	movs	r2, #136	@ 0x88
 800b030:	589b      	ldr	r3, [r3, r2]
 800b032:	21fe      	movs	r1, #254	@ 0xfe
 800b034:	0589      	lsls	r1, r1, #22
 800b036:	1c18      	adds	r0, r3, #0
 800b038:	f7f5 fa74 	bl	8000524 <__aeabi_fcmpeq>
 800b03c:	1e03      	subs	r3, r0, #0
 800b03e:	d00e      	beq.n	800b05e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	1c19      	adds	r1, r3, #0
 800b046:	20fe      	movs	r0, #254	@ 0xfe
 800b048:	0580      	lsls	r0, r0, #22
 800b04a:	f7f6 f8e7 	bl	800121c <__aeabi_fsub>
 800b04e:	1c03      	adds	r3, r0, #0
 800b050:	492f      	ldr	r1, [pc, #188]	@ (800b110 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b052:	1c18      	adds	r0, r3, #0
 800b054:	f7f5 ffa4 	bl	8000fa0 <__aeabi_fmul>
 800b058:	1c03      	adds	r3, r0, #0
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	e012      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	492c      	ldr	r1, [pc, #176]	@ (800b114 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b064:	1c18      	adds	r0, r3, #0
 800b066:	f7f5 ff9b 	bl	8000fa0 <__aeabi_fmul>
 800b06a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b06c:	1c19      	adds	r1, r3, #0
 800b06e:	4826      	ldr	r0, [pc, #152]	@ (800b108 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b070:	f7f6 f8d4 	bl	800121c <__aeabi_fsub>
 800b074:	1c03      	adds	r3, r0, #0
 800b076:	2181      	movs	r1, #129	@ 0x81
 800b078:	05c9      	lsls	r1, r1, #23
 800b07a:	1c18      	adds	r0, r3, #0
 800b07c:	f7f5 fdaa 	bl	8000bd4 <__aeabi_fdiv>
 800b080:	1c03      	adds	r3, r0, #0
 800b082:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b084:	4920      	ldr	r1, [pc, #128]	@ (800b108 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7f5 fc1a 	bl	80008c0 <__aeabi_fadd>
 800b08c:	1c03      	adds	r3, r0, #0
 800b08e:	1c1c      	adds	r4, r3, #0
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	1c18      	adds	r0, r3, #0
 800b094:	f017 fe50 	bl	8022d38 <expf>
 800b098:	1c03      	adds	r3, r0, #0
 800b09a:	21fe      	movs	r1, #254	@ 0xfe
 800b09c:	0589      	lsls	r1, r1, #22
 800b09e:	1c18      	adds	r0, r3, #0
 800b0a0:	f7f5 fc0e 	bl	80008c0 <__aeabi_fadd>
 800b0a4:	1c03      	adds	r3, r0, #0
 800b0a6:	1c19      	adds	r1, r3, #0
 800b0a8:	1c20      	adds	r0, r4, #0
 800b0aa:	f7f5 fd93 	bl	8000bd4 <__aeabi_fdiv>
 800b0ae:	1c03      	adds	r3, r0, #0
 800b0b0:	68f9      	ldr	r1, [r7, #12]
 800b0b2:	1c18      	adds	r0, r3, #0
 800b0b4:	f7f6 f8b2 	bl	800121c <__aeabi_fsub>
 800b0b8:	1c03      	adds	r3, r0, #0
 800b0ba:	e01f      	b.n	800b0fc <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2188      	movs	r1, #136	@ 0x88
 800b0c4:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b0c6:	1c19      	adds	r1, r3, #0
 800b0c8:	1c10      	adds	r0, r2, #0
 800b0ca:	f7f5 fd83 	bl	8000bd4 <__aeabi_fdiv>
 800b0ce:	1c03      	adds	r3, r0, #0
 800b0d0:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	1c18      	adds	r0, r3, #0
 800b0d6:	f017 fe2f 	bl	8022d38 <expf>
 800b0da:	1c03      	adds	r3, r0, #0
 800b0dc:	21fe      	movs	r1, #254	@ 0xfe
 800b0de:	0589      	lsls	r1, r1, #22
 800b0e0:	1c18      	adds	r0, r3, #0
 800b0e2:	f7f5 fbed 	bl	80008c0 <__aeabi_fadd>
 800b0e6:	1c03      	adds	r3, r0, #0
 800b0e8:	1c19      	adds	r1, r3, #0
 800b0ea:	4807      	ldr	r0, [pc, #28]	@ (800b108 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b0ec:	f7f5 fd72 	bl	8000bd4 <__aeabi_fdiv>
 800b0f0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b0f2:	1c19      	adds	r1, r3, #0
 800b0f4:	1c20      	adds	r0, r4, #0
 800b0f6:	f7f5 ff53 	bl	8000fa0 <__aeabi_fmul>
 800b0fa:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b0fc:	1c18      	adds	r0, r3, #0
 800b0fe:	46bd      	mov	sp, r7
 800b100:	b005      	add	sp, #20
 800b102:	bd90      	pop	{r4, r7, pc}
 800b104:	c2480000 	.word	0xc2480000
 800b108:	43fa0000 	.word	0x43fa0000
 800b10c:	42480000 	.word	0x42480000
 800b110:	3f8041ab 	.word	0x3f8041ab
 800b114:	40a00000 	.word	0x40a00000

0800b118 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4913      	ldr	r1, [pc, #76]	@ (800b178 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b12a:	1c18      	adds	r0, r3, #0
 800b12c:	f7f5 fbc8 	bl	80008c0 <__aeabi_fadd>
 800b130:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b132:	1c19      	adds	r1, r3, #0
 800b134:	1c20      	adds	r0, r4, #0
 800b136:	f7f5 fd4d 	bl	8000bd4 <__aeabi_fdiv>
 800b13a:	1c03      	adds	r3, r0, #0
 800b13c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	228c      	movs	r2, #140	@ 0x8c
 800b142:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	490b      	ldr	r1, [pc, #44]	@ (800b17c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b14e:	1c18      	adds	r0, r3, #0
 800b150:	f7f5 fbb6 	bl	80008c0 <__aeabi_fadd>
 800b154:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b156:	1c19      	adds	r1, r3, #0
 800b158:	1c20      	adds	r0, r4, #0
 800b15a:	f7f5 fd3b 	bl	8000bd4 <__aeabi_fdiv>
 800b15e:	1c03      	adds	r3, r0, #0
 800b160:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2290      	movs	r2, #144	@ 0x90
 800b166:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2294      	movs	r2, #148	@ 0x94
 800b16c:	2100      	movs	r1, #0
 800b16e:	5499      	strb	r1, [r3, r2]
}
 800b170:	46c0      	nop			@ (mov r8, r8)
 800b172:	46bd      	mov	sp, r7
 800b174:	b003      	add	sp, #12
 800b176:	bd90      	pop	{r4, r7, pc}
 800b178:	41a00000 	.word	0x41a00000
 800b17c:	43fa0000 	.word	0x43fa0000

0800b180 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2294      	movs	r2, #148	@ 0x94
 800b18e:	5c9b      	ldrb	r3, [r3, r2]
 800b190:	2201      	movs	r2, #1
 800b192:	4053      	eors	r3, r2
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00f      	beq.n	800b1ba <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2198      	movs	r1, #152	@ 0x98
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	219c      	movs	r1, #156	@ 0x9c
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	21a0      	movs	r1, #160	@ 0xa0
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2294      	movs	r2, #148	@ 0x94
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	228c      	movs	r2, #140	@ 0x8c
 800b1be:	589b      	ldr	r3, [r3, r2]
 800b1c0:	1c19      	adds	r1, r3, #0
 800b1c2:	20fe      	movs	r0, #254	@ 0xfe
 800b1c4:	0580      	lsls	r0, r0, #22
 800b1c6:	f7f6 f829 	bl	800121c <__aeabi_fsub>
 800b1ca:	1c03      	adds	r3, r0, #0
 800b1cc:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2298      	movs	r2, #152	@ 0x98
 800b1d2:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b1d4:	1c19      	adds	r1, r3, #0
 800b1d6:	f7f5 fee3 	bl	8000fa0 <__aeabi_fmul>
 800b1da:	1c03      	adds	r3, r0, #0
 800b1dc:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	228c      	movs	r2, #140	@ 0x8c
 800b1e2:	589b      	ldr	r3, [r3, r2]
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	1c18      	adds	r0, r3, #0
 800b1e8:	f7f5 feda 	bl	8000fa0 <__aeabi_fmul>
 800b1ec:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b1ee:	1c19      	adds	r1, r3, #0
 800b1f0:	1c20      	adds	r0, r4, #0
 800b1f2:	f7f5 fb65 	bl	80008c0 <__aeabi_fadd>
 800b1f6:	1c03      	adds	r3, r0, #0
 800b1f8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2298      	movs	r2, #152	@ 0x98
 800b1fe:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2290      	movs	r2, #144	@ 0x90
 800b204:	589b      	ldr	r3, [r3, r2]
 800b206:	1c19      	adds	r1, r3, #0
 800b208:	20fe      	movs	r0, #254	@ 0xfe
 800b20a:	0580      	lsls	r0, r0, #22
 800b20c:	f7f6 f806 	bl	800121c <__aeabi_fsub>
 800b210:	1c03      	adds	r3, r0, #0
 800b212:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	229c      	movs	r2, #156	@ 0x9c
 800b218:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b21a:	1c19      	adds	r1, r3, #0
 800b21c:	f7f5 fec0 	bl	8000fa0 <__aeabi_fmul>
 800b220:	1c03      	adds	r3, r0, #0
 800b222:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2290      	movs	r2, #144	@ 0x90
 800b228:	589b      	ldr	r3, [r3, r2]
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	1c18      	adds	r0, r3, #0
 800b22e:	f7f5 feb7 	bl	8000fa0 <__aeabi_fmul>
 800b232:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b234:	1c19      	adds	r1, r3, #0
 800b236:	1c20      	adds	r0, r4, #0
 800b238:	f7f5 fb42 	bl	80008c0 <__aeabi_fadd>
 800b23c:	1c03      	adds	r3, r0, #0
 800b23e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	229c      	movs	r2, #156	@ 0x9c
 800b244:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2298      	movs	r2, #152	@ 0x98
 800b24a:	589a      	ldr	r2, [r3, r2]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	219c      	movs	r1, #156	@ 0x9c
 800b250:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b252:	1c19      	adds	r1, r3, #0
 800b254:	1c10      	adds	r0, r2, #0
 800b256:	f7f5 ffe1 	bl	800121c <__aeabi_fsub>
 800b25a:	1c03      	adds	r3, r0, #0
 800b25c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b25e:	2100      	movs	r1, #0
 800b260:	6978      	ldr	r0, [r7, #20]
 800b262:	f7f5 f965 	bl	8000530 <__aeabi_fcmplt>
 800b266:	1e03      	subs	r3, r0, #0
 800b268:	d004      	beq.n	800b274 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2280      	movs	r2, #128	@ 0x80
 800b26e:	0612      	lsls	r2, r2, #24
 800b270:	4053      	eors	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b274:	4923      	ldr	r1, [pc, #140]	@ (800b304 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b276:	6978      	ldr	r0, [r7, #20]
 800b278:	f7f5 fe92 	bl	8000fa0 <__aeabi_fmul>
 800b27c:	1c03      	adds	r3, r0, #0
 800b27e:	1c18      	adds	r0, r3, #0
 800b280:	f017 fd5a 	bl	8022d38 <expf>
 800b284:	1c03      	adds	r3, r0, #0
 800b286:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b288:	491f      	ldr	r1, [pc, #124]	@ (800b308 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f7f5 fe88 	bl	8000fa0 <__aeabi_fmul>
 800b290:	1c03      	adds	r3, r0, #0
 800b292:	491e      	ldr	r1, [pc, #120]	@ (800b30c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b294:	1c18      	adds	r0, r3, #0
 800b296:	f7f5 fb13 	bl	80008c0 <__aeabi_fadd>
 800b29a:	1c03      	adds	r3, r0, #0
 800b29c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685c      	ldr	r4, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	1c18      	adds	r0, r3, #0
 800b2aa:	f7f5 fb09 	bl	80008c0 <__aeabi_fadd>
 800b2ae:	1c03      	adds	r3, r0, #0
 800b2b0:	1c19      	adds	r1, r3, #0
 800b2b2:	1c20      	adds	r0, r4, #0
 800b2b4:	f7f5 fc8e 	bl	8000bd4 <__aeabi_fdiv>
 800b2b8:	1c03      	adds	r3, r0, #0
 800b2ba:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	20fe      	movs	r0, #254	@ 0xfe
 800b2c0:	0580      	lsls	r0, r0, #22
 800b2c2:	f7f5 ffab 	bl	800121c <__aeabi_fsub>
 800b2c6:	1c03      	adds	r3, r0, #0
 800b2c8:	1c18      	adds	r0, r3, #0
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	22a0      	movs	r2, #160	@ 0xa0
 800b2ce:	589b      	ldr	r3, [r3, r2]
 800b2d0:	1c19      	adds	r1, r3, #0
 800b2d2:	f7f5 fe65 	bl	8000fa0 <__aeabi_fmul>
 800b2d6:	1c03      	adds	r3, r0, #0
 800b2d8:	1c1c      	adds	r4, r3, #0
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	68b8      	ldr	r0, [r7, #8]
 800b2de:	f7f5 fe5f 	bl	8000fa0 <__aeabi_fmul>
 800b2e2:	1c03      	adds	r3, r0, #0
 800b2e4:	1c19      	adds	r1, r3, #0
 800b2e6:	1c20      	adds	r0, r4, #0
 800b2e8:	f7f5 faea 	bl	80008c0 <__aeabi_fadd>
 800b2ec:	1c03      	adds	r3, r0, #0
 800b2ee:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	22a0      	movs	r2, #160	@ 0xa0
 800b2f4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	22a0      	movs	r2, #160	@ 0xa0
 800b2fa:	589b      	ldr	r3, [r3, r2]
}
 800b2fc:	1c18      	adds	r0, r3, #0
 800b2fe:	46bd      	mov	sp, r7
 800b300:	b007      	add	sp, #28
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	be4ccccd 	.word	0xbe4ccccd
 800b308:	43f00000 	.word	0x43f00000
 800b30c:	41a00000 	.word	0x41a00000

0800b310 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	000a      	movs	r2, r1
 800b31a:	1cbb      	adds	r3, r7, #2
 800b31c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b31e:	230d      	movs	r3, #13
 800b320:	18fb      	adds	r3, r7, r3
 800b322:	22ff      	movs	r2, #255	@ 0xff
 800b324:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b326:	230e      	movs	r3, #14
 800b328:	18fb      	adds	r3, r7, r3
 800b32a:	2200      	movs	r2, #0
 800b32c:	801a      	strh	r2, [r3, #0]
 800b32e:	e037      	b.n	800b3a0 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b330:	230e      	movs	r3, #14
 800b332:	18fb      	adds	r3, r7, r3
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	18d3      	adds	r3, r2, r3
 800b33a:	7819      	ldrb	r1, [r3, #0]
 800b33c:	220d      	movs	r2, #13
 800b33e:	18bb      	adds	r3, r7, r2
 800b340:	18ba      	adds	r2, r7, r2
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	404a      	eors	r2, r1
 800b346:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b348:	230c      	movs	r3, #12
 800b34a:	18fb      	adds	r3, r7, r3
 800b34c:	2208      	movs	r2, #8
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	e01b      	b.n	800b38a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b352:	210d      	movs	r1, #13
 800b354:	187b      	adds	r3, r7, r1
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	b25b      	sxtb	r3, r3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	da09      	bge.n	800b372 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b35e:	187b      	adds	r3, r7, r1
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	b25b      	sxtb	r3, r3
 800b366:	2231      	movs	r2, #49	@ 0x31
 800b368:	4053      	eors	r3, r2
 800b36a:	b25a      	sxtb	r2, r3
 800b36c:	187b      	adds	r3, r7, r1
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	e005      	b.n	800b37e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b372:	230d      	movs	r3, #13
 800b374:	18fa      	adds	r2, r7, r3
 800b376:	18fb      	adds	r3, r7, r3
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	18db      	adds	r3, r3, r3
 800b37c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b37e:	220c      	movs	r2, #12
 800b380:	18bb      	adds	r3, r7, r2
 800b382:	18ba      	adds	r2, r7, r2
 800b384:	7812      	ldrb	r2, [r2, #0]
 800b386:	3a01      	subs	r2, #1
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	230c      	movs	r3, #12
 800b38c:	18fb      	adds	r3, r7, r3
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1de      	bne.n	800b352 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b394:	220e      	movs	r2, #14
 800b396:	18bb      	adds	r3, r7, r2
 800b398:	18ba      	adds	r2, r7, r2
 800b39a:	8812      	ldrh	r2, [r2, #0]
 800b39c:	3201      	adds	r2, #1
 800b39e:	801a      	strh	r2, [r3, #0]
 800b3a0:	230e      	movs	r3, #14
 800b3a2:	18fa      	adds	r2, r7, r3
 800b3a4:	1cbb      	adds	r3, r7, #2
 800b3a6:	8812      	ldrh	r2, [r2, #0]
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d3c0      	bcc.n	800b330 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b3ae:	230d      	movs	r3, #13
 800b3b0:	18fb      	adds	r3, r7, r3
 800b3b2:	781b      	ldrb	r3, [r3, #0]
}
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b004      	add	sp, #16
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	0008      	movs	r0, r1
 800b3c6:	0011      	movs	r1, r2
 800b3c8:	1cbb      	adds	r3, r7, #2
 800b3ca:	1c02      	adds	r2, r0, #0
 800b3cc:	801a      	strh	r2, [r3, #0]
 800b3ce:	1c7b      	adds	r3, r7, #1
 800b3d0:	1c0a      	adds	r2, r1, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b3d4:	1cbb      	adds	r3, r7, #2
 800b3d6:	881a      	ldrh	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	0011      	movs	r1, r2
 800b3dc:	0018      	movs	r0, r3
 800b3de:	f7ff ff97 	bl	800b310 <sensirion_i2c_generate_crc>
 800b3e2:	0003      	movs	r3, r0
 800b3e4:	001a      	movs	r2, r3
 800b3e6:	1c7b      	adds	r3, r7, #1
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d001      	beq.n	800b3f2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e000      	b.n	800b3f4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	0008      	movs	r0, r1
 800b406:	0011      	movs	r1, r2
 800b408:	1cbb      	adds	r3, r7, #2
 800b40a:	1c02      	adds	r2, r0, #0
 800b40c:	801a      	strh	r2, [r3, #0]
 800b40e:	003b      	movs	r3, r7
 800b410:	1c0a      	adds	r2, r1, #0
 800b412:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b414:	003b      	movs	r3, r7
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	b299      	uxth	r1, r3
 800b41c:	1cbb      	adds	r3, r7, #2
 800b41e:	881b      	ldrh	r3, [r3, #0]
 800b420:	1cba      	adds	r2, r7, #2
 800b422:	1c58      	adds	r0, r3, #1
 800b424:	8010      	strh	r0, [r2, #0]
 800b426:	001a      	movs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	189b      	adds	r3, r3, r2
 800b42c:	b2ca      	uxtb	r2, r1
 800b42e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b430:	1cbb      	adds	r3, r7, #2
 800b432:	881b      	ldrh	r3, [r3, #0]
 800b434:	1cba      	adds	r2, r7, #2
 800b436:	1c59      	adds	r1, r3, #1
 800b438:	8011      	strh	r1, [r2, #0]
 800b43a:	001a      	movs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	189b      	adds	r3, r3, r2
 800b440:	003a      	movs	r2, r7
 800b442:	8812      	ldrh	r2, [r2, #0]
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]
    return offset;
 800b448:	1cbb      	adds	r3, r7, #2
 800b44a:	881b      	ldrh	r3, [r3, #0]
}
 800b44c:	0018      	movs	r0, r3
 800b44e:	46bd      	mov	sp, r7
 800b450:	b002      	add	sp, #8
 800b452:	bd80      	pop	{r7, pc}

0800b454 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	0008      	movs	r0, r1
 800b45e:	0011      	movs	r1, r2
 800b460:	1cbb      	adds	r3, r7, #2
 800b462:	1c02      	adds	r2, r0, #0
 800b464:	801a      	strh	r2, [r3, #0]
 800b466:	003b      	movs	r3, r7
 800b468:	1c0a      	adds	r2, r1, #0
 800b46a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b46c:	003b      	movs	r3, r7
 800b46e:	881b      	ldrh	r3, [r3, #0]
 800b470:	0a1b      	lsrs	r3, r3, #8
 800b472:	b299      	uxth	r1, r3
 800b474:	1cbb      	adds	r3, r7, #2
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	1cba      	adds	r2, r7, #2
 800b47a:	1c58      	adds	r0, r3, #1
 800b47c:	8010      	strh	r0, [r2, #0]
 800b47e:	001a      	movs	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	189b      	adds	r3, r3, r2
 800b484:	b2ca      	uxtb	r2, r1
 800b486:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b488:	1cbb      	adds	r3, r7, #2
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	1cba      	adds	r2, r7, #2
 800b48e:	1c59      	adds	r1, r3, #1
 800b490:	8011      	strh	r1, [r2, #0]
 800b492:	001a      	movs	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	189b      	adds	r3, r3, r2
 800b498:	003a      	movs	r2, r7
 800b49a:	8812      	ldrh	r2, [r2, #0]
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b4a0:	1cbb      	adds	r3, r7, #2
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	3b02      	subs	r3, #2
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b4aa:	1cbb      	adds	r3, r7, #2
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	18d4      	adds	r4, r2, r3
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	f7ff ff2c 	bl	800b310 <sensirion_i2c_generate_crc>
 800b4b8:	0003      	movs	r3, r0
 800b4ba:	7023      	strb	r3, [r4, #0]
    offset++;
 800b4bc:	1cbb      	adds	r3, r7, #2
 800b4be:	881a      	ldrh	r2, [r3, #0]
 800b4c0:	1cbb      	adds	r3, r7, #2
 800b4c2:	3201      	adds	r2, #1
 800b4c4:	801a      	strh	r2, [r3, #0]

    return offset;
 800b4c6:	1cbb      	adds	r3, r7, #2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
}
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	b003      	add	sp, #12
 800b4d0:	bd90      	pop	{r4, r7, pc}

0800b4d2 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	0008      	movs	r0, r1
 800b4dc:	0011      	movs	r1, r2
 800b4de:	1cbb      	adds	r3, r7, #2
 800b4e0:	1c02      	adds	r2, r0, #0
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	003b      	movs	r3, r7
 800b4e6:	1c0a      	adds	r2, r1, #0
 800b4e8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b4ea:	003b      	movs	r3, r7
 800b4ec:	881a      	ldrh	r2, [r3, #0]
 800b4ee:	1cbb      	adds	r3, r7, #2
 800b4f0:	8819      	ldrh	r1, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f7ff ffad 	bl	800b454 <sensirion_i2c_add_uint16_t_to_buffer>
 800b4fa:	0003      	movs	r3, r0
}
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	b002      	add	sp, #8
 800b502:	bd80      	pop	{r7, pc}

0800b504 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6039      	str	r1, [r7, #0]
 800b50c:	0011      	movs	r1, r2
 800b50e:	1dfb      	adds	r3, r7, #7
 800b510:	1c02      	adds	r2, r0, #0
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	1d3b      	adds	r3, r7, #4
 800b516:	1c0a      	adds	r2, r1, #0
 800b518:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b51a:	1d3b      	adds	r3, r7, #4
 800b51c:	881a      	ldrh	r2, [r3, #0]
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	1dfb      	adds	r3, r7, #7
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	0018      	movs	r0, r3
 800b526:	f7fe fa01 	bl	800992c <sensirion_i2c_hal_write>
 800b52a:	0003      	movs	r3, r0
}
 800b52c:	0018      	movs	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	b002      	add	sp, #8
 800b532:	bd80      	pop	{r7, pc}

0800b534 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b534:	b5b0      	push	{r4, r5, r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6039      	str	r1, [r7, #0]
 800b53c:	0011      	movs	r1, r2
 800b53e:	1dfb      	adds	r3, r7, #7
 800b540:	1c02      	adds	r2, r0, #0
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	1d3b      	adds	r3, r7, #4
 800b546:	1c0a      	adds	r2, r1, #0
 800b548:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b54a:	1d3b      	adds	r3, r7, #4
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	b29b      	uxth	r3, r3
 800b552:	220a      	movs	r2, #10
 800b554:	18ba      	adds	r2, r7, r2
 800b556:	1c19      	adds	r1, r3, #0
 800b558:	1c0b      	adds	r3, r1, #0
 800b55a:	18db      	adds	r3, r3, r3
 800b55c:	185b      	adds	r3, r3, r1
 800b55e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b560:	1d3b      	adds	r3, r7, #4
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	2201      	movs	r2, #1
 800b566:	4013      	ands	r3, r2
 800b568:	b29b      	uxth	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b56e:	2304      	movs	r3, #4
 800b570:	e06b      	b.n	800b64a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b572:	230a      	movs	r3, #10
 800b574:	18fb      	adds	r3, r7, r3
 800b576:	881a      	ldrh	r2, [r3, #0]
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	1dfb      	adds	r3, r7, #7
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	0018      	movs	r0, r3
 800b580:	f7fe f9b4 	bl	80098ec <sensirion_i2c_hal_read>
 800b584:	0003      	movs	r3, r0
 800b586:	001a      	movs	r2, r3
 800b588:	2108      	movs	r1, #8
 800b58a:	187b      	adds	r3, r7, r1
 800b58c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b58e:	000a      	movs	r2, r1
 800b590:	18bb      	adds	r3, r7, r2
 800b592:	2100      	movs	r1, #0
 800b594:	5e5b      	ldrsh	r3, [r3, r1]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b59a:	18bb      	adds	r3, r7, r2
 800b59c:	2200      	movs	r2, #0
 800b59e:	5e9b      	ldrsh	r3, [r3, r2]
 800b5a0:	e053      	b.n	800b64a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b5a2:	230e      	movs	r3, #14
 800b5a4:	18fb      	adds	r3, r7, r3
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	18fb      	adds	r3, r7, r3
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	801a      	strh	r2, [r3, #0]
 800b5b2:	e041      	b.n	800b638 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b5b4:	210e      	movs	r1, #14
 800b5b6:	187b      	adds	r3, r7, r1
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b5be:	187b      	adds	r3, r7, r1
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	683a      	ldr	r2, [r7, #0]
 800b5c6:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	001a      	movs	r2, r3
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	f7ff fef5 	bl	800b3bc <sensirion_i2c_check_crc>
 800b5d2:	0003      	movs	r3, r0
 800b5d4:	001a      	movs	r2, r3
 800b5d6:	2108      	movs	r1, #8
 800b5d8:	187b      	adds	r3, r7, r1
 800b5da:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b5dc:	000a      	movs	r2, r1
 800b5de:	18bb      	adds	r3, r7, r2
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	5e5b      	ldrsh	r3, [r3, r1]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b5e8:	18bb      	adds	r3, r7, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	5e9b      	ldrsh	r3, [r3, r2]
 800b5ee:	e02c      	b.n	800b64a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b5f0:	240e      	movs	r4, #14
 800b5f2:	193b      	adds	r3, r7, r4
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	18d2      	adds	r2, r2, r3
 800b5fa:	250c      	movs	r5, #12
 800b5fc:	197b      	adds	r3, r7, r5
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	1979      	adds	r1, r7, r5
 800b602:	1c58      	adds	r0, r3, #1
 800b604:	8008      	strh	r0, [r1, #0]
 800b606:	0019      	movs	r1, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	185b      	adds	r3, r3, r1
 800b60c:	7812      	ldrb	r2, [r2, #0]
 800b60e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b610:	193b      	adds	r3, r7, r4
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	18d2      	adds	r2, r2, r3
 800b61a:	197b      	adds	r3, r7, r5
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	1979      	adds	r1, r7, r5
 800b620:	1c58      	adds	r0, r3, #1
 800b622:	8008      	strh	r0, [r1, #0]
 800b624:	0019      	movs	r1, r3
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	185b      	adds	r3, r3, r1
 800b62a:	7812      	ldrb	r2, [r2, #0]
 800b62c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b62e:	193b      	adds	r3, r7, r4
 800b630:	193a      	adds	r2, r7, r4
 800b632:	8812      	ldrh	r2, [r2, #0]
 800b634:	3203      	adds	r2, #3
 800b636:	801a      	strh	r2, [r3, #0]
 800b638:	230e      	movs	r3, #14
 800b63a:	18fa      	adds	r2, r7, r3
 800b63c:	230a      	movs	r3, #10
 800b63e:	18fb      	adds	r3, r7, r3
 800b640:	8812      	ldrh	r2, [r2, #0]
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	429a      	cmp	r2, r3
 800b646:	d3b5      	bcc.n	800b5b4 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	0018      	movs	r0, r3
 800b64c:	46bd      	mov	sp, r7
 800b64e:	b004      	add	sp, #16
 800b650:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b654 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6039      	str	r1, [r7, #0]
 800b65c:	0011      	movs	r1, r2
 800b65e:	1dfb      	adds	r3, r7, #7
 800b660:	1c02      	adds	r2, r0, #0
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	1dbb      	adds	r3, r7, #6
 800b666:	1c0a      	adds	r2, r1, #0
 800b668:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b66a:	4b08      	ldr	r3, [pc, #32]	@ (800b68c <ReadRegister+0x38>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b672:	4b06      	ldr	r3, [pc, #24]	@ (800b68c <ReadRegister+0x38>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	1dba      	adds	r2, r7, #6
 800b678:	7814      	ldrb	r4, [r2, #0]
 800b67a:	6839      	ldr	r1, [r7, #0]
 800b67c:	1dfa      	adds	r2, r7, #7
 800b67e:	7810      	ldrb	r0, [r2, #0]
 800b680:	0022      	movs	r2, r4
 800b682:	4798      	blx	r3
  }
}
 800b684:	46c0      	nop			@ (mov r8, r8)
 800b686:	46bd      	mov	sp, r7
 800b688:	b003      	add	sp, #12
 800b68a:	bd90      	pop	{r4, r7, pc}
 800b68c:	20001094 	.word	0x20001094

0800b690 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6039      	str	r1, [r7, #0]
 800b698:	0011      	movs	r1, r2
 800b69a:	1dfb      	adds	r3, r7, #7
 800b69c:	1c02      	adds	r2, r0, #0
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	1dbb      	adds	r3, r7, #6
 800b6a2:	1c0a      	adds	r2, r1, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b6a6:	4b08      	ldr	r3, [pc, #32]	@ (800b6c8 <WriteRegister+0x38>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d008      	beq.n	800b6c0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b6ae:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <WriteRegister+0x38>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	1dba      	adds	r2, r7, #6
 800b6b4:	7814      	ldrb	r4, [r2, #0]
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	1dfa      	adds	r2, r7, #7
 800b6ba:	7810      	ldrb	r0, [r2, #0]
 800b6bc:	0022      	movs	r2, r4
 800b6be:	4798      	blx	r3
  }
}
 800b6c0:	46c0      	nop			@ (mov r8, r8)
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b003      	add	sp, #12
 800b6c6:	bd90      	pop	{r4, r7, pc}
 800b6c8:	20001098 	.word	0x20001098

0800b6cc <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b6d4:	f003 fb36 	bl	800ed44 <HAL_GetTick>
 800b6d8:	0002      	movs	r2, r0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	18d2      	adds	r2, r2, r3
 800b6de:	4b03      	ldr	r3, [pc, #12]	@ (800b6ec <setSGP40TimeStamp+0x20>)
 800b6e0:	601a      	str	r2, [r3, #0]
}
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b002      	add	sp, #8
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			@ (mov r8, r8)
 800b6ec:	200010a8 	.word	0x200010a8

0800b6f0 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b6f4:	4b02      	ldr	r3, [pc, #8]	@ (800b700 <ResetSGP40samplecounter+0x10>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	701a      	strb	r2, [r3, #0]
}
 800b6fa:	46c0      	nop			@ (mov r8, r8)
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	200010a6 	.word	0x200010a6

0800b704 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b70e:	4b07      	ldr	r3, [pc, #28]	@ (800b72c <SGP_Init+0x28>)
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <SGP_Init+0x2c>)
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b71a:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <SGP_Init+0x30>)
 800b71c:	2100      	movs	r1, #0
 800b71e:	0018      	movs	r0, r3
 800b720:	f7fe ff70 	bl	800a604 <GasIndexAlgorithm_init>
}
 800b724:	46c0      	nop			@ (mov r8, r8)
 800b726:	46bd      	mov	sp, r7
 800b728:	b002      	add	sp, #8
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	20001094 	.word	0x20001094
 800b730:	20001098 	.word	0x20001098
 800b734:	200010b0 	.word	0x200010b0

0800b738 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d004      	beq.n	800b74e <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b744:	4b06      	ldr	r3, [pc, #24]	@ (800b760 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b746:	22fe      	movs	r2, #254	@ 0xfe
 800b748:	0592      	lsls	r2, r2, #22
 800b74a:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b74c:	e002      	b.n	800b754 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b74e:	4b04      	ldr	r3, [pc, #16]	@ (800b760 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b750:	4a04      	ldr	r2, [pc, #16]	@ (800b764 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b752:	605a      	str	r2, [r3, #4]
}
 800b754:	46c0      	nop			@ (mov r8, r8)
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	46c0      	nop			@ (mov r8, r8)
 800b75c:	20002001 	.word	0x20002001
 800b760:	200010b0 	.word	0x200010b0
 800b764:	44610000 	.word	0x44610000

0800b768 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b768:	b580      	push	{r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b76c:	4b13      	ldr	r3, [pc, #76]	@ (800b7bc <SGP_StartMeasurement+0x54>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00d      	beq.n	800b790 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b774:	4b12      	ldr	r3, [pc, #72]	@ (800b7c0 <SGP_StartMeasurement+0x58>)
 800b776:	2208      	movs	r2, #8
 800b778:	0019      	movs	r1, r3
 800b77a:	2059      	movs	r0, #89	@ 0x59
 800b77c:	f7ff ff88 	bl	800b690 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b780:	f003 fae0 	bl	800ed44 <HAL_GetTick>
 800b784:	0003      	movs	r3, r0
 800b786:	331e      	adds	r3, #30
 800b788:	001a      	movs	r2, r3
 800b78a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <SGP_StartMeasurement+0x5c>)
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	e00c      	b.n	800b7aa <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b790:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <SGP_StartMeasurement+0x60>)
 800b792:	2208      	movs	r2, #8
 800b794:	0019      	movs	r1, r3
 800b796:	2059      	movs	r0, #89	@ 0x59
 800b798:	f7ff ff7a 	bl	800b690 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b79c:	f003 fad2 	bl	800ed44 <HAL_GetTick>
 800b7a0:	0003      	movs	r3, r0
 800b7a2:	33aa      	adds	r3, #170	@ 0xaa
 800b7a4:	001a      	movs	r2, r3
 800b7a6:	4b09      	ldr	r3, [pc, #36]	@ (800b7cc <SGP_StartMeasurement+0x64>)
 800b7a8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b7aa:	4b09      	ldr	r3, [pc, #36]	@ (800b7d0 <SGP_StartMeasurement+0x68>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b7b0:	4b08      	ldr	r3, [pc, #32]	@ (800b7d4 <SGP_StartMeasurement+0x6c>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
}
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	20001158 	.word	0x20001158
 800b7c0:	200000a0 	.word	0x200000a0
 800b7c4:	200000b4 	.word	0x200000b4
 800b7c8:	20000098 	.word	0x20000098
 800b7cc:	200000ac 	.word	0x200000ac
 800b7d0:	200010ac 	.word	0x200010ac
 800b7d4:	200010ad 	.word	0x200010ad

0800b7d8 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b7dc:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <SGP_HeatedUp+0x18>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f002 fe19 	bl	800e418 <TimestampIsReached>
 800b7e6:	0003      	movs	r3, r0
}
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	46c0      	nop			@ (mov r8, r8)
 800b7f0:	200000ac 	.word	0x200000ac

0800b7f4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b7f8:	4b04      	ldr	r3, [pc, #16]	@ (800b80c <SGP_MeasurementReady+0x18>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	0018      	movs	r0, r3
 800b7fe:	f002 fe0b 	bl	800e418 <TimestampIsReached>
 800b802:	0003      	movs	r3, r0
}
 800b804:	0018      	movs	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	200000b4 	.word	0x200000b4

0800b810 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b814:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <SGP_MeasurementDone+0x18>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	0018      	movs	r0, r3
 800b81a:	f002 fdfd 	bl	800e418 <TimestampIsReached>
 800b81e:	0003      	movs	r3, r0
}
 800b820:	0018      	movs	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	200000b0 	.word	0x200000b0

0800b82c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b830:	4b04      	ldr	r3, [pc, #16]	@ (800b844 <SGP_TurnHeaterOff+0x18>)
 800b832:	2202      	movs	r2, #2
 800b834:	0019      	movs	r1, r3
 800b836:	2059      	movs	r0, #89	@ 0x59
 800b838:	f7ff ff2a 	bl	800b690 <WriteRegister>
}
 800b83c:	46c0      	nop			@ (mov r8, r8)
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	46c0      	nop			@ (mov r8, r8)
 800b844:	20000090 	.word	0x20000090

0800b848 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b848:	b5b0      	push	{r4, r5, r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af02      	add	r7, sp, #8
 800b84e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b850:	f7ff ffc2 	bl	800b7d8 <SGP_HeatedUp>
 800b854:	1e03      	subs	r3, r0, #0
 800b856:	d032      	beq.n	800b8be <SGP_GetMeasurementValues+0x76>
 800b858:	4bd4      	ldr	r3, [pc, #848]	@ (800bbac <SGP_GetMeasurementValues+0x364>)
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2201      	movs	r2, #1
 800b85e:	4053      	eors	r3, r2
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d02b      	beq.n	800b8be <SGP_GetMeasurementValues+0x76>
 800b866:	4bd2      	ldr	r3, [pc, #840]	@ (800bbb0 <SGP_GetMeasurementValues+0x368>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2201      	movs	r2, #1
 800b86c:	4053      	eors	r3, r2
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b00      	cmp	r3, #0
 800b872:	d024      	beq.n	800b8be <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800b874:	4bcd      	ldr	r3, [pc, #820]	@ (800bbac <SGP_GetMeasurementValues+0x364>)
 800b876:	2201      	movs	r2, #1
 800b878:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b87a:	4bce      	ldr	r3, [pc, #824]	@ (800bbb4 <SGP_GetMeasurementValues+0x36c>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00d      	beq.n	800b89e <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b882:	4bcd      	ldr	r3, [pc, #820]	@ (800bbb8 <SGP_GetMeasurementValues+0x370>)
 800b884:	2208      	movs	r2, #8
 800b886:	0019      	movs	r1, r3
 800b888:	2059      	movs	r0, #89	@ 0x59
 800b88a:	f7ff ff01 	bl	800b690 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b88e:	f003 fa59 	bl	800ed44 <HAL_GetTick>
 800b892:	0003      	movs	r3, r0
 800b894:	331e      	adds	r3, #30
 800b896:	001a      	movs	r2, r3
 800b898:	4bc8      	ldr	r3, [pc, #800]	@ (800bbbc <SGP_GetMeasurementValues+0x374>)
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e00c      	b.n	800b8b8 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b89e:	4bc8      	ldr	r3, [pc, #800]	@ (800bbc0 <SGP_GetMeasurementValues+0x378>)
 800b8a0:	2208      	movs	r2, #8
 800b8a2:	0019      	movs	r1, r3
 800b8a4:	2059      	movs	r0, #89	@ 0x59
 800b8a6:	f7ff fef3 	bl	800b690 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b8aa:	f003 fa4b 	bl	800ed44 <HAL_GetTick>
 800b8ae:	0003      	movs	r3, r0
 800b8b0:	331e      	adds	r3, #30
 800b8b2:	001a      	movs	r2, r3
 800b8b4:	4bc1      	ldr	r3, [pc, #772]	@ (800bbbc <SGP_GetMeasurementValues+0x374>)
 800b8b6:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b8b8:	4bbd      	ldr	r3, [pc, #756]	@ (800bbb0 <SGP_GetMeasurementValues+0x368>)
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b8be:	4bbb      	ldr	r3, [pc, #748]	@ (800bbac <SGP_GetMeasurementValues+0x364>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d100      	bne.n	800b8c8 <SGP_GetMeasurementValues+0x80>
 800b8c6:	e1a9      	b.n	800bc1c <SGP_GetMeasurementValues+0x3d4>
 800b8c8:	f7ff ff94 	bl	800b7f4 <SGP_MeasurementReady>
 800b8cc:	1e03      	subs	r3, r0, #0
 800b8ce:	d100      	bne.n	800b8d2 <SGP_GetMeasurementValues+0x8a>
 800b8d0:	e1a4      	b.n	800bc1c <SGP_GetMeasurementValues+0x3d4>
 800b8d2:	4bbc      	ldr	r3, [pc, #752]	@ (800bbc4 <SGP_GetMeasurementValues+0x37c>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4053      	eors	r3, r2
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d100      	bne.n	800b8e2 <SGP_GetMeasurementValues+0x9a>
 800b8e0:	e19c      	b.n	800bc1c <SGP_GetMeasurementValues+0x3d4>
    MeasurementIsReady = true;
 800b8e2:	4bb8      	ldr	r3, [pc, #736]	@ (800bbc4 <SGP_GetMeasurementValues+0x37c>)
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b8e8:	4bb7      	ldr	r3, [pc, #732]	@ (800bbc8 <SGP_GetMeasurementValues+0x380>)
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	0019      	movs	r1, r3
 800b8ee:	2059      	movs	r0, #89	@ 0x59
 800b8f0:	f7ff feb0 	bl	800b654 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b8f4:	4bb4      	ldr	r3, [pc, #720]	@ (800bbc8 <SGP_GetMeasurementValues+0x380>)
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	2103      	movs	r1, #3
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	f000 f9f4 	bl	800bce8 <CheckCRC>
 800b900:	0003      	movs	r3, r0
 800b902:	001a      	movs	r2, r3
 800b904:	2301      	movs	r3, #1
 800b906:	4053      	eors	r3, r2
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d02a      	beq.n	800b964 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b90e:	4aaf      	ldr	r2, [pc, #700]	@ (800bbcc <SGP_GetMeasurementValues+0x384>)
 800b910:	4baf      	ldr	r3, [pc, #700]	@ (800bbd0 <SGP_GetMeasurementValues+0x388>)
 800b912:	0019      	movs	r1, r3
 800b914:	2001      	movs	r0, #1
 800b916:	f002 fdd5 	bl	800e4c4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b91a:	4aae      	ldr	r2, [pc, #696]	@ (800bbd4 <SGP_GetMeasurementValues+0x38c>)
 800b91c:	4bae      	ldr	r3, [pc, #696]	@ (800bbd8 <SGP_GetMeasurementValues+0x390>)
 800b91e:	0019      	movs	r1, r3
 800b920:	2002      	movs	r0, #2
 800b922:	f002 fdcf 	bl	800e4c4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b926:	230f      	movs	r3, #15
 800b928:	18fb      	adds	r3, r7, r3
 800b92a:	2200      	movs	r2, #0
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	e012      	b.n	800b956 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b930:	240f      	movs	r4, #15
 800b932:	193b      	adds	r3, r7, r4
 800b934:	7818      	ldrb	r0, [r3, #0]
 800b936:	193b      	adds	r3, r7, r4
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	4aa3      	ldr	r2, [pc, #652]	@ (800bbc8 <SGP_GetMeasurementValues+0x380>)
 800b93c:	5cd3      	ldrb	r3, [r2, r3]
 800b93e:	4aa7      	ldr	r2, [pc, #668]	@ (800bbdc <SGP_GetMeasurementValues+0x394>)
 800b940:	49a7      	ldr	r1, [pc, #668]	@ (800bbe0 <SGP_GetMeasurementValues+0x398>)
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	0003      	movs	r3, r0
 800b946:	2003      	movs	r0, #3
 800b948:	f002 fdbc 	bl	800e4c4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b94c:	193b      	adds	r3, r7, r4
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	193b      	adds	r3, r7, r4
 800b952:	3201      	adds	r2, #1
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	230f      	movs	r3, #15
 800b958:	18fb      	adds	r3, r7, r3
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d9e7      	bls.n	800b930 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b960:	2300      	movs	r3, #0
 800b962:	e173      	b.n	800bc4c <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b964:	f003 f9ee 	bl	800ed44 <HAL_GetTick>
 800b968:	0003      	movs	r3, r0
 800b96a:	22fa      	movs	r2, #250	@ 0xfa
 800b96c:	0092      	lsls	r2, r2, #2
 800b96e:	189a      	adds	r2, r3, r2
 800b970:	4b9c      	ldr	r3, [pc, #624]	@ (800bbe4 <SGP_GetMeasurementValues+0x39c>)
 800b972:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b974:	f7ff ff5a 	bl	800b82c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b978:	4b9b      	ldr	r3, [pc, #620]	@ (800bbe8 <SGP_GetMeasurementValues+0x3a0>)
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	3301      	adds	r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	4b99      	ldr	r3, [pc, #612]	@ (800bbe8 <SGP_GetMeasurementValues+0x3a0>)
 800b982:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b984:	4b98      	ldr	r3, [pc, #608]	@ (800bbe8 <SGP_GetMeasurementValues+0x3a0>)
 800b986:	781a      	ldrb	r2, [r3, #0]
 800b988:	4b98      	ldr	r3, [pc, #608]	@ (800bbec <SGP_GetMeasurementValues+0x3a4>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d200      	bcs.n	800b992 <SGP_GetMeasurementValues+0x14a>
 800b990:	e144      	b.n	800bc1c <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b992:	4b8d      	ldr	r3, [pc, #564]	@ (800bbc8 <SGP_GetMeasurementValues+0x380>)
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	021b      	lsls	r3, r3, #8
 800b998:	b21a      	sxth	r2, r3
 800b99a:	4b8b      	ldr	r3, [pc, #556]	@ (800bbc8 <SGP_GetMeasurementValues+0x380>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b21b      	sxth	r3, r3
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	b21a      	sxth	r2, r3
 800b9a4:	240c      	movs	r4, #12
 800b9a6:	193b      	adds	r3, r7, r4
 800b9a8:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b9ae:	193b      	adds	r3, r7, r4
 800b9b0:	8819      	ldrh	r1, [r3, #0]
 800b9b2:	2308      	movs	r3, #8
 800b9b4:	18fa      	adds	r2, r7, r3
 800b9b6:	4b8e      	ldr	r3, [pc, #568]	@ (800bbf0 <SGP_GetMeasurementValues+0x3a8>)
 800b9b8:	0018      	movs	r0, r3
 800b9ba:	f7fe fe87 	bl	800a6cc <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b9be:	4b8d      	ldr	r3, [pc, #564]	@ (800bbf4 <SGP_GetMeasurementValues+0x3ac>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b8b      	ldr	r3, [pc, #556]	@ (800bbf4 <SGP_GetMeasurementValues+0x3ac>)
 800b9c8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b9ca:	4b8a      	ldr	r3, [pc, #552]	@ (800bbf4 <SGP_GetMeasurementValues+0x3ac>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d10d      	bne.n	800b9ee <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b9d2:	193b      	adds	r3, r7, r4
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	4a88      	ldr	r2, [pc, #544]	@ (800bbf8 <SGP_GetMeasurementValues+0x3b0>)
 800b9d8:	4981      	ldr	r1, [pc, #516]	@ (800bbe0 <SGP_GetMeasurementValues+0x398>)
 800b9da:	2003      	movs	r0, #3
 800b9dc:	f002 fd72 	bl	800e4c4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	4a86      	ldr	r2, [pc, #536]	@ (800bbfc <SGP_GetMeasurementValues+0x3b4>)
 800b9e4:	497e      	ldr	r1, [pc, #504]	@ (800bbe0 <SGP_GetMeasurementValues+0x398>)
 800b9e6:	2003      	movs	r0, #3
 800b9e8:	f002 fd6c 	bl	800e4c4 <CreateLine>
 800b9ec:	e006      	b.n	800b9fc <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b9ee:	4b81      	ldr	r3, [pc, #516]	@ (800bbf4 <SGP_GetMeasurementValues+0x3ac>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b0b      	cmp	r3, #11
 800b9f4:	d102      	bne.n	800b9fc <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b9f6:	4b7f      	ldr	r3, [pc, #508]	@ (800bbf4 <SGP_GetMeasurementValues+0x3ac>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dd5a      	ble.n	800bac0 <SGP_GetMeasurementValues+0x278>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b64      	cmp	r3, #100	@ 0x64
 800ba10:	dc56      	bgt.n	800bac0 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	0018      	movs	r0, r3
 800ba18:	f7f7 fcd2 	bl	80033c0 <__aeabi_i2d>
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4b78      	ldr	r3, [pc, #480]	@ (800bc00 <SGP_GetMeasurementValues+0x3b8>)
 800ba20:	f7f6 f9c8 	bl	8001db4 <__aeabi_ddiv>
 800ba24:	0002      	movs	r2, r0
 800ba26:	000b      	movs	r3, r1
 800ba28:	2000      	movs	r0, #0
 800ba2a:	4976      	ldr	r1, [pc, #472]	@ (800bc04 <SGP_GetMeasurementValues+0x3bc>)
 800ba2c:	f7f7 f8ce 	bl	8002bcc <__aeabi_dsub>
 800ba30:	0002      	movs	r2, r0
 800ba32:	000b      	movs	r3, r1
 800ba34:	0014      	movs	r4, r2
 800ba36:	001d      	movs	r5, r3
 800ba38:	4b73      	ldr	r3, [pc, #460]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	0018      	movs	r0, r3
 800ba3e:	f7f7 fcbf 	bl	80033c0 <__aeabi_i2d>
 800ba42:	0002      	movs	r2, r0
 800ba44:	000b      	movs	r3, r1
 800ba46:	0020      	movs	r0, r4
 800ba48:	0029      	movs	r1, r5
 800ba4a:	f7f6 fdf7 	bl	800263c <__aeabi_dmul>
 800ba4e:	0002      	movs	r2, r0
 800ba50:	000b      	movs	r3, r1
 800ba52:	0010      	movs	r0, r2
 800ba54:	0019      	movs	r1, r3
 800ba56:	f7f4 fdf9 	bl	800064c <__aeabi_d2uiz>
 800ba5a:	0003      	movs	r3, r0
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	4b6b      	ldr	r3, [pc, #428]	@ (800bc0c <SGP_GetMeasurementValues+0x3c4>)
 800ba60:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	0018      	movs	r0, r3
 800ba68:	f7f7 fcaa 	bl	80033c0 <__aeabi_i2d>
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4b64      	ldr	r3, [pc, #400]	@ (800bc00 <SGP_GetMeasurementValues+0x3b8>)
 800ba70:	f7f6 f9a0 	bl	8001db4 <__aeabi_ddiv>
 800ba74:	0002      	movs	r2, r0
 800ba76:	000b      	movs	r3, r1
 800ba78:	0014      	movs	r4, r2
 800ba7a:	001d      	movs	r5, r3
 800ba7c:	4b62      	ldr	r3, [pc, #392]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	0018      	movs	r0, r3
 800ba82:	f7f7 fc9d 	bl	80033c0 <__aeabi_i2d>
 800ba86:	0002      	movs	r2, r0
 800ba88:	000b      	movs	r3, r1
 800ba8a:	0020      	movs	r0, r4
 800ba8c:	0029      	movs	r1, r5
 800ba8e:	f7f6 fdd5 	bl	800263c <__aeabi_dmul>
 800ba92:	0002      	movs	r2, r0
 800ba94:	000b      	movs	r3, r1
 800ba96:	0010      	movs	r0, r2
 800ba98:	0019      	movs	r1, r3
 800ba9a:	f7f4 fdd7 	bl	800064c <__aeabi_d2uiz>
 800ba9e:	0003      	movs	r3, r0
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	4b5b      	ldr	r3, [pc, #364]	@ (800bc10 <SGP_GetMeasurementValues+0x3c8>)
 800baa4:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800baa6:	4b58      	ldr	r3, [pc, #352]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800baa8:	881a      	ldrh	r2, [r3, #0]
 800baaa:	4b5a      	ldr	r3, [pc, #360]	@ (800bc14 <SGP_GetMeasurementValues+0x3cc>)
 800baac:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800baae:	4b59      	ldr	r3, [pc, #356]	@ (800bc14 <SGP_GetMeasurementValues+0x3cc>)
 800bab0:	8818      	ldrh	r0, [r3, #0]
 800bab2:	4b56      	ldr	r3, [pc, #344]	@ (800bc0c <SGP_GetMeasurementValues+0x3c4>)
 800bab4:	8819      	ldrh	r1, [r3, #0]
 800bab6:	4b56      	ldr	r3, [pc, #344]	@ (800bc10 <SGP_GetMeasurementValues+0x3c8>)
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	001a      	movs	r2, r3
 800babc:	f001 fc2c 	bl	800d318 <SetVocLED>
      }
      if(*vocIndex > 100){
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b64      	cmp	r3, #100	@ 0x64
 800bac6:	dd66      	ble.n	800bb96 <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	0018      	movs	r0, r3
 800bace:	f7f7 fc77 	bl	80033c0 <__aeabi_i2d>
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b4a      	ldr	r3, [pc, #296]	@ (800bc00 <SGP_GetMeasurementValues+0x3b8>)
 800bad6:	f7f7 f879 	bl	8002bcc <__aeabi_dsub>
 800bada:	0002      	movs	r2, r0
 800badc:	000b      	movs	r3, r1
 800bade:	0010      	movs	r0, r2
 800bae0:	0019      	movs	r1, r3
 800bae2:	2200      	movs	r2, #0
 800bae4:	4b4c      	ldr	r3, [pc, #304]	@ (800bc18 <SGP_GetMeasurementValues+0x3d0>)
 800bae6:	f7f6 f965 	bl	8001db4 <__aeabi_ddiv>
 800baea:	0002      	movs	r2, r0
 800baec:	000b      	movs	r3, r1
 800baee:	0014      	movs	r4, r2
 800baf0:	001d      	movs	r5, r3
 800baf2:	4b45      	ldr	r3, [pc, #276]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	0018      	movs	r0, r3
 800baf8:	f7f7 fc62 	bl	80033c0 <__aeabi_i2d>
 800bafc:	0002      	movs	r2, r0
 800bafe:	000b      	movs	r3, r1
 800bb00:	0020      	movs	r0, r4
 800bb02:	0029      	movs	r1, r5
 800bb04:	f7f6 fd9a 	bl	800263c <__aeabi_dmul>
 800bb08:	0002      	movs	r2, r0
 800bb0a:	000b      	movs	r3, r1
 800bb0c:	0010      	movs	r0, r2
 800bb0e:	0019      	movs	r1, r3
 800bb10:	f7f4 fd9c 	bl	800064c <__aeabi_d2uiz>
 800bb14:	0003      	movs	r3, r0
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	4b3c      	ldr	r3, [pc, #240]	@ (800bc0c <SGP_GetMeasurementValues+0x3c4>)
 800bb1a:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	0018      	movs	r0, r3
 800bb22:	f7f7 fc4d 	bl	80033c0 <__aeabi_i2d>
 800bb26:	2200      	movs	r2, #0
 800bb28:	4b35      	ldr	r3, [pc, #212]	@ (800bc00 <SGP_GetMeasurementValues+0x3b8>)
 800bb2a:	f7f7 f84f 	bl	8002bcc <__aeabi_dsub>
 800bb2e:	0002      	movs	r2, r0
 800bb30:	000b      	movs	r3, r1
 800bb32:	0010      	movs	r0, r2
 800bb34:	0019      	movs	r1, r3
 800bb36:	2200      	movs	r2, #0
 800bb38:	4b37      	ldr	r3, [pc, #220]	@ (800bc18 <SGP_GetMeasurementValues+0x3d0>)
 800bb3a:	f7f6 f93b 	bl	8001db4 <__aeabi_ddiv>
 800bb3e:	0002      	movs	r2, r0
 800bb40:	000b      	movs	r3, r1
 800bb42:	2000      	movs	r0, #0
 800bb44:	492f      	ldr	r1, [pc, #188]	@ (800bc04 <SGP_GetMeasurementValues+0x3bc>)
 800bb46:	f7f7 f841 	bl	8002bcc <__aeabi_dsub>
 800bb4a:	0002      	movs	r2, r0
 800bb4c:	000b      	movs	r3, r1
 800bb4e:	0014      	movs	r4, r2
 800bb50:	001d      	movs	r5, r3
 800bb52:	4b2d      	ldr	r3, [pc, #180]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	0018      	movs	r0, r3
 800bb58:	f7f7 fc32 	bl	80033c0 <__aeabi_i2d>
 800bb5c:	0002      	movs	r2, r0
 800bb5e:	000b      	movs	r3, r1
 800bb60:	0020      	movs	r0, r4
 800bb62:	0029      	movs	r1, r5
 800bb64:	f7f6 fd6a 	bl	800263c <__aeabi_dmul>
 800bb68:	0002      	movs	r2, r0
 800bb6a:	000b      	movs	r3, r1
 800bb6c:	0010      	movs	r0, r2
 800bb6e:	0019      	movs	r1, r3
 800bb70:	f7f4 fd6c 	bl	800064c <__aeabi_d2uiz>
 800bb74:	0003      	movs	r3, r0
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	4b26      	ldr	r3, [pc, #152]	@ (800bc14 <SGP_GetMeasurementValues+0x3cc>)
 800bb7a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb7c:	4b22      	ldr	r3, [pc, #136]	@ (800bc08 <SGP_GetMeasurementValues+0x3c0>)
 800bb7e:	881a      	ldrh	r2, [r3, #0]
 800bb80:	4b23      	ldr	r3, [pc, #140]	@ (800bc10 <SGP_GetMeasurementValues+0x3c8>)
 800bb82:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb84:	4b23      	ldr	r3, [pc, #140]	@ (800bc14 <SGP_GetMeasurementValues+0x3cc>)
 800bb86:	8818      	ldrh	r0, [r3, #0]
 800bb88:	4b20      	ldr	r3, [pc, #128]	@ (800bc0c <SGP_GetMeasurementValues+0x3c4>)
 800bb8a:	8819      	ldrh	r1, [r3, #0]
 800bb8c:	4b20      	ldr	r3, [pc, #128]	@ (800bc10 <SGP_GetMeasurementValues+0x3c8>)
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	001a      	movs	r2, r3
 800bb92:	f001 fbc1 	bl	800d318 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb96:	4b14      	ldr	r3, [pc, #80]	@ (800bbe8 <SGP_GetMeasurementValues+0x3a0>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bb9c:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <SGP_GetMeasurementValues+0x36c>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bba2:	4b03      	ldr	r3, [pc, #12]	@ (800bbb0 <SGP_GetMeasurementValues+0x368>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]
      return true;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e04f      	b.n	800bc4c <SGP_GetMeasurementValues+0x404>
 800bbac:	200010ac 	.word	0x200010ac
 800bbb0:	20001159 	.word	0x20001159
 800bbb4:	20001158 	.word	0x20001158
 800bbb8:	200000a0 	.word	0x200000a0
 800bbbc:	200000b4 	.word	0x200000b4
 800bbc0:	20000098 	.word	0x20000098
 800bbc4:	200010ad 	.word	0x200010ad
 800bbc8:	2000109c 	.word	0x2000109c
 800bbcc:	08024c7c 	.word	0x08024c7c
 800bbd0:	08024ca4 	.word	0x08024ca4
 800bbd4:	08024ca8 	.word	0x08024ca8
 800bbd8:	08024cc8 	.word	0x08024cc8
 800bbdc:	08024ccc 	.word	0x08024ccc
 800bbe0:	08024cec 	.word	0x08024cec
 800bbe4:	200000b0 	.word	0x200000b0
 800bbe8:	200010a5 	.word	0x200010a5
 800bbec:	200000aa 	.word	0x200000aa
 800bbf0:	200010b0 	.word	0x200010b0
 800bbf4:	200010a6 	.word	0x200010a6
 800bbf8:	08024cf0 	.word	0x08024cf0
 800bbfc:	08024d0c 	.word	0x08024d0c
 800bc00:	40590000 	.word	0x40590000
 800bc04:	3ff00000 	.word	0x3ff00000
 800bc08:	200000b8 	.word	0x200000b8
 800bc0c:	20001164 	.word	0x20001164
 800bc10:	20001162 	.word	0x20001162
 800bc14:	20001160 	.word	0x20001160
 800bc18:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bc1c:	f7ff fdf8 	bl	800b810 <SGP_MeasurementDone>
 800bc20:	1e03      	subs	r3, r0, #0
 800bc22:	d012      	beq.n	800bc4a <SGP_GetMeasurementValues+0x402>
 800bc24:	4b0b      	ldr	r3, [pc, #44]	@ (800bc54 <SGP_GetMeasurementValues+0x40c>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00e      	beq.n	800bc4a <SGP_GetMeasurementValues+0x402>
 800bc2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc58 <SGP_GetMeasurementValues+0x410>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bc34:	4a09      	ldr	r2, [pc, #36]	@ (800bc5c <SGP_GetMeasurementValues+0x414>)
 800bc36:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <SGP_GetMeasurementValues+0x418>)
 800bc38:	0019      	movs	r1, r3
 800bc3a:	2003      	movs	r0, #3
 800bc3c:	f002 fc42 	bl	800e4c4 <CreateLine>
    SGP_StartMeasurement();
 800bc40:	f7ff fd92 	bl	800b768 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bc44:	4b07      	ldr	r3, [pc, #28]	@ (800bc64 <SGP_GetMeasurementValues+0x41c>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	b004      	add	sp, #16
 800bc52:	bdb0      	pop	{r4, r5, r7, pc}
 800bc54:	200010ac 	.word	0x200010ac
 800bc58:	200010ad 	.word	0x200010ad
 800bc5c:	08024d28 	.word	0x08024d28
 800bc60:	08024cec 	.word	0x08024cec
 800bc64:	20001159 	.word	0x20001159

0800bc68 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd8 <SGP_DeviceConnected+0x70>)
 800bc70:	2202      	movs	r2, #2
 800bc72:	0019      	movs	r1, r3
 800bc74:	2059      	movs	r0, #89	@ 0x59
 800bc76:	f7ff fd0b 	bl	800b690 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	f003 f86c 	bl	800ed58 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc80:	4b16      	ldr	r3, [pc, #88]	@ (800bcdc <SGP_DeviceConnected+0x74>)
 800bc82:	2209      	movs	r2, #9
 800bc84:	0019      	movs	r1, r3
 800bc86:	2059      	movs	r0, #89	@ 0x59
 800bc88:	f7ff fce4 	bl	800b654 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc8c:	1dfb      	adds	r3, r7, #7
 800bc8e:	2200      	movs	r2, #0
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	e011      	b.n	800bcb8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc94:	1dfb      	adds	r3, r7, #7
 800bc96:	7818      	ldrb	r0, [r3, #0]
 800bc98:	1dfb      	adds	r3, r7, #7
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	4a0f      	ldr	r2, [pc, #60]	@ (800bcdc <SGP_DeviceConnected+0x74>)
 800bc9e:	5cd3      	ldrb	r3, [r2, r3]
 800bca0:	4a0f      	ldr	r2, [pc, #60]	@ (800bce0 <SGP_DeviceConnected+0x78>)
 800bca2:	4910      	ldr	r1, [pc, #64]	@ (800bce4 <SGP_DeviceConnected+0x7c>)
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	0003      	movs	r3, r0
 800bca8:	2002      	movs	r0, #2
 800bcaa:	f002 fc0b 	bl	800e4c4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bcae:	1dfb      	adds	r3, r7, #7
 800bcb0:	781a      	ldrb	r2, [r3, #0]
 800bcb2:	1dfb      	adds	r3, r7, #7
 800bcb4:	3201      	adds	r2, #1
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	1dfb      	adds	r3, r7, #7
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b08      	cmp	r3, #8
 800bcbe:	d9e9      	bls.n	800bc94 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <SGP_DeviceConnected+0x74>)
 800bcc2:	2203      	movs	r2, #3
 800bcc4:	2109      	movs	r1, #9
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	f000 f80e 	bl	800bce8 <CheckCRC>
 800bccc:	0003      	movs	r3, r0
}
 800bcce:	0018      	movs	r0, r3
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	b002      	add	sp, #8
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	46c0      	nop			@ (mov r8, r8)
 800bcd8:	20000094 	.word	0x20000094
 800bcdc:	2000109c 	.word	0x2000109c
 800bce0:	08024d48 	.word	0x08024d48
 800bce4:	08024cc8 	.word	0x08024cc8

0800bce8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcea:	b08f      	sub	sp, #60	@ 0x3c
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6278      	str	r0, [r7, #36]	@ 0x24
 800bcf0:	0008      	movs	r0, r1
 800bcf2:	0011      	movs	r1, r2
 800bcf4:	2323      	movs	r3, #35	@ 0x23
 800bcf6:	18fb      	adds	r3, r7, r3
 800bcf8:	1c02      	adds	r2, r0, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	2322      	movs	r3, #34	@ 0x22
 800bcfe:	18fb      	adds	r3, r7, r3
 800bd00:	1c0a      	adds	r2, r1, #0
 800bd02:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bd04:	2317      	movs	r3, #23
 800bd06:	2220      	movs	r2, #32
 800bd08:	189b      	adds	r3, r3, r2
 800bd0a:	19db      	adds	r3, r3, r7
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e09f      	b.n	800be52 <CheckCRC+0x16a>
 800bd12:	466b      	mov	r3, sp
 800bd14:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bd16:	2322      	movs	r3, #34	@ 0x22
 800bd18:	18fb      	adds	r3, r7, r3
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	001a      	movs	r2, r3
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd22:	60bb      	str	r3, [r7, #8]
 800bd24:	2200      	movs	r2, #0
 800bd26:	60fa      	str	r2, [r7, #12]
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	68f9      	ldr	r1, [r7, #12]
 800bd2c:	0002      	movs	r2, r0
 800bd2e:	0f52      	lsrs	r2, r2, #29
 800bd30:	000c      	movs	r4, r1
 800bd32:	00e4      	lsls	r4, r4, #3
 800bd34:	61fc      	str	r4, [r7, #28]
 800bd36:	69fc      	ldr	r4, [r7, #28]
 800bd38:	4314      	orrs	r4, r2
 800bd3a:	61fc      	str	r4, [r7, #28]
 800bd3c:	0002      	movs	r2, r0
 800bd3e:	00d2      	lsls	r2, r2, #3
 800bd40:	61ba      	str	r2, [r7, #24]
 800bd42:	603b      	str	r3, [r7, #0]
 800bd44:	2200      	movs	r2, #0
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	6838      	ldr	r0, [r7, #0]
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	0002      	movs	r2, r0
 800bd4e:	0f52      	lsrs	r2, r2, #29
 800bd50:	000c      	movs	r4, r1
 800bd52:	00e4      	lsls	r4, r4, #3
 800bd54:	617c      	str	r4, [r7, #20]
 800bd56:	697c      	ldr	r4, [r7, #20]
 800bd58:	4314      	orrs	r4, r2
 800bd5a:	617c      	str	r4, [r7, #20]
 800bd5c:	0002      	movs	r2, r0
 800bd5e:	00d2      	lsls	r2, r2, #3
 800bd60:	613a      	str	r2, [r7, #16]
 800bd62:	3307      	adds	r3, #7
 800bd64:	08db      	lsrs	r3, r3, #3
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	466a      	mov	r2, sp
 800bd6a:	1ad3      	subs	r3, r2, r3
 800bd6c:	469d      	mov	sp, r3
 800bd6e:	466b      	mov	r3, sp
 800bd70:	3300      	adds	r3, #0
 800bd72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd74:	2316      	movs	r3, #22
 800bd76:	2220      	movs	r2, #32
 800bd78:	189b      	adds	r3, r3, r2
 800bd7a:	19db      	adds	r3, r3, r7
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
 800bd80:	e01e      	b.n	800bdc0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd82:	2317      	movs	r3, #23
 800bd84:	2220      	movs	r2, #32
 800bd86:	189b      	adds	r3, r3, r2
 800bd88:	19db      	adds	r3, r3, r7
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	2116      	movs	r1, #22
 800bd8e:	2320      	movs	r3, #32
 800bd90:	18cb      	adds	r3, r1, r3
 800bd92:	19db      	adds	r3, r3, r7
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	18d3      	adds	r3, r2, r3
 800bd98:	001a      	movs	r2, r3
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	189a      	adds	r2, r3, r2
 800bd9e:	0008      	movs	r0, r1
 800bda0:	2320      	movs	r3, #32
 800bda2:	18cb      	adds	r3, r1, r3
 800bda4:	19db      	adds	r3, r3, r7
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	7811      	ldrb	r1, [r2, #0]
 800bdaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdac:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bdae:	2320      	movs	r3, #32
 800bdb0:	18c3      	adds	r3, r0, r3
 800bdb2:	19db      	adds	r3, r3, r7
 800bdb4:	781a      	ldrb	r2, [r3, #0]
 800bdb6:	2320      	movs	r3, #32
 800bdb8:	18c3      	adds	r3, r0, r3
 800bdba:	19db      	adds	r3, r3, r7
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	2316      	movs	r3, #22
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	189b      	adds	r3, r3, r2
 800bdc6:	19da      	adds	r2, r3, r7
 800bdc8:	2322      	movs	r3, #34	@ 0x22
 800bdca:	18fb      	adds	r3, r7, r3
 800bdcc:	7812      	ldrb	r2, [r2, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d3d6      	bcc.n	800bd82 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bdd4:	2417      	movs	r4, #23
 800bdd6:	2320      	movs	r3, #32
 800bdd8:	18e3      	adds	r3, r4, r3
 800bdda:	19db      	adds	r3, r3, r7
 800bddc:	781a      	ldrb	r2, [r3, #0]
 800bdde:	2322      	movs	r3, #34	@ 0x22
 800bde0:	18fb      	adds	r3, r7, r3
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	18d3      	adds	r3, r2, r3
 800bde6:	3b01      	subs	r3, #1
 800bde8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdea:	18d2      	adds	r2, r2, r3
 800bdec:	250b      	movs	r5, #11
 800bdee:	2320      	movs	r3, #32
 800bdf0:	18eb      	adds	r3, r5, r3
 800bdf2:	19db      	adds	r3, r3, r7
 800bdf4:	7812      	ldrb	r2, [r2, #0]
 800bdf6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bdf8:	2322      	movs	r3, #34	@ 0x22
 800bdfa:	18fb      	adds	r3, r7, r3
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	3b01      	subs	r3, #1
 800be00:	b2da      	uxtb	r2, r3
 800be02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be04:	0011      	movs	r1, r2
 800be06:	0018      	movs	r0, r3
 800be08:	f000 f838 	bl	800be7c <CalculateCRC>
 800be0c:	0003      	movs	r3, r0
 800be0e:	001a      	movs	r2, r3
 800be10:	2320      	movs	r3, #32
 800be12:	18eb      	adds	r3, r5, r3
 800be14:	19db      	adds	r3, r3, r7
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	4293      	cmp	r3, r2
 800be1a:	d00c      	beq.n	800be36 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800be1c:	2320      	movs	r3, #32
 800be1e:	18e3      	adds	r3, r4, r3
 800be20:	19db      	adds	r3, r3, r7
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	4a13      	ldr	r2, [pc, #76]	@ (800be74 <CheckCRC+0x18c>)
 800be28:	4913      	ldr	r1, [pc, #76]	@ (800be78 <CheckCRC+0x190>)
 800be2a:	2001      	movs	r0, #1
 800be2c:	f002 fb4a 	bl	800e4c4 <CreateLine>
      return false;
 800be30:	2300      	movs	r3, #0
 800be32:	46b5      	mov	sp, r6
 800be34:	e019      	b.n	800be6a <CheckCRC+0x182>
 800be36:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800be38:	2217      	movs	r2, #23
 800be3a:	2320      	movs	r3, #32
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	19db      	adds	r3, r3, r7
 800be40:	2120      	movs	r1, #32
 800be42:	1852      	adds	r2, r2, r1
 800be44:	19d1      	adds	r1, r2, r7
 800be46:	2222      	movs	r2, #34	@ 0x22
 800be48:	18ba      	adds	r2, r7, r2
 800be4a:	7809      	ldrb	r1, [r1, #0]
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	188a      	adds	r2, r1, r2
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	2317      	movs	r3, #23
 800be54:	2220      	movs	r2, #32
 800be56:	189b      	adds	r3, r3, r2
 800be58:	19da      	adds	r2, r3, r7
 800be5a:	2323      	movs	r3, #35	@ 0x23
 800be5c:	18fb      	adds	r3, r7, r3
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	429a      	cmp	r2, r3
 800be64:	d200      	bcs.n	800be68 <CheckCRC+0x180>
 800be66:	e754      	b.n	800bd12 <CheckCRC+0x2a>
    }
  }
  return true;
 800be68:	2301      	movs	r3, #1
}
 800be6a:	0018      	movs	r0, r3
 800be6c:	46bd      	mov	sp, r7
 800be6e:	b00f      	add	sp, #60	@ 0x3c
 800be70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be72:	46c0      	nop			@ (mov r8, r8)
 800be74:	08024d68 	.word	0x08024d68
 800be78:	08024ca4 	.word	0x08024ca4

0800be7c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	000a      	movs	r2, r1
 800be86:	1cfb      	adds	r3, r7, #3
 800be88:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be8a:	230f      	movs	r3, #15
 800be8c:	18fb      	adds	r3, r7, r3
 800be8e:	22ff      	movs	r2, #255	@ 0xff
 800be90:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be92:	230e      	movs	r3, #14
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	e037      	b.n	800bf0c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be9c:	230e      	movs	r3, #14
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	18d3      	adds	r3, r2, r3
 800bea6:	7819      	ldrb	r1, [r3, #0]
 800bea8:	220f      	movs	r2, #15
 800beaa:	18bb      	adds	r3, r7, r2
 800beac:	18ba      	adds	r2, r7, r2
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	404a      	eors	r2, r1
 800beb2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800beb4:	230d      	movs	r3, #13
 800beb6:	18fb      	adds	r3, r7, r3
 800beb8:	2200      	movs	r2, #0
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	e01b      	b.n	800bef6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800bebe:	210f      	movs	r1, #15
 800bec0:	187b      	adds	r3, r7, r1
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b25b      	sxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	da09      	bge.n	800bede <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800beca:	187b      	adds	r3, r7, r1
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	b25b      	sxtb	r3, r3
 800bed2:	2231      	movs	r2, #49	@ 0x31
 800bed4:	4053      	eors	r3, r2
 800bed6:	b25a      	sxtb	r2, r3
 800bed8:	187b      	adds	r3, r7, r1
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e005      	b.n	800beea <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800bede:	230f      	movs	r3, #15
 800bee0:	18fa      	adds	r2, r7, r3
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	18db      	adds	r3, r3, r3
 800bee8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800beea:	210d      	movs	r1, #13
 800beec:	187b      	adds	r3, r7, r1
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	187b      	adds	r3, r7, r1
 800bef2:	3201      	adds	r2, #1
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	230d      	movs	r3, #13
 800bef8:	18fb      	adds	r3, r7, r3
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b07      	cmp	r3, #7
 800befe:	d9de      	bls.n	800bebe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800bf00:	210e      	movs	r1, #14
 800bf02:	187b      	adds	r3, r7, r1
 800bf04:	781a      	ldrb	r2, [r3, #0]
 800bf06:	187b      	adds	r3, r7, r1
 800bf08:	3201      	adds	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	230e      	movs	r3, #14
 800bf0e:	18fa      	adds	r2, r7, r3
 800bf10:	1cfb      	adds	r3, r7, #3
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d3c0      	bcc.n	800be9c <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800bf1a:	230f      	movs	r3, #15
 800bf1c:	18fb      	adds	r3, r7, r3
 800bf1e:	781b      	ldrb	r3, [r3, #0]
}
 800bf20:	0018      	movs	r0, r3
 800bf22:	46bd      	mov	sp, r7
 800bf24:	b004      	add	sp, #16
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4936      	ldr	r1, [pc, #216]	@ (800c010 <SGP_SetHT+0xe8>)
 800bf38:	1c18      	adds	r0, r3, #0
 800bf3a:	f7f4 fcc1 	bl	80008c0 <__aeabi_fadd>
 800bf3e:	1c03      	adds	r3, r0, #0
 800bf40:	4934      	ldr	r1, [pc, #208]	@ (800c014 <SGP_SetHT+0xec>)
 800bf42:	1c18      	adds	r0, r3, #0
 800bf44:	f7f4 fe46 	bl	8000bd4 <__aeabi_fdiv>
 800bf48:	1c03      	adds	r3, r0, #0
 800bf4a:	4933      	ldr	r1, [pc, #204]	@ (800c018 <SGP_SetHT+0xf0>)
 800bf4c:	1c18      	adds	r0, r3, #0
 800bf4e:	f7f5 f827 	bl	8000fa0 <__aeabi_fmul>
 800bf52:	1c03      	adds	r3, r0, #0
 800bf54:	1c18      	adds	r0, r3, #0
 800bf56:	f7f4 fb61 	bl	800061c <__aeabi_f2uiz>
 800bf5a:	0003      	movs	r3, r0
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	4b2f      	ldr	r3, [pc, #188]	@ (800c01c <SGP_SetHT+0xf4>)
 800bf60:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	492e      	ldr	r1, [pc, #184]	@ (800c020 <SGP_SetHT+0xf8>)
 800bf68:	1c18      	adds	r0, r3, #0
 800bf6a:	f7f4 fe33 	bl	8000bd4 <__aeabi_fdiv>
 800bf6e:	1c03      	adds	r3, r0, #0
 800bf70:	4929      	ldr	r1, [pc, #164]	@ (800c018 <SGP_SetHT+0xf0>)
 800bf72:	1c18      	adds	r0, r3, #0
 800bf74:	f7f5 f814 	bl	8000fa0 <__aeabi_fmul>
 800bf78:	1c03      	adds	r3, r0, #0
 800bf7a:	1c18      	adds	r0, r3, #0
 800bf7c:	f7f4 fb4e 	bl	800061c <__aeabi_f2uiz>
 800bf80:	0003      	movs	r3, r0
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	4b27      	ldr	r3, [pc, #156]	@ (800c024 <SGP_SetHT+0xfc>)
 800bf86:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf88:	4b26      	ldr	r3, [pc, #152]	@ (800c024 <SGP_SetHT+0xfc>)
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	0a1b      	lsrs	r3, r3, #8
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	4b25      	ldr	r3, [pc, #148]	@ (800c028 <SGP_SetHT+0x100>)
 800bf94:	709a      	strb	r2, [r3, #2]
 800bf96:	4b24      	ldr	r3, [pc, #144]	@ (800c028 <SGP_SetHT+0x100>)
 800bf98:	789a      	ldrb	r2, [r3, #2]
 800bf9a:	210c      	movs	r1, #12
 800bf9c:	187b      	adds	r3, r7, r1
 800bf9e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bfa0:	4b20      	ldr	r3, [pc, #128]	@ (800c024 <SGP_SetHT+0xfc>)
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	4b20      	ldr	r3, [pc, #128]	@ (800c028 <SGP_SetHT+0x100>)
 800bfa8:	70da      	strb	r2, [r3, #3]
 800bfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800c028 <SGP_SetHT+0x100>)
 800bfac:	78da      	ldrb	r2, [r3, #3]
 800bfae:	187b      	adds	r3, r7, r1
 800bfb0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bfb2:	187b      	adds	r3, r7, r1
 800bfb4:	2102      	movs	r1, #2
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	f7ff ff60 	bl	800be7c <CalculateCRC>
 800bfbc:	0003      	movs	r3, r0
 800bfbe:	001a      	movs	r2, r3
 800bfc0:	4b19      	ldr	r3, [pc, #100]	@ (800c028 <SGP_SetHT+0x100>)
 800bfc2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bfc4:	4b15      	ldr	r3, [pc, #84]	@ (800c01c <SGP_SetHT+0xf4>)
 800bfc6:	881b      	ldrh	r3, [r3, #0]
 800bfc8:	0a1b      	lsrs	r3, r3, #8
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	4b16      	ldr	r3, [pc, #88]	@ (800c028 <SGP_SetHT+0x100>)
 800bfd0:	715a      	strb	r2, [r3, #5]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	@ (800c028 <SGP_SetHT+0x100>)
 800bfd4:	795a      	ldrb	r2, [r3, #5]
 800bfd6:	2108      	movs	r1, #8
 800bfd8:	187b      	adds	r3, r7, r1
 800bfda:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bfdc:	4b0f      	ldr	r3, [pc, #60]	@ (800c01c <SGP_SetHT+0xf4>)
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	4b11      	ldr	r3, [pc, #68]	@ (800c028 <SGP_SetHT+0x100>)
 800bfe4:	719a      	strb	r2, [r3, #6]
 800bfe6:	4b10      	ldr	r3, [pc, #64]	@ (800c028 <SGP_SetHT+0x100>)
 800bfe8:	799a      	ldrb	r2, [r3, #6]
 800bfea:	187b      	adds	r3, r7, r1
 800bfec:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bfee:	187b      	adds	r3, r7, r1
 800bff0:	2102      	movs	r1, #2
 800bff2:	0018      	movs	r0, r3
 800bff4:	f7ff ff42 	bl	800be7c <CalculateCRC>
 800bff8:	0003      	movs	r3, r0
 800bffa:	001a      	movs	r2, r3
 800bffc:	4b0a      	ldr	r3, [pc, #40]	@ (800c028 <SGP_SetHT+0x100>)
 800bffe:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c000:	4b0a      	ldr	r3, [pc, #40]	@ (800c02c <SGP_SetHT+0x104>)
 800c002:	2201      	movs	r2, #1
 800c004:	701a      	strb	r2, [r3, #0]
}
 800c006:	46c0      	nop			@ (mov r8, r8)
 800c008:	46bd      	mov	sp, r7
 800c00a:	b004      	add	sp, #16
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	46c0      	nop			@ (mov r8, r8)
 800c010:	42340000 	.word	0x42340000
 800c014:	432f0000 	.word	0x432f0000
 800c018:	477fff00 	.word	0x477fff00
 800c01c:	20001156 	.word	0x20001156
 800c020:	42c80000 	.word	0x42c80000
 800c024:	20001154 	.word	0x20001154
 800c028:	200000a0 	.word	0x200000a0
 800c02c:	20001158 	.word	0x20001158

0800c030 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c034:	4a09      	ldr	r2, [pc, #36]	@ (800c05c <SGP_SoftReset+0x2c>)
 800c036:	4b0a      	ldr	r3, [pc, #40]	@ (800c060 <SGP_SoftReset+0x30>)
 800c038:	0019      	movs	r1, r3
 800c03a:	2003      	movs	r0, #3
 800c03c:	f002 fa42 	bl	800e4c4 <CreateLine>
  SGP_TurnHeaterOff();
 800c040:	f7ff fbf4 	bl	800b82c <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c044:	200a      	movs	r0, #10
 800c046:	f002 fe87 	bl	800ed58 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c04a:	4b06      	ldr	r3, [pc, #24]	@ (800c064 <SGP_SoftReset+0x34>)
 800c04c:	2202      	movs	r2, #2
 800c04e:	0019      	movs	r1, r3
 800c050:	2059      	movs	r0, #89	@ 0x59
 800c052:	f7ff fb1d 	bl	800b690 <WriteRegister>
}
 800c056:	46c0      	nop			@ (mov r8, r8)
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	08024e10 	.word	0x08024e10
 800c060:	08024cec 	.word	0x08024cec
 800c064:	200000a8 	.word	0x200000a8

0800c068 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c06c:	4b02      	ldr	r3, [pc, #8]	@ (800c078 <ResetVOCresult+0x10>)
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]
}
 800c072:	46c0      	nop			@ (mov r8, r8)
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	2000115c 	.word	0x2000115c

0800c07c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c07c:	b580      	push	{r7, lr}
 800c07e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c080:	4b37      	ldr	r3, [pc, #220]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b07      	cmp	r3, #7
 800c086:	d85f      	bhi.n	800c148 <SGP_Upkeep+0xcc>
 800c088:	009a      	lsls	r2, r3, #2
 800c08a:	4b36      	ldr	r3, [pc, #216]	@ (800c164 <SGP_Upkeep+0xe8>)
 800c08c:	18d3      	adds	r3, r2, r3
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c092:	4a35      	ldr	r2, [pc, #212]	@ (800c168 <SGP_Upkeep+0xec>)
 800c094:	4b35      	ldr	r3, [pc, #212]	@ (800c16c <SGP_Upkeep+0xf0>)
 800c096:	0019      	movs	r1, r3
 800c098:	2003      	movs	r0, #3
 800c09a:	f002 fa13 	bl	800e4c4 <CreateLine>
    break;
 800c09e:	e05a      	b.n	800c156 <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c0a0:	f7ff ffe2 	bl	800c068 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c0a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	701a      	strb	r2, [r3, #0]
    break;
 800c0aa:	e054      	b.n	800c156 <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c0ac:	f7ff fb5c 	bl	800b768 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c0b0:	f001 f966 	bl	800d380 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c0b4:	4b2a      	ldr	r3, [pc, #168]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	701a      	strb	r2, [r3, #0]
    break;
 800c0ba:	e04c      	b.n	800c156 <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c0bc:	4b2c      	ldr	r3, [pc, #176]	@ (800c170 <SGP_Upkeep+0xf4>)
 800c0be:	0018      	movs	r0, r3
 800c0c0:	f7ff fbc2 	bl	800b848 <SGP_GetMeasurementValues>
 800c0c4:	1e03      	subs	r3, r0, #0
 800c0c6:	d043      	beq.n	800c150 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c0c8:	4b25      	ldr	r3, [pc, #148]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0ce:	e03f      	b.n	800c150 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c0d0:	4b27      	ldr	r3, [pc, #156]	@ (800c170 <SGP_Upkeep+0xf4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	f7f7 fc1e 	bl	8003918 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c0dc:	4b20      	ldr	r3, [pc, #128]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c0de:	2206      	movs	r2, #6
 800c0e0:	701a      	strb	r2, [r3, #0]
    break;
 800c0e2:	e038      	b.n	800c156 <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c0e4:	4b1e      	ldr	r3, [pc, #120]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c0e6:	2207      	movs	r2, #7
 800c0e8:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c0ea:	4b22      	ldr	r3, [pc, #136]	@ (800c174 <SGP_Upkeep+0xf8>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d112      	bne.n	800c118 <SGP_Upkeep+0x9c>
 800c0f2:	4b21      	ldr	r3, [pc, #132]	@ (800c178 <SGP_Upkeep+0xfc>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	4053      	eors	r3, r2
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c100:	4b1e      	ldr	r3, [pc, #120]	@ (800c17c <SGP_Upkeep+0x100>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c108:	f7ff ff92 	bl	800c030 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c10c:	2000      	movs	r0, #0
 800c10e:	f7fc f983 	bl	8008418 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c112:	4b1a      	ldr	r3, [pc, #104]	@ (800c17c <SGP_Upkeep+0x100>)
 800c114:	2201      	movs	r2, #1
 800c116:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c118:	f002 fe14 	bl	800ed44 <HAL_GetTick>
 800c11c:	0003      	movs	r3, r0
 800c11e:	22c8      	movs	r2, #200	@ 0xc8
 800c120:	0092      	lsls	r2, r2, #2
 800c122:	189a      	adds	r2, r3, r2
 800c124:	4b16      	ldr	r3, [pc, #88]	@ (800c180 <SGP_Upkeep+0x104>)
 800c126:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c128:	f001 f942 	bl	800d3b0 <ResetMeasurementIndicator>
  break;
 800c12c:	e013      	b.n	800c156 <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c12e:	4b14      	ldr	r3, [pc, #80]	@ (800c180 <SGP_Upkeep+0x104>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	0018      	movs	r0, r3
 800c134:	f002 f970 	bl	800e418 <TimestampIsReached>
 800c138:	1e03      	subs	r3, r0, #0
 800c13a:	d00b      	beq.n	800c154 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c13c:	f7ff fafc 	bl	800b738 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c140:	4b07      	ldr	r3, [pc, #28]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c142:	2200      	movs	r2, #0
 800c144:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c146:	e005      	b.n	800c154 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c148:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	701a      	strb	r2, [r3, #0]
    break;
 800c14e:	e002      	b.n	800c156 <SGP_Upkeep+0xda>
    break;
 800c150:	46c0      	nop			@ (mov r8, r8)
 800c152:	e000      	b.n	800c156 <SGP_Upkeep+0xda>
    break;
 800c154:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c156:	4b02      	ldr	r3, [pc, #8]	@ (800c160 <SGP_Upkeep+0xe4>)
 800c158:	781b      	ldrb	r3, [r3, #0]
}
 800c15a:	0018      	movs	r0, r3
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	20001166 	.word	0x20001166
 800c164:	08025540 	.word	0x08025540
 800c168:	08024e28 	.word	0x08024e28
 800c16c:	08024cec 	.word	0x08024cec
 800c170:	2000115c 	.word	0x2000115c
 800c174:	200010a6 	.word	0x200010a6
 800c178:	20002001 	.word	0x20002001
 800c17c:	20001090 	.word	0x20001090
 800c180:	200010a8 	.word	0x200010a8

0800c184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	0002      	movs	r2, r0
 800c18c:	1dfb      	adds	r3, r7, #7
 800c18e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c190:	1dfb      	adds	r3, r7, #7
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b7f      	cmp	r3, #127	@ 0x7f
 800c196:	d809      	bhi.n	800c1ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c198:	1dfb      	adds	r3, r7, #7
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	001a      	movs	r2, r3
 800c19e:	231f      	movs	r3, #31
 800c1a0:	401a      	ands	r2, r3
 800c1a2:	4b04      	ldr	r3, [pc, #16]	@ (800c1b4 <__NVIC_EnableIRQ+0x30>)
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	4091      	lsls	r1, r2
 800c1a8:	000a      	movs	r2, r1
 800c1aa:	601a      	str	r2, [r3, #0]
  }
}
 800c1ac:	46c0      	nop			@ (mov r8, r8)
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b002      	add	sp, #8
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	e000e100 	.word	0xe000e100

0800c1b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	0002      	movs	r2, r0
 800c1c0:	1dfb      	adds	r3, r7, #7
 800c1c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c1c4:	1dfb      	adds	r3, r7, #7
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ca:	d810      	bhi.n	800c1ee <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c1cc:	1dfb      	adds	r3, r7, #7
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	001a      	movs	r2, r3
 800c1d2:	231f      	movs	r3, #31
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	4908      	ldr	r1, [pc, #32]	@ (800c1f8 <__NVIC_DisableIRQ+0x40>)
 800c1d8:	2201      	movs	r2, #1
 800c1da:	409a      	lsls	r2, r3
 800c1dc:	0013      	movs	r3, r2
 800c1de:	2280      	movs	r2, #128	@ 0x80
 800c1e0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c1e2:	f3bf 8f4f 	dsb	sy
}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1e8:	f3bf 8f6f 	isb	sy
}
 800c1ec:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c1ee:	46c0      	nop			@ (mov r8, r8)
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b002      	add	sp, #8
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	46c0      	nop			@ (mov r8, r8)
 800c1f8:	e000e100 	.word	0xe000e100

0800c1fc <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c1fc:	b5b0      	push	{r4, r5, r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af02      	add	r7, sp, #8
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	0008      	movs	r0, r1
 800c206:	0011      	movs	r1, r2
 800c208:	1cfb      	adds	r3, r7, #3
 800c20a:	1c02      	adds	r2, r0, #0
 800c20c:	701a      	strb	r2, [r3, #0]
 800c20e:	1cbb      	adds	r3, r7, #2
 800c210:	1c0a      	adds	r2, r1, #0
 800c212:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c214:	4b5b      	ldr	r3, [pc, #364]	@ (800c384 <getSoundData+0x188>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2201      	movs	r2, #1
 800c21c:	4053      	eors	r3, r2
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d107      	bne.n	800c234 <getSoundData+0x38>
 800c224:	4b58      	ldr	r3, [pc, #352]	@ (800c388 <getSoundData+0x18c>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2201      	movs	r2, #1
 800c22c:	4053      	eors	r3, r2
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <getSoundData+0x3c>
    {
        return false;
 800c234:	2300      	movs	r3, #0
 800c236:	e0a0      	b.n	800c37a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c238:	4b54      	ldr	r3, [pc, #336]	@ (800c38c <getSoundData+0x190>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d005      	beq.n	800c24e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c242:	4b53      	ldr	r3, [pc, #332]	@ (800c390 <getSoundData+0x194>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	b25b      	sxtb	r3, r3
 800c248:	0018      	movs	r0, r3
 800c24a:	f7ff ffb5 	bl	800c1b8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c24e:	f3bf 8f4f 	dsb	sy
}
 800c252:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c254:	f3bf 8f6f 	isb	sy
}
 800c258:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c25a:	1cfb      	adds	r3, r7, #3
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d04c      	beq.n	800c2fc <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c262:	4b4c      	ldr	r3, [pc, #304]	@ (800c394 <getSoundData+0x198>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d11b      	bne.n	800c2a2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
 800c27a:	e00e      	b.n	800c29a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	18d3      	adds	r3, r2, r3
 800c282:	3302      	adds	r3, #2
 800c284:	2200      	movs	r2, #0
 800c286:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	18d3      	adds	r3, r2, r3
 800c28e:	3308      	adds	r3, #8
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	3301      	adds	r3, #1
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	2b05      	cmp	r3, #5
 800c29e:	d9ed      	bls.n	800c27c <getSoundData+0x80>
 800c2a0:	e02c      	b.n	800c2fc <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	1c59      	adds	r1, r3, #1
 800c2a8:	4b3b      	ldr	r3, [pc, #236]	@ (800c398 <getSoundData+0x19c>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	4b3b      	ldr	r3, [pc, #236]	@ (800c39c <getSoundData+0x1a0>)
 800c2ae:	681c      	ldr	r4, [r3, #0]
 800c2b0:	4b38      	ldr	r3, [pc, #224]	@ (800c394 <getSoundData+0x198>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	0023      	movs	r3, r4
 800c2b8:	f000 fde8 	bl	800ce8c <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	e019      	b.n	800c2f6 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	18d3      	adds	r3, r2, r3
 800c2c8:	1c98      	adds	r0, r3, #2
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c2d2:	4b33      	ldr	r3, [pc, #204]	@ (800c3a0 <getSoundData+0x1a4>)
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c2da:	4b32      	ldr	r3, [pc, #200]	@ (800c3a4 <getSoundData+0x1a8>)
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	0092      	lsls	r2, r2, #2
 800c2e0:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800c394 <getSoundData+0x198>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	0013      	movs	r3, r2
 800c2ea:	0022      	movs	r2, r4
 800c2ec:	f000 fdce 	bl	800ce8c <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	613b      	str	r3, [r7, #16]
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2b05      	cmp	r3, #5
 800c2fa:	d9e2      	bls.n	800c2c2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c2fc:	1cbb      	adds	r3, r7, #2
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d028      	beq.n	800c356 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c304:	240e      	movs	r4, #14
 800c306:	193b      	adds	r3, r7, r4
 800c308:	2200      	movs	r2, #0
 800c30a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c30c:	250d      	movs	r5, #13
 800c30e:	197b      	adds	r3, r7, r5
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c314:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <getSoundData+0x1ac>)
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	4924      	ldr	r1, [pc, #144]	@ (800c3ac <getSoundData+0x1b0>)
 800c31a:	197b      	adds	r3, r7, r5
 800c31c:	193a      	adds	r2, r7, r4
 800c31e:	f000 fe59 	bl	800cfd4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c322:	193b      	adds	r3, r7, r4
 800c324:	881a      	ldrh	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	21ff      	movs	r1, #255	@ 0xff
 800c32a:	4011      	ands	r1, r2
 800c32c:	000c      	movs	r4, r1
 800c32e:	7b99      	ldrb	r1, [r3, #14]
 800c330:	2000      	movs	r0, #0
 800c332:	4001      	ands	r1, r0
 800c334:	1c08      	adds	r0, r1, #0
 800c336:	1c21      	adds	r1, r4, #0
 800c338:	4301      	orrs	r1, r0
 800c33a:	7399      	strb	r1, [r3, #14]
 800c33c:	0a12      	lsrs	r2, r2, #8
 800c33e:	b290      	uxth	r0, r2
 800c340:	7bda      	ldrb	r2, [r3, #15]
 800c342:	2100      	movs	r1, #0
 800c344:	400a      	ands	r2, r1
 800c346:	1c11      	adds	r1, r2, #0
 800c348:	1c02      	adds	r2, r0, #0
 800c34a:	430a      	orrs	r2, r1
 800c34c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c34e:	197b      	adds	r3, r7, r5
 800c350:	781a      	ldrb	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c356:	f000 f86f 	bl	800c438 <micSettlingComplete>
 800c35a:	0003      	movs	r3, r0
 800c35c:	001a      	movs	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c362:	4b0a      	ldr	r3, [pc, #40]	@ (800c38c <getSoundData+0x190>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d005      	beq.n	800c378 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c36c:	4b08      	ldr	r3, [pc, #32]	@ (800c390 <getSoundData+0x194>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	b25b      	sxtb	r3, r3
 800c372:	0018      	movs	r0, r3
 800c374:	f7ff ff06 	bl	800c184 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c378:	2301      	movs	r3, #1
}
 800c37a:	0018      	movs	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	b006      	add	sp, #24
 800c380:	bdb0      	pop	{r4, r5, r7, pc}
 800c382:	46c0      	nop			@ (mov r8, r8)
 800c384:	20001168 	.word	0x20001168
 800c388:	2000116b 	.word	0x2000116b
 800c38c:	2000116a 	.word	0x2000116a
 800c390:	20001bb8 	.word	0x20001bb8
 800c394:	20001bf4 	.word	0x20001bf4
 800c398:	20001bbc 	.word	0x20001bbc
 800c39c:	20001bc0 	.word	0x20001bc0
 800c3a0:	20001bc4 	.word	0x20001bc4
 800c3a4:	20001bdc 	.word	0x20001bdc
 800c3a8:	20001170 	.word	0x20001170
 800c3ac:	3b5c7333 	.word	0x3b5c7333

0800c3b0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	001a      	movs	r2, r3
 800c3be:	1cfb      	adds	r3, r7, #3
 800c3c0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c3c2:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <soundInit+0x38>)
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c3c8:	4b08      	ldr	r3, [pc, #32]	@ (800c3ec <soundInit+0x3c>)
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c3ce:	4b08      	ldr	r3, [pc, #32]	@ (800c3f0 <soundInit+0x40>)
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c3d4:	4b07      	ldr	r3, [pc, #28]	@ (800c3f4 <soundInit+0x44>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	569a      	ldrsb	r2, [r3, r2]
 800c3da:	4b06      	ldr	r3, [pc, #24]	@ (800c3f4 <soundInit+0x44>)
 800c3dc:	701a      	strb	r2, [r3, #0]

    return true;
 800c3de:	2301      	movs	r3, #1
}
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	b004      	add	sp, #16
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20001bb0 	.word	0x20001bb0
 800c3ec:	20001bac 	.word	0x20001bac
 800c3f0:	20001bb4 	.word	0x20001bb4
 800c3f4:	20001bb8 	.word	0x20001bb8

0800c3f8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c3fc:	4b02      	ldr	r3, [pc, #8]	@ (800c408 <clearMaximumAmplitude+0x10>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
}
 800c402:	46c0      	nop			@ (mov r8, r8)
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20001170 	.word	0x20001170

0800c40c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c410:	4b08      	ldr	r3, [pc, #32]	@ (800c434 <startMicSettlingPeriod+0x28>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2200      	movs	r2, #0
 800c418:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c41a:	4b06      	ldr	r3, [pc, #24]	@ (800c434 <startMicSettlingPeriod+0x28>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	0018      	movs	r0, r3
 800c420:	f00a fa54 	bl	80168cc <HAL_TIM_Base_Start>
 800c424:	1e03      	subs	r3, r0, #0
 800c426:	d001      	beq.n	800c42c <startMicSettlingPeriod+0x20>
    {
        return false;
 800c428:	2300      	movs	r3, #0
 800c42a:	e000      	b.n	800c42e <startMicSettlingPeriod+0x22>
    }
    return true;
 800c42c:	2301      	movs	r3, #1
}
 800c42e:	0018      	movs	r0, r3
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	20001bac 	.word	0x20001bac

0800c438 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c43e:	4b0e      	ldr	r3, [pc, #56]	@ (800c478 <micSettlingComplete+0x40>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	2201      	movs	r2, #1
 800c448:	401a      	ands	r2, r3
 800c44a:	1dfb      	adds	r3, r7, #7
 800c44c:	3a01      	subs	r2, #1
 800c44e:	4251      	negs	r1, r2
 800c450:	414a      	adcs	r2, r1
 800c452:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c454:	1dfb      	adds	r3, r7, #7
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d007      	beq.n	800c46c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c45c:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <micSettlingComplete+0x40>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	0018      	movs	r0, r3
 800c462:	f00a fa7d 	bl	8016960 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c466:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <micSettlingComplete+0x44>)
 800c468:	2201      	movs	r2, #1
 800c46a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c46c:	1dfb      	adds	r3, r7, #7
 800c46e:	781b      	ldrb	r3, [r3, #0]
}
 800c470:	0018      	movs	r0, r3
 800c472:	46bd      	mov	sp, r7
 800c474:	b002      	add	sp, #8
 800c476:	bd80      	pop	{r7, pc}
 800c478:	20001bac 	.word	0x20001bac
 800c47c:	20001167 	.word	0x20001167

0800c480 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	0002      	movs	r2, r0
 800c488:	1dfb      	adds	r3, r7, #7
 800c48a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c48c:	4b29      	ldr	r3, [pc, #164]	@ (800c534 <enableMicrophone+0xb4>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	1dfa      	adds	r2, r7, #7
 800c494:	7812      	ldrb	r2, [r2, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d101      	bne.n	800c49e <enableMicrophone+0x1e>
    {
        return true;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e045      	b.n	800c52a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c49e:	1dfb      	adds	r3, r7, #7
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d025      	beq.n	800c4f2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c4a6:	f7ff ffb1 	bl	800c40c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c4aa:	4b23      	ldr	r3, [pc, #140]	@ (800c538 <enableMicrophone+0xb8>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2280      	movs	r2, #128	@ 0x80
 800c4b0:	0092      	lsls	r2, r2, #2
 800c4b2:	4922      	ldr	r1, [pc, #136]	@ (800c53c <enableMicrophone+0xbc>)
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	f006 fc73 	bl	8012da0 <HAL_I2S_Receive_DMA>
 800c4ba:	1e03      	subs	r3, r0, #0
 800c4bc:	d001      	beq.n	800c4c2 <enableMicrophone+0x42>
        {
            return false;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e033      	b.n	800c52a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c4c2:	f7ff ff99 	bl	800c3f8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800c540 <enableMicrophone+0xc0>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c4cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c544 <enableMicrophone+0xc4>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	b25b      	sxtb	r3, r3
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	f7ff fe56 	bl	800c184 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <enableMicrophone+0xc8>)
 800c4da:	2201      	movs	r2, #1
 800c4dc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c4de:	4b15      	ldr	r3, [pc, #84]	@ (800c534 <enableMicrophone+0xb4>)
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4e4:	4b19      	ldr	r3, [pc, #100]	@ (800c54c <enableMicrophone+0xcc>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c4ea:	4b19      	ldr	r3, [pc, #100]	@ (800c550 <enableMicrophone+0xd0>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e01a      	b.n	800c528 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c4f2:	4b14      	ldr	r3, [pc, #80]	@ (800c544 <enableMicrophone+0xc4>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	b25b      	sxtb	r3, r3
 800c4f8:	0018      	movs	r0, r3
 800c4fa:	f7ff fe5d 	bl	800c1b8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c4fe:	4b12      	ldr	r3, [pc, #72]	@ (800c548 <enableMicrophone+0xc8>)
 800c500:	2200      	movs	r2, #0
 800c502:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c504:	4b11      	ldr	r3, [pc, #68]	@ (800c54c <enableMicrophone+0xcc>)
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c50a:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <enableMicrophone+0xd0>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c510:	4b09      	ldr	r3, [pc, #36]	@ (800c538 <enableMicrophone+0xb8>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	0018      	movs	r0, r3
 800c516:	f006 fd05 	bl	8012f24 <HAL_I2S_DMAStop>
 800c51a:	1e03      	subs	r3, r0, #0
 800c51c:	d001      	beq.n	800c522 <enableMicrophone+0xa2>
        {
            return false;
 800c51e:	2300      	movs	r3, #0
 800c520:	e003      	b.n	800c52a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c522:	4b04      	ldr	r3, [pc, #16]	@ (800c534 <enableMicrophone+0xb4>)
 800c524:	2200      	movs	r2, #0
 800c526:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c528:	2301      	movs	r3, #1
}
 800c52a:	0018      	movs	r0, r3
 800c52c:	46bd      	mov	sp, r7
 800c52e:	b002      	add	sp, #8
 800c530:	bd80      	pop	{r7, pc}
 800c532:	46c0      	nop			@ (mov r8, r8)
 800c534:	20001168 	.word	0x20001168
 800c538:	20001bb0 	.word	0x20001bb0
 800c53c:	200011ac 	.word	0x200011ac
 800c540:	2000116c 	.word	0x2000116c
 800c544:	20001bb8 	.word	0x20001bb8
 800c548:	2000116a 	.word	0x2000116a
 800c54c:	20001169 	.word	0x20001169
 800c550:	2000116b 	.word	0x2000116b

0800c554 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c558:	4b0c      	ldr	r3, [pc, #48]	@ (800c58c <startSPLcalculation+0x38>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2201      	movs	r2, #1
 800c560:	4053      	eors	r3, r2
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <startSPLcalculation+0x18>
    {
        return false;
 800c568:	2300      	movs	r3, #0
 800c56a:	e00c      	b.n	800c586 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c56c:	4b08      	ldr	r3, [pc, #32]	@ (800c590 <startSPLcalculation+0x3c>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <startSPLcalculation+0x26>
    {
        return true;
 800c576:	2301      	movs	r3, #1
 800c578:	e005      	b.n	800c586 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c57a:	f000 fb63 	bl	800cc44 <resetSPLstate>
    SPLcalcEnabled = true;
 800c57e:	4b04      	ldr	r3, [pc, #16]	@ (800c590 <startSPLcalculation+0x3c>)
 800c580:	2201      	movs	r2, #1
 800c582:	701a      	strb	r2, [r3, #0]
    return true;
 800c584:	2301      	movs	r3, #1
}
 800c586:	0018      	movs	r0, r3
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20001168 	.word	0x20001168
 800c590:	20001169 	.word	0x20001169

0800c594 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d102      	bne.n	800c5ac <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	f000 f81a 	bl	800c5e0 <processHalfDMAbuffer>
  }
}
 800c5ac:	46c0      	nop			@ (mov r8, r8)
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	b002      	add	sp, #8
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20001bb0 	.word	0x20001bb0

0800c5b8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5c0:	4b06      	ldr	r3, [pc, #24]	@ (800c5dc <HAL_I2S_RxCpltCallback+0x24>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d104      	bne.n	800c5d4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c5ca:	2380      	movs	r3, #128	@ 0x80
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	0018      	movs	r0, r3
 800c5d0:	f000 f806 	bl	800c5e0 <processHalfDMAbuffer>
  }
}
 800c5d4:	46c0      	nop			@ (mov r8, r8)
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	b002      	add	sp, #8
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20001bb0 	.word	0x20001bb0

0800c5e0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	005a      	lsls	r2, r3, #1
 800c5ec:	4b15      	ldr	r3, [pc, #84]	@ (800c644 <processHalfDMAbuffer+0x64>)
 800c5ee:	18d3      	adds	r3, r2, r3
 800c5f0:	4a15      	ldr	r2, [pc, #84]	@ (800c648 <processHalfDMAbuffer+0x68>)
 800c5f2:	2180      	movs	r1, #128	@ 0x80
 800c5f4:	0089      	lsls	r1, r1, #2
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f000 fd35 	bl	800d066 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c5fc:	4b13      	ldr	r3, [pc, #76]	@ (800c64c <processHalfDMAbuffer+0x6c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	425a      	negs	r2, r3
 800c602:	4153      	adcs	r3, r2
 800c604:	b2da      	uxtb	r2, r3
 800c606:	4b11      	ldr	r3, [pc, #68]	@ (800c64c <processHalfDMAbuffer+0x6c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2109      	movs	r1, #9
 800c60c:	4299      	cmp	r1, r3
 800c60e:	419b      	sbcs	r3, r3
 800c610:	425b      	negs	r3, r3
 800c612:	b2db      	uxtb	r3, r3
 800c614:	480c      	ldr	r0, [pc, #48]	@ (800c648 <processHalfDMAbuffer+0x68>)
 800c616:	2180      	movs	r1, #128	@ 0x80
 800c618:	f000 fb46 	bl	800cca8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c61c:	4b0b      	ldr	r3, [pc, #44]	@ (800c64c <processHalfDMAbuffer+0x6c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b09      	cmp	r3, #9
 800c622:	d804      	bhi.n	800c62e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c624:	4b09      	ldr	r3, [pc, #36]	@ (800c64c <processHalfDMAbuffer+0x6c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	4b08      	ldr	r3, [pc, #32]	@ (800c64c <processHalfDMAbuffer+0x6c>)
 800c62c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c62e:	4b08      	ldr	r3, [pc, #32]	@ (800c650 <processHalfDMAbuffer+0x70>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c638:	f000 f826 	bl	800c688 <calculateSPLQ31>
    }
}
 800c63c:	46c0      	nop			@ (mov r8, r8)
 800c63e:	46bd      	mov	sp, r7
 800c640:	b002      	add	sp, #8
 800c642:	bd80      	pop	{r7, pc}
 800c644:	200011ac 	.word	0x200011ac
 800c648:	200019ac 	.word	0x200019ac
 800c64c:	2000116c 	.word	0x2000116c
 800c650:	20001169 	.word	0x20001169

0800c654 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c65c:	4b07      	ldr	r3, [pc, #28]	@ (800c67c <HAL_I2S_ErrorCallback+0x28>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	429a      	cmp	r2, r3
 800c664:	d106      	bne.n	800c674 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c666:	4a06      	ldr	r2, [pc, #24]	@ (800c680 <HAL_I2S_ErrorCallback+0x2c>)
 800c668:	239e      	movs	r3, #158	@ 0x9e
 800c66a:	0059      	lsls	r1, r3, #1
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <HAL_I2S_ErrorCallback+0x30>)
 800c66e:	0018      	movs	r0, r3
 800c670:	f001 ffe0 	bl	800e634 <errorHandler>
  }
}
 800c674:	46c0      	nop			@ (mov r8, r8)
 800c676:	46bd      	mov	sp, r7
 800c678:	b002      	add	sp, #8
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	20001bb0 	.word	0x20001bb0
 800c680:	08024e50 	.word	0x08024e50
 800c684:	08025630 	.word	0x08025630

0800c688 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c68a:	b0b3      	sub	sp, #204	@ 0xcc
 800c68c:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c68e:	4ae2      	ldr	r2, [pc, #904]	@ (800ca18 <calculateSPLQ31+0x390>)
 800c690:	2338      	movs	r3, #56	@ 0x38
 800c692:	2030      	movs	r0, #48	@ 0x30
 800c694:	181b      	adds	r3, r3, r0
 800c696:	19d9      	adds	r1, r3, r7
 800c698:	2334      	movs	r3, #52	@ 0x34
 800c69a:	181b      	adds	r3, r3, r0
 800c69c:	19d8      	adds	r0, r3, r7
 800c69e:	2380      	movs	r3, #128	@ 0x80
 800c6a0:	f000 fc36 	bl	800cf10 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c6a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	da00      	bge.n	800c6ac <calculateSPLQ31+0x24>
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	105b      	asrs	r3, r3, #1
 800c6ae:	001a      	movs	r2, r3
 800c6b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da00      	bge.n	800c6b8 <calculateSPLQ31+0x30>
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	105b      	asrs	r3, r3, #1
 800c6ba:	18d3      	adds	r3, r2, r3
 800c6bc:	2188      	movs	r1, #136	@ 0x88
 800c6be:	187a      	adds	r2, r7, r1
 800c6c0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c6c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	2284      	movs	r2, #132	@ 0x84
 800c6ce:	18b9      	adds	r1, r7, r2
 800c6d0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c6d2:	18bb      	adds	r3, r7, r2
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4ad1      	ldr	r2, [pc, #836]	@ (800ca1c <calculateSPLQ31+0x394>)
 800c6d8:	0019      	movs	r1, r3
 800c6da:	0010      	movs	r0, r2
 800c6dc:	f000 fc58 	bl	800cf90 <getPo2factor>
 800c6e0:	0003      	movs	r3, r0
 800c6e2:	2280      	movs	r2, #128	@ 0x80
 800c6e4:	18ba      	adds	r2, r7, r2
 800c6e6:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	2284      	movs	r2, #132	@ 0x84
 800c6ec:	2130      	movs	r1, #48	@ 0x30
 800c6ee:	1852      	adds	r2, r2, r1
 800c6f0:	19d2      	adds	r2, r2, r7
 800c6f2:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2280      	movs	r2, #128	@ 0x80
 800c6f8:	1852      	adds	r2, r2, r1
 800c6fa:	19d2      	adds	r2, r2, r7
 800c6fc:	6013      	str	r3, [r2, #0]
 800c6fe:	e032      	b.n	800c766 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c700:	4ac5      	ldr	r2, [pc, #788]	@ (800ca18 <calculateSPLQ31+0x390>)
 800c702:	2680      	movs	r6, #128	@ 0x80
 800c704:	2330      	movs	r3, #48	@ 0x30
 800c706:	18f1      	adds	r1, r6, r3
 800c708:	19cb      	adds	r3, r1, r7
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	589a      	ldr	r2, [r3, r2]
 800c710:	2188      	movs	r1, #136	@ 0x88
 800c712:	1879      	adds	r1, r7, r1
 800c714:	680b      	ldr	r3, [r1, #0]
 800c716:	1ad2      	subs	r2, r2, r3
 800c718:	2180      	movs	r1, #128	@ 0x80
 800c71a:	1879      	adds	r1, r7, r1
 800c71c:	680b      	ldr	r3, [r1, #0]
 800c71e:	409a      	lsls	r2, r3
 800c720:	0011      	movs	r1, r2
 800c722:	4abf      	ldr	r2, [pc, #764]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c724:	2084      	movs	r0, #132	@ 0x84
 800c726:	2330      	movs	r3, #48	@ 0x30
 800c728:	18c3      	adds	r3, r0, r3
 800c72a:	19db      	adds	r3, r3, r7
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c732:	2230      	movs	r2, #48	@ 0x30
 800c734:	1883      	adds	r3, r0, r2
 800c736:	19db      	adds	r3, r3, r7
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	49b8      	ldr	r1, [pc, #736]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c73e:	009a      	lsls	r2, r3, #2
 800c740:	2300      	movs	r3, #0
 800c742:	5053      	str	r3, [r2, r1]
        count += 2;
 800c744:	2230      	movs	r2, #48	@ 0x30
 800c746:	1883      	adds	r3, r0, r2
 800c748:	19db      	adds	r3, r3, r7
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3302      	adds	r3, #2
 800c74e:	0011      	movs	r1, r2
 800c750:	1882      	adds	r2, r0, r2
 800c752:	19d2      	adds	r2, r2, r7
 800c754:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c756:	000a      	movs	r2, r1
 800c758:	18b3      	adds	r3, r6, r2
 800c75a:	19db      	adds	r3, r3, r7
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	18b2      	adds	r2, r6, r2
 800c762:	19d2      	adds	r2, r2, r7
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	2380      	movs	r3, #128	@ 0x80
 800c768:	2630      	movs	r6, #48	@ 0x30
 800c76a:	199b      	adds	r3, r3, r6
 800c76c:	19db      	adds	r3, r3, r7
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b7f      	cmp	r3, #127	@ 0x7f
 800c772:	d9c5      	bls.n	800c700 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c774:	4bab      	ldr	r3, [pc, #684]	@ (800ca24 <calculateSPLQ31+0x39c>)
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	49a9      	ldr	r1, [pc, #676]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c77a:	2301      	movs	r3, #1
 800c77c:	2200      	movs	r2, #0
 800c77e:	f011 f96b 	bl	801da58 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c782:	4aa9      	ldr	r2, [pc, #676]	@ (800ca28 <calculateSPLQ31+0x3a0>)
 800c784:	2338      	movs	r3, #56	@ 0x38
 800c786:	199b      	adds	r3, r3, r6
 800c788:	19d9      	adds	r1, r3, r7
 800c78a:	2334      	movs	r3, #52	@ 0x34
 800c78c:	199b      	adds	r3, r3, r6
 800c78e:	19d8      	adds	r0, r3, r7
 800c790:	237e      	movs	r3, #126	@ 0x7e
 800c792:	f000 fbbd 	bl	800cf10 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c796:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c798:	2380      	movs	r3, #128	@ 0x80
 800c79a:	061b      	lsls	r3, r3, #24
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d101      	bne.n	800c7a4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c7a0:	4b9e      	ldr	r3, [pc, #632]	@ (800ca1c <calculateSPLQ31+0x394>)
 800c7a2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c7a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c7a6:	2380      	movs	r3, #128	@ 0x80
 800c7a8:	061b      	lsls	r3, r3, #24
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d101      	bne.n	800c7b2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c7ae:	4b9b      	ldr	r3, [pc, #620]	@ (800ca1c <calculateSPLQ31+0x394>)
 800c7b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c7b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7b4:	17da      	asrs	r2, r3, #31
 800c7b6:	189b      	adds	r3, r3, r2
 800c7b8:	4053      	eors	r3, r2
 800c7ba:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c7bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7be:	17da      	asrs	r2, r3, #31
 800c7c0:	189b      	adds	r3, r3, r2
 800c7c2:	4053      	eors	r3, r2
 800c7c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c7c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c7c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	dd01      	ble.n	800c7d2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c7ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c7d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c7d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c7da:	4a90      	ldr	r2, [pc, #576]	@ (800ca1c <calculateSPLQ31+0x394>)
 800c7dc:	0019      	movs	r1, r3
 800c7de:	0010      	movs	r0, r2
 800c7e0:	f000 fbd6 	bl	800cf90 <getPo2factor>
 800c7e4:	0003      	movs	r3, r0
 800c7e6:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	22ac      	movs	r2, #172	@ 0xac
 800c7ec:	18ba      	adds	r2, r7, r2
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	e012      	b.n	800c818 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c7f2:	4a8b      	ldr	r2, [pc, #556]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c7f4:	20ac      	movs	r0, #172	@ 0xac
 800c7f6:	183b      	adds	r3, r7, r0
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	589a      	ldr	r2, [r3, r2]
 800c7fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c800:	409a      	lsls	r2, r3
 800c802:	0011      	movs	r1, r2
 800c804:	4a86      	ldr	r2, [pc, #536]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c806:	183b      	adds	r3, r7, r0
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c80e:	183b      	adds	r3, r7, r0
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	183a      	adds	r2, r7, r0
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	23ac      	movs	r3, #172	@ 0xac
 800c81a:	18fb      	adds	r3, r7, r3
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c820:	d9e7      	bls.n	800c7f2 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c822:	4b7d      	ldr	r3, [pc, #500]	@ (800ca18 <calculateSPLQ31+0x390>)
 800c824:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c826:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c828:	4b7d      	ldr	r3, [pc, #500]	@ (800ca20 <calculateSPLQ31+0x398>)
 800c82a:	2240      	movs	r2, #64	@ 0x40
 800c82c:	0018      	movs	r0, r3
 800c82e:	f011 febd 	bl	801e5ac <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c832:	2330      	movs	r3, #48	@ 0x30
 800c834:	18fb      	adds	r3, r7, r3
 800c836:	0018      	movs	r0, r3
 800c838:	2330      	movs	r3, #48	@ 0x30
 800c83a:	001a      	movs	r2, r3
 800c83c:	2100      	movs	r1, #0
 800c83e:	f013 fcd9 	bl	80201f4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c842:	2200      	movs	r2, #0
 800c844:	2300      	movs	r3, #0
 800c846:	21a0      	movs	r1, #160	@ 0xa0
 800c848:	1879      	adds	r1, r7, r1
 800c84a:	600a      	str	r2, [r1, #0]
 800c84c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c84e:	2301      	movs	r3, #1
 800c850:	229c      	movs	r2, #156	@ 0x9c
 800c852:	18ba      	adds	r2, r7, r2
 800c854:	6013      	str	r3, [r2, #0]
 800c856:	e05b      	b.n	800c910 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c858:	269c      	movs	r6, #156	@ 0x9c
 800c85a:	19bb      	adds	r3, r7, r6
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	009a      	lsls	r2, r3, #2
 800c860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c862:	189b      	adds	r3, r3, r2
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	613b      	str	r3, [r7, #16]
 800c868:	17db      	asrs	r3, r3, #31
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	4b6f      	ldr	r3, [pc, #444]	@ (800ca2c <calculateSPLQ31+0x3a4>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	19bb      	adds	r3, r7, r6
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	18d3      	adds	r3, r2, r3
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	60bb      	str	r3, [r7, #8]
 800c87c:	2300      	movs	r3, #0
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6938      	ldr	r0, [r7, #16]
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	f7f3 fe9a 	bl	80005c0 <__aeabi_lmul>
 800c88c:	0002      	movs	r2, r0
 800c88e:	000b      	movs	r3, r1
 800c890:	0010      	movs	r0, r2
 800c892:	0019      	movs	r1, r3
 800c894:	23a0      	movs	r3, #160	@ 0xa0
 800c896:	18fa      	adds	r2, r7, r3
 800c898:	6853      	ldr	r3, [r2, #4]
 800c89a:	6812      	ldr	r2, [r2, #0]
 800c89c:	1812      	adds	r2, r2, r0
 800c89e:	414b      	adcs	r3, r1
 800c8a0:	21a0      	movs	r1, #160	@ 0xa0
 800c8a2:	1879      	adds	r1, r7, r1
 800c8a4:	600a      	str	r2, [r1, #0]
 800c8a6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c8a8:	4b61      	ldr	r3, [pc, #388]	@ (800ca30 <calculateSPLQ31+0x3a8>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	19bb      	adds	r3, r7, r6
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	18d3      	adds	r3, r2, r3
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b06      	cmp	r3, #6
 800c8b6:	d025      	beq.n	800c904 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c8b8:	4b5d      	ldr	r3, [pc, #372]	@ (800ca30 <calculateSPLQ31+0x3a8>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	19bb      	adds	r3, r7, r6
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	18d3      	adds	r3, r2, r3
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	2230      	movs	r2, #48	@ 0x30
 800c8c6:	18ba      	adds	r2, r7, r2
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	18d3      	adds	r3, r2, r3
 800c8cc:	6818      	ldr	r0, [r3, #0]
 800c8ce:	6859      	ldr	r1, [r3, #4]
 800c8d0:	19bb      	adds	r3, r7, r6
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	009a      	lsls	r2, r3, #2
 800c8d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8d8:	189b      	adds	r3, r3, r2
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	603b      	str	r3, [r7, #0]
 800c8de:	17db      	asrs	r3, r3, #31
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	4b53      	ldr	r3, [pc, #332]	@ (800ca30 <calculateSPLQ31+0x3a8>)
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	19be      	adds	r6, r7, r6
 800c8e8:	6833      	ldr	r3, [r6, #0]
 800c8ea:	18d3      	adds	r3, r2, r3
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	001e      	movs	r6, r3
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	1880      	adds	r0, r0, r2
 800c8f6:	4159      	adcs	r1, r3
 800c8f8:	2330      	movs	r3, #48	@ 0x30
 800c8fa:	18fa      	adds	r2, r7, r3
 800c8fc:	00f3      	lsls	r3, r6, #3
 800c8fe:	18d3      	adds	r3, r2, r3
 800c900:	6018      	str	r0, [r3, #0]
 800c902:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c904:	229c      	movs	r2, #156	@ 0x9c
 800c906:	18bb      	adds	r3, r7, r2
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	18ba      	adds	r2, r7, r2
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	239c      	movs	r3, #156	@ 0x9c
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b3f      	cmp	r3, #63	@ 0x3f
 800c918:	d99e      	bls.n	800c858 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c91a:	2380      	movs	r3, #128	@ 0x80
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	001a      	movs	r2, r3
 800c924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	18d3      	adds	r3, r2, r3
 800c92a:	3b22      	subs	r3, #34	@ 0x22
 800c92c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c92e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c930:	17da      	asrs	r2, r3, #31
 800c932:	189b      	adds	r3, r3, r2
 800c934:	4053      	eors	r3, r2
 800c936:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	da62      	bge.n	800ca04 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c93e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c940:	3b20      	subs	r3, #32
 800c942:	2b00      	cmp	r3, #0
 800c944:	db05      	blt.n	800c952 <calculateSPLQ31+0x2ca>
 800c946:	22a0      	movs	r2, #160	@ 0xa0
 800c948:	18ba      	adds	r2, r7, r2
 800c94a:	6812      	ldr	r2, [r2, #0]
 800c94c:	409a      	lsls	r2, r3
 800c94e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c950:	e010      	b.n	800c974 <calculateSPLQ31+0x2ec>
 800c952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c954:	2220      	movs	r2, #32
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	22a0      	movs	r2, #160	@ 0xa0
 800c95a:	18ba      	adds	r2, r7, r2
 800c95c:	6812      	ldr	r2, [r2, #0]
 800c95e:	40da      	lsrs	r2, r3
 800c960:	0013      	movs	r3, r2
 800c962:	22a4      	movs	r2, #164	@ 0xa4
 800c964:	18ba      	adds	r2, r7, r2
 800c966:	6811      	ldr	r1, [r2, #0]
 800c968:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c96a:	4091      	lsls	r1, r2
 800c96c:	6279      	str	r1, [r7, #36]	@ 0x24
 800c96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c970:	431a      	orrs	r2, r3
 800c972:	627a      	str	r2, [r7, #36]	@ 0x24
 800c974:	21a0      	movs	r1, #160	@ 0xa0
 800c976:	187b      	adds	r3, r7, r1
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c97c:	409a      	lsls	r2, r3
 800c97e:	623a      	str	r2, [r7, #32]
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c984:	187a      	adds	r2, r7, r1
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c98a:	2300      	movs	r3, #0
 800c98c:	2298      	movs	r2, #152	@ 0x98
 800c98e:	18ba      	adds	r2, r7, r2
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	e031      	b.n	800c9f8 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c994:	2330      	movs	r3, #48	@ 0x30
 800c996:	18fa      	adds	r2, r7, r3
 800c998:	2398      	movs	r3, #152	@ 0x98
 800c99a:	18fb      	adds	r3, r7, r3
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	18d3      	adds	r3, r2, r3
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9a8:	3920      	subs	r1, #32
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	db03      	blt.n	800c9b6 <calculateSPLQ31+0x32e>
 800c9ae:	0010      	movs	r0, r2
 800c9b0:	4088      	lsls	r0, r1
 800c9b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9b4:	e00c      	b.n	800c9d0 <calculateSPLQ31+0x348>
 800c9b6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9b8:	2020      	movs	r0, #32
 800c9ba:	1a41      	subs	r1, r0, r1
 800c9bc:	0010      	movs	r0, r2
 800c9be:	40c8      	lsrs	r0, r1
 800c9c0:	0001      	movs	r1, r0
 800c9c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c9c4:	001c      	movs	r4, r3
 800c9c6:	4084      	lsls	r4, r0
 800c9c8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c9ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9cc:	4308      	orrs	r0, r1
 800c9ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c9d2:	0013      	movs	r3, r2
 800c9d4:	408b      	lsls	r3, r1
 800c9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9d8:	2330      	movs	r3, #48	@ 0x30
 800c9da:	18fa      	adds	r2, r7, r3
 800c9dc:	2098      	movs	r0, #152	@ 0x98
 800c9de:	183b      	adds	r3, r7, r0
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	18d3      	adds	r3, r2, r3
 800c9e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9ea:	6019      	str	r1, [r3, #0]
 800c9ec:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9ee:	183b      	adds	r3, r7, r0
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	183a      	adds	r2, r7, r0
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	2398      	movs	r3, #152	@ 0x98
 800c9fa:	18fb      	adds	r3, r7, r3
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b05      	cmp	r3, #5
 800ca00:	d9c8      	bls.n	800c994 <calculateSPLQ31+0x30c>
 800ca02:	e06b      	b.n	800cadc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800ca04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca06:	3b20      	subs	r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db13      	blt.n	800ca34 <calculateSPLQ31+0x3ac>
 800ca0c:	22a4      	movs	r2, #164	@ 0xa4
 800ca0e:	18ba      	adds	r2, r7, r2
 800ca10:	6812      	ldr	r2, [r2, #0]
 800ca12:	40da      	lsrs	r2, r3
 800ca14:	61ba      	str	r2, [r7, #24]
 800ca16:	e01e      	b.n	800ca56 <calculateSPLQ31+0x3ce>
 800ca18:	200019ac 	.word	0x200019ac
 800ca1c:	7fffffff 	.word	0x7fffffff
 800ca20:	20001bf8 	.word	0x20001bf8
 800ca24:	200000bc 	.word	0x200000bc
 800ca28:	20001c00 	.word	0x20001c00
 800ca2c:	200000c0 	.word	0x200000c0
 800ca30:	200000cc 	.word	0x200000cc
 800ca34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca36:	2220      	movs	r2, #32
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	22a4      	movs	r2, #164	@ 0xa4
 800ca3c:	18ba      	adds	r2, r7, r2
 800ca3e:	6812      	ldr	r2, [r2, #0]
 800ca40:	409a      	lsls	r2, r3
 800ca42:	0013      	movs	r3, r2
 800ca44:	22a0      	movs	r2, #160	@ 0xa0
 800ca46:	18ba      	adds	r2, r7, r2
 800ca48:	6811      	ldr	r1, [r2, #0]
 800ca4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca4c:	40d1      	lsrs	r1, r2
 800ca4e:	61b9      	str	r1, [r7, #24]
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	431a      	orrs	r2, r3
 800ca54:	61ba      	str	r2, [r7, #24]
 800ca56:	23a4      	movs	r3, #164	@ 0xa4
 800ca58:	18fb      	adds	r3, r7, r3
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca5e:	40da      	lsrs	r2, r3
 800ca60:	61fa      	str	r2, [r7, #28]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	21a0      	movs	r1, #160	@ 0xa0
 800ca68:	1879      	adds	r1, r7, r1
 800ca6a:	600a      	str	r2, [r1, #0]
 800ca6c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca6e:	2300      	movs	r3, #0
 800ca70:	2294      	movs	r2, #148	@ 0x94
 800ca72:	18ba      	adds	r2, r7, r2
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e02c      	b.n	800cad2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca78:	2330      	movs	r3, #48	@ 0x30
 800ca7a:	18fa      	adds	r2, r7, r3
 800ca7c:	2394      	movs	r3, #148	@ 0x94
 800ca7e:	18fb      	adds	r3, r7, r3
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	18d3      	adds	r3, r2, r3
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca8c:	3920      	subs	r1, #32
 800ca8e:	2900      	cmp	r1, #0
 800ca90:	db03      	blt.n	800ca9a <calculateSPLQ31+0x412>
 800ca92:	0018      	movs	r0, r3
 800ca94:	40c8      	lsrs	r0, r1
 800ca96:	0004      	movs	r4, r0
 800ca98:	e00a      	b.n	800cab0 <calculateSPLQ31+0x428>
 800ca9a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca9c:	2020      	movs	r0, #32
 800ca9e:	1a41      	subs	r1, r0, r1
 800caa0:	0018      	movs	r0, r3
 800caa2:	4088      	lsls	r0, r1
 800caa4:	0001      	movs	r1, r0
 800caa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800caa8:	0016      	movs	r6, r2
 800caaa:	40c6      	lsrs	r6, r0
 800caac:	0034      	movs	r4, r6
 800caae:	430c      	orrs	r4, r1
 800cab0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cab2:	40cb      	lsrs	r3, r1
 800cab4:	001d      	movs	r5, r3
 800cab6:	2330      	movs	r3, #48	@ 0x30
 800cab8:	18fa      	adds	r2, r7, r3
 800caba:	2194      	movs	r1, #148	@ 0x94
 800cabc:	187b      	adds	r3, r7, r1
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	18d3      	adds	r3, r2, r3
 800cac4:	601c      	str	r4, [r3, #0]
 800cac6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cac8:	187b      	adds	r3, r7, r1
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3301      	adds	r3, #1
 800cace:	187a      	adds	r2, r7, r1
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	2394      	movs	r3, #148	@ 0x94
 800cad4:	18fb      	adds	r3, r7, r3
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b05      	cmp	r3, #5
 800cada:	d9cd      	bls.n	800ca78 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800cadc:	230f      	movs	r3, #15
 800cade:	425d      	negs	r5, r3
 800cae0:	2305      	movs	r3, #5
 800cae2:	425e      	negs	r6, r3
 800cae4:	4b4a      	ldr	r3, [pc, #296]	@ (800cc10 <calculateSPLQ31+0x588>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b4a      	ldr	r3, [pc, #296]	@ (800cc14 <calculateSPLQ31+0x58c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	21a0      	movs	r1, #160	@ 0xa0
 800caf2:	1879      	adds	r1, r7, r1
 800caf4:	6808      	ldr	r0, [r1, #0]
 800caf6:	6849      	ldr	r1, [r1, #4]
 800caf8:	4c47      	ldr	r4, [pc, #284]	@ (800cc18 <calculateSPLQ31+0x590>)
 800cafa:	9403      	str	r4, [sp, #12]
 800cafc:	4c47      	ldr	r4, [pc, #284]	@ (800cc1c <calculateSPLQ31+0x594>)
 800cafe:	9402      	str	r4, [sp, #8]
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	9200      	str	r2, [sp, #0]
 800cb04:	0033      	movs	r3, r6
 800cb06:	002a      	movs	r2, r5
 800cb08:	f000 fa86 	bl	800d018 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	2290      	movs	r2, #144	@ 0x90
 800cb10:	18ba      	adds	r2, r7, r2
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	e026      	b.n	800cb64 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cb16:	2330      	movs	r3, #48	@ 0x30
 800cb18:	18fa      	adds	r2, r7, r3
 800cb1a:	2490      	movs	r4, #144	@ 0x90
 800cb1c:	193b      	adds	r3, r7, r4
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	18d3      	adds	r3, r2, r3
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	6859      	ldr	r1, [r3, #4]
 800cb28:	230f      	movs	r3, #15
 800cb2a:	425d      	negs	r5, r3
 800cb2c:	2305      	movs	r3, #5
 800cb2e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cb30:	193b      	adds	r3, r7, r4
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	009a      	lsls	r2, r3, #2
 800cb36:	4b3a      	ldr	r3, [pc, #232]	@ (800cc20 <calculateSPLQ31+0x598>)
 800cb38:	18d3      	adds	r3, r2, r3
 800cb3a:	193a      	adds	r2, r7, r4
 800cb3c:	6812      	ldr	r2, [r2, #0]
 800cb3e:	0094      	lsls	r4, r2, #2
 800cb40:	4a38      	ldr	r2, [pc, #224]	@ (800cc24 <calculateSPLQ31+0x59c>)
 800cb42:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cb44:	9203      	str	r2, [sp, #12]
 800cb46:	9302      	str	r3, [sp, #8]
 800cb48:	2300      	movs	r3, #0
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	0033      	movs	r3, r6
 800cb52:	002a      	movs	r2, r5
 800cb54:	f000 fa60 	bl	800d018 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cb58:	2490      	movs	r4, #144	@ 0x90
 800cb5a:	193b      	adds	r3, r7, r4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	193a      	adds	r2, r7, r4
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	2390      	movs	r3, #144	@ 0x90
 800cb66:	18fb      	adds	r3, r7, r3
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b05      	cmp	r3, #5
 800cb6c:	d9d3      	bls.n	800cb16 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cb6e:	4b2b      	ldr	r3, [pc, #172]	@ (800cc1c <calculateSPLQ31+0x594>)
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b2d      	ldr	r3, [pc, #180]	@ (800cc28 <calculateSPLQ31+0x5a0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	18d2      	adds	r2, r2, r3
 800cb78:	4b2b      	ldr	r3, [pc, #172]	@ (800cc28 <calculateSPLQ31+0x5a0>)
 800cb7a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb7c:	4b26      	ldr	r3, [pc, #152]	@ (800cc18 <calculateSPLQ31+0x590>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	4b2a      	ldr	r3, [pc, #168]	@ (800cc2c <calculateSPLQ31+0x5a4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	18d2      	adds	r2, r2, r3
 800cb86:	4b29      	ldr	r3, [pc, #164]	@ (800cc2c <calculateSPLQ31+0x5a4>)
 800cb88:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	228c      	movs	r2, #140	@ 0x8c
 800cb8e:	18ba      	adds	r2, r7, r2
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	e025      	b.n	800cbe0 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb94:	4b22      	ldr	r3, [pc, #136]	@ (800cc20 <calculateSPLQ31+0x598>)
 800cb96:	208c      	movs	r0, #140	@ 0x8c
 800cb98:	183a      	adds	r2, r7, r0
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	0092      	lsls	r2, r2, #2
 800cb9e:	58d2      	ldr	r2, [r2, r3]
 800cba0:	4b23      	ldr	r3, [pc, #140]	@ (800cc30 <calculateSPLQ31+0x5a8>)
 800cba2:	1839      	adds	r1, r7, r0
 800cba4:	6809      	ldr	r1, [r1, #0]
 800cba6:	0089      	lsls	r1, r1, #2
 800cba8:	58cb      	ldr	r3, [r1, r3]
 800cbaa:	18d1      	adds	r1, r2, r3
 800cbac:	4b20      	ldr	r3, [pc, #128]	@ (800cc30 <calculateSPLQ31+0x5a8>)
 800cbae:	183a      	adds	r2, r7, r0
 800cbb0:	6812      	ldr	r2, [r2, #0]
 800cbb2:	0092      	lsls	r2, r2, #2
 800cbb4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cbb6:	4b1b      	ldr	r3, [pc, #108]	@ (800cc24 <calculateSPLQ31+0x59c>)
 800cbb8:	183a      	adds	r2, r7, r0
 800cbba:	6812      	ldr	r2, [r2, #0]
 800cbbc:	0092      	lsls	r2, r2, #2
 800cbbe:	58d2      	ldr	r2, [r2, r3]
 800cbc0:	4b1c      	ldr	r3, [pc, #112]	@ (800cc34 <calculateSPLQ31+0x5ac>)
 800cbc2:	1839      	adds	r1, r7, r0
 800cbc4:	6809      	ldr	r1, [r1, #0]
 800cbc6:	0089      	lsls	r1, r1, #2
 800cbc8:	58cb      	ldr	r3, [r1, r3]
 800cbca:	18d1      	adds	r1, r2, r3
 800cbcc:	4b19      	ldr	r3, [pc, #100]	@ (800cc34 <calculateSPLQ31+0x5ac>)
 800cbce:	183a      	adds	r2, r7, r0
 800cbd0:	6812      	ldr	r2, [r2, #0]
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbd6:	183b      	adds	r3, r7, r0
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	183a      	adds	r2, r7, r0
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	238c      	movs	r3, #140	@ 0x8c
 800cbe2:	18fb      	adds	r3, r7, r3
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b05      	cmp	r3, #5
 800cbe8:	d9d4      	bls.n	800cb94 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cbea:	4b13      	ldr	r3, [pc, #76]	@ (800cc38 <calculateSPLQ31+0x5b0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	4b11      	ldr	r3, [pc, #68]	@ (800cc38 <calculateSPLQ31+0x5b0>)
 800cbf2:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cbf4:	4b10      	ldr	r3, [pc, #64]	@ (800cc38 <calculateSPLQ31+0x5b0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b0f      	cmp	r3, #15
 800cbfa:	d905      	bls.n	800cc08 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cbfc:	4b0f      	ldr	r3, [pc, #60]	@ (800cc3c <calculateSPLQ31+0x5b4>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cc02:	4b0f      	ldr	r3, [pc, #60]	@ (800cc40 <calculateSPLQ31+0x5b8>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
    }
}
 800cc08:	46c0      	nop			@ (mov r8, r8)
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	b02f      	add	sp, #188	@ 0xbc
 800cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc10:	200000c4 	.word	0x200000c4
 800cc14:	200000c8 	.word	0x200000c8
 800cc18:	20001178 	.word	0x20001178
 800cc1c:	20001174 	.word	0x20001174
 800cc20:	2000117c 	.word	0x2000117c
 800cc24:	20001194 	.word	0x20001194
 800cc28:	20001bbc 	.word	0x20001bbc
 800cc2c:	20001bc0 	.word	0x20001bc0
 800cc30:	20001bc4 	.word	0x20001bc4
 800cc34:	20001bdc 	.word	0x20001bdc
 800cc38:	20001bf4 	.word	0x20001bf4
 800cc3c:	2000116b 	.word	0x2000116b
 800cc40:	20001169 	.word	0x20001169

0800cc44 <resetSPLstate>:

static void resetSPLstate(void)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cc4a:	4b11      	ldr	r3, [pc, #68]	@ (800cc90 <resetSPLstate+0x4c>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cc50:	4b10      	ldr	r3, [pc, #64]	@ (800cc94 <resetSPLstate+0x50>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cc56:	4b10      	ldr	r3, [pc, #64]	@ (800cc98 <resetSPLstate+0x54>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	607b      	str	r3, [r7, #4]
 800cc60:	e00c      	b.n	800cc7c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cc62:	4b0e      	ldr	r3, [pc, #56]	@ (800cc9c <resetSPLstate+0x58>)
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	0092      	lsls	r2, r2, #2
 800cc68:	2100      	movs	r1, #0
 800cc6a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cc6c:	4b0c      	ldr	r3, [pc, #48]	@ (800cca0 <resetSPLstate+0x5c>)
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	0092      	lsls	r2, r2, #2
 800cc72:	2100      	movs	r1, #0
 800cc74:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b05      	cmp	r3, #5
 800cc80:	d9ef      	bls.n	800cc62 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc82:	4b08      	ldr	r3, [pc, #32]	@ (800cca4 <resetSPLstate+0x60>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	701a      	strb	r2, [r3, #0]
}
 800cc88:	46c0      	nop			@ (mov r8, r8)
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	b002      	add	sp, #8
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	20001bbc 	.word	0x20001bbc
 800cc94:	20001bc0 	.word	0x20001bc0
 800cc98:	20001bf4 	.word	0x20001bf4
 800cc9c:	20001bc4 	.word	0x20001bc4
 800cca0:	20001bdc 	.word	0x20001bdc
 800cca4:	2000116b 	.word	0x2000116b

0800cca8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cca8:	b5b0      	push	{r4, r5, r7, lr}
 800ccaa:	b090      	sub	sp, #64	@ 0x40
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	0019      	movs	r1, r3
 800ccb4:	1dfb      	adds	r3, r7, #7
 800ccb6:	701a      	strb	r2, [r3, #0]
 800ccb8:	1dbb      	adds	r3, r7, #6
 800ccba:	1c0a      	adds	r2, r1, #0
 800ccbc:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ccbe:	1dfb      	adds	r3, r7, #7
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d005      	beq.n	800ccd2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800ccc6:	4b3b      	ldr	r3, [pc, #236]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cccc:	4b3a      	ldr	r3, [pc, #232]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ccda:	2305      	movs	r3, #5
 800ccdc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800ccde:	2300      	movs	r3, #0
 800cce0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cce2:	e040      	b.n	800cd66 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	18d3      	adds	r3, r2, r3
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	409a      	lsls	r2, r3
 800ccf2:	0013      	movs	r3, r2
 800ccf4:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ccf6:	4b30      	ldr	r3, [pc, #192]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	425a      	negs	r2, r3
 800ccfc:	4b2e      	ldr	r3, [pc, #184]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccfe:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cd00:	2418      	movs	r4, #24
 800cd02:	193a      	adds	r2, r7, r4
 800cd04:	492c      	ldr	r1, [pc, #176]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cd06:	231c      	movs	r3, #28
 800cd08:	18f8      	adds	r0, r7, r3
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	f011 fca6 	bl	801e65c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cd10:	2514      	movs	r5, #20
 800cd12:	197a      	adds	r2, r7, r5
 800cd14:	1939      	adds	r1, r7, r4
 800cd16:	4829      	ldr	r0, [pc, #164]	@ (800cdbc <getFilteredMaxAmplitudeQ31+0x114>)
 800cd18:	2301      	movs	r3, #1
 800cd1a:	f011 fc6d 	bl	801e5f8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cd1e:	2410      	movs	r4, #16
 800cd20:	193a      	adds	r2, r7, r4
 800cd22:	4924      	ldr	r1, [pc, #144]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd24:	4826      	ldr	r0, [pc, #152]	@ (800cdc0 <getFilteredMaxAmplitudeQ31+0x118>)
 800cd26:	2301      	movs	r3, #1
 800cd28:	f011 fc66 	bl	801e5f8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cd2c:	4a21      	ldr	r2, [pc, #132]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd2e:	1939      	adds	r1, r7, r4
 800cd30:	1978      	adds	r0, r7, r5
 800cd32:	2301      	movs	r3, #1
 800cd34:	f011 fc92 	bl	801e65c <arm_add_q31>

        lastData = fx;
 800cd38:	69fa      	ldr	r2, [r7, #28]
 800cd3a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdb8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cd3c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800cd3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd44:	429a      	cmp	r2, r3
 800cd46:	da03      	bge.n	800cd50 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cd48:	4b1a      	ldr	r3, [pc, #104]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd4e:	e007      	b.n	800cd60 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cd50:	4b18      	ldr	r3, [pc, #96]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd56:	429a      	cmp	r2, r3
 800cd58:	dd02      	ble.n	800cd60 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cd5a:	4b16      	ldr	r3, [pc, #88]	@ (800cdb4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd62:	3301      	adds	r3, #1
 800cd64:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d3ba      	bcc.n	800cce4 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	17da      	asrs	r2, r3, #31
 800cd72:	189b      	adds	r3, r3, r2
 800cd74:	4053      	eors	r3, r2
 800cd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d200      	bcs.n	800cd86 <getFilteredMaxAmplitudeQ31+0xde>
 800cd84:	0013      	movs	r3, r2
 800cd86:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8c:	40da      	lsrs	r2, r3
 800cd8e:	0013      	movs	r3, r2
 800cd90:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd92:	1dbb      	adds	r3, r7, #6
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d007      	beq.n	800cdaa <getFilteredMaxAmplitudeQ31+0x102>
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	6a3a      	ldr	r2, [r7, #32]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d902      	bls.n	800cdaa <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cda4:	4b07      	ldr	r3, [pc, #28]	@ (800cdc4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cda6:	6a3a      	ldr	r2, [r7, #32]
 800cda8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
}
 800cdac:	0018      	movs	r0, r3
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	b010      	add	sp, #64	@ 0x40
 800cdb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cdb4:	20001ff8 	.word	0x20001ff8
 800cdb8:	20001ffc 	.word	0x20001ffc
 800cdbc:	08025628 	.word	0x08025628
 800cdc0:	0802562c 	.word	0x0802562c
 800cdc4:	20001170 	.word	0x20001170

0800cdc8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cdd4:	4913      	ldr	r1, [pc, #76]	@ (800ce24 <floatToIntAndFrac2dp+0x5c>)
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7f4 f8e2 	bl	8000fa0 <__aeabi_fmul>
 800cddc:	1c03      	adds	r3, r0, #0
 800cdde:	1c18      	adds	r0, r3, #0
 800cde0:	f016 f870 	bl	8022ec4 <roundf>
 800cde4:	1c03      	adds	r3, r0, #0
 800cde6:	1c18      	adds	r0, r3, #0
 800cde8:	f7f3 fc18 	bl	800061c <__aeabi_f2uiz>
 800cdec:	0003      	movs	r3, r0
 800cdee:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2164      	movs	r1, #100	@ 0x64
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	f7f3 f9d5 	bl	80001a4 <__udivsi3>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	001a      	movs	r2, r3
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2164      	movs	r1, #100	@ 0x64
 800ce0e:	434b      	muls	r3, r1
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	701a      	strb	r2, [r3, #0]
}
 800ce1a:	46c0      	nop			@ (mov r8, r8)
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	b006      	add	sp, #24
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	42c80000 	.word	0x42c80000

0800ce28 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ce34:	4914      	ldr	r1, [pc, #80]	@ (800ce88 <floatToIntAndFrac1dp+0x60>)
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f7f4 f8b2 	bl	8000fa0 <__aeabi_fmul>
 800ce3c:	1c03      	adds	r3, r0, #0
 800ce3e:	1c18      	adds	r0, r3, #0
 800ce40:	f016 f840 	bl	8022ec4 <roundf>
 800ce44:	1c03      	adds	r3, r0, #0
 800ce46:	1c18      	adds	r0, r3, #0
 800ce48:	f7f3 fbe8 	bl	800061c <__aeabi_f2uiz>
 800ce4c:	0003      	movs	r3, r0
 800ce4e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	210a      	movs	r1, #10
 800ce54:	0018      	movs	r0, r3
 800ce56:	f7f3 f9a5 	bl	80001a4 <__udivsi3>
 800ce5a:	0003      	movs	r3, r0
 800ce5c:	001a      	movs	r2, r3
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	1c19      	adds	r1, r3, #0
 800ce6e:	0089      	lsls	r1, r1, #2
 800ce70:	18cb      	adds	r3, r1, r3
 800ce72:	18db      	adds	r3, r3, r3
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	701a      	strb	r2, [r3, #0]
}
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	46bd      	mov	sp, r7
 800ce82:	b006      	add	sp, #24
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	46c0      	nop			@ (mov r8, r8)
 800ce88:	41200000 	.word	0x41200000

0800ce8c <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce8c:	b590      	push	{r4, r7, lr}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7f4 fb98 	bl	80015d0 <__aeabi_i2f>
 800cea0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800cea2:	6838      	ldr	r0, [r7, #0]
 800cea4:	f7f4 fb94 	bl	80015d0 <__aeabi_i2f>
 800cea8:	1c03      	adds	r3, r0, #0
 800ceaa:	4918      	ldr	r1, [pc, #96]	@ (800cf0c <sumToIntAverage+0x80>)
 800ceac:	1c18      	adds	r0, r3, #0
 800ceae:	f7f3 fe91 	bl	8000bd4 <__aeabi_fdiv>
 800ceb2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ceb4:	1c19      	adds	r1, r3, #0
 800ceb6:	1c20      	adds	r0, r4, #0
 800ceb8:	f7f3 fd02 	bl	80008c0 <__aeabi_fadd>
 800cebc:	1c03      	adds	r3, r0, #0
 800cebe:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800cec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cec2:	f7f4 fbd1 	bl	8001668 <__aeabi_ui2f>
 800cec6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800cec8:	1c19      	adds	r1, r3, #0
 800ceca:	1c20      	adds	r0, r4, #0
 800cecc:	f7f3 fe82 	bl	8000bd4 <__aeabi_fdiv>
 800ced0:	1c03      	adds	r3, r0, #0
 800ced2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	2310      	movs	r3, #16
 800cedc:	18f9      	adds	r1, r7, r3
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	1c18      	adds	r0, r3, #0
 800cee2:	f7ff ffa1 	bl	800ce28 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2bff      	cmp	r3, #255	@ 0xff
 800ceea:	d906      	bls.n	800cefa <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	22ff      	movs	r2, #255	@ 0xff
 800cef0:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2209      	movs	r2, #9
 800cef6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800cef8:	e003      	b.n	800cf02 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	701a      	strb	r2, [r3, #0]
}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	46bd      	mov	sp, r7
 800cf06:	b007      	add	sp, #28
 800cf08:	bd90      	pop	{r4, r7, pc}
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	41200000 	.word	0x41200000

0800cf10 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2280      	movs	r2, #128	@ 0x80
 800cf22:	0612      	lsls	r2, r2, #24
 800cf24:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	4a18      	ldr	r2, [pc, #96]	@ (800cf8c <findMinMax+0x7c>)
 800cf2a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e022      	b.n	800cf78 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	18d3      	adds	r3, r2, r3
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	da06      	bge.n	800cf52 <findMinMax+0x42>
        {
            min[0] = array[i];
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	18d3      	adds	r3, r2, r3
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	18d3      	adds	r3, r2, r3
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	dd06      	ble.n	800cf72 <findMinMax+0x62>
        {
            max[0] = array[i];
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	18d3      	adds	r3, r2, r3
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	3301      	adds	r3, #1
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d3d8      	bcc.n	800cf32 <findMinMax+0x22>
        }
    }
}
 800cf80:	46c0      	nop			@ (mov r8, r8)
 800cf82:	46c0      	nop			@ (mov r8, r8)
 800cf84:	46bd      	mov	sp, r7
 800cf86:	b006      	add	sp, #24
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	7fffffff 	.word	0x7fffffff

0800cf90 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d302      	bcc.n	800cfac <getPo2factor+0x1c>
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d107      	bne.n	800cfbc <getPo2factor+0x2c>
    {
        return 0;
 800cfac:	2300      	movs	r3, #0
 800cfae:	e00d      	b.n	800cfcc <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	085b      	lsrs	r3, r3, #1
 800cfb4:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d2f5      	bcs.n	800cfb0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cfca:	68fb      	ldr	r3, [r7, #12]
}
 800cfcc:	0018      	movs	r0, r3
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	b004      	add	sp, #16
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7f4 fb40 	bl	8001668 <__aeabi_ui2f>
 800cfe8:	1c03      	adds	r3, r0, #0
 800cfea:	1c19      	adds	r1, r3, #0
 800cfec:	68b8      	ldr	r0, [r7, #8]
 800cfee:	f7f3 ffd7 	bl	8000fa0 <__aeabi_fmul>
 800cff2:	1c03      	adds	r3, r0, #0
 800cff4:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	2310      	movs	r3, #16
 800cffe:	18f9      	adds	r1, r7, r3
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	1c18      	adds	r0, r3, #0
 800d004:	f7ff fee0 	bl	800cdc8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	801a      	strh	r2, [r3, #0]
}
 800d010:	46c0      	nop			@ (mov r8, r8)
 800d012:	46bd      	mov	sp, r7
 800d014:	b006      	add	sp, #24
 800d016:	bd80      	pop	{r7, pc}

0800d018 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60b8      	str	r0, [r7, #8]
 800d020:	60f9      	str	r1, [r7, #12]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d028:	6a3a      	ldr	r2, [r7, #32]
 800d02a:	68b8      	ldr	r0, [r7, #8]
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	f7fa f931 	bl	8007294 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	18d2      	adds	r2, r2, r3
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	18d2      	adds	r2, r2, r3
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	18d2      	adds	r2, r2, r3
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	18d2      	adds	r2, r2, r3
 800d04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d050:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	0011      	movs	r1, r2
 800d058:	0018      	movs	r0, r3
 800d05a:	f7fa f9ab 	bl	80073b4 <correctIntFracNumber>
}
 800d05e:	46c0      	nop			@ (mov r8, r8)
 800d060:	46bd      	mov	sp, r7
 800d062:	b004      	add	sp, #16
 800d064:	bd80      	pop	{r7, pc}

0800d066 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d076:	2300      	movs	r3, #0
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	e019      	b.n	800d0b0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	18d3      	adds	r3, r2, r3
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	3201      	adds	r2, #1
 800d08c:	0052      	lsls	r2, r2, #1
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	188a      	adds	r2, r1, r2
 800d092:	8812      	ldrh	r2, [r2, #0]
 800d094:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d096:	0019      	movs	r1, r3
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d0a0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d0a2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d3e1      	bcc.n	800d07c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d0b8:	46c0      	nop			@ (mov r8, r8)
 800d0ba:	46c0      	nop			@ (mov r8, r8)
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	b006      	add	sp, #24
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  init = false;
 800d0c8:	4b02      	ldr	r3, [pc, #8]	@ (800d0d4 <InitDone+0x10>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	701a      	strb	r2, [r3, #0]
}
 800d0ce:	46c0      	nop			@ (mov r8, r8)
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	200000d0 	.word	0x200000d0

0800d0d8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d0de:	f7f9 f8ff 	bl	80062e0 <ReadBatteryVoltage>
 800d0e2:	1c02      	adds	r2, r0, #0
 800d0e4:	4b25      	ldr	r3, [pc, #148]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d0e6:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d0e8:	4b24      	ldr	r3, [pc, #144]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4924      	ldr	r1, [pc, #144]	@ (800d180 <batteryChargeCheck+0xa8>)
 800d0ee:	1c18      	adds	r0, r3, #0
 800d0f0:	f7f3 fa1e 	bl	8000530 <__aeabi_fcmplt>
 800d0f4:	1e03      	subs	r3, r0, #0
 800d0f6:	d002      	beq.n	800d0fe <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d0fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	491f      	ldr	r1, [pc, #124]	@ (800d180 <batteryChargeCheck+0xa8>)
 800d104:	1c18      	adds	r0, r3, #0
 800d106:	f7f3 fa31 	bl	800056c <__aeabi_fcmpge>
 800d10a:	1e03      	subs	r3, r0, #0
 800d10c:	d00d      	beq.n	800d12a <batteryChargeCheck+0x52>
 800d10e:	4b1b      	ldr	r3, [pc, #108]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	1c18      	adds	r0, r3, #0
 800d114:	f7f6 f9a6 	bl	8003464 <__aeabi_f2d>
 800d118:	4a1a      	ldr	r2, [pc, #104]	@ (800d184 <batteryChargeCheck+0xac>)
 800d11a:	4b1b      	ldr	r3, [pc, #108]	@ (800d188 <batteryChargeCheck+0xb0>)
 800d11c:	f7f3 f9ce 	bl	80004bc <__aeabi_dcmplt>
 800d120:	1e03      	subs	r3, r0, #0
 800d122:	d002      	beq.n	800d12a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d124:	1dfb      	adds	r3, r7, #7
 800d126:	2201      	movs	r2, #1
 800d128:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d12a:	4b14      	ldr	r3, [pc, #80]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	1c18      	adds	r0, r3, #0
 800d130:	f7f6 f998 	bl	8003464 <__aeabi_f2d>
 800d134:	4a13      	ldr	r2, [pc, #76]	@ (800d184 <batteryChargeCheck+0xac>)
 800d136:	4b14      	ldr	r3, [pc, #80]	@ (800d188 <batteryChargeCheck+0xb0>)
 800d138:	f7f3 f9de 	bl	80004f8 <__aeabi_dcmpge>
 800d13c:	1e03      	subs	r3, r0, #0
 800d13e:	d00b      	beq.n	800d158 <batteryChargeCheck+0x80>
 800d140:	4b0e      	ldr	r3, [pc, #56]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2181      	movs	r1, #129	@ 0x81
 800d146:	05c9      	lsls	r1, r1, #23
 800d148:	1c18      	adds	r0, r3, #0
 800d14a:	f7f3 f9f1 	bl	8000530 <__aeabi_fcmplt>
 800d14e:	1e03      	subs	r3, r0, #0
 800d150:	d002      	beq.n	800d158 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d152:	1dfb      	adds	r3, r7, #7
 800d154:	2202      	movs	r2, #2
 800d156:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d158:	4b08      	ldr	r3, [pc, #32]	@ (800d17c <batteryChargeCheck+0xa4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2181      	movs	r1, #129	@ 0x81
 800d15e:	05c9      	lsls	r1, r1, #23
 800d160:	1c18      	adds	r0, r3, #0
 800d162:	f7f3 fa03 	bl	800056c <__aeabi_fcmpge>
 800d166:	1e03      	subs	r3, r0, #0
 800d168:	d002      	beq.n	800d170 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d16a:	1dfb      	adds	r3, r7, #7
 800d16c:	2203      	movs	r2, #3
 800d16e:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d170:	1dfb      	adds	r3, r7, #7
 800d172:	781b      	ldrb	r3, [r3, #0]
}
 800d174:	0018      	movs	r0, r3
 800d176:	46bd      	mov	sp, r7
 800d178:	b002      	add	sp, #8
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20002010 	.word	0x20002010
 800d180:	40600000 	.word	0x40600000
 800d184:	9999999a 	.word	0x9999999a
 800d188:	400d9999 	.word	0x400d9999

0800d18c <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d18c:	b5b0      	push	{r4, r5, r7, lr}
 800d18e:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d190:	f7f9 f908 	bl	80063a4 <ReadSolarVoltage>
 800d194:	0003      	movs	r3, r0
 800d196:	001a      	movs	r2, r3
 800d198:	4b1a      	ldr	r3, [pc, #104]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d19a:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d19c:	4b19      	ldr	r3, [pc, #100]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	4a19      	ldr	r2, [pc, #100]	@ (800d208 <Calculate_LED_ON+0x7c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d802      	bhi.n	800d1ac <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d1a6:	4b17      	ldr	r3, [pc, #92]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d1a8:	4a18      	ldr	r2, [pc, #96]	@ (800d20c <Calculate_LED_ON+0x80>)
 800d1aa:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d1ac:	4b15      	ldr	r3, [pc, #84]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d1ae:	881b      	ldrh	r3, [r3, #0]
 800d1b0:	4a17      	ldr	r2, [pc, #92]	@ (800d210 <Calculate_LED_ON+0x84>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d902      	bls.n	800d1bc <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d1b6:	4b13      	ldr	r3, [pc, #76]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d1b8:	4a15      	ldr	r2, [pc, #84]	@ (800d210 <Calculate_LED_ON+0x84>)
 800d1ba:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d1bc:	4b11      	ldr	r3, [pc, #68]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7f6 f8fd 	bl	80033c0 <__aeabi_i2d>
 800d1c6:	0004      	movs	r4, r0
 800d1c8:	000d      	movs	r5, r1
 800d1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <Calculate_LED_ON+0x78>)
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	001a      	movs	r2, r3
 800d1d0:	4b10      	ldr	r3, [pc, #64]	@ (800d214 <Calculate_LED_ON+0x88>)
 800d1d2:	1a9b      	subs	r3, r3, r2
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f7f6 f8f3 	bl	80033c0 <__aeabi_i2d>
 800d1da:	2200      	movs	r2, #0
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d218 <Calculate_LED_ON+0x8c>)
 800d1de:	f7f5 fa2d 	bl	800263c <__aeabi_dmul>
 800d1e2:	0002      	movs	r2, r0
 800d1e4:	000b      	movs	r3, r1
 800d1e6:	0020      	movs	r0, r4
 800d1e8:	0029      	movs	r1, r5
 800d1ea:	f7f4 fa7f 	bl	80016ec <__aeabi_dadd>
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	000b      	movs	r3, r1
 800d1f2:	0010      	movs	r0, r2
 800d1f4:	0019      	movs	r1, r3
 800d1f6:	f7f3 fa29 	bl	800064c <__aeabi_d2uiz>
 800d1fa:	0003      	movs	r3, r0
 800d1fc:	b29b      	uxth	r3, r3
}
 800d1fe:	0018      	movs	r0, r3
 800d200:	46bd      	mov	sp, r7
 800d202:	bdb0      	pop	{r4, r5, r7, pc}
 800d204:	20002014 	.word	0x20002014
 800d208:	00000b53 	.word	0x00000b53
 800d20c:	00000b54 	.word	0x00000b54
 800d210:	0000125c 	.word	0x0000125c
 800d214:	00000dee 	.word	0x00000dee
 800d218:	3ff80000 	.word	0x3ff80000

0800d21c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	0004      	movs	r4, r0
 800d224:	0008      	movs	r0, r1
 800d226:	0011      	movs	r1, r2
 800d228:	1dbb      	adds	r3, r7, #6
 800d22a:	1c22      	adds	r2, r4, #0
 800d22c:	801a      	strh	r2, [r3, #0]
 800d22e:	1d3b      	adds	r3, r7, #4
 800d230:	1c02      	adds	r2, r0, #0
 800d232:	801a      	strh	r2, [r3, #0]
 800d234:	1cbb      	adds	r3, r7, #2
 800d236:	1c0a      	adds	r2, r1, #0
 800d238:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d23a:	4b0f      	ldr	r3, [pc, #60]	@ (800d278 <SetStatusLED+0x5c>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d107      	bne.n	800d252 <SetStatusLED+0x36>
 800d242:	4b0e      	ldr	r3, [pc, #56]	@ (800d27c <SetStatusLED+0x60>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <SetStatusLED+0x36>
 800d24a:	4b0d      	ldr	r3, [pc, #52]	@ (800d280 <SetStatusLED+0x64>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00e      	beq.n	800d270 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d252:	2380      	movs	r3, #128	@ 0x80
 800d254:	05db      	lsls	r3, r3, #23
 800d256:	1dba      	adds	r2, r7, #6
 800d258:	8812      	ldrh	r2, [r2, #0]
 800d25a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d25c:	2380      	movs	r3, #128	@ 0x80
 800d25e:	05db      	lsls	r3, r3, #23
 800d260:	1d3a      	adds	r2, r7, #4
 800d262:	8812      	ldrh	r2, [r2, #0]
 800d264:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d266:	2380      	movs	r3, #128	@ 0x80
 800d268:	05db      	lsls	r3, r3, #23
 800d26a:	1cba      	adds	r2, r7, #2
 800d26c:	8812      	ldrh	r2, [r2, #0]
 800d26e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d270:	46c0      	nop			@ (mov r8, r8)
 800d272:	46bd      	mov	sp, r7
 800d274:	b003      	add	sp, #12
 800d276:	bd90      	pop	{r4, r7, pc}
 800d278:	20002001 	.word	0x20002001
 800d27c:	200000d0 	.word	0x200000d0
 800d280:	20002002 	.word	0x20002002

0800d284 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d284:	b590      	push	{r4, r7, lr}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	0004      	movs	r4, r0
 800d28c:	0008      	movs	r0, r1
 800d28e:	0011      	movs	r1, r2
 800d290:	1dfb      	adds	r3, r7, #7
 800d292:	1c22      	adds	r2, r4, #0
 800d294:	701a      	strb	r2, [r3, #0]
 800d296:	1dbb      	adds	r3, r7, #6
 800d298:	1c02      	adds	r2, r0, #0
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	1d7b      	adds	r3, r7, #5
 800d29e:	1c0a      	adds	r2, r1, #0
 800d2a0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d2a2:	4b19      	ldr	r3, [pc, #100]	@ (800d308 <SetDBLED+0x84>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d107      	bne.n	800d2ba <SetDBLED+0x36>
 800d2aa:	4b18      	ldr	r3, [pc, #96]	@ (800d30c <SetDBLED+0x88>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d103      	bne.n	800d2ba <SetDBLED+0x36>
 800d2b2:	4b17      	ldr	r3, [pc, #92]	@ (800d310 <SetDBLED+0x8c>)
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d022      	beq.n	800d300 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d2ba:	1dfb      	adds	r3, r7, #7
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4053      	eors	r3, r2
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	4b13      	ldr	r3, [pc, #76]	@ (800d314 <SetDBLED+0x90>)
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f002 ffcb 	bl	8010266 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d2d0:	1dbb      	adds	r3, r7, #6
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	4053      	eors	r3, r2
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	001a      	movs	r2, r3
 800d2dc:	2380      	movs	r3, #128	@ 0x80
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	480c      	ldr	r0, [pc, #48]	@ (800d314 <SetDBLED+0x90>)
 800d2e2:	0019      	movs	r1, r3
 800d2e4:	f002 ffbf 	bl	8010266 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d2e8:	1d7b      	adds	r3, r7, #5
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	4053      	eors	r3, r2
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	001a      	movs	r2, r3
 800d2f4:	2380      	movs	r3, #128	@ 0x80
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4806      	ldr	r0, [pc, #24]	@ (800d314 <SetDBLED+0x90>)
 800d2fa:	0019      	movs	r1, r3
 800d2fc:	f002 ffb3 	bl	8010266 <HAL_GPIO_WritePin>
  }
}
 800d300:	46c0      	nop			@ (mov r8, r8)
 800d302:	46bd      	mov	sp, r7
 800d304:	b003      	add	sp, #12
 800d306:	bd90      	pop	{r4, r7, pc}
 800d308:	20002001 	.word	0x20002001
 800d30c:	200000d0 	.word	0x200000d0
 800d310:	20002002 	.word	0x20002002
 800d314:	50000400 	.word	0x50000400

0800d318 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d318:	b590      	push	{r4, r7, lr}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	0004      	movs	r4, r0
 800d320:	0008      	movs	r0, r1
 800d322:	0011      	movs	r1, r2
 800d324:	1dbb      	adds	r3, r7, #6
 800d326:	1c22      	adds	r2, r4, #0
 800d328:	801a      	strh	r2, [r3, #0]
 800d32a:	1d3b      	adds	r3, r7, #4
 800d32c:	1c02      	adds	r2, r0, #0
 800d32e:	801a      	strh	r2, [r3, #0]
 800d330:	1cbb      	adds	r3, r7, #2
 800d332:	1c0a      	adds	r2, r1, #0
 800d334:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d336:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <SetVocLED+0x58>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d107      	bne.n	800d34e <SetVocLED+0x36>
 800d33e:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <SetVocLED+0x5c>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d103      	bne.n	800d34e <SetVocLED+0x36>
 800d346:	4b0c      	ldr	r3, [pc, #48]	@ (800d378 <SetVocLED+0x60>)
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d34e:	4b0b      	ldr	r3, [pc, #44]	@ (800d37c <SetVocLED+0x64>)
 800d350:	1dba      	adds	r2, r7, #6
 800d352:	8812      	ldrh	r2, [r2, #0]
 800d354:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d356:	4b09      	ldr	r3, [pc, #36]	@ (800d37c <SetVocLED+0x64>)
 800d358:	1d3a      	adds	r2, r7, #4
 800d35a:	8812      	ldrh	r2, [r2, #0]
 800d35c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d35e:	4b07      	ldr	r3, [pc, #28]	@ (800d37c <SetVocLED+0x64>)
 800d360:	1cba      	adds	r2, r7, #2
 800d362:	8812      	ldrh	r2, [r2, #0]
 800d364:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	46bd      	mov	sp, r7
 800d36a:	b003      	add	sp, #12
 800d36c:	bd90      	pop	{r4, r7, pc}
 800d36e:	46c0      	nop			@ (mov r8, r8)
 800d370:	20002001 	.word	0x20002001
 800d374:	200000d0 	.word	0x200000d0
 800d378:	20002002 	.word	0x20002002
 800d37c:	40000400 	.word	0x40000400

0800d380 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d380:	b580      	push	{r7, lr}
 800d382:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d384:	4b08      	ldr	r3, [pc, #32]	@ (800d3a8 <SetMeasurementIndicator+0x28>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d103      	bne.n	800d394 <SetMeasurementIndicator+0x14>
 800d38c:	4b07      	ldr	r3, [pc, #28]	@ (800d3ac <SetMeasurementIndicator+0x2c>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d394:	f7ff fefa 	bl	800d18c <Calculate_LED_ON>
 800d398:	0003      	movs	r3, r0
 800d39a:	001a      	movs	r2, r3
 800d39c:	2380      	movs	r3, #128	@ 0x80
 800d39e:	05db      	lsls	r3, r3, #23
 800d3a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d3a2:	46c0      	nop			@ (mov r8, r8)
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	20002001 	.word	0x20002001
 800d3ac:	20002002 	.word	0x20002002

0800d3b0 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3b4:	4b07      	ldr	r3, [pc, #28]	@ (800d3d4 <ResetMeasurementIndicator+0x24>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d103      	bne.n	800d3c4 <ResetMeasurementIndicator+0x14>
 800d3bc:	4b06      	ldr	r3, [pc, #24]	@ (800d3d8 <ResetMeasurementIndicator+0x28>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d3c4:	2380      	movs	r3, #128	@ 0x80
 800d3c6:	05db      	lsls	r3, r3, #23
 800d3c8:	22fa      	movs	r2, #250	@ 0xfa
 800d3ca:	0112      	lsls	r2, r2, #4
 800d3cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d3ce:	46c0      	nop			@ (mov r8, r8)
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20002001 	.word	0x20002001
 800d3d8:	20002002 	.word	0x20002002

0800d3dc <SetMICIndicator>:
void SetMICIndicator(){
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3e0:	4b19      	ldr	r3, [pc, #100]	@ (800d448 <SetMICIndicator+0x6c>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <SetMICIndicator+0x14>
 800d3e8:	4b18      	ldr	r3, [pc, #96]	@ (800d44c <SetMICIndicator+0x70>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d007      	beq.n	800d400 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d3f0:	f7ff fecc 	bl	800d18c <Calculate_LED_ON>
 800d3f4:	0003      	movs	r3, r0
 800d3f6:	001a      	movs	r2, r3
 800d3f8:	2380      	movs	r3, #128	@ 0x80
 800d3fa:	05db      	lsls	r3, r3, #23
 800d3fc:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d3fe:	e01f      	b.n	800d440 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d400:	4b13      	ldr	r3, [pc, #76]	@ (800d450 <SetMICIndicator+0x74>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	1c18      	adds	r0, r3, #0
 800d406:	f7f6 f82d 	bl	8003464 <__aeabi_f2d>
 800d40a:	4a12      	ldr	r2, [pc, #72]	@ (800d454 <SetMICIndicator+0x78>)
 800d40c:	4b12      	ldr	r3, [pc, #72]	@ (800d458 <SetMICIndicator+0x7c>)
 800d40e:	f7f3 f869 	bl	80004e4 <__aeabi_dcmpgt>
 800d412:	1e03      	subs	r3, r0, #0
 800d414:	d00a      	beq.n	800d42c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d416:	f7ff feb9 	bl	800d18c <Calculate_LED_ON>
 800d41a:	0003      	movs	r3, r0
 800d41c:	001a      	movs	r2, r3
 800d41e:	2380      	movs	r3, #128	@ 0x80
 800d420:	05db      	lsls	r3, r3, #23
 800d422:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d424:	4b0d      	ldr	r3, [pc, #52]	@ (800d45c <SetMICIndicator+0x80>)
 800d426:	2202      	movs	r2, #2
 800d428:	701a      	strb	r2, [r3, #0]
}
 800d42a:	e009      	b.n	800d440 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d42c:	f7ff feae 	bl	800d18c <Calculate_LED_ON>
 800d430:	0003      	movs	r3, r0
 800d432:	001a      	movs	r2, r3
 800d434:	2380      	movs	r3, #128	@ 0x80
 800d436:	05db      	lsls	r3, r3, #23
 800d438:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d43a:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <SetMICIndicator+0x80>)
 800d43c:	2201      	movs	r2, #1
 800d43e:	701a      	strb	r2, [r3, #0]
}
 800d440:	46c0      	nop			@ (mov r8, r8)
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	20002001 	.word	0x20002001
 800d44c:	20002002 	.word	0x20002002
 800d450:	20002010 	.word	0x20002010
 800d454:	9999999a 	.word	0x9999999a
 800d458:	400d9999 	.word	0x400d9999
 800d45c:	20002004 	.word	0x20002004

0800d460 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d460:	b580      	push	{r7, lr}
 800d462:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d464:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <ResetMICIndicator+0x44>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <ResetMICIndicator+0x14>
 800d46c:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a8 <ResetMICIndicator+0x48>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d005      	beq.n	800d480 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d474:	2380      	movs	r3, #128	@ 0x80
 800d476:	05db      	lsls	r3, r3, #23
 800d478:	22fa      	movs	r2, #250	@ 0xfa
 800d47a:	0112      	lsls	r2, r2, #4
 800d47c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d47e:	e00e      	b.n	800d49e <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d480:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ac <ResetMICIndicator+0x4c>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d105      	bne.n	800d494 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d488:	2380      	movs	r3, #128	@ 0x80
 800d48a:	05db      	lsls	r3, r3, #23
 800d48c:	22fa      	movs	r2, #250	@ 0xfa
 800d48e:	0112      	lsls	r2, r2, #4
 800d490:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d492:	e004      	b.n	800d49e <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d494:	2380      	movs	r3, #128	@ 0x80
 800d496:	05db      	lsls	r3, r3, #23
 800d498:	22fa      	movs	r2, #250	@ 0xfa
 800d49a:	0112      	lsls	r2, r2, #4
 800d49c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d49e:	46c0      	nop			@ (mov r8, r8)
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	20002001 	.word	0x20002001
 800d4a8:	20002002 	.word	0x20002002
 800d4ac:	20002004 	.word	0x20002004

0800d4b0 <SetESPIndicator>:
void SetESPIndicator(){
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4b4:	4b08      	ldr	r3, [pc, #32]	@ (800d4d8 <SetESPIndicator+0x28>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d103      	bne.n	800d4c4 <SetESPIndicator+0x14>
 800d4bc:	4b07      	ldr	r3, [pc, #28]	@ (800d4dc <SetESPIndicator+0x2c>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4c4:	f7ff fe62 	bl	800d18c <Calculate_LED_ON>
 800d4c8:	0003      	movs	r3, r0
 800d4ca:	001a      	movs	r2, r3
 800d4cc:	2380      	movs	r3, #128	@ 0x80
 800d4ce:	05db      	lsls	r3, r3, #23
 800d4d0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d4d2:	46c0      	nop			@ (mov r8, r8)
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20002001 	.word	0x20002001
 800d4dc:	20002002 	.word	0x20002002

0800d4e0 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4e4:	4b07      	ldr	r3, [pc, #28]	@ (800d504 <ResetESPIndicator+0x24>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d103      	bne.n	800d4f4 <ResetESPIndicator+0x14>
 800d4ec:	4b06      	ldr	r3, [pc, #24]	@ (800d508 <ResetESPIndicator+0x28>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d004      	beq.n	800d4fe <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d4f4:	2380      	movs	r3, #128	@ 0x80
 800d4f6:	05db      	lsls	r3, r3, #23
 800d4f8:	22fa      	movs	r2, #250	@ 0xfa
 800d4fa:	0112      	lsls	r2, r2, #4
 800d4fc:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d4fe:	46c0      	nop			@ (mov r8, r8)
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20002001 	.word	0x20002001
 800d508:	20002002 	.word	0x20002002

0800d50c <SetPMIndicator>:

void SetPMIndicator() {
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d510:	4b0f      	ldr	r3, [pc, #60]	@ (800d550 <SetPMIndicator+0x44>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d103      	bne.n	800d520 <SetPMIndicator+0x14>
 800d518:	4b0e      	ldr	r3, [pc, #56]	@ (800d554 <SetPMIndicator+0x48>)
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d014      	beq.n	800d54a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d520:	f7ff fe34 	bl	800d18c <Calculate_LED_ON>
 800d524:	0003      	movs	r3, r0
 800d526:	001a      	movs	r2, r3
 800d528:	2380      	movs	r3, #128	@ 0x80
 800d52a:	05db      	lsls	r3, r3, #23
 800d52c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d52e:	f7ff fe2d 	bl	800d18c <Calculate_LED_ON>
 800d532:	0003      	movs	r3, r0
 800d534:	001a      	movs	r2, r3
 800d536:	2380      	movs	r3, #128	@ 0x80
 800d538:	05db      	lsls	r3, r3, #23
 800d53a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d53c:	f7ff fe26 	bl	800d18c <Calculate_LED_ON>
 800d540:	0003      	movs	r3, r0
 800d542:	001a      	movs	r2, r3
 800d544:	2380      	movs	r3, #128	@ 0x80
 800d546:	05db      	lsls	r3, r3, #23
 800d548:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d54a:	46c0      	nop			@ (mov r8, r8)
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20002001 	.word	0x20002001
 800d554:	20002002 	.word	0x20002002

0800d558 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d55c:	4b0c      	ldr	r3, [pc, #48]	@ (800d590 <ResetPMIndicator+0x38>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d103      	bne.n	800d56c <ResetPMIndicator+0x14>
 800d564:	4b0b      	ldr	r3, [pc, #44]	@ (800d594 <ResetPMIndicator+0x3c>)
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00e      	beq.n	800d58a <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d56c:	2380      	movs	r3, #128	@ 0x80
 800d56e:	05db      	lsls	r3, r3, #23
 800d570:	22fa      	movs	r2, #250	@ 0xfa
 800d572:	0112      	lsls	r2, r2, #4
 800d574:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d576:	2380      	movs	r3, #128	@ 0x80
 800d578:	05db      	lsls	r3, r3, #23
 800d57a:	22fa      	movs	r2, #250	@ 0xfa
 800d57c:	0112      	lsls	r2, r2, #4
 800d57e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d580:	2380      	movs	r3, #128	@ 0x80
 800d582:	05db      	lsls	r3, r3, #23
 800d584:	22fa      	movs	r2, #250	@ 0xfa
 800d586:	0112      	lsls	r2, r2, #4
 800d588:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d58a:	46c0      	nop			@ (mov r8, r8)
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	20002001 	.word	0x20002001
 800d594:	20002002 	.word	0x20002002

0800d598 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d598:	b580      	push	{r7, lr}
 800d59a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d59c:	23fa      	movs	r3, #250	@ 0xfa
 800d59e:	011a      	lsls	r2, r3, #4
 800d5a0:	23fa      	movs	r3, #250	@ 0xfa
 800d5a2:	0119      	lsls	r1, r3, #4
 800d5a4:	23fa      	movs	r3, #250	@ 0xfa
 800d5a6:	011b      	lsls	r3, r3, #4
 800d5a8:	0018      	movs	r0, r3
 800d5aa:	f7ff fe37 	bl	800d21c <SetStatusLED>
  SetDBLED(false,false,false);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f7ff fe66 	bl	800d284 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d5b8:	23fa      	movs	r3, #250	@ 0xfa
 800d5ba:	011a      	lsls	r2, r3, #4
 800d5bc:	23fa      	movs	r3, #250	@ 0xfa
 800d5be:	0119      	lsls	r1, r3, #4
 800d5c0:	23fa      	movs	r3, #250	@ 0xfa
 800d5c2:	011b      	lsls	r3, r3, #4
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f7ff fea7 	bl	800d318 <SetVocLED>
return;
 800d5ca:	46c0      	nop			@ (mov r8, r8)
}
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <SetAllREDLED>:

void SetAllREDLED() {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d5d4:	2380      	movs	r3, #128	@ 0x80
 800d5d6:	05db      	lsls	r3, r3, #23
 800d5d8:	2200      	movs	r2, #0
 800d5da:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d5dc:	2380      	movs	r3, #128	@ 0x80
 800d5de:	05db      	lsls	r3, r3, #23
 800d5e0:	22fa      	movs	r2, #250	@ 0xfa
 800d5e2:	0112      	lsls	r2, r2, #4
 800d5e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d5e6:	2380      	movs	r3, #128	@ 0x80
 800d5e8:	05db      	lsls	r3, r3, #23
 800d5ea:	22fa      	movs	r2, #250	@ 0xfa
 800d5ec:	0112      	lsls	r2, r2, #4
 800d5ee:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <SetAllREDLED+0x54>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d624 <SetAllREDLED+0x54>)
 800d5f8:	22fa      	movs	r2, #250	@ 0xfa
 800d5fa:	0112      	lsls	r2, r2, #4
 800d5fc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d5fe:	4b09      	ldr	r3, [pc, #36]	@ (800d624 <SetAllREDLED+0x54>)
 800d600:	22fa      	movs	r2, #250	@ 0xfa
 800d602:	0112      	lsls	r2, r2, #4
 800d604:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d606:	4b08      	ldr	r3, [pc, #32]	@ (800d628 <SetAllREDLED+0x58>)
 800d608:	2200      	movs	r2, #0
 800d60a:	2101      	movs	r1, #1
 800d60c:	0018      	movs	r0, r3
 800d60e:	f002 fe2a 	bl	8010266 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d612:	23fa      	movs	r3, #250	@ 0xfa
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	0018      	movs	r0, r3
 800d618:	f001 fb9e 	bl	800ed58 <HAL_Delay>
}
 800d61c:	46c0      	nop			@ (mov r8, r8)
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	46c0      	nop			@ (mov r8, r8)
 800d624:	40000400 	.word	0x40000400
 800d628:	50000400 	.word	0x50000400

0800d62c <powerCheck>:

Battery_Status powerCheck(){
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d632:	f7f8 ff0b 	bl	800644c <Check_USB_PowerOn>
 800d636:	0003      	movs	r3, r0
 800d638:	001a      	movs	r2, r3
 800d63a:	2301      	movs	r3, #1
 800d63c:	4053      	eors	r3, r2
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b00      	cmp	r3, #0
 800d642:	d005      	beq.n	800d650 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d644:	1dfc      	adds	r4, r7, #7
 800d646:	f7ff fd47 	bl	800d0d8 <batteryChargeCheck>
 800d64a:	0003      	movs	r3, r0
 800d64c:	7023      	strb	r3, [r4, #0]
 800d64e:	e002      	b.n	800d656 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d650:	1dfb      	adds	r3, r7, #7
 800d652:	2204      	movs	r2, #4
 800d654:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800d656:	1dfb      	adds	r3, r7, #7
 800d658:	781b      	ldrb	r3, [r3, #0]
}
 800d65a:	0018      	movs	r0, r3
 800d65c:	46bd      	mov	sp, r7
 800d65e:	b003      	add	sp, #12
 800d660:	bd90      	pop	{r4, r7, pc}
	...

0800d664 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	0002      	movs	r2, r0
 800d66c:	1dfb      	adds	r3, r7, #7
 800d66e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d670:	1dfb      	adds	r3, r7, #7
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b04      	cmp	r3, #4
 800d676:	d105      	bne.n	800d684 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800d678:	4a18      	ldr	r2, [pc, #96]	@ (800d6dc <powerDisplay+0x78>)
 800d67a:	4b19      	ldr	r3, [pc, #100]	@ (800d6e0 <powerDisplay+0x7c>)
 800d67c:	0019      	movs	r1, r3
 800d67e:	2003      	movs	r0, #3
 800d680:	f000 ff20 	bl	800e4c4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d684:	1dfb      	adds	r3, r7, #7
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d105      	bne.n	800d698 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d68c:	4a15      	ldr	r2, [pc, #84]	@ (800d6e4 <powerDisplay+0x80>)
 800d68e:	4b14      	ldr	r3, [pc, #80]	@ (800d6e0 <powerDisplay+0x7c>)
 800d690:	0019      	movs	r1, r3
 800d692:	2003      	movs	r0, #3
 800d694:	f000 ff16 	bl	800e4c4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d698:	1dfb      	adds	r3, r7, #7
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d105      	bne.n	800d6ac <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d6a0:	4a11      	ldr	r2, [pc, #68]	@ (800d6e8 <powerDisplay+0x84>)
 800d6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <powerDisplay+0x7c>)
 800d6a4:	0019      	movs	r1, r3
 800d6a6:	2003      	movs	r0, #3
 800d6a8:	f000 ff0c 	bl	800e4c4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d6ac:	1dfb      	adds	r3, r7, #7
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d105      	bne.n	800d6c0 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d6b4:	4a0d      	ldr	r2, [pc, #52]	@ (800d6ec <powerDisplay+0x88>)
 800d6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <powerDisplay+0x7c>)
 800d6b8:	0019      	movs	r1, r3
 800d6ba:	2003      	movs	r0, #3
 800d6bc:	f000 ff02 	bl	800e4c4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d6c0:	1dfb      	adds	r3, r7, #7
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d105      	bne.n	800d6d4 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d6c8:	4a09      	ldr	r2, [pc, #36]	@ (800d6f0 <powerDisplay+0x8c>)
 800d6ca:	4b05      	ldr	r3, [pc, #20]	@ (800d6e0 <powerDisplay+0x7c>)
 800d6cc:	0019      	movs	r1, r3
 800d6ce:	2003      	movs	r0, #3
 800d6d0:	f000 fef8 	bl	800e4c4 <CreateLine>
  }
}
 800d6d4:	46c0      	nop			@ (mov r8, r8)
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	b002      	add	sp, #8
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	08024e70 	.word	0x08024e70
 800d6e0:	08024e94 	.word	0x08024e94
 800d6e4:	08024e98 	.word	0x08024e98
 800d6e8:	08024eb0 	.word	0x08024eb0
 800d6ec:	08024ed0 	.word	0x08024ed0
 800d6f0:	08024ee8 	.word	0x08024ee8

0800d6f4 <configCheck>:

void configCheck(){
 800d6f4:	b590      	push	{r4, r7, lr}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d6fa:	f7f8 feb6 	bl	800646a <BootButton_Pressed>
 800d6fe:	1e03      	subs	r3, r0, #0
 800d700:	d007      	beq.n	800d712 <configCheck+0x1e>
 800d702:	f7f8 fec3 	bl	800648c <UserButton_Pressed>
 800d706:	1e03      	subs	r3, r0, #0
 800d708:	d003      	beq.n	800d712 <configCheck+0x1e>
    configSet = true;
 800d70a:	4ba4      	ldr	r3, [pc, #656]	@ (800d99c <configCheck+0x2a8>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	701a      	strb	r2, [r3, #0]
 800d710:	e00a      	b.n	800d728 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d712:	4ba2      	ldr	r3, [pc, #648]	@ (800d99c <configCheck+0x2a8>)
 800d714:	2200      	movs	r2, #0
 800d716:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d718:	f001 fb14 	bl	800ed44 <HAL_GetTick>
 800d71c:	0003      	movs	r3, r0
 800d71e:	22fa      	movs	r2, #250	@ 0xfa
 800d720:	00d2      	lsls	r2, r2, #3
 800d722:	189a      	adds	r2, r3, r2
 800d724:	4b9e      	ldr	r3, [pc, #632]	@ (800d9a0 <configCheck+0x2ac>)
 800d726:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d728:	4b9c      	ldr	r3, [pc, #624]	@ (800d99c <configCheck+0x2a8>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00d      	beq.n	800d74c <configCheck+0x58>
 800d730:	4b9b      	ldr	r3, [pc, #620]	@ (800d9a0 <configCheck+0x2ac>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	0018      	movs	r0, r3
 800d736:	f000 fe6f 	bl	800e418 <TimestampIsReached>
 800d73a:	1e03      	subs	r3, r0, #0
 800d73c:	d006      	beq.n	800d74c <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d73e:	f7f6 f98f 	bl	8003a60 <SetConfigMode>
    SetDBLED(true, true, true);
 800d742:	2201      	movs	r2, #1
 800d744:	2101      	movs	r1, #1
 800d746:	2001      	movs	r0, #1
 800d748:	f7ff fd9c 	bl	800d284 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld && !GetReconfigMode()){
 800d74c:	f7f8 fe8d 	bl	800646a <BootButton_Pressed>
 800d750:	0003      	movs	r3, r0
 800d752:	001a      	movs	r2, r3
 800d754:	2301      	movs	r3, #1
 800d756:	4053      	eors	r3, r2
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d03a      	beq.n	800d7d4 <configCheck+0xe0>
 800d75e:	f7f8 fe95 	bl	800648c <UserButton_Pressed>
 800d762:	1e03      	subs	r3, r0, #0
 800d764:	d036      	beq.n	800d7d4 <configCheck+0xe0>
 800d766:	4b8f      	ldr	r3, [pc, #572]	@ (800d9a4 <configCheck+0x2b0>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2201      	movs	r2, #1
 800d76c:	4053      	eors	r3, r2
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b00      	cmp	r3, #0
 800d772:	d02f      	beq.n	800d7d4 <configCheck+0xe0>
 800d774:	f7f6 f994 	bl	8003aa0 <GetReconfigMode>
 800d778:	0003      	movs	r3, r0
 800d77a:	001a      	movs	r2, r3
 800d77c:	2301      	movs	r3, #1
 800d77e:	4053      	eors	r3, r2
 800d780:	b2db      	uxtb	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d026      	beq.n	800d7d4 <configCheck+0xe0>
    SetLEDsOff();
 800d786:	f7ff ff07 	bl	800d598 <SetLEDsOff>
    Debug("userToggle flipped");
 800d78a:	4a87      	ldr	r2, [pc, #540]	@ (800d9a8 <configCheck+0x2b4>)
 800d78c:	4b87      	ldr	r3, [pc, #540]	@ (800d9ac <configCheck+0x2b8>)
 800d78e:	0019      	movs	r1, r3
 800d790:	2003      	movs	r0, #3
 800d792:	f000 fe97 	bl	800e4c4 <CreateLine>
    userToggle = !userToggle;
 800d796:	4b86      	ldr	r3, [pc, #536]	@ (800d9b0 <configCheck+0x2bc>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	1e5a      	subs	r2, r3, #1
 800d79c:	4193      	sbcs	r3, r2
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	4053      	eors	r3, r2
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	1c1a      	adds	r2, r3, #0
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	4b80      	ldr	r3, [pc, #512]	@ (800d9b0 <configCheck+0x2bc>)
 800d7b0:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d7b2:	4b7f      	ldr	r3, [pc, #508]	@ (800d9b0 <configCheck+0x2bc>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <configCheck+0xca>
      EnabledConnectedDevices();
 800d7ba:	f7fb f895 	bl	80088e8 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d7be:	4b79      	ldr	r3, [pc, #484]	@ (800d9a4 <configCheck+0x2b0>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d7c4:	f001 fabe 	bl	800ed44 <HAL_GetTick>
 800d7c8:	0003      	movs	r3, r0
 800d7ca:	22fa      	movs	r2, #250	@ 0xfa
 800d7cc:	00d2      	lsls	r2, r2, #3
 800d7ce:	189a      	adds	r2, r3, r2
 800d7d0:	4b78      	ldr	r3, [pc, #480]	@ (800d9b4 <configCheck+0x2c0>)
 800d7d2:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d7d4:	f7f8 fe49 	bl	800646a <BootButton_Pressed>
 800d7d8:	0003      	movs	r3, r0
 800d7da:	001a      	movs	r2, r3
 800d7dc:	2301      	movs	r3, #1
 800d7de:	4053      	eors	r3, r2
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d100      	bne.n	800d7e8 <configCheck+0xf4>
 800d7e6:	e0a4      	b.n	800d932 <configCheck+0x23e>
 800d7e8:	4b6e      	ldr	r3, [pc, #440]	@ (800d9a4 <configCheck+0x2b0>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d100      	bne.n	800d7f2 <configCheck+0xfe>
 800d7f0:	e09f      	b.n	800d932 <configCheck+0x23e>
 800d7f2:	4b70      	ldr	r3, [pc, #448]	@ (800d9b4 <configCheck+0x2c0>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	0018      	movs	r0, r3
 800d7f8:	f000 fe0e 	bl	800e418 <TimestampIsReached>
 800d7fc:	1e03      	subs	r3, r0, #0
 800d7fe:	d100      	bne.n	800d802 <configCheck+0x10e>
 800d800:	e097      	b.n	800d932 <configCheck+0x23e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d802:	f7fa fdc1 	bl	8008388 <GetPMSensorPresence>
 800d806:	1e03      	subs	r3, r0, #0
 800d808:	d100      	bne.n	800d80c <configCheck+0x118>
 800d80a:	e082      	b.n	800d912 <configCheck+0x21e>
 800d80c:	4b6a      	ldr	r3, [pc, #424]	@ (800d9b8 <configCheck+0x2c4>)
 800d80e:	791b      	ldrb	r3, [r3, #4]
 800d810:	2b34      	cmp	r3, #52	@ 0x34
 800d812:	d004      	beq.n	800d81e <configCheck+0x12a>
 800d814:	4b68      	ldr	r3, [pc, #416]	@ (800d9b8 <configCheck+0x2c4>)
 800d816:	791b      	ldrb	r3, [r3, #4]
 800d818:	2b35      	cmp	r3, #53	@ 0x35
 800d81a:	d000      	beq.n	800d81e <configCheck+0x12a>
 800d81c:	e079      	b.n	800d912 <configCheck+0x21e>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d81e:	4b67      	ldr	r3, [pc, #412]	@ (800d9bc <configCheck+0x2c8>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	1e5a      	subs	r2, r3, #1
 800d824:	4193      	sbcs	r3, r2
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2201      	movs	r2, #1
 800d82a:	4053      	eors	r3, r2
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	1c1a      	adds	r2, r3, #0
 800d830:	2301      	movs	r3, #1
 800d832:	4013      	ands	r3, r2
 800d834:	b2da      	uxtb	r2, r3
 800d836:	4b61      	ldr	r3, [pc, #388]	@ (800d9bc <configCheck+0x2c8>)
 800d838:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d83a:	4b60      	ldr	r3, [pc, #384]	@ (800d9bc <configCheck+0x2c8>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d005      	beq.n	800d84e <configCheck+0x15a>
 800d842:	1dbc      	adds	r4, r7, #6
 800d844:	f7ff fca2 	bl	800d18c <Calculate_LED_ON>
 800d848:	0003      	movs	r3, r0
 800d84a:	8023      	strh	r3, [r4, #0]
 800d84c:	e003      	b.n	800d856 <configCheck+0x162>
        else color = 4000;
 800d84e:	1dbb      	adds	r3, r7, #6
 800d850:	22fa      	movs	r2, #250	@ 0xfa
 800d852:	0112      	lsls	r2, r2, #4
 800d854:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d856:	4b59      	ldr	r3, [pc, #356]	@ (800d9bc <configCheck+0x2c8>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <configCheck+0x16e>
 800d85e:	4b58      	ldr	r3, [pc, #352]	@ (800d9c0 <configCheck+0x2cc>)
 800d860:	e000      	b.n	800d864 <configCheck+0x170>
 800d862:	4b58      	ldr	r3, [pc, #352]	@ (800d9c4 <configCheck+0x2d0>)
 800d864:	4a58      	ldr	r2, [pc, #352]	@ (800d9c8 <configCheck+0x2d4>)
 800d866:	4959      	ldr	r1, [pc, #356]	@ (800d9cc <configCheck+0x2d8>)
 800d868:	2002      	movs	r0, #2
 800d86a:	f000 fe2b 	bl	800e4c4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d86e:	1d7b      	adds	r3, r7, #5
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
 800d874:	e028      	b.n	800d8c8 <configCheck+0x1d4>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d876:	f7ff fc89 	bl	800d18c <Calculate_LED_ON>
 800d87a:	0003      	movs	r3, r0
 800d87c:	001a      	movs	r2, r3
 800d87e:	4b54      	ldr	r3, [pc, #336]	@ (800d9d0 <configCheck+0x2dc>)
 800d880:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d882:	4b53      	ldr	r3, [pc, #332]	@ (800d9d0 <configCheck+0x2dc>)
 800d884:	1dba      	adds	r2, r7, #6
 800d886:	8812      	ldrh	r2, [r2, #0]
 800d888:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d88a:	4b51      	ldr	r3, [pc, #324]	@ (800d9d0 <configCheck+0x2dc>)
 800d88c:	1dba      	adds	r2, r7, #6
 800d88e:	8812      	ldrh	r2, [r2, #0]
 800d890:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d892:	23c8      	movs	r3, #200	@ 0xc8
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	0018      	movs	r0, r3
 800d898:	f001 fa5e 	bl	800ed58 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d89c:	4b4c      	ldr	r3, [pc, #304]	@ (800d9d0 <configCheck+0x2dc>)
 800d89e:	22fa      	movs	r2, #250	@ 0xfa
 800d8a0:	0112      	lsls	r2, r2, #4
 800d8a2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d8a4:	4b4a      	ldr	r3, [pc, #296]	@ (800d9d0 <configCheck+0x2dc>)
 800d8a6:	22fa      	movs	r2, #250	@ 0xfa
 800d8a8:	0112      	lsls	r2, r2, #4
 800d8aa:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d8ac:	4b48      	ldr	r3, [pc, #288]	@ (800d9d0 <configCheck+0x2dc>)
 800d8ae:	22fa      	movs	r2, #250	@ 0xfa
 800d8b0:	0112      	lsls	r2, r2, #4
 800d8b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d8b4:	23c8      	movs	r3, #200	@ 0xc8
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f001 fa4d 	bl	800ed58 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d8be:	1d7b      	adds	r3, r7, #5
 800d8c0:	781a      	ldrb	r2, [r3, #0]
 800d8c2:	1d7b      	adds	r3, r7, #5
 800d8c4:	3201      	adds	r2, #1
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	1d7b      	adds	r3, r7, #5
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d9d2      	bls.n	800d876 <configCheck+0x182>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800d8d0:	4b37      	ldr	r3, [pc, #220]	@ (800d9b0 <configCheck+0x2bc>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	1e5a      	subs	r2, r3, #1
 800d8d6:	4193      	sbcs	r3, r2
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2201      	movs	r2, #1
 800d8dc:	4053      	eors	r3, r2
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	1c1a      	adds	r2, r3, #0
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b31      	ldr	r3, [pc, #196]	@ (800d9b0 <configCheck+0x2bc>)
 800d8ea:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d8ec:	4b30      	ldr	r3, [pc, #192]	@ (800d9b0 <configCheck+0x2bc>)
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <configCheck+0x204>
 800d8f4:	4b32      	ldr	r3, [pc, #200]	@ (800d9c0 <configCheck+0x2cc>)
 800d8f6:	e000      	b.n	800d8fa <configCheck+0x206>
 800d8f8:	4b32      	ldr	r3, [pc, #200]	@ (800d9c4 <configCheck+0x2d0>)
 800d8fa:	4a36      	ldr	r2, [pc, #216]	@ (800d9d4 <configCheck+0x2e0>)
 800d8fc:	4933      	ldr	r1, [pc, #204]	@ (800d9cc <configCheck+0x2d8>)
 800d8fe:	2002      	movs	r0, #2
 800d900:	f000 fde0 	bl	800e4c4 <CreateLine>
      if (usbPluggedIn) {
 800d904:	4b34      	ldr	r3, [pc, #208]	@ (800d9d8 <configCheck+0x2e4>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d009      	beq.n	800d920 <configCheck+0x22c>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d90c:	f7fc f8bc 	bl	8009a88 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d910:	e006      	b.n	800d920 <configCheck+0x22c>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d912:	4a32      	ldr	r2, [pc, #200]	@ (800d9dc <configCheck+0x2e8>)
 800d914:	4b2d      	ldr	r3, [pc, #180]	@ (800d9cc <configCheck+0x2d8>)
 800d916:	0019      	movs	r1, r3
 800d918:	2002      	movs	r0, #2
 800d91a:	f000 fdd3 	bl	800e4c4 <CreateLine>
 800d91e:	e000      	b.n	800d922 <configCheck+0x22e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d920:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d922:	46c0      	nop			@ (mov r8, r8)
 800d924:	f7f8 fdb2 	bl	800648c <UserButton_Pressed>
 800d928:	1e03      	subs	r3, r0, #0
 800d92a:	d1fb      	bne.n	800d924 <configCheck+0x230>
    }
    buttonHeld = false;
 800d92c:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a4 <configCheck+0x2b0>)
 800d92e:	2200      	movs	r2, #0
 800d930:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d932:	f7f8 fd9a 	bl	800646a <BootButton_Pressed>
 800d936:	0003      	movs	r3, r0
 800d938:	001a      	movs	r2, r3
 800d93a:	2301      	movs	r3, #1
 800d93c:	4053      	eors	r3, r2
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00b      	beq.n	800d95c <configCheck+0x268>
 800d944:	f7f8 fda2 	bl	800648c <UserButton_Pressed>
 800d948:	0003      	movs	r3, r0
 800d94a:	001a      	movs	r2, r3
 800d94c:	2301      	movs	r3, #1
 800d94e:	4053      	eors	r3, r2
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <configCheck+0x268>
    buttonHeld = false;
 800d956:	4b13      	ldr	r3, [pc, #76]	@ (800d9a4 <configCheck+0x2b0>)
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d95c:	f7f8 fd76 	bl	800644c <Check_USB_PowerOn>
 800d960:	1e03      	subs	r3, r0, #0
 800d962:	d003      	beq.n	800d96c <configCheck+0x278>
    usbPluggedIn = true;
 800d964:	4b1c      	ldr	r3, [pc, #112]	@ (800d9d8 <configCheck+0x2e4>)
 800d966:	2201      	movs	r2, #1
 800d968:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d96a:	e012      	b.n	800d992 <configCheck+0x29e>
    if(!userToggle && !init){
 800d96c:	4b10      	ldr	r3, [pc, #64]	@ (800d9b0 <configCheck+0x2bc>)
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	2201      	movs	r2, #1
 800d972:	4053      	eors	r3, r2
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d008      	beq.n	800d98c <configCheck+0x298>
 800d97a:	4b19      	ldr	r3, [pc, #100]	@ (800d9e0 <configCheck+0x2ec>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2201      	movs	r2, #1
 800d980:	4053      	eors	r3, r2
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <configCheck+0x298>
      SetLEDsOff();
 800d988:	f7ff fe06 	bl	800d598 <SetLEDsOff>
    usbPluggedIn = false;
 800d98c:	4b12      	ldr	r3, [pc, #72]	@ (800d9d8 <configCheck+0x2e4>)
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]
}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	46bd      	mov	sp, r7
 800d996:	b003      	add	sp, #12
 800d998:	bd90      	pop	{r4, r7, pc}
 800d99a:	46c0      	nop			@ (mov r8, r8)
 800d99c:	20002000 	.word	0x20002000
 800d9a0:	20002008 	.word	0x20002008
 800d9a4:	20002003 	.word	0x20002003
 800d9a8:	08024f0c 	.word	0x08024f0c
 800d9ac:	08024e94 	.word	0x08024e94
 800d9b0:	20002002 	.word	0x20002002
 800d9b4:	2000200c 	.word	0x2000200c
 800d9b8:	20001068 	.word	0x20001068
 800d9bc:	20001066 	.word	0x20001066
 800d9c0:	08024f20 	.word	0x08024f20
 800d9c4:	08024f28 	.word	0x08024f28
 800d9c8:	08024f34 	.word	0x08024f34
 800d9cc:	08024f54 	.word	0x08024f54
 800d9d0:	40000400 	.word	0x40000400
 800d9d4:	08024f58 	.word	0x08024f58
 800d9d8:	20002001 	.word	0x20002001
 800d9dc:	08024f70 	.word	0x08024f70
 800d9e0:	200000d0 	.word	0x200000d0

0800d9e4 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800d9e4:	b590      	push	{r4, r7, lr}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d9ea:	1dfc      	adds	r4, r7, #7
 800d9ec:	f7ff fe1e 	bl	800d62c <powerCheck>
 800d9f0:	0003      	movs	r3, r0
 800d9f2:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d9f4:	1dfb      	adds	r3, r7, #7
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f7ff fe33 	bl	800d664 <powerDisplay>
  return status;
 800d9fe:	1dfb      	adds	r3, r7, #7
 800da00:	781b      	ldrb	r3, [r3, #0]
}
 800da02:	0018      	movs	r0, r3
 800da04:	46bd      	mov	sp, r7
 800da06:	b003      	add	sp, #12
 800da08:	bd90      	pop	{r4, r7, pc}
	...

0800da0c <setuserToggle>:

void setuserToggle(void) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800da10:	f7ff fe0c 	bl	800d62c <powerCheck>
 800da14:	0003      	movs	r3, r0
 800da16:	2b04      	cmp	r3, #4
 800da18:	d002      	beq.n	800da20 <setuserToggle+0x14>
    userToggle = true;
 800da1a:	4b03      	ldr	r3, [pc, #12]	@ (800da28 <setuserToggle+0x1c>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	701a      	strb	r2, [r3, #0]
  }
}
 800da20:	46c0      	nop			@ (mov r8, r8)
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	46c0      	nop			@ (mov r8, r8)
 800da28:	20002002 	.word	0x20002002

0800da2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da30:	4b07      	ldr	r3, [pc, #28]	@ (800da50 <HAL_MspInit+0x24>)
 800da32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da34:	4b06      	ldr	r3, [pc, #24]	@ (800da50 <HAL_MspInit+0x24>)
 800da36:	2101      	movs	r1, #1
 800da38:	430a      	orrs	r2, r1
 800da3a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800da3c:	4b04      	ldr	r3, [pc, #16]	@ (800da50 <HAL_MspInit+0x24>)
 800da3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da40:	4b03      	ldr	r3, [pc, #12]	@ (800da50 <HAL_MspInit+0x24>)
 800da42:	2180      	movs	r1, #128	@ 0x80
 800da44:	0549      	lsls	r1, r1, #21
 800da46:	430a      	orrs	r2, r1
 800da48:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da4a:	46c0      	nop			@ (mov r8, r8)
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	40021000 	.word	0x40021000

0800da54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800da58:	46c0      	nop			@ (mov r8, r8)
 800da5a:	e7fd      	b.n	800da58 <NMI_Handler+0x4>

0800da5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da60:	46c0      	nop			@ (mov r8, r8)
 800da62:	e7fd      	b.n	800da60 <HardFault_Handler+0x4>

0800da64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800da68:	46c0      	nop			@ (mov r8, r8)
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800da72:	46c0      	nop			@ (mov r8, r8)
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da7c:	f001 f950 	bl	800ed20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service ();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800da80:	46c0      	nop			@ (mov r8, r8)
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800da8c:	4b03      	ldr	r3, [pc, #12]	@ (800da9c <RTC_IRQHandler+0x14>)
 800da8e:	0018      	movs	r0, r3
 800da90:	f008 fe76 	bl	8016780 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800da94:	46c0      	nop			@ (mov r8, r8)
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	20001040 	.word	0x20001040

0800daa0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800daa4:	2380      	movs	r3, #128	@ 0x80
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	0018      	movs	r0, r3
 800daaa:	f002 fbf9 	bl	80102a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800daae:	46c0      	nop			@ (mov r8, r8)
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dab8:	4b05      	ldr	r3, [pc, #20]	@ (800dad0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800daba:	0018      	movs	r0, r3
 800dabc:	f001 ff81 	bl	800f9c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dac0:	4b04      	ldr	r3, [pc, #16]	@ (800dad4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800dac2:	0018      	movs	r0, r3
 800dac4:	f001 ff7d 	bl	800f9c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800dac8:	46c0      	nop			@ (mov r8, r8)
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	46c0      	nop			@ (mov r8, r8)
 800dad0:	20000ee4 	.word	0x20000ee4
 800dad4:	20000e9c 	.word	0x20000e9c

0800dad8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800dadc:	4b07      	ldr	r3, [pc, #28]	@ (800dafc <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800dade:	0018      	movs	r0, r3
 800dae0:	f001 ff6f 	bl	800f9c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800dae4:	4b06      	ldr	r3, [pc, #24]	@ (800db00 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800dae6:	0018      	movs	r0, r3
 800dae8:	f001 ff6b 	bl	800f9c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800daec:	4b05      	ldr	r3, [pc, #20]	@ (800db04 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800daee:	0018      	movs	r0, r3
 800daf0:	f001 ff67 	bl	800f9c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800daf4:	46c0      	nop			@ (mov r8, r8)
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	46c0      	nop			@ (mov r8, r8)
 800dafc:	20000f68 	.word	0x20000f68
 800db00:	20002304 	.word	0x20002304
 800db04:	2000234c 	.word	0x2000234c

0800db08 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800db0c:	4b03      	ldr	r3, [pc, #12]	@ (800db1c <USART4_5_IRQHandler+0x14>)
 800db0e:	0018      	movs	r0, r3
 800db10:	f009 fd30 	bl	8017574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800db14:	46c0      	nop			@ (mov r8, r8)
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	46c0      	nop			@ (mov r8, r8)
 800db1c:	2000224c 	.word	0x2000224c

0800db20 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800db24:	4b09      	ldr	r3, [pc, #36]	@ (800db4c <I2C1_IRQHandler+0x2c>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	699a      	ldr	r2, [r3, #24]
 800db2a:	23e0      	movs	r3, #224	@ 0xe0
 800db2c:	00db      	lsls	r3, r3, #3
 800db2e:	4013      	ands	r3, r2
 800db30:	d004      	beq.n	800db3c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800db32:	4b06      	ldr	r3, [pc, #24]	@ (800db4c <I2C1_IRQHandler+0x2c>)
 800db34:	0018      	movs	r0, r3
 800db36:	f003 f89b 	bl	8010c70 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800db3a:	e003      	b.n	800db44 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800db3c:	4b03      	ldr	r3, [pc, #12]	@ (800db4c <I2C1_IRQHandler+0x2c>)
 800db3e:	0018      	movs	r0, r3
 800db40:	f003 f87c 	bl	8010c3c <HAL_I2C_EV_IRQHandler>
}
 800db44:	46c0      	nop			@ (mov r8, r8)
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	46c0      	nop			@ (mov r8, r8)
 800db4c:	20000df4 	.word	0x20000df4

0800db50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800db54:	4b03      	ldr	r3, [pc, #12]	@ (800db64 <USART1_IRQHandler+0x14>)
 800db56:	0018      	movs	r0, r3
 800db58:	f009 fd0c 	bl	8017574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800db5c:	46c0      	nop			@ (mov r8, r8)
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	46c0      	nop			@ (mov r8, r8)
 800db64:	20002194 	.word	0x20002194

0800db68 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800db6c:	4b03      	ldr	r3, [pc, #12]	@ (800db7c <USB_IRQHandler+0x14>)
 800db6e:	0018      	movs	r0, r3
 800db70:	f005 fc5c 	bl	801342c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800db74:	46c0      	nop			@ (mov r8, r8)
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	46c0      	nop			@ (mov r8, r8)
 800db7c:	20003160 	.word	0x20003160

0800db80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
  return 1;
 800db84:	2301      	movs	r3, #1
}
 800db86:	0018      	movs	r0, r3
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <_kill>:

int _kill(int pid, int sig)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800db96:	f012 fbd1 	bl	802033c <__errno>
 800db9a:	0003      	movs	r3, r0
 800db9c:	2216      	movs	r2, #22
 800db9e:	601a      	str	r2, [r3, #0]
  return -1;
 800dba0:	2301      	movs	r3, #1
 800dba2:	425b      	negs	r3, r3
}
 800dba4:	0018      	movs	r0, r3
 800dba6:	46bd      	mov	sp, r7
 800dba8:	b002      	add	sp, #8
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_exit>:

void _exit (int status)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	425a      	negs	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	0011      	movs	r1, r2
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	f7ff ffe5 	bl	800db8c <_kill>
  while (1) {}    /* Make sure we hang here */
 800dbc2:	46c0      	nop			@ (mov r8, r8)
 800dbc4:	e7fd      	b.n	800dbc2 <_exit+0x16>

0800dbc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b086      	sub	sp, #24
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e00a      	b.n	800dbee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dbd8:	e000      	b.n	800dbdc <_read+0x16>
 800dbda:	bf00      	nop
 800dbdc:	0001      	movs	r1, r0
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	60ba      	str	r2, [r7, #8]
 800dbe4:	b2ca      	uxtb	r2, r1
 800dbe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	3301      	adds	r3, #1
 800dbec:	617b      	str	r3, [r7, #20]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	dbf0      	blt.n	800dbd8 <_read+0x12>
  }

  return len;
 800dbf6:	687b      	ldr	r3, [r7, #4]
}
 800dbf8:	0018      	movs	r0, r3
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	b006      	add	sp, #24
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_close>:
  }
  return len;
}

int _close(int file)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	425b      	negs	r3, r3
}
 800dc0c:	0018      	movs	r0, r3
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	b002      	add	sp, #8
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2280      	movs	r2, #128	@ 0x80
 800dc22:	0192      	lsls	r2, r2, #6
 800dc24:	605a      	str	r2, [r3, #4]
  return 0;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	0018      	movs	r0, r3
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	b002      	add	sp, #8
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <_isatty>:

int _isatty(int file)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800dc38:	2301      	movs	r3, #1
}
 800dc3a:	0018      	movs	r0, r3
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	b002      	add	sp, #8
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	0018      	movs	r0, r3
 800dc52:	46bd      	mov	sp, r7
 800dc54:	b004      	add	sp, #16
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dc60:	4a14      	ldr	r2, [pc, #80]	@ (800dcb4 <_sbrk+0x5c>)
 800dc62:	4b15      	ldr	r3, [pc, #84]	@ (800dcb8 <_sbrk+0x60>)
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dc6c:	4b13      	ldr	r3, [pc, #76]	@ (800dcbc <_sbrk+0x64>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dc74:	4b11      	ldr	r3, [pc, #68]	@ (800dcbc <_sbrk+0x64>)
 800dc76:	4a12      	ldr	r2, [pc, #72]	@ (800dcc0 <_sbrk+0x68>)
 800dc78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dc7a:	4b10      	ldr	r3, [pc, #64]	@ (800dcbc <_sbrk+0x64>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	18d3      	adds	r3, r2, r3
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d207      	bcs.n	800dc98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dc88:	f012 fb58 	bl	802033c <__errno>
 800dc8c:	0003      	movs	r3, r0
 800dc8e:	220c      	movs	r2, #12
 800dc90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	425b      	negs	r3, r3
 800dc96:	e009      	b.n	800dcac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dc98:	4b08      	ldr	r3, [pc, #32]	@ (800dcbc <_sbrk+0x64>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dc9e:	4b07      	ldr	r3, [pc, #28]	@ (800dcbc <_sbrk+0x64>)
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	18d2      	adds	r2, r2, r3
 800dca6:	4b05      	ldr	r3, [pc, #20]	@ (800dcbc <_sbrk+0x64>)
 800dca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
}
 800dcac:	0018      	movs	r0, r3
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	b006      	add	sp, #24
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20005000 	.word	0x20005000
 800dcb8:	00000400 	.word	0x00000400
 800dcbc:	20002018 	.word	0x20002018
 800dcc0:	200037c0 	.word	0x200037c0

0800dcc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dcc8:	46c0      	nop			@ (mov r8, r8)
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
	...

0800dcd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcd6:	2310      	movs	r3, #16
 800dcd8:	18fb      	adds	r3, r7, r3
 800dcda:	0018      	movs	r0, r3
 800dcdc:	2308      	movs	r3, #8
 800dcde:	001a      	movs	r2, r3
 800dce0:	2100      	movs	r1, #0
 800dce2:	f012 fa87 	bl	80201f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dce6:	003b      	movs	r3, r7
 800dce8:	0018      	movs	r0, r3
 800dcea:	2310      	movs	r3, #16
 800dcec:	001a      	movs	r2, r3
 800dcee:	2100      	movs	r1, #0
 800dcf0:	f012 fa80 	bl	80201f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dcf4:	4b2e      	ldr	r3, [pc, #184]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dcf6:	2280      	movs	r2, #128	@ 0x80
 800dcf8:	05d2      	lsls	r2, r2, #23
 800dcfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dcfc:	4b2c      	ldr	r3, [pc, #176]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd02:	4b2b      	ldr	r3, [pc, #172]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dd08:	4b29      	ldr	r3, [pc, #164]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd0a:	4a2a      	ldr	r2, [pc, #168]	@ (800ddb4 <MX_TIM2_Init+0xe4>)
 800dd0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd0e:	4b28      	ldr	r3, [pc, #160]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd14:	4b26      	ldr	r3, [pc, #152]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dd1a:	4b25      	ldr	r3, [pc, #148]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	f008 fe3d 	bl	801699c <HAL_TIM_PWM_Init>
 800dd22:	1e03      	subs	r3, r0, #0
 800dd24:	d001      	beq.n	800dd2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800dd26:	f7fa faf1 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd2a:	2110      	movs	r1, #16
 800dd2c:	187b      	adds	r3, r7, r1
 800dd2e:	2200      	movs	r2, #0
 800dd30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd32:	187b      	adds	r3, r7, r1
 800dd34:	2200      	movs	r2, #0
 800dd36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dd38:	187a      	adds	r2, r7, r1
 800dd3a:	4b1d      	ldr	r3, [pc, #116]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd3c:	0011      	movs	r1, r2
 800dd3e:	0018      	movs	r0, r3
 800dd40:	f009 f94a 	bl	8016fd8 <HAL_TIMEx_MasterConfigSynchronization>
 800dd44:	1e03      	subs	r3, r0, #0
 800dd46:	d001      	beq.n	800dd4c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dd48:	f7fa fae0 	bl	800830c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd4c:	003b      	movs	r3, r7
 800dd4e:	2260      	movs	r2, #96	@ 0x60
 800dd50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dd52:	003b      	movs	r3, r7
 800dd54:	2200      	movs	r2, #0
 800dd56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd58:	003b      	movs	r3, r7
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd5e:	003b      	movs	r3, r7
 800dd60:	2200      	movs	r2, #0
 800dd62:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd64:	0039      	movs	r1, r7
 800dd66:	4b12      	ldr	r3, [pc, #72]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd68:	2200      	movs	r2, #0
 800dd6a:	0018      	movs	r0, r3
 800dd6c:	f008 fee8 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800dd70:	1e03      	subs	r3, r0, #0
 800dd72:	d001      	beq.n	800dd78 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dd74:	f7fa faca 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dd78:	0039      	movs	r1, r7
 800dd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd7c:	2208      	movs	r2, #8
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f008 fede 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800dd84:	1e03      	subs	r3, r0, #0
 800dd86:	d001      	beq.n	800dd8c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dd88:	f7fa fac0 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dd8c:	0039      	movs	r1, r7
 800dd8e:	4b08      	ldr	r3, [pc, #32]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dd90:	220c      	movs	r2, #12
 800dd92:	0018      	movs	r0, r3
 800dd94:	f008 fed4 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800dd98:	1e03      	subs	r3, r0, #0
 800dd9a:	d001      	beq.n	800dda0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dd9c:	f7fa fab6 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dda0:	4b03      	ldr	r3, [pc, #12]	@ (800ddb0 <MX_TIM2_Init+0xe0>)
 800dda2:	0018      	movs	r0, r3
 800dda4:	f000 f8fe 	bl	800dfa4 <HAL_TIM_MspPostInit>

}
 800dda8:	46c0      	nop			@ (mov r8, r8)
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	b006      	add	sp, #24
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	2000201c 	.word	0x2000201c
 800ddb4:	0000ffff 	.word	0x0000ffff

0800ddb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddbe:	2310      	movs	r3, #16
 800ddc0:	18fb      	adds	r3, r7, r3
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	001a      	movs	r2, r3
 800ddc8:	2100      	movs	r1, #0
 800ddca:	f012 fa13 	bl	80201f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ddce:	003b      	movs	r3, r7
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	2310      	movs	r3, #16
 800ddd4:	001a      	movs	r2, r3
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	f012 fa0c 	bl	80201f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dddc:	4b32      	ldr	r3, [pc, #200]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800ddde:	4a33      	ldr	r2, [pc, #204]	@ (800deac <MX_TIM3_Init+0xf4>)
 800dde0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dde2:	4b31      	ldr	r3, [pc, #196]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dde8:	4b2f      	ldr	r3, [pc, #188]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ddee:	4b2e      	ldr	r3, [pc, #184]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800ddf0:	4a2f      	ldr	r2, [pc, #188]	@ (800deb0 <MX_TIM3_Init+0xf8>)
 800ddf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddf4:	4b2c      	ldr	r3, [pc, #176]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddfa:	4b2b      	ldr	r3, [pc, #172]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800de00:	4b29      	ldr	r3, [pc, #164]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de02:	0018      	movs	r0, r3
 800de04:	f008 fdca 	bl	801699c <HAL_TIM_PWM_Init>
 800de08:	1e03      	subs	r3, r0, #0
 800de0a:	d001      	beq.n	800de10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800de0c:	f7fa fa7e 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de10:	2110      	movs	r1, #16
 800de12:	187b      	adds	r3, r7, r1
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de18:	187b      	adds	r3, r7, r1
 800de1a:	2200      	movs	r2, #0
 800de1c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800de1e:	187a      	adds	r2, r7, r1
 800de20:	4b21      	ldr	r3, [pc, #132]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de22:	0011      	movs	r1, r2
 800de24:	0018      	movs	r0, r3
 800de26:	f009 f8d7 	bl	8016fd8 <HAL_TIMEx_MasterConfigSynchronization>
 800de2a:	1e03      	subs	r3, r0, #0
 800de2c:	d001      	beq.n	800de32 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800de2e:	f7fa fa6d 	bl	800830c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800de32:	003b      	movs	r3, r7
 800de34:	2260      	movs	r2, #96	@ 0x60
 800de36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800de38:	003b      	movs	r3, r7
 800de3a:	2200      	movs	r2, #0
 800de3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800de3e:	003b      	movs	r3, r7
 800de40:	2200      	movs	r2, #0
 800de42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800de44:	003b      	movs	r3, r7
 800de46:	2200      	movs	r2, #0
 800de48:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800de4a:	0039      	movs	r1, r7
 800de4c:	4b16      	ldr	r3, [pc, #88]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de4e:	2200      	movs	r2, #0
 800de50:	0018      	movs	r0, r3
 800de52:	f008 fe75 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800de56:	1e03      	subs	r3, r0, #0
 800de58:	d001      	beq.n	800de5e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800de5a:	f7fa fa57 	bl	800830c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800de5e:	4b12      	ldr	r3, [pc, #72]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de60:	2104      	movs	r1, #4
 800de62:	0018      	movs	r0, r3
 800de64:	f009 f916 	bl	8017094 <HAL_TIMEx_RemapConfig>
 800de68:	1e03      	subs	r3, r0, #0
 800de6a:	d001      	beq.n	800de70 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800de6c:	f7fa fa4e 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800de70:	0039      	movs	r1, r7
 800de72:	4b0d      	ldr	r3, [pc, #52]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de74:	2204      	movs	r2, #4
 800de76:	0018      	movs	r0, r3
 800de78:	f008 fe62 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800de7c:	1e03      	subs	r3, r0, #0
 800de7e:	d001      	beq.n	800de84 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800de80:	f7fa fa44 	bl	800830c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800de84:	0039      	movs	r1, r7
 800de86:	4b08      	ldr	r3, [pc, #32]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de88:	2208      	movs	r2, #8
 800de8a:	0018      	movs	r0, r3
 800de8c:	f008 fe58 	bl	8016b40 <HAL_TIM_PWM_ConfigChannel>
 800de90:	1e03      	subs	r3, r0, #0
 800de92:	d001      	beq.n	800de98 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800de94:	f7fa fa3a 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800de98:	4b03      	ldr	r3, [pc, #12]	@ (800dea8 <MX_TIM3_Init+0xf0>)
 800de9a:	0018      	movs	r0, r3
 800de9c:	f000 f882 	bl	800dfa4 <HAL_TIM_MspPostInit>

}
 800dea0:	46c0      	nop			@ (mov r8, r8)
 800dea2:	46bd      	mov	sp, r7
 800dea4:	b006      	add	sp, #24
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2000205c 	.word	0x2000205c
 800deac:	40000400 	.word	0x40000400
 800deb0:	0000ffff 	.word	0x0000ffff

0800deb4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800deba:	003b      	movs	r3, r7
 800debc:	0018      	movs	r0, r3
 800debe:	2308      	movs	r3, #8
 800dec0:	001a      	movs	r2, r3
 800dec2:	2100      	movs	r1, #0
 800dec4:	f012 f996 	bl	80201f4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800dec8:	4b15      	ldr	r3, [pc, #84]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800deca:	4a16      	ldr	r2, [pc, #88]	@ (800df24 <MX_TIM6_Init+0x70>)
 800decc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800dece:	4b14      	ldr	r3, [pc, #80]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800ded0:	220a      	movs	r2, #10
 800ded2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ded4:	4b12      	ldr	r3, [pc, #72]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800deda:	4b11      	ldr	r3, [pc, #68]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800dedc:	4a12      	ldr	r2, [pc, #72]	@ (800df28 <MX_TIM6_Init+0x74>)
 800dede:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dee0:	4b0f      	ldr	r3, [pc, #60]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800dee6:	4b0e      	ldr	r3, [pc, #56]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800dee8:	0018      	movs	r0, r3
 800deea:	f008 fcaf 	bl	801684c <HAL_TIM_Base_Init>
 800deee:	1e03      	subs	r3, r0, #0
 800def0:	d001      	beq.n	800def6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800def2:	f7fa fa0b 	bl	800830c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800def6:	003b      	movs	r3, r7
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800defc:	003b      	movs	r3, r7
 800defe:	2200      	movs	r2, #0
 800df00:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800df02:	003a      	movs	r2, r7
 800df04:	4b06      	ldr	r3, [pc, #24]	@ (800df20 <MX_TIM6_Init+0x6c>)
 800df06:	0011      	movs	r1, r2
 800df08:	0018      	movs	r0, r3
 800df0a:	f009 f865 	bl	8016fd8 <HAL_TIMEx_MasterConfigSynchronization>
 800df0e:	1e03      	subs	r3, r0, #0
 800df10:	d001      	beq.n	800df16 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800df12:	f7fa f9fb 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800df16:	46c0      	nop			@ (mov r8, r8)
 800df18:	46bd      	mov	sp, r7
 800df1a:	b002      	add	sp, #8
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	46c0      	nop			@ (mov r8, r8)
 800df20:	2000209c 	.word	0x2000209c
 800df24:	40001000 	.word	0x40001000
 800df28:	0000ffff 	.word	0x0000ffff

0800df2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	2380      	movs	r3, #128	@ 0x80
 800df3a:	05db      	lsls	r3, r3, #23
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d106      	bne.n	800df4e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800df40:	4b0a      	ldr	r3, [pc, #40]	@ (800df6c <HAL_TIM_PWM_MspInit+0x40>)
 800df42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df44:	4b09      	ldr	r3, [pc, #36]	@ (800df6c <HAL_TIM_PWM_MspInit+0x40>)
 800df46:	2101      	movs	r1, #1
 800df48:	430a      	orrs	r2, r1
 800df4a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800df4c:	e00a      	b.n	800df64 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a07      	ldr	r2, [pc, #28]	@ (800df70 <HAL_TIM_PWM_MspInit+0x44>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d105      	bne.n	800df64 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800df58:	4b04      	ldr	r3, [pc, #16]	@ (800df6c <HAL_TIM_PWM_MspInit+0x40>)
 800df5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df5c:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <HAL_TIM_PWM_MspInit+0x40>)
 800df5e:	2102      	movs	r1, #2
 800df60:	430a      	orrs	r2, r1
 800df62:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800df64:	46c0      	nop			@ (mov r8, r8)
 800df66:	46bd      	mov	sp, r7
 800df68:	b002      	add	sp, #8
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	40021000 	.word	0x40021000
 800df70:	40000400 	.word	0x40000400

0800df74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a06      	ldr	r2, [pc, #24]	@ (800df9c <HAL_TIM_Base_MspInit+0x28>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d105      	bne.n	800df92 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800df86:	4b06      	ldr	r3, [pc, #24]	@ (800dfa0 <HAL_TIM_Base_MspInit+0x2c>)
 800df88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df8a:	4b05      	ldr	r3, [pc, #20]	@ (800dfa0 <HAL_TIM_Base_MspInit+0x2c>)
 800df8c:	2110      	movs	r1, #16
 800df8e:	430a      	orrs	r2, r1
 800df90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800df92:	46c0      	nop			@ (mov r8, r8)
 800df94:	46bd      	mov	sp, r7
 800df96:	b002      	add	sp, #8
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	46c0      	nop			@ (mov r8, r8)
 800df9c:	40001000 	.word	0x40001000
 800dfa0:	40021000 	.word	0x40021000

0800dfa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800dfa4:	b590      	push	{r4, r7, lr}
 800dfa6:	b08b      	sub	sp, #44	@ 0x2c
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfac:	2414      	movs	r4, #20
 800dfae:	193b      	adds	r3, r7, r4
 800dfb0:	0018      	movs	r0, r3
 800dfb2:	2314      	movs	r3, #20
 800dfb4:	001a      	movs	r2, r3
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	f012 f91c 	bl	80201f4 <memset>
  if(timHandle->Instance==TIM2)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	2380      	movs	r3, #128	@ 0x80
 800dfc2:	05db      	lsls	r3, r3, #23
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d123      	bne.n	800e010 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfc8:	4b27      	ldr	r3, [pc, #156]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800dfca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfcc:	4b26      	ldr	r3, [pc, #152]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800dfce:	2101      	movs	r1, #1
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800dfd4:	4b24      	ldr	r3, [pc, #144]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800dfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd8:	2201      	movs	r2, #1
 800dfda:	4013      	ands	r3, r2
 800dfdc:	613b      	str	r3, [r7, #16]
 800dfde:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800dfe0:	0021      	movs	r1, r4
 800dfe2:	187b      	adds	r3, r7, r1
 800dfe4:	220d      	movs	r2, #13
 800dfe6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfe8:	187b      	adds	r3, r7, r1
 800dfea:	2202      	movs	r2, #2
 800dfec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfee:	187b      	adds	r3, r7, r1
 800dff0:	2200      	movs	r2, #0
 800dff2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dff4:	187b      	adds	r3, r7, r1
 800dff6:	2200      	movs	r2, #0
 800dff8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800dffa:	187b      	adds	r3, r7, r1
 800dffc:	2202      	movs	r2, #2
 800dffe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e000:	187a      	adds	r2, r7, r1
 800e002:	23a0      	movs	r3, #160	@ 0xa0
 800e004:	05db      	lsls	r3, r3, #23
 800e006:	0011      	movs	r1, r2
 800e008:	0018      	movs	r0, r3
 800e00a:	f001 ff91 	bl	800ff30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e00e:	e027      	b.n	800e060 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a15      	ldr	r2, [pc, #84]	@ (800e06c <HAL_TIM_MspPostInit+0xc8>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d122      	bne.n	800e060 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e01a:	4b13      	ldr	r3, [pc, #76]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800e01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e01e:	4b12      	ldr	r3, [pc, #72]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800e020:	2104      	movs	r1, #4
 800e022:	430a      	orrs	r2, r1
 800e024:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e026:	4b10      	ldr	r3, [pc, #64]	@ (800e068 <HAL_TIM_MspPostInit+0xc4>)
 800e028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e02a:	2204      	movs	r2, #4
 800e02c:	4013      	ands	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e032:	2114      	movs	r1, #20
 800e034:	187b      	adds	r3, r7, r1
 800e036:	22e0      	movs	r2, #224	@ 0xe0
 800e038:	0052      	lsls	r2, r2, #1
 800e03a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e03c:	187b      	adds	r3, r7, r1
 800e03e:	2202      	movs	r2, #2
 800e040:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e042:	187b      	adds	r3, r7, r1
 800e044:	2200      	movs	r2, #0
 800e046:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e048:	187b      	adds	r3, r7, r1
 800e04a:	2200      	movs	r2, #0
 800e04c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e04e:	187b      	adds	r3, r7, r1
 800e050:	2202      	movs	r2, #2
 800e052:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e054:	187b      	adds	r3, r7, r1
 800e056:	4a06      	ldr	r2, [pc, #24]	@ (800e070 <HAL_TIM_MspPostInit+0xcc>)
 800e058:	0019      	movs	r1, r3
 800e05a:	0010      	movs	r0, r2
 800e05c:	f001 ff68 	bl	800ff30 <HAL_GPIO_Init>
}
 800e060:	46c0      	nop			@ (mov r8, r8)
 800e062:	46bd      	mov	sp, r7
 800e064:	b00b      	add	sp, #44	@ 0x2c
 800e066:	bd90      	pop	{r4, r7, pc}
 800e068:	40021000 	.word	0x40021000
 800e06c:	40000400 	.word	0x40000400
 800e070:	50000800 	.word	0x50000800

0800e074 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e078:	4b17      	ldr	r3, [pc, #92]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e07a:	4a18      	ldr	r2, [pc, #96]	@ (800e0dc <MX_LPUART1_UART_Init+0x68>)
 800e07c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e07e:	4b16      	ldr	r3, [pc, #88]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e080:	22e1      	movs	r2, #225	@ 0xe1
 800e082:	0252      	lsls	r2, r2, #9
 800e084:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e086:	4b14      	ldr	r3, [pc, #80]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e088:	2200      	movs	r2, #0
 800e08a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e08c:	4b12      	ldr	r3, [pc, #72]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e08e:	2200      	movs	r2, #0
 800e090:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e092:	4b11      	ldr	r3, [pc, #68]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e094:	2200      	movs	r2, #0
 800e096:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e098:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e09a:	220c      	movs	r2, #12
 800e09c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e09e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0ac:	2218      	movs	r2, #24
 800e0ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e0b0:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0b2:	2280      	movs	r2, #128	@ 0x80
 800e0b4:	0212      	lsls	r2, r2, #8
 800e0b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e0b8:	4b07      	ldr	r3, [pc, #28]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0ba:	2280      	movs	r2, #128	@ 0x80
 800e0bc:	0152      	lsls	r2, r2, #5
 800e0be:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e0c0:	4b05      	ldr	r3, [pc, #20]	@ (800e0d8 <MX_LPUART1_UART_Init+0x64>)
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f009 f804 	bl	80170d0 <HAL_UART_Init>
 800e0c8:	1e03      	subs	r3, r0, #0
 800e0ca:	d001      	beq.n	800e0d0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e0cc:	f7fa f91e 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e0d0:	46c0      	nop			@ (mov r8, r8)
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	46c0      	nop			@ (mov r8, r8)
 800e0d8:	200020dc 	.word	0x200020dc
 800e0dc:	40004800 	.word	0x40004800

0800e0e0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e0e4:	4b16      	ldr	r3, [pc, #88]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e0e6:	4a17      	ldr	r2, [pc, #92]	@ (800e144 <MX_USART1_UART_Init+0x64>)
 800e0e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e0ea:	4b15      	ldr	r3, [pc, #84]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e0ec:	22e1      	movs	r2, #225	@ 0xe1
 800e0ee:	0252      	lsls	r2, r2, #9
 800e0f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e0f2:	4b13      	ldr	r3, [pc, #76]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e0f8:	4b11      	ldr	r3, [pc, #68]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e0fe:	4b10      	ldr	r3, [pc, #64]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e100:	2200      	movs	r2, #0
 800e102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e104:	4b0e      	ldr	r3, [pc, #56]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e106:	220c      	movs	r2, #12
 800e108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e10a:	4b0d      	ldr	r3, [pc, #52]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e110:	4b0b      	ldr	r3, [pc, #44]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e112:	2200      	movs	r2, #0
 800e114:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e116:	4b0a      	ldr	r3, [pc, #40]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e118:	2200      	movs	r2, #0
 800e11a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e11c:	4b08      	ldr	r3, [pc, #32]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e11e:	2208      	movs	r2, #8
 800e120:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e122:	4b07      	ldr	r3, [pc, #28]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e124:	2280      	movs	r2, #128	@ 0x80
 800e126:	0212      	lsls	r2, r2, #8
 800e128:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e12a:	4b05      	ldr	r3, [pc, #20]	@ (800e140 <MX_USART1_UART_Init+0x60>)
 800e12c:	0018      	movs	r0, r3
 800e12e:	f008 ffcf 	bl	80170d0 <HAL_UART_Init>
 800e132:	1e03      	subs	r3, r0, #0
 800e134:	d001      	beq.n	800e13a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e136:	f7fa f8e9 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e13a:	46c0      	nop			@ (mov r8, r8)
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	20002194 	.word	0x20002194
 800e144:	40013800 	.word	0x40013800

0800e148 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e14c:	4b14      	ldr	r3, [pc, #80]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e14e:	4a15      	ldr	r2, [pc, #84]	@ (800e1a4 <MX_USART4_UART_Init+0x5c>)
 800e150:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e152:	4b13      	ldr	r3, [pc, #76]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e154:	22e1      	movs	r2, #225	@ 0xe1
 800e156:	0252      	lsls	r2, r2, #9
 800e158:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e15a:	4b11      	ldr	r3, [pc, #68]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e160:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e162:	2200      	movs	r2, #0
 800e164:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e166:	4b0e      	ldr	r3, [pc, #56]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e168:	2200      	movs	r2, #0
 800e16a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e16c:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e16e:	220c      	movs	r2, #12
 800e170:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e172:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e174:	2200      	movs	r2, #0
 800e176:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e178:	4b09      	ldr	r3, [pc, #36]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e17e:	4b08      	ldr	r3, [pc, #32]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e180:	2200      	movs	r2, #0
 800e182:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e184:	4b06      	ldr	r3, [pc, #24]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e186:	2200      	movs	r2, #0
 800e188:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e18a:	4b05      	ldr	r3, [pc, #20]	@ (800e1a0 <MX_USART4_UART_Init+0x58>)
 800e18c:	0018      	movs	r0, r3
 800e18e:	f008 ff9f 	bl	80170d0 <HAL_UART_Init>
 800e192:	1e03      	subs	r3, r0, #0
 800e194:	d001      	beq.n	800e19a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e196:	f7fa f8b9 	bl	800830c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e19a:	46c0      	nop			@ (mov r8, r8)
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	2000224c 	.word	0x2000224c
 800e1a4:	40004c00 	.word	0x40004c00

0800e1a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e1a8:	b590      	push	{r4, r7, lr}
 800e1aa:	b08d      	sub	sp, #52	@ 0x34
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1b0:	241c      	movs	r4, #28
 800e1b2:	193b      	adds	r3, r7, r4
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	2314      	movs	r3, #20
 800e1b8:	001a      	movs	r2, r3
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	f012 f81a 	bl	80201f4 <memset>
  if(uartHandle->Instance==LPUART1)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a8b      	ldr	r2, [pc, #556]	@ (800e3f4 <HAL_UART_MspInit+0x24c>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d129      	bne.n	800e21e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e1ca:	4b8b      	ldr	r3, [pc, #556]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1ce:	4b8a      	ldr	r3, [pc, #552]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e1d0:	2180      	movs	r1, #128	@ 0x80
 800e1d2:	02c9      	lsls	r1, r1, #11
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1d8:	4b87      	ldr	r3, [pc, #540]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1dc:	4b86      	ldr	r3, [pc, #536]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e1de:	2104      	movs	r1, #4
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1e4:	4b84      	ldr	r3, [pc, #528]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	61bb      	str	r3, [r7, #24]
 800e1ee:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e1f0:	0021      	movs	r1, r4
 800e1f2:	187b      	adds	r3, r7, r1
 800e1f4:	2203      	movs	r2, #3
 800e1f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1f8:	187b      	adds	r3, r7, r1
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1fe:	187b      	adds	r3, r7, r1
 800e200:	2200      	movs	r2, #0
 800e202:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e204:	187b      	adds	r3, r7, r1
 800e206:	2203      	movs	r2, #3
 800e208:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e20a:	187b      	adds	r3, r7, r1
 800e20c:	2206      	movs	r2, #6
 800e20e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e210:	187b      	adds	r3, r7, r1
 800e212:	4a7a      	ldr	r2, [pc, #488]	@ (800e3fc <HAL_UART_MspInit+0x254>)
 800e214:	0019      	movs	r1, r3
 800e216:	0010      	movs	r0, r2
 800e218:	f001 fe8a 	bl	800ff30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e21c:	e0e5      	b.n	800e3ea <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a77      	ldr	r2, [pc, #476]	@ (800e400 <HAL_UART_MspInit+0x258>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d133      	bne.n	800e290 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e228:	4b73      	ldr	r3, [pc, #460]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e22a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e22c:	4b72      	ldr	r3, [pc, #456]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e22e:	2180      	movs	r1, #128	@ 0x80
 800e230:	01c9      	lsls	r1, r1, #7
 800e232:	430a      	orrs	r2, r1
 800e234:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e236:	4b70      	ldr	r3, [pc, #448]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e23a:	4b6f      	ldr	r3, [pc, #444]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e23c:	2101      	movs	r1, #1
 800e23e:	430a      	orrs	r2, r1
 800e240:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e242:	4b6d      	ldr	r3, [pc, #436]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e246:	2201      	movs	r2, #1
 800e248:	4013      	ands	r3, r2
 800e24a:	617b      	str	r3, [r7, #20]
 800e24c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e24e:	211c      	movs	r1, #28
 800e250:	187b      	adds	r3, r7, r1
 800e252:	22c0      	movs	r2, #192	@ 0xc0
 800e254:	00d2      	lsls	r2, r2, #3
 800e256:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e258:	187b      	adds	r3, r7, r1
 800e25a:	2202      	movs	r2, #2
 800e25c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e25e:	187b      	adds	r3, r7, r1
 800e260:	2200      	movs	r2, #0
 800e262:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e264:	187b      	adds	r3, r7, r1
 800e266:	2203      	movs	r2, #3
 800e268:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e26a:	187b      	adds	r3, r7, r1
 800e26c:	2204      	movs	r2, #4
 800e26e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e270:	187a      	adds	r2, r7, r1
 800e272:	23a0      	movs	r3, #160	@ 0xa0
 800e274:	05db      	lsls	r3, r3, #23
 800e276:	0011      	movs	r1, r2
 800e278:	0018      	movs	r0, r3
 800e27a:	f001 fe59 	bl	800ff30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e27e:	2200      	movs	r2, #0
 800e280:	2100      	movs	r1, #0
 800e282:	201b      	movs	r0, #27
 800e284:	f001 fa02 	bl	800f68c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e288:	201b      	movs	r0, #27
 800e28a:	f001 fa14 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
}
 800e28e:	e0ac      	b.n	800e3ea <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a5b      	ldr	r2, [pc, #364]	@ (800e404 <HAL_UART_MspInit+0x25c>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d000      	beq.n	800e29c <HAL_UART_MspInit+0xf4>
 800e29a:	e0a6      	b.n	800e3ea <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e29c:	4b56      	ldr	r3, [pc, #344]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e29e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2a0:	4b55      	ldr	r3, [pc, #340]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2a2:	2180      	movs	r1, #128	@ 0x80
 800e2a4:	0309      	lsls	r1, r1, #12
 800e2a6:	430a      	orrs	r2, r1
 800e2a8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2aa:	4b53      	ldr	r3, [pc, #332]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ae:	4b52      	ldr	r3, [pc, #328]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	430a      	orrs	r2, r1
 800e2b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e2b6:	4b50      	ldr	r3, [pc, #320]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	4013      	ands	r3, r2
 800e2be:	613b      	str	r3, [r7, #16]
 800e2c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e2c2:	4b4d      	ldr	r3, [pc, #308]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c6:	4b4c      	ldr	r3, [pc, #304]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2c8:	2104      	movs	r1, #4
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e2ce:	4b4a      	ldr	r3, [pc, #296]	@ (800e3f8 <HAL_UART_MspInit+0x250>)
 800e2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d2:	2204      	movs	r2, #4
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e2da:	241c      	movs	r4, #28
 800e2dc:	193b      	adds	r3, r7, r4
 800e2de:	2202      	movs	r2, #2
 800e2e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2e2:	193b      	adds	r3, r7, r4
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e8:	193b      	adds	r3, r7, r4
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2ee:	193b      	adds	r3, r7, r4
 800e2f0:	2203      	movs	r2, #3
 800e2f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e2f4:	193b      	adds	r3, r7, r4
 800e2f6:	2206      	movs	r2, #6
 800e2f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2fa:	193a      	adds	r2, r7, r4
 800e2fc:	23a0      	movs	r3, #160	@ 0xa0
 800e2fe:	05db      	lsls	r3, r3, #23
 800e300:	0011      	movs	r1, r2
 800e302:	0018      	movs	r0, r3
 800e304:	f001 fe14 	bl	800ff30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e308:	0021      	movs	r1, r4
 800e30a:	187b      	adds	r3, r7, r1
 800e30c:	2280      	movs	r2, #128	@ 0x80
 800e30e:	00d2      	lsls	r2, r2, #3
 800e310:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e312:	187b      	adds	r3, r7, r1
 800e314:	2202      	movs	r2, #2
 800e316:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e318:	187b      	adds	r3, r7, r1
 800e31a:	2200      	movs	r2, #0
 800e31c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e31e:	187b      	adds	r3, r7, r1
 800e320:	2203      	movs	r2, #3
 800e322:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e324:	187b      	adds	r3, r7, r1
 800e326:	2206      	movs	r2, #6
 800e328:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e32a:	187b      	adds	r3, r7, r1
 800e32c:	4a33      	ldr	r2, [pc, #204]	@ (800e3fc <HAL_UART_MspInit+0x254>)
 800e32e:	0019      	movs	r1, r3
 800e330:	0010      	movs	r0, r2
 800e332:	f001 fdfd 	bl	800ff30 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e336:	4b34      	ldr	r3, [pc, #208]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e338:	4a34      	ldr	r2, [pc, #208]	@ (800e40c <HAL_UART_MspInit+0x264>)
 800e33a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e33c:	4b32      	ldr	r3, [pc, #200]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e33e:	220c      	movs	r2, #12
 800e340:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e342:	4b31      	ldr	r3, [pc, #196]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e344:	2200      	movs	r2, #0
 800e346:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e348:	4b2f      	ldr	r3, [pc, #188]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e34e:	4b2e      	ldr	r3, [pc, #184]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e350:	2280      	movs	r2, #128	@ 0x80
 800e352:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e354:	4b2c      	ldr	r3, [pc, #176]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e356:	2200      	movs	r2, #0
 800e358:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e35a:	4b2b      	ldr	r3, [pc, #172]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e360:	4b29      	ldr	r3, [pc, #164]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e362:	2220      	movs	r2, #32
 800e364:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e366:	4b28      	ldr	r3, [pc, #160]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e368:	2200      	movs	r2, #0
 800e36a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e36c:	4b26      	ldr	r3, [pc, #152]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e36e:	0018      	movs	r0, r3
 800e370:	f001 f9c2 	bl	800f6f8 <HAL_DMA_Init>
 800e374:	1e03      	subs	r3, r0, #0
 800e376:	d001      	beq.n	800e37c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e378:	f7f9 ffc8 	bl	800830c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a22      	ldr	r2, [pc, #136]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e380:	675a      	str	r2, [r3, #116]	@ 0x74
 800e382:	4b21      	ldr	r3, [pc, #132]	@ (800e408 <HAL_UART_MspInit+0x260>)
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e388:	4b21      	ldr	r3, [pc, #132]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e38a:	4a22      	ldr	r2, [pc, #136]	@ (800e414 <HAL_UART_MspInit+0x26c>)
 800e38c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e38e:	4b20      	ldr	r3, [pc, #128]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e390:	220c      	movs	r2, #12
 800e392:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e394:	4b1e      	ldr	r3, [pc, #120]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e396:	2210      	movs	r2, #16
 800e398:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e39a:	4b1d      	ldr	r3, [pc, #116]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e3a0:	4b1b      	ldr	r3, [pc, #108]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3a2:	2280      	movs	r2, #128	@ 0x80
 800e3a4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e3a6:	4b1a      	ldr	r3, [pc, #104]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e3ac:	4b18      	ldr	r3, [pc, #96]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e3b2:	4b17      	ldr	r3, [pc, #92]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e3b8:	4b15      	ldr	r3, [pc, #84]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e3be:	4b14      	ldr	r3, [pc, #80]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	f001 f999 	bl	800f6f8 <HAL_DMA_Init>
 800e3c6:	1e03      	subs	r3, r0, #0
 800e3c8:	d001      	beq.n	800e3ce <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e3ca:	f7f9 ff9f 	bl	800830c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a0f      	ldr	r2, [pc, #60]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3d2:	671a      	str	r2, [r3, #112]	@ 0x70
 800e3d4:	4b0e      	ldr	r3, [pc, #56]	@ (800e410 <HAL_UART_MspInit+0x268>)
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2100      	movs	r1, #0
 800e3de:	200e      	movs	r0, #14
 800e3e0:	f001 f954 	bl	800f68c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e3e4:	200e      	movs	r0, #14
 800e3e6:	f001 f966 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
}
 800e3ea:	46c0      	nop			@ (mov r8, r8)
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	b00d      	add	sp, #52	@ 0x34
 800e3f0:	bd90      	pop	{r4, r7, pc}
 800e3f2:	46c0      	nop			@ (mov r8, r8)
 800e3f4:	40004800 	.word	0x40004800
 800e3f8:	40021000 	.word	0x40021000
 800e3fc:	50000800 	.word	0x50000800
 800e400:	40013800 	.word	0x40013800
 800e404:	40004c00 	.word	0x40004c00
 800e408:	20002304 	.word	0x20002304
 800e40c:	4002006c 	.word	0x4002006c
 800e410:	2000234c 	.word	0x2000234c
 800e414:	40020080 	.word	0x40020080

0800e418 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e420:	f000 fc90 	bl	800ed44 <HAL_GetTick>
 800e424:	0003      	movs	r3, r0
 800e426:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e428:	4b1c      	ldr	r3, [pc, #112]	@ (800e49c <TimestampIsReached+0x84>)
 800e42a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e42c:	697a      	ldr	r2, [r7, #20]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d307      	bcc.n	800e444 <TimestampIsReached+0x2c>
 800e434:	697a      	ldr	r2, [r7, #20]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	693a      	ldr	r2, [r7, #16]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d901      	bls.n	800e444 <TimestampIsReached+0x2c>
 800e440:	2201      	movs	r2, #1
 800e442:	e000      	b.n	800e446 <TimestampIsReached+0x2e>
 800e444:	2200      	movs	r2, #0
 800e446:	230f      	movs	r3, #15
 800e448:	18fb      	adds	r3, r7, r3
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	781a      	ldrb	r2, [r3, #0]
 800e44e:	2101      	movs	r1, #1
 800e450:	400a      	ands	r2, r1
 800e452:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e454:	697a      	ldr	r2, [r7, #20]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d207      	bcs.n	800e46c <TimestampIsReached+0x54>
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	429a      	cmp	r2, r3
 800e466:	d201      	bcs.n	800e46c <TimestampIsReached+0x54>
 800e468:	2201      	movs	r2, #1
 800e46a:	e000      	b.n	800e46e <TimestampIsReached+0x56>
 800e46c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e46e:	200e      	movs	r0, #14
 800e470:	183b      	adds	r3, r7, r0
 800e472:	701a      	strb	r2, [r3, #0]
 800e474:	781a      	ldrb	r2, [r3, #0]
 800e476:	2101      	movs	r1, #1
 800e478:	400a      	ands	r2, r1
 800e47a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e47c:	230f      	movs	r3, #15
 800e47e:	18fb      	adds	r3, r7, r3
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d103      	bne.n	800e48e <TimestampIsReached+0x76>
 800e486:	183b      	adds	r3, r7, r0
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e492:	2300      	movs	r3, #0
}
 800e494:	0018      	movs	r0, r3
 800e496:	46bd      	mov	sp, r7
 800e498:	b006      	add	sp, #24
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	7fffffff 	.word	0x7fffffff

0800e4a0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e4a8:	f000 fc4c 	bl	800ed44 <HAL_GetTick>
 800e4ac:	0002      	movs	r2, r0
 800e4ae:	4904      	ldr	r1, [pc, #16]	@ (800e4c0 <AddTimestamp+0x20>)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	0018      	movs	r0, r3
 800e4b4:	f011 fd5a 	bl	801ff6c <siprintf>
}
 800e4b8:	46c0      	nop			@ (mov r8, r8)
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	b002      	add	sp, #8
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	08024fa4 	.word	0x08024fa4

0800e4c4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e4c4:	b40c      	push	{r2, r3}
 800e4c6:	b5b0      	push	{r4, r5, r7, lr}
 800e4c8:	b0a4      	sub	sp, #144	@ 0x90
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	0002      	movs	r2, r0
 800e4ce:	6039      	str	r1, [r7, #0]
 800e4d0:	1dfb      	adds	r3, r7, #7
 800e4d2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e4d4:	4b23      	ldr	r3, [pc, #140]	@ (800e564 <CreateLine+0xa0>)
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	1dfa      	adds	r2, r7, #7
 800e4da:	7812      	ldrb	r2, [r2, #0]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d839      	bhi.n	800e554 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	4921      	ldr	r1, [pc, #132]	@ (800e568 <CreateLine+0xa4>)
 800e4e4:	240c      	movs	r4, #12
 800e4e6:	193b      	adds	r3, r7, r4
 800e4e8:	0018      	movs	r0, r3
 800e4ea:	f011 fd3f 	bl	801ff6c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e4ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e564 <CreateLine+0xa0>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d909      	bls.n	800e50a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e4f6:	193b      	adds	r3, r7, r4
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f7f1 fe37 	bl	800016c <strlen>
 800e4fe:	0002      	movs	r2, r0
 800e500:	193b      	adds	r3, r7, r4
 800e502:	189b      	adds	r3, r3, r2
 800e504:	0018      	movs	r0, r3
 800e506:	f7ff ffcb 	bl	800e4a0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e50a:	240c      	movs	r4, #12
 800e50c:	193b      	adds	r3, r7, r4
 800e50e:	0018      	movs	r0, r3
 800e510:	f7f1 fe2c 	bl	800016c <strlen>
 800e514:	0003      	movs	r3, r0
 800e516:	218c      	movs	r1, #140	@ 0x8c
 800e518:	187a      	adds	r2, r7, r1
 800e51a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e51c:	239c      	movs	r3, #156	@ 0x9c
 800e51e:	2508      	movs	r5, #8
 800e520:	195b      	adds	r3, r3, r5
 800e522:	19db      	adds	r3, r3, r7
 800e524:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e526:	193a      	adds	r2, r7, r4
 800e528:	187b      	adds	r3, r7, r1
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	18d0      	adds	r0, r2, r3
 800e52e:	187b      	adds	r3, r7, r1
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2280      	movs	r2, #128	@ 0x80
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	0019      	movs	r1, r3
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	2298      	movs	r2, #152	@ 0x98
 800e53c:	1952      	adds	r2, r2, r5
 800e53e:	19d2      	adds	r2, r2, r7
 800e540:	6812      	ldr	r2, [r2, #0]
 800e542:	f011 fdab 	bl	802009c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e546:	193a      	adds	r2, r7, r4
 800e548:	4b08      	ldr	r3, [pc, #32]	@ (800e56c <CreateLine+0xa8>)
 800e54a:	0011      	movs	r1, r2
 800e54c:	0018      	movs	r0, r3
 800e54e:	f011 fc9d 	bl	801fe8c <iprintf>
 800e552:	e000      	b.n	800e556 <CreateLine+0x92>
    return;
 800e554:	46c0      	nop			@ (mov r8, r8)
}
 800e556:	46bd      	mov	sp, r7
 800e558:	b024      	add	sp, #144	@ 0x90
 800e55a:	bcb0      	pop	{r4, r5, r7}
 800e55c:	bc08      	pop	{r3}
 800e55e:	b002      	add	sp, #8
 800e560:	4718      	bx	r3
 800e562:	46c0      	nop			@ (mov r8, r8)
 800e564:	200000d8 	.word	0x200000d8
 800e568:	08024fb0 	.word	0x08024fb0
 800e56c:	08024fb4 	.word	0x08024fb4

0800e570 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	b29a      	uxth	r2, r3
 800e580:	68b9      	ldr	r1, [r7, #8]
 800e582:	4804      	ldr	r0, [pc, #16]	@ (800e594 <_write+0x24>)
 800e584:	2364      	movs	r3, #100	@ 0x64
 800e586:	f008 fe09 	bl	801719c <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e58a:	687b      	ldr	r3, [r7, #4]
}
 800e58c:	0018      	movs	r0, r3
 800e58e:	46bd      	mov	sp, r7
 800e590:	b004      	add	sp, #16
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20002194 	.word	0x20002194

0800e598 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	0002      	movs	r2, r0
 800e5a0:	1dfb      	adds	r3, r7, #7
 800e5a2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e5a4:	4b03      	ldr	r3, [pc, #12]	@ (800e5b4 <SetVerboseLevel+0x1c>)
 800e5a6:	1dfa      	adds	r2, r7, #7
 800e5a8:	7812      	ldrb	r2, [r2, #0]
 800e5aa:	701a      	strb	r2, [r3, #0]
}
 800e5ac:	46c0      	nop			@ (mov r8, r8)
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	b002      	add	sp, #8
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	200000d8 	.word	0x200000d8

0800e5b8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e5bc:	4b02      	ldr	r3, [pc, #8]	@ (800e5c8 <GetVerboseLevel+0x10>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	0018      	movs	r0, r3
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	200000d8 	.word	0x200000d8

0800e5cc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e5d2:	4a0f      	ldr	r2, [pc, #60]	@ (800e610 <BinaryReleaseInfo+0x44>)
 800e5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e614 <BinaryReleaseInfo+0x48>)
 800e5d6:	0019      	movs	r1, r3
 800e5d8:	2002      	movs	r0, #2
 800e5da:	f7ff ff73 	bl	800e4c4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e5de:	480e      	ldr	r0, [pc, #56]	@ (800e618 <BinaryReleaseInfo+0x4c>)
 800e5e0:	4a0e      	ldr	r2, [pc, #56]	@ (800e61c <BinaryReleaseInfo+0x50>)
 800e5e2:	490c      	ldr	r1, [pc, #48]	@ (800e614 <BinaryReleaseInfo+0x48>)
 800e5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e620 <BinaryReleaseInfo+0x54>)
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	0003      	movs	r3, r0
 800e5ea:	2002      	movs	r0, #2
 800e5ec:	f7ff ff6a 	bl	800e4c4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e624 <BinaryReleaseInfo+0x58>)
 800e5f2:	4a0d      	ldr	r2, [pc, #52]	@ (800e628 <BinaryReleaseInfo+0x5c>)
 800e5f4:	4907      	ldr	r1, [pc, #28]	@ (800e614 <BinaryReleaseInfo+0x48>)
 800e5f6:	2002      	movs	r0, #2
 800e5f8:	f7ff ff64 	bl	800e4c4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e62c <BinaryReleaseInfo+0x60>)
 800e5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e630 <BinaryReleaseInfo+0x64>)
 800e600:	4904      	ldr	r1, [pc, #16]	@ (800e614 <BinaryReleaseInfo+0x48>)
 800e602:	2002      	movs	r0, #2
 800e604:	f7ff ff5e 	bl	800e4c4 <CreateLine>
}
 800e608:	46c0      	nop			@ (mov r8, r8)
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	46c0      	nop			@ (mov r8, r8)
 800e610:	08024fbc 	.word	0x08024fbc
 800e614:	08024fe8 	.word	0x08024fe8
 800e618:	08024fec 	.word	0x08024fec
 800e61c:	08024ff8 	.word	0x08024ff8
 800e620:	0802500c 	.word	0x0802500c
 800e624:	08025018 	.word	0x08025018
 800e628:	08025024 	.word	0x08025024
 800e62c:	0802502c 	.word	0x0802502c
 800e630:	08025034 	.word	0x08025034

0800e634 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	68f9      	ldr	r1, [r7, #12]
 800e646:	4803      	ldr	r0, [pc, #12]	@ (800e654 <errorHandler+0x20>)
 800e648:	f011 fc20 	bl	801fe8c <iprintf>
//    while (true)
//    {
//    }
}
 800e64c:	46c0      	nop			@ (mov r8, r8)
 800e64e:	46bd      	mov	sp, r7
 800e650:	b004      	add	sp, #16
 800e652:	bd80      	pop	{r7, pc}
 800e654:	0802504c 	.word	0x0802504c

0800e658 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e658:	b590      	push	{r4, r7, lr}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6039      	str	r1, [r7, #0]
 800e660:	0011      	movs	r1, r2
 800e662:	1dfb      	adds	r3, r7, #7
 800e664:	1c02      	adds	r2, r0, #0
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	1dbb      	adds	r3, r7, #6
 800e66a:	1c0a      	adds	r2, r1, #0
 800e66c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e66e:	4b0a      	ldr	r3, [pc, #40]	@ (800e698 <ReadRegister+0x40>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00a      	beq.n	800e68c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <ReadRegister+0x40>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	1dba      	adds	r2, r7, #6
 800e67c:	7814      	ldrb	r4, [r2, #0]
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	1dfa      	adds	r2, r7, #7
 800e682:	7810      	ldrb	r0, [r2, #0]
 800e684:	0022      	movs	r2, r4
 800e686:	4798      	blx	r3
 800e688:	0003      	movs	r3, r0
 800e68a:	e000      	b.n	800e68e <ReadRegister+0x36>
	}
	return false;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	0018      	movs	r0, r3
 800e690:	46bd      	mov	sp, r7
 800e692:	b003      	add	sp, #12
 800e694:	bd90      	pop	{r4, r7, pc}
 800e696:	46c0      	nop			@ (mov r8, r8)
 800e698:	2000239c 	.word	0x2000239c

0800e69c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e69c:	b590      	push	{r4, r7, lr}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6039      	str	r1, [r7, #0]
 800e6a4:	0011      	movs	r1, r2
 800e6a6:	1dfb      	adds	r3, r7, #7
 800e6a8:	1c02      	adds	r2, r0, #0
 800e6aa:	701a      	strb	r2, [r3, #0]
 800e6ac:	1dbb      	adds	r3, r7, #6
 800e6ae:	1c0a      	adds	r2, r1, #0
 800e6b0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <WriteRegister+0x40>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00a      	beq.n	800e6d0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e6ba:	4b08      	ldr	r3, [pc, #32]	@ (800e6dc <WriteRegister+0x40>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	1dba      	adds	r2, r7, #6
 800e6c0:	7814      	ldrb	r4, [r2, #0]
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	1dfa      	adds	r2, r7, #7
 800e6c6:	7810      	ldrb	r0, [r2, #0]
 800e6c8:	0022      	movs	r2, r4
 800e6ca:	4798      	blx	r3
 800e6cc:	0003      	movs	r3, r0
 800e6ce:	e000      	b.n	800e6d2 <WriteRegister+0x36>
  }
  return false;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	b003      	add	sp, #12
 800e6d8:	bd90      	pop	{r4, r7, pc}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	200023a0 	.word	0x200023a0

0800e6e0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	000a      	movs	r2, r1
 800e6ea:	1cfb      	adds	r3, r7, #3
 800e6ec:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e6ee:	230f      	movs	r3, #15
 800e6f0:	18fb      	adds	r3, r7, r3
 800e6f2:	22ff      	movs	r2, #255	@ 0xff
 800e6f4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e6f6:	230e      	movs	r3, #14
 800e6f8:	18fb      	adds	r3, r7, r3
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	701a      	strb	r2, [r3, #0]
 800e6fe:	e037      	b.n	800e770 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e700:	230e      	movs	r3, #14
 800e702:	18fb      	adds	r3, r7, r3
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	18d3      	adds	r3, r2, r3
 800e70a:	7819      	ldrb	r1, [r3, #0]
 800e70c:	220f      	movs	r2, #15
 800e70e:	18bb      	adds	r3, r7, r2
 800e710:	18ba      	adds	r2, r7, r2
 800e712:	7812      	ldrb	r2, [r2, #0]
 800e714:	404a      	eors	r2, r1
 800e716:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e718:	230d      	movs	r3, #13
 800e71a:	18fb      	adds	r3, r7, r3
 800e71c:	2200      	movs	r2, #0
 800e71e:	701a      	strb	r2, [r3, #0]
 800e720:	e01b      	b.n	800e75a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e722:	210f      	movs	r1, #15
 800e724:	187b      	adds	r3, r7, r1
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	b25b      	sxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	da09      	bge.n	800e742 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e72e:	187b      	adds	r3, r7, r1
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	b25b      	sxtb	r3, r3
 800e736:	2231      	movs	r2, #49	@ 0x31
 800e738:	4053      	eors	r3, r2
 800e73a:	b25a      	sxtb	r2, r3
 800e73c:	187b      	adds	r3, r7, r1
 800e73e:	701a      	strb	r2, [r3, #0]
 800e740:	e005      	b.n	800e74e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e742:	230f      	movs	r3, #15
 800e744:	18fa      	adds	r2, r7, r3
 800e746:	18fb      	adds	r3, r7, r3
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	18db      	adds	r3, r3, r3
 800e74c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e74e:	210d      	movs	r1, #13
 800e750:	187b      	adds	r3, r7, r1
 800e752:	781a      	ldrb	r2, [r3, #0]
 800e754:	187b      	adds	r3, r7, r1
 800e756:	3201      	adds	r2, #1
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	230d      	movs	r3, #13
 800e75c:	18fb      	adds	r3, r7, r3
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	2b07      	cmp	r3, #7
 800e762:	d9de      	bls.n	800e722 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e764:	210e      	movs	r1, #14
 800e766:	187b      	adds	r3, r7, r1
 800e768:	781a      	ldrb	r2, [r3, #0]
 800e76a:	187b      	adds	r3, r7, r1
 800e76c:	3201      	adds	r2, #1
 800e76e:	701a      	strb	r2, [r3, #0]
 800e770:	230e      	movs	r3, #14
 800e772:	18fa      	adds	r2, r7, r3
 800e774:	1cfb      	adds	r3, r7, #3
 800e776:	7812      	ldrb	r2, [r2, #0]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d3c0      	bcc.n	800e700 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e77e:	230f      	movs	r3, #15
 800e780:	18fb      	adds	r3, r7, r3
 800e782:	781b      	ldrb	r3, [r3, #0]
}
 800e784:	0018      	movs	r0, r3
 800e786:	46bd      	mov	sp, r7
 800e788:	b004      	add	sp, #16
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e796:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c0 <HIDS_Init+0x34>)
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e79c:	4b09      	ldr	r3, [pc, #36]	@ (800e7c4 <HIDS_Init+0x38>)
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e7a2:	4b09      	ldr	r3, [pc, #36]	@ (800e7c8 <HIDS_Init+0x3c>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	f000 f840 	bl	800e82c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e7ac:	4b07      	ldr	r3, [pc, #28]	@ (800e7cc <HIDS_Init+0x40>)
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	0018      	movs	r0, r3
 800e7b2:	f000 f82b 	bl	800e80c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e7b6:	46c0      	nop			@ (mov r8, r8)
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	46c0      	nop			@ (mov r8, r8)
 800e7c0:	2000239c 	.word	0x2000239c
 800e7c4:	200023a0 	.word	0x200023a0
 800e7c8:	200000da 	.word	0x200000da
 800e7cc:	200000d9 	.word	0x200000d9

0800e7d0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e7d4:	f000 fab6 	bl	800ed44 <HAL_GetTick>
 800e7d8:	0002      	movs	r2, r0
 800e7da:	4b08      	ldr	r3, [pc, #32]	@ (800e7fc <HIDS_StartMeasurement+0x2c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	18d2      	adds	r2, r2, r3
 800e7e0:	4b07      	ldr	r3, [pc, #28]	@ (800e800 <HIDS_StartMeasurement+0x30>)
 800e7e2:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e7e4:	4b07      	ldr	r3, [pc, #28]	@ (800e804 <HIDS_StartMeasurement+0x34>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	0019      	movs	r1, r3
 800e7ea:	2044      	movs	r0, #68	@ 0x44
 800e7ec:	f7ff ff56 	bl	800e69c <WriteRegister>
  MeasurementDone = false;
 800e7f0:	4b05      	ldr	r3, [pc, #20]	@ (800e808 <HIDS_StartMeasurement+0x38>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	701a      	strb	r2, [r3, #0]
}
 800e7f6:	46c0      	nop			@ (mov r8, r8)
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	200000e0 	.word	0x200000e0
 800e800:	200000dc 	.word	0x200000dc
 800e804:	200000da 	.word	0x200000da
 800e808:	200023b2 	.word	0x200023b2

0800e80c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	0002      	movs	r2, r0
 800e814:	1dfb      	adds	r3, r7, #7
 800e816:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e818:	4b03      	ldr	r3, [pc, #12]	@ (800e828 <HIDS_SetHeaterMode+0x1c>)
 800e81a:	1dfa      	adds	r2, r7, #7
 800e81c:	7812      	ldrb	r2, [r2, #0]
 800e81e:	701a      	strb	r2, [r3, #0]
}
 800e820:	46c0      	nop			@ (mov r8, r8)
 800e822:	46bd      	mov	sp, r7
 800e824:	b002      	add	sp, #8
 800e826:	bd80      	pop	{r7, pc}
 800e828:	200000d9 	.word	0x200000d9

0800e82c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	0002      	movs	r2, r0
 800e834:	1dfb      	adds	r3, r7, #7
 800e836:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e838:	4b03      	ldr	r3, [pc, #12]	@ (800e848 <HIDS_SetMeasurementMode+0x1c>)
 800e83a:	1dfa      	adds	r2, r7, #7
 800e83c:	7812      	ldrb	r2, [r2, #0]
 800e83e:	701a      	strb	r2, [r3, #0]
}
 800e840:	46c0      	nop			@ (mov r8, r8)
 800e842:	46bd      	mov	sp, r7
 800e844:	b002      	add	sp, #8
 800e846:	bd80      	pop	{r7, pc}
 800e848:	200000da 	.word	0x200000da

0800e84c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e854:	f000 fa76 	bl	800ed44 <HAL_GetTick>
 800e858:	0002      	movs	r2, r0
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	18d2      	adds	r2, r2, r3
 800e85e:	4b03      	ldr	r3, [pc, #12]	@ (800e86c <setHIDSTimeStamp+0x20>)
 800e860:	601a      	str	r2, [r3, #0]
}
 800e862:	46c0      	nop			@ (mov r8, r8)
 800e864:	46bd      	mov	sp, r7
 800e866:	b002      	add	sp, #8
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	46c0      	nop			@ (mov r8, r8)
 800e86c:	200023b4 	.word	0x200023b4

0800e870 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e870:	b590      	push	{r4, r7, lr}
 800e872:	b085      	sub	sp, #20
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	781a      	ldrb	r2, [r3, #0]
 800e87c:	210c      	movs	r1, #12
 800e87e:	187b      	adds	r3, r7, r1
 800e880:	701a      	strb	r2, [r3, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	785a      	ldrb	r2, [r3, #1]
 800e886:	187b      	adds	r3, r7, r1
 800e888:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e88a:	240f      	movs	r4, #15
 800e88c:	193b      	adds	r3, r7, r4
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	7892      	ldrb	r2, [r2, #2]
 800e892:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e894:	187b      	adds	r3, r7, r1
 800e896:	2102      	movs	r1, #2
 800e898:	0018      	movs	r0, r3
 800e89a:	f7ff ff21 	bl	800e6e0 <CalculateCRC>
 800e89e:	0003      	movs	r3, r0
 800e8a0:	001a      	movs	r2, r3
 800e8a2:	193b      	adds	r3, r7, r4
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d007      	beq.n	800e8ba <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e8aa:	4a1a      	ldr	r2, [pc, #104]	@ (800e914 <CheckCRC+0xa4>)
 800e8ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e918 <CheckCRC+0xa8>)
 800e8ae:	0019      	movs	r1, r3
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	f7ff fe07 	bl	800e4c4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e027      	b.n	800e90a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	78da      	ldrb	r2, [r3, #3]
 800e8be:	2108      	movs	r1, #8
 800e8c0:	187b      	adds	r3, r7, r1
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	791a      	ldrb	r2, [r3, #4]
 800e8c8:	187b      	adds	r3, r7, r1
 800e8ca:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e8cc:	240e      	movs	r4, #14
 800e8ce:	193b      	adds	r3, r7, r4
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	7952      	ldrb	r2, [r2, #5]
 800e8d4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e8d6:	187b      	adds	r3, r7, r1
 800e8d8:	2102      	movs	r1, #2
 800e8da:	0018      	movs	r0, r3
 800e8dc:	f7ff ff00 	bl	800e6e0 <CalculateCRC>
 800e8e0:	0003      	movs	r3, r0
 800e8e2:	001a      	movs	r2, r3
 800e8e4:	193b      	adds	r3, r7, r4
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d00d      	beq.n	800e908 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e8ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e91c <CheckCRC+0xac>)
 800e8ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <CheckCRC+0xa8>)
 800e8f0:	0019      	movs	r1, r3
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	f7ff fde6 	bl	800e4c4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e8f8:	4a09      	ldr	r2, [pc, #36]	@ (800e920 <CheckCRC+0xb0>)
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e924 <CheckCRC+0xb4>)
 800e8fc:	217c      	movs	r1, #124	@ 0x7c
 800e8fe:	0018      	movs	r0, r3
 800e900:	f7ff fe98 	bl	800e634 <errorHandler>
		return false;
 800e904:	2300      	movs	r3, #0
 800e906:	e000      	b.n	800e90a <CheckCRC+0x9a>
	}
	return true;
 800e908:	2301      	movs	r3, #1
}
 800e90a:	0018      	movs	r0, r3
 800e90c:	46bd      	mov	sp, r7
 800e90e:	b005      	add	sp, #20
 800e910:	bd90      	pop	{r4, r7, pc}
 800e912:	46c0      	nop			@ (mov r8, r8)
 800e914:	08025098 	.word	0x08025098
 800e918:	080250c0 	.word	0x080250c0
 800e91c:	080250c4 	.word	0x080250c4
 800e920:	080250f0 	.word	0x080250f0
 800e924:	08025688 	.word	0x08025688

0800e928 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e92e:	1dbb      	adds	r3, r7, #6
 800e930:	2289      	movs	r2, #137	@ 0x89
 800e932:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e934:	1dbb      	adds	r3, r7, #6
 800e936:	2201      	movs	r2, #1
 800e938:	0019      	movs	r1, r3
 800e93a:	2044      	movs	r0, #68	@ 0x44
 800e93c:	f7ff feae 	bl	800e69c <WriteRegister>
	HAL_Delay(30);
 800e940:	201e      	movs	r0, #30
 800e942:	f000 fa09 	bl	800ed58 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e946:	4b14      	ldr	r3, [pc, #80]	@ (800e998 <HIDS_DeviceConnected+0x70>)
 800e948:	2206      	movs	r2, #6
 800e94a:	0019      	movs	r1, r3
 800e94c:	2044      	movs	r0, #68	@ 0x44
 800e94e:	f7ff fe83 	bl	800e658 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e952:	1dfb      	adds	r3, r7, #7
 800e954:	2200      	movs	r2, #0
 800e956:	701a      	strb	r2, [r3, #0]
 800e958:	e011      	b.n	800e97e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e95a:	1dfb      	adds	r3, r7, #7
 800e95c:	7818      	ldrb	r0, [r3, #0]
 800e95e:	1dfb      	adds	r3, r7, #7
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	4a0d      	ldr	r2, [pc, #52]	@ (800e998 <HIDS_DeviceConnected+0x70>)
 800e964:	5cd3      	ldrb	r3, [r2, r3]
 800e966:	4a0d      	ldr	r2, [pc, #52]	@ (800e99c <HIDS_DeviceConnected+0x74>)
 800e968:	490d      	ldr	r1, [pc, #52]	@ (800e9a0 <HIDS_DeviceConnected+0x78>)
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	0003      	movs	r3, r0
 800e96e:	2002      	movs	r0, #2
 800e970:	f7ff fda8 	bl	800e4c4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e974:	1dfb      	adds	r3, r7, #7
 800e976:	781a      	ldrb	r2, [r3, #0]
 800e978:	1dfb      	adds	r3, r7, #7
 800e97a:	3201      	adds	r2, #1
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	1dfb      	adds	r3, r7, #7
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2b05      	cmp	r3, #5
 800e984:	d9e9      	bls.n	800e95a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e986:	4b04      	ldr	r3, [pc, #16]	@ (800e998 <HIDS_DeviceConnected+0x70>)
 800e988:	0018      	movs	r0, r3
 800e98a:	f7ff ff71 	bl	800e870 <CheckCRC>
 800e98e:	0003      	movs	r3, r0
}
 800e990:	0018      	movs	r0, r3
 800e992:	46bd      	mov	sp, r7
 800e994:	b002      	add	sp, #8
 800e996:	bd80      	pop	{r7, pc}
 800e998:	200023a4 	.word	0x200023a4
 800e99c:	08025108 	.word	0x08025108
 800e9a0:	08025094 	.word	0x08025094

0800e9a4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e9a8:	4b04      	ldr	r3, [pc, #16]	@ (800e9bc <HIDS_MeasurementReady+0x18>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	0018      	movs	r0, r3
 800e9ae:	f7ff fd33 	bl	800e418 <TimestampIsReached>
 800e9b2:	0003      	movs	r3, r0
}
 800e9b4:	0018      	movs	r0, r3
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	46c0      	nop			@ (mov r8, r8)
 800e9bc:	200000dc 	.word	0x200000dc

0800e9c0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800e9ca:	4b41      	ldr	r3, [pc, #260]	@ (800ead0 <HIDS_GetMeasurementValues+0x110>)
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d001      	beq.n	800e9d6 <HIDS_GetMeasurementValues+0x16>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e077      	b.n	800eac6 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800e9d6:	f7ff ffe5 	bl	800e9a4 <HIDS_MeasurementReady>
 800e9da:	0003      	movs	r3, r0
 800e9dc:	001a      	movs	r2, r3
 800e9de:	2301      	movs	r3, #1
 800e9e0:	4053      	eors	r3, r2
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <HIDS_GetMeasurementValues+0x2c>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	e06c      	b.n	800eac6 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e9ec:	4b39      	ldr	r3, [pc, #228]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800e9ee:	2206      	movs	r2, #6
 800e9f0:	0019      	movs	r1, r3
 800e9f2:	2044      	movs	r0, #68	@ 0x44
 800e9f4:	f7ff fe30 	bl	800e658 <ReadRegister>
 800e9f8:	0003      	movs	r3, r0
 800e9fa:	001a      	movs	r2, r3
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4053      	eors	r3, r2
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d005      	beq.n	800ea12 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800ea06:	4a34      	ldr	r2, [pc, #208]	@ (800ead8 <HIDS_GetMeasurementValues+0x118>)
 800ea08:	4b34      	ldr	r3, [pc, #208]	@ (800eadc <HIDS_GetMeasurementValues+0x11c>)
 800ea0a:	0019      	movs	r1, r3
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7ff fd59 	bl	800e4c4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ea12:	4b30      	ldr	r3, [pc, #192]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800ea14:	0018      	movs	r0, r3
 800ea16:	f7ff ff2b 	bl	800e870 <CheckCRC>
 800ea1a:	0003      	movs	r3, r0
 800ea1c:	001a      	movs	r2, r3
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4053      	eors	r3, r2
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e04c      	b.n	800eac6 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ea2c:	4b29      	ldr	r3, [pc, #164]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	021b      	lsls	r3, r3, #8
 800ea32:	4a28      	ldr	r2, [pc, #160]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800ea34:	7852      	ldrb	r2, [r2, #1]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	22af      	movs	r2, #175	@ 0xaf
 800ea3a:	4353      	muls	r3, r2
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f7f4 fcbf 	bl	80033c0 <__aeabi_i2d>
 800ea42:	2200      	movs	r2, #0
 800ea44:	4b26      	ldr	r3, [pc, #152]	@ (800eae0 <HIDS_GetMeasurementValues+0x120>)
 800ea46:	f7f3 f9b5 	bl	8001db4 <__aeabi_ddiv>
 800ea4a:	0002      	movs	r2, r0
 800ea4c:	000b      	movs	r3, r1
 800ea4e:	0010      	movs	r0, r2
 800ea50:	0019      	movs	r1, r3
 800ea52:	f7f4 fd4f 	bl	80034f4 <__aeabi_d2f>
 800ea56:	1c03      	adds	r3, r0, #0
 800ea58:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ea5a:	4922      	ldr	r1, [pc, #136]	@ (800eae4 <HIDS_GetMeasurementValues+0x124>)
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f7f2 fbdd 	bl	800121c <__aeabi_fsub>
 800ea62:	1c03      	adds	r3, r0, #0
 800ea64:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ea66:	4b1b      	ldr	r3, [pc, #108]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800ea68:	78db      	ldrb	r3, [r3, #3]
 800ea6a:	021b      	lsls	r3, r3, #8
 800ea6c:	4a19      	ldr	r2, [pc, #100]	@ (800ead4 <HIDS_GetMeasurementValues+0x114>)
 800ea6e:	7912      	ldrb	r2, [r2, #4]
 800ea70:	431a      	orrs	r2, r3
 800ea72:	0013      	movs	r3, r2
 800ea74:	015b      	lsls	r3, r3, #5
 800ea76:	1a9b      	subs	r3, r3, r2
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	189b      	adds	r3, r3, r2
 800ea7c:	0018      	movs	r0, r3
 800ea7e:	f7f4 fc9f 	bl	80033c0 <__aeabi_i2d>
 800ea82:	2200      	movs	r2, #0
 800ea84:	4b16      	ldr	r3, [pc, #88]	@ (800eae0 <HIDS_GetMeasurementValues+0x120>)
 800ea86:	f7f3 f995 	bl	8001db4 <__aeabi_ddiv>
 800ea8a:	0002      	movs	r2, r0
 800ea8c:	000b      	movs	r3, r1
 800ea8e:	0010      	movs	r0, r2
 800ea90:	0019      	movs	r1, r3
 800ea92:	f7f4 fd2f 	bl	80034f4 <__aeabi_d2f>
 800ea96:	1c03      	adds	r3, r0, #0
 800ea98:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800ea9a:	4913      	ldr	r1, [pc, #76]	@ (800eae8 <HIDS_GetMeasurementValues+0x128>)
 800ea9c:	68b8      	ldr	r0, [r7, #8]
 800ea9e:	f7f2 fbbd 	bl	800121c <__aeabi_fsub>
 800eaa2:	1c03      	adds	r3, r0, #0
 800eaa4:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	0011      	movs	r1, r2
 800eab8:	0018      	movs	r0, r3
 800eaba:	f7fd fa35 	bl	800bf28 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800eabe:	4b04      	ldr	r3, [pc, #16]	@ (800ead0 <HIDS_GetMeasurementValues+0x110>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800eac4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800eac6:	0018      	movs	r0, r3
 800eac8:	46bd      	mov	sp, r7
 800eaca:	b004      	add	sp, #16
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	46c0      	nop			@ (mov r8, r8)
 800ead0:	200023b2 	.word	0x200023b2
 800ead4:	200023ac 	.word	0x200023ac
 800ead8:	08025128 	.word	0x08025128
 800eadc:	080250c0 	.word	0x080250c0
 800eae0:	40efffe0 	.word	0x40efffe0
 800eae4:	42340000 	.word	0x42340000
 800eae8:	40c00000 	.word	0x40c00000

0800eaec <ResetHIDSresults>:

void ResetHIDSresults() {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  humid = 0.0;
 800eaf0:	4b04      	ldr	r3, [pc, #16]	@ (800eb04 <ResetHIDSresults+0x18>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800eaf6:	4b04      	ldr	r3, [pc, #16]	@ (800eb08 <ResetHIDSresults+0x1c>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	46c0      	nop			@ (mov r8, r8)
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	46c0      	nop			@ (mov r8, r8)
 800eb04:	20002394 	.word	0x20002394
 800eb08:	20002398 	.word	0x20002398

0800eb0c <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800eb0c:	b5b0      	push	{r4, r5, r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800eb12:	4b3b      	ldr	r3, [pc, #236]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b06      	cmp	r3, #6
 800eb18:	d865      	bhi.n	800ebe6 <HIDS_Upkeep+0xda>
 800eb1a:	009a      	lsls	r2, r3, #2
 800eb1c:	4b39      	ldr	r3, [pc, #228]	@ (800ec04 <HIDS_Upkeep+0xf8>)
 800eb1e:	18d3      	adds	r3, r2, r3
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800eb24:	4a38      	ldr	r2, [pc, #224]	@ (800ec08 <HIDS_Upkeep+0xfc>)
 800eb26:	4b39      	ldr	r3, [pc, #228]	@ (800ec0c <HIDS_Upkeep+0x100>)
 800eb28:	0019      	movs	r1, r3
 800eb2a:	2003      	movs	r0, #3
 800eb2c:	f7ff fcca 	bl	800e4c4 <CreateLine>
      break;
 800eb30:	e060      	b.n	800ebf4 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800eb32:	f7ff ffdb 	bl	800eaec <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800eb36:	4b32      	ldr	r3, [pc, #200]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	701a      	strb	r2, [r3, #0]
      break;
 800eb3c:	e05a      	b.n	800ebf4 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800eb3e:	f7fe fc1f 	bl	800d380 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800eb42:	f7ff fe45 	bl	800e7d0 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800eb46:	4b2e      	ldr	r3, [pc, #184]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800eb48:	2202      	movs	r2, #2
 800eb4a:	701a      	strb	r2, [r3, #0]
      break;
 800eb4c:	e052      	b.n	800ebf4 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800eb4e:	4a30      	ldr	r2, [pc, #192]	@ (800ec10 <HIDS_Upkeep+0x104>)
 800eb50:	4b30      	ldr	r3, [pc, #192]	@ (800ec14 <HIDS_Upkeep+0x108>)
 800eb52:	0011      	movs	r1, r2
 800eb54:	0018      	movs	r0, r3
 800eb56:	f7ff ff33 	bl	800e9c0 <HIDS_GetMeasurementValues>
 800eb5a:	1e03      	subs	r3, r0, #0
 800eb5c:	d047      	beq.n	800ebee <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800eb5e:	4b28      	ldr	r3, [pc, #160]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800eb60:	2203      	movs	r2, #3
 800eb62:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb64:	e043      	b.n	800ebee <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800eb66:	4b2b      	ldr	r3, [pc, #172]	@ (800ec14 <HIDS_Upkeep+0x108>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	1c18      	adds	r0, r3, #0
 800eb6c:	f7f4 fc7a 	bl	8003464 <__aeabi_f2d>
 800eb70:	0004      	movs	r4, r0
 800eb72:	000d      	movs	r5, r1
 800eb74:	4b26      	ldr	r3, [pc, #152]	@ (800ec10 <HIDS_Upkeep+0x104>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	1c18      	adds	r0, r3, #0
 800eb7a:	f7f4 fc73 	bl	8003464 <__aeabi_f2d>
 800eb7e:	0002      	movs	r2, r0
 800eb80:	000b      	movs	r3, r1
 800eb82:	4825      	ldr	r0, [pc, #148]	@ (800ec18 <HIDS_Upkeep+0x10c>)
 800eb84:	4921      	ldr	r1, [pc, #132]	@ (800ec0c <HIDS_Upkeep+0x100>)
 800eb86:	9202      	str	r2, [sp, #8]
 800eb88:	9303      	str	r3, [sp, #12]
 800eb8a:	9400      	str	r4, [sp, #0]
 800eb8c:	9501      	str	r5, [sp, #4]
 800eb8e:	0002      	movs	r2, r0
 800eb90:	2003      	movs	r0, #3
 800eb92:	f7ff fc97 	bl	800e4c4 <CreateLine>
      setHIDS(temp, humid);
 800eb96:	4b1e      	ldr	r3, [pc, #120]	@ (800ec10 <HIDS_Upkeep+0x104>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ec14 <HIDS_Upkeep+0x108>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	1c19      	adds	r1, r3, #0
 800eba0:	1c10      	adds	r0, r2, #0
 800eba2:	f7f4 fea7 	bl	80038f4 <setHIDS>
      ResetMeasurementIndicator();
 800eba6:	f7fe fc03 	bl	800d3b0 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ebaa:	f000 f8cb 	bl	800ed44 <HAL_GetTick>
 800ebae:	0004      	movs	r4, r0
 800ebb0:	f7fe fd3c 	bl	800d62c <powerCheck>
 800ebb4:	0003      	movs	r3, r0
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	d101      	bne.n	800ebbe <HIDS_Upkeep+0xb2>
 800ebba:	4b18      	ldr	r3, [pc, #96]	@ (800ec1c <HIDS_Upkeep+0x110>)
 800ebbc:	e001      	b.n	800ebc2 <HIDS_Upkeep+0xb6>
 800ebbe:	23fa      	movs	r3, #250	@ 0xfa
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	191a      	adds	r2, r3, r4
 800ebc4:	4b16      	ldr	r3, [pc, #88]	@ (800ec20 <HIDS_Upkeep+0x114>)
 800ebc6:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800ebca:	2206      	movs	r2, #6
 800ebcc:	701a      	strb	r2, [r3, #0]
      break;
 800ebce:	e011      	b.n	800ebf4 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ebd0:	4b13      	ldr	r3, [pc, #76]	@ (800ec20 <HIDS_Upkeep+0x114>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f7ff fc1f 	bl	800e418 <TimestampIsReached>
 800ebda:	1e03      	subs	r3, r0, #0
 800ebdc:	d009      	beq.n	800ebf2 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800ebde:	4b08      	ldr	r3, [pc, #32]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ebe4:	e005      	b.n	800ebf2 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ebe6:	4b06      	ldr	r3, [pc, #24]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	701a      	strb	r2, [r3, #0]
      break;
 800ebec:	e002      	b.n	800ebf4 <HIDS_Upkeep+0xe8>
      break;
 800ebee:	46c0      	nop			@ (mov r8, r8)
 800ebf0:	e000      	b.n	800ebf4 <HIDS_Upkeep+0xe8>
      break;
 800ebf2:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	@ (800ec00 <HIDS_Upkeep+0xf4>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
}
 800ebf8:	0018      	movs	r0, r3
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bdb0      	pop	{r4, r5, r7, pc}
 800ebfe:	46c0      	nop			@ (mov r8, r8)
 800ec00:	200023b8 	.word	0x200023b8
 800ec04:	0802566c 	.word	0x0802566c
 800ec08:	0802515c 	.word	0x0802515c
 800ec0c:	08025190 	.word	0x08025190
 800ec10:	20002398 	.word	0x20002398
 800ec14:	20002394 	.word	0x20002394
 800ec18:	08025194 	.word	0x08025194
 800ec1c:	00002710 	.word	0x00002710
 800ec20:	200023b4 	.word	0x200023b4

0800ec24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ec24:	480d      	ldr	r0, [pc, #52]	@ (800ec5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ec26:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ec28:	f7ff f84c 	bl	800dcc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec2c:	480c      	ldr	r0, [pc, #48]	@ (800ec60 <LoopForever+0x6>)
  ldr r1, =_edata
 800ec2e:	490d      	ldr	r1, [pc, #52]	@ (800ec64 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ec30:	4a0d      	ldr	r2, [pc, #52]	@ (800ec68 <LoopForever+0xe>)
  movs r3, #0
 800ec32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec34:	e002      	b.n	800ec3c <LoopCopyDataInit>

0800ec36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec3a:	3304      	adds	r3, #4

0800ec3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec40:	d3f9      	bcc.n	800ec36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec42:	4a0a      	ldr	r2, [pc, #40]	@ (800ec6c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ec44:	4c0a      	ldr	r4, [pc, #40]	@ (800ec70 <LoopForever+0x16>)
  movs r3, #0
 800ec46:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec48:	e001      	b.n	800ec4e <LoopFillZerobss>

0800ec4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec4c:	3204      	adds	r2, #4

0800ec4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec50:	d3fb      	bcc.n	800ec4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ec52:	f011 fb79 	bl	8020348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec56:	f7f9 f807 	bl	8007c68 <main>

0800ec5a <LoopForever>:

LoopForever:
    b LoopForever
 800ec5a:	e7fe      	b.n	800ec5a <LoopForever>
   ldr   r0, =_estack
 800ec5c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800ec60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec64:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 800ec68:	08026008 	.word	0x08026008
  ldr r2, =_sbss
 800ec6c:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 800ec70:	200037c0 	.word	0x200037c0

0800ec74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec74:	e7fe      	b.n	800ec74 <ADC1_COMP_IRQHandler>
	...

0800ec78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ec7e:	1dfb      	adds	r3, r7, #7
 800ec80:	2200      	movs	r2, #0
 800ec82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ec84:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb4 <HAL_Init+0x3c>)
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	4b0a      	ldr	r3, [pc, #40]	@ (800ecb4 <HAL_Init+0x3c>)
 800ec8a:	2140      	movs	r1, #64	@ 0x40
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ec90:	2003      	movs	r0, #3
 800ec92:	f000 f811 	bl	800ecb8 <HAL_InitTick>
 800ec96:	1e03      	subs	r3, r0, #0
 800ec98:	d003      	beq.n	800eca2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ec9a:	1dfb      	adds	r3, r7, #7
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	701a      	strb	r2, [r3, #0]
 800eca0:	e001      	b.n	800eca6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800eca2:	f7fe fec3 	bl	800da2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800eca6:	1dfb      	adds	r3, r7, #7
 800eca8:	781b      	ldrb	r3, [r3, #0]
}
 800ecaa:	0018      	movs	r0, r3
 800ecac:	46bd      	mov	sp, r7
 800ecae:	b002      	add	sp, #8
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	46c0      	nop			@ (mov r8, r8)
 800ecb4:	40022000 	.word	0x40022000

0800ecb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecb8:	b590      	push	{r4, r7, lr}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ecc0:	4b14      	ldr	r3, [pc, #80]	@ (800ed14 <HAL_InitTick+0x5c>)
 800ecc2:	681c      	ldr	r4, [r3, #0]
 800ecc4:	4b14      	ldr	r3, [pc, #80]	@ (800ed18 <HAL_InitTick+0x60>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	0019      	movs	r1, r3
 800ecca:	23fa      	movs	r3, #250	@ 0xfa
 800eccc:	0098      	lsls	r0, r3, #2
 800ecce:	f7f1 fa69 	bl	80001a4 <__udivsi3>
 800ecd2:	0003      	movs	r3, r0
 800ecd4:	0019      	movs	r1, r3
 800ecd6:	0020      	movs	r0, r4
 800ecd8:	f7f1 fa64 	bl	80001a4 <__udivsi3>
 800ecdc:	0003      	movs	r3, r0
 800ecde:	0018      	movs	r0, r3
 800ece0:	f000 fcfd 	bl	800f6de <HAL_SYSTICK_Config>
 800ece4:	1e03      	subs	r3, r0, #0
 800ece6:	d001      	beq.n	800ecec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e00f      	b.n	800ed0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d80b      	bhi.n	800ed0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ecf2:	6879      	ldr	r1, [r7, #4]
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	425b      	negs	r3, r3
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	0018      	movs	r0, r3
 800ecfc:	f000 fcc6 	bl	800f68c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed00:	4b06      	ldr	r3, [pc, #24]	@ (800ed1c <HAL_InitTick+0x64>)
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e000      	b.n	800ed0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
}
 800ed0c:	0018      	movs	r0, r3
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	b003      	add	sp, #12
 800ed12:	bd90      	pop	{r4, r7, pc}
 800ed14:	200000d4 	.word	0x200000d4
 800ed18:	200000e8 	.word	0x200000e8
 800ed1c:	200000e4 	.word	0x200000e4

0800ed20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ed24:	4b05      	ldr	r3, [pc, #20]	@ (800ed3c <HAL_IncTick+0x1c>)
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	001a      	movs	r2, r3
 800ed2a:	4b05      	ldr	r3, [pc, #20]	@ (800ed40 <HAL_IncTick+0x20>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	18d2      	adds	r2, r2, r3
 800ed30:	4b03      	ldr	r3, [pc, #12]	@ (800ed40 <HAL_IncTick+0x20>)
 800ed32:	601a      	str	r2, [r3, #0]
}
 800ed34:	46c0      	nop			@ (mov r8, r8)
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	46c0      	nop			@ (mov r8, r8)
 800ed3c:	200000e8 	.word	0x200000e8
 800ed40:	200023bc 	.word	0x200023bc

0800ed44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	af00      	add	r7, sp, #0
  return uwTick;
 800ed48:	4b02      	ldr	r3, [pc, #8]	@ (800ed54 <HAL_GetTick+0x10>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
}
 800ed4c:	0018      	movs	r0, r3
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	46c0      	nop			@ (mov r8, r8)
 800ed54:	200023bc 	.word	0x200023bc

0800ed58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ed60:	f7ff fff0 	bl	800ed44 <HAL_GetTick>
 800ed64:	0003      	movs	r3, r0
 800ed66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	d005      	beq.n	800ed7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ed72:	4b0a      	ldr	r3, [pc, #40]	@ (800ed9c <HAL_Delay+0x44>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	001a      	movs	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	189b      	adds	r3, r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ed7e:	46c0      	nop			@ (mov r8, r8)
 800ed80:	f7ff ffe0 	bl	800ed44 <HAL_GetTick>
 800ed84:	0002      	movs	r2, r0
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d8f7      	bhi.n	800ed80 <HAL_Delay+0x28>
  {
  }
}
 800ed90:	46c0      	nop			@ (mov r8, r8)
 800ed92:	46c0      	nop			@ (mov r8, r8)
 800ed94:	46bd      	mov	sp, r7
 800ed96:	b004      	add	sp, #16
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	46c0      	nop			@ (mov r8, r8)
 800ed9c:	200000e8 	.word	0x200000e8

0800eda0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800eda4:	4b04      	ldr	r3, [pc, #16]	@ (800edb8 <HAL_SuspendTick+0x18>)
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	4b03      	ldr	r3, [pc, #12]	@ (800edb8 <HAL_SuspendTick+0x18>)
 800edaa:	2102      	movs	r1, #2
 800edac:	438a      	bics	r2, r1
 800edae:	601a      	str	r2, [r3, #0]
}
 800edb0:	46c0      	nop			@ (mov r8, r8)
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	46c0      	nop			@ (mov r8, r8)
 800edb8:	e000e010 	.word	0xe000e010

0800edbc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800edc0:	4b04      	ldr	r3, [pc, #16]	@ (800edd4 <HAL_ResumeTick+0x18>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	4b03      	ldr	r3, [pc, #12]	@ (800edd4 <HAL_ResumeTick+0x18>)
 800edc6:	2102      	movs	r1, #2
 800edc8:	430a      	orrs	r2, r1
 800edca:	601a      	str	r2, [r3, #0]
}
 800edcc:	46c0      	nop			@ (mov r8, r8)
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	46c0      	nop			@ (mov r8, r8)
 800edd4:	e000e010 	.word	0xe000e010

0800edd8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800eddc:	4b02      	ldr	r3, [pc, #8]	@ (800ede8 <HAL_GetUIDw0+0x10>)
 800edde:	681b      	ldr	r3, [r3, #0]
}
 800ede0:	0018      	movs	r0, r3
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	1ff80050 	.word	0x1ff80050

0800edec <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800edf0:	4b02      	ldr	r3, [pc, #8]	@ (800edfc <HAL_GetUIDw1+0x10>)
 800edf2:	681b      	ldr	r3, [r3, #0]
}
 800edf4:	0018      	movs	r0, r3
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	46c0      	nop			@ (mov r8, r8)
 800edfc:	1ff80054 	.word	0x1ff80054

0800ee00 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ee04:	4b02      	ldr	r3, [pc, #8]	@ (800ee10 <HAL_GetUIDw2+0x10>)
 800ee06:	681b      	ldr	r3, [r3, #0]
}
 800ee08:	0018      	movs	r0, r3
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	46c0      	nop			@ (mov r8, r8)
 800ee10:	1ff80064 	.word	0x1ff80064

0800ee14 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d101      	bne.n	800ee26 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	e159      	b.n	800f0da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10a      	bne.n	800ee44 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2250      	movs	r2, #80	@ 0x50
 800ee38:	2100      	movs	r1, #0
 800ee3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	0018      	movs	r0, r3
 800ee40:	f7f8 f99a 	bl	8007178 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee48:	2210      	movs	r2, #16
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	2b10      	cmp	r3, #16
 800ee4e:	d005      	beq.n	800ee5c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	2204      	movs	r2, #4
 800ee58:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ee5a:	d00b      	beq.n	800ee74 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee60:	2210      	movs	r2, #16
 800ee62:	431a      	orrs	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2250      	movs	r2, #80	@ 0x50
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e132      	b.n	800f0da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee78:	4a9a      	ldr	r2, [pc, #616]	@ (800f0e4 <HAL_ADC_Init+0x2d0>)
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	431a      	orrs	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	2203      	movs	r2, #3
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d108      	bne.n	800eea4 <HAL_ADC_Init+0x90>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d101      	bne.n	800eea4 <HAL_ADC_Init+0x90>
 800eea0:	2301      	movs	r3, #1
 800eea2:	e000      	b.n	800eea6 <HAL_ADC_Init+0x92>
 800eea4:	2300      	movs	r3, #0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d149      	bne.n	800ef3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	685a      	ldr	r2, [r3, #4]
 800eeae:	23c0      	movs	r3, #192	@ 0xc0
 800eeb0:	061b      	lsls	r3, r3, #24
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d00b      	beq.n	800eece <HAL_ADC_Init+0xba>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	2380      	movs	r3, #128	@ 0x80
 800eebc:	05db      	lsls	r3, r3, #23
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d005      	beq.n	800eece <HAL_ADC_Init+0xba>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685a      	ldr	r2, [r3, #4]
 800eec6:	2380      	movs	r3, #128	@ 0x80
 800eec8:	061b      	lsls	r3, r3, #24
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d111      	bne.n	800eef2 <HAL_ADC_Init+0xde>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	691a      	ldr	r2, [r3, #16]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	0092      	lsls	r2, r2, #2
 800eeda:	0892      	lsrs	r2, r2, #2
 800eedc:	611a      	str	r2, [r3, #16]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6919      	ldr	r1, [r3, #16]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	430a      	orrs	r2, r1
 800eeee:	611a      	str	r2, [r3, #16]
 800eef0:	e014      	b.n	800ef1c <HAL_ADC_Init+0x108>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	691a      	ldr	r2, [r3, #16]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	0092      	lsls	r2, r2, #2
 800eefe:	0892      	lsrs	r2, r2, #2
 800ef00:	611a      	str	r2, [r3, #16]
 800ef02:	4b79      	ldr	r3, [pc, #484]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	4b78      	ldr	r3, [pc, #480]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef08:	4978      	ldr	r1, [pc, #480]	@ (800f0ec <HAL_ADC_Init+0x2d8>)
 800ef0a:	400a      	ands	r2, r1
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	4b76      	ldr	r3, [pc, #472]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef10:	6819      	ldr	r1, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685a      	ldr	r2, [r3, #4]
 800ef16:	4b74      	ldr	r3, [pc, #464]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef18:	430a      	orrs	r2, r1
 800ef1a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	68da      	ldr	r2, [r3, #12]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2118      	movs	r1, #24
 800ef28:	438a      	bics	r2, r1
 800ef2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68d9      	ldr	r1, [r3, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	689a      	ldr	r2, [r3, #8]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	430a      	orrs	r2, r1
 800ef3c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800ef3e:	4b6a      	ldr	r3, [pc, #424]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	4b69      	ldr	r3, [pc, #420]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef44:	496a      	ldr	r1, [pc, #424]	@ (800f0f0 <HAL_ADC_Init+0x2dc>)
 800ef46:	400a      	ands	r2, r1
 800ef48:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800ef4a:	4b67      	ldr	r3, [pc, #412]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef4c:	6819      	ldr	r1, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef52:	065a      	lsls	r2, r3, #25
 800ef54:	4b64      	ldr	r3, [pc, #400]	@ (800f0e8 <HAL_ADC_Init+0x2d4>)
 800ef56:	430a      	orrs	r2, r1
 800ef58:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	689a      	ldr	r2, [r3, #8]
 800ef60:	2380      	movs	r3, #128	@ 0x80
 800ef62:	055b      	lsls	r3, r3, #21
 800ef64:	4013      	ands	r3, r2
 800ef66:	d108      	bne.n	800ef7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689a      	ldr	r2, [r3, #8]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2180      	movs	r1, #128	@ 0x80
 800ef74:	0549      	lsls	r1, r1, #21
 800ef76:	430a      	orrs	r2, r1
 800ef78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68da      	ldr	r2, [r3, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	495b      	ldr	r1, [pc, #364]	@ (800f0f4 <HAL_ADC_Init+0x2e0>)
 800ef86:	400a      	ands	r2, r1
 800ef88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68d9      	ldr	r1, [r3, #12]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d101      	bne.n	800efa0 <HAL_ADC_Init+0x18c>
 800ef9c:	2304      	movs	r3, #4
 800ef9e:	e000      	b.n	800efa2 <HAL_ADC_Init+0x18e>
 800efa0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800efa2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2020      	movs	r0, #32
 800efa8:	5c1b      	ldrb	r3, [r3, r0]
 800efaa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800efac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	202c      	movs	r0, #44	@ 0x2c
 800efb2:	5c1b      	ldrb	r3, [r3, r0]
 800efb4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800efb6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800efbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800efc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800efcc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efda:	23c2      	movs	r3, #194	@ 0xc2
 800efdc:	33ff      	adds	r3, #255	@ 0xff
 800efde:	429a      	cmp	r2, r3
 800efe0:	d00b      	beq.n	800effa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	68d9      	ldr	r1, [r3, #12]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800eff0:	431a      	orrs	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	430a      	orrs	r2, r1
 800eff8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2221      	movs	r2, #33	@ 0x21
 800effe:	5c9b      	ldrb	r3, [r3, r2]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d11a      	bne.n	800f03a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2220      	movs	r2, #32
 800f008:	5c9b      	ldrb	r3, [r3, r2]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68da      	ldr	r2, [r3, #12]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2180      	movs	r1, #128	@ 0x80
 800f01a:	0249      	lsls	r1, r1, #9
 800f01c:	430a      	orrs	r2, r1
 800f01e:	60da      	str	r2, [r3, #12]
 800f020:	e00b      	b.n	800f03a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f026:	2220      	movs	r2, #32
 800f028:	431a      	orrs	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f032:	2201      	movs	r2, #1
 800f034:	431a      	orrs	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d11f      	bne.n	800f082 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	691a      	ldr	r2, [r3, #16]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	492a      	ldr	r1, [pc, #168]	@ (800f0f8 <HAL_ADC_Init+0x2e4>)
 800f04e:	400a      	ands	r2, r1
 800f050:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	6919      	ldr	r1, [r3, #16]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f060:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f066:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	430a      	orrs	r2, r1
 800f06e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	691a      	ldr	r2, [r3, #16]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2101      	movs	r1, #1
 800f07c:	430a      	orrs	r2, r1
 800f07e:	611a      	str	r2, [r3, #16]
 800f080:	e00e      	b.n	800f0a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	2201      	movs	r2, #1
 800f08a:	4013      	ands	r3, r2
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d107      	bne.n	800f0a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	691a      	ldr	r2, [r3, #16]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2101      	movs	r1, #1
 800f09c:	438a      	bics	r2, r1
 800f09e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	695a      	ldr	r2, [r3, #20]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2107      	movs	r1, #7
 800f0ac:	438a      	bics	r2, r1
 800f0ae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6959      	ldr	r1, [r3, #20]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0cc:	2203      	movs	r2, #3
 800f0ce:	4393      	bics	r3, r2
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	431a      	orrs	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	0018      	movs	r0, r3
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b002      	add	sp, #8
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	fffffefd 	.word	0xfffffefd
 800f0e8:	40012708 	.word	0x40012708
 800f0ec:	ffc3ffff 	.word	0xffc3ffff
 800f0f0:	fdffffff 	.word	0xfdffffff
 800f0f4:	fffe0219 	.word	0xfffe0219
 800f0f8:	fffffc03 	.word	0xfffffc03

0800f0fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f0fc:	b590      	push	{r4, r7, lr}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f104:	230f      	movs	r3, #15
 800f106:	18fb      	adds	r3, r7, r3
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	2204      	movs	r2, #4
 800f114:	4013      	ands	r3, r2
 800f116:	d138      	bne.n	800f18a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2250      	movs	r2, #80	@ 0x50
 800f11c:	5c9b      	ldrb	r3, [r3, r2]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d101      	bne.n	800f126 <HAL_ADC_Start+0x2a>
 800f122:	2302      	movs	r3, #2
 800f124:	e038      	b.n	800f198 <HAL_ADC_Start+0x9c>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2250      	movs	r2, #80	@ 0x50
 800f12a:	2101      	movs	r1, #1
 800f12c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d007      	beq.n	800f146 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f136:	230f      	movs	r3, #15
 800f138:	18fc      	adds	r4, r7, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	0018      	movs	r0, r3
 800f13e:	f000 f95f 	bl	800f400 <ADC_Enable>
 800f142:	0003      	movs	r3, r0
 800f144:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f146:	230f      	movs	r3, #15
 800f148:	18fb      	adds	r3, r7, r3
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d120      	bne.n	800f192 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f154:	4a12      	ldr	r2, [pc, #72]	@ (800f1a0 <HAL_ADC_Start+0xa4>)
 800f156:	4013      	ands	r3, r2
 800f158:	2280      	movs	r2, #128	@ 0x80
 800f15a:	0052      	lsls	r2, r2, #1
 800f15c:	431a      	orrs	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2250      	movs	r2, #80	@ 0x50
 800f16c:	2100      	movs	r1, #0
 800f16e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	221c      	movs	r2, #28
 800f176:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	689a      	ldr	r2, [r3, #8]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2104      	movs	r1, #4
 800f184:	430a      	orrs	r2, r1
 800f186:	609a      	str	r2, [r3, #8]
 800f188:	e003      	b.n	800f192 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f18a:	230f      	movs	r3, #15
 800f18c:	18fb      	adds	r3, r7, r3
 800f18e:	2202      	movs	r2, #2
 800f190:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f192:	230f      	movs	r3, #15
 800f194:	18fb      	adds	r3, r7, r3
 800f196:	781b      	ldrb	r3, [r3, #0]
}
 800f198:	0018      	movs	r0, r3
 800f19a:	46bd      	mov	sp, r7
 800f19c:	b005      	add	sp, #20
 800f19e:	bd90      	pop	{r4, r7, pc}
 800f1a0:	fffff0fe 	.word	0xfffff0fe

0800f1a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	2b08      	cmp	r3, #8
 800f1bc:	d102      	bne.n	800f1c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f1be:	2308      	movs	r3, #8
 800f1c0:	60fb      	str	r3, [r7, #12]
 800f1c2:	e014      	b.n	800f1ee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	4013      	ands	r3, r2
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d10b      	bne.n	800f1ea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1d6:	2220      	movs	r2, #32
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2250      	movs	r2, #80	@ 0x50
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e072      	b.n	800f2d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f1ea:	230c      	movs	r3, #12
 800f1ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f1ee:	f7ff fda9 	bl	800ed44 <HAL_GetTick>
 800f1f2:	0003      	movs	r3, r0
 800f1f4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f1f6:	e01f      	b.n	800f238 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	d01c      	beq.n	800f238 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <HAL_ADC_PollForConversion+0x70>
 800f204:	f7ff fd9e 	bl	800ed44 <HAL_GetTick>
 800f208:	0002      	movs	r2, r0
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	683a      	ldr	r2, [r7, #0]
 800f210:	429a      	cmp	r2, r3
 800f212:	d211      	bcs.n	800f238 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	4013      	ands	r3, r2
 800f21e:	d10b      	bne.n	800f238 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f224:	2204      	movs	r2, #4
 800f226:	431a      	orrs	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2250      	movs	r2, #80	@ 0x50
 800f230:	2100      	movs	r1, #0
 800f232:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f234:	2303      	movs	r3, #3
 800f236:	e04b      	b.n	800f2d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	4013      	ands	r3, r2
 800f242:	d0d9      	beq.n	800f1f8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f248:	2280      	movs	r2, #128	@ 0x80
 800f24a:	0092      	lsls	r2, r2, #2
 800f24c:	431a      	orrs	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	68da      	ldr	r2, [r3, #12]
 800f258:	23c0      	movs	r3, #192	@ 0xc0
 800f25a:	011b      	lsls	r3, r3, #4
 800f25c:	4013      	ands	r3, r2
 800f25e:	d12e      	bne.n	800f2be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2220      	movs	r2, #32
 800f264:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f266:	2b00      	cmp	r3, #0
 800f268:	d129      	bne.n	800f2be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2208      	movs	r2, #8
 800f272:	4013      	ands	r3, r2
 800f274:	2b08      	cmp	r3, #8
 800f276:	d122      	bne.n	800f2be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	2204      	movs	r2, #4
 800f280:	4013      	ands	r3, r2
 800f282:	d110      	bne.n	800f2a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	210c      	movs	r1, #12
 800f290:	438a      	bics	r2, r1
 800f292:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f298:	4a0f      	ldr	r2, [pc, #60]	@ (800f2d8 <HAL_ADC_PollForConversion+0x134>)
 800f29a:	4013      	ands	r3, r2
 800f29c:	2201      	movs	r2, #1
 800f29e:	431a      	orrs	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f2a4:	e00b      	b.n	800f2be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2aa:	2220      	movs	r2, #32
 800f2ac:	431a      	orrs	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	431a      	orrs	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d103      	bne.n	800f2ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	220c      	movs	r2, #12
 800f2cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	b004      	add	sp, #16
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	fffffefe 	.word	0xfffffefe

0800f2dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f2ea:	0018      	movs	r0, r3
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	b002      	add	sp, #8
 800f2f0:	bd80      	pop	{r7, pc}
	...

0800f2f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2250      	movs	r2, #80	@ 0x50
 800f302:	5c9b      	ldrb	r3, [r3, r2]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d101      	bne.n	800f30c <HAL_ADC_ConfigChannel+0x18>
 800f308:	2302      	movs	r3, #2
 800f30a:	e06c      	b.n	800f3e6 <HAL_ADC_ConfigChannel+0xf2>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2250      	movs	r2, #80	@ 0x50
 800f310:	2101      	movs	r1, #1
 800f312:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	2204      	movs	r2, #4
 800f31c:	4013      	ands	r3, r2
 800f31e:	d00b      	beq.n	800f338 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f324:	2220      	movs	r2, #32
 800f326:	431a      	orrs	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2250      	movs	r2, #80	@ 0x50
 800f330:	2100      	movs	r1, #0
 800f332:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f334:	2301      	movs	r3, #1
 800f336:	e056      	b.n	800f3e6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	4a2c      	ldr	r2, [pc, #176]	@ (800f3f0 <HAL_ADC_ConfigChannel+0xfc>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d028      	beq.n	800f394 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	035b      	lsls	r3, r3, #13
 800f34e:	0b5a      	lsrs	r2, r3, #13
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	430a      	orrs	r2, r1
 800f356:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	2380      	movs	r3, #128	@ 0x80
 800f35e:	02db      	lsls	r3, r3, #11
 800f360:	4013      	ands	r3, r2
 800f362:	d009      	beq.n	800f378 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f364:	4b23      	ldr	r3, [pc, #140]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	4b22      	ldr	r3, [pc, #136]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f36a:	2180      	movs	r1, #128	@ 0x80
 800f36c:	0409      	lsls	r1, r1, #16
 800f36e:	430a      	orrs	r2, r1
 800f370:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f372:	200a      	movs	r0, #10
 800f374:	f000 f8ac 	bl	800f4d0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	2380      	movs	r3, #128	@ 0x80
 800f37e:	029b      	lsls	r3, r3, #10
 800f380:	4013      	ands	r3, r2
 800f382:	d02b      	beq.n	800f3dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f384:	4b1b      	ldr	r3, [pc, #108]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	4b1a      	ldr	r3, [pc, #104]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f38a:	2180      	movs	r1, #128	@ 0x80
 800f38c:	03c9      	lsls	r1, r1, #15
 800f38e:	430a      	orrs	r2, r1
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	e023      	b.n	800f3dc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	035b      	lsls	r3, r3, #13
 800f3a0:	0b5b      	lsrs	r3, r3, #13
 800f3a2:	43d9      	mvns	r1, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	400a      	ands	r2, r1
 800f3aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	2380      	movs	r3, #128	@ 0x80
 800f3b2:	02db      	lsls	r3, r3, #11
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	d005      	beq.n	800f3c4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f3be:	490e      	ldr	r1, [pc, #56]	@ (800f3f8 <HAL_ADC_ConfigChannel+0x104>)
 800f3c0:	400a      	ands	r2, r1
 800f3c2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	2380      	movs	r3, #128	@ 0x80
 800f3ca:	029b      	lsls	r3, r3, #10
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	d005      	beq.n	800f3dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f3d0:	4b08      	ldr	r3, [pc, #32]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	4b07      	ldr	r3, [pc, #28]	@ (800f3f4 <HAL_ADC_ConfigChannel+0x100>)
 800f3d6:	4909      	ldr	r1, [pc, #36]	@ (800f3fc <HAL_ADC_ConfigChannel+0x108>)
 800f3d8:	400a      	ands	r2, r1
 800f3da:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2250      	movs	r2, #80	@ 0x50
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	0018      	movs	r0, r3
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	b002      	add	sp, #8
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	46c0      	nop			@ (mov r8, r8)
 800f3f0:	00001001 	.word	0x00001001
 800f3f4:	40012708 	.word	0x40012708
 800f3f8:	ff7fffff 	.word	0xff7fffff
 800f3fc:	ffbfffff 	.word	0xffbfffff

0800f400 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f408:	2300      	movs	r3, #0
 800f40a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	2203      	movs	r2, #3
 800f414:	4013      	ands	r3, r2
 800f416:	2b01      	cmp	r3, #1
 800f418:	d108      	bne.n	800f42c <ADC_Enable+0x2c>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2201      	movs	r2, #1
 800f422:	4013      	ands	r3, r2
 800f424:	2b01      	cmp	r3, #1
 800f426:	d101      	bne.n	800f42c <ADC_Enable+0x2c>
 800f428:	2301      	movs	r3, #1
 800f42a:	e000      	b.n	800f42e <ADC_Enable+0x2e>
 800f42c:	2300      	movs	r3, #0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d146      	bne.n	800f4c0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	4a24      	ldr	r2, [pc, #144]	@ (800f4cc <ADC_Enable+0xcc>)
 800f43a:	4013      	ands	r3, r2
 800f43c:	d00d      	beq.n	800f45a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f442:	2210      	movs	r2, #16
 800f444:	431a      	orrs	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f44e:	2201      	movs	r2, #1
 800f450:	431a      	orrs	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f456:	2301      	movs	r3, #1
 800f458:	e033      	b.n	800f4c2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	689a      	ldr	r2, [r3, #8]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2101      	movs	r1, #1
 800f466:	430a      	orrs	r2, r1
 800f468:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f46a:	2001      	movs	r0, #1
 800f46c:	f000 f830 	bl	800f4d0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f470:	f7ff fc68 	bl	800ed44 <HAL_GetTick>
 800f474:	0003      	movs	r3, r0
 800f476:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f478:	e01b      	b.n	800f4b2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f47a:	f7ff fc63 	bl	800ed44 <HAL_GetTick>
 800f47e:	0002      	movs	r2, r0
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	2b0a      	cmp	r3, #10
 800f486:	d914      	bls.n	800f4b2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2201      	movs	r2, #1
 800f490:	4013      	ands	r3, r2
 800f492:	2b01      	cmp	r3, #1
 800f494:	d00d      	beq.n	800f4b2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f49a:	2210      	movs	r2, #16
 800f49c:	431a      	orrs	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	e007      	b.n	800f4c2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d1dc      	bne.n	800f47a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	0018      	movs	r0, r3
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	b004      	add	sp, #16
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	46c0      	nop			@ (mov r8, r8)
 800f4cc:	80000017 	.word	0x80000017

0800f4d0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f508 <ADC_DelayMicroSecond+0x38>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	490b      	ldr	r1, [pc, #44]	@ (800f50c <ADC_DelayMicroSecond+0x3c>)
 800f4de:	0018      	movs	r0, r3
 800f4e0:	f7f0 fe60 	bl	80001a4 <__udivsi3>
 800f4e4:	0003      	movs	r3, r0
 800f4e6:	001a      	movs	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4353      	muls	r3, r2
 800f4ec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f4ee:	e002      	b.n	800f4f6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1f9      	bne.n	800f4f0 <ADC_DelayMicroSecond+0x20>
  }
}
 800f4fc:	46c0      	nop			@ (mov r8, r8)
 800f4fe:	46c0      	nop			@ (mov r8, r8)
 800f500:	46bd      	mov	sp, r7
 800f502:	b004      	add	sp, #16
 800f504:	bd80      	pop	{r7, pc}
 800f506:	46c0      	nop			@ (mov r8, r8)
 800f508:	200000d4 	.word	0x200000d4
 800f50c:	000f4240 	.word	0x000f4240

0800f510 <__NVIC_EnableIRQ>:
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	0002      	movs	r2, r0
 800f518:	1dfb      	adds	r3, r7, #7
 800f51a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f51c:	1dfb      	adds	r3, r7, #7
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b7f      	cmp	r3, #127	@ 0x7f
 800f522:	d809      	bhi.n	800f538 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f524:	1dfb      	adds	r3, r7, #7
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	001a      	movs	r2, r3
 800f52a:	231f      	movs	r3, #31
 800f52c:	401a      	ands	r2, r3
 800f52e:	4b04      	ldr	r3, [pc, #16]	@ (800f540 <__NVIC_EnableIRQ+0x30>)
 800f530:	2101      	movs	r1, #1
 800f532:	4091      	lsls	r1, r2
 800f534:	000a      	movs	r2, r1
 800f536:	601a      	str	r2, [r3, #0]
}
 800f538:	46c0      	nop			@ (mov r8, r8)
 800f53a:	46bd      	mov	sp, r7
 800f53c:	b002      	add	sp, #8
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	e000e100 	.word	0xe000e100

0800f544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	0002      	movs	r2, r0
 800f54c:	6039      	str	r1, [r7, #0]
 800f54e:	1dfb      	adds	r3, r7, #7
 800f550:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f552:	1dfb      	adds	r3, r7, #7
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2b7f      	cmp	r3, #127	@ 0x7f
 800f558:	d828      	bhi.n	800f5ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f55a:	4a2f      	ldr	r2, [pc, #188]	@ (800f618 <__NVIC_SetPriority+0xd4>)
 800f55c:	1dfb      	adds	r3, r7, #7
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	b25b      	sxtb	r3, r3
 800f562:	089b      	lsrs	r3, r3, #2
 800f564:	33c0      	adds	r3, #192	@ 0xc0
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	589b      	ldr	r3, [r3, r2]
 800f56a:	1dfa      	adds	r2, r7, #7
 800f56c:	7812      	ldrb	r2, [r2, #0]
 800f56e:	0011      	movs	r1, r2
 800f570:	2203      	movs	r2, #3
 800f572:	400a      	ands	r2, r1
 800f574:	00d2      	lsls	r2, r2, #3
 800f576:	21ff      	movs	r1, #255	@ 0xff
 800f578:	4091      	lsls	r1, r2
 800f57a:	000a      	movs	r2, r1
 800f57c:	43d2      	mvns	r2, r2
 800f57e:	401a      	ands	r2, r3
 800f580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	019b      	lsls	r3, r3, #6
 800f586:	22ff      	movs	r2, #255	@ 0xff
 800f588:	401a      	ands	r2, r3
 800f58a:	1dfb      	adds	r3, r7, #7
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	0018      	movs	r0, r3
 800f590:	2303      	movs	r3, #3
 800f592:	4003      	ands	r3, r0
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f598:	481f      	ldr	r0, [pc, #124]	@ (800f618 <__NVIC_SetPriority+0xd4>)
 800f59a:	1dfb      	adds	r3, r7, #7
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	b25b      	sxtb	r3, r3
 800f5a0:	089b      	lsrs	r3, r3, #2
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	33c0      	adds	r3, #192	@ 0xc0
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f5aa:	e031      	b.n	800f610 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f61c <__NVIC_SetPriority+0xd8>)
 800f5ae:	1dfb      	adds	r3, r7, #7
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	0019      	movs	r1, r3
 800f5b4:	230f      	movs	r3, #15
 800f5b6:	400b      	ands	r3, r1
 800f5b8:	3b08      	subs	r3, #8
 800f5ba:	089b      	lsrs	r3, r3, #2
 800f5bc:	3306      	adds	r3, #6
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	18d3      	adds	r3, r2, r3
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	1dfa      	adds	r2, r7, #7
 800f5c8:	7812      	ldrb	r2, [r2, #0]
 800f5ca:	0011      	movs	r1, r2
 800f5cc:	2203      	movs	r2, #3
 800f5ce:	400a      	ands	r2, r1
 800f5d0:	00d2      	lsls	r2, r2, #3
 800f5d2:	21ff      	movs	r1, #255	@ 0xff
 800f5d4:	4091      	lsls	r1, r2
 800f5d6:	000a      	movs	r2, r1
 800f5d8:	43d2      	mvns	r2, r2
 800f5da:	401a      	ands	r2, r3
 800f5dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	019b      	lsls	r3, r3, #6
 800f5e2:	22ff      	movs	r2, #255	@ 0xff
 800f5e4:	401a      	ands	r2, r3
 800f5e6:	1dfb      	adds	r3, r7, #7
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	0018      	movs	r0, r3
 800f5ec:	2303      	movs	r3, #3
 800f5ee:	4003      	ands	r3, r0
 800f5f0:	00db      	lsls	r3, r3, #3
 800f5f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f5f4:	4809      	ldr	r0, [pc, #36]	@ (800f61c <__NVIC_SetPriority+0xd8>)
 800f5f6:	1dfb      	adds	r3, r7, #7
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	001c      	movs	r4, r3
 800f5fc:	230f      	movs	r3, #15
 800f5fe:	4023      	ands	r3, r4
 800f600:	3b08      	subs	r3, #8
 800f602:	089b      	lsrs	r3, r3, #2
 800f604:	430a      	orrs	r2, r1
 800f606:	3306      	adds	r3, #6
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	18c3      	adds	r3, r0, r3
 800f60c:	3304      	adds	r3, #4
 800f60e:	601a      	str	r2, [r3, #0]
}
 800f610:	46c0      	nop			@ (mov r8, r8)
 800f612:	46bd      	mov	sp, r7
 800f614:	b003      	add	sp, #12
 800f616:	bd90      	pop	{r4, r7, pc}
 800f618:	e000e100 	.word	0xe000e100
 800f61c:	e000ed00 	.word	0xe000ed00

0800f620 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f624:	f3bf 8f4f 	dsb	sy
}
 800f628:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f62a:	4b04      	ldr	r3, [pc, #16]	@ (800f63c <__NVIC_SystemReset+0x1c>)
 800f62c:	4a04      	ldr	r2, [pc, #16]	@ (800f640 <__NVIC_SystemReset+0x20>)
 800f62e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f630:	f3bf 8f4f 	dsb	sy
}
 800f634:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f636:	46c0      	nop			@ (mov r8, r8)
 800f638:	e7fd      	b.n	800f636 <__NVIC_SystemReset+0x16>
 800f63a:	46c0      	nop			@ (mov r8, r8)
 800f63c:	e000ed00 	.word	0xe000ed00
 800f640:	05fa0004 	.word	0x05fa0004

0800f644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	1e5a      	subs	r2, r3, #1
 800f650:	2380      	movs	r3, #128	@ 0x80
 800f652:	045b      	lsls	r3, r3, #17
 800f654:	429a      	cmp	r2, r3
 800f656:	d301      	bcc.n	800f65c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f658:	2301      	movs	r3, #1
 800f65a:	e010      	b.n	800f67e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f65c:	4b0a      	ldr	r3, [pc, #40]	@ (800f688 <SysTick_Config+0x44>)
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	3a01      	subs	r2, #1
 800f662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f664:	2301      	movs	r3, #1
 800f666:	425b      	negs	r3, r3
 800f668:	2103      	movs	r1, #3
 800f66a:	0018      	movs	r0, r3
 800f66c:	f7ff ff6a 	bl	800f544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f670:	4b05      	ldr	r3, [pc, #20]	@ (800f688 <SysTick_Config+0x44>)
 800f672:	2200      	movs	r2, #0
 800f674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f676:	4b04      	ldr	r3, [pc, #16]	@ (800f688 <SysTick_Config+0x44>)
 800f678:	2207      	movs	r2, #7
 800f67a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	0018      	movs	r0, r3
 800f680:	46bd      	mov	sp, r7
 800f682:	b002      	add	sp, #8
 800f684:	bd80      	pop	{r7, pc}
 800f686:	46c0      	nop			@ (mov r8, r8)
 800f688:	e000e010 	.word	0xe000e010

0800f68c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	60b9      	str	r1, [r7, #8]
 800f694:	607a      	str	r2, [r7, #4]
 800f696:	210f      	movs	r1, #15
 800f698:	187b      	adds	r3, r7, r1
 800f69a:	1c02      	adds	r2, r0, #0
 800f69c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	187b      	adds	r3, r7, r1
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	b25b      	sxtb	r3, r3
 800f6a6:	0011      	movs	r1, r2
 800f6a8:	0018      	movs	r0, r3
 800f6aa:	f7ff ff4b 	bl	800f544 <__NVIC_SetPriority>
}
 800f6ae:	46c0      	nop			@ (mov r8, r8)
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	b004      	add	sp, #16
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b082      	sub	sp, #8
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	0002      	movs	r2, r0
 800f6be:	1dfb      	adds	r3, r7, #7
 800f6c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f6c2:	1dfb      	adds	r3, r7, #7
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	b25b      	sxtb	r3, r3
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	f7ff ff21 	bl	800f510 <__NVIC_EnableIRQ>
}
 800f6ce:	46c0      	nop			@ (mov r8, r8)
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	b002      	add	sp, #8
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f6da:	f7ff ffa1 	bl	800f620 <__NVIC_SystemReset>

0800f6de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f7ff ffab 	bl	800f644 <SysTick_Config>
 800f6ee:	0003      	movs	r3, r0
}
 800f6f0:	0018      	movs	r0, r3
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	b002      	add	sp, #8
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f706:	2301      	movs	r3, #1
 800f708:	e061      	b.n	800f7ce <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a32      	ldr	r2, [pc, #200]	@ (800f7d8 <HAL_DMA_Init+0xe0>)
 800f710:	4694      	mov	ip, r2
 800f712:	4463      	add	r3, ip
 800f714:	2114      	movs	r1, #20
 800f716:	0018      	movs	r0, r3
 800f718:	f7f0 fd44 	bl	80001a4 <__udivsi3>
 800f71c:	0003      	movs	r3, r0
 800f71e:	009a      	lsls	r2, r3, #2
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a2d      	ldr	r2, [pc, #180]	@ (800f7dc <HAL_DMA_Init+0xe4>)
 800f728:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2225      	movs	r2, #37	@ 0x25
 800f72e:	2102      	movs	r1, #2
 800f730:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	4a28      	ldr	r2, [pc, #160]	@ (800f7e0 <HAL_DMA_Init+0xe8>)
 800f73e:	4013      	ands	r3, r2
 800f740:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f74a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1b      	ldr	r3, [r3, #32]
 800f768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	689a      	ldr	r2, [r3, #8]
 800f77c:	2380      	movs	r3, #128	@ 0x80
 800f77e:	01db      	lsls	r3, r3, #7
 800f780:	429a      	cmp	r2, r3
 800f782:	d018      	beq.n	800f7b6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f784:	4b17      	ldr	r3, [pc, #92]	@ (800f7e4 <HAL_DMA_Init+0xec>)
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f78c:	211c      	movs	r1, #28
 800f78e:	400b      	ands	r3, r1
 800f790:	210f      	movs	r1, #15
 800f792:	4099      	lsls	r1, r3
 800f794:	000b      	movs	r3, r1
 800f796:	43d9      	mvns	r1, r3
 800f798:	4b12      	ldr	r3, [pc, #72]	@ (800f7e4 <HAL_DMA_Init+0xec>)
 800f79a:	400a      	ands	r2, r1
 800f79c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f79e:	4b11      	ldr	r3, [pc, #68]	@ (800f7e4 <HAL_DMA_Init+0xec>)
 800f7a0:	6819      	ldr	r1, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7aa:	201c      	movs	r0, #28
 800f7ac:	4003      	ands	r3, r0
 800f7ae:	409a      	lsls	r2, r3
 800f7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f7e4 <HAL_DMA_Init+0xec>)
 800f7b2:	430a      	orrs	r2, r1
 800f7b4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2225      	movs	r2, #37	@ 0x25
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2224      	movs	r2, #36	@ 0x24
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	b004      	add	sp, #16
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	46c0      	nop			@ (mov r8, r8)
 800f7d8:	bffdfff8 	.word	0xbffdfff8
 800f7dc:	40020000 	.word	0x40020000
 800f7e0:	ffff800f 	.word	0xffff800f
 800f7e4:	400200a8 	.word	0x400200a8

0800f7e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7f6:	2317      	movs	r3, #23
 800f7f8:	18fb      	adds	r3, r7, r3
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2224      	movs	r2, #36	@ 0x24
 800f802:	5c9b      	ldrb	r3, [r3, r2]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d101      	bne.n	800f80c <HAL_DMA_Start_IT+0x24>
 800f808:	2302      	movs	r3, #2
 800f80a:	e04f      	b.n	800f8ac <HAL_DMA_Start_IT+0xc4>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2224      	movs	r2, #36	@ 0x24
 800f810:	2101      	movs	r1, #1
 800f812:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2225      	movs	r2, #37	@ 0x25
 800f818:	5c9b      	ldrb	r3, [r3, r2]
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d13a      	bne.n	800f896 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2225      	movs	r2, #37	@ 0x25
 800f824:	2102      	movs	r1, #2
 800f826:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2101      	movs	r1, #1
 800f83a:	438a      	bics	r2, r1
 800f83c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	68b9      	ldr	r1, [r7, #8]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 f976 	bl	800fb36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d008      	beq.n	800f864 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	210e      	movs	r1, #14
 800f85e:	430a      	orrs	r2, r1
 800f860:	601a      	str	r2, [r3, #0]
 800f862:	e00f      	b.n	800f884 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2104      	movs	r1, #4
 800f870:	438a      	bics	r2, r1
 800f872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	210a      	movs	r1, #10
 800f880:	430a      	orrs	r2, r1
 800f882:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2101      	movs	r1, #1
 800f890:	430a      	orrs	r2, r1
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	e007      	b.n	800f8a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2224      	movs	r2, #36	@ 0x24
 800f89a:	2100      	movs	r1, #0
 800f89c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f89e:	2317      	movs	r3, #23
 800f8a0:	18fb      	adds	r3, r7, r3
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f8a6:	2317      	movs	r3, #23
 800f8a8:	18fb      	adds	r3, r7, r3
 800f8aa:	781b      	ldrb	r3, [r3, #0]
}
 800f8ac:	0018      	movs	r0, r3
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	b006      	add	sp, #24
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8bc:	230f      	movs	r3, #15
 800f8be:	18fb      	adds	r3, r7, r3
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2225      	movs	r2, #37	@ 0x25
 800f8c8:	5c9b      	ldrb	r3, [r3, r2]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d008      	beq.n	800f8e2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2204      	movs	r2, #4
 800f8d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2224      	movs	r2, #36	@ 0x24
 800f8da:	2100      	movs	r1, #0
 800f8dc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e024      	b.n	800f92c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	210e      	movs	r1, #14
 800f8ee:	438a      	bics	r2, r1
 800f8f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	438a      	bics	r2, r1
 800f900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f906:	221c      	movs	r2, #28
 800f908:	401a      	ands	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f90e:	2101      	movs	r1, #1
 800f910:	4091      	lsls	r1, r2
 800f912:	000a      	movs	r2, r1
 800f914:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2225      	movs	r2, #37	@ 0x25
 800f91a:	2101      	movs	r1, #1
 800f91c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2224      	movs	r2, #36	@ 0x24
 800f922:	2100      	movs	r1, #0
 800f924:	5499      	strb	r1, [r3, r2]

    return status;
 800f926:	230f      	movs	r3, #15
 800f928:	18fb      	adds	r3, r7, r3
 800f92a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f92c:	0018      	movs	r0, r3
 800f92e:	46bd      	mov	sp, r7
 800f930:	b004      	add	sp, #16
 800f932:	bd80      	pop	{r7, pc}

0800f934 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f93c:	210f      	movs	r1, #15
 800f93e:	187b      	adds	r3, r7, r1
 800f940:	2200      	movs	r2, #0
 800f942:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2225      	movs	r2, #37	@ 0x25
 800f948:	5c9b      	ldrb	r3, [r3, r2]
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b02      	cmp	r3, #2
 800f94e:	d006      	beq.n	800f95e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2204      	movs	r2, #4
 800f954:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f956:	187b      	adds	r3, r7, r1
 800f958:	2201      	movs	r2, #1
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	e02a      	b.n	800f9b4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	210e      	movs	r1, #14
 800f96a:	438a      	bics	r2, r1
 800f96c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2101      	movs	r1, #1
 800f97a:	438a      	bics	r2, r1
 800f97c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f982:	221c      	movs	r2, #28
 800f984:	401a      	ands	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f98a:	2101      	movs	r1, #1
 800f98c:	4091      	lsls	r1, r2
 800f98e:	000a      	movs	r2, r1
 800f990:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2225      	movs	r2, #37	@ 0x25
 800f996:	2101      	movs	r1, #1
 800f998:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2224      	movs	r2, #36	@ 0x24
 800f99e:	2100      	movs	r1, #0
 800f9a0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d004      	beq.n	800f9b4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	0010      	movs	r0, r2
 800f9b2:	4798      	blx	r3
    }
  }
  return status;
 800f9b4:	230f      	movs	r3, #15
 800f9b6:	18fb      	adds	r3, r7, r3
 800f9b8:	781b      	ldrb	r3, [r3, #0]
}
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	b004      	add	sp, #16
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9de:	221c      	movs	r2, #28
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	2204      	movs	r2, #4
 800f9e4:	409a      	lsls	r2, r3
 800f9e6:	0013      	movs	r3, r2
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	4013      	ands	r3, r2
 800f9ec:	d026      	beq.n	800fa3c <HAL_DMA_IRQHandler+0x7a>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2204      	movs	r2, #4
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	d022      	beq.n	800fa3c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2220      	movs	r2, #32
 800f9fe:	4013      	ands	r3, r2
 800fa00:	d107      	bne.n	800fa12 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2104      	movs	r1, #4
 800fa0e:	438a      	bics	r2, r1
 800fa10:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa16:	221c      	movs	r2, #28
 800fa18:	401a      	ands	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa1e:	2104      	movs	r1, #4
 800fa20:	4091      	lsls	r1, r2
 800fa22:	000a      	movs	r2, r1
 800fa24:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d100      	bne.n	800fa30 <HAL_DMA_IRQHandler+0x6e>
 800fa2e:	e071      	b.n	800fb14 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	0010      	movs	r0, r2
 800fa38:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fa3a:	e06b      	b.n	800fb14 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa40:	221c      	movs	r2, #28
 800fa42:	4013      	ands	r3, r2
 800fa44:	2202      	movs	r2, #2
 800fa46:	409a      	lsls	r2, r3
 800fa48:	0013      	movs	r3, r2
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	d02d      	beq.n	800faac <HAL_DMA_IRQHandler+0xea>
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2202      	movs	r2, #2
 800fa54:	4013      	ands	r3, r2
 800fa56:	d029      	beq.n	800faac <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2220      	movs	r2, #32
 800fa60:	4013      	ands	r3, r2
 800fa62:	d10b      	bne.n	800fa7c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	210a      	movs	r1, #10
 800fa70:	438a      	bics	r2, r1
 800fa72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2225      	movs	r2, #37	@ 0x25
 800fa78:	2101      	movs	r1, #1
 800fa7a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa80:	221c      	movs	r2, #28
 800fa82:	401a      	ands	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa88:	2102      	movs	r1, #2
 800fa8a:	4091      	lsls	r1, r2
 800fa8c:	000a      	movs	r2, r1
 800fa8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2224      	movs	r2, #36	@ 0x24
 800fa94:	2100      	movs	r1, #0
 800fa96:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d039      	beq.n	800fb14 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	0010      	movs	r0, r2
 800faa8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800faaa:	e033      	b.n	800fb14 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fab0:	221c      	movs	r2, #28
 800fab2:	4013      	ands	r3, r2
 800fab4:	2208      	movs	r2, #8
 800fab6:	409a      	lsls	r2, r3
 800fab8:	0013      	movs	r3, r2
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	4013      	ands	r3, r2
 800fabe:	d02a      	beq.n	800fb16 <HAL_DMA_IRQHandler+0x154>
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2208      	movs	r2, #8
 800fac4:	4013      	ands	r3, r2
 800fac6:	d026      	beq.n	800fb16 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	210e      	movs	r1, #14
 800fad4:	438a      	bics	r2, r1
 800fad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fadc:	221c      	movs	r2, #28
 800fade:	401a      	ands	r2, r3
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae4:	2101      	movs	r1, #1
 800fae6:	4091      	lsls	r1, r2
 800fae8:	000a      	movs	r2, r1
 800faea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2225      	movs	r2, #37	@ 0x25
 800faf6:	2101      	movs	r1, #1
 800faf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2224      	movs	r2, #36	@ 0x24
 800fafe:	2100      	movs	r1, #0
 800fb00:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d005      	beq.n	800fb16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	0010      	movs	r0, r2
 800fb12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	46c0      	nop			@ (mov r8, r8)
}
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	b004      	add	sp, #16
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b082      	sub	sp, #8
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2225      	movs	r2, #37	@ 0x25
 800fb2a:	5c9b      	ldrb	r3, [r3, r2]
 800fb2c:	b2db      	uxtb	r3, r3
}
 800fb2e:	0018      	movs	r0, r3
 800fb30:	46bd      	mov	sp, r7
 800fb32:	b002      	add	sp, #8
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b084      	sub	sp, #16
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	60f8      	str	r0, [r7, #12]
 800fb3e:	60b9      	str	r1, [r7, #8]
 800fb40:	607a      	str	r2, [r7, #4]
 800fb42:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb48:	221c      	movs	r2, #28
 800fb4a:	401a      	ands	r2, r3
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb50:	2101      	movs	r1, #1
 800fb52:	4091      	lsls	r1, r2
 800fb54:	000a      	movs	r2, r1
 800fb56:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	683a      	ldr	r2, [r7, #0]
 800fb5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	2b10      	cmp	r3, #16
 800fb66:	d108      	bne.n	800fb7a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fb78:	e007      	b.n	800fb8a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	68ba      	ldr	r2, [r7, #8]
 800fb80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	60da      	str	r2, [r3, #12]
}
 800fb8a:	46c0      	nop			@ (mov r8, r8)
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	b004      	add	sp, #16
 800fb90:	bd80      	pop	{r7, pc}
	...

0800fb94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fb9c:	f7ff f8d2 	bl	800ed44 <HAL_GetTick>
 800fba0:	0003      	movs	r3, r0
 800fba2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fba4:	e00f      	b.n	800fbc6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	d00c      	beq.n	800fbc6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d007      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0x2e>
 800fbb2:	f7ff f8c7 	bl	800ed44 <HAL_GetTick>
 800fbb6:	0002      	movs	r2, r0
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	1ad3      	subs	r3, r2, r3
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d201      	bcs.n	800fbc6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fbc2:	2303      	movs	r3, #3
 800fbc4:	e052      	b.n	800fc6c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fbc6:	4b2b      	ldr	r3, [pc, #172]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	4013      	ands	r3, r2
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	d0e9      	beq.n	800fba6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fbd2:	4b28      	ldr	r3, [pc, #160]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	2202      	movs	r2, #2
 800fbd8:	4013      	ands	r3, r2
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d102      	bne.n	800fbe4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fbde:	4b25      	ldr	r3, [pc, #148]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fbe0:	2202      	movs	r2, #2
 800fbe2:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fbe4:	4b23      	ldr	r3, [pc, #140]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fbe6:	699a      	ldr	r2, [r3, #24]
 800fbe8:	2380      	movs	r3, #128	@ 0x80
 800fbea:	005b      	lsls	r3, r3, #1
 800fbec:	401a      	ands	r2, r3
 800fbee:	2380      	movs	r3, #128	@ 0x80
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d035      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fbf6:	4b1f      	ldr	r3, [pc, #124]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fbf8:	699a      	ldr	r2, [r3, #24]
 800fbfa:	2380      	movs	r3, #128	@ 0x80
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fc00:	2380      	movs	r3, #128	@ 0x80
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d02c      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fc08:	4b1a      	ldr	r3, [pc, #104]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fc0a:	699a      	ldr	r2, [r3, #24]
 800fc0c:	2380      	movs	r3, #128	@ 0x80
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fc12:	2380      	movs	r3, #128	@ 0x80
 800fc14:	00db      	lsls	r3, r3, #3
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d023      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fc1a:	4b16      	ldr	r3, [pc, #88]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fc1c:	699a      	ldr	r2, [r3, #24]
 800fc1e:	2380      	movs	r3, #128	@ 0x80
 800fc20:	011b      	lsls	r3, r3, #4
 800fc22:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fc24:	2380      	movs	r3, #128	@ 0x80
 800fc26:	011b      	lsls	r3, r3, #4
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d01a      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fc2c:	4b11      	ldr	r3, [pc, #68]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fc2e:	699a      	ldr	r2, [r3, #24]
 800fc30:	2380      	movs	r3, #128	@ 0x80
 800fc32:	019b      	lsls	r3, r3, #6
 800fc34:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fc36:	2380      	movs	r3, #128	@ 0x80
 800fc38:	019b      	lsls	r3, r3, #6
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d011      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fc40:	699a      	ldr	r2, [r3, #24]
 800fc42:	2380      	movs	r3, #128	@ 0x80
 800fc44:	029b      	lsls	r3, r3, #10
 800fc46:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fc48:	2380      	movs	r3, #128	@ 0x80
 800fc4a:	029b      	lsls	r3, r3, #10
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d008      	beq.n	800fc62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fc50:	4b08      	ldr	r3, [pc, #32]	@ (800fc74 <FLASH_WaitForLastOperation+0xe0>)
 800fc52:	699a      	ldr	r2, [r3, #24]
 800fc54:	2380      	movs	r3, #128	@ 0x80
 800fc56:	025b      	lsls	r3, r3, #9
 800fc58:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fc5a:	2380      	movs	r3, #128	@ 0x80
 800fc5c:	025b      	lsls	r3, r3, #9
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d103      	bne.n	800fc6a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fc62:	f000 f809 	bl	800fc78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e000      	b.n	800fc6c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	b004      	add	sp, #16
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	40022000 	.word	0x40022000

0800fc78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fc82:	4b49      	ldr	r3, [pc, #292]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fc84:	699a      	ldr	r2, [r3, #24]
 800fc86:	2380      	movs	r3, #128	@ 0x80
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	401a      	ands	r2, r3
 800fc8c:	2380      	movs	r3, #128	@ 0x80
 800fc8e:	005b      	lsls	r3, r3, #1
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d10a      	bne.n	800fcaa <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fc94:	4b45      	ldr	r3, [pc, #276]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fc96:	695b      	ldr	r3, [r3, #20]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	431a      	orrs	r2, r3
 800fc9c:	4b43      	ldr	r3, [pc, #268]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fc9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2280      	movs	r2, #128	@ 0x80
 800fca4:	0052      	lsls	r2, r2, #1
 800fca6:	4313      	orrs	r3, r2
 800fca8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fcaa:	4b3f      	ldr	r3, [pc, #252]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fcac:	699a      	ldr	r2, [r3, #24]
 800fcae:	2380      	movs	r3, #128	@ 0x80
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	401a      	ands	r2, r3
 800fcb4:	2380      	movs	r3, #128	@ 0x80
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d10a      	bne.n	800fcd2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fcbc:	4b3b      	ldr	r3, [pc, #236]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	4b39      	ldr	r3, [pc, #228]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fcc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2280      	movs	r2, #128	@ 0x80
 800fccc:	0092      	lsls	r2, r2, #2
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fcd2:	4b35      	ldr	r3, [pc, #212]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fcd4:	699a      	ldr	r2, [r3, #24]
 800fcd6:	2380      	movs	r3, #128	@ 0x80
 800fcd8:	00db      	lsls	r3, r3, #3
 800fcda:	401a      	ands	r2, r3
 800fcdc:	2380      	movs	r3, #128	@ 0x80
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d10a      	bne.n	800fcfa <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fce4:	4b31      	ldr	r3, [pc, #196]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fce6:	695b      	ldr	r3, [r3, #20]
 800fce8:	2208      	movs	r2, #8
 800fcea:	431a      	orrs	r2, r3
 800fcec:	4b2f      	ldr	r3, [pc, #188]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fcee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2280      	movs	r2, #128	@ 0x80
 800fcf4:	00d2      	lsls	r2, r2, #3
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fcfa:	4b2b      	ldr	r3, [pc, #172]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fcfc:	699a      	ldr	r2, [r3, #24]
 800fcfe:	2380      	movs	r3, #128	@ 0x80
 800fd00:	011b      	lsls	r3, r3, #4
 800fd02:	401a      	ands	r2, r3
 800fd04:	2380      	movs	r3, #128	@ 0x80
 800fd06:	011b      	lsls	r3, r3, #4
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d10a      	bne.n	800fd22 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fd0c:	4b27      	ldr	r3, [pc, #156]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	2204      	movs	r2, #4
 800fd12:	431a      	orrs	r2, r3
 800fd14:	4b25      	ldr	r3, [pc, #148]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd16:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2280      	movs	r2, #128	@ 0x80
 800fd1c:	0112      	lsls	r2, r2, #4
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fd22:	4b21      	ldr	r3, [pc, #132]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fd24:	699a      	ldr	r2, [r3, #24]
 800fd26:	2380      	movs	r3, #128	@ 0x80
 800fd28:	019b      	lsls	r3, r3, #6
 800fd2a:	401a      	ands	r2, r3
 800fd2c:	2380      	movs	r3, #128	@ 0x80
 800fd2e:	019b      	lsls	r3, r3, #6
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d10a      	bne.n	800fd4a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fd34:	4b1d      	ldr	r3, [pc, #116]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	2210      	movs	r2, #16
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2280      	movs	r2, #128	@ 0x80
 800fd44:	0192      	lsls	r2, r2, #6
 800fd46:	4313      	orrs	r3, r2
 800fd48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fd4a:	4b17      	ldr	r3, [pc, #92]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fd4c:	699a      	ldr	r2, [r3, #24]
 800fd4e:	2380      	movs	r3, #128	@ 0x80
 800fd50:	029b      	lsls	r3, r3, #10
 800fd52:	401a      	ands	r2, r3
 800fd54:	2380      	movs	r3, #128	@ 0x80
 800fd56:	029b      	lsls	r3, r3, #10
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d109      	bne.n	800fd70 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fd5c:	4b13      	ldr	r3, [pc, #76]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd5e:	695b      	ldr	r3, [r3, #20]
 800fd60:	2220      	movs	r2, #32
 800fd62:	431a      	orrs	r2, r3
 800fd64:	4b11      	ldr	r3, [pc, #68]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd66:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2220      	movs	r2, #32
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fd70:	4b0d      	ldr	r3, [pc, #52]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fd72:	699a      	ldr	r2, [r3, #24]
 800fd74:	2380      	movs	r3, #128	@ 0x80
 800fd76:	025b      	lsls	r3, r3, #9
 800fd78:	401a      	ands	r2, r3
 800fd7a:	2380      	movs	r3, #128	@ 0x80
 800fd7c:	025b      	lsls	r3, r3, #9
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d10a      	bne.n	800fd98 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fd82:	4b0a      	ldr	r3, [pc, #40]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	2240      	movs	r2, #64	@ 0x40
 800fd88:	431a      	orrs	r2, r3
 800fd8a:	4b08      	ldr	r3, [pc, #32]	@ (800fdac <FLASH_SetErrorCode+0x134>)
 800fd8c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2280      	movs	r2, #128	@ 0x80
 800fd92:	0252      	lsls	r2, r2, #9
 800fd94:	4313      	orrs	r3, r2
 800fd96:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fd98:	4b03      	ldr	r3, [pc, #12]	@ (800fda8 <FLASH_SetErrorCode+0x130>)
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	619a      	str	r2, [r3, #24]
}  
 800fd9e:	46c0      	nop			@ (mov r8, r8)
 800fda0:	46bd      	mov	sp, r7
 800fda2:	b002      	add	sp, #8
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	46c0      	nop			@ (mov r8, r8)
 800fda8:	40022000 	.word	0x40022000
 800fdac:	200023c0 	.word	0x200023c0

0800fdb0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fdb6:	4b12      	ldr	r3, [pc, #72]	@ (800fe00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	d019      	beq.n	800fdf4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdc0:	f3ef 8310 	mrs	r3, PRIMASK
 800fdc4:	607b      	str	r3, [r7, #4]
  return(result);
 800fdc6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fdc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdca:	b672      	cpsid	i
}
 800fdcc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fdce:	4b0c      	ldr	r3, [pc, #48]	@ (800fe00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fdd0:	4a0c      	ldr	r2, [pc, #48]	@ (800fe04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fdd2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fdd4:	4b0a      	ldr	r3, [pc, #40]	@ (800fe00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fdd6:	4a0c      	ldr	r2, [pc, #48]	@ (800fe08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fdd8:	60da      	str	r2, [r3, #12]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	f383 8810 	msr	PRIMASK, r3
}
 800fde4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fde6:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	2201      	movs	r2, #1
 800fdec:	4013      	ands	r3, r2
 800fdee:	d001      	beq.n	800fdf4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e000      	b.n	800fdf6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	0018      	movs	r0, r3
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	b004      	add	sp, #16
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	46c0      	nop			@ (mov r8, r8)
 800fe00:	40022000 	.word	0x40022000
 800fe04:	89abcdef 	.word	0x89abcdef
 800fe08:	02030405 	.word	0x02030405

0800fe0c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fe10:	4b04      	ldr	r3, [pc, #16]	@ (800fe24 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	4b03      	ldr	r3, [pc, #12]	@ (800fe24 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fe16:	2101      	movs	r1, #1
 800fe18:	430a      	orrs	r2, r1
 800fe1a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	0018      	movs	r0, r3
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	40022000 	.word	0x40022000

0800fe28 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fe28:	b5b0      	push	{r4, r5, r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe30:	250f      	movs	r5, #15
 800fe32:	197b      	adds	r3, r7, r5
 800fe34:	2200      	movs	r2, #0
 800fe36:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe38:	197c      	adds	r4, r7, r5
 800fe3a:	4b0f      	ldr	r3, [pc, #60]	@ (800fe78 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	f7ff fea9 	bl	800fb94 <FLASH_WaitForLastOperation>
 800fe42:	0003      	movs	r3, r0
 800fe44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fe46:	0029      	movs	r1, r5
 800fe48:	187b      	adds	r3, r7, r1
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d10c      	bne.n	800fe6a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fe50:	4b0a      	ldr	r3, [pc, #40]	@ (800fe7c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe5c:	187c      	adds	r4, r7, r1
 800fe5e:	4b06      	ldr	r3, [pc, #24]	@ (800fe78 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fe60:	0018      	movs	r0, r3
 800fe62:	f7ff fe97 	bl	800fb94 <FLASH_WaitForLastOperation>
 800fe66:	0003      	movs	r3, r0
 800fe68:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fe6a:	230f      	movs	r3, #15
 800fe6c:	18fb      	adds	r3, r7, r3
 800fe6e:	781b      	ldrb	r3, [r3, #0]
}  
 800fe70:	0018      	movs	r0, r3
 800fe72:	46bd      	mov	sp, r7
 800fe74:	b004      	add	sp, #16
 800fe76:	bdb0      	pop	{r4, r5, r7, pc}
 800fe78:	0000c350 	.word	0x0000c350
 800fe7c:	200023c0 	.word	0x200023c0

0800fe80 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fe80:	b5b0      	push	{r4, r5, r7, lr}
 800fe82:	b086      	sub	sp, #24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe8c:	2317      	movs	r3, #23
 800fe8e:	18fb      	adds	r3, r7, r3
 800fe90:	2201      	movs	r2, #1
 800fe92:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fe94:	4b24      	ldr	r3, [pc, #144]	@ (800ff28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe96:	7c1b      	ldrb	r3, [r3, #16]
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d101      	bne.n	800fea0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fe9c:	2302      	movs	r3, #2
 800fe9e:	e03e      	b.n	800ff1e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fea0:	4b21      	ldr	r3, [pc, #132]	@ (800ff28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fea2:	2201      	movs	r2, #1
 800fea4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fea6:	2517      	movs	r5, #23
 800fea8:	197c      	adds	r4, r7, r5
 800feaa:	4b20      	ldr	r3, [pc, #128]	@ (800ff2c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800feac:	0018      	movs	r0, r3
 800feae:	f7ff fe71 	bl	800fb94 <FLASH_WaitForLastOperation>
 800feb2:	0003      	movs	r3, r0
 800feb4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800feb6:	197b      	adds	r3, r7, r5
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d129      	bne.n	800ff12 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800febe:	4b1a      	ldr	r3, [pc, #104]	@ (800ff28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	d103      	bne.n	800fed2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	601a      	str	r2, [r3, #0]
 800fed0:	e013      	b.n	800fefa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d104      	bne.n	800fee2 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	b292      	uxth	r2, r2
 800fede:	801a      	strh	r2, [r3, #0]
 800fee0:	e00b      	b.n	800fefa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d104      	bne.n	800fef2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	b2d2      	uxtb	r2, r2
 800feee:	701a      	strb	r2, [r3, #0]
 800fef0:	e003      	b.n	800fefa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800fef2:	2317      	movs	r3, #23
 800fef4:	18fb      	adds	r3, r7, r3
 800fef6:	2201      	movs	r2, #1
 800fef8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800fefa:	2217      	movs	r2, #23
 800fefc:	18bb      	adds	r3, r7, r2
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d106      	bne.n	800ff12 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ff04:	18bc      	adds	r4, r7, r2
 800ff06:	4b09      	ldr	r3, [pc, #36]	@ (800ff2c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ff08:	0018      	movs	r0, r3
 800ff0a:	f7ff fe43 	bl	800fb94 <FLASH_WaitForLastOperation>
 800ff0e:	0003      	movs	r3, r0
 800ff10:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ff12:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	741a      	strb	r2, [r3, #16]

  return status;
 800ff18:	2317      	movs	r3, #23
 800ff1a:	18fb      	adds	r3, r7, r3
 800ff1c:	781b      	ldrb	r3, [r3, #0]
}
 800ff1e:	0018      	movs	r0, r3
 800ff20:	46bd      	mov	sp, r7
 800ff22:	b006      	add	sp, #24
 800ff24:	bdb0      	pop	{r4, r5, r7, pc}
 800ff26:	46c0      	nop			@ (mov r8, r8)
 800ff28:	200023c0 	.word	0x200023c0
 800ff2c:	0000c350 	.word	0x0000c350

0800ff30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800ff42:	2300      	movs	r3, #0
 800ff44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ff46:	e155      	b.n	80101f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4091      	lsls	r1, r2
 800ff52:	000a      	movs	r2, r1
 800ff54:	4013      	ands	r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d100      	bne.n	800ff60 <HAL_GPIO_Init+0x30>
 800ff5e:	e146      	b.n	80101ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	2203      	movs	r2, #3
 800ff66:	4013      	ands	r3, r2
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d005      	beq.n	800ff78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	2203      	movs	r2, #3
 800ff72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d130      	bne.n	800ffda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	005b      	lsls	r3, r3, #1
 800ff82:	2203      	movs	r2, #3
 800ff84:	409a      	lsls	r2, r3
 800ff86:	0013      	movs	r3, r2
 800ff88:	43da      	mvns	r2, r3
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	4013      	ands	r3, r2
 800ff8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	68da      	ldr	r2, [r3, #12]
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	409a      	lsls	r2, r3
 800ff9a:	0013      	movs	r3, r2
 800ff9c:	693a      	ldr	r2, [r7, #16]
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	693a      	ldr	r2, [r7, #16]
 800ffa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ffae:	2201      	movs	r2, #1
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	409a      	lsls	r2, r3
 800ffb4:	0013      	movs	r3, r2
 800ffb6:	43da      	mvns	r2, r3
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	4013      	ands	r3, r2
 800ffbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	091b      	lsrs	r3, r3, #4
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	401a      	ands	r2, r3
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	409a      	lsls	r2, r3
 800ffcc:	0013      	movs	r3, r2
 800ffce:	693a      	ldr	r2, [r7, #16]
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	2203      	movs	r2, #3
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	2b03      	cmp	r3, #3
 800ffe4:	d017      	beq.n	8010016 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	005b      	lsls	r3, r3, #1
 800fff0:	2203      	movs	r2, #3
 800fff2:	409a      	lsls	r2, r3
 800fff4:	0013      	movs	r3, r2
 800fff6:	43da      	mvns	r2, r3
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	4013      	ands	r3, r2
 800fffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	409a      	lsls	r2, r3
 8010008:	0013      	movs	r3, r2
 801000a:	693a      	ldr	r2, [r7, #16]
 801000c:	4313      	orrs	r3, r2
 801000e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	2203      	movs	r2, #3
 801001c:	4013      	ands	r3, r2
 801001e:	2b02      	cmp	r3, #2
 8010020:	d123      	bne.n	801006a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	08da      	lsrs	r2, r3, #3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3208      	adds	r2, #8
 801002a:	0092      	lsls	r2, r2, #2
 801002c:	58d3      	ldr	r3, [r2, r3]
 801002e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	2207      	movs	r2, #7
 8010034:	4013      	ands	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	220f      	movs	r2, #15
 801003a:	409a      	lsls	r2, r3
 801003c:	0013      	movs	r3, r2
 801003e:	43da      	mvns	r2, r3
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	4013      	ands	r3, r2
 8010044:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	691a      	ldr	r2, [r3, #16]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2107      	movs	r1, #7
 801004e:	400b      	ands	r3, r1
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	409a      	lsls	r2, r3
 8010054:	0013      	movs	r3, r2
 8010056:	693a      	ldr	r2, [r7, #16]
 8010058:	4313      	orrs	r3, r2
 801005a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	08da      	lsrs	r2, r3, #3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3208      	adds	r2, #8
 8010064:	0092      	lsls	r2, r2, #2
 8010066:	6939      	ldr	r1, [r7, #16]
 8010068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	2203      	movs	r2, #3
 8010076:	409a      	lsls	r2, r3
 8010078:	0013      	movs	r3, r2
 801007a:	43da      	mvns	r2, r3
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	4013      	ands	r3, r2
 8010080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	2203      	movs	r2, #3
 8010088:	401a      	ands	r2, r3
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	005b      	lsls	r3, r3, #1
 801008e:	409a      	lsls	r2, r3
 8010090:	0013      	movs	r3, r2
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	4313      	orrs	r3, r2
 8010096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	693a      	ldr	r2, [r7, #16]
 801009c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	685a      	ldr	r2, [r3, #4]
 80100a2:	23c0      	movs	r3, #192	@ 0xc0
 80100a4:	029b      	lsls	r3, r3, #10
 80100a6:	4013      	ands	r3, r2
 80100a8:	d100      	bne.n	80100ac <HAL_GPIO_Init+0x17c>
 80100aa:	e0a0      	b.n	80101ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80100ac:	4b57      	ldr	r3, [pc, #348]	@ (801020c <HAL_GPIO_Init+0x2dc>)
 80100ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100b0:	4b56      	ldr	r3, [pc, #344]	@ (801020c <HAL_GPIO_Init+0x2dc>)
 80100b2:	2101      	movs	r1, #1
 80100b4:	430a      	orrs	r2, r1
 80100b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80100b8:	4a55      	ldr	r2, [pc, #340]	@ (8010210 <HAL_GPIO_Init+0x2e0>)
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	089b      	lsrs	r3, r3, #2
 80100be:	3302      	adds	r3, #2
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	589b      	ldr	r3, [r3, r2]
 80100c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	2203      	movs	r2, #3
 80100ca:	4013      	ands	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	220f      	movs	r2, #15
 80100d0:	409a      	lsls	r2, r3
 80100d2:	0013      	movs	r3, r2
 80100d4:	43da      	mvns	r2, r3
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	4013      	ands	r3, r2
 80100da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	23a0      	movs	r3, #160	@ 0xa0
 80100e0:	05db      	lsls	r3, r3, #23
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d01f      	beq.n	8010126 <HAL_GPIO_Init+0x1f6>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a4a      	ldr	r2, [pc, #296]	@ (8010214 <HAL_GPIO_Init+0x2e4>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d019      	beq.n	8010122 <HAL_GPIO_Init+0x1f2>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4a49      	ldr	r2, [pc, #292]	@ (8010218 <HAL_GPIO_Init+0x2e8>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d013      	beq.n	801011e <HAL_GPIO_Init+0x1ee>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a48      	ldr	r2, [pc, #288]	@ (801021c <HAL_GPIO_Init+0x2ec>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d00d      	beq.n	801011a <HAL_GPIO_Init+0x1ea>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a47      	ldr	r2, [pc, #284]	@ (8010220 <HAL_GPIO_Init+0x2f0>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d007      	beq.n	8010116 <HAL_GPIO_Init+0x1e6>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a46      	ldr	r2, [pc, #280]	@ (8010224 <HAL_GPIO_Init+0x2f4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d101      	bne.n	8010112 <HAL_GPIO_Init+0x1e2>
 801010e:	2305      	movs	r3, #5
 8010110:	e00a      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 8010112:	2306      	movs	r3, #6
 8010114:	e008      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 8010116:	2304      	movs	r3, #4
 8010118:	e006      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 801011a:	2303      	movs	r3, #3
 801011c:	e004      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 801011e:	2302      	movs	r3, #2
 8010120:	e002      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 8010122:	2301      	movs	r3, #1
 8010124:	e000      	b.n	8010128 <HAL_GPIO_Init+0x1f8>
 8010126:	2300      	movs	r3, #0
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	2103      	movs	r1, #3
 801012c:	400a      	ands	r2, r1
 801012e:	0092      	lsls	r2, r2, #2
 8010130:	4093      	lsls	r3, r2
 8010132:	693a      	ldr	r2, [r7, #16]
 8010134:	4313      	orrs	r3, r2
 8010136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010138:	4935      	ldr	r1, [pc, #212]	@ (8010210 <HAL_GPIO_Init+0x2e0>)
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	089b      	lsrs	r3, r3, #2
 801013e:	3302      	adds	r3, #2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	693a      	ldr	r2, [r7, #16]
 8010144:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010146:	4b38      	ldr	r3, [pc, #224]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	43da      	mvns	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	4013      	ands	r3, r2
 8010154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	2380      	movs	r3, #128	@ 0x80
 801015c:	035b      	lsls	r3, r3, #13
 801015e:	4013      	ands	r3, r2
 8010160:	d003      	beq.n	801016a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	4313      	orrs	r3, r2
 8010168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801016a:	4b2f      	ldr	r3, [pc, #188]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 801016c:	693a      	ldr	r2, [r7, #16]
 801016e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010170:	4b2d      	ldr	r3, [pc, #180]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	43da      	mvns	r2, r3
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	4013      	ands	r3, r2
 801017e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	2380      	movs	r3, #128	@ 0x80
 8010186:	039b      	lsls	r3, r3, #14
 8010188:	4013      	ands	r3, r2
 801018a:	d003      	beq.n	8010194 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801018c:	693a      	ldr	r2, [r7, #16]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	4313      	orrs	r3, r2
 8010192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010194:	4b24      	ldr	r3, [pc, #144]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801019a:	4b23      	ldr	r3, [pc, #140]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	43da      	mvns	r2, r3
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	4013      	ands	r3, r2
 80101a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	685a      	ldr	r2, [r3, #4]
 80101ae:	2380      	movs	r3, #128	@ 0x80
 80101b0:	029b      	lsls	r3, r3, #10
 80101b2:	4013      	ands	r3, r2
 80101b4:	d003      	beq.n	80101be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80101b6:	693a      	ldr	r2, [r7, #16]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80101be:	4b1a      	ldr	r3, [pc, #104]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 80101c0:	693a      	ldr	r2, [r7, #16]
 80101c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80101c4:	4b18      	ldr	r3, [pc, #96]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	43da      	mvns	r2, r3
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	4013      	ands	r3, r2
 80101d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	685a      	ldr	r2, [r3, #4]
 80101d8:	2380      	movs	r3, #128	@ 0x80
 80101da:	025b      	lsls	r3, r3, #9
 80101dc:	4013      	ands	r3, r2
 80101de:	d003      	beq.n	80101e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80101e0:	693a      	ldr	r2, [r7, #16]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	4313      	orrs	r3, r2
 80101e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80101e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010228 <HAL_GPIO_Init+0x2f8>)
 80101ea:	693a      	ldr	r2, [r7, #16]
 80101ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	3301      	adds	r3, #1
 80101f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	40da      	lsrs	r2, r3
 80101fc:	1e13      	subs	r3, r2, #0
 80101fe:	d000      	beq.n	8010202 <HAL_GPIO_Init+0x2d2>
 8010200:	e6a2      	b.n	800ff48 <HAL_GPIO_Init+0x18>
  }
}
 8010202:	46c0      	nop			@ (mov r8, r8)
 8010204:	46c0      	nop			@ (mov r8, r8)
 8010206:	46bd      	mov	sp, r7
 8010208:	b006      	add	sp, #24
 801020a:	bd80      	pop	{r7, pc}
 801020c:	40021000 	.word	0x40021000
 8010210:	40010000 	.word	0x40010000
 8010214:	50000400 	.word	0x50000400
 8010218:	50000800 	.word	0x50000800
 801021c:	50000c00 	.word	0x50000c00
 8010220:	50001000 	.word	0x50001000
 8010224:	50001c00 	.word	0x50001c00
 8010228:	40010400 	.word	0x40010400

0801022c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	000a      	movs	r2, r1
 8010236:	1cbb      	adds	r3, r7, #2
 8010238:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	1cba      	adds	r2, r7, #2
 8010240:	8812      	ldrh	r2, [r2, #0]
 8010242:	4013      	ands	r3, r2
 8010244:	d004      	beq.n	8010250 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010246:	230f      	movs	r3, #15
 8010248:	18fb      	adds	r3, r7, r3
 801024a:	2201      	movs	r2, #1
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	e003      	b.n	8010258 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010250:	230f      	movs	r3, #15
 8010252:	18fb      	adds	r3, r7, r3
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010258:	230f      	movs	r3, #15
 801025a:	18fb      	adds	r3, r7, r3
 801025c:	781b      	ldrb	r3, [r3, #0]
}
 801025e:	0018      	movs	r0, r3
 8010260:	46bd      	mov	sp, r7
 8010262:	b004      	add	sp, #16
 8010264:	bd80      	pop	{r7, pc}

08010266 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b082      	sub	sp, #8
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	0008      	movs	r0, r1
 8010270:	0011      	movs	r1, r2
 8010272:	1cbb      	adds	r3, r7, #2
 8010274:	1c02      	adds	r2, r0, #0
 8010276:	801a      	strh	r2, [r3, #0]
 8010278:	1c7b      	adds	r3, r7, #1
 801027a:	1c0a      	adds	r2, r1, #0
 801027c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801027e:	1c7b      	adds	r3, r7, #1
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d004      	beq.n	8010290 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010286:	1cbb      	adds	r3, r7, #2
 8010288:	881a      	ldrh	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801028e:	e003      	b.n	8010298 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8010290:	1cbb      	adds	r3, r7, #2
 8010292:	881a      	ldrh	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010298:	46c0      	nop			@ (mov r8, r8)
 801029a:	46bd      	mov	sp, r7
 801029c:	b002      	add	sp, #8
 801029e:	bd80      	pop	{r7, pc}

080102a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	0002      	movs	r2, r0
 80102a8:	1dbb      	adds	r3, r7, #6
 80102aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80102ac:	4b09      	ldr	r3, [pc, #36]	@ (80102d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80102ae:	695b      	ldr	r3, [r3, #20]
 80102b0:	1dba      	adds	r2, r7, #6
 80102b2:	8812      	ldrh	r2, [r2, #0]
 80102b4:	4013      	ands	r3, r2
 80102b6:	d008      	beq.n	80102ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80102b8:	4b06      	ldr	r3, [pc, #24]	@ (80102d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80102ba:	1dba      	adds	r2, r7, #6
 80102bc:	8812      	ldrh	r2, [r2, #0]
 80102be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80102c0:	1dbb      	adds	r3, r7, #6
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	0018      	movs	r0, r3
 80102c6:	f7f8 f803 	bl	80082d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80102ca:	46c0      	nop			@ (mov r8, r8)
 80102cc:	46bd      	mov	sp, r7
 80102ce:	b002      	add	sp, #8
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	46c0      	nop			@ (mov r8, r8)
 80102d4:	40010400 	.word	0x40010400

080102d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d101      	bne.n	80102ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80102e6:	2301      	movs	r3, #1
 80102e8:	e082      	b.n	80103f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2241      	movs	r2, #65	@ 0x41
 80102ee:	5c9b      	ldrb	r3, [r3, r2]
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d107      	bne.n	8010306 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2240      	movs	r2, #64	@ 0x40
 80102fa:	2100      	movs	r1, #0
 80102fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	0018      	movs	r0, r3
 8010302:	f7f7 fac3 	bl	800788c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2241      	movs	r2, #65	@ 0x41
 801030a:	2124      	movs	r1, #36	@ 0x24
 801030c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2101      	movs	r1, #1
 801031a:	438a      	bics	r2, r1
 801031c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685a      	ldr	r2, [r3, #4]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4934      	ldr	r1, [pc, #208]	@ (80103f8 <HAL_I2C_Init+0x120>)
 8010328:	400a      	ands	r2, r1
 801032a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	689a      	ldr	r2, [r3, #8]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4931      	ldr	r1, [pc, #196]	@ (80103fc <HAL_I2C_Init+0x124>)
 8010338:	400a      	ands	r2, r1
 801033a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	2b01      	cmp	r3, #1
 8010342:	d108      	bne.n	8010356 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689a      	ldr	r2, [r3, #8]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2180      	movs	r1, #128	@ 0x80
 801034e:	0209      	lsls	r1, r1, #8
 8010350:	430a      	orrs	r2, r1
 8010352:	609a      	str	r2, [r3, #8]
 8010354:	e007      	b.n	8010366 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	689a      	ldr	r2, [r3, #8]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2184      	movs	r1, #132	@ 0x84
 8010360:	0209      	lsls	r1, r1, #8
 8010362:	430a      	orrs	r2, r1
 8010364:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	2b02      	cmp	r3, #2
 801036c:	d104      	bne.n	8010378 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2280      	movs	r2, #128	@ 0x80
 8010374:	0112      	lsls	r2, r2, #4
 8010376:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	685a      	ldr	r2, [r3, #4]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	491f      	ldr	r1, [pc, #124]	@ (8010400 <HAL_I2C_Init+0x128>)
 8010384:	430a      	orrs	r2, r1
 8010386:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68da      	ldr	r2, [r3, #12]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	491a      	ldr	r1, [pc, #104]	@ (80103fc <HAL_I2C_Init+0x124>)
 8010394:	400a      	ands	r2, r1
 8010396:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	691a      	ldr	r2, [r3, #16]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	695b      	ldr	r3, [r3, #20]
 80103a0:	431a      	orrs	r2, r3
 80103a2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	430a      	orrs	r2, r1
 80103b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	69d9      	ldr	r1, [r3, #28]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a1a      	ldr	r2, [r3, #32]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	430a      	orrs	r2, r1
 80103c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2101      	movs	r1, #1
 80103ce:	430a      	orrs	r2, r1
 80103d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2241      	movs	r2, #65	@ 0x41
 80103dc:	2120      	movs	r1, #32
 80103de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2242      	movs	r2, #66	@ 0x42
 80103ea:	2100      	movs	r1, #0
 80103ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	0018      	movs	r0, r3
 80103f2:	46bd      	mov	sp, r7
 80103f4:	b002      	add	sp, #8
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	f0ffffff 	.word	0xf0ffffff
 80103fc:	ffff7fff 	.word	0xffff7fff
 8010400:	02008000 	.word	0x02008000

08010404 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010404:	b590      	push	{r4, r7, lr}
 8010406:	b089      	sub	sp, #36	@ 0x24
 8010408:	af02      	add	r7, sp, #8
 801040a:	60f8      	str	r0, [r7, #12]
 801040c:	0008      	movs	r0, r1
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	0019      	movs	r1, r3
 8010412:	230a      	movs	r3, #10
 8010414:	18fb      	adds	r3, r7, r3
 8010416:	1c02      	adds	r2, r0, #0
 8010418:	801a      	strh	r2, [r3, #0]
 801041a:	2308      	movs	r3, #8
 801041c:	18fb      	adds	r3, r7, r3
 801041e:	1c0a      	adds	r2, r1, #0
 8010420:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2241      	movs	r2, #65	@ 0x41
 8010426:	5c9b      	ldrb	r3, [r3, r2]
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b20      	cmp	r3, #32
 801042c:	d000      	beq.n	8010430 <HAL_I2C_Master_Transmit+0x2c>
 801042e:	e0e7      	b.n	8010600 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2240      	movs	r2, #64	@ 0x40
 8010434:	5c9b      	ldrb	r3, [r3, r2]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d101      	bne.n	801043e <HAL_I2C_Master_Transmit+0x3a>
 801043a:	2302      	movs	r3, #2
 801043c:	e0e1      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2240      	movs	r2, #64	@ 0x40
 8010442:	2101      	movs	r1, #1
 8010444:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010446:	f7fe fc7d 	bl	800ed44 <HAL_GetTick>
 801044a:	0003      	movs	r3, r0
 801044c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801044e:	2380      	movs	r3, #128	@ 0x80
 8010450:	0219      	lsls	r1, r3, #8
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	2319      	movs	r3, #25
 801045a:	2201      	movs	r2, #1
 801045c:	f001 ff98 	bl	8012390 <I2C_WaitOnFlagUntilTimeout>
 8010460:	1e03      	subs	r3, r0, #0
 8010462:	d001      	beq.n	8010468 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e0cc      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2241      	movs	r2, #65	@ 0x41
 801046c:	2121      	movs	r1, #33	@ 0x21
 801046e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2242      	movs	r2, #66	@ 0x42
 8010474:	2110      	movs	r1, #16
 8010476:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2200      	movs	r2, #0
 801047c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2208      	movs	r2, #8
 8010488:	18ba      	adds	r2, r7, r2
 801048a:	8812      	ldrh	r2, [r2, #0]
 801048c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2200      	movs	r2, #0
 8010492:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010498:	b29b      	uxth	r3, r3
 801049a:	2bff      	cmp	r3, #255	@ 0xff
 801049c:	d911      	bls.n	80104c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	22ff      	movs	r2, #255	@ 0xff
 80104a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	2380      	movs	r3, #128	@ 0x80
 80104ac:	045c      	lsls	r4, r3, #17
 80104ae:	230a      	movs	r3, #10
 80104b0:	18fb      	adds	r3, r7, r3
 80104b2:	8819      	ldrh	r1, [r3, #0]
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	4b55      	ldr	r3, [pc, #340]	@ (801060c <HAL_I2C_Master_Transmit+0x208>)
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	0023      	movs	r3, r4
 80104bc:	f002 f9ba 	bl	8012834 <I2C_TransferConfig>
 80104c0:	e075      	b.n	80105ae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	2380      	movs	r3, #128	@ 0x80
 80104d4:	049c      	lsls	r4, r3, #18
 80104d6:	230a      	movs	r3, #10
 80104d8:	18fb      	adds	r3, r7, r3
 80104da:	8819      	ldrh	r1, [r3, #0]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	4b4b      	ldr	r3, [pc, #300]	@ (801060c <HAL_I2C_Master_Transmit+0x208>)
 80104e0:	9300      	str	r3, [sp, #0]
 80104e2:	0023      	movs	r3, r4
 80104e4:	f002 f9a6 	bl	8012834 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80104e8:	e061      	b.n	80105ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	0018      	movs	r0, r3
 80104f2:	f001 ff9b 	bl	801242c <I2C_WaitOnTXISFlagUntilTimeout>
 80104f6:	1e03      	subs	r3, r0, #0
 80104f8:	d001      	beq.n	80104fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80104fa:	2301      	movs	r3, #1
 80104fc:	e081      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010502:	781a      	ldrb	r2, [r3, #0]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010518:	b29b      	uxth	r3, r3
 801051a:	3b01      	subs	r3, #1
 801051c:	b29a      	uxth	r2, r3
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010526:	3b01      	subs	r3, #1
 8010528:	b29a      	uxth	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010532:	b29b      	uxth	r3, r3
 8010534:	2b00      	cmp	r3, #0
 8010536:	d03a      	beq.n	80105ae <HAL_I2C_Master_Transmit+0x1aa>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801053c:	2b00      	cmp	r3, #0
 801053e:	d136      	bne.n	80105ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	0013      	movs	r3, r2
 801054a:	2200      	movs	r2, #0
 801054c:	2180      	movs	r1, #128	@ 0x80
 801054e:	f001 ff1f 	bl	8012390 <I2C_WaitOnFlagUntilTimeout>
 8010552:	1e03      	subs	r3, r0, #0
 8010554:	d001      	beq.n	801055a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	e053      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801055e:	b29b      	uxth	r3, r3
 8010560:	2bff      	cmp	r3, #255	@ 0xff
 8010562:	d911      	bls.n	8010588 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	22ff      	movs	r2, #255	@ 0xff
 8010568:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801056e:	b2da      	uxtb	r2, r3
 8010570:	2380      	movs	r3, #128	@ 0x80
 8010572:	045c      	lsls	r4, r3, #17
 8010574:	230a      	movs	r3, #10
 8010576:	18fb      	adds	r3, r7, r3
 8010578:	8819      	ldrh	r1, [r3, #0]
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	2300      	movs	r3, #0
 801057e:	9300      	str	r3, [sp, #0]
 8010580:	0023      	movs	r3, r4
 8010582:	f002 f957 	bl	8012834 <I2C_TransferConfig>
 8010586:	e012      	b.n	80105ae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801058c:	b29a      	uxth	r2, r3
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010596:	b2da      	uxtb	r2, r3
 8010598:	2380      	movs	r3, #128	@ 0x80
 801059a:	049c      	lsls	r4, r3, #18
 801059c:	230a      	movs	r3, #10
 801059e:	18fb      	adds	r3, r7, r3
 80105a0:	8819      	ldrh	r1, [r3, #0]
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	2300      	movs	r3, #0
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	0023      	movs	r3, r4
 80105aa:	f002 f943 	bl	8012834 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d198      	bne.n	80104ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	0018      	movs	r0, r3
 80105c0:	f001 ff7a 	bl	80124b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80105c4:	1e03      	subs	r3, r0, #0
 80105c6:	d001      	beq.n	80105cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80105c8:	2301      	movs	r3, #1
 80105ca:	e01a      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2220      	movs	r2, #32
 80105d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	490c      	ldr	r1, [pc, #48]	@ (8010610 <HAL_I2C_Master_Transmit+0x20c>)
 80105e0:	400a      	ands	r2, r1
 80105e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2241      	movs	r2, #65	@ 0x41
 80105e8:	2120      	movs	r1, #32
 80105ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2242      	movs	r2, #66	@ 0x42
 80105f0:	2100      	movs	r1, #0
 80105f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2240      	movs	r2, #64	@ 0x40
 80105f8:	2100      	movs	r1, #0
 80105fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	e000      	b.n	8010602 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010600:	2302      	movs	r3, #2
  }
}
 8010602:	0018      	movs	r0, r3
 8010604:	46bd      	mov	sp, r7
 8010606:	b007      	add	sp, #28
 8010608:	bd90      	pop	{r4, r7, pc}
 801060a:	46c0      	nop			@ (mov r8, r8)
 801060c:	80002000 	.word	0x80002000
 8010610:	fe00e800 	.word	0xfe00e800

08010614 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010614:	b590      	push	{r4, r7, lr}
 8010616:	b089      	sub	sp, #36	@ 0x24
 8010618:	af02      	add	r7, sp, #8
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	0008      	movs	r0, r1
 801061e:	607a      	str	r2, [r7, #4]
 8010620:	0019      	movs	r1, r3
 8010622:	230a      	movs	r3, #10
 8010624:	18fb      	adds	r3, r7, r3
 8010626:	1c02      	adds	r2, r0, #0
 8010628:	801a      	strh	r2, [r3, #0]
 801062a:	2308      	movs	r3, #8
 801062c:	18fb      	adds	r3, r7, r3
 801062e:	1c0a      	adds	r2, r1, #0
 8010630:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2241      	movs	r2, #65	@ 0x41
 8010636:	5c9b      	ldrb	r3, [r3, r2]
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b20      	cmp	r3, #32
 801063c:	d000      	beq.n	8010640 <HAL_I2C_Master_Receive+0x2c>
 801063e:	e0e8      	b.n	8010812 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2240      	movs	r2, #64	@ 0x40
 8010644:	5c9b      	ldrb	r3, [r3, r2]
 8010646:	2b01      	cmp	r3, #1
 8010648:	d101      	bne.n	801064e <HAL_I2C_Master_Receive+0x3a>
 801064a:	2302      	movs	r3, #2
 801064c:	e0e2      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2240      	movs	r2, #64	@ 0x40
 8010652:	2101      	movs	r1, #1
 8010654:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010656:	f7fe fb75 	bl	800ed44 <HAL_GetTick>
 801065a:	0003      	movs	r3, r0
 801065c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801065e:	2380      	movs	r3, #128	@ 0x80
 8010660:	0219      	lsls	r1, r3, #8
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	2319      	movs	r3, #25
 801066a:	2201      	movs	r2, #1
 801066c:	f001 fe90 	bl	8012390 <I2C_WaitOnFlagUntilTimeout>
 8010670:	1e03      	subs	r3, r0, #0
 8010672:	d001      	beq.n	8010678 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010674:	2301      	movs	r3, #1
 8010676:	e0cd      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2241      	movs	r2, #65	@ 0x41
 801067c:	2122      	movs	r1, #34	@ 0x22
 801067e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2242      	movs	r2, #66	@ 0x42
 8010684:	2110      	movs	r1, #16
 8010686:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2208      	movs	r2, #8
 8010698:	18ba      	adds	r2, r7, r2
 801069a:	8812      	ldrh	r2, [r2, #0]
 801069c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	2bff      	cmp	r3, #255	@ 0xff
 80106ac:	d911      	bls.n	80106d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	22ff      	movs	r2, #255	@ 0xff
 80106b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106b8:	b2da      	uxtb	r2, r3
 80106ba:	2380      	movs	r3, #128	@ 0x80
 80106bc:	045c      	lsls	r4, r3, #17
 80106be:	230a      	movs	r3, #10
 80106c0:	18fb      	adds	r3, r7, r3
 80106c2:	8819      	ldrh	r1, [r3, #0]
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	4b55      	ldr	r3, [pc, #340]	@ (801081c <HAL_I2C_Master_Receive+0x208>)
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	0023      	movs	r3, r4
 80106cc:	f002 f8b2 	bl	8012834 <I2C_TransferConfig>
 80106d0:	e076      	b.n	80107c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	2380      	movs	r3, #128	@ 0x80
 80106e4:	049c      	lsls	r4, r3, #18
 80106e6:	230a      	movs	r3, #10
 80106e8:	18fb      	adds	r3, r7, r3
 80106ea:	8819      	ldrh	r1, [r3, #0]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	4b4b      	ldr	r3, [pc, #300]	@ (801081c <HAL_I2C_Master_Receive+0x208>)
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	0023      	movs	r3, r4
 80106f4:	f002 f89e 	bl	8012834 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80106f8:	e062      	b.n	80107c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	0018      	movs	r0, r3
 8010702:	f001 ff1d 	bl	8012540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010706:	1e03      	subs	r3, r0, #0
 8010708:	d001      	beq.n	801070e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801070a:	2301      	movs	r3, #1
 801070c:	e082      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010718:	b2d2      	uxtb	r2, r2
 801071a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801072a:	3b01      	subs	r3, #1
 801072c:	b29a      	uxth	r2, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010736:	b29b      	uxth	r3, r3
 8010738:	3b01      	subs	r3, #1
 801073a:	b29a      	uxth	r2, r3
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010744:	b29b      	uxth	r3, r3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d03a      	beq.n	80107c0 <HAL_I2C_Master_Receive+0x1ac>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801074e:	2b00      	cmp	r3, #0
 8010750:	d136      	bne.n	80107c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	0013      	movs	r3, r2
 801075c:	2200      	movs	r2, #0
 801075e:	2180      	movs	r1, #128	@ 0x80
 8010760:	f001 fe16 	bl	8012390 <I2C_WaitOnFlagUntilTimeout>
 8010764:	1e03      	subs	r3, r0, #0
 8010766:	d001      	beq.n	801076c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010768:	2301      	movs	r3, #1
 801076a:	e053      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010770:	b29b      	uxth	r3, r3
 8010772:	2bff      	cmp	r3, #255	@ 0xff
 8010774:	d911      	bls.n	801079a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	22ff      	movs	r2, #255	@ 0xff
 801077a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010780:	b2da      	uxtb	r2, r3
 8010782:	2380      	movs	r3, #128	@ 0x80
 8010784:	045c      	lsls	r4, r3, #17
 8010786:	230a      	movs	r3, #10
 8010788:	18fb      	adds	r3, r7, r3
 801078a:	8819      	ldrh	r1, [r3, #0]
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	2300      	movs	r3, #0
 8010790:	9300      	str	r3, [sp, #0]
 8010792:	0023      	movs	r3, r4
 8010794:	f002 f84e 	bl	8012834 <I2C_TransferConfig>
 8010798:	e012      	b.n	80107c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801079e:	b29a      	uxth	r2, r3
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107a8:	b2da      	uxtb	r2, r3
 80107aa:	2380      	movs	r3, #128	@ 0x80
 80107ac:	049c      	lsls	r4, r3, #18
 80107ae:	230a      	movs	r3, #10
 80107b0:	18fb      	adds	r3, r7, r3
 80107b2:	8819      	ldrh	r1, [r3, #0]
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	2300      	movs	r3, #0
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	0023      	movs	r3, r4
 80107bc:	f002 f83a 	bl	8012834 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d197      	bne.n	80106fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	0018      	movs	r0, r3
 80107d2:	f001 fe71 	bl	80124b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80107d6:	1e03      	subs	r3, r0, #0
 80107d8:	d001      	beq.n	80107de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80107da:	2301      	movs	r3, #1
 80107dc:	e01a      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2220      	movs	r2, #32
 80107e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	685a      	ldr	r2, [r3, #4]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	490b      	ldr	r1, [pc, #44]	@ (8010820 <HAL_I2C_Master_Receive+0x20c>)
 80107f2:	400a      	ands	r2, r1
 80107f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2241      	movs	r2, #65	@ 0x41
 80107fa:	2120      	movs	r1, #32
 80107fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2242      	movs	r2, #66	@ 0x42
 8010802:	2100      	movs	r1, #0
 8010804:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2240      	movs	r2, #64	@ 0x40
 801080a:	2100      	movs	r1, #0
 801080c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	e000      	b.n	8010814 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010812:	2302      	movs	r3, #2
  }
}
 8010814:	0018      	movs	r0, r3
 8010816:	46bd      	mov	sp, r7
 8010818:	b007      	add	sp, #28
 801081a:	bd90      	pop	{r4, r7, pc}
 801081c:	80002400 	.word	0x80002400
 8010820:	fe00e800 	.word	0xfe00e800

08010824 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010824:	b5b0      	push	{r4, r5, r7, lr}
 8010826:	b088      	sub	sp, #32
 8010828:	af02      	add	r7, sp, #8
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	0008      	movs	r0, r1
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	0019      	movs	r1, r3
 8010832:	230a      	movs	r3, #10
 8010834:	18fb      	adds	r3, r7, r3
 8010836:	1c02      	adds	r2, r0, #0
 8010838:	801a      	strh	r2, [r3, #0]
 801083a:	2308      	movs	r3, #8
 801083c:	18fb      	adds	r3, r7, r3
 801083e:	1c0a      	adds	r2, r1, #0
 8010840:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2241      	movs	r2, #65	@ 0x41
 8010846:	5c9b      	ldrb	r3, [r3, r2]
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b20      	cmp	r3, #32
 801084c:	d000      	beq.n	8010850 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801084e:	e0dd      	b.n	8010a0c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	699a      	ldr	r2, [r3, #24]
 8010856:	2380      	movs	r3, #128	@ 0x80
 8010858:	021b      	lsls	r3, r3, #8
 801085a:	401a      	ands	r2, r3
 801085c:	2380      	movs	r3, #128	@ 0x80
 801085e:	021b      	lsls	r3, r3, #8
 8010860:	429a      	cmp	r2, r3
 8010862:	d101      	bne.n	8010868 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010864:	2302      	movs	r3, #2
 8010866:	e0d2      	b.n	8010a0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2240      	movs	r2, #64	@ 0x40
 801086c:	5c9b      	ldrb	r3, [r3, r2]
 801086e:	2b01      	cmp	r3, #1
 8010870:	d101      	bne.n	8010876 <HAL_I2C_Master_Transmit_DMA+0x52>
 8010872:	2302      	movs	r3, #2
 8010874:	e0cb      	b.n	8010a0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2240      	movs	r2, #64	@ 0x40
 801087a:	2101      	movs	r1, #1
 801087c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	2241      	movs	r2, #65	@ 0x41
 8010882:	2121      	movs	r1, #33	@ 0x21
 8010884:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2242      	movs	r2, #66	@ 0x42
 801088a:	2110      	movs	r1, #16
 801088c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2200      	movs	r2, #0
 8010892:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2208      	movs	r2, #8
 801089e:	18ba      	adds	r2, r7, r2
 80108a0:	8812      	ldrh	r2, [r2, #0]
 80108a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	4a5c      	ldr	r2, [pc, #368]	@ (8010a18 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80108a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	4a5b      	ldr	r2, [pc, #364]	@ (8010a1c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80108ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	2bff      	cmp	r3, #255	@ 0xff
 80108b8:	d906      	bls.n	80108c8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	22ff      	movs	r2, #255	@ 0xff
 80108be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80108c0:	2380      	movs	r3, #128	@ 0x80
 80108c2:	045b      	lsls	r3, r3, #17
 80108c4:	617b      	str	r3, [r7, #20]
 80108c6:	e007      	b.n	80108d8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80108d2:	2380      	movs	r3, #128	@ 0x80
 80108d4:	049b      	lsls	r3, r3, #18
 80108d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d100      	bne.n	80108e2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80108e0:	e078      	b.n	80109d4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d023      	beq.n	8010932 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ee:	4a4c      	ldr	r2, [pc, #304]	@ (8010a20 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80108f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108f6:	4a4b      	ldr	r2, [pc, #300]	@ (8010a24 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80108f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108fe:	2200      	movs	r2, #0
 8010900:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010906:	2200      	movs	r2, #0
 8010908:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801090e:	6879      	ldr	r1, [r7, #4]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3328      	adds	r3, #40	@ 0x28
 8010916:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801091c:	2513      	movs	r5, #19
 801091e:	197c      	adds	r4, r7, r5
 8010920:	f7fe ff62 	bl	800f7e8 <HAL_DMA_Start_IT>
 8010924:	0003      	movs	r3, r0
 8010926:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010928:	197b      	adds	r3, r7, r5
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d13d      	bne.n	80109ac <HAL_I2C_Master_Transmit_DMA+0x188>
 8010930:	e013      	b.n	801095a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2241      	movs	r2, #65	@ 0x41
 8010936:	2120      	movs	r1, #32
 8010938:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2242      	movs	r2, #66	@ 0x42
 801093e:	2100      	movs	r1, #0
 8010940:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010946:	2280      	movs	r2, #128	@ 0x80
 8010948:	431a      	orrs	r2, r3
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2240      	movs	r2, #64	@ 0x40
 8010952:	2100      	movs	r1, #0
 8010954:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	e059      	b.n	8010a0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095e:	b2da      	uxtb	r2, r3
 8010960:	697c      	ldr	r4, [r7, #20]
 8010962:	230a      	movs	r3, #10
 8010964:	18fb      	adds	r3, r7, r3
 8010966:	8819      	ldrh	r1, [r3, #0]
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	4b2f      	ldr	r3, [pc, #188]	@ (8010a28 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	0023      	movs	r3, r4
 8010970:	f001 ff60 	bl	8012834 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010978:	b29a      	uxth	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	b29a      	uxth	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2240      	movs	r2, #64	@ 0x40
 801098a:	2100      	movs	r1, #0
 801098c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2110      	movs	r1, #16
 8010992:	0018      	movs	r0, r3
 8010994:	f001 ff88 	bl	80128a8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2180      	movs	r1, #128	@ 0x80
 80109a4:	01c9      	lsls	r1, r1, #7
 80109a6:	430a      	orrs	r2, r1
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	e02d      	b.n	8010a08 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2241      	movs	r2, #65	@ 0x41
 80109b0:	2120      	movs	r1, #32
 80109b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	2242      	movs	r2, #66	@ 0x42
 80109b8:	2100      	movs	r1, #0
 80109ba:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109c0:	2210      	movs	r2, #16
 80109c2:	431a      	orrs	r2, r3
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2240      	movs	r2, #64	@ 0x40
 80109cc:	2100      	movs	r1, #0
 80109ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80109d0:	2301      	movs	r3, #1
 80109d2:	e01c      	b.n	8010a0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	4a15      	ldr	r2, [pc, #84]	@ (8010a2c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80109d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	2380      	movs	r3, #128	@ 0x80
 80109e2:	049c      	lsls	r4, r3, #18
 80109e4:	230a      	movs	r3, #10
 80109e6:	18fb      	adds	r3, r7, r3
 80109e8:	8819      	ldrh	r1, [r3, #0]
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	4b0e      	ldr	r3, [pc, #56]	@ (8010a28 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	0023      	movs	r3, r4
 80109f2:	f001 ff1f 	bl	8012834 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2240      	movs	r2, #64	@ 0x40
 80109fa:	2100      	movs	r1, #0
 80109fc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2101      	movs	r1, #1
 8010a02:	0018      	movs	r0, r3
 8010a04:	f001 ff50 	bl	80128a8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e000      	b.n	8010a0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010a0c:	2302      	movs	r3, #2
  }
}
 8010a0e:	0018      	movs	r0, r3
 8010a10:	46bd      	mov	sp, r7
 8010a12:	b006      	add	sp, #24
 8010a14:	bdb0      	pop	{r4, r5, r7, pc}
 8010a16:	46c0      	nop			@ (mov r8, r8)
 8010a18:	ffff0000 	.word	0xffff0000
 8010a1c:	08011229 	.word	0x08011229
 8010a20:	080121e1 	.word	0x080121e1
 8010a24:	08012321 	.word	0x08012321
 8010a28:	80002000 	.word	0x80002000
 8010a2c:	08010dd5 	.word	0x08010dd5

08010a30 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	0008      	movs	r0, r1
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	0019      	movs	r1, r3
 8010a3e:	230a      	movs	r3, #10
 8010a40:	18fb      	adds	r3, r7, r3
 8010a42:	1c02      	adds	r2, r0, #0
 8010a44:	801a      	strh	r2, [r3, #0]
 8010a46:	2308      	movs	r3, #8
 8010a48:	18fb      	adds	r3, r7, r3
 8010a4a:	1c0a      	adds	r2, r1, #0
 8010a4c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2241      	movs	r2, #65	@ 0x41
 8010a52:	5c9b      	ldrb	r3, [r3, r2]
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	2b20      	cmp	r3, #32
 8010a58:	d000      	beq.n	8010a5c <HAL_I2C_Master_Receive_DMA+0x2c>
 8010a5a:	e0dd      	b.n	8010c18 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	699a      	ldr	r2, [r3, #24]
 8010a62:	2380      	movs	r3, #128	@ 0x80
 8010a64:	021b      	lsls	r3, r3, #8
 8010a66:	401a      	ands	r2, r3
 8010a68:	2380      	movs	r3, #128	@ 0x80
 8010a6a:	021b      	lsls	r3, r3, #8
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d101      	bne.n	8010a74 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010a70:	2302      	movs	r3, #2
 8010a72:	e0d2      	b.n	8010c1a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2240      	movs	r2, #64	@ 0x40
 8010a78:	5c9b      	ldrb	r3, [r3, r2]
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d101      	bne.n	8010a82 <HAL_I2C_Master_Receive_DMA+0x52>
 8010a7e:	2302      	movs	r3, #2
 8010a80:	e0cb      	b.n	8010c1a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2240      	movs	r2, #64	@ 0x40
 8010a86:	2101      	movs	r1, #1
 8010a88:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2241      	movs	r2, #65	@ 0x41
 8010a8e:	2122      	movs	r1, #34	@ 0x22
 8010a90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2242      	movs	r2, #66	@ 0x42
 8010a96:	2110      	movs	r1, #16
 8010a98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2208      	movs	r2, #8
 8010aaa:	18ba      	adds	r2, r7, r2
 8010aac:	8812      	ldrh	r2, [r2, #0]
 8010aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8010c24 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	4a5b      	ldr	r2, [pc, #364]	@ (8010c28 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010aba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	2bff      	cmp	r3, #255	@ 0xff
 8010ac4:	d906      	bls.n	8010ad4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	22ff      	movs	r2, #255	@ 0xff
 8010aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010acc:	2380      	movs	r3, #128	@ 0x80
 8010ace:	045b      	lsls	r3, r3, #17
 8010ad0:	617b      	str	r3, [r7, #20]
 8010ad2:	e007      	b.n	8010ae4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010ade:	2380      	movs	r3, #128	@ 0x80
 8010ae0:	049b      	lsls	r3, r3, #18
 8010ae2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d100      	bne.n	8010aee <HAL_I2C_Master_Receive_DMA+0xbe>
 8010aec:	e078      	b.n	8010be0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d023      	beq.n	8010b3e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010afa:	4a4c      	ldr	r2, [pc, #304]	@ (8010c2c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010afc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b02:	4a4b      	ldr	r2, [pc, #300]	@ (8010c30 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010b04:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b12:	2200      	movs	r2, #0
 8010b14:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3324      	adds	r3, #36	@ 0x24
 8010b20:	0019      	movs	r1, r3
 8010b22:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010b28:	2513      	movs	r5, #19
 8010b2a:	197c      	adds	r4, r7, r5
 8010b2c:	f7fe fe5c 	bl	800f7e8 <HAL_DMA_Start_IT>
 8010b30:	0003      	movs	r3, r0
 8010b32:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010b34:	197b      	adds	r3, r7, r5
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d13d      	bne.n	8010bb8 <HAL_I2C_Master_Receive_DMA+0x188>
 8010b3c:	e013      	b.n	8010b66 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2241      	movs	r2, #65	@ 0x41
 8010b42:	2120      	movs	r1, #32
 8010b44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2242      	movs	r2, #66	@ 0x42
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b52:	2280      	movs	r2, #128	@ 0x80
 8010b54:	431a      	orrs	r2, r3
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2240      	movs	r2, #64	@ 0x40
 8010b5e:	2100      	movs	r1, #0
 8010b60:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	e059      	b.n	8010c1a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	697c      	ldr	r4, [r7, #20]
 8010b6e:	230a      	movs	r3, #10
 8010b70:	18fb      	adds	r3, r7, r3
 8010b72:	8819      	ldrh	r1, [r3, #0]
 8010b74:	68f8      	ldr	r0, [r7, #12]
 8010b76:	4b2f      	ldr	r3, [pc, #188]	@ (8010c34 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	0023      	movs	r3, r4
 8010b7c:	f001 fe5a 	bl	8012834 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b84:	b29a      	uxth	r2, r3
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2240      	movs	r2, #64	@ 0x40
 8010b96:	2100      	movs	r1, #0
 8010b98:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2110      	movs	r1, #16
 8010b9e:	0018      	movs	r0, r3
 8010ba0:	f001 fe82 	bl	80128a8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2180      	movs	r1, #128	@ 0x80
 8010bb0:	0209      	lsls	r1, r1, #8
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	e02d      	b.n	8010c14 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2241      	movs	r2, #65	@ 0x41
 8010bbc:	2120      	movs	r1, #32
 8010bbe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2242      	movs	r2, #66	@ 0x42
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bcc:	2210      	movs	r2, #16
 8010bce:	431a      	orrs	r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2240      	movs	r2, #64	@ 0x40
 8010bd8:	2100      	movs	r1, #0
 8010bda:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e01c      	b.n	8010c1a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	4a15      	ldr	r2, [pc, #84]	@ (8010c38 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010be4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	2380      	movs	r3, #128	@ 0x80
 8010bee:	049c      	lsls	r4, r3, #18
 8010bf0:	230a      	movs	r3, #10
 8010bf2:	18fb      	adds	r3, r7, r3
 8010bf4:	8819      	ldrh	r1, [r3, #0]
 8010bf6:	68f8      	ldr	r0, [r7, #12]
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8010c34 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	0023      	movs	r3, r4
 8010bfe:	f001 fe19 	bl	8012834 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2240      	movs	r2, #64	@ 0x40
 8010c06:	2100      	movs	r1, #0
 8010c08:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	0018      	movs	r0, r3
 8010c10:	f001 fe4a 	bl	80128a8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010c14:	2300      	movs	r3, #0
 8010c16:	e000      	b.n	8010c1a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010c18:	2302      	movs	r3, #2
  }
}
 8010c1a:	0018      	movs	r0, r3
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	b006      	add	sp, #24
 8010c20:	bdb0      	pop	{r4, r5, r7, pc}
 8010c22:	46c0      	nop			@ (mov r8, r8)
 8010c24:	ffff0000 	.word	0xffff0000
 8010c28:	08011229 	.word	0x08011229
 8010c2c:	08012281 	.word	0x08012281
 8010c30:	08012321 	.word	0x08012321
 8010c34:	80002400 	.word	0x80002400
 8010c38:	08010dd5 	.word	0x08010dd5

08010c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	699b      	ldr	r3, [r3, #24]
 8010c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d005      	beq.n	8010c68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	68f9      	ldr	r1, [r7, #12]
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	4798      	blx	r3
  }
}
 8010c68:	46c0      	nop			@ (mov r8, r8)
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	b004      	add	sp, #16
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010c88:	697a      	ldr	r2, [r7, #20]
 8010c8a:	2380      	movs	r3, #128	@ 0x80
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	4013      	ands	r3, r2
 8010c90:	d00e      	beq.n	8010cb0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	2280      	movs	r2, #128	@ 0x80
 8010c96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010c98:	d00a      	beq.n	8010cb0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c9e:	2201      	movs	r2, #1
 8010ca0:	431a      	orrs	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2280      	movs	r2, #128	@ 0x80
 8010cac:	0052      	lsls	r2, r2, #1
 8010cae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010cb0:	697a      	ldr	r2, [r7, #20]
 8010cb2:	2380      	movs	r3, #128	@ 0x80
 8010cb4:	00db      	lsls	r3, r3, #3
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	d00e      	beq.n	8010cd8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	2280      	movs	r2, #128	@ 0x80
 8010cbe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010cc0:	d00a      	beq.n	8010cd8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cc6:	2208      	movs	r2, #8
 8010cc8:	431a      	orrs	r2, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2280      	movs	r2, #128	@ 0x80
 8010cd4:	00d2      	lsls	r2, r2, #3
 8010cd6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010cd8:	697a      	ldr	r2, [r7, #20]
 8010cda:	2380      	movs	r3, #128	@ 0x80
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4013      	ands	r3, r2
 8010ce0:	d00e      	beq.n	8010d00 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2280      	movs	r2, #128	@ 0x80
 8010ce6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010ce8:	d00a      	beq.n	8010d00 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cee:	2202      	movs	r2, #2
 8010cf0:	431a      	orrs	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2280      	movs	r2, #128	@ 0x80
 8010cfc:	0092      	lsls	r2, r2, #2
 8010cfe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d04:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	220b      	movs	r2, #11
 8010d0a:	4013      	ands	r3, r2
 8010d0c:	d005      	beq.n	8010d1a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	0011      	movs	r1, r2
 8010d14:	0018      	movs	r0, r3
 8010d16:	f001 f915 	bl	8011f44 <I2C_ITError>
  }
}
 8010d1a:	46c0      	nop			@ (mov r8, r8)
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	b006      	add	sp, #24
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	b002      	add	sp, #8
 8010d30:	bd80      	pop	{r7, pc}

08010d32 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b082      	sub	sp, #8
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010d3a:	46c0      	nop			@ (mov r8, r8)
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	b002      	add	sp, #8
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b082      	sub	sp, #8
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010d4a:	46c0      	nop			@ (mov r8, r8)
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	b002      	add	sp, #8
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b082      	sub	sp, #8
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010d5a:	46c0      	nop			@ (mov r8, r8)
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
 8010d6a:	0008      	movs	r0, r1
 8010d6c:	0011      	movs	r1, r2
 8010d6e:	1cfb      	adds	r3, r7, #3
 8010d70:	1c02      	adds	r2, r0, #0
 8010d72:	701a      	strb	r2, [r3, #0]
 8010d74:	003b      	movs	r3, r7
 8010d76:	1c0a      	adds	r2, r1, #0
 8010d78:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010d7a:	46c0      	nop			@ (mov r8, r8)
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	b002      	add	sp, #8
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b082      	sub	sp, #8
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010d8a:	46c0      	nop			@ (mov r8, r8)
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	b002      	add	sp, #8
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b082      	sub	sp, #8
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010d9a:	46c0      	nop			@ (mov r8, r8)
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	b002      	add	sp, #8
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b082      	sub	sp, #8
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010daa:	46c0      	nop			@ (mov r8, r8)
 8010dac:	46bd      	mov	sp, r7
 8010dae:	b002      	add	sp, #8
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b082      	sub	sp, #8
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010dba:	46c0      	nop			@ (mov r8, r8)
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	b002      	add	sp, #8
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b082      	sub	sp, #8
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010dca:	46c0      	nop			@ (mov r8, r8)
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	b002      	add	sp, #8
 8010dd0:	bd80      	pop	{r7, pc}
	...

08010dd4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010dd4:	b590      	push	{r4, r7, lr}
 8010dd6:	b089      	sub	sp, #36	@ 0x24
 8010dd8:	af02      	add	r7, sp, #8
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2240      	movs	r2, #64	@ 0x40
 8010de8:	5c9b      	ldrb	r3, [r3, r2]
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d101      	bne.n	8010df2 <I2C_Master_ISR_IT+0x1e>
 8010dee:	2302      	movs	r3, #2
 8010df0:	e113      	b.n	801101a <I2C_Master_ISR_IT+0x246>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2240      	movs	r2, #64	@ 0x40
 8010df6:	2101      	movs	r1, #1
 8010df8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	2210      	movs	r2, #16
 8010dfe:	4013      	ands	r3, r2
 8010e00:	d012      	beq.n	8010e28 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2210      	movs	r2, #16
 8010e06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010e08:	d00e      	beq.n	8010e28 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2210      	movs	r2, #16
 8010e10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e16:	2204      	movs	r2, #4
 8010e18:	431a      	orrs	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	0018      	movs	r0, r3
 8010e22:	f001 f9ba 	bl	801219a <I2C_Flush_TXDR>
 8010e26:	e0e5      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	2204      	movs	r2, #4
 8010e2c:	4013      	ands	r3, r2
 8010e2e:	d021      	beq.n	8010e74 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2204      	movs	r2, #4
 8010e34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010e36:	d01d      	beq.n	8010e74 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2204      	movs	r2, #4
 8010e3c:	4393      	bics	r3, r2
 8010e3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e4a:	b2d2      	uxtb	r2, r2
 8010e4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	3b01      	subs	r3, #1
 8010e6c:	b29a      	uxth	r2, r3
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010e72:	e0bf      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	2202      	movs	r2, #2
 8010e78:	4013      	ands	r3, r2
 8010e7a:	d01c      	beq.n	8010eb6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2202      	movs	r2, #2
 8010e80:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010e82:	d018      	beq.n	8010eb6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e88:	781a      	ldrb	r2, [r3, #0]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e94:	1c5a      	adds	r2, r3, #1
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	3b01      	subs	r3, #1
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010eb4:	e09e      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	2280      	movs	r2, #128	@ 0x80
 8010eba:	4013      	ands	r3, r2
 8010ebc:	d100      	bne.n	8010ec0 <I2C_Master_ISR_IT+0xec>
 8010ebe:	e069      	b.n	8010f94 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2240      	movs	r2, #64	@ 0x40
 8010ec4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010ec6:	d065      	beq.n	8010f94 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d04a      	beq.n	8010f68 <I2C_Master_ISR_IT+0x194>
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d146      	bne.n	8010f68 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	2112      	movs	r1, #18
 8010ee4:	187b      	adds	r3, r7, r1
 8010ee6:	0592      	lsls	r2, r2, #22
 8010ee8:	0d92      	lsrs	r2, r2, #22
 8010eea:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	2bff      	cmp	r3, #255	@ 0xff
 8010ef4:	d910      	bls.n	8010f18 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	22ff      	movs	r2, #255	@ 0xff
 8010efa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	2380      	movs	r3, #128	@ 0x80
 8010f04:	045c      	lsls	r4, r3, #17
 8010f06:	187b      	adds	r3, r7, r1
 8010f08:	8819      	ldrh	r1, [r3, #0]
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	0023      	movs	r3, r4
 8010f12:	f001 fc8f 	bl	8012834 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f16:	e03c      	b.n	8010f92 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f26:	4a3f      	ldr	r2, [pc, #252]	@ (8011024 <I2C_Master_ISR_IT+0x250>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d00e      	beq.n	8010f4a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f30:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f36:	2312      	movs	r3, #18
 8010f38:	18fb      	adds	r3, r7, r3
 8010f3a:	8819      	ldrh	r1, [r3, #0]
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	2300      	movs	r3, #0
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	0023      	movs	r3, r4
 8010f44:	f001 fc76 	bl	8012834 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f48:	e023      	b.n	8010f92 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	2380      	movs	r3, #128	@ 0x80
 8010f52:	049c      	lsls	r4, r3, #18
 8010f54:	2312      	movs	r3, #18
 8010f56:	18fb      	adds	r3, r7, r3
 8010f58:	8819      	ldrh	r1, [r3, #0]
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	0023      	movs	r3, r4
 8010f62:	f001 fc67 	bl	8012834 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f66:	e014      	b.n	8010f92 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	685a      	ldr	r2, [r3, #4]
 8010f6e:	2380      	movs	r3, #128	@ 0x80
 8010f70:	049b      	lsls	r3, r3, #18
 8010f72:	401a      	ands	r2, r3
 8010f74:	2380      	movs	r3, #128	@ 0x80
 8010f76:	049b      	lsls	r3, r3, #18
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d004      	beq.n	8010f86 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	0018      	movs	r0, r3
 8010f80:	f000 fcf4 	bl	801196c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f84:	e036      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2140      	movs	r1, #64	@ 0x40
 8010f8a:	0018      	movs	r0, r3
 8010f8c:	f000 ffda 	bl	8011f44 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f90:	e030      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
 8010f92:	e02f      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2240      	movs	r2, #64	@ 0x40
 8010f98:	4013      	ands	r3, r2
 8010f9a:	d02b      	beq.n	8010ff4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2240      	movs	r2, #64	@ 0x40
 8010fa0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010fa2:	d027      	beq.n	8010ff4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d11d      	bne.n	8010fea <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	2380      	movs	r3, #128	@ 0x80
 8010fb6:	049b      	lsls	r3, r3, #18
 8010fb8:	401a      	ands	r2, r3
 8010fba:	2380      	movs	r3, #128	@ 0x80
 8010fbc:	049b      	lsls	r3, r3, #18
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d018      	beq.n	8010ff4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc6:	4a17      	ldr	r2, [pc, #92]	@ (8011024 <I2C_Master_ISR_IT+0x250>)
 8010fc8:	4293      	cmp	r3, r2
 8010fca:	d109      	bne.n	8010fe0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	685a      	ldr	r2, [r3, #4]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2180      	movs	r1, #128	@ 0x80
 8010fd8:	01c9      	lsls	r1, r1, #7
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	605a      	str	r2, [r3, #4]
 8010fde:	e009      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	0018      	movs	r0, r3
 8010fe4:	f000 fcc2 	bl	801196c <I2C_ITMasterSeqCplt>
 8010fe8:	e004      	b.n	8010ff4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2140      	movs	r1, #64	@ 0x40
 8010fee:	0018      	movs	r0, r3
 8010ff0:	f000 ffa8 	bl	8011f44 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	2220      	movs	r2, #32
 8010ff8:	4013      	ands	r3, r2
 8010ffa:	d009      	beq.n	8011010 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2220      	movs	r2, #32
 8011000:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011002:	d005      	beq.n	8011010 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	0011      	movs	r1, r2
 801100a:	0018      	movs	r0, r3
 801100c:	f000 fd54 	bl	8011ab8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2240      	movs	r2, #64	@ 0x40
 8011014:	2100      	movs	r1, #0
 8011016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011018:	2300      	movs	r3, #0
}
 801101a:	0018      	movs	r0, r3
 801101c:	46bd      	mov	sp, r7
 801101e:	b007      	add	sp, #28
 8011020:	bd90      	pop	{r4, r7, pc}
 8011022:	46c0      	nop			@ (mov r8, r8)
 8011024:	ffff0000 	.word	0xffff0000

08011028 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011038:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2240      	movs	r2, #64	@ 0x40
 8011042:	5c9b      	ldrb	r3, [r3, r2]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d101      	bne.n	801104c <I2C_Slave_ISR_IT+0x24>
 8011048:	2302      	movs	r3, #2
 801104a:	e0e6      	b.n	801121a <I2C_Slave_ISR_IT+0x1f2>
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2240      	movs	r2, #64	@ 0x40
 8011050:	2101      	movs	r1, #1
 8011052:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	2220      	movs	r2, #32
 8011058:	4013      	ands	r3, r2
 801105a:	d009      	beq.n	8011070 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2220      	movs	r2, #32
 8011060:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011062:	d005      	beq.n	8011070 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	0011      	movs	r1, r2
 801106a:	0018      	movs	r0, r3
 801106c:	f000 fdf2 	bl	8011c54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	2210      	movs	r2, #16
 8011074:	4013      	ands	r3, r2
 8011076:	d052      	beq.n	801111e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2210      	movs	r2, #16
 801107c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801107e:	d04e      	beq.n	801111e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011084:	b29b      	uxth	r3, r3
 8011086:	2b00      	cmp	r3, #0
 8011088:	d12d      	bne.n	80110e6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2241      	movs	r2, #65	@ 0x41
 801108e:	5c9b      	ldrb	r3, [r3, r2]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	2b28      	cmp	r3, #40	@ 0x28
 8011094:	d10b      	bne.n	80110ae <I2C_Slave_ISR_IT+0x86>
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	2380      	movs	r3, #128	@ 0x80
 801109a:	049b      	lsls	r3, r3, #18
 801109c:	429a      	cmp	r2, r3
 801109e:	d106      	bne.n	80110ae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80110a0:	693a      	ldr	r2, [r7, #16]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	0011      	movs	r1, r2
 80110a6:	0018      	movs	r0, r3
 80110a8:	f000 fef4 	bl	8011e94 <I2C_ITListenCplt>
 80110ac:	e036      	b.n	801111c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2241      	movs	r2, #65	@ 0x41
 80110b2:	5c9b      	ldrb	r3, [r3, r2]
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b29      	cmp	r3, #41	@ 0x29
 80110b8:	d110      	bne.n	80110dc <I2C_Slave_ISR_IT+0xb4>
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	4a59      	ldr	r2, [pc, #356]	@ (8011224 <I2C_Slave_ISR_IT+0x1fc>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d00c      	beq.n	80110dc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2210      	movs	r2, #16
 80110c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	0018      	movs	r0, r3
 80110ce:	f001 f864 	bl	801219a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	0018      	movs	r0, r3
 80110d6:	f000 fc8b 	bl	80119f0 <I2C_ITSlaveSeqCplt>
 80110da:	e01f      	b.n	801111c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2210      	movs	r2, #16
 80110e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80110e4:	e091      	b.n	801120a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2210      	movs	r2, #16
 80110ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110f2:	2204      	movs	r2, #4
 80110f4:	431a      	orrs	r2, r3
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d005      	beq.n	801110c <I2C_Slave_ISR_IT+0xe4>
 8011100:	697a      	ldr	r2, [r7, #20]
 8011102:	2380      	movs	r3, #128	@ 0x80
 8011104:	045b      	lsls	r3, r3, #17
 8011106:	429a      	cmp	r2, r3
 8011108:	d000      	beq.n	801110c <I2C_Slave_ISR_IT+0xe4>
 801110a:	e07e      	b.n	801120a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	0011      	movs	r1, r2
 8011114:	0018      	movs	r0, r3
 8011116:	f000 ff15 	bl	8011f44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801111a:	e076      	b.n	801120a <I2C_Slave_ISR_IT+0x1e2>
 801111c:	e075      	b.n	801120a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	2204      	movs	r2, #4
 8011122:	4013      	ands	r3, r2
 8011124:	d02f      	beq.n	8011186 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2204      	movs	r2, #4
 801112a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801112c:	d02b      	beq.n	8011186 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011132:	b29b      	uxth	r3, r3
 8011134:	2b00      	cmp	r3, #0
 8011136:	d018      	beq.n	801116a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011142:	b2d2      	uxtb	r2, r2
 8011144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011154:	3b01      	subs	r3, #1
 8011156:	b29a      	uxth	r2, r3
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011160:	b29b      	uxth	r3, r3
 8011162:	3b01      	subs	r3, #1
 8011164:	b29a      	uxth	r2, r3
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801116e:	b29b      	uxth	r3, r3
 8011170:	2b00      	cmp	r3, #0
 8011172:	d14c      	bne.n	801120e <I2C_Slave_ISR_IT+0x1e6>
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	4a2b      	ldr	r2, [pc, #172]	@ (8011224 <I2C_Slave_ISR_IT+0x1fc>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d048      	beq.n	801120e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	0018      	movs	r0, r3
 8011180:	f000 fc36 	bl	80119f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011184:	e043      	b.n	801120e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	2208      	movs	r2, #8
 801118a:	4013      	ands	r3, r2
 801118c:	d00a      	beq.n	80111a4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2208      	movs	r2, #8
 8011192:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011194:	d006      	beq.n	80111a4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011196:	693a      	ldr	r2, [r7, #16]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	0011      	movs	r1, r2
 801119c:	0018      	movs	r0, r3
 801119e:	f000 fb41 	bl	8011824 <I2C_ITAddrCplt>
 80111a2:	e035      	b.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	2202      	movs	r2, #2
 80111a8:	4013      	ands	r3, r2
 80111aa:	d031      	beq.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2202      	movs	r2, #2
 80111b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80111b2:	d02d      	beq.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d018      	beq.n	80111f0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c2:	781a      	ldrb	r2, [r3, #0]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ce:	1c5a      	adds	r2, r3, #1
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111d8:	b29b      	uxth	r3, r3
 80111da:	3b01      	subs	r3, #1
 80111dc:	b29a      	uxth	r2, r3
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111e6:	3b01      	subs	r3, #1
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80111ee:	e00f      	b.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	2380      	movs	r3, #128	@ 0x80
 80111f4:	045b      	lsls	r3, r3, #17
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d002      	beq.n	8011200 <I2C_Slave_ISR_IT+0x1d8>
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d107      	bne.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	0018      	movs	r0, r3
 8011204:	f000 fbf4 	bl	80119f0 <I2C_ITSlaveSeqCplt>
 8011208:	e002      	b.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801120a:	46c0      	nop			@ (mov r8, r8)
 801120c:	e000      	b.n	8011210 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801120e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2240      	movs	r2, #64	@ 0x40
 8011214:	2100      	movs	r1, #0
 8011216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	0018      	movs	r0, r3
 801121c:	46bd      	mov	sp, r7
 801121e:	b006      	add	sp, #24
 8011220:	bd80      	pop	{r7, pc}
 8011222:	46c0      	nop			@ (mov r8, r8)
 8011224:	ffff0000 	.word	0xffff0000

08011228 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011228:	b590      	push	{r4, r7, lr}
 801122a:	b089      	sub	sp, #36	@ 0x24
 801122c:	af02      	add	r7, sp, #8
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2240      	movs	r2, #64	@ 0x40
 8011238:	5c9b      	ldrb	r3, [r3, r2]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d101      	bne.n	8011242 <I2C_Master_ISR_DMA+0x1a>
 801123e:	2302      	movs	r3, #2
 8011240:	e0e7      	b.n	8011412 <I2C_Master_ISR_DMA+0x1ea>
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2240      	movs	r2, #64	@ 0x40
 8011246:	2101      	movs	r1, #1
 8011248:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2210      	movs	r2, #16
 801124e:	4013      	ands	r3, r2
 8011250:	d017      	beq.n	8011282 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2210      	movs	r2, #16
 8011256:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011258:	d013      	beq.n	8011282 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2210      	movs	r2, #16
 8011260:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011266:	2204      	movs	r2, #4
 8011268:	431a      	orrs	r2, r3
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2120      	movs	r1, #32
 8011272:	0018      	movs	r0, r3
 8011274:	f001 fb18 	bl	80128a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	0018      	movs	r0, r3
 801127c:	f000 ff8d 	bl	801219a <I2C_Flush_TXDR>
 8011280:	e0c2      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	2280      	movs	r2, #128	@ 0x80
 8011286:	4013      	ands	r3, r2
 8011288:	d100      	bne.n	801128c <I2C_Master_ISR_DMA+0x64>
 801128a:	e07c      	b.n	8011386 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2240      	movs	r2, #64	@ 0x40
 8011290:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011292:	d100      	bne.n	8011296 <I2C_Master_ISR_DMA+0x6e>
 8011294:	e077      	b.n	8011386 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2140      	movs	r1, #64	@ 0x40
 80112a2:	438a      	bics	r2, r1
 80112a4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d055      	beq.n	801135c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	2312      	movs	r3, #18
 80112ba:	18fb      	adds	r3, r7, r3
 80112bc:	0592      	lsls	r2, r2, #22
 80112be:	0d92      	lsrs	r2, r2, #22
 80112c0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	2bff      	cmp	r3, #255	@ 0xff
 80112ca:	d906      	bls.n	80112da <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	22ff      	movs	r2, #255	@ 0xff
 80112d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80112d2:	2380      	movs	r3, #128	@ 0x80
 80112d4:	045b      	lsls	r3, r3, #17
 80112d6:	617b      	str	r3, [r7, #20]
 80112d8:	e010      	b.n	80112fc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112de:	b29a      	uxth	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112e8:	4a4c      	ldr	r2, [pc, #304]	@ (801141c <I2C_Master_ISR_DMA+0x1f4>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d003      	beq.n	80112f6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f2:	617b      	str	r3, [r7, #20]
 80112f4:	e002      	b.n	80112fc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80112f6:	2380      	movs	r3, #128	@ 0x80
 80112f8:	049b      	lsls	r3, r3, #18
 80112fa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011300:	b2da      	uxtb	r2, r3
 8011302:	697c      	ldr	r4, [r7, #20]
 8011304:	2312      	movs	r3, #18
 8011306:	18fb      	adds	r3, r7, r3
 8011308:	8819      	ldrh	r1, [r3, #0]
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	2300      	movs	r3, #0
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	0023      	movs	r3, r4
 8011312:	f001 fa8f 	bl	8012834 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801131a:	b29a      	uxth	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	b29a      	uxth	r2, r3
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2241      	movs	r2, #65	@ 0x41
 801132c:	5c9b      	ldrb	r3, [r3, r2]
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b22      	cmp	r3, #34	@ 0x22
 8011332:	d109      	bne.n	8011348 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2180      	movs	r1, #128	@ 0x80
 8011340:	0209      	lsls	r1, r1, #8
 8011342:	430a      	orrs	r2, r1
 8011344:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011346:	e05f      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2180      	movs	r1, #128	@ 0x80
 8011354:	01c9      	lsls	r1, r1, #7
 8011356:	430a      	orrs	r2, r1
 8011358:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801135a:	e055      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	685a      	ldr	r2, [r3, #4]
 8011362:	2380      	movs	r3, #128	@ 0x80
 8011364:	049b      	lsls	r3, r3, #18
 8011366:	401a      	ands	r2, r3
 8011368:	2380      	movs	r3, #128	@ 0x80
 801136a:	049b      	lsls	r3, r3, #18
 801136c:	429a      	cmp	r2, r3
 801136e:	d004      	beq.n	801137a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	0018      	movs	r0, r3
 8011374:	f000 fafa 	bl	801196c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011378:	e046      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2140      	movs	r1, #64	@ 0x40
 801137e:	0018      	movs	r0, r3
 8011380:	f000 fde0 	bl	8011f44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011384:	e040      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	2240      	movs	r2, #64	@ 0x40
 801138a:	4013      	ands	r3, r2
 801138c:	d02c      	beq.n	80113e8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2240      	movs	r2, #64	@ 0x40
 8011392:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011394:	d028      	beq.n	80113e8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801139a:	b29b      	uxth	r3, r3
 801139c:	2b00      	cmp	r3, #0
 801139e:	d11d      	bne.n	80113dc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	2380      	movs	r3, #128	@ 0x80
 80113a8:	049b      	lsls	r3, r3, #18
 80113aa:	401a      	ands	r2, r3
 80113ac:	2380      	movs	r3, #128	@ 0x80
 80113ae:	049b      	lsls	r3, r3, #18
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d028      	beq.n	8011406 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b8:	4a18      	ldr	r2, [pc, #96]	@ (801141c <I2C_Master_ISR_DMA+0x1f4>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d109      	bne.n	80113d2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2180      	movs	r1, #128	@ 0x80
 80113ca:	01c9      	lsls	r1, r1, #7
 80113cc:	430a      	orrs	r2, r1
 80113ce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80113d0:	e019      	b.n	8011406 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	0018      	movs	r0, r3
 80113d6:	f000 fac9 	bl	801196c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80113da:	e014      	b.n	8011406 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2140      	movs	r1, #64	@ 0x40
 80113e0:	0018      	movs	r0, r3
 80113e2:	f000 fdaf 	bl	8011f44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80113e6:	e00e      	b.n	8011406 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2220      	movs	r2, #32
 80113ec:	4013      	ands	r3, r2
 80113ee:	d00b      	beq.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2220      	movs	r2, #32
 80113f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80113f6:	d007      	beq.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	0011      	movs	r1, r2
 80113fe:	0018      	movs	r0, r3
 8011400:	f000 fb5a 	bl	8011ab8 <I2C_ITMasterCplt>
 8011404:	e000      	b.n	8011408 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011406:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2240      	movs	r2, #64	@ 0x40
 801140c:	2100      	movs	r1, #0
 801140e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	0018      	movs	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	b007      	add	sp, #28
 8011418:	bd90      	pop	{r4, r7, pc}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	ffff0000 	.word	0xffff0000

08011420 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011420:	b590      	push	{r4, r7, lr}
 8011422:	b089      	sub	sp, #36	@ 0x24
 8011424:	af02      	add	r7, sp, #8
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801142c:	4b88      	ldr	r3, [pc, #544]	@ (8011650 <I2C_Mem_ISR_DMA+0x230>)
 801142e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2240      	movs	r2, #64	@ 0x40
 8011434:	5c9b      	ldrb	r3, [r3, r2]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d101      	bne.n	801143e <I2C_Mem_ISR_DMA+0x1e>
 801143a:	2302      	movs	r3, #2
 801143c:	e104      	b.n	8011648 <I2C_Mem_ISR_DMA+0x228>
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2240      	movs	r2, #64	@ 0x40
 8011442:	2101      	movs	r1, #1
 8011444:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	2210      	movs	r2, #16
 801144a:	4013      	ands	r3, r2
 801144c:	d017      	beq.n	801147e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2210      	movs	r2, #16
 8011452:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011454:	d013      	beq.n	801147e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2210      	movs	r2, #16
 801145c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011462:	2204      	movs	r2, #4
 8011464:	431a      	orrs	r2, r3
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2120      	movs	r1, #32
 801146e:	0018      	movs	r0, r3
 8011470:	f001 fa1a 	bl	80128a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	0018      	movs	r0, r3
 8011478:	f000 fe8f 	bl	801219a <I2C_Flush_TXDR>
 801147c:	e0df      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	2202      	movs	r2, #2
 8011482:	4013      	ands	r3, r2
 8011484:	d00d      	beq.n	80114a2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2202      	movs	r2, #2
 801148a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801148c:	d009      	beq.n	80114a2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011496:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2201      	movs	r2, #1
 801149c:	4252      	negs	r2, r2
 801149e:	651a      	str	r2, [r3, #80]	@ 0x50
 80114a0:	e0cd      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	2280      	movs	r2, #128	@ 0x80
 80114a6:	4013      	ands	r3, r2
 80114a8:	d05e      	beq.n	8011568 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2240      	movs	r2, #64	@ 0x40
 80114ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80114b0:	d05a      	beq.n	8011568 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2110      	movs	r1, #16
 80114b6:	0018      	movs	r0, r3
 80114b8:	f001 f9f6 	bl	80128a8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d04a      	beq.n	801155c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	2bff      	cmp	r3, #255	@ 0xff
 80114ce:	d910      	bls.n	80114f2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	22ff      	movs	r2, #255	@ 0xff
 80114d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114da:	b299      	uxth	r1, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	2380      	movs	r3, #128	@ 0x80
 80114e4:	045b      	lsls	r3, r3, #17
 80114e6:	68f8      	ldr	r0, [r7, #12]
 80114e8:	2400      	movs	r4, #0
 80114ea:	9400      	str	r4, [sp, #0]
 80114ec:	f001 f9a2 	bl	8012834 <I2C_TransferConfig>
 80114f0:	e011      	b.n	8011516 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011500:	b299      	uxth	r1, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011506:	b2da      	uxtb	r2, r3
 8011508:	2380      	movs	r3, #128	@ 0x80
 801150a:	049b      	lsls	r3, r3, #18
 801150c:	68f8      	ldr	r0, [r7, #12]
 801150e:	2400      	movs	r4, #0
 8011510:	9400      	str	r4, [sp, #0]
 8011512:	f001 f98f 	bl	8012834 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801151a:	b29a      	uxth	r2, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	b29a      	uxth	r2, r3
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2241      	movs	r2, #65	@ 0x41
 801152c:	5c9b      	ldrb	r3, [r3, r2]
 801152e:	b2db      	uxtb	r3, r3
 8011530:	2b22      	cmp	r3, #34	@ 0x22
 8011532:	d109      	bne.n	8011548 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2180      	movs	r1, #128	@ 0x80
 8011540:	0209      	lsls	r1, r1, #8
 8011542:	430a      	orrs	r2, r1
 8011544:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011546:	e07a      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2180      	movs	r1, #128	@ 0x80
 8011554:	01c9      	lsls	r1, r1, #7
 8011556:	430a      	orrs	r2, r1
 8011558:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801155a:	e070      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2140      	movs	r1, #64	@ 0x40
 8011560:	0018      	movs	r0, r3
 8011562:	f000 fcef 	bl	8011f44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011566:	e06a      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2240      	movs	r2, #64	@ 0x40
 801156c:	4013      	ands	r3, r2
 801156e:	d058      	beq.n	8011622 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2240      	movs	r2, #64	@ 0x40
 8011574:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011576:	d054      	beq.n	8011622 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2241      	movs	r2, #65	@ 0x41
 801157c:	5c9b      	ldrb	r3, [r3, r2]
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b22      	cmp	r3, #34	@ 0x22
 8011582:	d101      	bne.n	8011588 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011584:	4b33      	ldr	r3, [pc, #204]	@ (8011654 <I2C_Mem_ISR_DMA+0x234>)
 8011586:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801158c:	b29b      	uxth	r3, r3
 801158e:	2bff      	cmp	r3, #255	@ 0xff
 8011590:	d911      	bls.n	80115b6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	22ff      	movs	r2, #255	@ 0xff
 8011596:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801159c:	b299      	uxth	r1, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	2380      	movs	r3, #128	@ 0x80
 80115a6:	045c      	lsls	r4, r3, #17
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	0023      	movs	r3, r4
 80115b0:	f001 f940 	bl	8012834 <I2C_TransferConfig>
 80115b4:	e012      	b.n	80115dc <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80115c4:	b299      	uxth	r1, r3
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	2380      	movs	r3, #128	@ 0x80
 80115ce:	049c      	lsls	r4, r3, #18
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	0023      	movs	r3, r4
 80115d8:	f001 f92c 	bl	8012834 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	2241      	movs	r2, #65	@ 0x41
 80115f2:	5c9b      	ldrb	r3, [r3, r2]
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	2b22      	cmp	r3, #34	@ 0x22
 80115f8:	d109      	bne.n	801160e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2180      	movs	r1, #128	@ 0x80
 8011606:	0209      	lsls	r1, r1, #8
 8011608:	430a      	orrs	r2, r1
 801160a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801160c:	e017      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2180      	movs	r1, #128	@ 0x80
 801161a:	01c9      	lsls	r1, r1, #7
 801161c:	430a      	orrs	r2, r1
 801161e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011620:	e00d      	b.n	801163e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2220      	movs	r2, #32
 8011626:	4013      	ands	r3, r2
 8011628:	d009      	beq.n	801163e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2220      	movs	r2, #32
 801162e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011630:	d005      	beq.n	801163e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	0011      	movs	r1, r2
 8011638:	0018      	movs	r0, r3
 801163a:	f000 fa3d 	bl	8011ab8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2240      	movs	r2, #64	@ 0x40
 8011642:	2100      	movs	r1, #0
 8011644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	0018      	movs	r0, r3
 801164a:	46bd      	mov	sp, r7
 801164c:	b007      	add	sp, #28
 801164e:	bd90      	pop	{r4, r7, pc}
 8011650:	80002000 	.word	0x80002000
 8011654:	80002400 	.word	0x80002400

08011658 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b088      	sub	sp, #32
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011668:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801166a:	2300      	movs	r3, #0
 801166c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2240      	movs	r2, #64	@ 0x40
 8011672:	5c9b      	ldrb	r3, [r3, r2]
 8011674:	2b01      	cmp	r3, #1
 8011676:	d101      	bne.n	801167c <I2C_Slave_ISR_DMA+0x24>
 8011678:	2302      	movs	r3, #2
 801167a:	e0cd      	b.n	8011818 <I2C_Slave_ISR_DMA+0x1c0>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2240      	movs	r2, #64	@ 0x40
 8011680:	2101      	movs	r1, #1
 8011682:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2220      	movs	r2, #32
 8011688:	4013      	ands	r3, r2
 801168a:	d009      	beq.n	80116a0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2220      	movs	r2, #32
 8011690:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011692:	d005      	beq.n	80116a0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011694:	68ba      	ldr	r2, [r7, #8]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	0011      	movs	r1, r2
 801169a:	0018      	movs	r0, r3
 801169c:	f000 fada 	bl	8011c54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	2210      	movs	r2, #16
 80116a4:	4013      	ands	r3, r2
 80116a6:	d100      	bne.n	80116aa <I2C_Slave_ISR_DMA+0x52>
 80116a8:	e0a3      	b.n	80117f2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2210      	movs	r2, #16
 80116ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80116b0:	d100      	bne.n	80116b4 <I2C_Slave_ISR_DMA+0x5c>
 80116b2:	e09e      	b.n	80117f2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	2380      	movs	r3, #128	@ 0x80
 80116b8:	01db      	lsls	r3, r3, #7
 80116ba:	4013      	ands	r3, r2
 80116bc:	d105      	bne.n	80116ca <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	2380      	movs	r3, #128	@ 0x80
 80116c2:	021b      	lsls	r3, r3, #8
 80116c4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80116c6:	d100      	bne.n	80116ca <I2C_Slave_ISR_DMA+0x72>
 80116c8:	e08c      	b.n	80117e4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00c      	beq.n	80116ec <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	2380      	movs	r3, #128	@ 0x80
 80116d6:	021b      	lsls	r3, r3, #8
 80116d8:	4013      	ands	r3, r2
 80116da:	d007      	beq.n	80116ec <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80116e8:	2301      	movs	r3, #1
 80116ea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00c      	beq.n	801170e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	2380      	movs	r3, #128	@ 0x80
 80116f8:	01db      	lsls	r3, r3, #7
 80116fa:	4013      	ands	r3, r2
 80116fc:	d007      	beq.n	801170e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d101      	bne.n	801170e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801170a:	2301      	movs	r3, #1
 801170c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	2b01      	cmp	r3, #1
 8011712:	d12d      	bne.n	8011770 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2241      	movs	r2, #65	@ 0x41
 8011718:	5c9b      	ldrb	r3, [r3, r2]
 801171a:	b2db      	uxtb	r3, r3
 801171c:	2b28      	cmp	r3, #40	@ 0x28
 801171e:	d10b      	bne.n	8011738 <I2C_Slave_ISR_DMA+0xe0>
 8011720:	69ba      	ldr	r2, [r7, #24]
 8011722:	2380      	movs	r3, #128	@ 0x80
 8011724:	049b      	lsls	r3, r3, #18
 8011726:	429a      	cmp	r2, r3
 8011728:	d106      	bne.n	8011738 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	0011      	movs	r1, r2
 8011730:	0018      	movs	r0, r3
 8011732:	f000 fbaf 	bl	8011e94 <I2C_ITListenCplt>
 8011736:	e054      	b.n	80117e2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2241      	movs	r2, #65	@ 0x41
 801173c:	5c9b      	ldrb	r3, [r3, r2]
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2b29      	cmp	r3, #41	@ 0x29
 8011742:	d110      	bne.n	8011766 <I2C_Slave_ISR_DMA+0x10e>
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	4a36      	ldr	r2, [pc, #216]	@ (8011820 <I2C_Slave_ISR_DMA+0x1c8>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d00c      	beq.n	8011766 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	2210      	movs	r2, #16
 8011752:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	0018      	movs	r0, r3
 8011758:	f000 fd1f 	bl	801219a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	0018      	movs	r0, r3
 8011760:	f000 f946 	bl	80119f0 <I2C_ITSlaveSeqCplt>
 8011764:	e03d      	b.n	80117e2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	2210      	movs	r2, #16
 801176c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801176e:	e03e      	b.n	80117ee <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2210      	movs	r2, #16
 8011776:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801177c:	2204      	movs	r2, #4
 801177e:	431a      	orrs	r2, r3
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011784:	2317      	movs	r3, #23
 8011786:	18fb      	adds	r3, r7, r3
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	2141      	movs	r1, #65	@ 0x41
 801178c:	5c52      	ldrb	r2, [r2, r1]
 801178e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d004      	beq.n	80117a0 <I2C_Slave_ISR_DMA+0x148>
 8011796:	69ba      	ldr	r2, [r7, #24]
 8011798:	2380      	movs	r3, #128	@ 0x80
 801179a:	045b      	lsls	r3, r3, #17
 801179c:	429a      	cmp	r2, r3
 801179e:	d126      	bne.n	80117ee <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80117a0:	2217      	movs	r2, #23
 80117a2:	18bb      	adds	r3, r7, r2
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	2b21      	cmp	r3, #33	@ 0x21
 80117a8:	d003      	beq.n	80117b2 <I2C_Slave_ISR_DMA+0x15a>
 80117aa:	18bb      	adds	r3, r7, r2
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	2b29      	cmp	r3, #41	@ 0x29
 80117b0:	d103      	bne.n	80117ba <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2221      	movs	r2, #33	@ 0x21
 80117b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80117b8:	e00b      	b.n	80117d2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80117ba:	2217      	movs	r2, #23
 80117bc:	18bb      	adds	r3, r7, r2
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b22      	cmp	r3, #34	@ 0x22
 80117c2:	d003      	beq.n	80117cc <I2C_Slave_ISR_DMA+0x174>
 80117c4:	18bb      	adds	r3, r7, r2
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80117ca:	d102      	bne.n	80117d2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2222      	movs	r2, #34	@ 0x22
 80117d0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	0011      	movs	r1, r2
 80117da:	0018      	movs	r0, r3
 80117dc:	f000 fbb2 	bl	8011f44 <I2C_ITError>
      if (treatdmanack == 1U)
 80117e0:	e005      	b.n	80117ee <I2C_Slave_ISR_DMA+0x196>
 80117e2:	e004      	b.n	80117ee <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	2210      	movs	r2, #16
 80117ea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80117ec:	e00f      	b.n	801180e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80117ee:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80117f0:	e00d      	b.n	801180e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	2208      	movs	r2, #8
 80117f6:	4013      	ands	r3, r2
 80117f8:	d009      	beq.n	801180e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2208      	movs	r2, #8
 80117fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011800:	d005      	beq.n	801180e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	0011      	movs	r1, r2
 8011808:	0018      	movs	r0, r3
 801180a:	f000 f80b 	bl	8011824 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2240      	movs	r2, #64	@ 0x40
 8011812:	2100      	movs	r1, #0
 8011814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011816:	2300      	movs	r3, #0
}
 8011818:	0018      	movs	r0, r3
 801181a:	46bd      	mov	sp, r7
 801181c:	b008      	add	sp, #32
 801181e:	bd80      	pop	{r7, pc}
 8011820:	ffff0000 	.word	0xffff0000

08011824 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011824:	b5b0      	push	{r4, r5, r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2241      	movs	r2, #65	@ 0x41
 8011832:	5c9b      	ldrb	r3, [r3, r2]
 8011834:	b2db      	uxtb	r3, r3
 8011836:	001a      	movs	r2, r3
 8011838:	2328      	movs	r3, #40	@ 0x28
 801183a:	4013      	ands	r3, r2
 801183c:	2b28      	cmp	r3, #40	@ 0x28
 801183e:	d000      	beq.n	8011842 <I2C_ITAddrCplt+0x1e>
 8011840:	e088      	b.n	8011954 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	699b      	ldr	r3, [r3, #24]
 8011848:	0c1b      	lsrs	r3, r3, #16
 801184a:	b2da      	uxtb	r2, r3
 801184c:	250f      	movs	r5, #15
 801184e:	197b      	adds	r3, r7, r5
 8011850:	2101      	movs	r1, #1
 8011852:	400a      	ands	r2, r1
 8011854:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	699b      	ldr	r3, [r3, #24]
 801185c:	0c1b      	lsrs	r3, r3, #16
 801185e:	b29a      	uxth	r2, r3
 8011860:	200c      	movs	r0, #12
 8011862:	183b      	adds	r3, r7, r0
 8011864:	21fe      	movs	r1, #254	@ 0xfe
 8011866:	400a      	ands	r2, r1
 8011868:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	b29a      	uxth	r2, r3
 8011872:	240a      	movs	r4, #10
 8011874:	193b      	adds	r3, r7, r4
 8011876:	0592      	lsls	r2, r2, #22
 8011878:	0d92      	lsrs	r2, r2, #22
 801187a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	b29a      	uxth	r2, r3
 8011884:	2308      	movs	r3, #8
 8011886:	18fb      	adds	r3, r7, r3
 8011888:	21fe      	movs	r1, #254	@ 0xfe
 801188a:	400a      	ands	r2, r1
 801188c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	2b02      	cmp	r3, #2
 8011894:	d148      	bne.n	8011928 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011896:	0021      	movs	r1, r4
 8011898:	187b      	adds	r3, r7, r1
 801189a:	881b      	ldrh	r3, [r3, #0]
 801189c:	09db      	lsrs	r3, r3, #7
 801189e:	b29a      	uxth	r2, r3
 80118a0:	183b      	adds	r3, r7, r0
 80118a2:	881b      	ldrh	r3, [r3, #0]
 80118a4:	4053      	eors	r3, r2
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	001a      	movs	r2, r3
 80118aa:	2306      	movs	r3, #6
 80118ac:	4013      	ands	r3, r2
 80118ae:	d120      	bne.n	80118f2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80118b0:	183b      	adds	r3, r7, r0
 80118b2:	187a      	adds	r2, r7, r1
 80118b4:	8812      	ldrh	r2, [r2, #0]
 80118b6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118c6:	2b02      	cmp	r3, #2
 80118c8:	d14c      	bne.n	8011964 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2200      	movs	r2, #0
 80118ce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2208      	movs	r2, #8
 80118d6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2240      	movs	r2, #64	@ 0x40
 80118dc:	2100      	movs	r1, #0
 80118de:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80118e0:	183b      	adds	r3, r7, r0
 80118e2:	881a      	ldrh	r2, [r3, #0]
 80118e4:	197b      	adds	r3, r7, r5
 80118e6:	7819      	ldrb	r1, [r3, #0]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	0018      	movs	r0, r3
 80118ec:	f7ff fa39 	bl	8010d62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80118f0:	e038      	b.n	8011964 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80118f2:	240c      	movs	r4, #12
 80118f4:	193b      	adds	r3, r7, r4
 80118f6:	2208      	movs	r2, #8
 80118f8:	18ba      	adds	r2, r7, r2
 80118fa:	8812      	ldrh	r2, [r2, #0]
 80118fc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80118fe:	2380      	movs	r3, #128	@ 0x80
 8011900:	021a      	lsls	r2, r3, #8
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	0011      	movs	r1, r2
 8011906:	0018      	movs	r0, r3
 8011908:	f001 f85c 	bl	80129c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2240      	movs	r2, #64	@ 0x40
 8011910:	2100      	movs	r1, #0
 8011912:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011914:	193b      	adds	r3, r7, r4
 8011916:	881a      	ldrh	r2, [r3, #0]
 8011918:	230f      	movs	r3, #15
 801191a:	18fb      	adds	r3, r7, r3
 801191c:	7819      	ldrb	r1, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	0018      	movs	r0, r3
 8011922:	f7ff fa1e 	bl	8010d62 <HAL_I2C_AddrCallback>
}
 8011926:	e01d      	b.n	8011964 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011928:	2380      	movs	r3, #128	@ 0x80
 801192a:	021a      	lsls	r2, r3, #8
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	0011      	movs	r1, r2
 8011930:	0018      	movs	r0, r3
 8011932:	f001 f847 	bl	80129c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2240      	movs	r2, #64	@ 0x40
 801193a:	2100      	movs	r1, #0
 801193c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801193e:	230c      	movs	r3, #12
 8011940:	18fb      	adds	r3, r7, r3
 8011942:	881a      	ldrh	r2, [r3, #0]
 8011944:	230f      	movs	r3, #15
 8011946:	18fb      	adds	r3, r7, r3
 8011948:	7819      	ldrb	r1, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	0018      	movs	r0, r3
 801194e:	f7ff fa08 	bl	8010d62 <HAL_I2C_AddrCallback>
}
 8011952:	e007      	b.n	8011964 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2208      	movs	r2, #8
 801195a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2240      	movs	r2, #64	@ 0x40
 8011960:	2100      	movs	r1, #0
 8011962:	5499      	strb	r1, [r3, r2]
}
 8011964:	46c0      	nop			@ (mov r8, r8)
 8011966:	46bd      	mov	sp, r7
 8011968:	b004      	add	sp, #16
 801196a:	bdb0      	pop	{r4, r5, r7, pc}

0801196c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2242      	movs	r2, #66	@ 0x42
 8011978:	2100      	movs	r1, #0
 801197a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2241      	movs	r2, #65	@ 0x41
 8011980:	5c9b      	ldrb	r3, [r3, r2]
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b21      	cmp	r3, #33	@ 0x21
 8011986:	d117      	bne.n	80119b8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2241      	movs	r2, #65	@ 0x41
 801198c:	2120      	movs	r1, #32
 801198e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2211      	movs	r2, #17
 8011994:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2101      	movs	r1, #1
 80119a0:	0018      	movs	r0, r3
 80119a2:	f001 f80f 	bl	80129c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2240      	movs	r2, #64	@ 0x40
 80119aa:	2100      	movs	r1, #0
 80119ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	0018      	movs	r0, r3
 80119b2:	f7ff f9b6 	bl	8010d22 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80119b6:	e016      	b.n	80119e6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2241      	movs	r2, #65	@ 0x41
 80119bc:	2120      	movs	r1, #32
 80119be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2212      	movs	r2, #18
 80119c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2102      	movs	r1, #2
 80119d0:	0018      	movs	r0, r3
 80119d2:	f000 fff7 	bl	80129c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2240      	movs	r2, #64	@ 0x40
 80119da:	2100      	movs	r1, #0
 80119dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	0018      	movs	r0, r3
 80119e2:	f7ff f9a6 	bl	8010d32 <HAL_I2C_MasterRxCpltCallback>
}
 80119e6:	46c0      	nop			@ (mov r8, r8)
 80119e8:	46bd      	mov	sp, r7
 80119ea:	b002      	add	sp, #8
 80119ec:	bd80      	pop	{r7, pc}
	...

080119f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2242      	movs	r2, #66	@ 0x42
 8011a04:	2100      	movs	r1, #0
 8011a06:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	2380      	movs	r3, #128	@ 0x80
 8011a0c:	01db      	lsls	r3, r3, #7
 8011a0e:	4013      	ands	r3, r2
 8011a10:	d008      	beq.n	8011a24 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4924      	ldr	r1, [pc, #144]	@ (8011ab0 <I2C_ITSlaveSeqCplt+0xc0>)
 8011a1e:	400a      	ands	r2, r1
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	e00c      	b.n	8011a3e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	2380      	movs	r3, #128	@ 0x80
 8011a28:	021b      	lsls	r3, r3, #8
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	d007      	beq.n	8011a3e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	491e      	ldr	r1, [pc, #120]	@ (8011ab4 <I2C_ITSlaveSeqCplt+0xc4>)
 8011a3a:	400a      	ands	r2, r1
 8011a3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2241      	movs	r2, #65	@ 0x41
 8011a42:	5c9b      	ldrb	r3, [r3, r2]
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	2b29      	cmp	r3, #41	@ 0x29
 8011a48:	d114      	bne.n	8011a74 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2241      	movs	r2, #65	@ 0x41
 8011a4e:	2128      	movs	r1, #40	@ 0x28
 8011a50:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2221      	movs	r2, #33	@ 0x21
 8011a56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2101      	movs	r1, #1
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	f000 ffb1 	bl	80129c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2240      	movs	r2, #64	@ 0x40
 8011a66:	2100      	movs	r1, #0
 8011a68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	0018      	movs	r0, r3
 8011a6e:	f7ff f968 	bl	8010d42 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011a72:	e019      	b.n	8011aa8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2241      	movs	r2, #65	@ 0x41
 8011a78:	5c9b      	ldrb	r3, [r3, r2]
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a7e:	d113      	bne.n	8011aa8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2241      	movs	r2, #65	@ 0x41
 8011a84:	2128      	movs	r1, #40	@ 0x28
 8011a86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2222      	movs	r2, #34	@ 0x22
 8011a8c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2102      	movs	r1, #2
 8011a92:	0018      	movs	r0, r3
 8011a94:	f000 ff96 	bl	80129c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2240      	movs	r2, #64	@ 0x40
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	0018      	movs	r0, r3
 8011aa4:	f7ff f955 	bl	8010d52 <HAL_I2C_SlaveRxCpltCallback>
}
 8011aa8:	46c0      	nop			@ (mov r8, r8)
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	b004      	add	sp, #16
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	ffffbfff 	.word	0xffffbfff
 8011ab4:	ffff7fff 	.word	0xffff7fff

08011ab8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2220      	movs	r2, #32
 8011acc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2241      	movs	r2, #65	@ 0x41
 8011ad2:	5c9b      	ldrb	r3, [r3, r2]
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b21      	cmp	r3, #33	@ 0x21
 8011ad8:	d108      	bne.n	8011aec <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2101      	movs	r1, #1
 8011ade:	0018      	movs	r0, r3
 8011ae0:	f000 ff70 	bl	80129c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2211      	movs	r2, #17
 8011ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011aea:	e00d      	b.n	8011b08 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2241      	movs	r2, #65	@ 0x41
 8011af0:	5c9b      	ldrb	r3, [r3, r2]
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b22      	cmp	r3, #34	@ 0x22
 8011af6:	d107      	bne.n	8011b08 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2102      	movs	r1, #2
 8011afc:	0018      	movs	r0, r3
 8011afe:	f000 ff61 	bl	80129c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2212      	movs	r2, #18
 8011b06:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	685a      	ldr	r2, [r3, #4]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	494e      	ldr	r1, [pc, #312]	@ (8011c4c <I2C_ITMasterCplt+0x194>)
 8011b14:	400a      	ands	r2, r1
 8011b16:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4a4b      	ldr	r2, [pc, #300]	@ (8011c50 <I2C_ITMasterCplt+0x198>)
 8011b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	2210      	movs	r2, #16
 8011b28:	4013      	ands	r3, r2
 8011b2a:	d009      	beq.n	8011b40 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2210      	movs	r2, #16
 8011b32:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b38:	2204      	movs	r2, #4
 8011b3a:	431a      	orrs	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2241      	movs	r2, #65	@ 0x41
 8011b44:	5c9b      	ldrb	r3, [r3, r2]
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b60      	cmp	r3, #96	@ 0x60
 8011b4a:	d109      	bne.n	8011b60 <I2C_ITMasterCplt+0xa8>
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	2204      	movs	r2, #4
 8011b50:	4013      	ands	r3, r2
 8011b52:	d005      	beq.n	8011b60 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	0018      	movs	r0, r3
 8011b64:	f000 fb19 	bl	801219a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b6c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2241      	movs	r2, #65	@ 0x41
 8011b72:	5c9b      	ldrb	r3, [r3, r2]
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	2b60      	cmp	r3, #96	@ 0x60
 8011b78:	d002      	beq.n	8011b80 <I2C_ITMasterCplt+0xc8>
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d007      	beq.n	8011b90 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	0011      	movs	r1, r2
 8011b88:	0018      	movs	r0, r3
 8011b8a:	f000 f9db 	bl	8011f44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011b8e:	e058      	b.n	8011c42 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2241      	movs	r2, #65	@ 0x41
 8011b94:	5c9b      	ldrb	r3, [r3, r2]
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	2b21      	cmp	r3, #33	@ 0x21
 8011b9a:	d126      	bne.n	8011bea <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2241      	movs	r2, #65	@ 0x41
 8011ba0:	2120      	movs	r1, #32
 8011ba2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2242      	movs	r2, #66	@ 0x42
 8011bae:	5c9b      	ldrb	r3, [r3, r2]
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	2b40      	cmp	r3, #64	@ 0x40
 8011bb4:	d10c      	bne.n	8011bd0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	2242      	movs	r2, #66	@ 0x42
 8011bba:	2100      	movs	r1, #0
 8011bbc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2240      	movs	r2, #64	@ 0x40
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	0018      	movs	r0, r3
 8011bca:	f7ff f8e2 	bl	8010d92 <HAL_I2C_MemTxCpltCallback>
}
 8011bce:	e038      	b.n	8011c42 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2242      	movs	r2, #66	@ 0x42
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2240      	movs	r2, #64	@ 0x40
 8011bdc:	2100      	movs	r1, #0
 8011bde:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	0018      	movs	r0, r3
 8011be4:	f7ff f89d 	bl	8010d22 <HAL_I2C_MasterTxCpltCallback>
}
 8011be8:	e02b      	b.n	8011c42 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2241      	movs	r2, #65	@ 0x41
 8011bee:	5c9b      	ldrb	r3, [r3, r2]
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	2b22      	cmp	r3, #34	@ 0x22
 8011bf4:	d125      	bne.n	8011c42 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2241      	movs	r2, #65	@ 0x41
 8011bfa:	2120      	movs	r1, #32
 8011bfc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2242      	movs	r2, #66	@ 0x42
 8011c08:	5c9b      	ldrb	r3, [r3, r2]
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	2b40      	cmp	r3, #64	@ 0x40
 8011c0e:	d10c      	bne.n	8011c2a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2242      	movs	r2, #66	@ 0x42
 8011c14:	2100      	movs	r1, #0
 8011c16:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2240      	movs	r2, #64	@ 0x40
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	0018      	movs	r0, r3
 8011c24:	f7ff f8bd 	bl	8010da2 <HAL_I2C_MemRxCpltCallback>
}
 8011c28:	e00b      	b.n	8011c42 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2242      	movs	r2, #66	@ 0x42
 8011c2e:	2100      	movs	r1, #0
 8011c30:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2240      	movs	r2, #64	@ 0x40
 8011c36:	2100      	movs	r1, #0
 8011c38:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	0018      	movs	r0, r3
 8011c3e:	f7ff f878 	bl	8010d32 <HAL_I2C_MasterRxCpltCallback>
}
 8011c42:	46c0      	nop			@ (mov r8, r8)
 8011c44:	46bd      	mov	sp, r7
 8011c46:	b006      	add	sp, #24
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	46c0      	nop			@ (mov r8, r8)
 8011c4c:	fe00e800 	.word	0xfe00e800
 8011c50:	ffff0000 	.word	0xffff0000

08011c54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b086      	sub	sp, #24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011c6a:	200f      	movs	r0, #15
 8011c6c:	183b      	adds	r3, r7, r0
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	2141      	movs	r1, #65	@ 0x41
 8011c72:	5c52      	ldrb	r2, [r2, r1]
 8011c74:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2220      	movs	r2, #32
 8011c7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011c7e:	183b      	adds	r3, r7, r0
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	2b21      	cmp	r3, #33	@ 0x21
 8011c84:	d003      	beq.n	8011c8e <I2C_ITSlaveCplt+0x3a>
 8011c86:	183b      	adds	r3, r7, r0
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	2b29      	cmp	r3, #41	@ 0x29
 8011c8c:	d109      	bne.n	8011ca2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8011e7c <I2C_ITSlaveCplt+0x228>)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	0011      	movs	r1, r2
 8011c94:	0018      	movs	r0, r3
 8011c96:	f000 fe95 	bl	80129c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2221      	movs	r2, #33	@ 0x21
 8011c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ca0:	e011      	b.n	8011cc6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011ca2:	220f      	movs	r2, #15
 8011ca4:	18bb      	adds	r3, r7, r2
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	2b22      	cmp	r3, #34	@ 0x22
 8011caa:	d003      	beq.n	8011cb4 <I2C_ITSlaveCplt+0x60>
 8011cac:	18bb      	adds	r3, r7, r2
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cb2:	d108      	bne.n	8011cc6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011cb4:	4a72      	ldr	r2, [pc, #456]	@ (8011e80 <I2C_ITSlaveCplt+0x22c>)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	0011      	movs	r1, r2
 8011cba:	0018      	movs	r0, r3
 8011cbc:	f000 fe82 	bl	80129c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2222      	movs	r2, #34	@ 0x22
 8011cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2180      	movs	r1, #128	@ 0x80
 8011cd2:	0209      	lsls	r1, r1, #8
 8011cd4:	430a      	orrs	r2, r1
 8011cd6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	685a      	ldr	r2, [r3, #4]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	4968      	ldr	r1, [pc, #416]	@ (8011e84 <I2C_ITSlaveCplt+0x230>)
 8011ce4:	400a      	ands	r2, r1
 8011ce6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	0018      	movs	r0, r3
 8011cec:	f000 fa55 	bl	801219a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011cf0:	693a      	ldr	r2, [r7, #16]
 8011cf2:	2380      	movs	r3, #128	@ 0x80
 8011cf4:	01db      	lsls	r3, r3, #7
 8011cf6:	4013      	ands	r3, r2
 8011cf8:	d013      	beq.n	8011d22 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4960      	ldr	r1, [pc, #384]	@ (8011e88 <I2C_ITSlaveCplt+0x234>)
 8011d06:	400a      	ands	r2, r1
 8011d08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d01f      	beq.n	8011d52 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011d20:	e017      	b.n	8011d52 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011d22:	693a      	ldr	r2, [r7, #16]
 8011d24:	2380      	movs	r3, #128	@ 0x80
 8011d26:	021b      	lsls	r3, r3, #8
 8011d28:	4013      	ands	r3, r2
 8011d2a:	d012      	beq.n	8011d52 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	4955      	ldr	r1, [pc, #340]	@ (8011e8c <I2C_ITSlaveCplt+0x238>)
 8011d38:	400a      	ands	r2, r1
 8011d3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d006      	beq.n	8011d52 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	2204      	movs	r2, #4
 8011d56:	4013      	ands	r3, r2
 8011d58:	d020      	beq.n	8011d9c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2204      	movs	r2, #4
 8011d5e:	4393      	bics	r3, r2
 8011d60:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d6c:	b2d2      	uxtb	r2, r2
 8011d6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d74:	1c5a      	adds	r2, r3, #1
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00c      	beq.n	8011d9c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d86:	3b01      	subs	r3, #1
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	3b01      	subs	r3, #1
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d005      	beq.n	8011db2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011daa:	2204      	movs	r2, #4
 8011dac:	431a      	orrs	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2242      	movs	r2, #66	@ 0x42
 8011db6:	2100      	movs	r1, #0
 8011db8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d013      	beq.n	8011df0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	0011      	movs	r1, r2
 8011dd0:	0018      	movs	r0, r3
 8011dd2:	f000 f8b7 	bl	8011f44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2241      	movs	r2, #65	@ 0x41
 8011dda:	5c9b      	ldrb	r3, [r3, r2]
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b28      	cmp	r3, #40	@ 0x28
 8011de0:	d147      	bne.n	8011e72 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	0011      	movs	r1, r2
 8011de8:	0018      	movs	r0, r3
 8011dea:	f000 f853 	bl	8011e94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011dee:	e040      	b.n	8011e72 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011df4:	4a26      	ldr	r2, [pc, #152]	@ (8011e90 <I2C_ITSlaveCplt+0x23c>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d016      	beq.n	8011e28 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	0018      	movs	r0, r3
 8011dfe:	f7ff fdf7 	bl	80119f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4a22      	ldr	r2, [pc, #136]	@ (8011e90 <I2C_ITSlaveCplt+0x23c>)
 8011e06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2241      	movs	r2, #65	@ 0x41
 8011e0c:	2120      	movs	r1, #32
 8011e0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2240      	movs	r2, #64	@ 0x40
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	0018      	movs	r0, r3
 8011e22:	f7fe ffae 	bl	8010d82 <HAL_I2C_ListenCpltCallback>
}
 8011e26:	e024      	b.n	8011e72 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2241      	movs	r2, #65	@ 0x41
 8011e2c:	5c9b      	ldrb	r3, [r3, r2]
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	2b22      	cmp	r3, #34	@ 0x22
 8011e32:	d10f      	bne.n	8011e54 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2241      	movs	r2, #65	@ 0x41
 8011e38:	2120      	movs	r1, #32
 8011e3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2240      	movs	r2, #64	@ 0x40
 8011e46:	2100      	movs	r1, #0
 8011e48:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	0018      	movs	r0, r3
 8011e4e:	f7fe ff80 	bl	8010d52 <HAL_I2C_SlaveRxCpltCallback>
}
 8011e52:	e00e      	b.n	8011e72 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2241      	movs	r2, #65	@ 0x41
 8011e58:	2120      	movs	r1, #32
 8011e5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2240      	movs	r2, #64	@ 0x40
 8011e66:	2100      	movs	r1, #0
 8011e68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	0018      	movs	r0, r3
 8011e6e:	f7fe ff68 	bl	8010d42 <HAL_I2C_SlaveTxCpltCallback>
}
 8011e72:	46c0      	nop			@ (mov r8, r8)
 8011e74:	46bd      	mov	sp, r7
 8011e76:	b006      	add	sp, #24
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	46c0      	nop			@ (mov r8, r8)
 8011e7c:	00008001 	.word	0x00008001
 8011e80:	00008002 	.word	0x00008002
 8011e84:	fe00e800 	.word	0xfe00e800
 8011e88:	ffffbfff 	.word	0xffffbfff
 8011e8c:	ffff7fff 	.word	0xffff7fff
 8011e90:	ffff0000 	.word	0xffff0000

08011e94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	4a26      	ldr	r2, [pc, #152]	@ (8011f3c <I2C_ITListenCplt+0xa8>)
 8011ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2241      	movs	r2, #65	@ 0x41
 8011eae:	2120      	movs	r1, #32
 8011eb0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2242      	movs	r2, #66	@ 0x42
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2204      	movs	r2, #4
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	d022      	beq.n	8011f0e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ed2:	b2d2      	uxtb	r2, r2
 8011ed4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eda:	1c5a      	adds	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d012      	beq.n	8011f0e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011eec:	3b01      	subs	r3, #1
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	3b01      	subs	r3, #1
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f06:	2204      	movs	r2, #4
 8011f08:	431a      	orrs	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011f40 <I2C_ITListenCplt+0xac>)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	0011      	movs	r1, r2
 8011f14:	0018      	movs	r0, r3
 8011f16:	f000 fd55 	bl	80129c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2210      	movs	r2, #16
 8011f20:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2240      	movs	r2, #64	@ 0x40
 8011f26:	2100      	movs	r1, #0
 8011f28:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f7fe ff28 	bl	8010d82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011f32:	46c0      	nop			@ (mov r8, r8)
 8011f34:	46bd      	mov	sp, r7
 8011f36:	b002      	add	sp, #8
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	46c0      	nop			@ (mov r8, r8)
 8011f3c:	ffff0000 	.word	0xffff0000
 8011f40:	00008003 	.word	0x00008003

08011f44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011f4e:	200f      	movs	r0, #15
 8011f50:	183b      	adds	r3, r7, r0
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	2141      	movs	r1, #65	@ 0x41
 8011f56:	5c52      	ldrb	r2, [r2, r1]
 8011f58:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2242      	movs	r2, #66	@ 0x42
 8011f5e:	2100      	movs	r1, #0
 8011f60:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4a72      	ldr	r2, [pc, #456]	@ (8012130 <I2C_ITError+0x1ec>)
 8011f66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	431a      	orrs	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011f7a:	183b      	adds	r3, r7, r0
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	2b28      	cmp	r3, #40	@ 0x28
 8011f80:	d007      	beq.n	8011f92 <I2C_ITError+0x4e>
 8011f82:	183b      	adds	r3, r7, r0
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	2b29      	cmp	r3, #41	@ 0x29
 8011f88:	d003      	beq.n	8011f92 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011f8a:	183b      	adds	r3, r7, r0
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f90:	d10c      	bne.n	8011fac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2103      	movs	r1, #3
 8011f96:	0018      	movs	r0, r3
 8011f98:	f000 fd14 	bl	80129c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2241      	movs	r2, #65	@ 0x41
 8011fa0:	2128      	movs	r1, #40	@ 0x28
 8011fa2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	4a63      	ldr	r2, [pc, #396]	@ (8012134 <I2C_ITError+0x1f0>)
 8011fa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8011faa:	e032      	b.n	8012012 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011fac:	4a62      	ldr	r2, [pc, #392]	@ (8012138 <I2C_ITError+0x1f4>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	0011      	movs	r1, r2
 8011fb2:	0018      	movs	r0, r3
 8011fb4:	f000 fd06 	bl	80129c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	0018      	movs	r0, r3
 8011fbc:	f000 f8ed 	bl	801219a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2241      	movs	r2, #65	@ 0x41
 8011fc4:	5c9b      	ldrb	r3, [r3, r2]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b60      	cmp	r3, #96	@ 0x60
 8011fca:	d01f      	beq.n	801200c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2241      	movs	r2, #65	@ 0x41
 8011fd0:	2120      	movs	r1, #32
 8011fd2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	699b      	ldr	r3, [r3, #24]
 8011fda:	2220      	movs	r2, #32
 8011fdc:	4013      	ands	r3, r2
 8011fde:	2b20      	cmp	r3, #32
 8011fe0:	d114      	bne.n	801200c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	699b      	ldr	r3, [r3, #24]
 8011fe8:	2210      	movs	r2, #16
 8011fea:	4013      	ands	r3, r2
 8011fec:	2b10      	cmp	r3, #16
 8011fee:	d109      	bne.n	8012004 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2210      	movs	r2, #16
 8011ff6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ffc:	2204      	movs	r2, #4
 8011ffe:	431a      	orrs	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2220      	movs	r2, #32
 801200a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012016:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801201c:	2b00      	cmp	r3, #0
 801201e:	d03b      	beq.n	8012098 <I2C_ITError+0x154>
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	2b11      	cmp	r3, #17
 8012024:	d002      	beq.n	801202c <I2C_ITError+0xe8>
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	2b21      	cmp	r3, #33	@ 0x21
 801202a:	d135      	bne.n	8012098 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	2380      	movs	r3, #128	@ 0x80
 8012034:	01db      	lsls	r3, r3, #7
 8012036:	401a      	ands	r2, r3
 8012038:	2380      	movs	r3, #128	@ 0x80
 801203a:	01db      	lsls	r3, r3, #7
 801203c:	429a      	cmp	r2, r3
 801203e:	d107      	bne.n	8012050 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	493c      	ldr	r1, [pc, #240]	@ (801213c <I2C_ITError+0x1f8>)
 801204c:	400a      	ands	r2, r1
 801204e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012054:	0018      	movs	r0, r3
 8012056:	f7fd fd62 	bl	800fb1e <HAL_DMA_GetState>
 801205a:	0003      	movs	r3, r0
 801205c:	2b01      	cmp	r3, #1
 801205e:	d016      	beq.n	801208e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012064:	4a36      	ldr	r2, [pc, #216]	@ (8012140 <I2C_ITError+0x1fc>)
 8012066:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2240      	movs	r2, #64	@ 0x40
 801206c:	2100      	movs	r1, #0
 801206e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012074:	0018      	movs	r0, r3
 8012076:	f7fd fc5d 	bl	800f934 <HAL_DMA_Abort_IT>
 801207a:	1e03      	subs	r3, r0, #0
 801207c:	d051      	beq.n	8012122 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012088:	0018      	movs	r0, r3
 801208a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801208c:	e049      	b.n	8012122 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	0018      	movs	r0, r3
 8012092:	f000 f859 	bl	8012148 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012096:	e044      	b.n	8012122 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801209c:	2b00      	cmp	r3, #0
 801209e:	d03b      	beq.n	8012118 <I2C_ITError+0x1d4>
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2b12      	cmp	r3, #18
 80120a4:	d002      	beq.n	80120ac <I2C_ITError+0x168>
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2b22      	cmp	r3, #34	@ 0x22
 80120aa:	d135      	bne.n	8012118 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	2380      	movs	r3, #128	@ 0x80
 80120b4:	021b      	lsls	r3, r3, #8
 80120b6:	401a      	ands	r2, r3
 80120b8:	2380      	movs	r3, #128	@ 0x80
 80120ba:	021b      	lsls	r3, r3, #8
 80120bc:	429a      	cmp	r2, r3
 80120be:	d107      	bne.n	80120d0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	491e      	ldr	r1, [pc, #120]	@ (8012144 <I2C_ITError+0x200>)
 80120cc:	400a      	ands	r2, r1
 80120ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120d4:	0018      	movs	r0, r3
 80120d6:	f7fd fd22 	bl	800fb1e <HAL_DMA_GetState>
 80120da:	0003      	movs	r3, r0
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d016      	beq.n	801210e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120e4:	4a16      	ldr	r2, [pc, #88]	@ (8012140 <I2C_ITError+0x1fc>)
 80120e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2240      	movs	r2, #64	@ 0x40
 80120ec:	2100      	movs	r1, #0
 80120ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f4:	0018      	movs	r0, r3
 80120f6:	f7fd fc1d 	bl	800f934 <HAL_DMA_Abort_IT>
 80120fa:	1e03      	subs	r3, r0, #0
 80120fc:	d013      	beq.n	8012126 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012108:	0018      	movs	r0, r3
 801210a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801210c:	e00b      	b.n	8012126 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	0018      	movs	r0, r3
 8012112:	f000 f819 	bl	8012148 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012116:	e006      	b.n	8012126 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	0018      	movs	r0, r3
 801211c:	f000 f814 	bl	8012148 <I2C_TreatErrorCallback>
  }
}
 8012120:	e002      	b.n	8012128 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012122:	46c0      	nop			@ (mov r8, r8)
 8012124:	e000      	b.n	8012128 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012126:	46c0      	nop			@ (mov r8, r8)
}
 8012128:	46c0      	nop			@ (mov r8, r8)
 801212a:	46bd      	mov	sp, r7
 801212c:	b004      	add	sp, #16
 801212e:	bd80      	pop	{r7, pc}
 8012130:	ffff0000 	.word	0xffff0000
 8012134:	08011029 	.word	0x08011029
 8012138:	00008003 	.word	0x00008003
 801213c:	ffffbfff 	.word	0xffffbfff
 8012140:	08012353 	.word	0x08012353
 8012144:	ffff7fff 	.word	0xffff7fff

08012148 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2241      	movs	r2, #65	@ 0x41
 8012154:	5c9b      	ldrb	r3, [r3, r2]
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b60      	cmp	r3, #96	@ 0x60
 801215a:	d10f      	bne.n	801217c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2241      	movs	r2, #65	@ 0x41
 8012160:	2120      	movs	r1, #32
 8012162:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2200      	movs	r2, #0
 8012168:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2240      	movs	r2, #64	@ 0x40
 801216e:	2100      	movs	r1, #0
 8012170:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	0018      	movs	r0, r3
 8012176:	f7fe fe24 	bl	8010dc2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801217a:	e00a      	b.n	8012192 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2240      	movs	r2, #64	@ 0x40
 8012186:	2100      	movs	r1, #0
 8012188:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	0018      	movs	r0, r3
 801218e:	f7fe fe10 	bl	8010db2 <HAL_I2C_ErrorCallback>
}
 8012192:	46c0      	nop			@ (mov r8, r8)
 8012194:	46bd      	mov	sp, r7
 8012196:	b002      	add	sp, #8
 8012198:	bd80      	pop	{r7, pc}

0801219a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801219a:	b580      	push	{r7, lr}
 801219c:	b082      	sub	sp, #8
 801219e:	af00      	add	r7, sp, #0
 80121a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	699b      	ldr	r3, [r3, #24]
 80121a8:	2202      	movs	r2, #2
 80121aa:	4013      	ands	r3, r2
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d103      	bne.n	80121b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2200      	movs	r2, #0
 80121b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	699b      	ldr	r3, [r3, #24]
 80121be:	2201      	movs	r2, #1
 80121c0:	4013      	ands	r3, r2
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	d007      	beq.n	80121d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	699a      	ldr	r2, [r3, #24]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2101      	movs	r1, #1
 80121d2:	430a      	orrs	r2, r1
 80121d4:	619a      	str	r2, [r3, #24]
  }
}
 80121d6:	46c0      	nop			@ (mov r8, r8)
 80121d8:	46bd      	mov	sp, r7
 80121da:	b002      	add	sp, #8
 80121dc:	bd80      	pop	{r7, pc}
	...

080121e0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121ec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4920      	ldr	r1, [pc, #128]	@ (801227c <I2C_DMAMasterTransmitCplt+0x9c>)
 80121fa:	400a      	ands	r2, r1
 80121fc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012202:	b29b      	uxth	r3, r3
 8012204:	2b00      	cmp	r3, #0
 8012206:	d105      	bne.n	8012214 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2120      	movs	r1, #32
 801220c:	0018      	movs	r0, r3
 801220e:	f000 fb4b 	bl	80128a8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012212:	e02e      	b.n	8012272 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801221c:	189a      	adds	r2, r3, r2
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012226:	b29b      	uxth	r3, r3
 8012228:	2bff      	cmp	r3, #255	@ 0xff
 801222a:	d903      	bls.n	8012234 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	22ff      	movs	r2, #255	@ 0xff
 8012230:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012232:	e004      	b.n	801223e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012238:	b29a      	uxth	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012246:	0019      	movs	r1, r3
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	3328      	adds	r3, #40	@ 0x28
 801224e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012254:	f7fd fac8 	bl	800f7e8 <HAL_DMA_Start_IT>
 8012258:	1e03      	subs	r3, r0, #0
 801225a:	d005      	beq.n	8012268 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2110      	movs	r1, #16
 8012260:	0018      	movs	r0, r3
 8012262:	f7ff fe6f 	bl	8011f44 <I2C_ITError>
}
 8012266:	e004      	b.n	8012272 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2140      	movs	r1, #64	@ 0x40
 801226c:	0018      	movs	r0, r3
 801226e:	f000 fb1b 	bl	80128a8 <I2C_Enable_IRQ>
}
 8012272:	46c0      	nop			@ (mov r8, r8)
 8012274:	46bd      	mov	sp, r7
 8012276:	b004      	add	sp, #16
 8012278:	bd80      	pop	{r7, pc}
 801227a:	46c0      	nop			@ (mov r8, r8)
 801227c:	ffffbfff 	.word	0xffffbfff

08012280 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801228c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4920      	ldr	r1, [pc, #128]	@ (801231c <I2C_DMAMasterReceiveCplt+0x9c>)
 801229a:	400a      	ands	r2, r1
 801229c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d105      	bne.n	80122b4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2120      	movs	r1, #32
 80122ac:	0018      	movs	r0, r3
 80122ae:	f000 fafb 	bl	80128a8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80122b2:	e02e      	b.n	8012312 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122b8:	68fa      	ldr	r2, [r7, #12]
 80122ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80122bc:	189a      	adds	r2, r3, r2
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	2bff      	cmp	r3, #255	@ 0xff
 80122ca:	d903      	bls.n	80122d4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	22ff      	movs	r2, #255	@ 0xff
 80122d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80122d2:	e004      	b.n	80122de <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122d8:	b29a      	uxth	r2, r3
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	3324      	adds	r3, #36	@ 0x24
 80122e8:	0019      	movs	r1, r3
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80122f4:	f7fd fa78 	bl	800f7e8 <HAL_DMA_Start_IT>
 80122f8:	1e03      	subs	r3, r0, #0
 80122fa:	d005      	beq.n	8012308 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	2110      	movs	r1, #16
 8012300:	0018      	movs	r0, r3
 8012302:	f7ff fe1f 	bl	8011f44 <I2C_ITError>
}
 8012306:	e004      	b.n	8012312 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2140      	movs	r1, #64	@ 0x40
 801230c:	0018      	movs	r0, r3
 801230e:	f000 facb 	bl	80128a8 <I2C_Enable_IRQ>
}
 8012312:	46c0      	nop			@ (mov r8, r8)
 8012314:	46bd      	mov	sp, r7
 8012316:	b004      	add	sp, #16
 8012318:	bd80      	pop	{r7, pc}
 801231a:	46c0      	nop			@ (mov r8, r8)
 801231c:	ffff7fff 	.word	0xffff7fff

08012320 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801232c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2180      	movs	r1, #128	@ 0x80
 801233a:	0209      	lsls	r1, r1, #8
 801233c:	430a      	orrs	r2, r1
 801233e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2110      	movs	r1, #16
 8012344:	0018      	movs	r0, r3
 8012346:	f7ff fdfd 	bl	8011f44 <I2C_ITError>
}
 801234a:	46c0      	nop			@ (mov r8, r8)
 801234c:	46bd      	mov	sp, r7
 801234e:	b004      	add	sp, #16
 8012350:	bd80      	pop	{r7, pc}

08012352 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b084      	sub	sp, #16
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801235e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012364:	2b00      	cmp	r3, #0
 8012366:	d003      	beq.n	8012370 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801236c:	2200      	movs	r2, #0
 801236e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012374:	2b00      	cmp	r3, #0
 8012376:	d003      	beq.n	8012380 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801237c:	2200      	movs	r2, #0
 801237e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	0018      	movs	r0, r3
 8012384:	f7ff fee0 	bl	8012148 <I2C_TreatErrorCallback>
}
 8012388:	46c0      	nop			@ (mov r8, r8)
 801238a:	46bd      	mov	sp, r7
 801238c:	b004      	add	sp, #16
 801238e:	bd80      	pop	{r7, pc}

08012390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	603b      	str	r3, [r7, #0]
 801239c:	1dfb      	adds	r3, r7, #7
 801239e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80123a0:	e030      	b.n	8012404 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	3301      	adds	r3, #1
 80123a6:	d02d      	beq.n	8012404 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123a8:	f7fc fccc 	bl	800ed44 <HAL_GetTick>
 80123ac:	0002      	movs	r2, r0
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	683a      	ldr	r2, [r7, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d302      	bcc.n	80123be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d122      	bne.n	8012404 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	4013      	ands	r3, r2
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	425a      	negs	r2, r3
 80123ce:	4153      	adcs	r3, r2
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	001a      	movs	r2, r3
 80123d4:	1dfb      	adds	r3, r7, #7
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d113      	bne.n	8012404 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123e0:	2220      	movs	r2, #32
 80123e2:	431a      	orrs	r2, r3
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2241      	movs	r2, #65	@ 0x41
 80123ec:	2120      	movs	r1, #32
 80123ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2242      	movs	r2, #66	@ 0x42
 80123f4:	2100      	movs	r1, #0
 80123f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2240      	movs	r2, #64	@ 0x40
 80123fc:	2100      	movs	r1, #0
 80123fe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012400:	2301      	movs	r3, #1
 8012402:	e00f      	b.n	8012424 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	699b      	ldr	r3, [r3, #24]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	4013      	ands	r3, r2
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	425a      	negs	r2, r3
 8012414:	4153      	adcs	r3, r2
 8012416:	b2db      	uxtb	r3, r3
 8012418:	001a      	movs	r2, r3
 801241a:	1dfb      	adds	r3, r7, #7
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	429a      	cmp	r2, r3
 8012420:	d0bf      	beq.n	80123a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012422:	2300      	movs	r3, #0
}
 8012424:	0018      	movs	r0, r3
 8012426:	46bd      	mov	sp, r7
 8012428:	b004      	add	sp, #16
 801242a:	bd80      	pop	{r7, pc}

0801242c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012438:	e032      	b.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	68b9      	ldr	r1, [r7, #8]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	0018      	movs	r0, r3
 8012442:	f000 f8ff 	bl	8012644 <I2C_IsErrorOccurred>
 8012446:	1e03      	subs	r3, r0, #0
 8012448:	d001      	beq.n	801244e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801244a:	2301      	movs	r3, #1
 801244c:	e030      	b.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	3301      	adds	r3, #1
 8012452:	d025      	beq.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012454:	f7fc fc76 	bl	800ed44 <HAL_GetTick>
 8012458:	0002      	movs	r2, r0
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	68ba      	ldr	r2, [r7, #8]
 8012460:	429a      	cmp	r2, r3
 8012462:	d302      	bcc.n	801246a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d11a      	bne.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	699b      	ldr	r3, [r3, #24]
 8012470:	2202      	movs	r2, #2
 8012472:	4013      	ands	r3, r2
 8012474:	2b02      	cmp	r3, #2
 8012476:	d013      	beq.n	80124a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801247c:	2220      	movs	r2, #32
 801247e:	431a      	orrs	r2, r3
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2241      	movs	r2, #65	@ 0x41
 8012488:	2120      	movs	r1, #32
 801248a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2242      	movs	r2, #66	@ 0x42
 8012490:	2100      	movs	r1, #0
 8012492:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2240      	movs	r2, #64	@ 0x40
 8012498:	2100      	movs	r1, #0
 801249a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	e007      	b.n	80124b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	2202      	movs	r2, #2
 80124a8:	4013      	ands	r3, r2
 80124aa:	2b02      	cmp	r3, #2
 80124ac:	d1c5      	bne.n	801243a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	0018      	movs	r0, r3
 80124b2:	46bd      	mov	sp, r7
 80124b4:	b004      	add	sp, #16
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124c4:	e02f      	b.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	68b9      	ldr	r1, [r7, #8]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	0018      	movs	r0, r3
 80124ce:	f000 f8b9 	bl	8012644 <I2C_IsErrorOccurred>
 80124d2:	1e03      	subs	r3, r0, #0
 80124d4:	d001      	beq.n	80124da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	e02d      	b.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124da:	f7fc fc33 	bl	800ed44 <HAL_GetTick>
 80124de:	0002      	movs	r2, r0
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d302      	bcc.n	80124f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d11a      	bne.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	699b      	ldr	r3, [r3, #24]
 80124f6:	2220      	movs	r2, #32
 80124f8:	4013      	ands	r3, r2
 80124fa:	2b20      	cmp	r3, #32
 80124fc:	d013      	beq.n	8012526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012502:	2220      	movs	r2, #32
 8012504:	431a      	orrs	r2, r3
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2241      	movs	r2, #65	@ 0x41
 801250e:	2120      	movs	r1, #32
 8012510:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2242      	movs	r2, #66	@ 0x42
 8012516:	2100      	movs	r1, #0
 8012518:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2240      	movs	r2, #64	@ 0x40
 801251e:	2100      	movs	r1, #0
 8012520:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	e007      	b.n	8012536 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	699b      	ldr	r3, [r3, #24]
 801252c:	2220      	movs	r2, #32
 801252e:	4013      	ands	r3, r2
 8012530:	2b20      	cmp	r3, #32
 8012532:	d1c8      	bne.n	80124c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	0018      	movs	r0, r3
 8012538:	46bd      	mov	sp, r7
 801253a:	b004      	add	sp, #16
 801253c:	bd80      	pop	{r7, pc}
	...

08012540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801254c:	e06b      	b.n	8012626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	0018      	movs	r0, r3
 8012556:	f000 f875 	bl	8012644 <I2C_IsErrorOccurred>
 801255a:	1e03      	subs	r3, r0, #0
 801255c:	d001      	beq.n	8012562 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801255e:	2301      	movs	r3, #1
 8012560:	e069      	b.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	699b      	ldr	r3, [r3, #24]
 8012568:	2220      	movs	r2, #32
 801256a:	4013      	ands	r3, r2
 801256c:	2b20      	cmp	r3, #32
 801256e:	d138      	bne.n	80125e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	699b      	ldr	r3, [r3, #24]
 8012576:	2204      	movs	r2, #4
 8012578:	4013      	ands	r3, r2
 801257a:	2b04      	cmp	r3, #4
 801257c:	d105      	bne.n	801258a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012586:	2300      	movs	r3, #0
 8012588:	e055      	b.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	699b      	ldr	r3, [r3, #24]
 8012590:	2210      	movs	r2, #16
 8012592:	4013      	ands	r3, r2
 8012594:	2b10      	cmp	r3, #16
 8012596:	d107      	bne.n	80125a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2210      	movs	r2, #16
 801259e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2204      	movs	r2, #4
 80125a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80125a6:	e002      	b.n	80125ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2200      	movs	r2, #0
 80125ac:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2220      	movs	r2, #32
 80125b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	685a      	ldr	r2, [r3, #4]
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	491f      	ldr	r1, [pc, #124]	@ (8012640 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80125c2:	400a      	ands	r2, r1
 80125c4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2241      	movs	r2, #65	@ 0x41
 80125ca:	2120      	movs	r1, #32
 80125cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2242      	movs	r2, #66	@ 0x42
 80125d2:	2100      	movs	r1, #0
 80125d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2240      	movs	r2, #64	@ 0x40
 80125da:	2100      	movs	r1, #0
 80125dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80125de:	2301      	movs	r3, #1
 80125e0:	e029      	b.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125e2:	f7fc fbaf 	bl	800ed44 <HAL_GetTick>
 80125e6:	0002      	movs	r2, r0
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	68ba      	ldr	r2, [r7, #8]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d302      	bcc.n	80125f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d116      	bne.n	8012626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	699b      	ldr	r3, [r3, #24]
 80125fe:	2204      	movs	r2, #4
 8012600:	4013      	ands	r3, r2
 8012602:	2b04      	cmp	r3, #4
 8012604:	d00f      	beq.n	8012626 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801260a:	2220      	movs	r2, #32
 801260c:	431a      	orrs	r2, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2241      	movs	r2, #65	@ 0x41
 8012616:	2120      	movs	r1, #32
 8012618:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2240      	movs	r2, #64	@ 0x40
 801261e:	2100      	movs	r1, #0
 8012620:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	e007      	b.n	8012636 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	699b      	ldr	r3, [r3, #24]
 801262c:	2204      	movs	r2, #4
 801262e:	4013      	ands	r3, r2
 8012630:	2b04      	cmp	r3, #4
 8012632:	d18c      	bne.n	801254e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012634:	2300      	movs	r3, #0
}
 8012636:	0018      	movs	r0, r3
 8012638:	46bd      	mov	sp, r7
 801263a:	b004      	add	sp, #16
 801263c:	bd80      	pop	{r7, pc}
 801263e:	46c0      	nop			@ (mov r8, r8)
 8012640:	fe00e800 	.word	0xfe00e800

08012644 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b08a      	sub	sp, #40	@ 0x28
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012650:	2327      	movs	r3, #39	@ 0x27
 8012652:	18fb      	adds	r3, r7, r3
 8012654:	2200      	movs	r2, #0
 8012656:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	699b      	ldr	r3, [r3, #24]
 801265e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012660:	2300      	movs	r3, #0
 8012662:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	2210      	movs	r2, #16
 801266c:	4013      	ands	r3, r2
 801266e:	d100      	bne.n	8012672 <I2C_IsErrorOccurred+0x2e>
 8012670:	e079      	b.n	8012766 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2210      	movs	r2, #16
 8012678:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801267a:	e057      	b.n	801272c <I2C_IsErrorOccurred+0xe8>
 801267c:	2227      	movs	r2, #39	@ 0x27
 801267e:	18bb      	adds	r3, r7, r2
 8012680:	18ba      	adds	r2, r7, r2
 8012682:	7812      	ldrb	r2, [r2, #0]
 8012684:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	3301      	adds	r3, #1
 801268a:	d04f      	beq.n	801272c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801268c:	f7fc fb5a 	bl	800ed44 <HAL_GetTick>
 8012690:	0002      	movs	r2, r0
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	68ba      	ldr	r2, [r7, #8]
 8012698:	429a      	cmp	r2, r3
 801269a:	d302      	bcc.n	80126a2 <I2C_IsErrorOccurred+0x5e>
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d144      	bne.n	801272c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	685a      	ldr	r2, [r3, #4]
 80126a8:	2380      	movs	r3, #128	@ 0x80
 80126aa:	01db      	lsls	r3, r3, #7
 80126ac:	4013      	ands	r3, r2
 80126ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80126b0:	2013      	movs	r0, #19
 80126b2:	183b      	adds	r3, r7, r0
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	2142      	movs	r1, #66	@ 0x42
 80126b8:	5c52      	ldrb	r2, [r2, r1]
 80126ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	699a      	ldr	r2, [r3, #24]
 80126c2:	2380      	movs	r3, #128	@ 0x80
 80126c4:	021b      	lsls	r3, r3, #8
 80126c6:	401a      	ands	r2, r3
 80126c8:	2380      	movs	r3, #128	@ 0x80
 80126ca:	021b      	lsls	r3, r3, #8
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d126      	bne.n	801271e <I2C_IsErrorOccurred+0xda>
 80126d0:	697a      	ldr	r2, [r7, #20]
 80126d2:	2380      	movs	r3, #128	@ 0x80
 80126d4:	01db      	lsls	r3, r3, #7
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d021      	beq.n	801271e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80126da:	183b      	adds	r3, r7, r0
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	2b20      	cmp	r3, #32
 80126e0:	d01d      	beq.n	801271e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	685a      	ldr	r2, [r3, #4]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2180      	movs	r1, #128	@ 0x80
 80126ee:	01c9      	lsls	r1, r1, #7
 80126f0:	430a      	orrs	r2, r1
 80126f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80126f4:	f7fc fb26 	bl	800ed44 <HAL_GetTick>
 80126f8:	0003      	movs	r3, r0
 80126fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126fc:	e00f      	b.n	801271e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80126fe:	f7fc fb21 	bl	800ed44 <HAL_GetTick>
 8012702:	0002      	movs	r2, r0
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	2b19      	cmp	r3, #25
 801270a:	d908      	bls.n	801271e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	2220      	movs	r2, #32
 8012710:	4313      	orrs	r3, r2
 8012712:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012714:	2327      	movs	r3, #39	@ 0x27
 8012716:	18fb      	adds	r3, r7, r3
 8012718:	2201      	movs	r2, #1
 801271a:	701a      	strb	r2, [r3, #0]

              break;
 801271c:	e006      	b.n	801272c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	699b      	ldr	r3, [r3, #24]
 8012724:	2220      	movs	r2, #32
 8012726:	4013      	ands	r3, r2
 8012728:	2b20      	cmp	r3, #32
 801272a:	d1e8      	bne.n	80126fe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	699b      	ldr	r3, [r3, #24]
 8012732:	2220      	movs	r2, #32
 8012734:	4013      	ands	r3, r2
 8012736:	2b20      	cmp	r3, #32
 8012738:	d004      	beq.n	8012744 <I2C_IsErrorOccurred+0x100>
 801273a:	2327      	movs	r3, #39	@ 0x27
 801273c:	18fb      	adds	r3, r7, r3
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d09b      	beq.n	801267c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012744:	2327      	movs	r3, #39	@ 0x27
 8012746:	18fb      	adds	r3, r7, r3
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d103      	bne.n	8012756 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2220      	movs	r2, #32
 8012754:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012756:	6a3b      	ldr	r3, [r7, #32]
 8012758:	2204      	movs	r2, #4
 801275a:	4313      	orrs	r3, r2
 801275c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801275e:	2327      	movs	r3, #39	@ 0x27
 8012760:	18fb      	adds	r3, r7, r3
 8012762:	2201      	movs	r2, #1
 8012764:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	699b      	ldr	r3, [r3, #24]
 801276c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801276e:	69ba      	ldr	r2, [r7, #24]
 8012770:	2380      	movs	r3, #128	@ 0x80
 8012772:	005b      	lsls	r3, r3, #1
 8012774:	4013      	ands	r3, r2
 8012776:	d00c      	beq.n	8012792 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012778:	6a3b      	ldr	r3, [r7, #32]
 801277a:	2201      	movs	r2, #1
 801277c:	4313      	orrs	r3, r2
 801277e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2280      	movs	r2, #128	@ 0x80
 8012786:	0052      	lsls	r2, r2, #1
 8012788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801278a:	2327      	movs	r3, #39	@ 0x27
 801278c:	18fb      	adds	r3, r7, r3
 801278e:	2201      	movs	r2, #1
 8012790:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012792:	69ba      	ldr	r2, [r7, #24]
 8012794:	2380      	movs	r3, #128	@ 0x80
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	4013      	ands	r3, r2
 801279a:	d00c      	beq.n	80127b6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	2208      	movs	r2, #8
 80127a0:	4313      	orrs	r3, r2
 80127a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2280      	movs	r2, #128	@ 0x80
 80127aa:	00d2      	lsls	r2, r2, #3
 80127ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127ae:	2327      	movs	r3, #39	@ 0x27
 80127b0:	18fb      	adds	r3, r7, r3
 80127b2:	2201      	movs	r2, #1
 80127b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80127b6:	69ba      	ldr	r2, [r7, #24]
 80127b8:	2380      	movs	r3, #128	@ 0x80
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4013      	ands	r3, r2
 80127be:	d00c      	beq.n	80127da <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80127c0:	6a3b      	ldr	r3, [r7, #32]
 80127c2:	2202      	movs	r2, #2
 80127c4:	4313      	orrs	r3, r2
 80127c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2280      	movs	r2, #128	@ 0x80
 80127ce:	0092      	lsls	r2, r2, #2
 80127d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127d2:	2327      	movs	r3, #39	@ 0x27
 80127d4:	18fb      	adds	r3, r7, r3
 80127d6:	2201      	movs	r2, #1
 80127d8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80127da:	2327      	movs	r3, #39	@ 0x27
 80127dc:	18fb      	adds	r3, r7, r3
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d01d      	beq.n	8012820 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	0018      	movs	r0, r3
 80127e8:	f7ff fcd7 	bl	801219a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	685a      	ldr	r2, [r3, #4]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	490e      	ldr	r1, [pc, #56]	@ (8012830 <I2C_IsErrorOccurred+0x1ec>)
 80127f8:	400a      	ands	r2, r1
 80127fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012800:	6a3b      	ldr	r3, [r7, #32]
 8012802:	431a      	orrs	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2241      	movs	r2, #65	@ 0x41
 801280c:	2120      	movs	r1, #32
 801280e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2242      	movs	r2, #66	@ 0x42
 8012814:	2100      	movs	r1, #0
 8012816:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2240      	movs	r2, #64	@ 0x40
 801281c:	2100      	movs	r1, #0
 801281e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012820:	2327      	movs	r3, #39	@ 0x27
 8012822:	18fb      	adds	r3, r7, r3
 8012824:	781b      	ldrb	r3, [r3, #0]
}
 8012826:	0018      	movs	r0, r3
 8012828:	46bd      	mov	sp, r7
 801282a:	b00a      	add	sp, #40	@ 0x28
 801282c:	bd80      	pop	{r7, pc}
 801282e:	46c0      	nop			@ (mov r8, r8)
 8012830:	fe00e800 	.word	0xfe00e800

08012834 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012834:	b590      	push	{r4, r7, lr}
 8012836:	b087      	sub	sp, #28
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	0008      	movs	r0, r1
 801283e:	0011      	movs	r1, r2
 8012840:	607b      	str	r3, [r7, #4]
 8012842:	240a      	movs	r4, #10
 8012844:	193b      	adds	r3, r7, r4
 8012846:	1c02      	adds	r2, r0, #0
 8012848:	801a      	strh	r2, [r3, #0]
 801284a:	2009      	movs	r0, #9
 801284c:	183b      	adds	r3, r7, r0
 801284e:	1c0a      	adds	r2, r1, #0
 8012850:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012852:	193b      	adds	r3, r7, r4
 8012854:	881b      	ldrh	r3, [r3, #0]
 8012856:	059b      	lsls	r3, r3, #22
 8012858:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801285a:	183b      	adds	r3, r7, r0
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	0419      	lsls	r1, r3, #16
 8012860:	23ff      	movs	r3, #255	@ 0xff
 8012862:	041b      	lsls	r3, r3, #16
 8012864:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012866:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801286e:	4313      	orrs	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	085b      	lsrs	r3, r3, #1
 8012874:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801287e:	0d51      	lsrs	r1, r2, #21
 8012880:	2280      	movs	r2, #128	@ 0x80
 8012882:	00d2      	lsls	r2, r2, #3
 8012884:	400a      	ands	r2, r1
 8012886:	4907      	ldr	r1, [pc, #28]	@ (80128a4 <I2C_TransferConfig+0x70>)
 8012888:	430a      	orrs	r2, r1
 801288a:	43d2      	mvns	r2, r2
 801288c:	401a      	ands	r2, r3
 801288e:	0011      	movs	r1, r2
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	697a      	ldr	r2, [r7, #20]
 8012896:	430a      	orrs	r2, r1
 8012898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801289a:	46c0      	nop			@ (mov r8, r8)
 801289c:	46bd      	mov	sp, r7
 801289e:	b007      	add	sp, #28
 80128a0:	bd90      	pop	{r4, r7, pc}
 80128a2:	46c0      	nop			@ (mov r8, r8)
 80128a4:	03ff63ff 	.word	0x03ff63ff

080128a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	000a      	movs	r2, r1
 80128b2:	1cbb      	adds	r3, r7, #2
 80128b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80128b6:	2300      	movs	r3, #0
 80128b8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128be:	4b3e      	ldr	r3, [pc, #248]	@ (80129b8 <I2C_Enable_IRQ+0x110>)
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d035      	beq.n	8012930 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80128c8:	4b3c      	ldr	r3, [pc, #240]	@ (80129bc <I2C_Enable_IRQ+0x114>)
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d030      	beq.n	8012930 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80128d2:	4b3b      	ldr	r3, [pc, #236]	@ (80129c0 <I2C_Enable_IRQ+0x118>)
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d02b      	beq.n	8012930 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80128d8:	1cbb      	adds	r3, r7, #2
 80128da:	2200      	movs	r2, #0
 80128dc:	5e9b      	ldrsh	r3, [r3, r2]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	da03      	bge.n	80128ea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	22b8      	movs	r2, #184	@ 0xb8
 80128e6:	4313      	orrs	r3, r2
 80128e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80128ea:	1cbb      	adds	r3, r7, #2
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	2201      	movs	r2, #1
 80128f0:	4013      	ands	r3, r2
 80128f2:	d003      	beq.n	80128fc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	22f2      	movs	r2, #242	@ 0xf2
 80128f8:	4313      	orrs	r3, r2
 80128fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80128fc:	1cbb      	adds	r3, r7, #2
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	2202      	movs	r2, #2
 8012902:	4013      	ands	r3, r2
 8012904:	d003      	beq.n	801290e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	22f4      	movs	r2, #244	@ 0xf4
 801290a:	4313      	orrs	r3, r2
 801290c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801290e:	1cbb      	adds	r3, r7, #2
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	2b10      	cmp	r3, #16
 8012914:	d103      	bne.n	801291e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2290      	movs	r2, #144	@ 0x90
 801291a:	4313      	orrs	r3, r2
 801291c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801291e:	1cbb      	adds	r3, r7, #2
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	2b20      	cmp	r3, #32
 8012924:	d13c      	bne.n	80129a0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2220      	movs	r2, #32
 801292a:	4313      	orrs	r3, r2
 801292c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801292e:	e037      	b.n	80129a0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012930:	1cbb      	adds	r3, r7, #2
 8012932:	2200      	movs	r2, #0
 8012934:	5e9b      	ldrsh	r3, [r3, r2]
 8012936:	2b00      	cmp	r3, #0
 8012938:	da03      	bge.n	8012942 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	22b8      	movs	r2, #184	@ 0xb8
 801293e:	4313      	orrs	r3, r2
 8012940:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012942:	1cbb      	adds	r3, r7, #2
 8012944:	881b      	ldrh	r3, [r3, #0]
 8012946:	2201      	movs	r2, #1
 8012948:	4013      	ands	r3, r2
 801294a:	d003      	beq.n	8012954 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	22f2      	movs	r2, #242	@ 0xf2
 8012950:	4313      	orrs	r3, r2
 8012952:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012954:	1cbb      	adds	r3, r7, #2
 8012956:	881b      	ldrh	r3, [r3, #0]
 8012958:	2202      	movs	r2, #2
 801295a:	4013      	ands	r3, r2
 801295c:	d003      	beq.n	8012966 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	22f4      	movs	r2, #244	@ 0xf4
 8012962:	4313      	orrs	r3, r2
 8012964:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012966:	1cbb      	adds	r3, r7, #2
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	2b10      	cmp	r3, #16
 801296c:	d103      	bne.n	8012976 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2290      	movs	r2, #144	@ 0x90
 8012972:	4313      	orrs	r3, r2
 8012974:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012976:	1cbb      	adds	r3, r7, #2
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	2b20      	cmp	r3, #32
 801297c:	d103      	bne.n	8012986 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2260      	movs	r2, #96	@ 0x60
 8012982:	4313      	orrs	r3, r2
 8012984:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801298a:	4b0d      	ldr	r3, [pc, #52]	@ (80129c0 <I2C_Enable_IRQ+0x118>)
 801298c:	429a      	cmp	r2, r3
 801298e:	d007      	beq.n	80129a0 <I2C_Enable_IRQ+0xf8>
 8012990:	1cbb      	adds	r3, r7, #2
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	2b40      	cmp	r3, #64	@ 0x40
 8012996:	d103      	bne.n	80129a0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2240      	movs	r2, #64	@ 0x40
 801299c:	4313      	orrs	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6819      	ldr	r1, [r3, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	68fa      	ldr	r2, [r7, #12]
 80129ac:	430a      	orrs	r2, r1
 80129ae:	601a      	str	r2, [r3, #0]
}
 80129b0:	46c0      	nop			@ (mov r8, r8)
 80129b2:	46bd      	mov	sp, r7
 80129b4:	b004      	add	sp, #16
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	08011229 	.word	0x08011229
 80129bc:	08011659 	.word	0x08011659
 80129c0:	08011421 	.word	0x08011421

080129c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	000a      	movs	r2, r1
 80129ce:	1cbb      	adds	r3, r7, #2
 80129d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80129d2:	2300      	movs	r3, #0
 80129d4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80129d6:	1cbb      	adds	r3, r7, #2
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	2201      	movs	r2, #1
 80129dc:	4013      	ands	r3, r2
 80129de:	d010      	beq.n	8012a02 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2242      	movs	r2, #66	@ 0x42
 80129e4:	4313      	orrs	r3, r2
 80129e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2241      	movs	r2, #65	@ 0x41
 80129ec:	5c9b      	ldrb	r3, [r3, r2]
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	001a      	movs	r2, r3
 80129f2:	2328      	movs	r3, #40	@ 0x28
 80129f4:	4013      	ands	r3, r2
 80129f6:	2b28      	cmp	r3, #40	@ 0x28
 80129f8:	d003      	beq.n	8012a02 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	22b0      	movs	r2, #176	@ 0xb0
 80129fe:	4313      	orrs	r3, r2
 8012a00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012a02:	1cbb      	adds	r3, r7, #2
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	2202      	movs	r2, #2
 8012a08:	4013      	ands	r3, r2
 8012a0a:	d010      	beq.n	8012a2e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	2244      	movs	r2, #68	@ 0x44
 8012a10:	4313      	orrs	r3, r2
 8012a12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2241      	movs	r2, #65	@ 0x41
 8012a18:	5c9b      	ldrb	r3, [r3, r2]
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	001a      	movs	r2, r3
 8012a1e:	2328      	movs	r3, #40	@ 0x28
 8012a20:	4013      	ands	r3, r2
 8012a22:	2b28      	cmp	r3, #40	@ 0x28
 8012a24:	d003      	beq.n	8012a2e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	22b0      	movs	r2, #176	@ 0xb0
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012a2e:	1cbb      	adds	r3, r7, #2
 8012a30:	2200      	movs	r2, #0
 8012a32:	5e9b      	ldrsh	r3, [r3, r2]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	da03      	bge.n	8012a40 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	22b8      	movs	r2, #184	@ 0xb8
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012a40:	1cbb      	adds	r3, r7, #2
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	2b10      	cmp	r3, #16
 8012a46:	d103      	bne.n	8012a50 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2290      	movs	r2, #144	@ 0x90
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012a50:	1cbb      	adds	r3, r7, #2
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	2b20      	cmp	r3, #32
 8012a56:	d103      	bne.n	8012a60 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2220      	movs	r2, #32
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012a60:	1cbb      	adds	r3, r7, #2
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	2b40      	cmp	r3, #64	@ 0x40
 8012a66:	d103      	bne.n	8012a70 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2240      	movs	r2, #64	@ 0x40
 8012a6c:	4313      	orrs	r3, r2
 8012a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	43d9      	mvns	r1, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	400a      	ands	r2, r1
 8012a80:	601a      	str	r2, [r3, #0]
}
 8012a82:	46c0      	nop			@ (mov r8, r8)
 8012a84:	46bd      	mov	sp, r7
 8012a86:	b004      	add	sp, #16
 8012a88:	bd80      	pop	{r7, pc}
	...

08012a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2241      	movs	r2, #65	@ 0x41
 8012a9a:	5c9b      	ldrb	r3, [r3, r2]
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b20      	cmp	r3, #32
 8012aa0:	d138      	bne.n	8012b14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2240      	movs	r2, #64	@ 0x40
 8012aa6:	5c9b      	ldrb	r3, [r3, r2]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d101      	bne.n	8012ab0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012aac:	2302      	movs	r3, #2
 8012aae:	e032      	b.n	8012b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2240      	movs	r2, #64	@ 0x40
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2241      	movs	r2, #65	@ 0x41
 8012abc:	2124      	movs	r1, #36	@ 0x24
 8012abe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2101      	movs	r1, #1
 8012acc:	438a      	bics	r2, r1
 8012ace:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4911      	ldr	r1, [pc, #68]	@ (8012b20 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012adc:	400a      	ands	r2, r1
 8012ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	6819      	ldr	r1, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	683a      	ldr	r2, [r7, #0]
 8012aec:	430a      	orrs	r2, r1
 8012aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2101      	movs	r1, #1
 8012afc:	430a      	orrs	r2, r1
 8012afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2241      	movs	r2, #65	@ 0x41
 8012b04:	2120      	movs	r1, #32
 8012b06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2240      	movs	r2, #64	@ 0x40
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012b10:	2300      	movs	r3, #0
 8012b12:	e000      	b.n	8012b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012b14:	2302      	movs	r3, #2
  }
}
 8012b16:	0018      	movs	r0, r3
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	b002      	add	sp, #8
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	46c0      	nop			@ (mov r8, r8)
 8012b20:	ffffefff 	.word	0xffffefff

08012b24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2241      	movs	r2, #65	@ 0x41
 8012b32:	5c9b      	ldrb	r3, [r3, r2]
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b20      	cmp	r3, #32
 8012b38:	d139      	bne.n	8012bae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2240      	movs	r2, #64	@ 0x40
 8012b3e:	5c9b      	ldrb	r3, [r3, r2]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d101      	bne.n	8012b48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012b44:	2302      	movs	r3, #2
 8012b46:	e033      	b.n	8012bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2240      	movs	r2, #64	@ 0x40
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2241      	movs	r2, #65	@ 0x41
 8012b54:	2124      	movs	r1, #36	@ 0x24
 8012b56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2101      	movs	r1, #1
 8012b64:	438a      	bics	r2, r1
 8012b66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	4a11      	ldr	r2, [pc, #68]	@ (8012bb8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012b74:	4013      	ands	r3, r2
 8012b76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	021b      	lsls	r3, r3, #8
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	68fa      	ldr	r2, [r7, #12]
 8012b88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	2101      	movs	r1, #1
 8012b96:	430a      	orrs	r2, r1
 8012b98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2241      	movs	r2, #65	@ 0x41
 8012b9e:	2120      	movs	r1, #32
 8012ba0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2240      	movs	r2, #64	@ 0x40
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012baa:	2300      	movs	r3, #0
 8012bac:	e000      	b.n	8012bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012bae:	2302      	movs	r3, #2
  }
}
 8012bb0:	0018      	movs	r0, r3
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	b004      	add	sp, #16
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	fffff0ff 	.word	0xfffff0ff

08012bbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b088      	sub	sp, #32
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d101      	bne.n	8012bce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	e0e1      	b.n	8012d92 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2235      	movs	r2, #53	@ 0x35
 8012bd2:	5c9b      	ldrb	r3, [r3, r2]
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d107      	bne.n	8012bea <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2234      	movs	r2, #52	@ 0x34
 8012bde:	2100      	movs	r1, #0
 8012be0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	0018      	movs	r0, r3
 8012be6:	f7f4 ff53 	bl	8007a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2235      	movs	r2, #53	@ 0x35
 8012bee:	2102      	movs	r1, #2
 8012bf0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	69da      	ldr	r2, [r3, #28]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4967      	ldr	r1, [pc, #412]	@ (8012d9c <HAL_I2S_Init+0x1e0>)
 8012bfe:	400a      	ands	r2, r1
 8012c00:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2202      	movs	r2, #2
 8012c08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	695b      	ldr	r3, [r3, #20]
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d073      	beq.n	8012cfa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012c1a:	2310      	movs	r3, #16
 8012c1c:	617b      	str	r3, [r7, #20]
 8012c1e:	e001      	b.n	8012c24 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012c20:	2320      	movs	r3, #32
 8012c22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	2b20      	cmp	r3, #32
 8012c2a:	d802      	bhi.n	8012c32 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	005b      	lsls	r3, r3, #1
 8012c30:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012c32:	f002 fed3 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 8012c36:	0003      	movs	r3, r0
 8012c38:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	691a      	ldr	r2, [r3, #16]
 8012c3e:	2380      	movs	r3, #128	@ 0x80
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d131      	bne.n	8012caa <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	68db      	ldr	r3, [r3, #12]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d016      	beq.n	8012c7c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	0019      	movs	r1, r3
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ed faa5 	bl	80001a4 <__udivsi3>
 8012c5a:	0003      	movs	r3, r0
 8012c5c:	001a      	movs	r2, r3
 8012c5e:	0013      	movs	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	189b      	adds	r3, r3, r2
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	001a      	movs	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	695b      	ldr	r3, [r3, #20]
 8012c6c:	0019      	movs	r1, r3
 8012c6e:	0010      	movs	r0, r2
 8012c70:	f7ed fa98 	bl	80001a4 <__udivsi3>
 8012c74:	0003      	movs	r3, r0
 8012c76:	3305      	adds	r3, #5
 8012c78:	613b      	str	r3, [r7, #16]
 8012c7a:	e02a      	b.n	8012cd2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	00db      	lsls	r3, r3, #3
 8012c80:	0019      	movs	r1, r3
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f7ed fa8e 	bl	80001a4 <__udivsi3>
 8012c88:	0003      	movs	r3, r0
 8012c8a:	001a      	movs	r2, r3
 8012c8c:	0013      	movs	r3, r2
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	189b      	adds	r3, r3, r2
 8012c92:	005b      	lsls	r3, r3, #1
 8012c94:	001a      	movs	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	695b      	ldr	r3, [r3, #20]
 8012c9a:	0019      	movs	r1, r3
 8012c9c:	0010      	movs	r0, r2
 8012c9e:	f7ed fa81 	bl	80001a4 <__udivsi3>
 8012ca2:	0003      	movs	r3, r0
 8012ca4:	3305      	adds	r3, #5
 8012ca6:	613b      	str	r3, [r7, #16]
 8012ca8:	e013      	b.n	8012cd2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012caa:	6979      	ldr	r1, [r7, #20]
 8012cac:	68f8      	ldr	r0, [r7, #12]
 8012cae:	f7ed fa79 	bl	80001a4 <__udivsi3>
 8012cb2:	0003      	movs	r3, r0
 8012cb4:	001a      	movs	r2, r3
 8012cb6:	0013      	movs	r3, r2
 8012cb8:	009b      	lsls	r3, r3, #2
 8012cba:	189b      	adds	r3, r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	001a      	movs	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	695b      	ldr	r3, [r3, #20]
 8012cc4:	0019      	movs	r1, r3
 8012cc6:	0010      	movs	r0, r2
 8012cc8:	f7ed fa6c 	bl	80001a4 <__udivsi3>
 8012ccc:	0003      	movs	r3, r0
 8012cce:	3305      	adds	r3, #5
 8012cd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	210a      	movs	r1, #10
 8012cd6:	0018      	movs	r0, r3
 8012cd8:	f7ed fa64 	bl	80001a4 <__udivsi3>
 8012cdc:	0003      	movs	r3, r0
 8012cde:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	4013      	ands	r3, r2
 8012ce6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012ce8:	693a      	ldr	r2, [r7, #16]
 8012cea:	69bb      	ldr	r3, [r7, #24]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	085b      	lsrs	r3, r3, #1
 8012cf0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	021b      	lsls	r3, r3, #8
 8012cf6:	61bb      	str	r3, [r7, #24]
 8012cf8:	e003      	b.n	8012d02 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012cfa:	2302      	movs	r3, #2
 8012cfc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d902      	bls.n	8012d0e <HAL_I2S_Init+0x152>
 8012d08:	69fb      	ldr	r3, [r7, #28]
 8012d0a:	2bff      	cmp	r3, #255	@ 0xff
 8012d0c:	d907      	bls.n	8012d1e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d12:	2210      	movs	r2, #16
 8012d14:	431a      	orrs	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e039      	b.n	8012d92 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	691a      	ldr	r2, [r3, #16]
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	431a      	orrs	r2, r3
 8012d26:	0011      	movs	r1, r2
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	69fa      	ldr	r2, [r7, #28]
 8012d2e:	430a      	orrs	r2, r1
 8012d30:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	69db      	ldr	r3, [r3, #28]
 8012d38:	4a18      	ldr	r2, [pc, #96]	@ (8012d9c <HAL_I2S_Init+0x1e0>)
 8012d3a:	401a      	ands	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6859      	ldr	r1, [r3, #4]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	689b      	ldr	r3, [r3, #8]
 8012d44:	4319      	orrs	r1, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	4319      	orrs	r1, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	699b      	ldr	r3, [r3, #24]
 8012d50:	430b      	orrs	r3, r1
 8012d52:	431a      	orrs	r2, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2180      	movs	r1, #128	@ 0x80
 8012d5a:	0109      	lsls	r1, r1, #4
 8012d5c:	430a      	orrs	r2, r1
 8012d5e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	689b      	ldr	r3, [r3, #8]
 8012d64:	2b30      	cmp	r3, #48	@ 0x30
 8012d66:	d003      	beq.n	8012d70 <HAL_I2S_Init+0x1b4>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	689b      	ldr	r3, [r3, #8]
 8012d6c:	2bb0      	cmp	r3, #176	@ 0xb0
 8012d6e:	d108      	bne.n	8012d82 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	69da      	ldr	r2, [r3, #28]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2180      	movs	r1, #128	@ 0x80
 8012d7c:	0149      	lsls	r1, r1, #5
 8012d7e:	430a      	orrs	r2, r1
 8012d80:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2200      	movs	r2, #0
 8012d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2235      	movs	r2, #53	@ 0x35
 8012d8c:	2101      	movs	r1, #1
 8012d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	0018      	movs	r0, r3
 8012d94:	46bd      	mov	sp, r7
 8012d96:	b008      	add	sp, #32
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	46c0      	nop			@ (mov r8, r8)
 8012d9c:	fffff040 	.word	0xfffff040

08012da0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	1dbb      	adds	r3, r7, #6
 8012dac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d003      	beq.n	8012dbc <HAL_I2S_Receive_DMA+0x1c>
 8012db4:	1dbb      	adds	r3, r7, #6
 8012db6:	881b      	ldrh	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d101      	bne.n	8012dc0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e0a6      	b.n	8012f0e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2234      	movs	r2, #52	@ 0x34
 8012dc4:	5c9b      	ldrb	r3, [r3, r2]
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d101      	bne.n	8012dd0 <HAL_I2S_Receive_DMA+0x30>
 8012dcc:	2302      	movs	r3, #2
 8012dce:	e09e      	b.n	8012f0e <HAL_I2S_Receive_DMA+0x16e>
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2234      	movs	r2, #52	@ 0x34
 8012dd4:	2101      	movs	r1, #1
 8012dd6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2235      	movs	r2, #53	@ 0x35
 8012ddc:	5c9b      	ldrb	r3, [r3, r2]
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d005      	beq.n	8012df0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2234      	movs	r2, #52	@ 0x34
 8012de8:	2100      	movs	r1, #0
 8012dea:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012dec:	2302      	movs	r3, #2
 8012dee:	e08e      	b.n	8012f0e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2235      	movs	r2, #53	@ 0x35
 8012df4:	2104      	movs	r1, #4
 8012df6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	69db      	ldr	r3, [r3, #28]
 8012e0a:	2207      	movs	r2, #7
 8012e0c:	4013      	ands	r3, r2
 8012e0e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	2b03      	cmp	r3, #3
 8012e14:	d002      	beq.n	8012e1c <HAL_I2S_Receive_DMA+0x7c>
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	2b05      	cmp	r3, #5
 8012e1a:	d10c      	bne.n	8012e36 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012e1c:	1dbb      	adds	r3, r7, #6
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	18db      	adds	r3, r3, r3
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012e28:	1dbb      	adds	r3, r7, #6
 8012e2a:	881b      	ldrh	r3, [r3, #0]
 8012e2c:	18db      	adds	r3, r3, r3
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012e34:	e007      	b.n	8012e46 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	1dba      	adds	r2, r7, #6
 8012e3a:	8812      	ldrh	r2, [r2, #0]
 8012e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	1dba      	adds	r2, r7, #6
 8012e42:	8812      	ldrh	r2, [r2, #0]
 8012e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e4a:	4a33      	ldr	r2, [pc, #204]	@ (8012f18 <HAL_I2S_Receive_DMA+0x178>)
 8012e4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e52:	4a32      	ldr	r2, [pc, #200]	@ (8012f1c <HAL_I2S_Receive_DMA+0x17c>)
 8012e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e5a:	4a31      	ldr	r2, [pc, #196]	@ (8012f20 <HAL_I2S_Receive_DMA+0x180>)
 8012e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	69da      	ldr	r2, [r3, #28]
 8012e64:	23c0      	movs	r3, #192	@ 0xc0
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	401a      	ands	r2, r3
 8012e6a:	23c0      	movs	r3, #192	@ 0xc0
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d10a      	bne.n	8012e88 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012e72:	2300      	movs	r3, #0
 8012e74:	613b      	str	r3, [r7, #16]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	613b      	str	r3, [r7, #16]
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	689b      	ldr	r3, [r3, #8]
 8012e84:	613b      	str	r3, [r7, #16]
 8012e86:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	330c      	adds	r3, #12
 8012e92:	0019      	movs	r1, r3
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e98:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012ea0:	f7fc fca2 	bl	800f7e8 <HAL_DMA_Start_IT>
 8012ea4:	1e03      	subs	r3, r0, #0
 8012ea6:	d00f      	beq.n	8012ec8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eac:	2208      	movs	r2, #8
 8012eae:	431a      	orrs	r2, r3
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2235      	movs	r2, #53	@ 0x35
 8012eb8:	2101      	movs	r1, #1
 8012eba:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	2234      	movs	r2, #52	@ 0x34
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e022      	b.n	8012f0e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	69da      	ldr	r2, [r3, #28]
 8012ece:	2380      	movs	r3, #128	@ 0x80
 8012ed0:	00db      	lsls	r3, r3, #3
 8012ed2:	4013      	ands	r3, r2
 8012ed4:	d108      	bne.n	8012ee8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	69da      	ldr	r2, [r3, #28]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2180      	movs	r1, #128	@ 0x80
 8012ee2:	00c9      	lsls	r1, r1, #3
 8012ee4:	430a      	orrs	r2, r1
 8012ee6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	2201      	movs	r2, #1
 8012ef0:	4013      	ands	r3, r2
 8012ef2:	d107      	bne.n	8012f04 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	685a      	ldr	r2, [r3, #4]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2101      	movs	r1, #1
 8012f00:	430a      	orrs	r2, r1
 8012f02:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2234      	movs	r2, #52	@ 0x34
 8012f08:	2100      	movs	r1, #0
 8012f0a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	0018      	movs	r0, r3
 8012f10:	46bd      	mov	sp, r7
 8012f12:	b006      	add	sp, #24
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	46c0      	nop			@ (mov r8, r8)
 8012f18:	08013101 	.word	0x08013101
 8012f1c:	080130bd 	.word	0x080130bd
 8012f20:	0801311f 	.word	0x0801311f

08012f24 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f2c:	2317      	movs	r3, #23
 8012f2e:	18fb      	adds	r3, r7, r3
 8012f30:	2200      	movs	r2, #0
 8012f32:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	685a      	ldr	r2, [r3, #4]
 8012f38:	2380      	movs	r3, #128	@ 0x80
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d003      	beq.n	8012f48 <HAL_I2S_DMAStop+0x24>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d158      	bne.n	8012ffa <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d010      	beq.n	8012f72 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f54:	0018      	movs	r0, r3
 8012f56:	f7fc fcad 	bl	800f8b4 <HAL_DMA_Abort>
 8012f5a:	1e03      	subs	r3, r0, #0
 8012f5c:	d009      	beq.n	8012f72 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f62:	2208      	movs	r2, #8
 8012f64:	431a      	orrs	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012f6a:	2317      	movs	r3, #23
 8012f6c:	18fb      	adds	r3, r7, r3
 8012f6e:	2201      	movs	r2, #1
 8012f70:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	2364      	movs	r3, #100	@ 0x64
 8012f76:	2201      	movs	r2, #1
 8012f78:	2102      	movs	r1, #2
 8012f7a:	f000 f8f7 	bl	801316c <I2S_WaitFlagStateUntilTimeout>
 8012f7e:	1e03      	subs	r3, r0, #0
 8012f80:	d00d      	beq.n	8012f9e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f86:	2201      	movs	r2, #1
 8012f88:	431a      	orrs	r2, r3
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2235      	movs	r2, #53	@ 0x35
 8012f92:	2101      	movs	r1, #1
 8012f94:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012f96:	2317      	movs	r3, #23
 8012f98:	18fb      	adds	r3, r7, r3
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	2364      	movs	r3, #100	@ 0x64
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	2180      	movs	r1, #128	@ 0x80
 8012fa6:	f000 f8e1 	bl	801316c <I2S_WaitFlagStateUntilTimeout>
 8012faa:	1e03      	subs	r3, r0, #0
 8012fac:	d00d      	beq.n	8012fca <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	431a      	orrs	r2, r3
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2235      	movs	r2, #53	@ 0x35
 8012fbe:	2101      	movs	r1, #1
 8012fc0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012fc2:	2317      	movs	r3, #23
 8012fc4:	18fb      	adds	r3, r7, r3
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	69da      	ldr	r2, [r3, #28]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4938      	ldr	r1, [pc, #224]	@ (80130b8 <HAL_I2S_DMAStop+0x194>)
 8012fd6:	400a      	ands	r2, r1
 8012fd8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012fda:	2300      	movs	r3, #0
 8012fdc:	613b      	str	r3, [r7, #16]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	613b      	str	r3, [r7, #16]
 8012fe6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	685a      	ldr	r2, [r3, #4]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2102      	movs	r1, #2
 8012ff4:	438a      	bics	r2, r1
 8012ff6:	605a      	str	r2, [r3, #4]
 8012ff8:	e053      	b.n	80130a2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	23c0      	movs	r3, #192	@ 0xc0
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	429a      	cmp	r2, r3
 8013004:	d005      	beq.n	8013012 <HAL_I2S_DMAStop+0xee>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	685a      	ldr	r2, [r3, #4]
 801300a:	2380      	movs	r3, #128	@ 0x80
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	429a      	cmp	r2, r3
 8013010:	d147      	bne.n	80130a2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013016:	2b00      	cmp	r3, #0
 8013018:	d010      	beq.n	801303c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801301e:	0018      	movs	r0, r3
 8013020:	f7fc fc48 	bl	800f8b4 <HAL_DMA_Abort>
 8013024:	1e03      	subs	r3, r0, #0
 8013026:	d009      	beq.n	801303c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801302c:	2208      	movs	r2, #8
 801302e:	431a      	orrs	r2, r3
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013034:	2317      	movs	r3, #23
 8013036:	18fb      	adds	r3, r7, r3
 8013038:	2201      	movs	r2, #1
 801303a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	69da      	ldr	r2, [r3, #28]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	491c      	ldr	r1, [pc, #112]	@ (80130b8 <HAL_I2S_DMAStop+0x194>)
 8013048:	400a      	ands	r2, r1
 801304a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801304c:	2300      	movs	r3, #0
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	60fb      	str	r3, [r7, #12]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	689b      	ldr	r3, [r3, #8]
 801305e:	60fb      	str	r3, [r7, #12]
 8013060:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	685a      	ldr	r2, [r3, #4]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	2101      	movs	r1, #1
 801306e:	438a      	bics	r2, r1
 8013070:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685a      	ldr	r2, [r3, #4]
 8013076:	2380      	movs	r3, #128	@ 0x80
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	429a      	cmp	r2, r3
 801307c:	d10e      	bne.n	801309c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013082:	2240      	movs	r2, #64	@ 0x40
 8013084:	431a      	orrs	r2, r3
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2235      	movs	r2, #53	@ 0x35
 801308e:	2101      	movs	r1, #1
 8013090:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8013092:	2317      	movs	r3, #23
 8013094:	18fb      	adds	r3, r7, r3
 8013096:	2201      	movs	r2, #1
 8013098:	701a      	strb	r2, [r3, #0]
 801309a:	e002      	b.n	80130a2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2235      	movs	r2, #53	@ 0x35
 80130a6:	2101      	movs	r1, #1
 80130a8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80130aa:	2317      	movs	r3, #23
 80130ac:	18fb      	adds	r3, r7, r3
 80130ae:	781b      	ldrb	r3, [r3, #0]
}
 80130b0:	0018      	movs	r0, r3
 80130b2:	46bd      	mov	sp, r7
 80130b4:	b006      	add	sp, #24
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	fffffbff 	.word	0xfffffbff

080130bc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130c8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	69db      	ldr	r3, [r3, #28]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d10e      	bne.n	80130f0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2101      	movs	r1, #1
 80130de:	438a      	bics	r2, r1
 80130e0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2200      	movs	r2, #0
 80130e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2235      	movs	r2, #53	@ 0x35
 80130ec:	2101      	movs	r1, #1
 80130ee:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	0018      	movs	r0, r3
 80130f4:	f7f9 fa60 	bl	800c5b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80130f8:	46c0      	nop			@ (mov r8, r8)
 80130fa:	46bd      	mov	sp, r7
 80130fc:	b004      	add	sp, #16
 80130fe:	bd80      	pop	{r7, pc}

08013100 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b084      	sub	sp, #16
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801310c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	0018      	movs	r0, r3
 8013112:	f7f9 fa3f 	bl	800c594 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013116:	46c0      	nop			@ (mov r8, r8)
 8013118:	46bd      	mov	sp, r7
 801311a:	b004      	add	sp, #16
 801311c:	bd80      	pop	{r7, pc}

0801311e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801311e:	b580      	push	{r7, lr}
 8013120:	b084      	sub	sp, #16
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801312a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2103      	movs	r1, #3
 8013138:	438a      	bics	r2, r1
 801313a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2200      	movs	r2, #0
 8013140:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2200      	movs	r2, #0
 8013146:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2235      	movs	r2, #53	@ 0x35
 801314c:	2101      	movs	r1, #1
 801314e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013154:	2208      	movs	r2, #8
 8013156:	431a      	orrs	r2, r3
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	0018      	movs	r0, r3
 8013160:	f7f9 fa78 	bl	800c654 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013164:	46c0      	nop			@ (mov r8, r8)
 8013166:	46bd      	mov	sp, r7
 8013168:	b004      	add	sp, #16
 801316a:	bd80      	pop	{r7, pc}

0801316c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	603b      	str	r3, [r7, #0]
 8013178:	1dfb      	adds	r3, r7, #7
 801317a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801317c:	f7fb fde2 	bl	800ed44 <HAL_GetTick>
 8013180:	0003      	movs	r3, r0
 8013182:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013184:	e017      	b.n	80131b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	3301      	adds	r3, #1
 801318a:	d014      	beq.n	80131b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801318c:	f7fb fdda 	bl	800ed44 <HAL_GetTick>
 8013190:	0002      	movs	r2, r0
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	429a      	cmp	r2, r3
 801319a:	d902      	bls.n	80131a2 <I2S_WaitFlagStateUntilTimeout+0x36>
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d109      	bne.n	80131b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2235      	movs	r2, #53	@ 0x35
 80131a6:	2101      	movs	r1, #1
 80131a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2234      	movs	r2, #52	@ 0x34
 80131ae:	2100      	movs	r1, #0
 80131b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80131b2:	2303      	movs	r3, #3
 80131b4:	e00f      	b.n	80131d6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	68ba      	ldr	r2, [r7, #8]
 80131be:	4013      	ands	r3, r2
 80131c0:	68ba      	ldr	r2, [r7, #8]
 80131c2:	1ad3      	subs	r3, r2, r3
 80131c4:	425a      	negs	r2, r3
 80131c6:	4153      	adcs	r3, r2
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	001a      	movs	r2, r3
 80131cc:	1dfb      	adds	r3, r7, #7
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d1d8      	bne.n	8013186 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80131d4:	2300      	movs	r3, #0
}
 80131d6:	0018      	movs	r0, r3
 80131d8:	46bd      	mov	sp, r7
 80131da:	b006      	add	sp, #24
 80131dc:	bd80      	pop	{r7, pc}
	...

080131e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80131e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e2:	b08b      	sub	sp, #44	@ 0x2c
 80131e4:	af06      	add	r7, sp, #24
 80131e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d101      	bne.n	80131f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80131ee:	2301      	movs	r3, #1
 80131f0:	e0f0      	b.n	80133d4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	4a79      	ldr	r2, [pc, #484]	@ (80133dc <HAL_PCD_Init+0x1fc>)
 80131f6:	5c9b      	ldrb	r3, [r3, r2]
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d108      	bne.n	8013210 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	23aa      	movs	r3, #170	@ 0xaa
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	2100      	movs	r1, #0
 8013206:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	0018      	movs	r0, r3
 801320c:	f009 ff4a 	bl	801d0a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	4a72      	ldr	r2, [pc, #456]	@ (80133dc <HAL_PCD_Init+0x1fc>)
 8013214:	2103      	movs	r1, #3
 8013216:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	0018      	movs	r0, r3
 801321e:	f005 fefd 	bl	801901c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013222:	230f      	movs	r3, #15
 8013224:	18fb      	adds	r3, r7, r3
 8013226:	2200      	movs	r2, #0
 8013228:	701a      	strb	r2, [r3, #0]
 801322a:	e049      	b.n	80132c0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801322c:	200f      	movs	r0, #15
 801322e:	183b      	adds	r3, r7, r0
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	6879      	ldr	r1, [r7, #4]
 8013234:	1c5a      	adds	r2, r3, #1
 8013236:	0013      	movs	r3, r2
 8013238:	009b      	lsls	r3, r3, #2
 801323a:	189b      	adds	r3, r3, r2
 801323c:	00db      	lsls	r3, r3, #3
 801323e:	18cb      	adds	r3, r1, r3
 8013240:	3301      	adds	r3, #1
 8013242:	2201      	movs	r2, #1
 8013244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013246:	183b      	adds	r3, r7, r0
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	6879      	ldr	r1, [r7, #4]
 801324c:	1c5a      	adds	r2, r3, #1
 801324e:	0013      	movs	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	189b      	adds	r3, r3, r2
 8013254:	00db      	lsls	r3, r3, #3
 8013256:	183a      	adds	r2, r7, r0
 8013258:	7812      	ldrb	r2, [r2, #0]
 801325a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801325c:	183b      	adds	r3, r7, r0
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	6879      	ldr	r1, [r7, #4]
 8013262:	1c5a      	adds	r2, r3, #1
 8013264:	0013      	movs	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	189b      	adds	r3, r3, r2
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	18cb      	adds	r3, r1, r3
 801326e:	3303      	adds	r3, #3
 8013270:	2200      	movs	r2, #0
 8013272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013274:	183b      	adds	r3, r7, r0
 8013276:	781a      	ldrb	r2, [r3, #0]
 8013278:	6879      	ldr	r1, [r7, #4]
 801327a:	0013      	movs	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	189b      	adds	r3, r3, r2
 8013280:	00db      	lsls	r3, r3, #3
 8013282:	18cb      	adds	r3, r1, r3
 8013284:	3338      	adds	r3, #56	@ 0x38
 8013286:	2200      	movs	r2, #0
 8013288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801328a:	183b      	adds	r3, r7, r0
 801328c:	781a      	ldrb	r2, [r3, #0]
 801328e:	6879      	ldr	r1, [r7, #4]
 8013290:	0013      	movs	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	189b      	adds	r3, r3, r2
 8013296:	00db      	lsls	r3, r3, #3
 8013298:	18cb      	adds	r3, r1, r3
 801329a:	333c      	adds	r3, #60	@ 0x3c
 801329c:	2200      	movs	r2, #0
 801329e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80132a0:	183b      	adds	r3, r7, r0
 80132a2:	781a      	ldrb	r2, [r3, #0]
 80132a4:	6879      	ldr	r1, [r7, #4]
 80132a6:	0013      	movs	r3, r2
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	189b      	adds	r3, r3, r2
 80132ac:	00db      	lsls	r3, r3, #3
 80132ae:	18cb      	adds	r3, r1, r3
 80132b0:	3340      	adds	r3, #64	@ 0x40
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132b6:	183b      	adds	r3, r7, r0
 80132b8:	781a      	ldrb	r2, [r3, #0]
 80132ba:	183b      	adds	r3, r7, r0
 80132bc:	3201      	adds	r2, #1
 80132be:	701a      	strb	r2, [r3, #0]
 80132c0:	210f      	movs	r1, #15
 80132c2:	187b      	adds	r3, r7, r1
 80132c4:	781a      	ldrb	r2, [r3, #0]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d3ae      	bcc.n	801322c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132ce:	187b      	adds	r3, r7, r1
 80132d0:	2200      	movs	r2, #0
 80132d2:	701a      	strb	r2, [r3, #0]
 80132d4:	e056      	b.n	8013384 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80132d6:	240f      	movs	r4, #15
 80132d8:	193b      	adds	r3, r7, r4
 80132da:	781a      	ldrb	r2, [r3, #0]
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	236a      	movs	r3, #106	@ 0x6a
 80132e0:	33ff      	adds	r3, #255	@ 0xff
 80132e2:	0019      	movs	r1, r3
 80132e4:	0013      	movs	r3, r2
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	189b      	adds	r3, r3, r2
 80132ea:	00db      	lsls	r3, r3, #3
 80132ec:	18c3      	adds	r3, r0, r3
 80132ee:	185b      	adds	r3, r3, r1
 80132f0:	2200      	movs	r2, #0
 80132f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80132f4:	193b      	adds	r3, r7, r4
 80132f6:	781a      	ldrb	r2, [r3, #0]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	23b4      	movs	r3, #180	@ 0xb4
 80132fc:	0059      	lsls	r1, r3, #1
 80132fe:	0013      	movs	r3, r2
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	189b      	adds	r3, r3, r2
 8013304:	00db      	lsls	r3, r3, #3
 8013306:	18c3      	adds	r3, r0, r3
 8013308:	185b      	adds	r3, r3, r1
 801330a:	193a      	adds	r2, r7, r4
 801330c:	7812      	ldrb	r2, [r2, #0]
 801330e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013310:	193b      	adds	r3, r7, r4
 8013312:	781a      	ldrb	r2, [r3, #0]
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	236c      	movs	r3, #108	@ 0x6c
 8013318:	33ff      	adds	r3, #255	@ 0xff
 801331a:	0019      	movs	r1, r3
 801331c:	0013      	movs	r3, r2
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	189b      	adds	r3, r3, r2
 8013322:	00db      	lsls	r3, r3, #3
 8013324:	18c3      	adds	r3, r0, r3
 8013326:	185b      	adds	r3, r3, r1
 8013328:	2200      	movs	r2, #0
 801332a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801332c:	193b      	adds	r3, r7, r4
 801332e:	781a      	ldrb	r2, [r3, #0]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	23bc      	movs	r3, #188	@ 0xbc
 8013334:	0059      	lsls	r1, r3, #1
 8013336:	0013      	movs	r3, r2
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	189b      	adds	r3, r3, r2
 801333c:	00db      	lsls	r3, r3, #3
 801333e:	18c3      	adds	r3, r0, r3
 8013340:	185b      	adds	r3, r3, r1
 8013342:	2200      	movs	r2, #0
 8013344:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013346:	193b      	adds	r3, r7, r4
 8013348:	781a      	ldrb	r2, [r3, #0]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	23be      	movs	r3, #190	@ 0xbe
 801334e:	0059      	lsls	r1, r3, #1
 8013350:	0013      	movs	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	189b      	adds	r3, r3, r2
 8013356:	00db      	lsls	r3, r3, #3
 8013358:	18c3      	adds	r3, r0, r3
 801335a:	185b      	adds	r3, r3, r1
 801335c:	2200      	movs	r2, #0
 801335e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013360:	193b      	adds	r3, r7, r4
 8013362:	781a      	ldrb	r2, [r3, #0]
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	23c0      	movs	r3, #192	@ 0xc0
 8013368:	0059      	lsls	r1, r3, #1
 801336a:	0013      	movs	r3, r2
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	189b      	adds	r3, r3, r2
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	18c3      	adds	r3, r0, r3
 8013374:	185b      	adds	r3, r3, r1
 8013376:	2200      	movs	r2, #0
 8013378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801337a:	193b      	adds	r3, r7, r4
 801337c:	781a      	ldrb	r2, [r3, #0]
 801337e:	193b      	adds	r3, r7, r4
 8013380:	3201      	adds	r2, #1
 8013382:	701a      	strb	r2, [r3, #0]
 8013384:	230f      	movs	r3, #15
 8013386:	18fb      	adds	r3, r7, r3
 8013388:	781a      	ldrb	r2, [r3, #0]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	429a      	cmp	r2, r3
 8013390:	d3a1      	bcc.n	80132d6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6818      	ldr	r0, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	466a      	mov	r2, sp
 801339a:	0011      	movs	r1, r2
 801339c:	001a      	movs	r2, r3
 801339e:	3210      	adds	r2, #16
 80133a0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80133a2:	c170      	stmia	r1!, {r4, r5, r6}
 80133a4:	ca30      	ldmia	r2!, {r4, r5}
 80133a6:	c130      	stmia	r1!, {r4, r5}
 80133a8:	6859      	ldr	r1, [r3, #4]
 80133aa:	689a      	ldr	r2, [r3, #8]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	f005 fe4f 	bl	8019050 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2224      	movs	r2, #36	@ 0x24
 80133b6:	2100      	movs	r1, #0
 80133b8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	4a07      	ldr	r2, [pc, #28]	@ (80133dc <HAL_PCD_Init+0x1fc>)
 80133be:	2101      	movs	r1, #1
 80133c0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	69db      	ldr	r3, [r3, #28]
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d103      	bne.n	80133d2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	0018      	movs	r0, r3
 80133ce:	f001 fd23 	bl	8014e18 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	0018      	movs	r0, r3
 80133d6:	46bd      	mov	sp, r7
 80133d8:	b005      	add	sp, #20
 80133da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133dc:	000002a9 	.word	0x000002a9

080133e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	23aa      	movs	r3, #170	@ 0xaa
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	5cd3      	ldrb	r3, [r2, r3]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d101      	bne.n	80133f8 <HAL_PCD_Start+0x18>
 80133f4:	2302      	movs	r3, #2
 80133f6:	e014      	b.n	8013422 <HAL_PCD_Start+0x42>
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	23aa      	movs	r3, #170	@ 0xaa
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	2101      	movs	r1, #1
 8013400:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	0018      	movs	r0, r3
 8013408:	f005 fdf2 	bl	8018ff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	0018      	movs	r0, r3
 8013412:	f007 fdf5 	bl	801b000 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	23aa      	movs	r3, #170	@ 0xaa
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	2100      	movs	r1, #0
 801341e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013420:	2300      	movs	r3, #0
}
 8013422:	0018      	movs	r0, r3
 8013424:	46bd      	mov	sp, r7
 8013426:	b002      	add	sp, #8
 8013428:	bd80      	pop	{r7, pc}
	...

0801342c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	0018      	movs	r0, r3
 801343a:	f007 fdf7 	bl	801b02c <USB_ReadInterrupts>
 801343e:	0003      	movs	r3, r0
 8013440:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	2380      	movs	r3, #128	@ 0x80
 8013446:	021b      	lsls	r3, r3, #8
 8013448:	4013      	ands	r3, r2
 801344a:	d004      	beq.n	8013456 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	0018      	movs	r0, r3
 8013450:	f000 fb62 	bl	8013b18 <PCD_EP_ISR_Handler>

    return;
 8013454:	e11d      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013456:	68fa      	ldr	r2, [r7, #12]
 8013458:	2380      	movs	r3, #128	@ 0x80
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	4013      	ands	r3, r2
 801345e:	d015      	beq.n	801348c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2244      	movs	r2, #68	@ 0x44
 8013466:	5a9b      	ldrh	r3, [r3, r2]
 8013468:	b29a      	uxth	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	498a      	ldr	r1, [pc, #552]	@ (8013698 <HAL_PCD_IRQHandler+0x26c>)
 8013470:	400a      	ands	r2, r1
 8013472:	b291      	uxth	r1, r2
 8013474:	2244      	movs	r2, #68	@ 0x44
 8013476:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	0018      	movs	r0, r3
 801347c:	f009 fe95 	bl	801d1aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2100      	movs	r1, #0
 8013484:	0018      	movs	r0, r3
 8013486:	f000 f915 	bl	80136b4 <HAL_PCD_SetAddress>

    return;
 801348a:	e102      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	2380      	movs	r3, #128	@ 0x80
 8013490:	01db      	lsls	r3, r3, #7
 8013492:	4013      	ands	r3, r2
 8013494:	d00c      	beq.n	80134b0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2244      	movs	r2, #68	@ 0x44
 801349c:	5a9b      	ldrh	r3, [r3, r2]
 801349e:	b29a      	uxth	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	497d      	ldr	r1, [pc, #500]	@ (801369c <HAL_PCD_IRQHandler+0x270>)
 80134a6:	400a      	ands	r2, r1
 80134a8:	b291      	uxth	r1, r2
 80134aa:	2244      	movs	r2, #68	@ 0x44
 80134ac:	5299      	strh	r1, [r3, r2]

    return;
 80134ae:	e0f0      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	2380      	movs	r3, #128	@ 0x80
 80134b4:	019b      	lsls	r3, r3, #6
 80134b6:	4013      	ands	r3, r2
 80134b8:	d00c      	beq.n	80134d4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2244      	movs	r2, #68	@ 0x44
 80134c0:	5a9b      	ldrh	r3, [r3, r2]
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4975      	ldr	r1, [pc, #468]	@ (80136a0 <HAL_PCD_IRQHandler+0x274>)
 80134ca:	400a      	ands	r2, r1
 80134cc:	b291      	uxth	r1, r2
 80134ce:	2244      	movs	r2, #68	@ 0x44
 80134d0:	5299      	strh	r1, [r3, r2]

    return;
 80134d2:	e0de      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80134d4:	68fa      	ldr	r2, [r7, #12]
 80134d6:	2380      	movs	r3, #128	@ 0x80
 80134d8:	015b      	lsls	r3, r3, #5
 80134da:	4013      	ands	r3, r2
 80134dc:	d038      	beq.n	8013550 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2240      	movs	r2, #64	@ 0x40
 80134e4:	5a9b      	ldrh	r3, [r3, r2]
 80134e6:	b29a      	uxth	r2, r3
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2104      	movs	r1, #4
 80134ee:	438a      	bics	r2, r1
 80134f0:	b291      	uxth	r1, r2
 80134f2:	2240      	movs	r2, #64	@ 0x40
 80134f4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2240      	movs	r2, #64	@ 0x40
 80134fc:	5a9b      	ldrh	r3, [r3, r2]
 80134fe:	b29a      	uxth	r2, r3
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2108      	movs	r1, #8
 8013506:	438a      	bics	r2, r1
 8013508:	b291      	uxth	r1, r2
 801350a:	2240      	movs	r2, #64	@ 0x40
 801350c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	23b8      	movs	r3, #184	@ 0xb8
 8013512:	009b      	lsls	r3, r3, #2
 8013514:	5cd3      	ldrb	r3, [r2, r3]
 8013516:	2b01      	cmp	r3, #1
 8013518:	d109      	bne.n	801352e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	23b8      	movs	r3, #184	@ 0xb8
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	2100      	movs	r1, #0
 8013522:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2100      	movs	r1, #0
 8013528:	0018      	movs	r0, r3
 801352a:	f001 fc9f 	bl	8014e6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	0018      	movs	r0, r3
 8013532:	f009 fe7b 	bl	801d22c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	2244      	movs	r2, #68	@ 0x44
 801353c:	5a9b      	ldrh	r3, [r3, r2]
 801353e:	b29a      	uxth	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4957      	ldr	r1, [pc, #348]	@ (80136a4 <HAL_PCD_IRQHandler+0x278>)
 8013546:	400a      	ands	r2, r1
 8013548:	b291      	uxth	r1, r2
 801354a:	2244      	movs	r2, #68	@ 0x44
 801354c:	5299      	strh	r1, [r3, r2]

    return;
 801354e:	e0a0      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	2380      	movs	r3, #128	@ 0x80
 8013554:	011b      	lsls	r3, r3, #4
 8013556:	4013      	ands	r3, r2
 8013558:	d028      	beq.n	80135ac <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2240      	movs	r2, #64	@ 0x40
 8013560:	5a9b      	ldrh	r3, [r3, r2]
 8013562:	b29a      	uxth	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2108      	movs	r1, #8
 801356a:	430a      	orrs	r2, r1
 801356c:	b291      	uxth	r1, r2
 801356e:	2240      	movs	r2, #64	@ 0x40
 8013570:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2244      	movs	r2, #68	@ 0x44
 8013578:	5a9b      	ldrh	r3, [r3, r2]
 801357a:	b29a      	uxth	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4949      	ldr	r1, [pc, #292]	@ (80136a8 <HAL_PCD_IRQHandler+0x27c>)
 8013582:	400a      	ands	r2, r1
 8013584:	b291      	uxth	r1, r2
 8013586:	2244      	movs	r2, #68	@ 0x44
 8013588:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2240      	movs	r2, #64	@ 0x40
 8013590:	5a9b      	ldrh	r3, [r3, r2]
 8013592:	b29a      	uxth	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2104      	movs	r1, #4
 801359a:	430a      	orrs	r2, r1
 801359c:	b291      	uxth	r1, r2
 801359e:	2240      	movs	r2, #64	@ 0x40
 80135a0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	0018      	movs	r0, r3
 80135a6:	f009 fe25 	bl	801d1f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80135aa:	e072      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2280      	movs	r2, #128	@ 0x80
 80135b0:	4013      	ands	r3, r2
 80135b2:	d046      	beq.n	8013642 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	2244      	movs	r2, #68	@ 0x44
 80135ba:	5a9b      	ldrh	r3, [r3, r2]
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2180      	movs	r1, #128	@ 0x80
 80135c4:	438a      	bics	r2, r1
 80135c6:	b291      	uxth	r1, r2
 80135c8:	2244      	movs	r2, #68	@ 0x44
 80135ca:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	23b8      	movs	r3, #184	@ 0xb8
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	5cd3      	ldrb	r3, [r2, r3]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d12f      	bne.n	8013638 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2240      	movs	r2, #64	@ 0x40
 80135de:	5a9b      	ldrh	r3, [r3, r2]
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2104      	movs	r1, #4
 80135e8:	430a      	orrs	r2, r1
 80135ea:	b291      	uxth	r1, r2
 80135ec:	2240      	movs	r2, #64	@ 0x40
 80135ee:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2240      	movs	r2, #64	@ 0x40
 80135f6:	5a9b      	ldrh	r3, [r3, r2]
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2108      	movs	r1, #8
 8013600:	430a      	orrs	r2, r1
 8013602:	b291      	uxth	r1, r2
 8013604:	2240      	movs	r2, #64	@ 0x40
 8013606:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	23b8      	movs	r3, #184	@ 0xb8
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	2101      	movs	r1, #1
 8013610:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2254      	movs	r2, #84	@ 0x54
 8013618:	5a9b      	ldrh	r3, [r3, r2]
 801361a:	b29b      	uxth	r3, r3
 801361c:	089b      	lsrs	r3, r3, #2
 801361e:	223c      	movs	r2, #60	@ 0x3c
 8013620:	4013      	ands	r3, r2
 8013622:	0019      	movs	r1, r3
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	23b9      	movs	r3, #185	@ 0xb9
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2101      	movs	r1, #1
 8013630:	0018      	movs	r0, r3
 8013632:	f001 fc1b 	bl	8014e6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013636:	e02c      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	0018      	movs	r0, r3
 801363c:	f009 fdda 	bl	801d1f4 <HAL_PCD_SuspendCallback>
    return;
 8013640:	e027      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	2380      	movs	r3, #128	@ 0x80
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	4013      	ands	r3, r2
 801364a:	d010      	beq.n	801366e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2244      	movs	r2, #68	@ 0x44
 8013652:	5a9b      	ldrh	r3, [r3, r2]
 8013654:	b29a      	uxth	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	4914      	ldr	r1, [pc, #80]	@ (80136ac <HAL_PCD_IRQHandler+0x280>)
 801365c:	400a      	ands	r2, r1
 801365e:	b291      	uxth	r1, r2
 8013660:	2244      	movs	r2, #68	@ 0x44
 8013662:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	0018      	movs	r0, r3
 8013668:	f009 fd90 	bl	801d18c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801366c:	e011      	b.n	8013692 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801366e:	68fa      	ldr	r2, [r7, #12]
 8013670:	2380      	movs	r3, #128	@ 0x80
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	4013      	ands	r3, r2
 8013676:	d00c      	beq.n	8013692 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2244      	movs	r2, #68	@ 0x44
 801367e:	5a9b      	ldrh	r3, [r3, r2]
 8013680:	b29a      	uxth	r2, r3
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	490a      	ldr	r1, [pc, #40]	@ (80136b0 <HAL_PCD_IRQHandler+0x284>)
 8013688:	400a      	ands	r2, r1
 801368a:	b291      	uxth	r1, r2
 801368c:	2244      	movs	r2, #68	@ 0x44
 801368e:	5299      	strh	r1, [r3, r2]

    return;
 8013690:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013692:	46bd      	mov	sp, r7
 8013694:	b004      	add	sp, #16
 8013696:	bd80      	pop	{r7, pc}
 8013698:	fffffbff 	.word	0xfffffbff
 801369c:	ffffbfff 	.word	0xffffbfff
 80136a0:	ffffdfff 	.word	0xffffdfff
 80136a4:	ffffefff 	.word	0xffffefff
 80136a8:	fffff7ff 	.word	0xfffff7ff
 80136ac:	fffffdff 	.word	0xfffffdff
 80136b0:	fffffeff 	.word	0xfffffeff

080136b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	000a      	movs	r2, r1
 80136be:	1cfb      	adds	r3, r7, #3
 80136c0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	23aa      	movs	r3, #170	@ 0xaa
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	5cd3      	ldrb	r3, [r2, r3]
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	d101      	bne.n	80136d2 <HAL_PCD_SetAddress+0x1e>
 80136ce:	2302      	movs	r3, #2
 80136d0:	e017      	b.n	8013702 <HAL_PCD_SetAddress+0x4e>
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	23aa      	movs	r3, #170	@ 0xaa
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	2101      	movs	r1, #1
 80136da:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	1cfa      	adds	r2, r7, #3
 80136e0:	2124      	movs	r1, #36	@ 0x24
 80136e2:	7812      	ldrb	r2, [r2, #0]
 80136e4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	1cfb      	adds	r3, r7, #3
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	0019      	movs	r1, r3
 80136f0:	0010      	movs	r0, r2
 80136f2:	f007 fc71 	bl	801afd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	23aa      	movs	r3, #170	@ 0xaa
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	2100      	movs	r1, #0
 80136fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013700:	2300      	movs	r3, #0
}
 8013702:	0018      	movs	r0, r3
 8013704:	46bd      	mov	sp, r7
 8013706:	b002      	add	sp, #8
 8013708:	bd80      	pop	{r7, pc}

0801370a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801370a:	b590      	push	{r4, r7, lr}
 801370c:	b085      	sub	sp, #20
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
 8013712:	000c      	movs	r4, r1
 8013714:	0010      	movs	r0, r2
 8013716:	0019      	movs	r1, r3
 8013718:	1cfb      	adds	r3, r7, #3
 801371a:	1c22      	adds	r2, r4, #0
 801371c:	701a      	strb	r2, [r3, #0]
 801371e:	003b      	movs	r3, r7
 8013720:	1c02      	adds	r2, r0, #0
 8013722:	801a      	strh	r2, [r3, #0]
 8013724:	1cbb      	adds	r3, r7, #2
 8013726:	1c0a      	adds	r2, r1, #0
 8013728:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801372a:	230b      	movs	r3, #11
 801372c:	18fb      	adds	r3, r7, r3
 801372e:	2200      	movs	r2, #0
 8013730:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013732:	1cfb      	adds	r3, r7, #3
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	b25b      	sxtb	r3, r3
 8013738:	2b00      	cmp	r3, #0
 801373a:	da0f      	bge.n	801375c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801373c:	1cfb      	adds	r3, r7, #3
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	2207      	movs	r2, #7
 8013742:	4013      	ands	r3, r2
 8013744:	1c5a      	adds	r2, r3, #1
 8013746:	0013      	movs	r3, r2
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	189b      	adds	r3, r3, r2
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	18d3      	adds	r3, r2, r3
 8013752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2201      	movs	r2, #1
 8013758:	705a      	strb	r2, [r3, #1]
 801375a:	e00f      	b.n	801377c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801375c:	1cfb      	adds	r3, r7, #3
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	2207      	movs	r2, #7
 8013762:	401a      	ands	r2, r3
 8013764:	0013      	movs	r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	189b      	adds	r3, r3, r2
 801376a:	00db      	lsls	r3, r3, #3
 801376c:	3369      	adds	r3, #105	@ 0x69
 801376e:	33ff      	adds	r3, #255	@ 0xff
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	18d3      	adds	r3, r2, r3
 8013774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2200      	movs	r2, #0
 801377a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801377c:	1cfb      	adds	r3, r7, #3
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	2207      	movs	r2, #7
 8013782:	4013      	ands	r3, r2
 8013784:	b2da      	uxtb	r2, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801378a:	003b      	movs	r3, r7
 801378c:	881a      	ldrh	r2, [r3, #0]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	1cba      	adds	r2, r7, #2
 8013796:	7812      	ldrb	r2, [r2, #0]
 8013798:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801379a:	1cbb      	adds	r3, r7, #2
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d102      	bne.n	80137a8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	2200      	movs	r2, #0
 80137a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	23aa      	movs	r3, #170	@ 0xaa
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	5cd3      	ldrb	r3, [r2, r3]
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	d101      	bne.n	80137b8 <HAL_PCD_EP_Open+0xae>
 80137b4:	2302      	movs	r3, #2
 80137b6:	e013      	b.n	80137e0 <HAL_PCD_EP_Open+0xd6>
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	23aa      	movs	r3, #170	@ 0xaa
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	2101      	movs	r1, #1
 80137c0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	0011      	movs	r1, r2
 80137ca:	0018      	movs	r0, r3
 80137cc:	f005 fc68 	bl	80190a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	23aa      	movs	r3, #170	@ 0xaa
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	2100      	movs	r1, #0
 80137d8:	54d1      	strb	r1, [r2, r3]

  return ret;
 80137da:	230b      	movs	r3, #11
 80137dc:	18fb      	adds	r3, r7, r3
 80137de:	781b      	ldrb	r3, [r3, #0]
}
 80137e0:	0018      	movs	r0, r3
 80137e2:	46bd      	mov	sp, r7
 80137e4:	b005      	add	sp, #20
 80137e6:	bd90      	pop	{r4, r7, pc}

080137e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	000a      	movs	r2, r1
 80137f2:	1cfb      	adds	r3, r7, #3
 80137f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80137f6:	1cfb      	adds	r3, r7, #3
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	b25b      	sxtb	r3, r3
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	da0f      	bge.n	8013820 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013800:	1cfb      	adds	r3, r7, #3
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2207      	movs	r2, #7
 8013806:	4013      	ands	r3, r2
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	0013      	movs	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	189b      	adds	r3, r3, r2
 8013810:	00db      	lsls	r3, r3, #3
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	18d3      	adds	r3, r2, r3
 8013816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2201      	movs	r2, #1
 801381c:	705a      	strb	r2, [r3, #1]
 801381e:	e00f      	b.n	8013840 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013820:	1cfb      	adds	r3, r7, #3
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	2207      	movs	r2, #7
 8013826:	401a      	ands	r2, r3
 8013828:	0013      	movs	r3, r2
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	189b      	adds	r3, r3, r2
 801382e:	00db      	lsls	r3, r3, #3
 8013830:	3369      	adds	r3, #105	@ 0x69
 8013832:	33ff      	adds	r3, #255	@ 0xff
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	18d3      	adds	r3, r2, r3
 8013838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013840:	1cfb      	adds	r3, r7, #3
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	2207      	movs	r2, #7
 8013846:	4013      	ands	r3, r2
 8013848:	b2da      	uxtb	r2, r3
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	23aa      	movs	r3, #170	@ 0xaa
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	5cd3      	ldrb	r3, [r2, r3]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d101      	bne.n	801385e <HAL_PCD_EP_Close+0x76>
 801385a:	2302      	movs	r3, #2
 801385c:	e011      	b.n	8013882 <HAL_PCD_EP_Close+0x9a>
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	23aa      	movs	r3, #170	@ 0xaa
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	2101      	movs	r1, #1
 8013866:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	68fa      	ldr	r2, [r7, #12]
 801386e:	0011      	movs	r1, r2
 8013870:	0018      	movs	r0, r3
 8013872:	f005 ffb7 	bl	80197e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	23aa      	movs	r3, #170	@ 0xaa
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	2100      	movs	r1, #0
 801387e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013880:	2300      	movs	r3, #0
}
 8013882:	0018      	movs	r0, r3
 8013884:	46bd      	mov	sp, r7
 8013886:	b004      	add	sp, #16
 8013888:	bd80      	pop	{r7, pc}

0801388a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b086      	sub	sp, #24
 801388e:	af00      	add	r7, sp, #0
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	200b      	movs	r0, #11
 8013898:	183b      	adds	r3, r7, r0
 801389a:	1c0a      	adds	r2, r1, #0
 801389c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801389e:	0001      	movs	r1, r0
 80138a0:	187b      	adds	r3, r7, r1
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2207      	movs	r2, #7
 80138a6:	401a      	ands	r2, r3
 80138a8:	0013      	movs	r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	189b      	adds	r3, r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	3369      	adds	r3, #105	@ 0x69
 80138b2:	33ff      	adds	r3, #255	@ 0xff
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	18d3      	adds	r3, r2, r3
 80138b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	683a      	ldr	r2, [r7, #0]
 80138c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	2200      	movs	r2, #0
 80138ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	2200      	movs	r2, #0
 80138d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80138d2:	187b      	adds	r3, r7, r1
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	2207      	movs	r2, #7
 80138d8:	4013      	ands	r3, r2
 80138da:	b2da      	uxtb	r2, r3
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	697a      	ldr	r2, [r7, #20]
 80138e6:	0011      	movs	r1, r2
 80138e8:	0018      	movs	r0, r3
 80138ea:	f006 f93b 	bl	8019b64 <USB_EPStartXfer>

  return HAL_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	0018      	movs	r0, r3
 80138f2:	46bd      	mov	sp, r7
 80138f4:	b006      	add	sp, #24
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	000a      	movs	r2, r1
 8013902:	1cfb      	adds	r3, r7, #3
 8013904:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013906:	1cfb      	adds	r3, r7, #3
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	2207      	movs	r2, #7
 801390c:	401a      	ands	r2, r3
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	23c2      	movs	r3, #194	@ 0xc2
 8013912:	0059      	lsls	r1, r3, #1
 8013914:	0013      	movs	r3, r2
 8013916:	009b      	lsls	r3, r3, #2
 8013918:	189b      	adds	r3, r3, r2
 801391a:	00db      	lsls	r3, r3, #3
 801391c:	18c3      	adds	r3, r0, r3
 801391e:	185b      	adds	r3, r3, r1
 8013920:	681b      	ldr	r3, [r3, #0]
}
 8013922:	0018      	movs	r0, r3
 8013924:	46bd      	mov	sp, r7
 8013926:	b002      	add	sp, #8
 8013928:	bd80      	pop	{r7, pc}

0801392a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801392a:	b580      	push	{r7, lr}
 801392c:	b086      	sub	sp, #24
 801392e:	af00      	add	r7, sp, #0
 8013930:	60f8      	str	r0, [r7, #12]
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	603b      	str	r3, [r7, #0]
 8013936:	200b      	movs	r0, #11
 8013938:	183b      	adds	r3, r7, r0
 801393a:	1c0a      	adds	r2, r1, #0
 801393c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801393e:	183b      	adds	r3, r7, r0
 8013940:	781b      	ldrb	r3, [r3, #0]
 8013942:	2207      	movs	r2, #7
 8013944:	4013      	ands	r3, r2
 8013946:	1c5a      	adds	r2, r3, #1
 8013948:	0013      	movs	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	189b      	adds	r3, r3, r2
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	68fa      	ldr	r2, [r7, #12]
 8013952:	18d3      	adds	r3, r2, r3
 8013954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	2224      	movs	r2, #36	@ 0x24
 8013966:	2101      	movs	r1, #1
 8013968:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2200      	movs	r2, #0
 8013974:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	2201      	movs	r2, #1
 801397a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801397c:	183b      	adds	r3, r7, r0
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2207      	movs	r2, #7
 8013982:	4013      	ands	r3, r2
 8013984:	b2da      	uxtb	r2, r3
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	697a      	ldr	r2, [r7, #20]
 8013990:	0011      	movs	r1, r2
 8013992:	0018      	movs	r0, r3
 8013994:	f006 f8e6 	bl	8019b64 <USB_EPStartXfer>

  return HAL_OK;
 8013998:	2300      	movs	r3, #0
}
 801399a:	0018      	movs	r0, r3
 801399c:	46bd      	mov	sp, r7
 801399e:	b006      	add	sp, #24
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b084      	sub	sp, #16
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	6078      	str	r0, [r7, #4]
 80139aa:	000a      	movs	r2, r1
 80139ac:	1cfb      	adds	r3, r7, #3
 80139ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80139b0:	1cfb      	adds	r3, r7, #3
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	2207      	movs	r2, #7
 80139b6:	401a      	ands	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d901      	bls.n	80139c4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80139c0:	2301      	movs	r3, #1
 80139c2:	e046      	b.n	8013a52 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80139c4:	1cfb      	adds	r3, r7, #3
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	b25b      	sxtb	r3, r3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	da0f      	bge.n	80139ee <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80139ce:	1cfb      	adds	r3, r7, #3
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	2207      	movs	r2, #7
 80139d4:	4013      	ands	r3, r2
 80139d6:	1c5a      	adds	r2, r3, #1
 80139d8:	0013      	movs	r3, r2
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	189b      	adds	r3, r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	18d3      	adds	r3, r2, r3
 80139e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2201      	movs	r2, #1
 80139ea:	705a      	strb	r2, [r3, #1]
 80139ec:	e00d      	b.n	8013a0a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80139ee:	1cfb      	adds	r3, r7, #3
 80139f0:	781a      	ldrb	r2, [r3, #0]
 80139f2:	0013      	movs	r3, r2
 80139f4:	009b      	lsls	r3, r3, #2
 80139f6:	189b      	adds	r3, r3, r2
 80139f8:	00db      	lsls	r3, r3, #3
 80139fa:	3369      	adds	r3, #105	@ 0x69
 80139fc:	33ff      	adds	r3, #255	@ 0xff
 80139fe:	687a      	ldr	r2, [r7, #4]
 8013a00:	18d3      	adds	r3, r2, r3
 8013a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2200      	movs	r2, #0
 8013a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a10:	1cfb      	adds	r3, r7, #3
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	2207      	movs	r2, #7
 8013a16:	4013      	ands	r3, r2
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	23aa      	movs	r3, #170	@ 0xaa
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	5cd3      	ldrb	r3, [r2, r3]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d101      	bne.n	8013a2e <HAL_PCD_EP_SetStall+0x8c>
 8013a2a:	2302      	movs	r3, #2
 8013a2c:	e011      	b.n	8013a52 <HAL_PCD_EP_SetStall+0xb0>
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	23aa      	movs	r3, #170	@ 0xaa
 8013a32:	009b      	lsls	r3, r3, #2
 8013a34:	2101      	movs	r1, #1
 8013a36:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	0011      	movs	r1, r2
 8013a40:	0018      	movs	r0, r3
 8013a42:	f007 f9c7 	bl	801add4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	23aa      	movs	r3, #170	@ 0xaa
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	0018      	movs	r0, r3
 8013a54:	46bd      	mov	sp, r7
 8013a56:	b004      	add	sp, #16
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013a5a:	b580      	push	{r7, lr}
 8013a5c:	b084      	sub	sp, #16
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
 8013a62:	000a      	movs	r2, r1
 8013a64:	1cfb      	adds	r3, r7, #3
 8013a66:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013a68:	1cfb      	adds	r3, r7, #3
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	220f      	movs	r2, #15
 8013a6e:	401a      	ands	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d901      	bls.n	8013a7c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e048      	b.n	8013b0e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013a7c:	1cfb      	adds	r3, r7, #3
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	b25b      	sxtb	r3, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	da0f      	bge.n	8013aa6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013a86:	1cfb      	adds	r3, r7, #3
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	2207      	movs	r2, #7
 8013a8c:	4013      	ands	r3, r2
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	0013      	movs	r3, r2
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	189b      	adds	r3, r3, r2
 8013a96:	00db      	lsls	r3, r3, #3
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	18d3      	adds	r3, r2, r3
 8013a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	705a      	strb	r2, [r3, #1]
 8013aa4:	e00f      	b.n	8013ac6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013aa6:	1cfb      	adds	r3, r7, #3
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2207      	movs	r2, #7
 8013aac:	401a      	ands	r2, r3
 8013aae:	0013      	movs	r3, r2
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	189b      	adds	r3, r3, r2
 8013ab4:	00db      	lsls	r3, r3, #3
 8013ab6:	3369      	adds	r3, #105	@ 0x69
 8013ab8:	33ff      	adds	r3, #255	@ 0xff
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	18d3      	adds	r3, r2, r3
 8013abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013acc:	1cfb      	adds	r3, r7, #3
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2207      	movs	r2, #7
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	b2da      	uxtb	r2, r3
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	23aa      	movs	r3, #170	@ 0xaa
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	5cd3      	ldrb	r3, [r2, r3]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d101      	bne.n	8013aea <HAL_PCD_EP_ClrStall+0x90>
 8013ae6:	2302      	movs	r3, #2
 8013ae8:	e011      	b.n	8013b0e <HAL_PCD_EP_ClrStall+0xb4>
 8013aea:	687a      	ldr	r2, [r7, #4]
 8013aec:	23aa      	movs	r3, #170	@ 0xaa
 8013aee:	009b      	lsls	r3, r3, #2
 8013af0:	2101      	movs	r1, #1
 8013af2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	0011      	movs	r1, r2
 8013afc:	0018      	movs	r0, r3
 8013afe:	f007 f9b9 	bl	801ae74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	23aa      	movs	r3, #170	@ 0xaa
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	2100      	movs	r1, #0
 8013b0a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013b0c:	2300      	movs	r3, #0
}
 8013b0e:	0018      	movs	r0, r3
 8013b10:	46bd      	mov	sp, r7
 8013b12:	b004      	add	sp, #16
 8013b14:	bd80      	pop	{r7, pc}
	...

08013b18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013b18:	b5b0      	push	{r4, r5, r7, lr}
 8013b1a:	b096      	sub	sp, #88	@ 0x58
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013b20:	f000 fbec 	bl	80142fc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	204e      	movs	r0, #78	@ 0x4e
 8013b2a:	183b      	adds	r3, r7, r0
 8013b2c:	2144      	movs	r1, #68	@ 0x44
 8013b2e:	5a52      	ldrh	r2, [r2, r1]
 8013b30:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013b32:	183b      	adds	r3, r7, r0
 8013b34:	881b      	ldrh	r3, [r3, #0]
 8013b36:	b2da      	uxtb	r2, r3
 8013b38:	244d      	movs	r4, #77	@ 0x4d
 8013b3a:	193b      	adds	r3, r7, r4
 8013b3c:	210f      	movs	r1, #15
 8013b3e:	400a      	ands	r2, r1
 8013b40:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013b42:	193b      	adds	r3, r7, r4
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d000      	beq.n	8013b4c <PCD_EP_ISR_Handler+0x34>
 8013b4a:	e18f      	b.n	8013e6c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013b4c:	183b      	adds	r3, r7, r0
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	2210      	movs	r2, #16
 8013b52:	4013      	ands	r3, r2
 8013b54:	d155      	bne.n	8013c02 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	200e      	movs	r0, #14
 8013b60:	183b      	adds	r3, r7, r0
 8013b62:	49bb      	ldr	r1, [pc, #748]	@ (8013e50 <PCD_EP_ISR_Handler+0x338>)
 8013b64:	400a      	ands	r2, r1
 8013b66:	801a      	strh	r2, [r3, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	183a      	adds	r2, r7, r0
 8013b6e:	8812      	ldrh	r2, [r2, #0]
 8013b70:	49b8      	ldr	r1, [pc, #736]	@ (8013e54 <PCD_EP_ISR_Handler+0x33c>)
 8013b72:	430a      	orrs	r2, r1
 8013b74:	b292      	uxth	r2, r2
 8013b76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	3328      	adds	r3, #40	@ 0x28
 8013b7c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2250      	movs	r2, #80	@ 0x50
 8013b84:	5a9b      	ldrh	r3, [r3, r2]
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	001a      	movs	r2, r3
 8013b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	00db      	lsls	r3, r3, #3
 8013b90:	18d2      	adds	r2, r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	18d3      	adds	r3, r2, r3
 8013b98:	4aaf      	ldr	r2, [pc, #700]	@ (8013e58 <PCD_EP_ISR_Handler+0x340>)
 8013b9a:	4694      	mov	ip, r2
 8013b9c:	4463      	add	r3, ip
 8013b9e:	881b      	ldrh	r3, [r3, #0]
 8013ba0:	059b      	lsls	r3, r3, #22
 8013ba2:	0d9a      	lsrs	r2, r3, #22
 8013ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ba6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013baa:	695a      	ldr	r2, [r3, #20]
 8013bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bae:	69db      	ldr	r3, [r3, #28]
 8013bb0:	18d2      	adds	r2, r2, r3
 8013bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2100      	movs	r1, #0
 8013bba:	0018      	movs	r0, r3
 8013bbc:	f009 fac8 	bl	801d150 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2224      	movs	r2, #36	@ 0x24
 8013bc4:	5c9b      	ldrb	r3, [r3, r2]
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d101      	bne.n	8013bd0 <PCD_EP_ISR_Handler+0xb8>
 8013bcc:	f000 fb96 	bl	80142fc <PCD_EP_ISR_Handler+0x7e4>
 8013bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bd2:	699b      	ldr	r3, [r3, #24]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <PCD_EP_ISR_Handler+0xc4>
 8013bd8:	f000 fb90 	bl	80142fc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2224      	movs	r2, #36	@ 0x24
 8013be0:	5c9b      	ldrb	r3, [r3, r2]
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	2280      	movs	r2, #128	@ 0x80
 8013be6:	4252      	negs	r2, r2
 8013be8:	4313      	orrs	r3, r2
 8013bea:	b2da      	uxtb	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	0011      	movs	r1, r2
 8013bf2:	224c      	movs	r2, #76	@ 0x4c
 8013bf4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2224      	movs	r2, #36	@ 0x24
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	5499      	strb	r1, [r3, r2]
 8013bfe:	f000 fb7d 	bl	80142fc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	3369      	adds	r3, #105	@ 0x69
 8013c06:	33ff      	adds	r3, #255	@ 0xff
 8013c08:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	214a      	movs	r1, #74	@ 0x4a
 8013c10:	187b      	adds	r3, r7, r1
 8013c12:	8812      	ldrh	r2, [r2, #0]
 8013c14:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013c16:	187b      	adds	r3, r7, r1
 8013c18:	881a      	ldrh	r2, [r3, #0]
 8013c1a:	2380      	movs	r3, #128	@ 0x80
 8013c1c:	011b      	lsls	r3, r3, #4
 8013c1e:	4013      	ands	r3, r2
 8013c20:	d037      	beq.n	8013c92 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2250      	movs	r2, #80	@ 0x50
 8013c28:	5a9b      	ldrh	r3, [r3, r2]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	001a      	movs	r2, r3
 8013c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	00db      	lsls	r3, r3, #3
 8013c34:	18d2      	adds	r2, r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	18d3      	adds	r3, r2, r3
 8013c3c:	4a87      	ldr	r2, [pc, #540]	@ (8013e5c <PCD_EP_ISR_Handler+0x344>)
 8013c3e:	4694      	mov	ip, r2
 8013c40:	4463      	add	r3, ip
 8013c42:	881b      	ldrh	r3, [r3, #0]
 8013c44:	059b      	lsls	r3, r3, #22
 8013c46:	0d9a      	lsrs	r2, r3, #22
 8013c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6818      	ldr	r0, [r3, #0]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	22ac      	movs	r2, #172	@ 0xac
 8013c54:	0092      	lsls	r2, r2, #2
 8013c56:	1899      	adds	r1, r3, r2
 8013c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	f007 fa3a 	bl	801b0da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	2010      	movs	r0, #16
 8013c70:	183b      	adds	r3, r7, r0
 8013c72:	497b      	ldr	r1, [pc, #492]	@ (8013e60 <PCD_EP_ISR_Handler+0x348>)
 8013c74:	400a      	ands	r2, r1
 8013c76:	801a      	strh	r2, [r3, #0]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	183a      	adds	r2, r7, r0
 8013c7e:	8812      	ldrh	r2, [r2, #0]
 8013c80:	2180      	movs	r1, #128	@ 0x80
 8013c82:	430a      	orrs	r2, r1
 8013c84:	b292      	uxth	r2, r2
 8013c86:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	0018      	movs	r0, r3
 8013c8c:	f009 fa2a 	bl	801d0e4 <HAL_PCD_SetupStageCallback>
 8013c90:	e334      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013c92:	234a      	movs	r3, #74	@ 0x4a
 8013c94:	18fb      	adds	r3, r7, r3
 8013c96:	2200      	movs	r2, #0
 8013c98:	5e9b      	ldrsh	r3, [r3, r2]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	db00      	blt.n	8013ca0 <PCD_EP_ISR_Handler+0x188>
 8013c9e:	e32d      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	881b      	ldrh	r3, [r3, #0]
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	201e      	movs	r0, #30
 8013caa:	183b      	adds	r3, r7, r0
 8013cac:	496c      	ldr	r1, [pc, #432]	@ (8013e60 <PCD_EP_ISR_Handler+0x348>)
 8013cae:	400a      	ands	r2, r1
 8013cb0:	801a      	strh	r2, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	183a      	adds	r2, r7, r0
 8013cb8:	8812      	ldrh	r2, [r2, #0]
 8013cba:	2180      	movs	r1, #128	@ 0x80
 8013cbc:	430a      	orrs	r2, r1
 8013cbe:	b292      	uxth	r2, r2
 8013cc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2250      	movs	r2, #80	@ 0x50
 8013cc8:	5a9b      	ldrh	r3, [r3, r2]
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	001a      	movs	r2, r3
 8013cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	00db      	lsls	r3, r3, #3
 8013cd4:	18d2      	adds	r2, r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	18d3      	adds	r3, r2, r3
 8013cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8013e5c <PCD_EP_ISR_Handler+0x344>)
 8013cde:	4694      	mov	ip, r2
 8013ce0:	4463      	add	r3, ip
 8013ce2:	881b      	ldrh	r3, [r3, #0]
 8013ce4:	059b      	lsls	r3, r3, #22
 8013ce6:	0d9a      	lsrs	r2, r3, #22
 8013ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cee:	69db      	ldr	r3, [r3, #28]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d01a      	beq.n	8013d2a <PCD_EP_ISR_Handler+0x212>
 8013cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cf6:	695b      	ldr	r3, [r3, #20]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d016      	beq.n	8013d2a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6818      	ldr	r0, [r3, #0]
 8013d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d02:	6959      	ldr	r1, [r3, #20]
 8013d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d06:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d0a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	f007 f9e4 	bl	801b0da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d14:	695a      	ldr	r2, [r3, #20]
 8013d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d18:	69db      	ldr	r3, [r3, #28]
 8013d1a:	18d2      	adds	r2, r2, r3
 8013d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d1e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2100      	movs	r1, #0
 8013d24:	0018      	movs	r0, r3
 8013d26:	f009 f9f2 	bl	801d10e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	214a      	movs	r1, #74	@ 0x4a
 8013d30:	187b      	adds	r3, r7, r1
 8013d32:	8812      	ldrh	r2, [r2, #0]
 8013d34:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	881a      	ldrh	r2, [r3, #0]
 8013d3a:	2380      	movs	r3, #128	@ 0x80
 8013d3c:	011b      	lsls	r3, r3, #4
 8013d3e:	4013      	ands	r3, r2
 8013d40:	d000      	beq.n	8013d44 <PCD_EP_ISR_Handler+0x22c>
 8013d42:	e2db      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
 8013d44:	187b      	adds	r3, r7, r1
 8013d46:	881a      	ldrh	r2, [r3, #0]
 8013d48:	23c0      	movs	r3, #192	@ 0xc0
 8013d4a:	019b      	lsls	r3, r3, #6
 8013d4c:	401a      	ands	r2, r3
 8013d4e:	23c0      	movs	r3, #192	@ 0xc0
 8013d50:	019b      	lsls	r3, r3, #6
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d100      	bne.n	8013d58 <PCD_EP_ISR_Handler+0x240>
 8013d56:	e2d1      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	61bb      	str	r3, [r7, #24]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2250      	movs	r2, #80	@ 0x50
 8013d64:	5a9b      	ldrh	r3, [r3, r2]
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	001a      	movs	r2, r3
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	189b      	adds	r3, r3, r2
 8013d6e:	61bb      	str	r3, [r7, #24]
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	4a3a      	ldr	r2, [pc, #232]	@ (8013e5c <PCD_EP_ISR_Handler+0x344>)
 8013d74:	4694      	mov	ip, r2
 8013d76:	4463      	add	r3, ip
 8013d78:	617b      	str	r3, [r7, #20]
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	881b      	ldrh	r3, [r3, #0]
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	059b      	lsls	r3, r3, #22
 8013d82:	0d9b      	lsrs	r3, r3, #22
 8013d84:	b29a      	uxth	r2, r3
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	801a      	strh	r2, [r3, #0]
 8013d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d8c:	691b      	ldr	r3, [r3, #16]
 8013d8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013d90:	d91a      	bls.n	8013dc8 <PCD_EP_ISR_Handler+0x2b0>
 8013d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	095b      	lsrs	r3, r3, #5
 8013d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d9c:	691b      	ldr	r3, [r3, #16]
 8013d9e:	221f      	movs	r2, #31
 8013da0:	4013      	ands	r3, r2
 8013da2:	d102      	bne.n	8013daa <PCD_EP_ISR_Handler+0x292>
 8013da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013da6:	3b01      	subs	r3, #1
 8013da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	881b      	ldrh	r3, [r3, #0]
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	029b      	lsls	r3, r3, #10
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	4313      	orrs	r3, r2
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	4a25      	ldr	r2, [pc, #148]	@ (8013e54 <PCD_EP_ISR_Handler+0x33c>)
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	801a      	strh	r2, [r3, #0]
 8013dc6:	e023      	b.n	8013e10 <PCD_EP_ISR_Handler+0x2f8>
 8013dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d108      	bne.n	8013de2 <PCD_EP_ISR_Handler+0x2ca>
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	881b      	ldrh	r3, [r3, #0]
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8013e54 <PCD_EP_ISR_Handler+0x33c>)
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	b29a      	uxth	r2, r3
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	801a      	strh	r2, [r3, #0]
 8013de0:	e016      	b.n	8013e10 <PCD_EP_ISR_Handler+0x2f8>
 8013de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	085b      	lsrs	r3, r3, #1
 8013de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dec:	691b      	ldr	r3, [r3, #16]
 8013dee:	2201      	movs	r2, #1
 8013df0:	4013      	ands	r3, r2
 8013df2:	d002      	beq.n	8013dfa <PCD_EP_ISR_Handler+0x2e2>
 8013df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013df6:	3301      	adds	r3, #1
 8013df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	029b      	lsls	r3, r3, #10
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	4313      	orrs	r3, r2
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	2012      	movs	r0, #18
 8013e1a:	183b      	adds	r3, r7, r0
 8013e1c:	4911      	ldr	r1, [pc, #68]	@ (8013e64 <PCD_EP_ISR_Handler+0x34c>)
 8013e1e:	400a      	ands	r2, r1
 8013e20:	801a      	strh	r2, [r3, #0]
 8013e22:	183b      	adds	r3, r7, r0
 8013e24:	183a      	adds	r2, r7, r0
 8013e26:	8812      	ldrh	r2, [r2, #0]
 8013e28:	2180      	movs	r1, #128	@ 0x80
 8013e2a:	0149      	lsls	r1, r1, #5
 8013e2c:	404a      	eors	r2, r1
 8013e2e:	801a      	strh	r2, [r3, #0]
 8013e30:	183b      	adds	r3, r7, r0
 8013e32:	183a      	adds	r2, r7, r0
 8013e34:	8812      	ldrh	r2, [r2, #0]
 8013e36:	2180      	movs	r1, #128	@ 0x80
 8013e38:	0189      	lsls	r1, r1, #6
 8013e3a:	404a      	eors	r2, r1
 8013e3c:	801a      	strh	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	183a      	adds	r2, r7, r0
 8013e44:	8812      	ldrh	r2, [r2, #0]
 8013e46:	4908      	ldr	r1, [pc, #32]	@ (8013e68 <PCD_EP_ISR_Handler+0x350>)
 8013e48:	430a      	orrs	r2, r1
 8013e4a:	b292      	uxth	r2, r2
 8013e4c:	801a      	strh	r2, [r3, #0]
 8013e4e:	e255      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
 8013e50:	ffff8f0f 	.word	0xffff8f0f
 8013e54:	ffff8000 	.word	0xffff8000
 8013e58:	00000402 	.word	0x00000402
 8013e5c:	00000406 	.word	0x00000406
 8013e60:	00000f8f 	.word	0x00000f8f
 8013e64:	ffffbf8f 	.word	0xffffbf8f
 8013e68:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	001a      	movs	r2, r3
 8013e72:	204d      	movs	r0, #77	@ 0x4d
 8013e74:	183b      	adds	r3, r7, r0
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	009b      	lsls	r3, r3, #2
 8013e7a:	18d2      	adds	r2, r2, r3
 8013e7c:	214a      	movs	r1, #74	@ 0x4a
 8013e7e:	187b      	adds	r3, r7, r1
 8013e80:	8812      	ldrh	r2, [r2, #0]
 8013e82:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013e84:	187b      	adds	r3, r7, r1
 8013e86:	2200      	movs	r2, #0
 8013e88:	5e9b      	ldrsh	r3, [r3, r2]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	db00      	blt.n	8013e90 <PCD_EP_ISR_Handler+0x378>
 8013e8e:	e0fa      	b.n	8014086 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	001a      	movs	r2, r3
 8013e96:	183b      	adds	r3, r7, r0
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	18d3      	adds	r3, r2, r3
 8013e9e:	881b      	ldrh	r3, [r3, #0]
 8013ea0:	b29a      	uxth	r2, r3
 8013ea2:	2448      	movs	r4, #72	@ 0x48
 8013ea4:	193b      	adds	r3, r7, r4
 8013ea6:	49d1      	ldr	r1, [pc, #836]	@ (80141ec <PCD_EP_ISR_Handler+0x6d4>)
 8013ea8:	400a      	ands	r2, r1
 8013eaa:	801a      	strh	r2, [r3, #0]
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	001a      	movs	r2, r3
 8013eb2:	183b      	adds	r3, r7, r0
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	18d3      	adds	r3, r2, r3
 8013eba:	193a      	adds	r2, r7, r4
 8013ebc:	8812      	ldrh	r2, [r2, #0]
 8013ebe:	2180      	movs	r1, #128	@ 0x80
 8013ec0:	430a      	orrs	r2, r1
 8013ec2:	b292      	uxth	r2, r2
 8013ec4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013ec6:	183b      	adds	r3, r7, r0
 8013ec8:	781a      	ldrb	r2, [r3, #0]
 8013eca:	0013      	movs	r3, r2
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	189b      	adds	r3, r3, r2
 8013ed0:	00db      	lsls	r3, r3, #3
 8013ed2:	3369      	adds	r3, #105	@ 0x69
 8013ed4:	33ff      	adds	r3, #255	@ 0xff
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	18d3      	adds	r3, r2, r3
 8013eda:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ede:	7b1b      	ldrb	r3, [r3, #12]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d125      	bne.n	8013f30 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2250      	movs	r2, #80	@ 0x50
 8013eea:	5a9b      	ldrh	r3, [r3, r2]
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	001a      	movs	r2, r3
 8013ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	00db      	lsls	r3, r3, #3
 8013ef6:	18d2      	adds	r2, r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	18d3      	adds	r3, r2, r3
 8013efe:	4abc      	ldr	r2, [pc, #752]	@ (80141f0 <PCD_EP_ISR_Handler+0x6d8>)
 8013f00:	4694      	mov	ip, r2
 8013f02:	4463      	add	r3, ip
 8013f04:	881a      	ldrh	r2, [r3, #0]
 8013f06:	2450      	movs	r4, #80	@ 0x50
 8013f08:	193b      	adds	r3, r7, r4
 8013f0a:	0592      	lsls	r2, r2, #22
 8013f0c:	0d92      	lsrs	r2, r2, #22
 8013f0e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013f10:	193b      	adds	r3, r7, r4
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d100      	bne.n	8013f1a <PCD_EP_ISR_Handler+0x402>
 8013f18:	e08d      	b.n	8014036 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6818      	ldr	r0, [r3, #0]
 8013f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f20:	6959      	ldr	r1, [r3, #20]
 8013f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f24:	88da      	ldrh	r2, [r3, #6]
 8013f26:	193b      	adds	r3, r7, r4
 8013f28:	881b      	ldrh	r3, [r3, #0]
 8013f2a:	f007 f8d6 	bl	801b0da <USB_ReadPMA>
 8013f2e:	e082      	b.n	8014036 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f32:	78db      	ldrb	r3, [r3, #3]
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d10c      	bne.n	8013f52 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013f38:	2350      	movs	r3, #80	@ 0x50
 8013f3a:	18fc      	adds	r4, r7, r3
 8013f3c:	234a      	movs	r3, #74	@ 0x4a
 8013f3e:	18fb      	adds	r3, r7, r3
 8013f40:	881a      	ldrh	r2, [r3, #0]
 8013f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	0018      	movs	r0, r3
 8013f48:	f000 f9ec 	bl	8014324 <HAL_PCD_EP_DB_Receive>
 8013f4c:	0003      	movs	r3, r0
 8013f4e:	8023      	strh	r3, [r4, #0]
 8013f50:	e071      	b.n	8014036 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	001a      	movs	r2, r3
 8013f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	009b      	lsls	r3, r3, #2
 8013f5e:	18d3      	adds	r3, r2, r3
 8013f60:	881b      	ldrh	r3, [r3, #0]
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	2052      	movs	r0, #82	@ 0x52
 8013f66:	183b      	adds	r3, r7, r0
 8013f68:	49a2      	ldr	r1, [pc, #648]	@ (80141f4 <PCD_EP_ISR_Handler+0x6dc>)
 8013f6a:	400a      	ands	r2, r1
 8013f6c:	801a      	strh	r2, [r3, #0]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	001a      	movs	r2, r3
 8013f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	009b      	lsls	r3, r3, #2
 8013f7a:	18d3      	adds	r3, r2, r3
 8013f7c:	183a      	adds	r2, r7, r0
 8013f7e:	8812      	ldrh	r2, [r2, #0]
 8013f80:	499d      	ldr	r1, [pc, #628]	@ (80141f8 <PCD_EP_ISR_Handler+0x6e0>)
 8013f82:	430a      	orrs	r2, r1
 8013f84:	b292      	uxth	r2, r2
 8013f86:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	001a      	movs	r2, r3
 8013f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	18d3      	adds	r3, r2, r3
 8013f96:	881b      	ldrh	r3, [r3, #0]
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	001a      	movs	r2, r3
 8013f9c:	2380      	movs	r3, #128	@ 0x80
 8013f9e:	01db      	lsls	r3, r3, #7
 8013fa0:	4013      	ands	r3, r2
 8013fa2:	d024      	beq.n	8013fee <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2250      	movs	r2, #80	@ 0x50
 8013faa:	5a9b      	ldrh	r3, [r3, r2]
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	001a      	movs	r2, r3
 8013fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	00db      	lsls	r3, r3, #3
 8013fb6:	18d2      	adds	r2, r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	18d3      	adds	r3, r2, r3
 8013fbe:	4a8f      	ldr	r2, [pc, #572]	@ (80141fc <PCD_EP_ISR_Handler+0x6e4>)
 8013fc0:	4694      	mov	ip, r2
 8013fc2:	4463      	add	r3, ip
 8013fc4:	881a      	ldrh	r2, [r3, #0]
 8013fc6:	2450      	movs	r4, #80	@ 0x50
 8013fc8:	193b      	adds	r3, r7, r4
 8013fca:	0592      	lsls	r2, r2, #22
 8013fcc:	0d92      	lsrs	r2, r2, #22
 8013fce:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013fd0:	193b      	adds	r3, r7, r4
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d02e      	beq.n	8014036 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6818      	ldr	r0, [r3, #0]
 8013fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fde:	6959      	ldr	r1, [r3, #20]
 8013fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe2:	891a      	ldrh	r2, [r3, #8]
 8013fe4:	193b      	adds	r3, r7, r4
 8013fe6:	881b      	ldrh	r3, [r3, #0]
 8013fe8:	f007 f877 	bl	801b0da <USB_ReadPMA>
 8013fec:	e023      	b.n	8014036 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2250      	movs	r2, #80	@ 0x50
 8013ff4:	5a9b      	ldrh	r3, [r3, r2]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	001a      	movs	r2, r3
 8013ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	18d2      	adds	r2, r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	18d3      	adds	r3, r2, r3
 8014008:	4a79      	ldr	r2, [pc, #484]	@ (80141f0 <PCD_EP_ISR_Handler+0x6d8>)
 801400a:	4694      	mov	ip, r2
 801400c:	4463      	add	r3, ip
 801400e:	881a      	ldrh	r2, [r3, #0]
 8014010:	2450      	movs	r4, #80	@ 0x50
 8014012:	193b      	adds	r3, r7, r4
 8014014:	0592      	lsls	r2, r2, #22
 8014016:	0d92      	lsrs	r2, r2, #22
 8014018:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801401a:	193b      	adds	r3, r7, r4
 801401c:	881b      	ldrh	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d009      	beq.n	8014036 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6818      	ldr	r0, [r3, #0]
 8014026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014028:	6959      	ldr	r1, [r3, #20]
 801402a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801402c:	895a      	ldrh	r2, [r3, #10]
 801402e:	193b      	adds	r3, r7, r4
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	f007 f852 	bl	801b0da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014038:	69da      	ldr	r2, [r3, #28]
 801403a:	2150      	movs	r1, #80	@ 0x50
 801403c:	187b      	adds	r3, r7, r1
 801403e:	881b      	ldrh	r3, [r3, #0]
 8014040:	18d2      	adds	r2, r2, r3
 8014042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8014046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014048:	695a      	ldr	r2, [r3, #20]
 801404a:	187b      	adds	r3, r7, r1
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	18d2      	adds	r2, r2, r3
 8014050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014052:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014056:	699b      	ldr	r3, [r3, #24]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d005      	beq.n	8014068 <PCD_EP_ISR_Handler+0x550>
 801405c:	187b      	adds	r3, r7, r1
 801405e:	881a      	ldrh	r2, [r3, #0]
 8014060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	429a      	cmp	r2, r3
 8014066:	d207      	bcs.n	8014078 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801406a:	781a      	ldrb	r2, [r3, #0]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	0011      	movs	r1, r2
 8014070:	0018      	movs	r0, r3
 8014072:	f009 f84c 	bl	801d10e <HAL_PCD_DataOutStageCallback>
 8014076:	e006      	b.n	8014086 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801407e:	0011      	movs	r1, r2
 8014080:	0018      	movs	r0, r3
 8014082:	f005 fd6f 	bl	8019b64 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014086:	244a      	movs	r4, #74	@ 0x4a
 8014088:	193b      	adds	r3, r7, r4
 801408a:	881b      	ldrh	r3, [r3, #0]
 801408c:	2280      	movs	r2, #128	@ 0x80
 801408e:	4013      	ands	r3, r2
 8014090:	d100      	bne.n	8014094 <PCD_EP_ISR_Handler+0x57c>
 8014092:	e133      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014094:	204d      	movs	r0, #77	@ 0x4d
 8014096:	183b      	adds	r3, r7, r0
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	1c5a      	adds	r2, r3, #1
 801409c:	0013      	movs	r3, r2
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	189b      	adds	r3, r3, r2
 80140a2:	00db      	lsls	r3, r3, #3
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	18d3      	adds	r3, r2, r3
 80140a8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	001a      	movs	r2, r3
 80140b0:	183b      	adds	r3, r7, r0
 80140b2:	781b      	ldrb	r3, [r3, #0]
 80140b4:	009b      	lsls	r3, r3, #2
 80140b6:	18d3      	adds	r3, r2, r3
 80140b8:	881b      	ldrh	r3, [r3, #0]
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	2542      	movs	r5, #66	@ 0x42
 80140be:	197b      	adds	r3, r7, r5
 80140c0:	494f      	ldr	r1, [pc, #316]	@ (8014200 <PCD_EP_ISR_Handler+0x6e8>)
 80140c2:	400a      	ands	r2, r1
 80140c4:	801a      	strh	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	001a      	movs	r2, r3
 80140cc:	183b      	adds	r3, r7, r0
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	18d3      	adds	r3, r2, r3
 80140d4:	197a      	adds	r2, r7, r5
 80140d6:	8812      	ldrh	r2, [r2, #0]
 80140d8:	494a      	ldr	r1, [pc, #296]	@ (8014204 <PCD_EP_ISR_Handler+0x6ec>)
 80140da:	430a      	orrs	r2, r1
 80140dc:	b292      	uxth	r2, r2
 80140de:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80140e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140e2:	78db      	ldrb	r3, [r3, #3]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d000      	beq.n	80140ea <PCD_EP_ISR_Handler+0x5d2>
 80140e8:	e0af      	b.n	801424a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80140ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140ec:	2200      	movs	r2, #0
 80140ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80140f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140f2:	7b1b      	ldrb	r3, [r3, #12]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d100      	bne.n	80140fa <PCD_EP_ISR_Handler+0x5e2>
 80140f8:	e09f      	b.n	801423a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80140fa:	193b      	adds	r3, r7, r4
 80140fc:	881b      	ldrh	r3, [r3, #0]
 80140fe:	2240      	movs	r2, #64	@ 0x40
 8014100:	4013      	ands	r3, r2
 8014102:	d046      	beq.n	8014192 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014106:	785b      	ldrb	r3, [r3, #1]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d125      	bne.n	8014158 <PCD_EP_ISR_Handler+0x640>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	627b      	str	r3, [r7, #36]	@ 0x24
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	2250      	movs	r2, #80	@ 0x50
 8014118:	5a9b      	ldrh	r3, [r3, r2]
 801411a:	b29b      	uxth	r3, r3
 801411c:	001a      	movs	r2, r3
 801411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014120:	189b      	adds	r3, r3, r2
 8014122:	627b      	str	r3, [r7, #36]	@ 0x24
 8014124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	00da      	lsls	r2, r3, #3
 801412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801412c:	18d3      	adds	r3, r2, r3
 801412e:	4a33      	ldr	r2, [pc, #204]	@ (80141fc <PCD_EP_ISR_Handler+0x6e4>)
 8014130:	4694      	mov	ip, r2
 8014132:	4463      	add	r3, ip
 8014134:	623b      	str	r3, [r7, #32]
 8014136:	6a3b      	ldr	r3, [r7, #32]
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	b29b      	uxth	r3, r3
 801413c:	059b      	lsls	r3, r3, #22
 801413e:	0d9b      	lsrs	r3, r3, #22
 8014140:	b29a      	uxth	r2, r3
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	801a      	strh	r2, [r3, #0]
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	b29b      	uxth	r3, r3
 801414c:	4a2d      	ldr	r2, [pc, #180]	@ (8014204 <PCD_EP_ISR_Handler+0x6ec>)
 801414e:	4313      	orrs	r3, r2
 8014150:	b29a      	uxth	r2, r3
 8014152:	6a3b      	ldr	r3, [r7, #32]
 8014154:	801a      	strh	r2, [r3, #0]
 8014156:	e070      	b.n	801423a <PCD_EP_ISR_Handler+0x722>
 8014158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801415a:	785b      	ldrb	r3, [r3, #1]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d16c      	bne.n	801423a <PCD_EP_ISR_Handler+0x722>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2250      	movs	r2, #80	@ 0x50
 801416c:	5a9b      	ldrh	r3, [r3, r2]
 801416e:	b29b      	uxth	r3, r3
 8014170:	001a      	movs	r2, r3
 8014172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014174:	189b      	adds	r3, r3, r2
 8014176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	00da      	lsls	r2, r3, #3
 801417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014180:	18d3      	adds	r3, r2, r3
 8014182:	4a1e      	ldr	r2, [pc, #120]	@ (80141fc <PCD_EP_ISR_Handler+0x6e4>)
 8014184:	4694      	mov	ip, r2
 8014186:	4463      	add	r3, ip
 8014188:	62bb      	str	r3, [r7, #40]	@ 0x28
 801418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801418c:	2200      	movs	r2, #0
 801418e:	801a      	strh	r2, [r3, #0]
 8014190:	e053      	b.n	801423a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801419a:	785b      	ldrb	r3, [r3, #1]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d133      	bne.n	8014208 <PCD_EP_ISR_Handler+0x6f0>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	2250      	movs	r2, #80	@ 0x50
 80141ac:	5a9b      	ldrh	r3, [r3, r2]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	001a      	movs	r2, r3
 80141b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141b4:	189b      	adds	r3, r3, r2
 80141b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80141b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	00da      	lsls	r2, r3, #3
 80141be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141c0:	18d3      	adds	r3, r2, r3
 80141c2:	4a0b      	ldr	r2, [pc, #44]	@ (80141f0 <PCD_EP_ISR_Handler+0x6d8>)
 80141c4:	4694      	mov	ip, r2
 80141c6:	4463      	add	r3, ip
 80141c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80141ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141cc:	881b      	ldrh	r3, [r3, #0]
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	059b      	lsls	r3, r3, #22
 80141d2:	0d9b      	lsrs	r3, r3, #22
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d8:	801a      	strh	r2, [r3, #0]
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141dc:	881b      	ldrh	r3, [r3, #0]
 80141de:	b29b      	uxth	r3, r3
 80141e0:	4a08      	ldr	r2, [pc, #32]	@ (8014204 <PCD_EP_ISR_Handler+0x6ec>)
 80141e2:	4313      	orrs	r3, r2
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e8:	801a      	strh	r2, [r3, #0]
 80141ea:	e026      	b.n	801423a <PCD_EP_ISR_Handler+0x722>
 80141ec:	00000f8f 	.word	0x00000f8f
 80141f0:	00000406 	.word	0x00000406
 80141f4:	ffff8f8f 	.word	0xffff8f8f
 80141f8:	ffff80c0 	.word	0xffff80c0
 80141fc:	00000402 	.word	0x00000402
 8014200:	ffff8f0f 	.word	0xffff8f0f
 8014204:	ffff8000 	.word	0xffff8000
 8014208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801420a:	785b      	ldrb	r3, [r3, #1]
 801420c:	2b01      	cmp	r3, #1
 801420e:	d114      	bne.n	801423a <PCD_EP_ISR_Handler+0x722>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2250      	movs	r2, #80	@ 0x50
 8014216:	5a9b      	ldrh	r3, [r3, r2]
 8014218:	b29b      	uxth	r3, r3
 801421a:	001a      	movs	r2, r3
 801421c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801421e:	189b      	adds	r3, r3, r2
 8014220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	00da      	lsls	r2, r3, #3
 8014228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801422a:	18d3      	adds	r3, r2, r3
 801422c:	4a3b      	ldr	r2, [pc, #236]	@ (801431c <PCD_EP_ISR_Handler+0x804>)
 801422e:	4694      	mov	ip, r2
 8014230:	4463      	add	r3, ip
 8014232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014236:	2200      	movs	r2, #0
 8014238:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423c:	781a      	ldrb	r2, [r3, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	0011      	movs	r1, r2
 8014242:	0018      	movs	r0, r3
 8014244:	f008 ff84 	bl	801d150 <HAL_PCD_DataInStageCallback>
 8014248:	e058      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801424a:	234a      	movs	r3, #74	@ 0x4a
 801424c:	18fb      	adds	r3, r7, r3
 801424e:	881a      	ldrh	r2, [r3, #0]
 8014250:	2380      	movs	r3, #128	@ 0x80
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	4013      	ands	r3, r2
 8014256:	d149      	bne.n	80142ec <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2250      	movs	r2, #80	@ 0x50
 801425e:	5a9b      	ldrh	r3, [r3, r2]
 8014260:	b29b      	uxth	r3, r3
 8014262:	001a      	movs	r2, r3
 8014264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	18d2      	adds	r2, r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	18d3      	adds	r3, r2, r3
 8014272:	4a2b      	ldr	r2, [pc, #172]	@ (8014320 <PCD_EP_ISR_Handler+0x808>)
 8014274:	4694      	mov	ip, r2
 8014276:	4463      	add	r3, ip
 8014278:	881a      	ldrh	r2, [r3, #0]
 801427a:	2140      	movs	r1, #64	@ 0x40
 801427c:	187b      	adds	r3, r7, r1
 801427e:	0592      	lsls	r2, r2, #22
 8014280:	0d92      	lsrs	r2, r2, #22
 8014282:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014286:	699a      	ldr	r2, [r3, #24]
 8014288:	187b      	adds	r3, r7, r1
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	429a      	cmp	r2, r3
 801428e:	d907      	bls.n	80142a0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8014290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014292:	699a      	ldr	r2, [r3, #24]
 8014294:	187b      	adds	r3, r7, r1
 8014296:	881b      	ldrh	r3, [r3, #0]
 8014298:	1ad2      	subs	r2, r2, r3
 801429a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801429c:	619a      	str	r2, [r3, #24]
 801429e:	e002      	b.n	80142a6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80142a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142a2:	2200      	movs	r2, #0
 80142a4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80142a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142a8:	699b      	ldr	r3, [r3, #24]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d107      	bne.n	80142be <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80142ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142b0:	781a      	ldrb	r2, [r3, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	0011      	movs	r1, r2
 80142b6:	0018      	movs	r0, r3
 80142b8:	f008 ff4a 	bl	801d150 <HAL_PCD_DataInStageCallback>
 80142bc:	e01e      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80142be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142c0:	695a      	ldr	r2, [r3, #20]
 80142c2:	2140      	movs	r1, #64	@ 0x40
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	18d2      	adds	r2, r2, r3
 80142ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80142ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142d0:	69da      	ldr	r2, [r3, #28]
 80142d2:	187b      	adds	r3, r7, r1
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	18d2      	adds	r2, r2, r3
 80142d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80142e2:	0011      	movs	r1, r2
 80142e4:	0018      	movs	r0, r3
 80142e6:	f005 fc3d 	bl	8019b64 <USB_EPStartXfer>
 80142ea:	e007      	b.n	80142fc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80142ec:	234a      	movs	r3, #74	@ 0x4a
 80142ee:	18fb      	adds	r3, r7, r3
 80142f0:	881a      	ldrh	r2, [r3, #0]
 80142f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	0018      	movs	r0, r3
 80142f8:	f000 f930 	bl	801455c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2244      	movs	r2, #68	@ 0x44
 8014302:	5a9b      	ldrh	r3, [r3, r2]
 8014304:	b29b      	uxth	r3, r3
 8014306:	b21b      	sxth	r3, r3
 8014308:	2b00      	cmp	r3, #0
 801430a:	da01      	bge.n	8014310 <PCD_EP_ISR_Handler+0x7f8>
 801430c:	f7ff fc0a 	bl	8013b24 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014310:	2300      	movs	r3, #0
}
 8014312:	0018      	movs	r0, r3
 8014314:	46bd      	mov	sp, r7
 8014316:	b016      	add	sp, #88	@ 0x58
 8014318:	bdb0      	pop	{r4, r5, r7, pc}
 801431a:	46c0      	nop			@ (mov r8, r8)
 801431c:	00000406 	.word	0x00000406
 8014320:	00000402 	.word	0x00000402

08014324 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014324:	b590      	push	{r4, r7, lr}
 8014326:	b089      	sub	sp, #36	@ 0x24
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	60b9      	str	r1, [r7, #8]
 801432e:	1dbb      	adds	r3, r7, #6
 8014330:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014332:	1dbb      	adds	r3, r7, #6
 8014334:	881a      	ldrh	r2, [r3, #0]
 8014336:	2380      	movs	r3, #128	@ 0x80
 8014338:	01db      	lsls	r3, r3, #7
 801433a:	4013      	ands	r3, r2
 801433c:	d100      	bne.n	8014340 <HAL_PCD_EP_DB_Receive+0x1c>
 801433e:	e07d      	b.n	801443c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2250      	movs	r2, #80	@ 0x50
 8014346:	5a9b      	ldrh	r3, [r3, r2]
 8014348:	b29b      	uxth	r3, r3
 801434a:	001a      	movs	r2, r3
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	00db      	lsls	r3, r3, #3
 8014352:	18d2      	adds	r2, r2, r3
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	18d3      	adds	r3, r2, r3
 801435a:	4a7a      	ldr	r2, [pc, #488]	@ (8014544 <HAL_PCD_EP_DB_Receive+0x220>)
 801435c:	4694      	mov	ip, r2
 801435e:	4463      	add	r3, ip
 8014360:	881a      	ldrh	r2, [r3, #0]
 8014362:	211a      	movs	r1, #26
 8014364:	187b      	adds	r3, r7, r1
 8014366:	0592      	lsls	r2, r2, #22
 8014368:	0d92      	lsrs	r2, r2, #22
 801436a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	699a      	ldr	r2, [r3, #24]
 8014370:	187b      	adds	r3, r7, r1
 8014372:	881b      	ldrh	r3, [r3, #0]
 8014374:	429a      	cmp	r2, r3
 8014376:	d307      	bcc.n	8014388 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	699a      	ldr	r2, [r3, #24]
 801437c:	187b      	adds	r3, r7, r1
 801437e:	881b      	ldrh	r3, [r3, #0]
 8014380:	1ad2      	subs	r2, r2, r3
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	619a      	str	r2, [r3, #24]
 8014386:	e002      	b.n	801438e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	2200      	movs	r2, #0
 801438c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d121      	bne.n	80143da <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	001a      	movs	r2, r3
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	18d3      	adds	r3, r2, r3
 80143a4:	881b      	ldrh	r3, [r3, #0]
 80143a6:	b29a      	uxth	r2, r3
 80143a8:	2018      	movs	r0, #24
 80143aa:	183b      	adds	r3, r7, r0
 80143ac:	4966      	ldr	r1, [pc, #408]	@ (8014548 <HAL_PCD_EP_DB_Receive+0x224>)
 80143ae:	400a      	ands	r2, r1
 80143b0:	801a      	strh	r2, [r3, #0]
 80143b2:	183b      	adds	r3, r7, r0
 80143b4:	183a      	adds	r2, r7, r0
 80143b6:	8812      	ldrh	r2, [r2, #0]
 80143b8:	2180      	movs	r1, #128	@ 0x80
 80143ba:	0189      	lsls	r1, r1, #6
 80143bc:	404a      	eors	r2, r1
 80143be:	801a      	strh	r2, [r3, #0]
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	001a      	movs	r2, r3
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	18d3      	adds	r3, r2, r3
 80143ce:	183a      	adds	r2, r7, r0
 80143d0:	8812      	ldrh	r2, [r2, #0]
 80143d2:	495e      	ldr	r1, [pc, #376]	@ (801454c <HAL_PCD_EP_DB_Receive+0x228>)
 80143d4:	430a      	orrs	r2, r1
 80143d6:	b292      	uxth	r2, r2
 80143d8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80143da:	1dbb      	adds	r3, r7, #6
 80143dc:	881b      	ldrh	r3, [r3, #0]
 80143de:	2240      	movs	r2, #64	@ 0x40
 80143e0:	4013      	ands	r3, r2
 80143e2:	d01a      	beq.n	801441a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	001a      	movs	r2, r3
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	18d3      	adds	r3, r2, r3
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	b29a      	uxth	r2, r3
 80143f6:	2016      	movs	r0, #22
 80143f8:	183b      	adds	r3, r7, r0
 80143fa:	4955      	ldr	r1, [pc, #340]	@ (8014550 <HAL_PCD_EP_DB_Receive+0x22c>)
 80143fc:	400a      	ands	r2, r1
 80143fe:	801a      	strh	r2, [r3, #0]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	001a      	movs	r2, r3
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	18d3      	adds	r3, r2, r3
 801440e:	183a      	adds	r2, r7, r0
 8014410:	8812      	ldrh	r2, [r2, #0]
 8014412:	4950      	ldr	r1, [pc, #320]	@ (8014554 <HAL_PCD_EP_DB_Receive+0x230>)
 8014414:	430a      	orrs	r2, r1
 8014416:	b292      	uxth	r2, r2
 8014418:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801441a:	241a      	movs	r4, #26
 801441c:	193b      	adds	r3, r7, r4
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d100      	bne.n	8014426 <HAL_PCD_EP_DB_Receive+0x102>
 8014424:	e086      	b.n	8014534 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	6818      	ldr	r0, [r3, #0]
 801442a:	68bb      	ldr	r3, [r7, #8]
 801442c:	6959      	ldr	r1, [r3, #20]
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	891a      	ldrh	r2, [r3, #8]
 8014432:	193b      	adds	r3, r7, r4
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	f006 fe50 	bl	801b0da <USB_ReadPMA>
 801443a:	e07b      	b.n	8014534 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2250      	movs	r2, #80	@ 0x50
 8014442:	5a9b      	ldrh	r3, [r3, r2]
 8014444:	b29b      	uxth	r3, r3
 8014446:	001a      	movs	r2, r3
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	18d2      	adds	r2, r2, r3
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	18d3      	adds	r3, r2, r3
 8014456:	4a40      	ldr	r2, [pc, #256]	@ (8014558 <HAL_PCD_EP_DB_Receive+0x234>)
 8014458:	4694      	mov	ip, r2
 801445a:	4463      	add	r3, ip
 801445c:	881a      	ldrh	r2, [r3, #0]
 801445e:	211a      	movs	r1, #26
 8014460:	187b      	adds	r3, r7, r1
 8014462:	0592      	lsls	r2, r2, #22
 8014464:	0d92      	lsrs	r2, r2, #22
 8014466:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	699a      	ldr	r2, [r3, #24]
 801446c:	187b      	adds	r3, r7, r1
 801446e:	881b      	ldrh	r3, [r3, #0]
 8014470:	429a      	cmp	r2, r3
 8014472:	d307      	bcc.n	8014484 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	699a      	ldr	r2, [r3, #24]
 8014478:	187b      	adds	r3, r7, r1
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	1ad2      	subs	r2, r2, r3
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	619a      	str	r2, [r3, #24]
 8014482:	e002      	b.n	801448a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	2200      	movs	r2, #0
 8014488:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	699b      	ldr	r3, [r3, #24]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d121      	bne.n	80144d6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	001a      	movs	r2, r3
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	009b      	lsls	r3, r3, #2
 801449e:	18d3      	adds	r3, r2, r3
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	201e      	movs	r0, #30
 80144a6:	183b      	adds	r3, r7, r0
 80144a8:	4927      	ldr	r1, [pc, #156]	@ (8014548 <HAL_PCD_EP_DB_Receive+0x224>)
 80144aa:	400a      	ands	r2, r1
 80144ac:	801a      	strh	r2, [r3, #0]
 80144ae:	183b      	adds	r3, r7, r0
 80144b0:	183a      	adds	r2, r7, r0
 80144b2:	8812      	ldrh	r2, [r2, #0]
 80144b4:	2180      	movs	r1, #128	@ 0x80
 80144b6:	0189      	lsls	r1, r1, #6
 80144b8:	404a      	eors	r2, r1
 80144ba:	801a      	strh	r2, [r3, #0]
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	001a      	movs	r2, r3
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	781b      	ldrb	r3, [r3, #0]
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	18d3      	adds	r3, r2, r3
 80144ca:	183a      	adds	r2, r7, r0
 80144cc:	8812      	ldrh	r2, [r2, #0]
 80144ce:	491f      	ldr	r1, [pc, #124]	@ (801454c <HAL_PCD_EP_DB_Receive+0x228>)
 80144d0:	430a      	orrs	r2, r1
 80144d2:	b292      	uxth	r2, r2
 80144d4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80144d6:	1dbb      	adds	r3, r7, #6
 80144d8:	881b      	ldrh	r3, [r3, #0]
 80144da:	2240      	movs	r2, #64	@ 0x40
 80144dc:	4013      	ands	r3, r2
 80144de:	d11a      	bne.n	8014516 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	001a      	movs	r2, r3
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	18d3      	adds	r3, r2, r3
 80144ee:	881b      	ldrh	r3, [r3, #0]
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	201c      	movs	r0, #28
 80144f4:	183b      	adds	r3, r7, r0
 80144f6:	4916      	ldr	r1, [pc, #88]	@ (8014550 <HAL_PCD_EP_DB_Receive+0x22c>)
 80144f8:	400a      	ands	r2, r1
 80144fa:	801a      	strh	r2, [r3, #0]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	001a      	movs	r2, r3
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	18d3      	adds	r3, r2, r3
 801450a:	183a      	adds	r2, r7, r0
 801450c:	8812      	ldrh	r2, [r2, #0]
 801450e:	4911      	ldr	r1, [pc, #68]	@ (8014554 <HAL_PCD_EP_DB_Receive+0x230>)
 8014510:	430a      	orrs	r2, r1
 8014512:	b292      	uxth	r2, r2
 8014514:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014516:	241a      	movs	r4, #26
 8014518:	193b      	adds	r3, r7, r4
 801451a:	881b      	ldrh	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d009      	beq.n	8014534 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	6818      	ldr	r0, [r3, #0]
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	6959      	ldr	r1, [r3, #20]
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	895a      	ldrh	r2, [r3, #10]
 801452c:	193b      	adds	r3, r7, r4
 801452e:	881b      	ldrh	r3, [r3, #0]
 8014530:	f006 fdd3 	bl	801b0da <USB_ReadPMA>
    }
  }

  return count;
 8014534:	231a      	movs	r3, #26
 8014536:	18fb      	adds	r3, r7, r3
 8014538:	881b      	ldrh	r3, [r3, #0]
}
 801453a:	0018      	movs	r0, r3
 801453c:	46bd      	mov	sp, r7
 801453e:	b009      	add	sp, #36	@ 0x24
 8014540:	bd90      	pop	{r4, r7, pc}
 8014542:	46c0      	nop			@ (mov r8, r8)
 8014544:	00000402 	.word	0x00000402
 8014548:	ffffbf8f 	.word	0xffffbf8f
 801454c:	ffff8080 	.word	0xffff8080
 8014550:	ffff8f8f 	.word	0xffff8f8f
 8014554:	ffff80c0 	.word	0xffff80c0
 8014558:	00000406 	.word	0x00000406

0801455c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b0a4      	sub	sp, #144	@ 0x90
 8014560:	af00      	add	r7, sp, #0
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	60b9      	str	r1, [r7, #8]
 8014566:	1dbb      	adds	r3, r7, #6
 8014568:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801456a:	1dbb      	adds	r3, r7, #6
 801456c:	881b      	ldrh	r3, [r3, #0]
 801456e:	2240      	movs	r2, #64	@ 0x40
 8014570:	4013      	ands	r3, r2
 8014572:	d100      	bne.n	8014576 <HAL_PCD_EP_DB_Transmit+0x1a>
 8014574:	e1e4      	b.n	8014940 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2250      	movs	r2, #80	@ 0x50
 801457c:	5a9b      	ldrh	r3, [r3, r2]
 801457e:	b29b      	uxth	r3, r3
 8014580:	001a      	movs	r2, r3
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	00db      	lsls	r3, r3, #3
 8014588:	18d2      	adds	r2, r2, r3
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	18d3      	adds	r3, r2, r3
 8014590:	4ad0      	ldr	r2, [pc, #832]	@ (80148d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014592:	4694      	mov	ip, r2
 8014594:	4463      	add	r3, ip
 8014596:	881a      	ldrh	r2, [r3, #0]
 8014598:	2186      	movs	r1, #134	@ 0x86
 801459a:	187b      	adds	r3, r7, r1
 801459c:	0592      	lsls	r2, r2, #22
 801459e:	0d92      	lsrs	r2, r2, #22
 80145a0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	699a      	ldr	r2, [r3, #24]
 80145a6:	187b      	adds	r3, r7, r1
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d907      	bls.n	80145be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	699a      	ldr	r2, [r3, #24]
 80145b2:	187b      	adds	r3, r7, r1
 80145b4:	881b      	ldrh	r3, [r3, #0]
 80145b6:	1ad2      	subs	r2, r2, r3
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	619a      	str	r2, [r3, #24]
 80145bc:	e002      	b.n	80145c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	2200      	movs	r2, #0
 80145c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	699b      	ldr	r3, [r3, #24]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d000      	beq.n	80145ce <HAL_PCD_EP_DB_Transmit+0x72>
 80145cc:	e0b5      	b.n	801473a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145ce:	68bb      	ldr	r3, [r7, #8]
 80145d0:	785b      	ldrb	r3, [r3, #1]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d125      	bne.n	8014622 <HAL_PCD_EP_DB_Transmit+0xc6>
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2250      	movs	r2, #80	@ 0x50
 80145e2:	5a9b      	ldrh	r3, [r3, r2]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	001a      	movs	r2, r3
 80145e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ea:	189b      	adds	r3, r3, r2
 80145ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	00da      	lsls	r2, r3, #3
 80145f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f6:	18d3      	adds	r3, r2, r3
 80145f8:	4ab6      	ldr	r2, [pc, #728]	@ (80148d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80145fa:	4694      	mov	ip, r2
 80145fc:	4463      	add	r3, ip
 80145fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	b29b      	uxth	r3, r3
 8014606:	059b      	lsls	r3, r3, #22
 8014608:	0d9b      	lsrs	r3, r3, #22
 801460a:	b29a      	uxth	r2, r3
 801460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801460e:	801a      	strh	r2, [r3, #0]
 8014610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014612:	881b      	ldrh	r3, [r3, #0]
 8014614:	b29b      	uxth	r3, r3
 8014616:	4ab0      	ldr	r2, [pc, #704]	@ (80148d8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014618:	4313      	orrs	r3, r2
 801461a:	b29a      	uxth	r2, r3
 801461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801461e:	801a      	strh	r2, [r3, #0]
 8014620:	e01b      	b.n	801465a <HAL_PCD_EP_DB_Transmit+0xfe>
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	785b      	ldrb	r3, [r3, #1]
 8014626:	2b01      	cmp	r3, #1
 8014628:	d117      	bne.n	801465a <HAL_PCD_EP_DB_Transmit+0xfe>
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	2250      	movs	r2, #80	@ 0x50
 8014636:	5a9b      	ldrh	r3, [r3, r2]
 8014638:	b29b      	uxth	r3, r3
 801463a:	001a      	movs	r2, r3
 801463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801463e:	189b      	adds	r3, r3, r2
 8014640:	637b      	str	r3, [r7, #52]	@ 0x34
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	00da      	lsls	r2, r3, #3
 8014648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801464a:	18d3      	adds	r3, r2, r3
 801464c:	4aa1      	ldr	r2, [pc, #644]	@ (80148d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801464e:	4694      	mov	ip, r2
 8014650:	4463      	add	r3, ip
 8014652:	633b      	str	r3, [r7, #48]	@ 0x30
 8014654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014656:	2200      	movs	r2, #0
 8014658:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	785b      	ldrb	r3, [r3, #1]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d125      	bne.n	80146b4 <HAL_PCD_EP_DB_Transmit+0x158>
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	61fb      	str	r3, [r7, #28]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2250      	movs	r2, #80	@ 0x50
 8014674:	5a9b      	ldrh	r3, [r3, r2]
 8014676:	b29b      	uxth	r3, r3
 8014678:	001a      	movs	r2, r3
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	189b      	adds	r3, r3, r2
 801467e:	61fb      	str	r3, [r7, #28]
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	00da      	lsls	r2, r3, #3
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	18d3      	adds	r3, r2, r3
 801468a:	4a94      	ldr	r2, [pc, #592]	@ (80148dc <HAL_PCD_EP_DB_Transmit+0x380>)
 801468c:	4694      	mov	ip, r2
 801468e:	4463      	add	r3, ip
 8014690:	61bb      	str	r3, [r7, #24]
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	b29b      	uxth	r3, r3
 8014698:	059b      	lsls	r3, r3, #22
 801469a:	0d9b      	lsrs	r3, r3, #22
 801469c:	b29a      	uxth	r2, r3
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	801a      	strh	r2, [r3, #0]
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	4a8b      	ldr	r2, [pc, #556]	@ (80148d8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80146aa:	4313      	orrs	r3, r2
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	801a      	strh	r2, [r3, #0]
 80146b2:	e018      	b.n	80146e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	785b      	ldrb	r3, [r3, #1]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d114      	bne.n	80146e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2250      	movs	r2, #80	@ 0x50
 80146c2:	5a9b      	ldrh	r3, [r3, r2]
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	001a      	movs	r2, r3
 80146c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ca:	189b      	adds	r3, r3, r2
 80146cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	00da      	lsls	r2, r3, #3
 80146d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146d6:	18d3      	adds	r3, r2, r3
 80146d8:	4a80      	ldr	r2, [pc, #512]	@ (80148dc <HAL_PCD_EP_DB_Transmit+0x380>)
 80146da:	4694      	mov	ip, r2
 80146dc:	4463      	add	r3, ip
 80146de:	623b      	str	r3, [r7, #32]
 80146e0:	6a3b      	ldr	r3, [r7, #32]
 80146e2:	2200      	movs	r2, #0
 80146e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	781a      	ldrb	r2, [r3, #0]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	0011      	movs	r1, r2
 80146ee:	0018      	movs	r0, r3
 80146f0:	f008 fd2e 	bl	801d150 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80146f4:	1dbb      	adds	r3, r7, #6
 80146f6:	881a      	ldrh	r2, [r3, #0]
 80146f8:	2380      	movs	r3, #128	@ 0x80
 80146fa:	01db      	lsls	r3, r3, #7
 80146fc:	4013      	ands	r3, r2
 80146fe:	d100      	bne.n	8014702 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014700:	e309      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	001a      	movs	r2, r3
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	18d3      	adds	r3, r2, r3
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	b29a      	uxth	r2, r3
 8014714:	2016      	movs	r0, #22
 8014716:	183b      	adds	r3, r7, r0
 8014718:	4971      	ldr	r1, [pc, #452]	@ (80148e0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801471a:	400a      	ands	r2, r1
 801471c:	801a      	strh	r2, [r3, #0]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	001a      	movs	r2, r3
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	18d3      	adds	r3, r2, r3
 801472c:	183a      	adds	r2, r7, r0
 801472e:	8812      	ldrh	r2, [r2, #0]
 8014730:	496c      	ldr	r1, [pc, #432]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014732:	430a      	orrs	r2, r1
 8014734:	b292      	uxth	r2, r2
 8014736:	801a      	strh	r2, [r3, #0]
 8014738:	e2ed      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801473a:	1dbb      	adds	r3, r7, #6
 801473c:	881a      	ldrh	r2, [r3, #0]
 801473e:	2380      	movs	r3, #128	@ 0x80
 8014740:	01db      	lsls	r3, r3, #7
 8014742:	4013      	ands	r3, r2
 8014744:	d01a      	beq.n	801477c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	001a      	movs	r2, r3
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	18d3      	adds	r3, r2, r3
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	b29a      	uxth	r2, r3
 8014758:	208a      	movs	r0, #138	@ 0x8a
 801475a:	183b      	adds	r3, r7, r0
 801475c:	4960      	ldr	r1, [pc, #384]	@ (80148e0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801475e:	400a      	ands	r2, r1
 8014760:	801a      	strh	r2, [r3, #0]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	001a      	movs	r2, r3
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	009b      	lsls	r3, r3, #2
 801476e:	18d3      	adds	r3, r2, r3
 8014770:	183a      	adds	r2, r7, r0
 8014772:	8812      	ldrh	r2, [r2, #0]
 8014774:	495b      	ldr	r1, [pc, #364]	@ (80148e4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014776:	430a      	orrs	r2, r1
 8014778:	b292      	uxth	r2, r2
 801477a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801477c:	68bb      	ldr	r3, [r7, #8]
 801477e:	2224      	movs	r2, #36	@ 0x24
 8014780:	5c9b      	ldrb	r3, [r3, r2]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d000      	beq.n	8014788 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014786:	e2c6      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	695a      	ldr	r2, [r3, #20]
 801478c:	2186      	movs	r1, #134	@ 0x86
 801478e:	187b      	adds	r3, r7, r1
 8014790:	881b      	ldrh	r3, [r3, #0]
 8014792:	18d2      	adds	r2, r2, r3
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	69da      	ldr	r2, [r3, #28]
 801479c:	187b      	adds	r3, r7, r1
 801479e:	881b      	ldrh	r3, [r3, #0]
 80147a0:	18d2      	adds	r2, r2, r3
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	6a1a      	ldr	r2, [r3, #32]
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d30c      	bcc.n	80147cc <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	691b      	ldr	r3, [r3, #16]
 80147b6:	218c      	movs	r1, #140	@ 0x8c
 80147b8:	187a      	adds	r2, r7, r1
 80147ba:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	6a1a      	ldr	r2, [r3, #32]
 80147c0:	187b      	adds	r3, r7, r1
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	1ad2      	subs	r2, r2, r3
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	621a      	str	r2, [r3, #32]
 80147ca:	e01a      	b.n	8014802 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	6a1b      	ldr	r3, [r3, #32]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d10a      	bne.n	80147ea <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80147d4:	2386      	movs	r3, #134	@ 0x86
 80147d6:	18fb      	adds	r3, r7, r3
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	228c      	movs	r2, #140	@ 0x8c
 80147dc:	18ba      	adds	r2, r7, r2
 80147de:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2224      	movs	r2, #36	@ 0x24
 80147e4:	2100      	movs	r1, #0
 80147e6:	5499      	strb	r1, [r3, r2]
 80147e8:	e00b      	b.n	8014802 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	2224      	movs	r2, #36	@ 0x24
 80147ee:	2100      	movs	r1, #0
 80147f0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	6a1b      	ldr	r3, [r3, #32]
 80147f6:	228c      	movs	r2, #140	@ 0x8c
 80147f8:	18ba      	adds	r2, r7, r2
 80147fa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	2200      	movs	r2, #0
 8014800:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	785b      	ldrb	r3, [r3, #1]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d000      	beq.n	801480c <HAL_PCD_EP_DB_Transmit+0x2b0>
 801480a:	e06d      	b.n	80148e8 <HAL_PCD_EP_DB_Transmit+0x38c>
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2250      	movs	r2, #80	@ 0x50
 8014818:	5a9b      	ldrh	r3, [r3, r2]
 801481a:	b29b      	uxth	r3, r3
 801481c:	001a      	movs	r2, r3
 801481e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014820:	189b      	adds	r3, r3, r2
 8014822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	00da      	lsls	r2, r3, #3
 801482a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801482c:	18d3      	adds	r3, r2, r3
 801482e:	4a29      	ldr	r2, [pc, #164]	@ (80148d4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014830:	4694      	mov	ip, r2
 8014832:	4463      	add	r3, ip
 8014834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014838:	881b      	ldrh	r3, [r3, #0]
 801483a:	b29b      	uxth	r3, r3
 801483c:	059b      	lsls	r3, r3, #22
 801483e:	0d9b      	lsrs	r3, r3, #22
 8014840:	b29a      	uxth	r2, r3
 8014842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014844:	801a      	strh	r2, [r3, #0]
 8014846:	228c      	movs	r2, #140	@ 0x8c
 8014848:	18bb      	adds	r3, r7, r2
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b3e      	cmp	r3, #62	@ 0x3e
 801484e:	d91a      	bls.n	8014886 <HAL_PCD_EP_DB_Transmit+0x32a>
 8014850:	18bb      	adds	r3, r7, r2
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	095b      	lsrs	r3, r3, #5
 8014856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014858:	18bb      	adds	r3, r7, r2
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	221f      	movs	r2, #31
 801485e:	4013      	ands	r3, r2
 8014860:	d102      	bne.n	8014868 <HAL_PCD_EP_DB_Transmit+0x30c>
 8014862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014864:	3b01      	subs	r3, #1
 8014866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801486a:	881b      	ldrh	r3, [r3, #0]
 801486c:	b29a      	uxth	r2, r3
 801486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014870:	b29b      	uxth	r3, r3
 8014872:	029b      	lsls	r3, r3, #10
 8014874:	b29b      	uxth	r3, r3
 8014876:	4313      	orrs	r3, r2
 8014878:	b29b      	uxth	r3, r3
 801487a:	4a17      	ldr	r2, [pc, #92]	@ (80148d8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801487c:	4313      	orrs	r3, r2
 801487e:	b29a      	uxth	r2, r3
 8014880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014882:	801a      	strh	r2, [r3, #0]
 8014884:	e04f      	b.n	8014926 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014886:	238c      	movs	r3, #140	@ 0x8c
 8014888:	18fb      	adds	r3, r7, r3
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d108      	bne.n	80148a2 <HAL_PCD_EP_DB_Transmit+0x346>
 8014890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014892:	881b      	ldrh	r3, [r3, #0]
 8014894:	b29b      	uxth	r3, r3
 8014896:	4a10      	ldr	r2, [pc, #64]	@ (80148d8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014898:	4313      	orrs	r3, r2
 801489a:	b29a      	uxth	r2, r3
 801489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801489e:	801a      	strh	r2, [r3, #0]
 80148a0:	e041      	b.n	8014926 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80148a2:	228c      	movs	r2, #140	@ 0x8c
 80148a4:	18bb      	adds	r3, r7, r2
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	085b      	lsrs	r3, r3, #1
 80148aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80148ac:	18bb      	adds	r3, r7, r2
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2201      	movs	r2, #1
 80148b2:	4013      	ands	r3, r2
 80148b4:	d002      	beq.n	80148bc <HAL_PCD_EP_DB_Transmit+0x360>
 80148b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148b8:	3301      	adds	r3, #1
 80148ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80148bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	029b      	lsls	r3, r3, #10
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	4313      	orrs	r3, r2
 80148cc:	b29a      	uxth	r2, r3
 80148ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148d0:	801a      	strh	r2, [r3, #0]
 80148d2:	e028      	b.n	8014926 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80148d4:	00000402 	.word	0x00000402
 80148d8:	ffff8000 	.word	0xffff8000
 80148dc:	00000406 	.word	0x00000406
 80148e0:	ffff8f8f 	.word	0xffff8f8f
 80148e4:	ffffc080 	.word	0xffffc080
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	785b      	ldrb	r3, [r3, #1]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d11a      	bne.n	8014926 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2250      	movs	r2, #80	@ 0x50
 80148fc:	5a9b      	ldrh	r3, [r3, r2]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	001a      	movs	r2, r3
 8014902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014904:	189b      	adds	r3, r3, r2
 8014906:	647b      	str	r3, [r7, #68]	@ 0x44
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	00da      	lsls	r2, r3, #3
 801490e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014910:	18d3      	adds	r3, r2, r3
 8014912:	4adb      	ldr	r2, [pc, #876]	@ (8014c80 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014914:	4694      	mov	ip, r2
 8014916:	4463      	add	r3, ip
 8014918:	643b      	str	r3, [r7, #64]	@ 0x40
 801491a:	238c      	movs	r3, #140	@ 0x8c
 801491c:	18fb      	adds	r3, r7, r3
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	b29a      	uxth	r2, r3
 8014922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014924:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	6818      	ldr	r0, [r3, #0]
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	6959      	ldr	r1, [r3, #20]
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	891a      	ldrh	r2, [r3, #8]
 8014932:	238c      	movs	r3, #140	@ 0x8c
 8014934:	18fb      	adds	r3, r7, r3
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	b29b      	uxth	r3, r3
 801493a:	f006 fb85 	bl	801b048 <USB_WritePMA>
 801493e:	e1ea      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2250      	movs	r2, #80	@ 0x50
 8014946:	5a9b      	ldrh	r3, [r3, r2]
 8014948:	b29b      	uxth	r3, r3
 801494a:	001a      	movs	r2, r3
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	781b      	ldrb	r3, [r3, #0]
 8014950:	00db      	lsls	r3, r3, #3
 8014952:	18d2      	adds	r2, r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	18d3      	adds	r3, r2, r3
 801495a:	4aca      	ldr	r2, [pc, #808]	@ (8014c84 <HAL_PCD_EP_DB_Transmit+0x728>)
 801495c:	4694      	mov	ip, r2
 801495e:	4463      	add	r3, ip
 8014960:	881a      	ldrh	r2, [r3, #0]
 8014962:	2186      	movs	r1, #134	@ 0x86
 8014964:	187b      	adds	r3, r7, r1
 8014966:	0592      	lsls	r2, r2, #22
 8014968:	0d92      	lsrs	r2, r2, #22
 801496a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	699a      	ldr	r2, [r3, #24]
 8014970:	187b      	adds	r3, r7, r1
 8014972:	881b      	ldrh	r3, [r3, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	d307      	bcc.n	8014988 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	699a      	ldr	r2, [r3, #24]
 801497c:	187b      	adds	r3, r7, r1
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	1ad2      	subs	r2, r2, r3
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	619a      	str	r2, [r3, #24]
 8014986:	e002      	b.n	801498e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	2200      	movs	r2, #0
 801498c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	699b      	ldr	r3, [r3, #24]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d000      	beq.n	8014998 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014996:	e0bb      	b.n	8014b10 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	785b      	ldrb	r3, [r3, #1]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d125      	bne.n	80149ec <HAL_PCD_EP_DB_Transmit+0x490>
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2250      	movs	r2, #80	@ 0x50
 80149ac:	5a9b      	ldrh	r3, [r3, r2]
 80149ae:	b29b      	uxth	r3, r3
 80149b0:	001a      	movs	r2, r3
 80149b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80149b4:	189b      	adds	r3, r3, r2
 80149b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	00da      	lsls	r2, r3, #3
 80149be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80149c0:	18d3      	adds	r3, r2, r3
 80149c2:	4aaf      	ldr	r2, [pc, #700]	@ (8014c80 <HAL_PCD_EP_DB_Transmit+0x724>)
 80149c4:	4694      	mov	ip, r2
 80149c6:	4463      	add	r3, ip
 80149c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80149ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	059b      	lsls	r3, r3, #22
 80149d2:	0d9b      	lsrs	r3, r3, #22
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149d8:	801a      	strh	r2, [r3, #0]
 80149da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4aa9      	ldr	r2, [pc, #676]	@ (8014c88 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80149e2:	4313      	orrs	r3, r2
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149e8:	801a      	strh	r2, [r3, #0]
 80149ea:	e01b      	b.n	8014a24 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	785b      	ldrb	r3, [r3, #1]
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d117      	bne.n	8014a24 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2250      	movs	r2, #80	@ 0x50
 8014a00:	5a9b      	ldrh	r3, [r3, r2]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	001a      	movs	r2, r3
 8014a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a08:	189b      	adds	r3, r3, r2
 8014a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	00da      	lsls	r2, r3, #3
 8014a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014a14:	18d3      	adds	r3, r2, r3
 8014a16:	4a9a      	ldr	r2, [pc, #616]	@ (8014c80 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014a18:	4694      	mov	ip, r2
 8014a1a:	4463      	add	r3, ip
 8014a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8014a1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a20:	2200      	movs	r2, #0
 8014a22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	677b      	str	r3, [r7, #116]	@ 0x74
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	785b      	ldrb	r3, [r3, #1]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d12b      	bne.n	8014a8a <HAL_PCD_EP_DB_Transmit+0x52e>
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2250      	movs	r2, #80	@ 0x50
 8014a3e:	5a9b      	ldrh	r3, [r3, r2]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	001a      	movs	r2, r3
 8014a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014a46:	189b      	adds	r3, r3, r2
 8014a48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	00da      	lsls	r2, r3, #3
 8014a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014a52:	18d3      	adds	r3, r2, r3
 8014a54:	4a8b      	ldr	r2, [pc, #556]	@ (8014c84 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014a56:	4694      	mov	ip, r2
 8014a58:	4463      	add	r3, ip
 8014a5a:	2180      	movs	r1, #128	@ 0x80
 8014a5c:	187a      	adds	r2, r7, r1
 8014a5e:	6013      	str	r3, [r2, #0]
 8014a60:	187b      	adds	r3, r7, r1
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	059b      	lsls	r3, r3, #22
 8014a6a:	0d9b      	lsrs	r3, r3, #22
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	187b      	adds	r3, r7, r1
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	801a      	strh	r2, [r3, #0]
 8014a74:	187b      	adds	r3, r7, r1
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	881b      	ldrh	r3, [r3, #0]
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	4a82      	ldr	r2, [pc, #520]	@ (8014c88 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014a7e:	4313      	orrs	r3, r2
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	187b      	adds	r3, r7, r1
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	801a      	strh	r2, [r3, #0]
 8014a88:	e018      	b.n	8014abc <HAL_PCD_EP_DB_Transmit+0x560>
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	785b      	ldrb	r3, [r3, #1]
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d114      	bne.n	8014abc <HAL_PCD_EP_DB_Transmit+0x560>
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2250      	movs	r2, #80	@ 0x50
 8014a98:	5a9b      	ldrh	r3, [r3, r2]
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	001a      	movs	r2, r3
 8014a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014aa0:	189b      	adds	r3, r3, r2
 8014aa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	00da      	lsls	r2, r3, #3
 8014aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014aac:	18d3      	adds	r3, r2, r3
 8014aae:	4a75      	ldr	r2, [pc, #468]	@ (8014c84 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ab0:	4694      	mov	ip, r2
 8014ab2:	4463      	add	r3, ip
 8014ab4:	673b      	str	r3, [r7, #112]	@ 0x70
 8014ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014ab8:	2200      	movs	r2, #0
 8014aba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	781a      	ldrb	r2, [r3, #0]
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	0011      	movs	r1, r2
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	f008 fb43 	bl	801d150 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014aca:	1dbb      	adds	r3, r7, #6
 8014acc:	881a      	ldrh	r2, [r3, #0]
 8014ace:	2380      	movs	r3, #128	@ 0x80
 8014ad0:	01db      	lsls	r3, r3, #7
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	d000      	beq.n	8014ad8 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014ad6:	e11e      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	001a      	movs	r2, r3
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	18d3      	adds	r3, r2, r3
 8014ae6:	881b      	ldrh	r3, [r3, #0]
 8014ae8:	b29a      	uxth	r2, r3
 8014aea:	2088      	movs	r0, #136	@ 0x88
 8014aec:	183b      	adds	r3, r7, r0
 8014aee:	4967      	ldr	r1, [pc, #412]	@ (8014c8c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014af0:	400a      	ands	r2, r1
 8014af2:	801a      	strh	r2, [r3, #0]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	001a      	movs	r2, r3
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	18d3      	adds	r3, r2, r3
 8014b02:	183a      	adds	r2, r7, r0
 8014b04:	8812      	ldrh	r2, [r2, #0]
 8014b06:	4962      	ldr	r1, [pc, #392]	@ (8014c90 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014b08:	430a      	orrs	r2, r1
 8014b0a:	b292      	uxth	r2, r2
 8014b0c:	801a      	strh	r2, [r3, #0]
 8014b0e:	e102      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014b10:	1dbb      	adds	r3, r7, #6
 8014b12:	881a      	ldrh	r2, [r3, #0]
 8014b14:	2380      	movs	r3, #128	@ 0x80
 8014b16:	01db      	lsls	r3, r3, #7
 8014b18:	4013      	ands	r3, r2
 8014b1a:	d11a      	bne.n	8014b52 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	001a      	movs	r2, r3
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	009b      	lsls	r3, r3, #2
 8014b28:	18d3      	adds	r3, r2, r3
 8014b2a:	881b      	ldrh	r3, [r3, #0]
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	204e      	movs	r0, #78	@ 0x4e
 8014b30:	183b      	adds	r3, r7, r0
 8014b32:	4956      	ldr	r1, [pc, #344]	@ (8014c8c <HAL_PCD_EP_DB_Transmit+0x730>)
 8014b34:	400a      	ands	r2, r1
 8014b36:	801a      	strh	r2, [r3, #0]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	001a      	movs	r2, r3
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	781b      	ldrb	r3, [r3, #0]
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	18d3      	adds	r3, r2, r3
 8014b46:	183a      	adds	r2, r7, r0
 8014b48:	8812      	ldrh	r2, [r2, #0]
 8014b4a:	4951      	ldr	r1, [pc, #324]	@ (8014c90 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014b4c:	430a      	orrs	r2, r1
 8014b4e:	b292      	uxth	r2, r2
 8014b50:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2224      	movs	r2, #36	@ 0x24
 8014b56:	5c9b      	ldrb	r3, [r3, r2]
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d000      	beq.n	8014b5e <HAL_PCD_EP_DB_Transmit+0x602>
 8014b5c:	e0db      	b.n	8014d16 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	695a      	ldr	r2, [r3, #20]
 8014b62:	2186      	movs	r1, #134	@ 0x86
 8014b64:	187b      	adds	r3, r7, r1
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	18d2      	adds	r2, r2, r3
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	69da      	ldr	r2, [r3, #28]
 8014b72:	187b      	adds	r3, r7, r1
 8014b74:	881b      	ldrh	r3, [r3, #0]
 8014b76:	18d2      	adds	r2, r2, r3
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	6a1a      	ldr	r2, [r3, #32]
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	691b      	ldr	r3, [r3, #16]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d30c      	bcc.n	8014ba2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	691b      	ldr	r3, [r3, #16]
 8014b8c:	218c      	movs	r1, #140	@ 0x8c
 8014b8e:	187a      	adds	r2, r7, r1
 8014b90:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	6a1a      	ldr	r2, [r3, #32]
 8014b96:	187b      	adds	r3, r7, r1
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	1ad2      	subs	r2, r2, r3
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	621a      	str	r2, [r3, #32]
 8014ba0:	e01a      	b.n	8014bd8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	6a1b      	ldr	r3, [r3, #32]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10a      	bne.n	8014bc0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014baa:	2386      	movs	r3, #134	@ 0x86
 8014bac:	18fb      	adds	r3, r7, r3
 8014bae:	881b      	ldrh	r3, [r3, #0]
 8014bb0:	228c      	movs	r2, #140	@ 0x8c
 8014bb2:	18ba      	adds	r2, r7, r2
 8014bb4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2224      	movs	r2, #36	@ 0x24
 8014bba:	2100      	movs	r1, #0
 8014bbc:	5499      	strb	r1, [r3, r2]
 8014bbe:	e00b      	b.n	8014bd8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	6a1b      	ldr	r3, [r3, #32]
 8014bc4:	228c      	movs	r2, #140	@ 0x8c
 8014bc6:	18ba      	adds	r2, r7, r2
 8014bc8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2224      	movs	r2, #36	@ 0x24
 8014bd4:	2100      	movs	r1, #0
 8014bd6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	785b      	ldrb	r3, [r3, #1]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d000      	beq.n	8014be8 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014be6:	e06e      	b.n	8014cc6 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2250      	movs	r2, #80	@ 0x50
 8014bf4:	5a9b      	ldrh	r3, [r3, r2]
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	001a      	movs	r2, r3
 8014bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bfc:	189b      	adds	r3, r3, r2
 8014bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	00da      	lsls	r2, r3, #3
 8014c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c08:	18d3      	adds	r3, r2, r3
 8014c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8014c84 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014c0c:	4694      	mov	ip, r2
 8014c0e:	4463      	add	r3, ip
 8014c10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c14:	881b      	ldrh	r3, [r3, #0]
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	059b      	lsls	r3, r3, #22
 8014c1a:	0d9b      	lsrs	r3, r3, #22
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c20:	801a      	strh	r2, [r3, #0]
 8014c22:	228c      	movs	r2, #140	@ 0x8c
 8014c24:	18bb      	adds	r3, r7, r2
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b3e      	cmp	r3, #62	@ 0x3e
 8014c2a:	d91a      	bls.n	8014c62 <HAL_PCD_EP_DB_Transmit+0x706>
 8014c2c:	18bb      	adds	r3, r7, r2
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	095b      	lsrs	r3, r3, #5
 8014c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c34:	18bb      	adds	r3, r7, r2
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	221f      	movs	r2, #31
 8014c3a:	4013      	ands	r3, r2
 8014c3c:	d102      	bne.n	8014c44 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c40:	3b01      	subs	r3, #1
 8014c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c46:	881b      	ldrh	r3, [r3, #0]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	029b      	lsls	r3, r3, #10
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	4313      	orrs	r3, r2
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	4a0c      	ldr	r2, [pc, #48]	@ (8014c88 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c58:	4313      	orrs	r3, r2
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c5e:	801a      	strh	r2, [r3, #0]
 8014c60:	e04d      	b.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c62:	238c      	movs	r3, #140	@ 0x8c
 8014c64:	18fb      	adds	r3, r7, r3
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d113      	bne.n	8014c94 <HAL_PCD_EP_DB_Transmit+0x738>
 8014c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c6e:	881b      	ldrh	r3, [r3, #0]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	4a05      	ldr	r2, [pc, #20]	@ (8014c88 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014c74:	4313      	orrs	r3, r2
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c7a:	801a      	strh	r2, [r3, #0]
 8014c7c:	e03f      	b.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c7e:	46c0      	nop			@ (mov r8, r8)
 8014c80:	00000402 	.word	0x00000402
 8014c84:	00000406 	.word	0x00000406
 8014c88:	ffff8000 	.word	0xffff8000
 8014c8c:	ffff8f8f 	.word	0xffff8f8f
 8014c90:	ffffc080 	.word	0xffffc080
 8014c94:	228c      	movs	r2, #140	@ 0x8c
 8014c96:	18bb      	adds	r3, r7, r2
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	085b      	lsrs	r3, r3, #1
 8014c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c9e:	18bb      	adds	r3, r7, r2
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	4013      	ands	r3, r2
 8014ca6:	d002      	beq.n	8014cae <HAL_PCD_EP_DB_Transmit+0x752>
 8014ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014caa:	3301      	adds	r3, #1
 8014cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cb0:	881b      	ldrh	r3, [r3, #0]
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	029b      	lsls	r3, r3, #10
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	4313      	orrs	r3, r2
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014cc2:	801a      	strh	r2, [r3, #0]
 8014cc4:	e01b      	b.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	785b      	ldrb	r3, [r3, #1]
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	d117      	bne.n	8014cfe <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2250      	movs	r2, #80	@ 0x50
 8014cd4:	5a9b      	ldrh	r3, [r3, r2]
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	001a      	movs	r2, r3
 8014cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cdc:	189b      	adds	r3, r3, r2
 8014cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	00da      	lsls	r2, r3, #3
 8014ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ce8:	18d3      	adds	r3, r2, r3
 8014cea:	4a21      	ldr	r2, [pc, #132]	@ (8014d70 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014cec:	4694      	mov	ip, r2
 8014cee:	4463      	add	r3, ip
 8014cf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8014cf2:	238c      	movs	r3, #140	@ 0x8c
 8014cf4:	18fb      	adds	r3, r7, r3
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	6818      	ldr	r0, [r3, #0]
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	6959      	ldr	r1, [r3, #20]
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	895a      	ldrh	r2, [r3, #10]
 8014d0a:	238c      	movs	r3, #140	@ 0x8c
 8014d0c:	18fb      	adds	r3, r7, r3
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	f006 f999 	bl	801b048 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	001a      	movs	r2, r3
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	18d3      	adds	r3, r2, r3
 8014d24:	881b      	ldrh	r3, [r3, #0]
 8014d26:	b29a      	uxth	r2, r3
 8014d28:	2014      	movs	r0, #20
 8014d2a:	183b      	adds	r3, r7, r0
 8014d2c:	4911      	ldr	r1, [pc, #68]	@ (8014d74 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014d2e:	400a      	ands	r2, r1
 8014d30:	801a      	strh	r2, [r3, #0]
 8014d32:	183b      	adds	r3, r7, r0
 8014d34:	183a      	adds	r2, r7, r0
 8014d36:	8812      	ldrh	r2, [r2, #0]
 8014d38:	2110      	movs	r1, #16
 8014d3a:	404a      	eors	r2, r1
 8014d3c:	801a      	strh	r2, [r3, #0]
 8014d3e:	183b      	adds	r3, r7, r0
 8014d40:	183a      	adds	r2, r7, r0
 8014d42:	8812      	ldrh	r2, [r2, #0]
 8014d44:	2120      	movs	r1, #32
 8014d46:	404a      	eors	r2, r1
 8014d48:	801a      	strh	r2, [r3, #0]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	001a      	movs	r2, r3
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	781b      	ldrb	r3, [r3, #0]
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	18d3      	adds	r3, r2, r3
 8014d58:	183a      	adds	r2, r7, r0
 8014d5a:	8812      	ldrh	r2, [r2, #0]
 8014d5c:	4906      	ldr	r1, [pc, #24]	@ (8014d78 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014d5e:	430a      	orrs	r2, r1
 8014d60:	b292      	uxth	r2, r2
 8014d62:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014d64:	2300      	movs	r3, #0
}
 8014d66:	0018      	movs	r0, r3
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	b024      	add	sp, #144	@ 0x90
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	46c0      	nop			@ (mov r8, r8)
 8014d70:	00000406 	.word	0x00000406
 8014d74:	ffff8fbf 	.word	0xffff8fbf
 8014d78:	ffff8080 	.word	0xffff8080

08014d7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014d7c:	b590      	push	{r4, r7, lr}
 8014d7e:	b087      	sub	sp, #28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	0008      	movs	r0, r1
 8014d86:	0011      	movs	r1, r2
 8014d88:	607b      	str	r3, [r7, #4]
 8014d8a:	240a      	movs	r4, #10
 8014d8c:	193b      	adds	r3, r7, r4
 8014d8e:	1c02      	adds	r2, r0, #0
 8014d90:	801a      	strh	r2, [r3, #0]
 8014d92:	2308      	movs	r3, #8
 8014d94:	18fb      	adds	r3, r7, r3
 8014d96:	1c0a      	adds	r2, r1, #0
 8014d98:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014d9a:	0021      	movs	r1, r4
 8014d9c:	187b      	adds	r3, r7, r1
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	2280      	movs	r2, #128	@ 0x80
 8014da2:	4013      	ands	r3, r2
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d00c      	beq.n	8014dc4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014daa:	187b      	adds	r3, r7, r1
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	2207      	movs	r2, #7
 8014db0:	4013      	ands	r3, r2
 8014db2:	1c5a      	adds	r2, r3, #1
 8014db4:	0013      	movs	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	189b      	adds	r3, r3, r2
 8014dba:	00db      	lsls	r3, r3, #3
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	18d3      	adds	r3, r2, r3
 8014dc0:	617b      	str	r3, [r7, #20]
 8014dc2:	e00b      	b.n	8014ddc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014dc4:	230a      	movs	r3, #10
 8014dc6:	18fb      	adds	r3, r7, r3
 8014dc8:	881a      	ldrh	r2, [r3, #0]
 8014dca:	0013      	movs	r3, r2
 8014dcc:	009b      	lsls	r3, r3, #2
 8014dce:	189b      	adds	r3, r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	3369      	adds	r3, #105	@ 0x69
 8014dd4:	33ff      	adds	r3, #255	@ 0xff
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	18d3      	adds	r3, r2, r3
 8014dda:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014ddc:	2308      	movs	r3, #8
 8014dde:	18fb      	adds	r3, r7, r3
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d107      	bne.n	8014df6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2200      	movs	r2, #0
 8014dea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	b29a      	uxth	r2, r3
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	80da      	strh	r2, [r3, #6]
 8014df4:	e00b      	b.n	8014e0e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	2201      	movs	r2, #1
 8014dfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	b29a      	uxth	r2, r3
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	0c1b      	lsrs	r3, r3, #16
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014e0e:	2300      	movs	r3, #0
}
 8014e10:	0018      	movs	r0, r3
 8014e12:	46bd      	mov	sp, r7
 8014e14:	b007      	add	sp, #28
 8014e16:	bd90      	pop	{r4, r7, pc}

08014e18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	23ba      	movs	r3, #186	@ 0xba
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	2101      	movs	r1, #1
 8014e2e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	23b8      	movs	r3, #184	@ 0xb8
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	2100      	movs	r1, #0
 8014e38:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2254      	movs	r2, #84	@ 0x54
 8014e3e:	5a9b      	ldrh	r3, [r3, r2]
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	2201      	movs	r2, #1
 8014e44:	4313      	orrs	r3, r2
 8014e46:	b299      	uxth	r1, r3
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2254      	movs	r2, #84	@ 0x54
 8014e4c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2254      	movs	r2, #84	@ 0x54
 8014e52:	5a9b      	ldrh	r3, [r3, r2]
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	2202      	movs	r2, #2
 8014e58:	4313      	orrs	r3, r2
 8014e5a:	b299      	uxth	r1, r3
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2254      	movs	r2, #84	@ 0x54
 8014e60:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014e62:	2300      	movs	r3, #0
}
 8014e64:	0018      	movs	r0, r3
 8014e66:	46bd      	mov	sp, r7
 8014e68:	b004      	add	sp, #16
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	000a      	movs	r2, r1
 8014e76:	1cfb      	adds	r3, r7, #3
 8014e78:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014e7a:	46c0      	nop			@ (mov r8, r8)
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	b002      	add	sp, #8
 8014e80:	bd80      	pop	{r7, pc}
	...

08014e84 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014e88:	4b04      	ldr	r3, [pc, #16]	@ (8014e9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	4b03      	ldr	r3, [pc, #12]	@ (8014e9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8014e8e:	2180      	movs	r1, #128	@ 0x80
 8014e90:	0049      	lsls	r1, r1, #1
 8014e92:	430a      	orrs	r2, r1
 8014e94:	601a      	str	r2, [r3, #0]
}
 8014e96:	46c0      	nop			@ (mov r8, r8)
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	40007000 	.word	0x40007000

08014ea0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014ea4:	4b04      	ldr	r3, [pc, #16]	@ (8014eb8 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	4b03      	ldr	r3, [pc, #12]	@ (8014eb8 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014eaa:	4904      	ldr	r1, [pc, #16]	@ (8014ebc <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014eac:	400a      	ands	r2, r1
 8014eae:	601a      	str	r2, [r3, #0]
}
 8014eb0:	46c0      	nop			@ (mov r8, r8)
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	46c0      	nop			@ (mov r8, r8)
 8014eb8:	40007000 	.word	0x40007000
 8014ebc:	fffffeff 	.word	0xfffffeff

08014ec0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b086      	sub	sp, #24
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	000a      	movs	r2, r1
 8014eca:	1cfb      	adds	r3, r7, #3
 8014ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014ed2:	4b25      	ldr	r3, [pc, #148]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	2380      	movs	r3, #128	@ 0x80
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	4013      	ands	r3, r2
 8014edc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014ede:	4b23      	ldr	r3, [pc, #140]	@ (8014f6c <HAL_PWR_EnterSTOPMode+0xac>)
 8014ee0:	6a1b      	ldr	r3, [r3, #32]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	4013      	ands	r3, r2
 8014ee6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d008      	beq.n	8014f00 <HAL_PWR_EnterSTOPMode+0x40>
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d005      	beq.n	8014f00 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014efa:	491d      	ldr	r1, [pc, #116]	@ (8014f70 <HAL_PWR_EnterSTOPMode+0xb0>)
 8014efc:	400a      	ands	r2, r1
 8014efe:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014f00:	4b19      	ldr	r3, [pc, #100]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	2203      	movs	r2, #3
 8014f0a:	4393      	bics	r3, r2
 8014f0c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014f0e:	697a      	ldr	r2, [r7, #20]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4313      	orrs	r3, r2
 8014f14:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014f16:	4b14      	ldr	r3, [pc, #80]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f18:	697a      	ldr	r2, [r7, #20]
 8014f1a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f1c:	4b15      	ldr	r3, [pc, #84]	@ (8014f74 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f1e:	691a      	ldr	r2, [r3, #16]
 8014f20:	4b14      	ldr	r3, [pc, #80]	@ (8014f74 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f22:	2104      	movs	r1, #4
 8014f24:	430a      	orrs	r2, r1
 8014f26:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014f28:	1cfb      	adds	r3, r7, #3
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d101      	bne.n	8014f34 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014f30:	bf30      	wfi
 8014f32:	e002      	b.n	8014f3a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014f34:	bf40      	sev
    __WFE();
 8014f36:	bf20      	wfe
    __WFE();
 8014f38:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f3c:	691a      	ldr	r2, [r3, #16]
 8014f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8014f74 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014f40:	2104      	movs	r1, #4
 8014f42:	438a      	bics	r2, r1
 8014f44:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d009      	beq.n	8014f60 <HAL_PWR_EnterSTOPMode+0xa0>
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d006      	beq.n	8014f60 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014f52:	4b05      	ldr	r3, [pc, #20]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	4b04      	ldr	r3, [pc, #16]	@ (8014f68 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014f58:	2180      	movs	r1, #128	@ 0x80
 8014f5a:	0089      	lsls	r1, r1, #2
 8014f5c:	430a      	orrs	r2, r1
 8014f5e:	601a      	str	r2, [r3, #0]
  }
}
 8014f60:	46c0      	nop			@ (mov r8, r8)
 8014f62:	46bd      	mov	sp, r7
 8014f64:	b006      	add	sp, #24
 8014f66:	bd80      	pop	{r7, pc}
 8014f68:	40007000 	.word	0x40007000
 8014f6c:	40010000 	.word	0x40010000
 8014f70:	fffffdff 	.word	0xfffffdff
 8014f74:	e000ed00 	.word	0xe000ed00

08014f78 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014f7c:	4b07      	ldr	r3, [pc, #28]	@ (8014f9c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f7e:	681a      	ldr	r2, [r3, #0]
 8014f80:	4b06      	ldr	r3, [pc, #24]	@ (8014f9c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014f82:	2102      	movs	r1, #2
 8014f84:	430a      	orrs	r2, r1
 8014f86:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014f88:	4b05      	ldr	r3, [pc, #20]	@ (8014fa0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f8a:	691a      	ldr	r2, [r3, #16]
 8014f8c:	4b04      	ldr	r3, [pc, #16]	@ (8014fa0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014f8e:	2104      	movs	r1, #4
 8014f90:	430a      	orrs	r2, r1
 8014f92:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014f94:	bf30      	wfi
}
 8014f96:	46c0      	nop			@ (mov r8, r8)
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	40007000 	.word	0x40007000
 8014fa0:	e000ed00 	.word	0xe000ed00

08014fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014fa4:	b5b0      	push	{r4, r5, r7, lr}
 8014fa6:	b08a      	sub	sp, #40	@ 0x28
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d102      	bne.n	8014fb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	f000 fbbf 	bl	8015736 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014fb8:	4bc9      	ldr	r3, [pc, #804]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	220c      	movs	r2, #12
 8014fbe:	4013      	ands	r3, r2
 8014fc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014fc2:	4bc7      	ldr	r3, [pc, #796]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8014fc4:	68da      	ldr	r2, [r3, #12]
 8014fc6:	2380      	movs	r3, #128	@ 0x80
 8014fc8:	025b      	lsls	r3, r3, #9
 8014fca:	4013      	ands	r3, r2
 8014fcc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2201      	movs	r2, #1
 8014fd4:	4013      	ands	r3, r2
 8014fd6:	d100      	bne.n	8014fda <HAL_RCC_OscConfig+0x36>
 8014fd8:	e07e      	b.n	80150d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	2b08      	cmp	r3, #8
 8014fde:	d007      	beq.n	8014ff0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	2b0c      	cmp	r3, #12
 8014fe4:	d112      	bne.n	801500c <HAL_RCC_OscConfig+0x68>
 8014fe6:	69ba      	ldr	r2, [r7, #24]
 8014fe8:	2380      	movs	r3, #128	@ 0x80
 8014fea:	025b      	lsls	r3, r3, #9
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d10d      	bne.n	801500c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014ff0:	4bbb      	ldr	r3, [pc, #748]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	2380      	movs	r3, #128	@ 0x80
 8014ff6:	029b      	lsls	r3, r3, #10
 8014ff8:	4013      	ands	r3, r2
 8014ffa:	d100      	bne.n	8014ffe <HAL_RCC_OscConfig+0x5a>
 8014ffc:	e06b      	b.n	80150d6 <HAL_RCC_OscConfig+0x132>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d167      	bne.n	80150d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015006:	2301      	movs	r3, #1
 8015008:	f000 fb95 	bl	8015736 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	685a      	ldr	r2, [r3, #4]
 8015010:	2380      	movs	r3, #128	@ 0x80
 8015012:	025b      	lsls	r3, r3, #9
 8015014:	429a      	cmp	r2, r3
 8015016:	d107      	bne.n	8015028 <HAL_RCC_OscConfig+0x84>
 8015018:	4bb1      	ldr	r3, [pc, #708]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	4bb0      	ldr	r3, [pc, #704]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801501e:	2180      	movs	r1, #128	@ 0x80
 8015020:	0249      	lsls	r1, r1, #9
 8015022:	430a      	orrs	r2, r1
 8015024:	601a      	str	r2, [r3, #0]
 8015026:	e027      	b.n	8015078 <HAL_RCC_OscConfig+0xd4>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	685a      	ldr	r2, [r3, #4]
 801502c:	23a0      	movs	r3, #160	@ 0xa0
 801502e:	02db      	lsls	r3, r3, #11
 8015030:	429a      	cmp	r2, r3
 8015032:	d10e      	bne.n	8015052 <HAL_RCC_OscConfig+0xae>
 8015034:	4baa      	ldr	r3, [pc, #680]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	4ba9      	ldr	r3, [pc, #676]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801503a:	2180      	movs	r1, #128	@ 0x80
 801503c:	02c9      	lsls	r1, r1, #11
 801503e:	430a      	orrs	r2, r1
 8015040:	601a      	str	r2, [r3, #0]
 8015042:	4ba7      	ldr	r3, [pc, #668]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015044:	681a      	ldr	r2, [r3, #0]
 8015046:	4ba6      	ldr	r3, [pc, #664]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015048:	2180      	movs	r1, #128	@ 0x80
 801504a:	0249      	lsls	r1, r1, #9
 801504c:	430a      	orrs	r2, r1
 801504e:	601a      	str	r2, [r3, #0]
 8015050:	e012      	b.n	8015078 <HAL_RCC_OscConfig+0xd4>
 8015052:	4ba3      	ldr	r3, [pc, #652]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	4ba2      	ldr	r3, [pc, #648]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015058:	49a2      	ldr	r1, [pc, #648]	@ (80152e4 <HAL_RCC_OscConfig+0x340>)
 801505a:	400a      	ands	r2, r1
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	4ba0      	ldr	r3, [pc, #640]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	2380      	movs	r3, #128	@ 0x80
 8015064:	025b      	lsls	r3, r3, #9
 8015066:	4013      	ands	r3, r2
 8015068:	60fb      	str	r3, [r7, #12]
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	4b9c      	ldr	r3, [pc, #624]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	4b9b      	ldr	r3, [pc, #620]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015072:	499d      	ldr	r1, [pc, #628]	@ (80152e8 <HAL_RCC_OscConfig+0x344>)
 8015074:	400a      	ands	r2, r1
 8015076:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d015      	beq.n	80150ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015080:	f7f9 fe60 	bl	800ed44 <HAL_GetTick>
 8015084:	0003      	movs	r3, r0
 8015086:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015088:	e009      	b.n	801509e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801508a:	f7f9 fe5b 	bl	800ed44 <HAL_GetTick>
 801508e:	0002      	movs	r2, r0
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	2b64      	cmp	r3, #100	@ 0x64
 8015096:	d902      	bls.n	801509e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015098:	2303      	movs	r3, #3
 801509a:	f000 fb4c 	bl	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801509e:	4b90      	ldr	r3, [pc, #576]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	2380      	movs	r3, #128	@ 0x80
 80150a4:	029b      	lsls	r3, r3, #10
 80150a6:	4013      	ands	r3, r2
 80150a8:	d0ef      	beq.n	801508a <HAL_RCC_OscConfig+0xe6>
 80150aa:	e015      	b.n	80150d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80150ac:	f7f9 fe4a 	bl	800ed44 <HAL_GetTick>
 80150b0:	0003      	movs	r3, r0
 80150b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80150b4:	e008      	b.n	80150c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80150b6:	f7f9 fe45 	bl	800ed44 <HAL_GetTick>
 80150ba:	0002      	movs	r2, r0
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	2b64      	cmp	r3, #100	@ 0x64
 80150c2:	d901      	bls.n	80150c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80150c4:	2303      	movs	r3, #3
 80150c6:	e336      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80150c8:	4b85      	ldr	r3, [pc, #532]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	2380      	movs	r3, #128	@ 0x80
 80150ce:	029b      	lsls	r3, r3, #10
 80150d0:	4013      	ands	r3, r2
 80150d2:	d1f0      	bne.n	80150b6 <HAL_RCC_OscConfig+0x112>
 80150d4:	e000      	b.n	80150d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80150d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2202      	movs	r2, #2
 80150de:	4013      	ands	r3, r2
 80150e0:	d100      	bne.n	80150e4 <HAL_RCC_OscConfig+0x140>
 80150e2:	e099      	b.n	8015218 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80150ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ec:	2220      	movs	r2, #32
 80150ee:	4013      	ands	r3, r2
 80150f0:	d009      	beq.n	8015106 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80150f2:	4b7b      	ldr	r3, [pc, #492]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	4b7a      	ldr	r3, [pc, #488]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80150f8:	2120      	movs	r1, #32
 80150fa:	430a      	orrs	r2, r1
 80150fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80150fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015100:	2220      	movs	r2, #32
 8015102:	4393      	bics	r3, r2
 8015104:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	2b04      	cmp	r3, #4
 801510a:	d005      	beq.n	8015118 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801510c:	69fb      	ldr	r3, [r7, #28]
 801510e:	2b0c      	cmp	r3, #12
 8015110:	d13e      	bne.n	8015190 <HAL_RCC_OscConfig+0x1ec>
 8015112:	69bb      	ldr	r3, [r7, #24]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d13b      	bne.n	8015190 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015118:	4b71      	ldr	r3, [pc, #452]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2204      	movs	r2, #4
 801511e:	4013      	ands	r3, r2
 8015120:	d004      	beq.n	801512c <HAL_RCC_OscConfig+0x188>
 8015122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015128:	2301      	movs	r3, #1
 801512a:	e304      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801512c:	4b6c      	ldr	r3, [pc, #432]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	4a6e      	ldr	r2, [pc, #440]	@ (80152ec <HAL_RCC_OscConfig+0x348>)
 8015132:	4013      	ands	r3, r2
 8015134:	0019      	movs	r1, r3
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	691b      	ldr	r3, [r3, #16]
 801513a:	021a      	lsls	r2, r3, #8
 801513c:	4b68      	ldr	r3, [pc, #416]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801513e:	430a      	orrs	r2, r1
 8015140:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015142:	4b67      	ldr	r3, [pc, #412]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2209      	movs	r2, #9
 8015148:	4393      	bics	r3, r2
 801514a:	0019      	movs	r1, r3
 801514c:	4b64      	ldr	r3, [pc, #400]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801514e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015150:	430a      	orrs	r2, r1
 8015152:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015154:	f000 fc42 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 8015158:	0001      	movs	r1, r0
 801515a:	4b61      	ldr	r3, [pc, #388]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	091b      	lsrs	r3, r3, #4
 8015160:	220f      	movs	r2, #15
 8015162:	4013      	ands	r3, r2
 8015164:	4a62      	ldr	r2, [pc, #392]	@ (80152f0 <HAL_RCC_OscConfig+0x34c>)
 8015166:	5cd3      	ldrb	r3, [r2, r3]
 8015168:	000a      	movs	r2, r1
 801516a:	40da      	lsrs	r2, r3
 801516c:	4b61      	ldr	r3, [pc, #388]	@ (80152f4 <HAL_RCC_OscConfig+0x350>)
 801516e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015170:	4b61      	ldr	r3, [pc, #388]	@ (80152f8 <HAL_RCC_OscConfig+0x354>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2513      	movs	r5, #19
 8015176:	197c      	adds	r4, r7, r5
 8015178:	0018      	movs	r0, r3
 801517a:	f7f9 fd9d 	bl	800ecb8 <HAL_InitTick>
 801517e:	0003      	movs	r3, r0
 8015180:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015182:	197b      	adds	r3, r7, r5
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d046      	beq.n	8015218 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801518a:	197b      	adds	r3, r7, r5
 801518c:	781b      	ldrb	r3, [r3, #0]
 801518e:	e2d2      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8015190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015192:	2b00      	cmp	r3, #0
 8015194:	d027      	beq.n	80151e6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015196:	4b52      	ldr	r3, [pc, #328]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2209      	movs	r2, #9
 801519c:	4393      	bics	r3, r2
 801519e:	0019      	movs	r1, r3
 80151a0:	4b4f      	ldr	r3, [pc, #316]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151a4:	430a      	orrs	r2, r1
 80151a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151a8:	f7f9 fdcc 	bl	800ed44 <HAL_GetTick>
 80151ac:	0003      	movs	r3, r0
 80151ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80151b0:	e008      	b.n	80151c4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80151b2:	f7f9 fdc7 	bl	800ed44 <HAL_GetTick>
 80151b6:	0002      	movs	r2, r0
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	1ad3      	subs	r3, r2, r3
 80151bc:	2b02      	cmp	r3, #2
 80151be:	d901      	bls.n	80151c4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80151c0:	2303      	movs	r3, #3
 80151c2:	e2b8      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80151c4:	4b46      	ldr	r3, [pc, #280]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	2204      	movs	r2, #4
 80151ca:	4013      	ands	r3, r2
 80151cc:	d0f1      	beq.n	80151b2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80151ce:	4b44      	ldr	r3, [pc, #272]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	4a46      	ldr	r2, [pc, #280]	@ (80152ec <HAL_RCC_OscConfig+0x348>)
 80151d4:	4013      	ands	r3, r2
 80151d6:	0019      	movs	r1, r3
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	691b      	ldr	r3, [r3, #16]
 80151dc:	021a      	lsls	r2, r3, #8
 80151de:	4b40      	ldr	r3, [pc, #256]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151e0:	430a      	orrs	r2, r1
 80151e2:	605a      	str	r2, [r3, #4]
 80151e4:	e018      	b.n	8015218 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80151e6:	4b3e      	ldr	r3, [pc, #248]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	4b3d      	ldr	r3, [pc, #244]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80151ec:	2101      	movs	r1, #1
 80151ee:	438a      	bics	r2, r1
 80151f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151f2:	f7f9 fda7 	bl	800ed44 <HAL_GetTick>
 80151f6:	0003      	movs	r3, r0
 80151f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80151fa:	e008      	b.n	801520e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80151fc:	f7f9 fda2 	bl	800ed44 <HAL_GetTick>
 8015200:	0002      	movs	r2, r0
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	2b02      	cmp	r3, #2
 8015208:	d901      	bls.n	801520e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801520a:	2303      	movs	r3, #3
 801520c:	e293      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801520e:	4b34      	ldr	r3, [pc, #208]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2204      	movs	r2, #4
 8015214:	4013      	ands	r3, r2
 8015216:	d1f1      	bne.n	80151fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2210      	movs	r2, #16
 801521e:	4013      	ands	r3, r2
 8015220:	d100      	bne.n	8015224 <HAL_RCC_OscConfig+0x280>
 8015222:	e0a2      	b.n	801536a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d140      	bne.n	80152ac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801522a:	4b2d      	ldr	r3, [pc, #180]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	2380      	movs	r3, #128	@ 0x80
 8015230:	009b      	lsls	r3, r3, #2
 8015232:	4013      	ands	r3, r2
 8015234:	d005      	beq.n	8015242 <HAL_RCC_OscConfig+0x29e>
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	69db      	ldr	r3, [r3, #28]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d101      	bne.n	8015242 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801523e:	2301      	movs	r3, #1
 8015240:	e279      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015242:	4b27      	ldr	r3, [pc, #156]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	4a2d      	ldr	r2, [pc, #180]	@ (80152fc <HAL_RCC_OscConfig+0x358>)
 8015248:	4013      	ands	r3, r2
 801524a:	0019      	movs	r1, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015250:	4b23      	ldr	r3, [pc, #140]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015252:	430a      	orrs	r2, r1
 8015254:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015256:	4b22      	ldr	r3, [pc, #136]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	021b      	lsls	r3, r3, #8
 801525c:	0a19      	lsrs	r1, r3, #8
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	6a1b      	ldr	r3, [r3, #32]
 8015262:	061a      	lsls	r2, r3, #24
 8015264:	4b1e      	ldr	r3, [pc, #120]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 8015266:	430a      	orrs	r2, r1
 8015268:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801526e:	0b5b      	lsrs	r3, r3, #13
 8015270:	3301      	adds	r3, #1
 8015272:	2280      	movs	r2, #128	@ 0x80
 8015274:	0212      	lsls	r2, r2, #8
 8015276:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015278:	4b19      	ldr	r3, [pc, #100]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	091b      	lsrs	r3, r3, #4
 801527e:	210f      	movs	r1, #15
 8015280:	400b      	ands	r3, r1
 8015282:	491b      	ldr	r1, [pc, #108]	@ (80152f0 <HAL_RCC_OscConfig+0x34c>)
 8015284:	5ccb      	ldrb	r3, [r1, r3]
 8015286:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015288:	4b1a      	ldr	r3, [pc, #104]	@ (80152f4 <HAL_RCC_OscConfig+0x350>)
 801528a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801528c:	4b1a      	ldr	r3, [pc, #104]	@ (80152f8 <HAL_RCC_OscConfig+0x354>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	2513      	movs	r5, #19
 8015292:	197c      	adds	r4, r7, r5
 8015294:	0018      	movs	r0, r3
 8015296:	f7f9 fd0f 	bl	800ecb8 <HAL_InitTick>
 801529a:	0003      	movs	r3, r0
 801529c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801529e:	197b      	adds	r3, r7, r5
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d061      	beq.n	801536a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80152a6:	197b      	adds	r3, r7, r5
 80152a8:	781b      	ldrb	r3, [r3, #0]
 80152aa:	e244      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	69db      	ldr	r3, [r3, #28]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d040      	beq.n	8015336 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80152b4:	4b0a      	ldr	r3, [pc, #40]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	4b09      	ldr	r3, [pc, #36]	@ (80152e0 <HAL_RCC_OscConfig+0x33c>)
 80152ba:	2180      	movs	r1, #128	@ 0x80
 80152bc:	0049      	lsls	r1, r1, #1
 80152be:	430a      	orrs	r2, r1
 80152c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152c2:	f7f9 fd3f 	bl	800ed44 <HAL_GetTick>
 80152c6:	0003      	movs	r3, r0
 80152c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80152ca:	e019      	b.n	8015300 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80152cc:	f7f9 fd3a 	bl	800ed44 <HAL_GetTick>
 80152d0:	0002      	movs	r2, r0
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	2b02      	cmp	r3, #2
 80152d8:	d912      	bls.n	8015300 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80152da:	2303      	movs	r3, #3
 80152dc:	e22b      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
 80152de:	46c0      	nop			@ (mov r8, r8)
 80152e0:	40021000 	.word	0x40021000
 80152e4:	fffeffff 	.word	0xfffeffff
 80152e8:	fffbffff 	.word	0xfffbffff
 80152ec:	ffffe0ff 	.word	0xffffe0ff
 80152f0:	08025648 	.word	0x08025648
 80152f4:	200000d4 	.word	0x200000d4
 80152f8:	200000e4 	.word	0x200000e4
 80152fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015300:	4bca      	ldr	r3, [pc, #808]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	2380      	movs	r3, #128	@ 0x80
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4013      	ands	r3, r2
 801530a:	d0df      	beq.n	80152cc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801530c:	4bc7      	ldr	r3, [pc, #796]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	4ac7      	ldr	r2, [pc, #796]	@ (8015630 <HAL_RCC_OscConfig+0x68c>)
 8015312:	4013      	ands	r3, r2
 8015314:	0019      	movs	r1, r3
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801531a:	4bc4      	ldr	r3, [pc, #784]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801531c:	430a      	orrs	r2, r1
 801531e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015320:	4bc2      	ldr	r3, [pc, #776]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	021b      	lsls	r3, r3, #8
 8015326:	0a19      	lsrs	r1, r3, #8
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	6a1b      	ldr	r3, [r3, #32]
 801532c:	061a      	lsls	r2, r3, #24
 801532e:	4bbf      	ldr	r3, [pc, #764]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015330:	430a      	orrs	r2, r1
 8015332:	605a      	str	r2, [r3, #4]
 8015334:	e019      	b.n	801536a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015336:	4bbd      	ldr	r3, [pc, #756]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015338:	681a      	ldr	r2, [r3, #0]
 801533a:	4bbc      	ldr	r3, [pc, #752]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801533c:	49bd      	ldr	r1, [pc, #756]	@ (8015634 <HAL_RCC_OscConfig+0x690>)
 801533e:	400a      	ands	r2, r1
 8015340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015342:	f7f9 fcff 	bl	800ed44 <HAL_GetTick>
 8015346:	0003      	movs	r3, r0
 8015348:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801534a:	e008      	b.n	801535e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801534c:	f7f9 fcfa 	bl	800ed44 <HAL_GetTick>
 8015350:	0002      	movs	r2, r0
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	2b02      	cmp	r3, #2
 8015358:	d901      	bls.n	801535e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801535a:	2303      	movs	r3, #3
 801535c:	e1eb      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801535e:	4bb3      	ldr	r3, [pc, #716]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015360:	681a      	ldr	r2, [r3, #0]
 8015362:	2380      	movs	r3, #128	@ 0x80
 8015364:	009b      	lsls	r3, r3, #2
 8015366:	4013      	ands	r3, r2
 8015368:	d1f0      	bne.n	801534c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2208      	movs	r2, #8
 8015370:	4013      	ands	r3, r2
 8015372:	d036      	beq.n	80153e2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	695b      	ldr	r3, [r3, #20]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d019      	beq.n	80153b0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801537c:	4bab      	ldr	r3, [pc, #684]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801537e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015380:	4baa      	ldr	r3, [pc, #680]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015382:	2101      	movs	r1, #1
 8015384:	430a      	orrs	r2, r1
 8015386:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015388:	f7f9 fcdc 	bl	800ed44 <HAL_GetTick>
 801538c:	0003      	movs	r3, r0
 801538e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015390:	e008      	b.n	80153a4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015392:	f7f9 fcd7 	bl	800ed44 <HAL_GetTick>
 8015396:	0002      	movs	r2, r0
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	1ad3      	subs	r3, r2, r3
 801539c:	2b02      	cmp	r3, #2
 801539e:	d901      	bls.n	80153a4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80153a0:	2303      	movs	r3, #3
 80153a2:	e1c8      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80153a4:	4ba1      	ldr	r3, [pc, #644]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80153a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153a8:	2202      	movs	r2, #2
 80153aa:	4013      	ands	r3, r2
 80153ac:	d0f1      	beq.n	8015392 <HAL_RCC_OscConfig+0x3ee>
 80153ae:	e018      	b.n	80153e2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80153b0:	4b9e      	ldr	r3, [pc, #632]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80153b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153b4:	4b9d      	ldr	r3, [pc, #628]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80153b6:	2101      	movs	r1, #1
 80153b8:	438a      	bics	r2, r1
 80153ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80153bc:	f7f9 fcc2 	bl	800ed44 <HAL_GetTick>
 80153c0:	0003      	movs	r3, r0
 80153c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80153c4:	e008      	b.n	80153d8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80153c6:	f7f9 fcbd 	bl	800ed44 <HAL_GetTick>
 80153ca:	0002      	movs	r2, r0
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	2b02      	cmp	r3, #2
 80153d2:	d901      	bls.n	80153d8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80153d4:	2303      	movs	r3, #3
 80153d6:	e1ae      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80153d8:	4b94      	ldr	r3, [pc, #592]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80153da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153dc:	2202      	movs	r2, #2
 80153de:	4013      	ands	r3, r2
 80153e0:	d1f1      	bne.n	80153c6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	2204      	movs	r2, #4
 80153e8:	4013      	ands	r3, r2
 80153ea:	d100      	bne.n	80153ee <HAL_RCC_OscConfig+0x44a>
 80153ec:	e0ae      	b.n	801554c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80153ee:	2023      	movs	r0, #35	@ 0x23
 80153f0:	183b      	adds	r3, r7, r0
 80153f2:	2200      	movs	r2, #0
 80153f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80153f6:	4b8d      	ldr	r3, [pc, #564]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80153f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153fa:	2380      	movs	r3, #128	@ 0x80
 80153fc:	055b      	lsls	r3, r3, #21
 80153fe:	4013      	ands	r3, r2
 8015400:	d109      	bne.n	8015416 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015402:	4b8a      	ldr	r3, [pc, #552]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015406:	4b89      	ldr	r3, [pc, #548]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015408:	2180      	movs	r1, #128	@ 0x80
 801540a:	0549      	lsls	r1, r1, #21
 801540c:	430a      	orrs	r2, r1
 801540e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015410:	183b      	adds	r3, r7, r0
 8015412:	2201      	movs	r2, #1
 8015414:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015416:	4b88      	ldr	r3, [pc, #544]	@ (8015638 <HAL_RCC_OscConfig+0x694>)
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	2380      	movs	r3, #128	@ 0x80
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	4013      	ands	r3, r2
 8015420:	d11a      	bne.n	8015458 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015422:	4b85      	ldr	r3, [pc, #532]	@ (8015638 <HAL_RCC_OscConfig+0x694>)
 8015424:	681a      	ldr	r2, [r3, #0]
 8015426:	4b84      	ldr	r3, [pc, #528]	@ (8015638 <HAL_RCC_OscConfig+0x694>)
 8015428:	2180      	movs	r1, #128	@ 0x80
 801542a:	0049      	lsls	r1, r1, #1
 801542c:	430a      	orrs	r2, r1
 801542e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015430:	f7f9 fc88 	bl	800ed44 <HAL_GetTick>
 8015434:	0003      	movs	r3, r0
 8015436:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015438:	e008      	b.n	801544c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801543a:	f7f9 fc83 	bl	800ed44 <HAL_GetTick>
 801543e:	0002      	movs	r2, r0
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	1ad3      	subs	r3, r2, r3
 8015444:	2b64      	cmp	r3, #100	@ 0x64
 8015446:	d901      	bls.n	801544c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015448:	2303      	movs	r3, #3
 801544a:	e174      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801544c:	4b7a      	ldr	r3, [pc, #488]	@ (8015638 <HAL_RCC_OscConfig+0x694>)
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	2380      	movs	r3, #128	@ 0x80
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4013      	ands	r3, r2
 8015456:	d0f0      	beq.n	801543a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	689a      	ldr	r2, [r3, #8]
 801545c:	2380      	movs	r3, #128	@ 0x80
 801545e:	005b      	lsls	r3, r3, #1
 8015460:	429a      	cmp	r2, r3
 8015462:	d107      	bne.n	8015474 <HAL_RCC_OscConfig+0x4d0>
 8015464:	4b71      	ldr	r3, [pc, #452]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015468:	4b70      	ldr	r3, [pc, #448]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801546a:	2180      	movs	r1, #128	@ 0x80
 801546c:	0049      	lsls	r1, r1, #1
 801546e:	430a      	orrs	r2, r1
 8015470:	651a      	str	r2, [r3, #80]	@ 0x50
 8015472:	e031      	b.n	80154d8 <HAL_RCC_OscConfig+0x534>
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	689b      	ldr	r3, [r3, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10c      	bne.n	8015496 <HAL_RCC_OscConfig+0x4f2>
 801547c:	4b6b      	ldr	r3, [pc, #428]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801547e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015480:	4b6a      	ldr	r3, [pc, #424]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015482:	496c      	ldr	r1, [pc, #432]	@ (8015634 <HAL_RCC_OscConfig+0x690>)
 8015484:	400a      	ands	r2, r1
 8015486:	651a      	str	r2, [r3, #80]	@ 0x50
 8015488:	4b68      	ldr	r3, [pc, #416]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801548a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801548c:	4b67      	ldr	r3, [pc, #412]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801548e:	496b      	ldr	r1, [pc, #428]	@ (801563c <HAL_RCC_OscConfig+0x698>)
 8015490:	400a      	ands	r2, r1
 8015492:	651a      	str	r2, [r3, #80]	@ 0x50
 8015494:	e020      	b.n	80154d8 <HAL_RCC_OscConfig+0x534>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	689a      	ldr	r2, [r3, #8]
 801549a:	23a0      	movs	r3, #160	@ 0xa0
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	429a      	cmp	r2, r3
 80154a0:	d10e      	bne.n	80154c0 <HAL_RCC_OscConfig+0x51c>
 80154a2:	4b62      	ldr	r3, [pc, #392]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154a6:	4b61      	ldr	r3, [pc, #388]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154a8:	2180      	movs	r1, #128	@ 0x80
 80154aa:	00c9      	lsls	r1, r1, #3
 80154ac:	430a      	orrs	r2, r1
 80154ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80154b0:	4b5e      	ldr	r3, [pc, #376]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154b4:	4b5d      	ldr	r3, [pc, #372]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154b6:	2180      	movs	r1, #128	@ 0x80
 80154b8:	0049      	lsls	r1, r1, #1
 80154ba:	430a      	orrs	r2, r1
 80154bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80154be:	e00b      	b.n	80154d8 <HAL_RCC_OscConfig+0x534>
 80154c0:	4b5a      	ldr	r3, [pc, #360]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154c4:	4b59      	ldr	r3, [pc, #356]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154c6:	495b      	ldr	r1, [pc, #364]	@ (8015634 <HAL_RCC_OscConfig+0x690>)
 80154c8:	400a      	ands	r2, r1
 80154ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80154cc:	4b57      	ldr	r3, [pc, #348]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154d0:	4b56      	ldr	r3, [pc, #344]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80154d2:	495a      	ldr	r1, [pc, #360]	@ (801563c <HAL_RCC_OscConfig+0x698>)
 80154d4:	400a      	ands	r2, r1
 80154d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	689b      	ldr	r3, [r3, #8]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d015      	beq.n	801550c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80154e0:	f7f9 fc30 	bl	800ed44 <HAL_GetTick>
 80154e4:	0003      	movs	r3, r0
 80154e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80154e8:	e009      	b.n	80154fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80154ea:	f7f9 fc2b 	bl	800ed44 <HAL_GetTick>
 80154ee:	0002      	movs	r2, r0
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	1ad3      	subs	r3, r2, r3
 80154f4:	4a52      	ldr	r2, [pc, #328]	@ (8015640 <HAL_RCC_OscConfig+0x69c>)
 80154f6:	4293      	cmp	r3, r2
 80154f8:	d901      	bls.n	80154fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80154fa:	2303      	movs	r3, #3
 80154fc:	e11b      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80154fe:	4b4b      	ldr	r3, [pc, #300]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015502:	2380      	movs	r3, #128	@ 0x80
 8015504:	009b      	lsls	r3, r3, #2
 8015506:	4013      	ands	r3, r2
 8015508:	d0ef      	beq.n	80154ea <HAL_RCC_OscConfig+0x546>
 801550a:	e014      	b.n	8015536 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801550c:	f7f9 fc1a 	bl	800ed44 <HAL_GetTick>
 8015510:	0003      	movs	r3, r0
 8015512:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015514:	e009      	b.n	801552a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015516:	f7f9 fc15 	bl	800ed44 <HAL_GetTick>
 801551a:	0002      	movs	r2, r0
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	1ad3      	subs	r3, r2, r3
 8015520:	4a47      	ldr	r2, [pc, #284]	@ (8015640 <HAL_RCC_OscConfig+0x69c>)
 8015522:	4293      	cmp	r3, r2
 8015524:	d901      	bls.n	801552a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015526:	2303      	movs	r3, #3
 8015528:	e105      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801552a:	4b40      	ldr	r3, [pc, #256]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801552c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801552e:	2380      	movs	r3, #128	@ 0x80
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	4013      	ands	r3, r2
 8015534:	d1ef      	bne.n	8015516 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015536:	2323      	movs	r3, #35	@ 0x23
 8015538:	18fb      	adds	r3, r7, r3
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	2b01      	cmp	r3, #1
 801553e:	d105      	bne.n	801554c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015540:	4b3a      	ldr	r3, [pc, #232]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015544:	4b39      	ldr	r3, [pc, #228]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015546:	493f      	ldr	r1, [pc, #252]	@ (8015644 <HAL_RCC_OscConfig+0x6a0>)
 8015548:	400a      	ands	r2, r1
 801554a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2220      	movs	r2, #32
 8015552:	4013      	ands	r3, r2
 8015554:	d049      	beq.n	80155ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	699b      	ldr	r3, [r3, #24]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d026      	beq.n	80155ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801555e:	4b33      	ldr	r3, [pc, #204]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015560:	689a      	ldr	r2, [r3, #8]
 8015562:	4b32      	ldr	r3, [pc, #200]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015564:	2101      	movs	r1, #1
 8015566:	430a      	orrs	r2, r1
 8015568:	609a      	str	r2, [r3, #8]
 801556a:	4b30      	ldr	r3, [pc, #192]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801556c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801556e:	4b2f      	ldr	r3, [pc, #188]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015570:	2101      	movs	r1, #1
 8015572:	430a      	orrs	r2, r1
 8015574:	635a      	str	r2, [r3, #52]	@ 0x34
 8015576:	4b34      	ldr	r3, [pc, #208]	@ (8015648 <HAL_RCC_OscConfig+0x6a4>)
 8015578:	6a1a      	ldr	r2, [r3, #32]
 801557a:	4b33      	ldr	r3, [pc, #204]	@ (8015648 <HAL_RCC_OscConfig+0x6a4>)
 801557c:	2180      	movs	r1, #128	@ 0x80
 801557e:	0189      	lsls	r1, r1, #6
 8015580:	430a      	orrs	r2, r1
 8015582:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015584:	f7f9 fbde 	bl	800ed44 <HAL_GetTick>
 8015588:	0003      	movs	r3, r0
 801558a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801558c:	e008      	b.n	80155a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801558e:	f7f9 fbd9 	bl	800ed44 <HAL_GetTick>
 8015592:	0002      	movs	r2, r0
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	2b02      	cmp	r3, #2
 801559a:	d901      	bls.n	80155a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801559c:	2303      	movs	r3, #3
 801559e:	e0ca      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80155a0:	4b22      	ldr	r3, [pc, #136]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	2202      	movs	r2, #2
 80155a6:	4013      	ands	r3, r2
 80155a8:	d0f1      	beq.n	801558e <HAL_RCC_OscConfig+0x5ea>
 80155aa:	e01e      	b.n	80155ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80155ac:	4b1f      	ldr	r3, [pc, #124]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80155ae:	689a      	ldr	r2, [r3, #8]
 80155b0:	4b1e      	ldr	r3, [pc, #120]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80155b2:	2101      	movs	r1, #1
 80155b4:	438a      	bics	r2, r1
 80155b6:	609a      	str	r2, [r3, #8]
 80155b8:	4b23      	ldr	r3, [pc, #140]	@ (8015648 <HAL_RCC_OscConfig+0x6a4>)
 80155ba:	6a1a      	ldr	r2, [r3, #32]
 80155bc:	4b22      	ldr	r3, [pc, #136]	@ (8015648 <HAL_RCC_OscConfig+0x6a4>)
 80155be:	4923      	ldr	r1, [pc, #140]	@ (801564c <HAL_RCC_OscConfig+0x6a8>)
 80155c0:	400a      	ands	r2, r1
 80155c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155c4:	f7f9 fbbe 	bl	800ed44 <HAL_GetTick>
 80155c8:	0003      	movs	r3, r0
 80155ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80155cc:	e008      	b.n	80155e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80155ce:	f7f9 fbb9 	bl	800ed44 <HAL_GetTick>
 80155d2:	0002      	movs	r2, r0
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	1ad3      	subs	r3, r2, r3
 80155d8:	2b02      	cmp	r3, #2
 80155da:	d901      	bls.n	80155e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80155dc:	2303      	movs	r3, #3
 80155de:	e0aa      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80155e0:	4b12      	ldr	r3, [pc, #72]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 80155e2:	689b      	ldr	r3, [r3, #8]
 80155e4:	2202      	movs	r2, #2
 80155e6:	4013      	ands	r3, r2
 80155e8:	d1f1      	bne.n	80155ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d100      	bne.n	80155f4 <HAL_RCC_OscConfig+0x650>
 80155f2:	e09f      	b.n	8015734 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	2b0c      	cmp	r3, #12
 80155f8:	d100      	bne.n	80155fc <HAL_RCC_OscConfig+0x658>
 80155fa:	e078      	b.n	80156ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015600:	2b02      	cmp	r3, #2
 8015602:	d159      	bne.n	80156b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015604:	4b09      	ldr	r3, [pc, #36]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 8015606:	681a      	ldr	r2, [r3, #0]
 8015608:	4b08      	ldr	r3, [pc, #32]	@ (801562c <HAL_RCC_OscConfig+0x688>)
 801560a:	4911      	ldr	r1, [pc, #68]	@ (8015650 <HAL_RCC_OscConfig+0x6ac>)
 801560c:	400a      	ands	r2, r1
 801560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015610:	f7f9 fb98 	bl	800ed44 <HAL_GetTick>
 8015614:	0003      	movs	r3, r0
 8015616:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015618:	e01c      	b.n	8015654 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801561a:	f7f9 fb93 	bl	800ed44 <HAL_GetTick>
 801561e:	0002      	movs	r2, r0
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	1ad3      	subs	r3, r2, r3
 8015624:	2b02      	cmp	r3, #2
 8015626:	d915      	bls.n	8015654 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015628:	2303      	movs	r3, #3
 801562a:	e084      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
 801562c:	40021000 	.word	0x40021000
 8015630:	ffff1fff 	.word	0xffff1fff
 8015634:	fffffeff 	.word	0xfffffeff
 8015638:	40007000 	.word	0x40007000
 801563c:	fffffbff 	.word	0xfffffbff
 8015640:	00001388 	.word	0x00001388
 8015644:	efffffff 	.word	0xefffffff
 8015648:	40010000 	.word	0x40010000
 801564c:	ffffdfff 	.word	0xffffdfff
 8015650:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015654:	4b3a      	ldr	r3, [pc, #232]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	2380      	movs	r3, #128	@ 0x80
 801565a:	049b      	lsls	r3, r3, #18
 801565c:	4013      	ands	r3, r2
 801565e:	d1dc      	bne.n	801561a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015660:	4b37      	ldr	r3, [pc, #220]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	4a37      	ldr	r2, [pc, #220]	@ (8015744 <HAL_RCC_OscConfig+0x7a0>)
 8015666:	4013      	ands	r3, r2
 8015668:	0019      	movs	r1, r3
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015672:	431a      	orrs	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015678:	431a      	orrs	r2, r3
 801567a:	4b31      	ldr	r3, [pc, #196]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 801567c:	430a      	orrs	r2, r1
 801567e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015680:	4b2f      	ldr	r3, [pc, #188]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	4b2e      	ldr	r3, [pc, #184]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 8015686:	2180      	movs	r1, #128	@ 0x80
 8015688:	0449      	lsls	r1, r1, #17
 801568a:	430a      	orrs	r2, r1
 801568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801568e:	f7f9 fb59 	bl	800ed44 <HAL_GetTick>
 8015692:	0003      	movs	r3, r0
 8015694:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015696:	e008      	b.n	80156aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015698:	f7f9 fb54 	bl	800ed44 <HAL_GetTick>
 801569c:	0002      	movs	r2, r0
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	1ad3      	subs	r3, r2, r3
 80156a2:	2b02      	cmp	r3, #2
 80156a4:	d901      	bls.n	80156aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80156a6:	2303      	movs	r3, #3
 80156a8:	e045      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80156aa:	4b25      	ldr	r3, [pc, #148]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	2380      	movs	r3, #128	@ 0x80
 80156b0:	049b      	lsls	r3, r3, #18
 80156b2:	4013      	ands	r3, r2
 80156b4:	d0f0      	beq.n	8015698 <HAL_RCC_OscConfig+0x6f4>
 80156b6:	e03d      	b.n	8015734 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80156b8:	4b21      	ldr	r3, [pc, #132]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	4b20      	ldr	r3, [pc, #128]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 80156be:	4922      	ldr	r1, [pc, #136]	@ (8015748 <HAL_RCC_OscConfig+0x7a4>)
 80156c0:	400a      	ands	r2, r1
 80156c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156c4:	f7f9 fb3e 	bl	800ed44 <HAL_GetTick>
 80156c8:	0003      	movs	r3, r0
 80156ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80156cc:	e008      	b.n	80156e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80156ce:	f7f9 fb39 	bl	800ed44 <HAL_GetTick>
 80156d2:	0002      	movs	r2, r0
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	2b02      	cmp	r3, #2
 80156da:	d901      	bls.n	80156e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80156dc:	2303      	movs	r3, #3
 80156de:	e02a      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80156e0:	4b17      	ldr	r3, [pc, #92]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	2380      	movs	r3, #128	@ 0x80
 80156e6:	049b      	lsls	r3, r3, #18
 80156e8:	4013      	ands	r3, r2
 80156ea:	d1f0      	bne.n	80156ce <HAL_RCC_OscConfig+0x72a>
 80156ec:	e022      	b.n	8015734 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d101      	bne.n	80156fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80156f6:	2301      	movs	r3, #1
 80156f8:	e01d      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80156fa:	4b11      	ldr	r3, [pc, #68]	@ (8015740 <HAL_RCC_OscConfig+0x79c>)
 80156fc:	68db      	ldr	r3, [r3, #12]
 80156fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015700:	69ba      	ldr	r2, [r7, #24]
 8015702:	2380      	movs	r3, #128	@ 0x80
 8015704:	025b      	lsls	r3, r3, #9
 8015706:	401a      	ands	r2, r3
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801570c:	429a      	cmp	r2, r3
 801570e:	d10f      	bne.n	8015730 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015710:	69ba      	ldr	r2, [r7, #24]
 8015712:	23f0      	movs	r3, #240	@ 0xf0
 8015714:	039b      	lsls	r3, r3, #14
 8015716:	401a      	ands	r2, r3
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801571c:	429a      	cmp	r2, r3
 801571e:	d107      	bne.n	8015730 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015720:	69ba      	ldr	r2, [r7, #24]
 8015722:	23c0      	movs	r3, #192	@ 0xc0
 8015724:	041b      	lsls	r3, r3, #16
 8015726:	401a      	ands	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801572c:	429a      	cmp	r2, r3
 801572e:	d001      	beq.n	8015734 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015730:	2301      	movs	r3, #1
 8015732:	e000      	b.n	8015736 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015734:	2300      	movs	r3, #0
}
 8015736:	0018      	movs	r0, r3
 8015738:	46bd      	mov	sp, r7
 801573a:	b00a      	add	sp, #40	@ 0x28
 801573c:	bdb0      	pop	{r4, r5, r7, pc}
 801573e:	46c0      	nop			@ (mov r8, r8)
 8015740:	40021000 	.word	0x40021000
 8015744:	ff02ffff 	.word	0xff02ffff
 8015748:	feffffff 	.word	0xfeffffff

0801574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801574c:	b5b0      	push	{r4, r5, r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d101      	bne.n	8015760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801575c:	2301      	movs	r3, #1
 801575e:	e128      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015760:	4b96      	ldr	r3, [pc, #600]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	2201      	movs	r2, #1
 8015766:	4013      	ands	r3, r2
 8015768:	683a      	ldr	r2, [r7, #0]
 801576a:	429a      	cmp	r2, r3
 801576c:	d91e      	bls.n	80157ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801576e:	4b93      	ldr	r3, [pc, #588]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2201      	movs	r2, #1
 8015774:	4393      	bics	r3, r2
 8015776:	0019      	movs	r1, r3
 8015778:	4b90      	ldr	r3, [pc, #576]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 801577a:	683a      	ldr	r2, [r7, #0]
 801577c:	430a      	orrs	r2, r1
 801577e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015780:	f7f9 fae0 	bl	800ed44 <HAL_GetTick>
 8015784:	0003      	movs	r3, r0
 8015786:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015788:	e009      	b.n	801579e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801578a:	f7f9 fadb 	bl	800ed44 <HAL_GetTick>
 801578e:	0002      	movs	r2, r0
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	4a8a      	ldr	r2, [pc, #552]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 8015796:	4293      	cmp	r3, r2
 8015798:	d901      	bls.n	801579e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801579a:	2303      	movs	r3, #3
 801579c:	e109      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801579e:	4b87      	ldr	r3, [pc, #540]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2201      	movs	r2, #1
 80157a4:	4013      	ands	r3, r2
 80157a6:	683a      	ldr	r2, [r7, #0]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d1ee      	bne.n	801578a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	2202      	movs	r2, #2
 80157b2:	4013      	ands	r3, r2
 80157b4:	d009      	beq.n	80157ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80157b6:	4b83      	ldr	r3, [pc, #524]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80157b8:	68db      	ldr	r3, [r3, #12]
 80157ba:	22f0      	movs	r2, #240	@ 0xf0
 80157bc:	4393      	bics	r3, r2
 80157be:	0019      	movs	r1, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	689a      	ldr	r2, [r3, #8]
 80157c4:	4b7f      	ldr	r3, [pc, #508]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80157c6:	430a      	orrs	r2, r1
 80157c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2201      	movs	r2, #1
 80157d0:	4013      	ands	r3, r2
 80157d2:	d100      	bne.n	80157d6 <HAL_RCC_ClockConfig+0x8a>
 80157d4:	e089      	b.n	80158ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	2b02      	cmp	r3, #2
 80157dc:	d107      	bne.n	80157ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80157de:	4b79      	ldr	r3, [pc, #484]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	2380      	movs	r3, #128	@ 0x80
 80157e4:	029b      	lsls	r3, r3, #10
 80157e6:	4013      	ands	r3, r2
 80157e8:	d120      	bne.n	801582c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80157ea:	2301      	movs	r3, #1
 80157ec:	e0e1      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	2b03      	cmp	r3, #3
 80157f4:	d107      	bne.n	8015806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80157f6:	4b73      	ldr	r3, [pc, #460]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	2380      	movs	r3, #128	@ 0x80
 80157fc:	049b      	lsls	r3, r3, #18
 80157fe:	4013      	ands	r3, r2
 8015800:	d114      	bne.n	801582c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015802:	2301      	movs	r3, #1
 8015804:	e0d5      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	2b01      	cmp	r3, #1
 801580c:	d106      	bne.n	801581c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801580e:	4b6d      	ldr	r3, [pc, #436]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	2204      	movs	r2, #4
 8015814:	4013      	ands	r3, r2
 8015816:	d109      	bne.n	801582c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015818:	2301      	movs	r3, #1
 801581a:	e0ca      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801581c:	4b69      	ldr	r3, [pc, #420]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	2380      	movs	r3, #128	@ 0x80
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	4013      	ands	r3, r2
 8015826:	d101      	bne.n	801582c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015828:	2301      	movs	r3, #1
 801582a:	e0c2      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801582c:	4b65      	ldr	r3, [pc, #404]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 801582e:	68db      	ldr	r3, [r3, #12]
 8015830:	2203      	movs	r2, #3
 8015832:	4393      	bics	r3, r2
 8015834:	0019      	movs	r1, r3
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	685a      	ldr	r2, [r3, #4]
 801583a:	4b62      	ldr	r3, [pc, #392]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 801583c:	430a      	orrs	r2, r1
 801583e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015840:	f7f9 fa80 	bl	800ed44 <HAL_GetTick>
 8015844:	0003      	movs	r3, r0
 8015846:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	2b02      	cmp	r3, #2
 801584e:	d111      	bne.n	8015874 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015850:	e009      	b.n	8015866 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015852:	f7f9 fa77 	bl	800ed44 <HAL_GetTick>
 8015856:	0002      	movs	r2, r0
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	1ad3      	subs	r3, r2, r3
 801585c:	4a58      	ldr	r2, [pc, #352]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 801585e:	4293      	cmp	r3, r2
 8015860:	d901      	bls.n	8015866 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015862:	2303      	movs	r3, #3
 8015864:	e0a5      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015866:	4b57      	ldr	r3, [pc, #348]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	220c      	movs	r2, #12
 801586c:	4013      	ands	r3, r2
 801586e:	2b08      	cmp	r3, #8
 8015870:	d1ef      	bne.n	8015852 <HAL_RCC_ClockConfig+0x106>
 8015872:	e03a      	b.n	80158ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	2b03      	cmp	r3, #3
 801587a:	d111      	bne.n	80158a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801587c:	e009      	b.n	8015892 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801587e:	f7f9 fa61 	bl	800ed44 <HAL_GetTick>
 8015882:	0002      	movs	r2, r0
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	1ad3      	subs	r3, r2, r3
 8015888:	4a4d      	ldr	r2, [pc, #308]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d901      	bls.n	8015892 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801588e:	2303      	movs	r3, #3
 8015890:	e08f      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015892:	4b4c      	ldr	r3, [pc, #304]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	220c      	movs	r2, #12
 8015898:	4013      	ands	r3, r2
 801589a:	2b0c      	cmp	r3, #12
 801589c:	d1ef      	bne.n	801587e <HAL_RCC_ClockConfig+0x132>
 801589e:	e024      	b.n	80158ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	2b01      	cmp	r3, #1
 80158a6:	d11b      	bne.n	80158e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80158a8:	e009      	b.n	80158be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158aa:	f7f9 fa4b 	bl	800ed44 <HAL_GetTick>
 80158ae:	0002      	movs	r2, r0
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	4a42      	ldr	r2, [pc, #264]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 80158b6:	4293      	cmp	r3, r2
 80158b8:	d901      	bls.n	80158be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80158ba:	2303      	movs	r3, #3
 80158bc:	e079      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80158be:	4b41      	ldr	r3, [pc, #260]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	220c      	movs	r2, #12
 80158c4:	4013      	ands	r3, r2
 80158c6:	2b04      	cmp	r3, #4
 80158c8:	d1ef      	bne.n	80158aa <HAL_RCC_ClockConfig+0x15e>
 80158ca:	e00e      	b.n	80158ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80158cc:	f7f9 fa3a 	bl	800ed44 <HAL_GetTick>
 80158d0:	0002      	movs	r2, r0
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	1ad3      	subs	r3, r2, r3
 80158d6:	4a3a      	ldr	r2, [pc, #232]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 80158d8:	4293      	cmp	r3, r2
 80158da:	d901      	bls.n	80158e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80158dc:	2303      	movs	r3, #3
 80158de:	e068      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80158e0:	4b38      	ldr	r3, [pc, #224]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 80158e2:	68db      	ldr	r3, [r3, #12]
 80158e4:	220c      	movs	r2, #12
 80158e6:	4013      	ands	r3, r2
 80158e8:	d1f0      	bne.n	80158cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80158ea:	4b34      	ldr	r3, [pc, #208]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	2201      	movs	r2, #1
 80158f0:	4013      	ands	r3, r2
 80158f2:	683a      	ldr	r2, [r7, #0]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d21e      	bcs.n	8015936 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80158f8:	4b30      	ldr	r3, [pc, #192]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	2201      	movs	r2, #1
 80158fe:	4393      	bics	r3, r2
 8015900:	0019      	movs	r1, r3
 8015902:	4b2e      	ldr	r3, [pc, #184]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 8015904:	683a      	ldr	r2, [r7, #0]
 8015906:	430a      	orrs	r2, r1
 8015908:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801590a:	f7f9 fa1b 	bl	800ed44 <HAL_GetTick>
 801590e:	0003      	movs	r3, r0
 8015910:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015912:	e009      	b.n	8015928 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015914:	f7f9 fa16 	bl	800ed44 <HAL_GetTick>
 8015918:	0002      	movs	r2, r0
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	1ad3      	subs	r3, r2, r3
 801591e:	4a28      	ldr	r2, [pc, #160]	@ (80159c0 <HAL_RCC_ClockConfig+0x274>)
 8015920:	4293      	cmp	r3, r2
 8015922:	d901      	bls.n	8015928 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015924:	2303      	movs	r3, #3
 8015926:	e044      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015928:	4b24      	ldr	r3, [pc, #144]	@ (80159bc <HAL_RCC_ClockConfig+0x270>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2201      	movs	r2, #1
 801592e:	4013      	ands	r3, r2
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d1ee      	bne.n	8015914 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	2204      	movs	r2, #4
 801593c:	4013      	ands	r3, r2
 801593e:	d009      	beq.n	8015954 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015940:	4b20      	ldr	r3, [pc, #128]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015942:	68db      	ldr	r3, [r3, #12]
 8015944:	4a20      	ldr	r2, [pc, #128]	@ (80159c8 <HAL_RCC_ClockConfig+0x27c>)
 8015946:	4013      	ands	r3, r2
 8015948:	0019      	movs	r1, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	68da      	ldr	r2, [r3, #12]
 801594e:	4b1d      	ldr	r3, [pc, #116]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015950:	430a      	orrs	r2, r1
 8015952:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2208      	movs	r2, #8
 801595a:	4013      	ands	r3, r2
 801595c:	d00a      	beq.n	8015974 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801595e:	4b19      	ldr	r3, [pc, #100]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015960:	68db      	ldr	r3, [r3, #12]
 8015962:	4a1a      	ldr	r2, [pc, #104]	@ (80159cc <HAL_RCC_ClockConfig+0x280>)
 8015964:	4013      	ands	r3, r2
 8015966:	0019      	movs	r1, r3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	691b      	ldr	r3, [r3, #16]
 801596c:	00da      	lsls	r2, r3, #3
 801596e:	4b15      	ldr	r3, [pc, #84]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 8015970:	430a      	orrs	r2, r1
 8015972:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015974:	f000 f832 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 8015978:	0001      	movs	r1, r0
 801597a:	4b12      	ldr	r3, [pc, #72]	@ (80159c4 <HAL_RCC_ClockConfig+0x278>)
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	091b      	lsrs	r3, r3, #4
 8015980:	220f      	movs	r2, #15
 8015982:	4013      	ands	r3, r2
 8015984:	4a12      	ldr	r2, [pc, #72]	@ (80159d0 <HAL_RCC_ClockConfig+0x284>)
 8015986:	5cd3      	ldrb	r3, [r2, r3]
 8015988:	000a      	movs	r2, r1
 801598a:	40da      	lsrs	r2, r3
 801598c:	4b11      	ldr	r3, [pc, #68]	@ (80159d4 <HAL_RCC_ClockConfig+0x288>)
 801598e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015990:	4b11      	ldr	r3, [pc, #68]	@ (80159d8 <HAL_RCC_ClockConfig+0x28c>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	250b      	movs	r5, #11
 8015996:	197c      	adds	r4, r7, r5
 8015998:	0018      	movs	r0, r3
 801599a:	f7f9 f98d 	bl	800ecb8 <HAL_InitTick>
 801599e:	0003      	movs	r3, r0
 80159a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80159a2:	197b      	adds	r3, r7, r5
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d002      	beq.n	80159b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80159aa:	197b      	adds	r3, r7, r5
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	e000      	b.n	80159b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80159b0:	2300      	movs	r3, #0
}
 80159b2:	0018      	movs	r0, r3
 80159b4:	46bd      	mov	sp, r7
 80159b6:	b004      	add	sp, #16
 80159b8:	bdb0      	pop	{r4, r5, r7, pc}
 80159ba:	46c0      	nop			@ (mov r8, r8)
 80159bc:	40022000 	.word	0x40022000
 80159c0:	00001388 	.word	0x00001388
 80159c4:	40021000 	.word	0x40021000
 80159c8:	fffff8ff 	.word	0xfffff8ff
 80159cc:	ffffc7ff 	.word	0xffffc7ff
 80159d0:	08025648 	.word	0x08025648
 80159d4:	200000d4 	.word	0x200000d4
 80159d8:	200000e4 	.word	0x200000e4

080159dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80159dc:	b5b0      	push	{r4, r5, r7, lr}
 80159de:	b08e      	sub	sp, #56	@ 0x38
 80159e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80159e2:	4b4c      	ldr	r3, [pc, #304]	@ (8015b14 <HAL_RCC_GetSysClockFreq+0x138>)
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80159e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159ea:	230c      	movs	r3, #12
 80159ec:	4013      	ands	r3, r2
 80159ee:	2b0c      	cmp	r3, #12
 80159f0:	d014      	beq.n	8015a1c <HAL_RCC_GetSysClockFreq+0x40>
 80159f2:	d900      	bls.n	80159f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80159f4:	e07b      	b.n	8015aee <HAL_RCC_GetSysClockFreq+0x112>
 80159f6:	2b04      	cmp	r3, #4
 80159f8:	d002      	beq.n	8015a00 <HAL_RCC_GetSysClockFreq+0x24>
 80159fa:	2b08      	cmp	r3, #8
 80159fc:	d00b      	beq.n	8015a16 <HAL_RCC_GetSysClockFreq+0x3a>
 80159fe:	e076      	b.n	8015aee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015a00:	4b44      	ldr	r3, [pc, #272]	@ (8015b14 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2210      	movs	r2, #16
 8015a06:	4013      	ands	r3, r2
 8015a08:	d002      	beq.n	8015a10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015a0a:	4b43      	ldr	r3, [pc, #268]	@ (8015b18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015a0c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015a0e:	e07c      	b.n	8015b0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015a10:	4b42      	ldr	r3, [pc, #264]	@ (8015b1c <HAL_RCC_GetSysClockFreq+0x140>)
 8015a12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a14:	e079      	b.n	8015b0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015a16:	4b42      	ldr	r3, [pc, #264]	@ (8015b20 <HAL_RCC_GetSysClockFreq+0x144>)
 8015a18:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a1a:	e076      	b.n	8015b0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1e:	0c9a      	lsrs	r2, r3, #18
 8015a20:	230f      	movs	r3, #15
 8015a22:	401a      	ands	r2, r3
 8015a24:	4b3f      	ldr	r3, [pc, #252]	@ (8015b24 <HAL_RCC_GetSysClockFreq+0x148>)
 8015a26:	5c9b      	ldrb	r3, [r3, r2]
 8015a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2c:	0d9a      	lsrs	r2, r3, #22
 8015a2e:	2303      	movs	r3, #3
 8015a30:	4013      	ands	r3, r2
 8015a32:	3301      	adds	r3, #1
 8015a34:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015a36:	4b37      	ldr	r3, [pc, #220]	@ (8015b14 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a38:	68da      	ldr	r2, [r3, #12]
 8015a3a:	2380      	movs	r3, #128	@ 0x80
 8015a3c:	025b      	lsls	r3, r3, #9
 8015a3e:	4013      	ands	r3, r2
 8015a40:	d01a      	beq.n	8015a78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a44:	61bb      	str	r3, [r7, #24]
 8015a46:	2300      	movs	r3, #0
 8015a48:	61fb      	str	r3, [r7, #28]
 8015a4a:	4a35      	ldr	r2, [pc, #212]	@ (8015b20 <HAL_RCC_GetSysClockFreq+0x144>)
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	69b8      	ldr	r0, [r7, #24]
 8015a50:	69f9      	ldr	r1, [r7, #28]
 8015a52:	f7ea fdb5 	bl	80005c0 <__aeabi_lmul>
 8015a56:	0002      	movs	r2, r0
 8015a58:	000b      	movs	r3, r1
 8015a5a:	0010      	movs	r0, r2
 8015a5c:	0019      	movs	r1, r3
 8015a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a60:	613b      	str	r3, [r7, #16]
 8015a62:	2300      	movs	r3, #0
 8015a64:	617b      	str	r3, [r7, #20]
 8015a66:	693a      	ldr	r2, [r7, #16]
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	f7ea fd89 	bl	8000580 <__aeabi_uldivmod>
 8015a6e:	0002      	movs	r2, r0
 8015a70:	000b      	movs	r3, r1
 8015a72:	0013      	movs	r3, r2
 8015a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a76:	e037      	b.n	8015ae8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015a78:	4b26      	ldr	r3, [pc, #152]	@ (8015b14 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	2210      	movs	r2, #16
 8015a7e:	4013      	ands	r3, r2
 8015a80:	d01a      	beq.n	8015ab8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a84:	60bb      	str	r3, [r7, #8]
 8015a86:	2300      	movs	r3, #0
 8015a88:	60fb      	str	r3, [r7, #12]
 8015a8a:	4a23      	ldr	r2, [pc, #140]	@ (8015b18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	68b8      	ldr	r0, [r7, #8]
 8015a90:	68f9      	ldr	r1, [r7, #12]
 8015a92:	f7ea fd95 	bl	80005c0 <__aeabi_lmul>
 8015a96:	0002      	movs	r2, r0
 8015a98:	000b      	movs	r3, r1
 8015a9a:	0010      	movs	r0, r2
 8015a9c:	0019      	movs	r1, r3
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa0:	603b      	str	r3, [r7, #0]
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	607b      	str	r3, [r7, #4]
 8015aa6:	683a      	ldr	r2, [r7, #0]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f7ea fd69 	bl	8000580 <__aeabi_uldivmod>
 8015aae:	0002      	movs	r2, r0
 8015ab0:	000b      	movs	r3, r1
 8015ab2:	0013      	movs	r3, r2
 8015ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ab6:	e017      	b.n	8015ae8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aba:	0018      	movs	r0, r3
 8015abc:	2300      	movs	r3, #0
 8015abe:	0019      	movs	r1, r3
 8015ac0:	4a16      	ldr	r2, [pc, #88]	@ (8015b1c <HAL_RCC_GetSysClockFreq+0x140>)
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	f7ea fd7c 	bl	80005c0 <__aeabi_lmul>
 8015ac8:	0002      	movs	r2, r0
 8015aca:	000b      	movs	r3, r1
 8015acc:	0010      	movs	r0, r2
 8015ace:	0019      	movs	r1, r3
 8015ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad2:	001c      	movs	r4, r3
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	001d      	movs	r5, r3
 8015ad8:	0022      	movs	r2, r4
 8015ada:	002b      	movs	r3, r5
 8015adc:	f7ea fd50 	bl	8000580 <__aeabi_uldivmod>
 8015ae0:	0002      	movs	r2, r0
 8015ae2:	000b      	movs	r3, r1
 8015ae4:	0013      	movs	r3, r2
 8015ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015aea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015aec:	e00d      	b.n	8015b0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015aee:	4b09      	ldr	r3, [pc, #36]	@ (8015b14 <HAL_RCC_GetSysClockFreq+0x138>)
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	0b5b      	lsrs	r3, r3, #13
 8015af4:	2207      	movs	r2, #7
 8015af6:	4013      	ands	r3, r2
 8015af8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015afa:	6a3b      	ldr	r3, [r7, #32]
 8015afc:	3301      	adds	r3, #1
 8015afe:	2280      	movs	r2, #128	@ 0x80
 8015b00:	0212      	lsls	r2, r2, #8
 8015b02:	409a      	lsls	r2, r3
 8015b04:	0013      	movs	r3, r2
 8015b06:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015b08:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015b0c:	0018      	movs	r0, r3
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	b00e      	add	sp, #56	@ 0x38
 8015b12:	bdb0      	pop	{r4, r5, r7, pc}
 8015b14:	40021000 	.word	0x40021000
 8015b18:	003d0900 	.word	0x003d0900
 8015b1c:	00f42400 	.word	0x00f42400
 8015b20:	007a1200 	.word	0x007a1200
 8015b24:	08025660 	.word	0x08025660

08015b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015b2c:	4b02      	ldr	r3, [pc, #8]	@ (8015b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
}
 8015b30:	0018      	movs	r0, r3
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	46c0      	nop			@ (mov r8, r8)
 8015b38:	200000d4 	.word	0x200000d4

08015b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015b40:	f7ff fff2 	bl	8015b28 <HAL_RCC_GetHCLKFreq>
 8015b44:	0001      	movs	r1, r0
 8015b46:	4b06      	ldr	r3, [pc, #24]	@ (8015b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	0a1b      	lsrs	r3, r3, #8
 8015b4c:	2207      	movs	r2, #7
 8015b4e:	4013      	ands	r3, r2
 8015b50:	4a04      	ldr	r2, [pc, #16]	@ (8015b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015b52:	5cd3      	ldrb	r3, [r2, r3]
 8015b54:	40d9      	lsrs	r1, r3
 8015b56:	000b      	movs	r3, r1
}
 8015b58:	0018      	movs	r0, r3
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}
 8015b5e:	46c0      	nop			@ (mov r8, r8)
 8015b60:	40021000 	.word	0x40021000
 8015b64:	08025658 	.word	0x08025658

08015b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015b6c:	f7ff ffdc 	bl	8015b28 <HAL_RCC_GetHCLKFreq>
 8015b70:	0001      	movs	r1, r0
 8015b72:	4b06      	ldr	r3, [pc, #24]	@ (8015b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015b74:	68db      	ldr	r3, [r3, #12]
 8015b76:	0adb      	lsrs	r3, r3, #11
 8015b78:	2207      	movs	r2, #7
 8015b7a:	4013      	ands	r3, r2
 8015b7c:	4a04      	ldr	r2, [pc, #16]	@ (8015b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015b7e:	5cd3      	ldrb	r3, [r2, r3]
 8015b80:	40d9      	lsrs	r1, r3
 8015b82:	000b      	movs	r3, r1
}
 8015b84:	0018      	movs	r0, r3
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	46c0      	nop			@ (mov r8, r8)
 8015b8c:	40021000 	.word	0x40021000
 8015b90:	08025658 	.word	0x08025658

08015b94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b086      	sub	sp, #24
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015b9c:	2017      	movs	r0, #23
 8015b9e:	183b      	adds	r3, r7, r0
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2220      	movs	r2, #32
 8015baa:	4013      	ands	r3, r2
 8015bac:	d100      	bne.n	8015bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015bae:	e0c7      	b.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015bb0:	4b9b      	ldr	r3, [pc, #620]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bb4:	2380      	movs	r3, #128	@ 0x80
 8015bb6:	055b      	lsls	r3, r3, #21
 8015bb8:	4013      	ands	r3, r2
 8015bba:	d109      	bne.n	8015bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015bbc:	4b98      	ldr	r3, [pc, #608]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bc0:	4b97      	ldr	r3, [pc, #604]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bc2:	2180      	movs	r1, #128	@ 0x80
 8015bc4:	0549      	lsls	r1, r1, #21
 8015bc6:	430a      	orrs	r2, r1
 8015bc8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015bca:	183b      	adds	r3, r7, r0
 8015bcc:	2201      	movs	r2, #1
 8015bce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015bd0:	4b94      	ldr	r3, [pc, #592]	@ (8015e24 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	2380      	movs	r3, #128	@ 0x80
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4013      	ands	r3, r2
 8015bda:	d11a      	bne.n	8015c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015bdc:	4b91      	ldr	r3, [pc, #580]	@ (8015e24 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	4b90      	ldr	r3, [pc, #576]	@ (8015e24 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015be2:	2180      	movs	r1, #128	@ 0x80
 8015be4:	0049      	lsls	r1, r1, #1
 8015be6:	430a      	orrs	r2, r1
 8015be8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015bea:	f7f9 f8ab 	bl	800ed44 <HAL_GetTick>
 8015bee:	0003      	movs	r3, r0
 8015bf0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015bf2:	e008      	b.n	8015c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015bf4:	f7f9 f8a6 	bl	800ed44 <HAL_GetTick>
 8015bf8:	0002      	movs	r2, r0
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	2b64      	cmp	r3, #100	@ 0x64
 8015c00:	d901      	bls.n	8015c06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015c02:	2303      	movs	r3, #3
 8015c04:	e107      	b.n	8015e16 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015c06:	4b87      	ldr	r3, [pc, #540]	@ (8015e24 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015c08:	681a      	ldr	r2, [r3, #0]
 8015c0a:	2380      	movs	r3, #128	@ 0x80
 8015c0c:	005b      	lsls	r3, r3, #1
 8015c0e:	4013      	ands	r3, r2
 8015c10:	d0f0      	beq.n	8015bf4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015c12:	4b83      	ldr	r3, [pc, #524]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c14:	681a      	ldr	r2, [r3, #0]
 8015c16:	23c0      	movs	r3, #192	@ 0xc0
 8015c18:	039b      	lsls	r3, r3, #14
 8015c1a:	4013      	ands	r3, r2
 8015c1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	685a      	ldr	r2, [r3, #4]
 8015c22:	23c0      	movs	r3, #192	@ 0xc0
 8015c24:	039b      	lsls	r3, r3, #14
 8015c26:	4013      	ands	r3, r2
 8015c28:	68fa      	ldr	r2, [r7, #12]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d013      	beq.n	8015c56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	685a      	ldr	r2, [r3, #4]
 8015c32:	23c0      	movs	r3, #192	@ 0xc0
 8015c34:	029b      	lsls	r3, r3, #10
 8015c36:	401a      	ands	r2, r3
 8015c38:	23c0      	movs	r3, #192	@ 0xc0
 8015c3a:	029b      	lsls	r3, r3, #10
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d10a      	bne.n	8015c56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015c40:	4b77      	ldr	r3, [pc, #476]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	2380      	movs	r3, #128	@ 0x80
 8015c46:	029b      	lsls	r3, r3, #10
 8015c48:	401a      	ands	r2, r3
 8015c4a:	2380      	movs	r3, #128	@ 0x80
 8015c4c:	029b      	lsls	r3, r3, #10
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d101      	bne.n	8015c56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015c52:	2301      	movs	r3, #1
 8015c54:	e0df      	b.n	8015e16 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015c56:	4b72      	ldr	r3, [pc, #456]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c5a:	23c0      	movs	r3, #192	@ 0xc0
 8015c5c:	029b      	lsls	r3, r3, #10
 8015c5e:	4013      	ands	r3, r2
 8015c60:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d03b      	beq.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	685a      	ldr	r2, [r3, #4]
 8015c6c:	23c0      	movs	r3, #192	@ 0xc0
 8015c6e:	029b      	lsls	r3, r3, #10
 8015c70:	4013      	ands	r3, r2
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d033      	beq.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2220      	movs	r2, #32
 8015c7e:	4013      	ands	r3, r2
 8015c80:	d02e      	beq.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015c82:	4b67      	ldr	r3, [pc, #412]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c86:	4a68      	ldr	r2, [pc, #416]	@ (8015e28 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015c88:	4013      	ands	r3, r2
 8015c8a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015c8c:	4b64      	ldr	r3, [pc, #400]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c90:	4b63      	ldr	r3, [pc, #396]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c92:	2180      	movs	r1, #128	@ 0x80
 8015c94:	0309      	lsls	r1, r1, #12
 8015c96:	430a      	orrs	r2, r1
 8015c98:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015c9a:	4b61      	ldr	r3, [pc, #388]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c9e:	4b60      	ldr	r3, [pc, #384]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ca0:	4962      	ldr	r1, [pc, #392]	@ (8015e2c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015ca2:	400a      	ands	r2, r1
 8015ca4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ca8:	68fa      	ldr	r2, [r7, #12]
 8015caa:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015cac:	68fa      	ldr	r2, [r7, #12]
 8015cae:	2380      	movs	r3, #128	@ 0x80
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	4013      	ands	r3, r2
 8015cb4:	d014      	beq.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cb6:	f7f9 f845 	bl	800ed44 <HAL_GetTick>
 8015cba:	0003      	movs	r3, r0
 8015cbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015cbe:	e009      	b.n	8015cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015cc0:	f7f9 f840 	bl	800ed44 <HAL_GetTick>
 8015cc4:	0002      	movs	r2, r0
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	4a59      	ldr	r2, [pc, #356]	@ (8015e30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015ccc:	4293      	cmp	r3, r2
 8015cce:	d901      	bls.n	8015cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015cd0:	2303      	movs	r3, #3
 8015cd2:	e0a0      	b.n	8015e16 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015cd4:	4b52      	ldr	r3, [pc, #328]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015cd8:	2380      	movs	r3, #128	@ 0x80
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	4013      	ands	r3, r2
 8015cde:	d0ef      	beq.n	8015cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2220      	movs	r2, #32
 8015ce6:	4013      	ands	r3, r2
 8015ce8:	d01f      	beq.n	8015d2a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	685a      	ldr	r2, [r3, #4]
 8015cee:	23c0      	movs	r3, #192	@ 0xc0
 8015cf0:	029b      	lsls	r3, r3, #10
 8015cf2:	401a      	ands	r2, r3
 8015cf4:	23c0      	movs	r3, #192	@ 0xc0
 8015cf6:	029b      	lsls	r3, r3, #10
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d10c      	bne.n	8015d16 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015cfc:	4b48      	ldr	r3, [pc, #288]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4a4c      	ldr	r2, [pc, #304]	@ (8015e34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015d02:	4013      	ands	r3, r2
 8015d04:	0019      	movs	r1, r3
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	685a      	ldr	r2, [r3, #4]
 8015d0a:	23c0      	movs	r3, #192	@ 0xc0
 8015d0c:	039b      	lsls	r3, r3, #14
 8015d0e:	401a      	ands	r2, r3
 8015d10:	4b43      	ldr	r3, [pc, #268]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d12:	430a      	orrs	r2, r1
 8015d14:	601a      	str	r2, [r3, #0]
 8015d16:	4b42      	ldr	r3, [pc, #264]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	685a      	ldr	r2, [r3, #4]
 8015d1e:	23c0      	movs	r3, #192	@ 0xc0
 8015d20:	029b      	lsls	r3, r3, #10
 8015d22:	401a      	ands	r2, r3
 8015d24:	4b3e      	ldr	r3, [pc, #248]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d26:	430a      	orrs	r2, r1
 8015d28:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015d2a:	2317      	movs	r3, #23
 8015d2c:	18fb      	adds	r3, r7, r3
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d105      	bne.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015d34:	4b3a      	ldr	r3, [pc, #232]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d38:	4b39      	ldr	r3, [pc, #228]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d3a:	493f      	ldr	r1, [pc, #252]	@ (8015e38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015d3c:	400a      	ands	r2, r1
 8015d3e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2201      	movs	r2, #1
 8015d46:	4013      	ands	r3, r2
 8015d48:	d009      	beq.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015d4a:	4b35      	ldr	r3, [pc, #212]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d4e:	2203      	movs	r2, #3
 8015d50:	4393      	bics	r3, r2
 8015d52:	0019      	movs	r1, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	689a      	ldr	r2, [r3, #8]
 8015d58:	4b31      	ldr	r3, [pc, #196]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d5a:	430a      	orrs	r2, r1
 8015d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2202      	movs	r2, #2
 8015d64:	4013      	ands	r3, r2
 8015d66:	d009      	beq.n	8015d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015d68:	4b2d      	ldr	r3, [pc, #180]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d6c:	220c      	movs	r2, #12
 8015d6e:	4393      	bics	r3, r2
 8015d70:	0019      	movs	r1, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	68da      	ldr	r2, [r3, #12]
 8015d76:	4b2a      	ldr	r3, [pc, #168]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d78:	430a      	orrs	r2, r1
 8015d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	2204      	movs	r2, #4
 8015d82:	4013      	ands	r3, r2
 8015d84:	d009      	beq.n	8015d9a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015d86:	4b26      	ldr	r3, [pc, #152]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8015e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	0019      	movs	r1, r3
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	691a      	ldr	r2, [r3, #16]
 8015d94:	4b22      	ldr	r3, [pc, #136]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d96:	430a      	orrs	r2, r1
 8015d98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2208      	movs	r2, #8
 8015da0:	4013      	ands	r3, r2
 8015da2:	d009      	beq.n	8015db8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015da4:	4b1e      	ldr	r3, [pc, #120]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015da8:	4a25      	ldr	r2, [pc, #148]	@ (8015e40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015daa:	4013      	ands	r3, r2
 8015dac:	0019      	movs	r1, r3
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	695a      	ldr	r2, [r3, #20]
 8015db2:	4b1b      	ldr	r3, [pc, #108]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015db4:	430a      	orrs	r2, r1
 8015db6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	2380      	movs	r3, #128	@ 0x80
 8015dbe:	005b      	lsls	r3, r3, #1
 8015dc0:	4013      	ands	r3, r2
 8015dc2:	d009      	beq.n	8015dd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015dc4:	4b16      	ldr	r3, [pc, #88]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015dc8:	4a17      	ldr	r2, [pc, #92]	@ (8015e28 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015dca:	4013      	ands	r3, r2
 8015dcc:	0019      	movs	r1, r3
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	699a      	ldr	r2, [r3, #24]
 8015dd2:	4b13      	ldr	r3, [pc, #76]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015dd4:	430a      	orrs	r2, r1
 8015dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	2240      	movs	r2, #64	@ 0x40
 8015dde:	4013      	ands	r3, r2
 8015de0:	d009      	beq.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015de2:	4b0f      	ldr	r3, [pc, #60]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015de6:	4a17      	ldr	r2, [pc, #92]	@ (8015e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015de8:	4013      	ands	r3, r2
 8015dea:	0019      	movs	r1, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6a1a      	ldr	r2, [r3, #32]
 8015df0:	4b0b      	ldr	r3, [pc, #44]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015df2:	430a      	orrs	r2, r1
 8015df4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2280      	movs	r2, #128	@ 0x80
 8015dfc:	4013      	ands	r3, r2
 8015dfe:	d009      	beq.n	8015e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015e00:	4b07      	ldr	r3, [pc, #28]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e04:	4a10      	ldr	r2, [pc, #64]	@ (8015e48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015e06:	4013      	ands	r3, r2
 8015e08:	0019      	movs	r1, r3
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	69da      	ldr	r2, [r3, #28]
 8015e0e:	4b04      	ldr	r3, [pc, #16]	@ (8015e20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015e10:	430a      	orrs	r2, r1
 8015e12:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	0018      	movs	r0, r3
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	b006      	add	sp, #24
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	46c0      	nop			@ (mov r8, r8)
 8015e20:	40021000 	.word	0x40021000
 8015e24:	40007000 	.word	0x40007000
 8015e28:	fffcffff 	.word	0xfffcffff
 8015e2c:	fff7ffff 	.word	0xfff7ffff
 8015e30:	00001388 	.word	0x00001388
 8015e34:	ffcfffff 	.word	0xffcfffff
 8015e38:	efffffff 	.word	0xefffffff
 8015e3c:	fffff3ff 	.word	0xfffff3ff
 8015e40:	ffffcfff 	.word	0xffffcfff
 8015e44:	fbffffff 	.word	0xfbffffff
 8015e48:	fff3ffff 	.word	0xfff3ffff

08015e4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015e4c:	b5b0      	push	{r4, r5, r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015e54:	230f      	movs	r3, #15
 8015e56:	18fb      	adds	r3, r7, r3
 8015e58:	2201      	movs	r2, #1
 8015e5a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d101      	bne.n	8015e66 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015e62:	2301      	movs	r3, #1
 8015e64:	e088      	b.n	8015f78 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2221      	movs	r2, #33	@ 0x21
 8015e6a:	5c9b      	ldrb	r3, [r3, r2]
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d107      	bne.n	8015e82 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2220      	movs	r2, #32
 8015e76:	2100      	movs	r1, #0
 8015e78:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	0018      	movs	r0, r3
 8015e7e:	f7f3 f8bf 	bl	8009000 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2221      	movs	r2, #33	@ 0x21
 8015e86:	2102      	movs	r1, #2
 8015e88:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	2210      	movs	r2, #16
 8015e92:	4013      	ands	r3, r2
 8015e94:	2b10      	cmp	r3, #16
 8015e96:	d05f      	beq.n	8015f58 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	22ca      	movs	r2, #202	@ 0xca
 8015e9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2253      	movs	r2, #83	@ 0x53
 8015ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015ea8:	250f      	movs	r5, #15
 8015eaa:	197c      	adds	r4, r7, r5
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	0018      	movs	r0, r3
 8015eb0:	f000 fa7c 	bl	80163ac <RTC_EnterInitMode>
 8015eb4:	0003      	movs	r3, r0
 8015eb6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015eb8:	0028      	movs	r0, r5
 8015eba:	183b      	adds	r3, r7, r0
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d12c      	bne.n	8015f1c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	689a      	ldr	r2, [r3, #8]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	492c      	ldr	r1, [pc, #176]	@ (8015f80 <HAL_RTC_Init+0x134>)
 8015ece:	400a      	ands	r2, r1
 8015ed0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6899      	ldr	r1, [r3, #8]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	685a      	ldr	r2, [r3, #4]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	691b      	ldr	r3, [r3, #16]
 8015ee0:	431a      	orrs	r2, r3
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	699b      	ldr	r3, [r3, #24]
 8015ee6:	431a      	orrs	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	430a      	orrs	r2, r1
 8015eee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	687a      	ldr	r2, [r7, #4]
 8015ef6:	68d2      	ldr	r2, [r2, #12]
 8015ef8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	6919      	ldr	r1, [r3, #16]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	689b      	ldr	r3, [r3, #8]
 8015f04:	041a      	lsls	r2, r3, #16
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	430a      	orrs	r2, r1
 8015f0c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015f0e:	183c      	adds	r4, r7, r0
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	0018      	movs	r0, r3
 8015f14:	f000 fa8e 	bl	8016434 <RTC_ExitInitMode>
 8015f18:	0003      	movs	r3, r0
 8015f1a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015f1c:	230f      	movs	r3, #15
 8015f1e:	18fb      	adds	r3, r7, r3
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d113      	bne.n	8015f4e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	2103      	movs	r1, #3
 8015f32:	438a      	bics	r2, r1
 8015f34:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	69da      	ldr	r2, [r3, #28]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	695b      	ldr	r3, [r3, #20]
 8015f44:	431a      	orrs	r2, r3
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	430a      	orrs	r2, r1
 8015f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	22ff      	movs	r2, #255	@ 0xff
 8015f54:	625a      	str	r2, [r3, #36]	@ 0x24
 8015f56:	e003      	b.n	8015f60 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015f58:	230f      	movs	r3, #15
 8015f5a:	18fb      	adds	r3, r7, r3
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015f60:	230f      	movs	r3, #15
 8015f62:	18fb      	adds	r3, r7, r3
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d103      	bne.n	8015f72 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2221      	movs	r2, #33	@ 0x21
 8015f6e:	2101      	movs	r1, #1
 8015f70:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015f72:	230f      	movs	r3, #15
 8015f74:	18fb      	adds	r3, r7, r3
 8015f76:	781b      	ldrb	r3, [r3, #0]
}
 8015f78:	0018      	movs	r0, r3
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	b004      	add	sp, #16
 8015f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8015f80:	ff8fffbf 	.word	0xff8fffbf

08015f84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015f84:	b5b0      	push	{r4, r5, r7, lr}
 8015f86:	b086      	sub	sp, #24
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015f90:	2300      	movs	r3, #0
 8015f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2220      	movs	r2, #32
 8015f98:	5c9b      	ldrb	r3, [r3, r2]
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	d101      	bne.n	8015fa2 <HAL_RTC_SetTime+0x1e>
 8015f9e:	2302      	movs	r3, #2
 8015fa0:	e092      	b.n	80160c8 <HAL_RTC_SetTime+0x144>
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	2220      	movs	r2, #32
 8015fa6:	2101      	movs	r1, #1
 8015fa8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	2221      	movs	r2, #33	@ 0x21
 8015fae:	2102      	movs	r1, #2
 8015fb0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d125      	bne.n	8016004 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	689b      	ldr	r3, [r3, #8]
 8015fbe:	2240      	movs	r2, #64	@ 0x40
 8015fc0:	4013      	ands	r3, r2
 8015fc2:	d102      	bne.n	8015fca <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	0018      	movs	r0, r3
 8015fd0:	f000 fa5a 	bl	8016488 <RTC_ByteToBcd2>
 8015fd4:	0003      	movs	r3, r0
 8015fd6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	785b      	ldrb	r3, [r3, #1]
 8015fdc:	0018      	movs	r0, r3
 8015fde:	f000 fa53 	bl	8016488 <RTC_ByteToBcd2>
 8015fe2:	0003      	movs	r3, r0
 8015fe4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015fe6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	789b      	ldrb	r3, [r3, #2]
 8015fec:	0018      	movs	r0, r3
 8015fee:	f000 fa4b 	bl	8016488 <RTC_ByteToBcd2>
 8015ff2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015ff4:	0022      	movs	r2, r4
 8015ff6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	78db      	ldrb	r3, [r3, #3]
 8015ffc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015ffe:	4313      	orrs	r3, r2
 8016000:	617b      	str	r3, [r7, #20]
 8016002:	e017      	b.n	8016034 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	689b      	ldr	r3, [r3, #8]
 801600a:	2240      	movs	r2, #64	@ 0x40
 801600c:	4013      	ands	r3, r2
 801600e:	d102      	bne.n	8016016 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	2200      	movs	r2, #0
 8016014:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	785b      	ldrb	r3, [r3, #1]
 8016020:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016022:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016024:	68ba      	ldr	r2, [r7, #8]
 8016026:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016028:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	78db      	ldrb	r3, [r3, #3]
 801602e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016030:	4313      	orrs	r3, r2
 8016032:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	22ca      	movs	r2, #202	@ 0xca
 801603a:	625a      	str	r2, [r3, #36]	@ 0x24
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	2253      	movs	r2, #83	@ 0x53
 8016042:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016044:	2513      	movs	r5, #19
 8016046:	197c      	adds	r4, r7, r5
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	0018      	movs	r0, r3
 801604c:	f000 f9ae 	bl	80163ac <RTC_EnterInitMode>
 8016050:	0003      	movs	r3, r0
 8016052:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016054:	0028      	movs	r0, r5
 8016056:	183b      	adds	r3, r7, r0
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d120      	bne.n	80160a0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	697a      	ldr	r2, [r7, #20]
 8016064:	491a      	ldr	r1, [pc, #104]	@ (80160d0 <HAL_RTC_SetTime+0x14c>)
 8016066:	400a      	ands	r2, r1
 8016068:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	689a      	ldr	r2, [r3, #8]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4917      	ldr	r1, [pc, #92]	@ (80160d4 <HAL_RTC_SetTime+0x150>)
 8016076:	400a      	ands	r2, r1
 8016078:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	6899      	ldr	r1, [r3, #8]
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	68da      	ldr	r2, [r3, #12]
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	691b      	ldr	r3, [r3, #16]
 8016088:	431a      	orrs	r2, r3
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	430a      	orrs	r2, r1
 8016090:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016092:	183c      	adds	r4, r7, r0
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	0018      	movs	r0, r3
 8016098:	f000 f9cc 	bl	8016434 <RTC_ExitInitMode>
 801609c:	0003      	movs	r3, r0
 801609e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80160a0:	2313      	movs	r3, #19
 80160a2:	18fb      	adds	r3, r7, r3
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d103      	bne.n	80160b2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2221      	movs	r2, #33	@ 0x21
 80160ae:	2101      	movs	r1, #1
 80160b0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	22ff      	movs	r2, #255	@ 0xff
 80160b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2220      	movs	r2, #32
 80160be:	2100      	movs	r1, #0
 80160c0:	5499      	strb	r1, [r3, r2]

  return status;
 80160c2:	2313      	movs	r3, #19
 80160c4:	18fb      	adds	r3, r7, r3
 80160c6:	781b      	ldrb	r3, [r3, #0]
}
 80160c8:	0018      	movs	r0, r3
 80160ca:	46bd      	mov	sp, r7
 80160cc:	b006      	add	sp, #24
 80160ce:	bdb0      	pop	{r4, r5, r7, pc}
 80160d0:	007f7f7f 	.word	0x007f7f7f
 80160d4:	fffbffff 	.word	0xfffbffff

080160d8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b086      	sub	sp, #24
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80160e4:	2300      	movs	r3, #0
 80160e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	691b      	ldr	r3, [r3, #16]
 80160f8:	045b      	lsls	r3, r3, #17
 80160fa:	0c5a      	lsrs	r2, r3, #17
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	4a22      	ldr	r2, [pc, #136]	@ (8016190 <HAL_RTC_GetTime+0xb8>)
 8016108:	4013      	ands	r3, r2
 801610a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	0c1b      	lsrs	r3, r3, #16
 8016110:	b2db      	uxtb	r3, r3
 8016112:	223f      	movs	r2, #63	@ 0x3f
 8016114:	4013      	ands	r3, r2
 8016116:	b2da      	uxtb	r2, r3
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	0a1b      	lsrs	r3, r3, #8
 8016120:	b2db      	uxtb	r3, r3
 8016122:	227f      	movs	r2, #127	@ 0x7f
 8016124:	4013      	ands	r3, r2
 8016126:	b2da      	uxtb	r2, r3
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	b2db      	uxtb	r3, r3
 8016130:	227f      	movs	r2, #127	@ 0x7f
 8016132:	4013      	ands	r3, r2
 8016134:	b2da      	uxtb	r2, r3
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	0d9b      	lsrs	r3, r3, #22
 801613e:	b2db      	uxtb	r3, r3
 8016140:	2201      	movs	r2, #1
 8016142:	4013      	ands	r3, r2
 8016144:	b2da      	uxtb	r2, r3
 8016146:	68bb      	ldr	r3, [r7, #8]
 8016148:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d11a      	bne.n	8016186 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	0018      	movs	r0, r3
 8016156:	f000 f9b8 	bl	80164ca <RTC_Bcd2ToByte>
 801615a:	0003      	movs	r3, r0
 801615c:	001a      	movs	r2, r3
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	785b      	ldrb	r3, [r3, #1]
 8016166:	0018      	movs	r0, r3
 8016168:	f000 f9af 	bl	80164ca <RTC_Bcd2ToByte>
 801616c:	0003      	movs	r3, r0
 801616e:	001a      	movs	r2, r3
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	789b      	ldrb	r3, [r3, #2]
 8016178:	0018      	movs	r0, r3
 801617a:	f000 f9a6 	bl	80164ca <RTC_Bcd2ToByte>
 801617e:	0003      	movs	r3, r0
 8016180:	001a      	movs	r2, r3
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016186:	2300      	movs	r3, #0
}
 8016188:	0018      	movs	r0, r3
 801618a:	46bd      	mov	sp, r7
 801618c:	b006      	add	sp, #24
 801618e:	bd80      	pop	{r7, pc}
 8016190:	007f7f7f 	.word	0x007f7f7f

08016194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016194:	b5b0      	push	{r4, r5, r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80161a0:	2300      	movs	r3, #0
 80161a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2220      	movs	r2, #32
 80161a8:	5c9b      	ldrb	r3, [r3, r2]
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d101      	bne.n	80161b2 <HAL_RTC_SetDate+0x1e>
 80161ae:	2302      	movs	r3, #2
 80161b0:	e07e      	b.n	80162b0 <HAL_RTC_SetDate+0x11c>
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2220      	movs	r2, #32
 80161b6:	2101      	movs	r1, #1
 80161b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2221      	movs	r2, #33	@ 0x21
 80161be:	2102      	movs	r1, #2
 80161c0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d10e      	bne.n	80161e6 <HAL_RTC_SetDate+0x52>
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	785b      	ldrb	r3, [r3, #1]
 80161cc:	001a      	movs	r2, r3
 80161ce:	2310      	movs	r3, #16
 80161d0:	4013      	ands	r3, r2
 80161d2:	d008      	beq.n	80161e6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	785b      	ldrb	r3, [r3, #1]
 80161d8:	2210      	movs	r2, #16
 80161da:	4393      	bics	r3, r2
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	330a      	adds	r3, #10
 80161e0:	b2da      	uxtb	r2, r3
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d11c      	bne.n	8016226 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	78db      	ldrb	r3, [r3, #3]
 80161f0:	0018      	movs	r0, r3
 80161f2:	f000 f949 	bl	8016488 <RTC_ByteToBcd2>
 80161f6:	0003      	movs	r3, r0
 80161f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	785b      	ldrb	r3, [r3, #1]
 80161fe:	0018      	movs	r0, r3
 8016200:	f000 f942 	bl	8016488 <RTC_ByteToBcd2>
 8016204:	0003      	movs	r3, r0
 8016206:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016208:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	789b      	ldrb	r3, [r3, #2]
 801620e:	0018      	movs	r0, r3
 8016210:	f000 f93a 	bl	8016488 <RTC_ByteToBcd2>
 8016214:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016216:	0022      	movs	r2, r4
 8016218:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016220:	4313      	orrs	r3, r2
 8016222:	617b      	str	r3, [r7, #20]
 8016224:	e00e      	b.n	8016244 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	78db      	ldrb	r3, [r3, #3]
 801622a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	785b      	ldrb	r3, [r3, #1]
 8016230:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016232:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016234:	68ba      	ldr	r2, [r7, #8]
 8016236:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016238:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	781b      	ldrb	r3, [r3, #0]
 801623e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016240:	4313      	orrs	r3, r2
 8016242:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	22ca      	movs	r2, #202	@ 0xca
 801624a:	625a      	str	r2, [r3, #36]	@ 0x24
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2253      	movs	r2, #83	@ 0x53
 8016252:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016254:	2513      	movs	r5, #19
 8016256:	197c      	adds	r4, r7, r5
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	0018      	movs	r0, r3
 801625c:	f000 f8a6 	bl	80163ac <RTC_EnterInitMode>
 8016260:	0003      	movs	r3, r0
 8016262:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016264:	0028      	movs	r0, r5
 8016266:	183b      	adds	r3, r7, r0
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d10c      	bne.n	8016288 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	697a      	ldr	r2, [r7, #20]
 8016274:	4910      	ldr	r1, [pc, #64]	@ (80162b8 <HAL_RTC_SetDate+0x124>)
 8016276:	400a      	ands	r2, r1
 8016278:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801627a:	183c      	adds	r4, r7, r0
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	0018      	movs	r0, r3
 8016280:	f000 f8d8 	bl	8016434 <RTC_ExitInitMode>
 8016284:	0003      	movs	r3, r0
 8016286:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016288:	2313      	movs	r3, #19
 801628a:	18fb      	adds	r3, r7, r3
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d103      	bne.n	801629a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	2221      	movs	r2, #33	@ 0x21
 8016296:	2101      	movs	r1, #1
 8016298:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	22ff      	movs	r2, #255	@ 0xff
 80162a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2220      	movs	r2, #32
 80162a6:	2100      	movs	r1, #0
 80162a8:	5499      	strb	r1, [r3, r2]

  return status;
 80162aa:	2313      	movs	r3, #19
 80162ac:	18fb      	adds	r3, r7, r3
 80162ae:	781b      	ldrb	r3, [r3, #0]
}
 80162b0:	0018      	movs	r0, r3
 80162b2:	46bd      	mov	sp, r7
 80162b4:	b006      	add	sp, #24
 80162b6:	bdb0      	pop	{r4, r5, r7, pc}
 80162b8:	00ffff3f 	.word	0x00ffff3f

080162bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b086      	sub	sp, #24
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80162c8:	2300      	movs	r3, #0
 80162ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	4a21      	ldr	r2, [pc, #132]	@ (8016358 <HAL_RTC_GetDate+0x9c>)
 80162d4:	4013      	ands	r3, r2
 80162d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	0c1b      	lsrs	r3, r3, #16
 80162dc:	b2da      	uxtb	r2, r3
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	0a1b      	lsrs	r3, r3, #8
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	221f      	movs	r2, #31
 80162ea:	4013      	ands	r3, r2
 80162ec:	b2da      	uxtb	r2, r3
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80162f2:	697b      	ldr	r3, [r7, #20]
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	223f      	movs	r2, #63	@ 0x3f
 80162f8:	4013      	ands	r3, r2
 80162fa:	b2da      	uxtb	r2, r3
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	0b5b      	lsrs	r3, r3, #13
 8016304:	b2db      	uxtb	r3, r3
 8016306:	2207      	movs	r2, #7
 8016308:	4013      	ands	r3, r2
 801630a:	b2da      	uxtb	r2, r3
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d11a      	bne.n	801634c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	78db      	ldrb	r3, [r3, #3]
 801631a:	0018      	movs	r0, r3
 801631c:	f000 f8d5 	bl	80164ca <RTC_Bcd2ToByte>
 8016320:	0003      	movs	r3, r0
 8016322:	001a      	movs	r2, r3
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	785b      	ldrb	r3, [r3, #1]
 801632c:	0018      	movs	r0, r3
 801632e:	f000 f8cc 	bl	80164ca <RTC_Bcd2ToByte>
 8016332:	0003      	movs	r3, r0
 8016334:	001a      	movs	r2, r3
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	789b      	ldrb	r3, [r3, #2]
 801633e:	0018      	movs	r0, r3
 8016340:	f000 f8c3 	bl	80164ca <RTC_Bcd2ToByte>
 8016344:	0003      	movs	r3, r0
 8016346:	001a      	movs	r2, r3
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	0018      	movs	r0, r3
 8016350:	46bd      	mov	sp, r7
 8016352:	b006      	add	sp, #24
 8016354:	bd80      	pop	{r7, pc}
 8016356:	46c0      	nop			@ (mov r8, r8)
 8016358:	00ffff3f 	.word	0x00ffff3f

0801635c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016364:	2300      	movs	r3, #0
 8016366:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4a0e      	ldr	r2, [pc, #56]	@ (80163a8 <HAL_RTC_WaitForSynchro+0x4c>)
 801636e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016370:	f7f8 fce8 	bl	800ed44 <HAL_GetTick>
 8016374:	0003      	movs	r3, r0
 8016376:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016378:	e00a      	b.n	8016390 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801637a:	f7f8 fce3 	bl	800ed44 <HAL_GetTick>
 801637e:	0002      	movs	r2, r0
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	1ad2      	subs	r2, r2, r3
 8016384:	23fa      	movs	r3, #250	@ 0xfa
 8016386:	009b      	lsls	r3, r3, #2
 8016388:	429a      	cmp	r2, r3
 801638a:	d901      	bls.n	8016390 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801638c:	2303      	movs	r3, #3
 801638e:	e006      	b.n	801639e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	2220      	movs	r2, #32
 8016398:	4013      	ands	r3, r2
 801639a:	d0ee      	beq.n	801637a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801639c:	2300      	movs	r3, #0
}
 801639e:	0018      	movs	r0, r3
 80163a0:	46bd      	mov	sp, r7
 80163a2:	b004      	add	sp, #16
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	46c0      	nop			@ (mov r8, r8)
 80163a8:	0001ff5f 	.word	0x0001ff5f

080163ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80163b4:	2300      	movs	r3, #0
 80163b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80163b8:	230f      	movs	r3, #15
 80163ba:	18fb      	adds	r3, r7, r3
 80163bc:	2200      	movs	r2, #0
 80163be:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	2240      	movs	r2, #64	@ 0x40
 80163c8:	4013      	ands	r3, r2
 80163ca:	d12c      	bne.n	8016426 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	68da      	ldr	r2, [r3, #12]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	2180      	movs	r1, #128	@ 0x80
 80163d8:	430a      	orrs	r2, r1
 80163da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80163dc:	f7f8 fcb2 	bl	800ed44 <HAL_GetTick>
 80163e0:	0003      	movs	r3, r0
 80163e2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80163e4:	e014      	b.n	8016410 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80163e6:	f7f8 fcad 	bl	800ed44 <HAL_GetTick>
 80163ea:	0002      	movs	r2, r0
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	1ad2      	subs	r2, r2, r3
 80163f0:	200f      	movs	r0, #15
 80163f2:	183b      	adds	r3, r7, r0
 80163f4:	1839      	adds	r1, r7, r0
 80163f6:	7809      	ldrb	r1, [r1, #0]
 80163f8:	7019      	strb	r1, [r3, #0]
 80163fa:	23fa      	movs	r3, #250	@ 0xfa
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	429a      	cmp	r2, r3
 8016400:	d906      	bls.n	8016410 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2221      	movs	r2, #33	@ 0x21
 8016406:	2104      	movs	r1, #4
 8016408:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801640a:	183b      	adds	r3, r7, r0
 801640c:	2201      	movs	r2, #1
 801640e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	68db      	ldr	r3, [r3, #12]
 8016416:	2240      	movs	r2, #64	@ 0x40
 8016418:	4013      	ands	r3, r2
 801641a:	d104      	bne.n	8016426 <RTC_EnterInitMode+0x7a>
 801641c:	230f      	movs	r3, #15
 801641e:	18fb      	adds	r3, r7, r3
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	2b01      	cmp	r3, #1
 8016424:	d1df      	bne.n	80163e6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016426:	230f      	movs	r3, #15
 8016428:	18fb      	adds	r3, r7, r3
 801642a:	781b      	ldrb	r3, [r3, #0]
}
 801642c:	0018      	movs	r0, r3
 801642e:	46bd      	mov	sp, r7
 8016430:	b004      	add	sp, #16
 8016432:	bd80      	pop	{r7, pc}

08016434 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016434:	b590      	push	{r4, r7, lr}
 8016436:	b085      	sub	sp, #20
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801643c:	240f      	movs	r4, #15
 801643e:	193b      	adds	r3, r7, r4
 8016440:	2200      	movs	r2, #0
 8016442:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	68da      	ldr	r2, [r3, #12]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	2180      	movs	r1, #128	@ 0x80
 8016450:	438a      	bics	r2, r1
 8016452:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	689b      	ldr	r3, [r3, #8]
 801645a:	2220      	movs	r2, #32
 801645c:	4013      	ands	r3, r2
 801645e:	d10c      	bne.n	801647a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	0018      	movs	r0, r3
 8016464:	f7ff ff7a 	bl	801635c <HAL_RTC_WaitForSynchro>
 8016468:	1e03      	subs	r3, r0, #0
 801646a:	d006      	beq.n	801647a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2221      	movs	r2, #33	@ 0x21
 8016470:	2104      	movs	r1, #4
 8016472:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016474:	193b      	adds	r3, r7, r4
 8016476:	2201      	movs	r2, #1
 8016478:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801647a:	230f      	movs	r3, #15
 801647c:	18fb      	adds	r3, r7, r3
 801647e:	781b      	ldrb	r3, [r3, #0]
}
 8016480:	0018      	movs	r0, r3
 8016482:	46bd      	mov	sp, r7
 8016484:	b005      	add	sp, #20
 8016486:	bd90      	pop	{r4, r7, pc}

08016488 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	0002      	movs	r2, r0
 8016490:	1dfb      	adds	r3, r7, #7
 8016492:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016494:	2300      	movs	r3, #0
 8016496:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016498:	e007      	b.n	80164aa <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	3301      	adds	r3, #1
 801649e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80164a0:	1dfb      	adds	r3, r7, #7
 80164a2:	1dfa      	adds	r2, r7, #7
 80164a4:	7812      	ldrb	r2, [r2, #0]
 80164a6:	3a0a      	subs	r2, #10
 80164a8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80164aa:	1dfb      	adds	r3, r7, #7
 80164ac:	781b      	ldrb	r3, [r3, #0]
 80164ae:	2b09      	cmp	r3, #9
 80164b0:	d8f3      	bhi.n	801649a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	011b      	lsls	r3, r3, #4
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	1dfb      	adds	r3, r7, #7
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	4313      	orrs	r3, r2
 80164c0:	b2db      	uxtb	r3, r3
}
 80164c2:	0018      	movs	r0, r3
 80164c4:	46bd      	mov	sp, r7
 80164c6:	b004      	add	sp, #16
 80164c8:	bd80      	pop	{r7, pc}

080164ca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b084      	sub	sp, #16
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	0002      	movs	r2, r0
 80164d2:	1dfb      	adds	r3, r7, #7
 80164d4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80164d6:	2300      	movs	r3, #0
 80164d8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80164da:	1dfb      	adds	r3, r7, #7
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	091b      	lsrs	r3, r3, #4
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	001a      	movs	r2, r3
 80164e4:	0013      	movs	r3, r2
 80164e6:	009b      	lsls	r3, r3, #2
 80164e8:	189b      	adds	r3, r3, r2
 80164ea:	005b      	lsls	r3, r3, #1
 80164ec:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	1dfb      	adds	r3, r7, #7
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	210f      	movs	r1, #15
 80164f8:	400b      	ands	r3, r1
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	18d3      	adds	r3, r2, r3
 80164fe:	b2db      	uxtb	r3, r3
}
 8016500:	0018      	movs	r0, r3
 8016502:	46bd      	mov	sp, r7
 8016504:	b004      	add	sp, #16
 8016506:	bd80      	pop	{r7, pc}

08016508 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af00      	add	r7, sp, #0
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016514:	4b64      	ldr	r3, [pc, #400]	@ (80166a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	22fa      	movs	r2, #250	@ 0xfa
 801651a:	01d1      	lsls	r1, r2, #7
 801651c:	0018      	movs	r0, r3
 801651e:	f7e9 fe41 	bl	80001a4 <__udivsi3>
 8016522:	0003      	movs	r3, r0
 8016524:	001a      	movs	r2, r3
 8016526:	0013      	movs	r3, r2
 8016528:	015b      	lsls	r3, r3, #5
 801652a:	1a9b      	subs	r3, r3, r2
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	189b      	adds	r3, r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2220      	movs	r2, #32
 8016538:	5c9b      	ldrb	r3, [r3, r2]
 801653a:	2b01      	cmp	r3, #1
 801653c:	d101      	bne.n	8016542 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801653e:	2302      	movs	r3, #2
 8016540:	e0ad      	b.n	801669e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	2220      	movs	r2, #32
 8016546:	2101      	movs	r1, #1
 8016548:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2221      	movs	r2, #33	@ 0x21
 801654e:	2102      	movs	r1, #2
 8016550:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	22ca      	movs	r2, #202	@ 0xca
 8016558:	625a      	str	r2, [r3, #36]	@ 0x24
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2253      	movs	r2, #83	@ 0x53
 8016560:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	689a      	ldr	r2, [r3, #8]
 8016568:	2380      	movs	r3, #128	@ 0x80
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	4013      	ands	r3, r2
 801656e:	d019      	beq.n	80165a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	3b01      	subs	r3, #1
 8016574:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d10d      	bne.n	8016598 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	22ff      	movs	r2, #255	@ 0xff
 8016582:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2221      	movs	r2, #33	@ 0x21
 8016588:	2103      	movs	r1, #3
 801658a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2220      	movs	r2, #32
 8016590:	2100      	movs	r1, #0
 8016592:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016594:	2303      	movs	r3, #3
 8016596:	e082      	b.n	801669e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	2204      	movs	r2, #4
 80165a0:	4013      	ands	r3, r2
 80165a2:	d1e5      	bne.n	8016570 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	689a      	ldr	r2, [r3, #8]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	493f      	ldr	r1, [pc, #252]	@ (80166ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80165b0:	400a      	ands	r2, r1
 80165b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	68db      	ldr	r3, [r3, #12]
 80165ba:	22ff      	movs	r2, #255	@ 0xff
 80165bc:	401a      	ands	r2, r3
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	493b      	ldr	r1, [pc, #236]	@ (80166b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80165c4:	430a      	orrs	r2, r1
 80165c6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80165c8:	4b37      	ldr	r3, [pc, #220]	@ (80166a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	22fa      	movs	r2, #250	@ 0xfa
 80165ce:	01d1      	lsls	r1, r2, #7
 80165d0:	0018      	movs	r0, r3
 80165d2:	f7e9 fde7 	bl	80001a4 <__udivsi3>
 80165d6:	0003      	movs	r3, r0
 80165d8:	001a      	movs	r2, r3
 80165da:	0013      	movs	r3, r2
 80165dc:	015b      	lsls	r3, r3, #5
 80165de:	1a9b      	subs	r3, r3, r2
 80165e0:	009b      	lsls	r3, r3, #2
 80165e2:	189b      	adds	r3, r3, r2
 80165e4:	00db      	lsls	r3, r3, #3
 80165e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	3b01      	subs	r3, #1
 80165ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10d      	bne.n	8016610 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	22ff      	movs	r2, #255	@ 0xff
 80165fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2221      	movs	r2, #33	@ 0x21
 8016600:	2103      	movs	r1, #3
 8016602:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2220      	movs	r2, #32
 8016608:	2100      	movs	r1, #0
 801660a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801660c:	2303      	movs	r3, #3
 801660e:	e046      	b.n	801669e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	68db      	ldr	r3, [r3, #12]
 8016616:	2204      	movs	r2, #4
 8016618:	4013      	ands	r3, r2
 801661a:	d0e5      	beq.n	80165e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	689a      	ldr	r2, [r3, #8]
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	2107      	movs	r1, #7
 8016628:	438a      	bics	r2, r1
 801662a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	6899      	ldr	r1, [r3, #8]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	687a      	ldr	r2, [r7, #4]
 8016638:	430a      	orrs	r2, r1
 801663a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	68ba      	ldr	r2, [r7, #8]
 8016642:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016644:	4b1b      	ldr	r3, [pc, #108]	@ (80166b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	4b1a      	ldr	r3, [pc, #104]	@ (80166b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801664a:	2180      	movs	r1, #128	@ 0x80
 801664c:	0349      	lsls	r1, r1, #13
 801664e:	430a      	orrs	r2, r1
 8016650:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8016652:	4b18      	ldr	r3, [pc, #96]	@ (80166b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016654:	689a      	ldr	r2, [r3, #8]
 8016656:	4b17      	ldr	r3, [pc, #92]	@ (80166b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016658:	2180      	movs	r1, #128	@ 0x80
 801665a:	0349      	lsls	r1, r1, #13
 801665c:	430a      	orrs	r2, r1
 801665e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	689a      	ldr	r2, [r3, #8]
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2180      	movs	r1, #128	@ 0x80
 801666c:	01c9      	lsls	r1, r1, #7
 801666e:	430a      	orrs	r2, r1
 8016670:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	689a      	ldr	r2, [r3, #8]
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2180      	movs	r1, #128	@ 0x80
 801667e:	00c9      	lsls	r1, r1, #3
 8016680:	430a      	orrs	r2, r1
 8016682:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	22ff      	movs	r2, #255	@ 0xff
 801668a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2221      	movs	r2, #33	@ 0x21
 8016690:	2101      	movs	r1, #1
 8016692:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2220      	movs	r2, #32
 8016698:	2100      	movs	r1, #0
 801669a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801669c:	2300      	movs	r3, #0
}
 801669e:	0018      	movs	r0, r3
 80166a0:	46bd      	mov	sp, r7
 80166a2:	b006      	add	sp, #24
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	46c0      	nop			@ (mov r8, r8)
 80166a8:	200000d4 	.word	0x200000d4
 80166ac:	fffffbff 	.word	0xfffffbff
 80166b0:	fffffb7f 	.word	0xfffffb7f
 80166b4:	40010400 	.word	0x40010400

080166b8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80166c0:	2300      	movs	r3, #0
 80166c2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2220      	movs	r2, #32
 80166c8:	5c9b      	ldrb	r3, [r3, r2]
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d101      	bne.n	80166d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80166ce:	2302      	movs	r3, #2
 80166d0:	e04e      	b.n	8016770 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2220      	movs	r2, #32
 80166d6:	2101      	movs	r1, #1
 80166d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2221      	movs	r2, #33	@ 0x21
 80166de:	2102      	movs	r1, #2
 80166e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	22ca      	movs	r2, #202	@ 0xca
 80166e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	2253      	movs	r2, #83	@ 0x53
 80166f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	689a      	ldr	r2, [r3, #8]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	491e      	ldr	r1, [pc, #120]	@ (8016778 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80166fe:	400a      	ands	r2, r1
 8016700:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	689a      	ldr	r2, [r3, #8]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	491b      	ldr	r1, [pc, #108]	@ (801677c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801670e:	400a      	ands	r2, r1
 8016710:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016712:	f7f8 fb17 	bl	800ed44 <HAL_GetTick>
 8016716:	0003      	movs	r3, r0
 8016718:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801671a:	e016      	b.n	801674a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801671c:	f7f8 fb12 	bl	800ed44 <HAL_GetTick>
 8016720:	0002      	movs	r2, r0
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	1ad2      	subs	r2, r2, r3
 8016726:	23fa      	movs	r3, #250	@ 0xfa
 8016728:	009b      	lsls	r3, r3, #2
 801672a:	429a      	cmp	r2, r3
 801672c:	d90d      	bls.n	801674a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	22ff      	movs	r2, #255	@ 0xff
 8016734:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2221      	movs	r2, #33	@ 0x21
 801673a:	2103      	movs	r1, #3
 801673c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2220      	movs	r2, #32
 8016742:	2100      	movs	r1, #0
 8016744:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016746:	2303      	movs	r3, #3
 8016748:	e012      	b.n	8016770 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	68db      	ldr	r3, [r3, #12]
 8016750:	2204      	movs	r2, #4
 8016752:	4013      	ands	r3, r2
 8016754:	d0e2      	beq.n	801671c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	22ff      	movs	r2, #255	@ 0xff
 801675c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2221      	movs	r2, #33	@ 0x21
 8016762:	2101      	movs	r1, #1
 8016764:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2220      	movs	r2, #32
 801676a:	2100      	movs	r1, #0
 801676c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801676e:	2300      	movs	r3, #0
}
 8016770:	0018      	movs	r0, r3
 8016772:	46bd      	mov	sp, r7
 8016774:	b004      	add	sp, #16
 8016776:	bd80      	pop	{r7, pc}
 8016778:	fffffbff 	.word	0xfffffbff
 801677c:	ffffbfff 	.word	0xffffbfff

08016780 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016788:	4b13      	ldr	r3, [pc, #76]	@ (80167d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801678a:	2280      	movs	r2, #128	@ 0x80
 801678c:	0352      	lsls	r2, r2, #13
 801678e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	689a      	ldr	r2, [r3, #8]
 8016796:	2380      	movs	r3, #128	@ 0x80
 8016798:	01db      	lsls	r3, r3, #7
 801679a:	4013      	ands	r3, r2
 801679c:	d014      	beq.n	80167c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	68da      	ldr	r2, [r3, #12]
 80167a4:	2380      	movs	r3, #128	@ 0x80
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	4013      	ands	r3, r2
 80167aa:	d00d      	beq.n	80167c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	68db      	ldr	r3, [r3, #12]
 80167b2:	22ff      	movs	r2, #255	@ 0xff
 80167b4:	401a      	ands	r2, r3
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	4908      	ldr	r1, [pc, #32]	@ (80167dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80167bc:	430a      	orrs	r2, r1
 80167be:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	0018      	movs	r0, r3
 80167c4:	f000 f80c 	bl	80167e0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2221      	movs	r2, #33	@ 0x21
 80167cc:	2101      	movs	r1, #1
 80167ce:	5499      	strb	r1, [r3, r2]
}
 80167d0:	46c0      	nop			@ (mov r8, r8)
 80167d2:	46bd      	mov	sp, r7
 80167d4:	b002      	add	sp, #8
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	40010400 	.word	0x40010400
 80167dc:	fffffb7f 	.word	0xfffffb7f

080167e0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80167e8:	46c0      	nop			@ (mov r8, r8)
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b002      	add	sp, #8
 80167ee:	bd80      	pop	{r7, pc}

080167f0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b086      	sub	sp, #24
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80167fc:	2300      	movs	r3, #0
 80167fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	3350      	adds	r3, #80	@ 0x50
 8016806:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	697a      	ldr	r2, [r7, #20]
 801680e:	18d3      	adds	r3, r2, r3
 8016810:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016812:	697b      	ldr	r3, [r7, #20]
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	601a      	str	r2, [r3, #0]
}
 8016818:	46c0      	nop			@ (mov r8, r8)
 801681a:	46bd      	mov	sp, r7
 801681c:	b006      	add	sp, #24
 801681e:	bd80      	pop	{r7, pc}

08016820 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b084      	sub	sp, #16
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801682a:	2300      	movs	r3, #0
 801682c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	3350      	adds	r3, #80	@ 0x50
 8016834:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	009b      	lsls	r3, r3, #2
 801683a:	68fa      	ldr	r2, [r7, #12]
 801683c:	18d3      	adds	r3, r2, r3
 801683e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	681b      	ldr	r3, [r3, #0]
}
 8016844:	0018      	movs	r0, r3
 8016846:	46bd      	mov	sp, r7
 8016848:	b004      	add	sp, #16
 801684a:	bd80      	pop	{r7, pc}

0801684c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d101      	bne.n	801685e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	e032      	b.n	80168c4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	2239      	movs	r2, #57	@ 0x39
 8016862:	5c9b      	ldrb	r3, [r3, r2]
 8016864:	b2db      	uxtb	r3, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	d107      	bne.n	801687a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2238      	movs	r2, #56	@ 0x38
 801686e:	2100      	movs	r1, #0
 8016870:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	0018      	movs	r0, r3
 8016876:	f7f7 fb7d 	bl	800df74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2239      	movs	r2, #57	@ 0x39
 801687e:	2102      	movs	r1, #2
 8016880:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	3304      	adds	r3, #4
 801688a:	0019      	movs	r1, r3
 801688c:	0010      	movs	r0, r2
 801688e:	f000 fa1d 	bl	8016ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	223e      	movs	r2, #62	@ 0x3e
 8016896:	2101      	movs	r1, #1
 8016898:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	223a      	movs	r2, #58	@ 0x3a
 801689e:	2101      	movs	r1, #1
 80168a0:	5499      	strb	r1, [r3, r2]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	223b      	movs	r2, #59	@ 0x3b
 80168a6:	2101      	movs	r1, #1
 80168a8:	5499      	strb	r1, [r3, r2]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	223c      	movs	r2, #60	@ 0x3c
 80168ae:	2101      	movs	r1, #1
 80168b0:	5499      	strb	r1, [r3, r2]
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	223d      	movs	r2, #61	@ 0x3d
 80168b6:	2101      	movs	r1, #1
 80168b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2239      	movs	r2, #57	@ 0x39
 80168be:	2101      	movs	r1, #1
 80168c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80168c2:	2300      	movs	r3, #0
}
 80168c4:	0018      	movs	r0, r3
 80168c6:	46bd      	mov	sp, r7
 80168c8:	b002      	add	sp, #8
 80168ca:	bd80      	pop	{r7, pc}

080168cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b084      	sub	sp, #16
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2239      	movs	r2, #57	@ 0x39
 80168d8:	5c9b      	ldrb	r3, [r3, r2]
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d001      	beq.n	80168e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80168e0:	2301      	movs	r3, #1
 80168e2:	e033      	b.n	801694c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2239      	movs	r2, #57	@ 0x39
 80168e8:	2102      	movs	r1, #2
 80168ea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	2380      	movs	r3, #128	@ 0x80
 80168f2:	05db      	lsls	r3, r3, #23
 80168f4:	429a      	cmp	r2, r3
 80168f6:	d00e      	beq.n	8016916 <HAL_TIM_Base_Start+0x4a>
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	4a15      	ldr	r2, [pc, #84]	@ (8016954 <HAL_TIM_Base_Start+0x88>)
 80168fe:	4293      	cmp	r3, r2
 8016900:	d009      	beq.n	8016916 <HAL_TIM_Base_Start+0x4a>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	4a14      	ldr	r2, [pc, #80]	@ (8016958 <HAL_TIM_Base_Start+0x8c>)
 8016908:	4293      	cmp	r3, r2
 801690a:	d004      	beq.n	8016916 <HAL_TIM_Base_Start+0x4a>
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	4a12      	ldr	r2, [pc, #72]	@ (801695c <HAL_TIM_Base_Start+0x90>)
 8016912:	4293      	cmp	r3, r2
 8016914:	d111      	bne.n	801693a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	689b      	ldr	r3, [r3, #8]
 801691c:	2207      	movs	r2, #7
 801691e:	4013      	ands	r3, r2
 8016920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	2b06      	cmp	r3, #6
 8016926:	d010      	beq.n	801694a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	681a      	ldr	r2, [r3, #0]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2101      	movs	r1, #1
 8016934:	430a      	orrs	r2, r1
 8016936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016938:	e007      	b.n	801694a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2101      	movs	r1, #1
 8016946:	430a      	orrs	r2, r1
 8016948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801694a:	2300      	movs	r3, #0
}
 801694c:	0018      	movs	r0, r3
 801694e:	46bd      	mov	sp, r7
 8016950:	b004      	add	sp, #16
 8016952:	bd80      	pop	{r7, pc}
 8016954:	40000400 	.word	0x40000400
 8016958:	40010800 	.word	0x40010800
 801695c:	40011400 	.word	0x40011400

08016960 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	6a1b      	ldr	r3, [r3, #32]
 801696e:	4a0a      	ldr	r2, [pc, #40]	@ (8016998 <HAL_TIM_Base_Stop+0x38>)
 8016970:	4013      	ands	r3, r2
 8016972:	d107      	bne.n	8016984 <HAL_TIM_Base_Stop+0x24>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2101      	movs	r1, #1
 8016980:	438a      	bics	r2, r1
 8016982:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2239      	movs	r2, #57	@ 0x39
 8016988:	2101      	movs	r1, #1
 801698a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801698c:	2300      	movs	r3, #0
}
 801698e:	0018      	movs	r0, r3
 8016990:	46bd      	mov	sp, r7
 8016992:	b002      	add	sp, #8
 8016994:	bd80      	pop	{r7, pc}
 8016996:	46c0      	nop			@ (mov r8, r8)
 8016998:	00001111 	.word	0x00001111

0801699c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d101      	bne.n	80169ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80169aa:	2301      	movs	r3, #1
 80169ac:	e032      	b.n	8016a14 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2239      	movs	r2, #57	@ 0x39
 80169b2:	5c9b      	ldrb	r3, [r3, r2]
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d107      	bne.n	80169ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2238      	movs	r2, #56	@ 0x38
 80169be:	2100      	movs	r1, #0
 80169c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	0018      	movs	r0, r3
 80169c6:	f7f7 fab1 	bl	800df2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2239      	movs	r2, #57	@ 0x39
 80169ce:	2102      	movs	r1, #2
 80169d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	3304      	adds	r3, #4
 80169da:	0019      	movs	r1, r3
 80169dc:	0010      	movs	r0, r2
 80169de:	f000 f975 	bl	8016ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	223e      	movs	r2, #62	@ 0x3e
 80169e6:	2101      	movs	r1, #1
 80169e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	223a      	movs	r2, #58	@ 0x3a
 80169ee:	2101      	movs	r1, #1
 80169f0:	5499      	strb	r1, [r3, r2]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	223b      	movs	r2, #59	@ 0x3b
 80169f6:	2101      	movs	r1, #1
 80169f8:	5499      	strb	r1, [r3, r2]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	223c      	movs	r2, #60	@ 0x3c
 80169fe:	2101      	movs	r1, #1
 8016a00:	5499      	strb	r1, [r3, r2]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	223d      	movs	r2, #61	@ 0x3d
 8016a06:	2101      	movs	r1, #1
 8016a08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2239      	movs	r2, #57	@ 0x39
 8016a0e:	2101      	movs	r1, #1
 8016a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016a12:	2300      	movs	r3, #0
}
 8016a14:	0018      	movs	r0, r3
 8016a16:	46bd      	mov	sp, r7
 8016a18:	b002      	add	sp, #8
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d108      	bne.n	8016a3e <HAL_TIM_PWM_Start+0x22>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	223a      	movs	r2, #58	@ 0x3a
 8016a30:	5c9b      	ldrb	r3, [r3, r2]
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	3b01      	subs	r3, #1
 8016a36:	1e5a      	subs	r2, r3, #1
 8016a38:	4193      	sbcs	r3, r2
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	e01f      	b.n	8016a7e <HAL_TIM_PWM_Start+0x62>
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	2b04      	cmp	r3, #4
 8016a42:	d108      	bne.n	8016a56 <HAL_TIM_PWM_Start+0x3a>
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	223b      	movs	r2, #59	@ 0x3b
 8016a48:	5c9b      	ldrb	r3, [r3, r2]
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	3b01      	subs	r3, #1
 8016a4e:	1e5a      	subs	r2, r3, #1
 8016a50:	4193      	sbcs	r3, r2
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	e013      	b.n	8016a7e <HAL_TIM_PWM_Start+0x62>
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	2b08      	cmp	r3, #8
 8016a5a:	d108      	bne.n	8016a6e <HAL_TIM_PWM_Start+0x52>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	223c      	movs	r2, #60	@ 0x3c
 8016a60:	5c9b      	ldrb	r3, [r3, r2]
 8016a62:	b2db      	uxtb	r3, r3
 8016a64:	3b01      	subs	r3, #1
 8016a66:	1e5a      	subs	r2, r3, #1
 8016a68:	4193      	sbcs	r3, r2
 8016a6a:	b2db      	uxtb	r3, r3
 8016a6c:	e007      	b.n	8016a7e <HAL_TIM_PWM_Start+0x62>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	223d      	movs	r2, #61	@ 0x3d
 8016a72:	5c9b      	ldrb	r3, [r3, r2]
 8016a74:	b2db      	uxtb	r3, r3
 8016a76:	3b01      	subs	r3, #1
 8016a78:	1e5a      	subs	r2, r3, #1
 8016a7a:	4193      	sbcs	r3, r2
 8016a7c:	b2db      	uxtb	r3, r3
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d001      	beq.n	8016a86 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016a82:	2301      	movs	r3, #1
 8016a84:	e052      	b.n	8016b2c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d104      	bne.n	8016a96 <HAL_TIM_PWM_Start+0x7a>
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	223a      	movs	r2, #58	@ 0x3a
 8016a90:	2102      	movs	r1, #2
 8016a92:	5499      	strb	r1, [r3, r2]
 8016a94:	e013      	b.n	8016abe <HAL_TIM_PWM_Start+0xa2>
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	2b04      	cmp	r3, #4
 8016a9a:	d104      	bne.n	8016aa6 <HAL_TIM_PWM_Start+0x8a>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	223b      	movs	r2, #59	@ 0x3b
 8016aa0:	2102      	movs	r1, #2
 8016aa2:	5499      	strb	r1, [r3, r2]
 8016aa4:	e00b      	b.n	8016abe <HAL_TIM_PWM_Start+0xa2>
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	2b08      	cmp	r3, #8
 8016aaa:	d104      	bne.n	8016ab6 <HAL_TIM_PWM_Start+0x9a>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	223c      	movs	r2, #60	@ 0x3c
 8016ab0:	2102      	movs	r1, #2
 8016ab2:	5499      	strb	r1, [r3, r2]
 8016ab4:	e003      	b.n	8016abe <HAL_TIM_PWM_Start+0xa2>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	223d      	movs	r2, #61	@ 0x3d
 8016aba:	2102      	movs	r1, #2
 8016abc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	6839      	ldr	r1, [r7, #0]
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	0018      	movs	r0, r3
 8016ac8:	f000 fa62 	bl	8016f90 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	2380      	movs	r3, #128	@ 0x80
 8016ad2:	05db      	lsls	r3, r3, #23
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d00e      	beq.n	8016af6 <HAL_TIM_PWM_Start+0xda>
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	4a15      	ldr	r2, [pc, #84]	@ (8016b34 <HAL_TIM_PWM_Start+0x118>)
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	d009      	beq.n	8016af6 <HAL_TIM_PWM_Start+0xda>
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	4a14      	ldr	r2, [pc, #80]	@ (8016b38 <HAL_TIM_PWM_Start+0x11c>)
 8016ae8:	4293      	cmp	r3, r2
 8016aea:	d004      	beq.n	8016af6 <HAL_TIM_PWM_Start+0xda>
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	4a12      	ldr	r2, [pc, #72]	@ (8016b3c <HAL_TIM_PWM_Start+0x120>)
 8016af2:	4293      	cmp	r3, r2
 8016af4:	d111      	bne.n	8016b1a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	689b      	ldr	r3, [r3, #8]
 8016afc:	2207      	movs	r2, #7
 8016afe:	4013      	ands	r3, r2
 8016b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	2b06      	cmp	r3, #6
 8016b06:	d010      	beq.n	8016b2a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	2101      	movs	r1, #1
 8016b14:	430a      	orrs	r2, r1
 8016b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b18:	e007      	b.n	8016b2a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	2101      	movs	r1, #1
 8016b26:	430a      	orrs	r2, r1
 8016b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016b2a:	2300      	movs	r3, #0
}
 8016b2c:	0018      	movs	r0, r3
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	b004      	add	sp, #16
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	40000400 	.word	0x40000400
 8016b38:	40010800 	.word	0x40010800
 8016b3c:	40011400 	.word	0x40011400

08016b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b086      	sub	sp, #24
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	60f8      	str	r0, [r7, #12]
 8016b48:	60b9      	str	r1, [r7, #8]
 8016b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b4c:	2317      	movs	r3, #23
 8016b4e:	18fb      	adds	r3, r7, r3
 8016b50:	2200      	movs	r2, #0
 8016b52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	2238      	movs	r2, #56	@ 0x38
 8016b58:	5c9b      	ldrb	r3, [r3, r2]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d101      	bne.n	8016b62 <HAL_TIM_PWM_ConfigChannel+0x22>
 8016b5e:	2302      	movs	r3, #2
 8016b60:	e0ad      	b.n	8016cbe <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	2238      	movs	r2, #56	@ 0x38
 8016b66:	2101      	movs	r1, #1
 8016b68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2b0c      	cmp	r3, #12
 8016b6e:	d100      	bne.n	8016b72 <HAL_TIM_PWM_ConfigChannel+0x32>
 8016b70:	e076      	b.n	8016c60 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2b0c      	cmp	r3, #12
 8016b76:	d900      	bls.n	8016b7a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016b78:	e095      	b.n	8016ca6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2b08      	cmp	r3, #8
 8016b7e:	d04e      	beq.n	8016c1e <HAL_TIM_PWM_ConfigChannel+0xde>
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b08      	cmp	r3, #8
 8016b84:	d900      	bls.n	8016b88 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016b86:	e08e      	b.n	8016ca6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d003      	beq.n	8016b96 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2b04      	cmp	r3, #4
 8016b92:	d021      	beq.n	8016bd8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016b94:	e087      	b.n	8016ca6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	68ba      	ldr	r2, [r7, #8]
 8016b9c:	0011      	movs	r1, r2
 8016b9e:	0018      	movs	r0, r3
 8016ba0:	f000 f8f2 	bl	8016d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	699a      	ldr	r2, [r3, #24]
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	2108      	movs	r1, #8
 8016bb0:	430a      	orrs	r2, r1
 8016bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	699a      	ldr	r2, [r3, #24]
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2104      	movs	r1, #4
 8016bc0:	438a      	bics	r2, r1
 8016bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	6999      	ldr	r1, [r3, #24]
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	68da      	ldr	r2, [r3, #12]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	430a      	orrs	r2, r1
 8016bd4:	619a      	str	r2, [r3, #24]
      break;
 8016bd6:	e06b      	b.n	8016cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	68ba      	ldr	r2, [r7, #8]
 8016bde:	0011      	movs	r1, r2
 8016be0:	0018      	movs	r0, r3
 8016be2:	f000 f90d 	bl	8016e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	699a      	ldr	r2, [r3, #24]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2180      	movs	r1, #128	@ 0x80
 8016bf2:	0109      	lsls	r1, r1, #4
 8016bf4:	430a      	orrs	r2, r1
 8016bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	699a      	ldr	r2, [r3, #24]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	4931      	ldr	r1, [pc, #196]	@ (8016cc8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016c04:	400a      	ands	r2, r1
 8016c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	6999      	ldr	r1, [r3, #24]
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	021a      	lsls	r2, r3, #8
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	430a      	orrs	r2, r1
 8016c1a:	619a      	str	r2, [r3, #24]
      break;
 8016c1c:	e048      	b.n	8016cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	68ba      	ldr	r2, [r7, #8]
 8016c24:	0011      	movs	r1, r2
 8016c26:	0018      	movs	r0, r3
 8016c28:	f000 f92c 	bl	8016e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	69da      	ldr	r2, [r3, #28]
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2108      	movs	r1, #8
 8016c38:	430a      	orrs	r2, r1
 8016c3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	69da      	ldr	r2, [r3, #28]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2104      	movs	r1, #4
 8016c48:	438a      	bics	r2, r1
 8016c4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	69d9      	ldr	r1, [r3, #28]
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	68da      	ldr	r2, [r3, #12]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	430a      	orrs	r2, r1
 8016c5c:	61da      	str	r2, [r3, #28]
      break;
 8016c5e:	e027      	b.n	8016cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	68ba      	ldr	r2, [r7, #8]
 8016c66:	0011      	movs	r1, r2
 8016c68:	0018      	movs	r0, r3
 8016c6a:	f000 f94b 	bl	8016f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	69da      	ldr	r2, [r3, #28]
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	2180      	movs	r1, #128	@ 0x80
 8016c7a:	0109      	lsls	r1, r1, #4
 8016c7c:	430a      	orrs	r2, r1
 8016c7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	69da      	ldr	r2, [r3, #28]
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	490f      	ldr	r1, [pc, #60]	@ (8016cc8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016c8c:	400a      	ands	r2, r1
 8016c8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	69d9      	ldr	r1, [r3, #28]
 8016c96:	68bb      	ldr	r3, [r7, #8]
 8016c98:	68db      	ldr	r3, [r3, #12]
 8016c9a:	021a      	lsls	r2, r3, #8
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	430a      	orrs	r2, r1
 8016ca2:	61da      	str	r2, [r3, #28]
      break;
 8016ca4:	e004      	b.n	8016cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016ca6:	2317      	movs	r3, #23
 8016ca8:	18fb      	adds	r3, r7, r3
 8016caa:	2201      	movs	r2, #1
 8016cac:	701a      	strb	r2, [r3, #0]
      break;
 8016cae:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2238      	movs	r2, #56	@ 0x38
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	5499      	strb	r1, [r3, r2]

  return status;
 8016cb8:	2317      	movs	r3, #23
 8016cba:	18fb      	adds	r3, r7, r3
 8016cbc:	781b      	ldrb	r3, [r3, #0]
}
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	b006      	add	sp, #24
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	46c0      	nop			@ (mov r8, r8)
 8016cc8:	fffffbff 	.word	0xfffffbff

08016ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b084      	sub	sp, #16
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	2380      	movs	r3, #128	@ 0x80
 8016ce0:	05db      	lsls	r3, r3, #23
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d00b      	beq.n	8016cfe <TIM_Base_SetConfig+0x32>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	4a23      	ldr	r2, [pc, #140]	@ (8016d78 <TIM_Base_SetConfig+0xac>)
 8016cea:	4293      	cmp	r3, r2
 8016cec:	d007      	beq.n	8016cfe <TIM_Base_SetConfig+0x32>
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	4a22      	ldr	r2, [pc, #136]	@ (8016d7c <TIM_Base_SetConfig+0xb0>)
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	d003      	beq.n	8016cfe <TIM_Base_SetConfig+0x32>
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	4a21      	ldr	r2, [pc, #132]	@ (8016d80 <TIM_Base_SetConfig+0xb4>)
 8016cfa:	4293      	cmp	r3, r2
 8016cfc:	d108      	bne.n	8016d10 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	2270      	movs	r2, #112	@ 0x70
 8016d02:	4393      	bics	r3, r2
 8016d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	4313      	orrs	r3, r2
 8016d0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016d10:	687a      	ldr	r2, [r7, #4]
 8016d12:	2380      	movs	r3, #128	@ 0x80
 8016d14:	05db      	lsls	r3, r3, #23
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d00b      	beq.n	8016d32 <TIM_Base_SetConfig+0x66>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	4a16      	ldr	r2, [pc, #88]	@ (8016d78 <TIM_Base_SetConfig+0xac>)
 8016d1e:	4293      	cmp	r3, r2
 8016d20:	d007      	beq.n	8016d32 <TIM_Base_SetConfig+0x66>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	4a15      	ldr	r2, [pc, #84]	@ (8016d7c <TIM_Base_SetConfig+0xb0>)
 8016d26:	4293      	cmp	r3, r2
 8016d28:	d003      	beq.n	8016d32 <TIM_Base_SetConfig+0x66>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	4a14      	ldr	r2, [pc, #80]	@ (8016d80 <TIM_Base_SetConfig+0xb4>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d108      	bne.n	8016d44 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	4a13      	ldr	r2, [pc, #76]	@ (8016d84 <TIM_Base_SetConfig+0xb8>)
 8016d36:	4013      	ands	r3, r2
 8016d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	68fa      	ldr	r2, [r7, #12]
 8016d40:	4313      	orrs	r3, r2
 8016d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	2280      	movs	r2, #128	@ 0x80
 8016d48:	4393      	bics	r3, r2
 8016d4a:	001a      	movs	r2, r3
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	691b      	ldr	r3, [r3, #16]
 8016d50:	4313      	orrs	r3, r2
 8016d52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	68fa      	ldr	r2, [r7, #12]
 8016d58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	689a      	ldr	r2, [r3, #8]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	681a      	ldr	r2, [r3, #0]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2201      	movs	r2, #1
 8016d6e:	615a      	str	r2, [r3, #20]
}
 8016d70:	46c0      	nop			@ (mov r8, r8)
 8016d72:	46bd      	mov	sp, r7
 8016d74:	b004      	add	sp, #16
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	40000400 	.word	0x40000400
 8016d7c:	40010800 	.word	0x40010800
 8016d80:	40011400 	.word	0x40011400
 8016d84:	fffffcff 	.word	0xfffffcff

08016d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b086      	sub	sp, #24
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6a1b      	ldr	r3, [r3, #32]
 8016d96:	2201      	movs	r2, #1
 8016d98:	4393      	bics	r3, r2
 8016d9a:	001a      	movs	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6a1b      	ldr	r3, [r3, #32]
 8016da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	685b      	ldr	r3, [r3, #4]
 8016daa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	699b      	ldr	r3, [r3, #24]
 8016db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	2270      	movs	r2, #112	@ 0x70
 8016db6:	4393      	bics	r3, r2
 8016db8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2203      	movs	r2, #3
 8016dbe:	4393      	bics	r3, r2
 8016dc0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	68fa      	ldr	r2, [r7, #12]
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	2202      	movs	r2, #2
 8016dd0:	4393      	bics	r3, r2
 8016dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	689b      	ldr	r3, [r3, #8]
 8016dd8:	697a      	ldr	r2, [r7, #20]
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	693a      	ldr	r2, [r7, #16]
 8016de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	68fa      	ldr	r2, [r7, #12]
 8016de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	685a      	ldr	r2, [r3, #4]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	697a      	ldr	r2, [r7, #20]
 8016df6:	621a      	str	r2, [r3, #32]
}
 8016df8:	46c0      	nop			@ (mov r8, r8)
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	b006      	add	sp, #24
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b086      	sub	sp, #24
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6a1b      	ldr	r3, [r3, #32]
 8016e0e:	2210      	movs	r2, #16
 8016e10:	4393      	bics	r3, r2
 8016e12:	001a      	movs	r2, r3
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6a1b      	ldr	r3, [r3, #32]
 8016e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	699b      	ldr	r3, [r3, #24]
 8016e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	4a13      	ldr	r2, [pc, #76]	@ (8016e7c <TIM_OC2_SetConfig+0x7c>)
 8016e2e:	4013      	ands	r3, r2
 8016e30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	4a12      	ldr	r2, [pc, #72]	@ (8016e80 <TIM_OC2_SetConfig+0x80>)
 8016e36:	4013      	ands	r3, r2
 8016e38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	021b      	lsls	r3, r3, #8
 8016e40:	68fa      	ldr	r2, [r7, #12]
 8016e42:	4313      	orrs	r3, r2
 8016e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	2220      	movs	r2, #32
 8016e4a:	4393      	bics	r3, r2
 8016e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	689b      	ldr	r3, [r3, #8]
 8016e52:	011b      	lsls	r3, r3, #4
 8016e54:	697a      	ldr	r2, [r7, #20]
 8016e56:	4313      	orrs	r3, r2
 8016e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	693a      	ldr	r2, [r7, #16]
 8016e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	685a      	ldr	r2, [r3, #4]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	697a      	ldr	r2, [r7, #20]
 8016e72:	621a      	str	r2, [r3, #32]
}
 8016e74:	46c0      	nop			@ (mov r8, r8)
 8016e76:	46bd      	mov	sp, r7
 8016e78:	b006      	add	sp, #24
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	ffff8fff 	.word	0xffff8fff
 8016e80:	fffffcff 	.word	0xfffffcff

08016e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b086      	sub	sp, #24
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6a1b      	ldr	r3, [r3, #32]
 8016e92:	4a1a      	ldr	r2, [pc, #104]	@ (8016efc <TIM_OC3_SetConfig+0x78>)
 8016e94:	401a      	ands	r2, r3
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	6a1b      	ldr	r3, [r3, #32]
 8016e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	685b      	ldr	r3, [r3, #4]
 8016ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	69db      	ldr	r3, [r3, #28]
 8016eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	2270      	movs	r2, #112	@ 0x70
 8016eb0:	4393      	bics	r3, r2
 8016eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2203      	movs	r2, #3
 8016eb8:	4393      	bics	r3, r2
 8016eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	68fa      	ldr	r2, [r7, #12]
 8016ec2:	4313      	orrs	r3, r2
 8016ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016ec6:	697b      	ldr	r3, [r7, #20]
 8016ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8016f00 <TIM_OC3_SetConfig+0x7c>)
 8016eca:	4013      	ands	r3, r2
 8016ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	689b      	ldr	r3, [r3, #8]
 8016ed2:	021b      	lsls	r3, r3, #8
 8016ed4:	697a      	ldr	r2, [r7, #20]
 8016ed6:	4313      	orrs	r3, r2
 8016ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	693a      	ldr	r2, [r7, #16]
 8016ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	68fa      	ldr	r2, [r7, #12]
 8016ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	685a      	ldr	r2, [r3, #4]
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	697a      	ldr	r2, [r7, #20]
 8016ef2:	621a      	str	r2, [r3, #32]
}
 8016ef4:	46c0      	nop			@ (mov r8, r8)
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	b006      	add	sp, #24
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	fffffeff 	.word	0xfffffeff
 8016f00:	fffffdff 	.word	0xfffffdff

08016f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b086      	sub	sp, #24
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
 8016f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a1b      	ldr	r3, [r3, #32]
 8016f12:	4a1b      	ldr	r2, [pc, #108]	@ (8016f80 <TIM_OC4_SetConfig+0x7c>)
 8016f14:	401a      	ands	r2, r3
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6a1b      	ldr	r3, [r3, #32]
 8016f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	685b      	ldr	r3, [r3, #4]
 8016f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	69db      	ldr	r3, [r3, #28]
 8016f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	4a15      	ldr	r2, [pc, #84]	@ (8016f84 <TIM_OC4_SetConfig+0x80>)
 8016f30:	4013      	ands	r3, r2
 8016f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	4a14      	ldr	r2, [pc, #80]	@ (8016f88 <TIM_OC4_SetConfig+0x84>)
 8016f38:	4013      	ands	r3, r2
 8016f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	021b      	lsls	r3, r3, #8
 8016f42:	68fa      	ldr	r2, [r7, #12]
 8016f44:	4313      	orrs	r3, r2
 8016f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	4a10      	ldr	r2, [pc, #64]	@ (8016f8c <TIM_OC4_SetConfig+0x88>)
 8016f4c:	4013      	ands	r3, r2
 8016f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	689b      	ldr	r3, [r3, #8]
 8016f54:	031b      	lsls	r3, r3, #12
 8016f56:	697a      	ldr	r2, [r7, #20]
 8016f58:	4313      	orrs	r3, r2
 8016f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	693a      	ldr	r2, [r7, #16]
 8016f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	68fa      	ldr	r2, [r7, #12]
 8016f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	685a      	ldr	r2, [r3, #4]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	697a      	ldr	r2, [r7, #20]
 8016f74:	621a      	str	r2, [r3, #32]
}
 8016f76:	46c0      	nop			@ (mov r8, r8)
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	b006      	add	sp, #24
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	46c0      	nop			@ (mov r8, r8)
 8016f80:	ffffefff 	.word	0xffffefff
 8016f84:	ffff8fff 	.word	0xffff8fff
 8016f88:	fffffcff 	.word	0xfffffcff
 8016f8c:	ffffdfff 	.word	0xffffdfff

08016f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	221f      	movs	r2, #31
 8016fa0:	4013      	ands	r3, r2
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	409a      	lsls	r2, r3
 8016fa6:	0013      	movs	r3, r2
 8016fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	6a1b      	ldr	r3, [r3, #32]
 8016fae:	697a      	ldr	r2, [r7, #20]
 8016fb0:	43d2      	mvns	r2, r2
 8016fb2:	401a      	ands	r2, r3
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	6a1a      	ldr	r2, [r3, #32]
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	211f      	movs	r1, #31
 8016fc0:	400b      	ands	r3, r1
 8016fc2:	6879      	ldr	r1, [r7, #4]
 8016fc4:	4099      	lsls	r1, r3
 8016fc6:	000b      	movs	r3, r1
 8016fc8:	431a      	orrs	r2, r3
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	621a      	str	r2, [r3, #32]
}
 8016fce:	46c0      	nop			@ (mov r8, r8)
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	b006      	add	sp, #24
 8016fd4:	bd80      	pop	{r7, pc}
	...

08016fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2238      	movs	r2, #56	@ 0x38
 8016fe6:	5c9b      	ldrb	r3, [r3, r2]
 8016fe8:	2b01      	cmp	r3, #1
 8016fea:	d101      	bne.n	8016ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016fec:	2302      	movs	r3, #2
 8016fee:	e047      	b.n	8017080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2238      	movs	r2, #56	@ 0x38
 8016ff4:	2101      	movs	r1, #1
 8016ff6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	2239      	movs	r2, #57	@ 0x39
 8016ffc:	2102      	movs	r1, #2
 8016ffe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	689b      	ldr	r3, [r3, #8]
 801700e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	2270      	movs	r2, #112	@ 0x70
 8017014:	4393      	bics	r3, r2
 8017016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	4313      	orrs	r3, r2
 8017020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	68fa      	ldr	r2, [r7, #12]
 8017028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	681a      	ldr	r2, [r3, #0]
 801702e:	2380      	movs	r3, #128	@ 0x80
 8017030:	05db      	lsls	r3, r3, #23
 8017032:	429a      	cmp	r2, r3
 8017034:	d00e      	beq.n	8017054 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	4a13      	ldr	r2, [pc, #76]	@ (8017088 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801703c:	4293      	cmp	r3, r2
 801703e:	d009      	beq.n	8017054 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	4a11      	ldr	r2, [pc, #68]	@ (801708c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8017046:	4293      	cmp	r3, r2
 8017048:	d004      	beq.n	8017054 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	4a10      	ldr	r2, [pc, #64]	@ (8017090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017050:	4293      	cmp	r3, r2
 8017052:	d10c      	bne.n	801706e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	2280      	movs	r2, #128	@ 0x80
 8017058:	4393      	bics	r3, r2
 801705a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	68ba      	ldr	r2, [r7, #8]
 8017062:	4313      	orrs	r3, r2
 8017064:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	68ba      	ldr	r2, [r7, #8]
 801706c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2239      	movs	r2, #57	@ 0x39
 8017072:	2101      	movs	r1, #1
 8017074:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	2238      	movs	r2, #56	@ 0x38
 801707a:	2100      	movs	r1, #0
 801707c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801707e:	2300      	movs	r3, #0
}
 8017080:	0018      	movs	r0, r3
 8017082:	46bd      	mov	sp, r7
 8017084:	b004      	add	sp, #16
 8017086:	bd80      	pop	{r7, pc}
 8017088:	40000400 	.word	0x40000400
 801708c:	40010800 	.word	0x40010800
 8017090:	40011400 	.word	0x40011400

08017094 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b082      	sub	sp, #8
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
 801709c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	2238      	movs	r2, #56	@ 0x38
 80170a2:	5c9b      	ldrb	r3, [r3, r2]
 80170a4:	2b01      	cmp	r3, #1
 80170a6:	d101      	bne.n	80170ac <HAL_TIMEx_RemapConfig+0x18>
 80170a8:	2302      	movs	r3, #2
 80170aa:	e00c      	b.n	80170c6 <HAL_TIMEx_RemapConfig+0x32>
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2238      	movs	r2, #56	@ 0x38
 80170b0:	2101      	movs	r1, #1
 80170b2:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	683a      	ldr	r2, [r7, #0]
 80170ba:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2238      	movs	r2, #56	@ 0x38
 80170c0:	2100      	movs	r1, #0
 80170c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170c4:	2300      	movs	r3, #0
}
 80170c6:	0018      	movs	r0, r3
 80170c8:	46bd      	mov	sp, r7
 80170ca:	b002      	add	sp, #8
 80170cc:	bd80      	pop	{r7, pc}
	...

080170d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d101      	bne.n	80170e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80170de:	2301      	movs	r3, #1
 80170e0:	e053      	b.n	801718a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d116      	bne.n	8017118 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2278      	movs	r2, #120	@ 0x78
 80170ee:	2100      	movs	r1, #0
 80170f0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	0018      	movs	r0, r3
 80170f6:	f000 fd65 	bl	8017bc4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	22b0      	movs	r2, #176	@ 0xb0
 80170fe:	589b      	ldr	r3, [r3, r2]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d103      	bne.n	801710c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	21b0      	movs	r1, #176	@ 0xb0
 8017108:	4a22      	ldr	r2, [pc, #136]	@ (8017194 <HAL_UART_Init+0xc4>)
 801710a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	22b0      	movs	r2, #176	@ 0xb0
 8017110:	589b      	ldr	r3, [r3, r2]
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	0010      	movs	r0, r2
 8017116:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	2224      	movs	r2, #36	@ 0x24
 801711c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	681a      	ldr	r2, [r3, #0]
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	2101      	movs	r1, #1
 801712a:	438a      	bics	r2, r1
 801712c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	0018      	movs	r0, r3
 8017132:	f000 fd8b 	bl	8017c4c <UART_SetConfig>
 8017136:	0003      	movs	r3, r0
 8017138:	2b01      	cmp	r3, #1
 801713a:	d101      	bne.n	8017140 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801713c:	2301      	movs	r3, #1
 801713e:	e024      	b.n	801718a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017144:	2b00      	cmp	r3, #0
 8017146:	d003      	beq.n	8017150 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	0018      	movs	r0, r3
 801714c:	f001 f81c 	bl	8018188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	685a      	ldr	r2, [r3, #4]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	490f      	ldr	r1, [pc, #60]	@ (8017198 <HAL_UART_Init+0xc8>)
 801715c:	400a      	ands	r2, r1
 801715e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	689a      	ldr	r2, [r3, #8]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	212a      	movs	r1, #42	@ 0x2a
 801716c:	438a      	bics	r2, r1
 801716e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	2101      	movs	r1, #1
 801717c:	430a      	orrs	r2, r1
 801717e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	0018      	movs	r0, r3
 8017184:	f001 f8b4 	bl	80182f0 <UART_CheckIdleState>
 8017188:	0003      	movs	r3, r0
}
 801718a:	0018      	movs	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	b002      	add	sp, #8
 8017190:	bd80      	pop	{r7, pc}
 8017192:	46c0      	nop			@ (mov r8, r8)
 8017194:	0800e1a9 	.word	0x0800e1a9
 8017198:	ffffb7ff 	.word	0xffffb7ff

0801719c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b08a      	sub	sp, #40	@ 0x28
 80171a0:	af02      	add	r7, sp, #8
 80171a2:	60f8      	str	r0, [r7, #12]
 80171a4:	60b9      	str	r1, [r7, #8]
 80171a6:	603b      	str	r3, [r7, #0]
 80171a8:	1dbb      	adds	r3, r7, #6
 80171aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171b0:	2b20      	cmp	r3, #32
 80171b2:	d000      	beq.n	80171b6 <HAL_UART_Transmit+0x1a>
 80171b4:	e08c      	b.n	80172d0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d003      	beq.n	80171c4 <HAL_UART_Transmit+0x28>
 80171bc:	1dbb      	adds	r3, r7, #6
 80171be:	881b      	ldrh	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d101      	bne.n	80171c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80171c4:	2301      	movs	r3, #1
 80171c6:	e084      	b.n	80172d2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	689a      	ldr	r2, [r3, #8]
 80171cc:	2380      	movs	r3, #128	@ 0x80
 80171ce:	015b      	lsls	r3, r3, #5
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d109      	bne.n	80171e8 <HAL_UART_Transmit+0x4c>
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	691b      	ldr	r3, [r3, #16]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d105      	bne.n	80171e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	2201      	movs	r2, #1
 80171e0:	4013      	ands	r3, r2
 80171e2:	d001      	beq.n	80171e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80171e4:	2301      	movs	r3, #1
 80171e6:	e074      	b.n	80172d2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2284      	movs	r2, #132	@ 0x84
 80171ec:	2100      	movs	r1, #0
 80171ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2221      	movs	r2, #33	@ 0x21
 80171f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80171f6:	f7f7 fda5 	bl	800ed44 <HAL_GetTick>
 80171fa:	0003      	movs	r3, r0
 80171fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	1dba      	adds	r2, r7, #6
 8017202:	2150      	movs	r1, #80	@ 0x50
 8017204:	8812      	ldrh	r2, [r2, #0]
 8017206:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	1dba      	adds	r2, r7, #6
 801720c:	2152      	movs	r1, #82	@ 0x52
 801720e:	8812      	ldrh	r2, [r2, #0]
 8017210:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	689a      	ldr	r2, [r3, #8]
 8017216:	2380      	movs	r3, #128	@ 0x80
 8017218:	015b      	lsls	r3, r3, #5
 801721a:	429a      	cmp	r2, r3
 801721c:	d108      	bne.n	8017230 <HAL_UART_Transmit+0x94>
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	691b      	ldr	r3, [r3, #16]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d104      	bne.n	8017230 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017226:	2300      	movs	r3, #0
 8017228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	61bb      	str	r3, [r7, #24]
 801722e:	e003      	b.n	8017238 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017230:	68bb      	ldr	r3, [r7, #8]
 8017232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017234:	2300      	movs	r3, #0
 8017236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017238:	e02f      	b.n	801729a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801723a:	697a      	ldr	r2, [r7, #20]
 801723c:	68f8      	ldr	r0, [r7, #12]
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	0013      	movs	r3, r2
 8017244:	2200      	movs	r2, #0
 8017246:	2180      	movs	r1, #128	@ 0x80
 8017248:	f001 f8fa 	bl	8018440 <UART_WaitOnFlagUntilTimeout>
 801724c:	1e03      	subs	r3, r0, #0
 801724e:	d004      	beq.n	801725a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	2220      	movs	r2, #32
 8017254:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017256:	2303      	movs	r3, #3
 8017258:	e03b      	b.n	80172d2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801725a:	69fb      	ldr	r3, [r7, #28]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d10b      	bne.n	8017278 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017260:	69bb      	ldr	r3, [r7, #24]
 8017262:	881b      	ldrh	r3, [r3, #0]
 8017264:	001a      	movs	r2, r3
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	05d2      	lsls	r2, r2, #23
 801726c:	0dd2      	lsrs	r2, r2, #23
 801726e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017270:	69bb      	ldr	r3, [r7, #24]
 8017272:	3302      	adds	r3, #2
 8017274:	61bb      	str	r3, [r7, #24]
 8017276:	e007      	b.n	8017288 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	781a      	ldrb	r2, [r3, #0]
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017282:	69fb      	ldr	r3, [r7, #28]
 8017284:	3301      	adds	r3, #1
 8017286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2252      	movs	r2, #82	@ 0x52
 801728c:	5a9b      	ldrh	r3, [r3, r2]
 801728e:	b29b      	uxth	r3, r3
 8017290:	3b01      	subs	r3, #1
 8017292:	b299      	uxth	r1, r3
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	2252      	movs	r2, #82	@ 0x52
 8017298:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	2252      	movs	r2, #82	@ 0x52
 801729e:	5a9b      	ldrh	r3, [r3, r2]
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d1c9      	bne.n	801723a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80172a6:	697a      	ldr	r2, [r7, #20]
 80172a8:	68f8      	ldr	r0, [r7, #12]
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	9300      	str	r3, [sp, #0]
 80172ae:	0013      	movs	r3, r2
 80172b0:	2200      	movs	r2, #0
 80172b2:	2140      	movs	r1, #64	@ 0x40
 80172b4:	f001 f8c4 	bl	8018440 <UART_WaitOnFlagUntilTimeout>
 80172b8:	1e03      	subs	r3, r0, #0
 80172ba:	d004      	beq.n	80172c6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2220      	movs	r2, #32
 80172c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80172c2:	2303      	movs	r3, #3
 80172c4:	e005      	b.n	80172d2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2220      	movs	r2, #32
 80172ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80172cc:	2300      	movs	r3, #0
 80172ce:	e000      	b.n	80172d2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80172d0:	2302      	movs	r3, #2
  }
}
 80172d2:	0018      	movs	r0, r3
 80172d4:	46bd      	mov	sp, r7
 80172d6:	b008      	add	sp, #32
 80172d8:	bd80      	pop	{r7, pc}
	...

080172dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b088      	sub	sp, #32
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	60b9      	str	r1, [r7, #8]
 80172e6:	1dbb      	adds	r3, r7, #6
 80172e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	2280      	movs	r2, #128	@ 0x80
 80172ee:	589b      	ldr	r3, [r3, r2]
 80172f0:	2b20      	cmp	r3, #32
 80172f2:	d14a      	bne.n	801738a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d003      	beq.n	8017302 <HAL_UART_Receive_IT+0x26>
 80172fa:	1dbb      	adds	r3, r7, #6
 80172fc:	881b      	ldrh	r3, [r3, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d101      	bne.n	8017306 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017302:	2301      	movs	r3, #1
 8017304:	e042      	b.n	801738c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	689a      	ldr	r2, [r3, #8]
 801730a:	2380      	movs	r3, #128	@ 0x80
 801730c:	015b      	lsls	r3, r3, #5
 801730e:	429a      	cmp	r2, r3
 8017310:	d109      	bne.n	8017326 <HAL_UART_Receive_IT+0x4a>
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	691b      	ldr	r3, [r3, #16]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d105      	bne.n	8017326 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	2201      	movs	r2, #1
 801731e:	4013      	ands	r3, r2
 8017320:	d001      	beq.n	8017326 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017322:	2301      	movs	r3, #1
 8017324:	e032      	b.n	801738c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	2200      	movs	r2, #0
 801732a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4a18      	ldr	r2, [pc, #96]	@ (8017394 <HAL_UART_Receive_IT+0xb8>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d020      	beq.n	8017378 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	685a      	ldr	r2, [r3, #4]
 801733c:	2380      	movs	r3, #128	@ 0x80
 801733e:	041b      	lsls	r3, r3, #16
 8017340:	4013      	ands	r3, r2
 8017342:	d019      	beq.n	8017378 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017344:	f3ef 8310 	mrs	r3, PRIMASK
 8017348:	613b      	str	r3, [r7, #16]
  return(result);
 801734a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801734c:	61fb      	str	r3, [r7, #28]
 801734e:	2301      	movs	r3, #1
 8017350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	f383 8810 	msr	PRIMASK, r3
}
 8017358:	46c0      	nop			@ (mov r8, r8)
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2180      	movs	r1, #128	@ 0x80
 8017366:	04c9      	lsls	r1, r1, #19
 8017368:	430a      	orrs	r2, r1
 801736a:	601a      	str	r2, [r3, #0]
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017370:	69bb      	ldr	r3, [r7, #24]
 8017372:	f383 8810 	msr	PRIMASK, r3
}
 8017376:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017378:	1dbb      	adds	r3, r7, #6
 801737a:	881a      	ldrh	r2, [r3, #0]
 801737c:	68b9      	ldr	r1, [r7, #8]
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	0018      	movs	r0, r3
 8017382:	f001 f8c7 	bl	8018514 <UART_Start_Receive_IT>
 8017386:	0003      	movs	r3, r0
 8017388:	e000      	b.n	801738c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801738a:	2302      	movs	r3, #2
  }
}
 801738c:	0018      	movs	r0, r3
 801738e:	46bd      	mov	sp, r7
 8017390:	b008      	add	sp, #32
 8017392:	bd80      	pop	{r7, pc}
 8017394:	40004800 	.word	0x40004800

08017398 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b088      	sub	sp, #32
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	1dbb      	adds	r3, r7, #6
 80173a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80173aa:	2b20      	cmp	r3, #32
 80173ac:	d000      	beq.n	80173b0 <HAL_UART_Transmit_DMA+0x18>
 80173ae:	e077      	b.n	80174a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d003      	beq.n	80173be <HAL_UART_Transmit_DMA+0x26>
 80173b6:	1dbb      	adds	r3, r7, #6
 80173b8:	881b      	ldrh	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80173be:	2301      	movs	r3, #1
 80173c0:	e06f      	b.n	80174a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	689a      	ldr	r2, [r3, #8]
 80173c6:	2380      	movs	r3, #128	@ 0x80
 80173c8:	015b      	lsls	r3, r3, #5
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d109      	bne.n	80173e2 <HAL_UART_Transmit_DMA+0x4a>
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	691b      	ldr	r3, [r3, #16]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d105      	bne.n	80173e2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	2201      	movs	r2, #1
 80173da:	4013      	ands	r3, r2
 80173dc:	d001      	beq.n	80173e2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80173de:	2301      	movs	r3, #1
 80173e0:	e05f      	b.n	80174a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	68ba      	ldr	r2, [r7, #8]
 80173e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	1dba      	adds	r2, r7, #6
 80173ec:	2150      	movs	r1, #80	@ 0x50
 80173ee:	8812      	ldrh	r2, [r2, #0]
 80173f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	1dba      	adds	r2, r7, #6
 80173f6:	2152      	movs	r1, #82	@ 0x52
 80173f8:	8812      	ldrh	r2, [r2, #0]
 80173fa:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2284      	movs	r2, #132	@ 0x84
 8017400:	2100      	movs	r1, #0
 8017402:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	2221      	movs	r2, #33	@ 0x21
 8017408:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801740e:	2b00      	cmp	r3, #0
 8017410:	d027      	beq.n	8017462 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017416:	4a25      	ldr	r2, [pc, #148]	@ (80174ac <HAL_UART_Transmit_DMA+0x114>)
 8017418:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801741e:	4a24      	ldr	r2, [pc, #144]	@ (80174b0 <HAL_UART_Transmit_DMA+0x118>)
 8017420:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017426:	4a23      	ldr	r2, [pc, #140]	@ (80174b4 <HAL_UART_Transmit_DMA+0x11c>)
 8017428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801742e:	2200      	movs	r2, #0
 8017430:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801743a:	0019      	movs	r1, r3
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	3328      	adds	r3, #40	@ 0x28
 8017442:	001a      	movs	r2, r3
 8017444:	1dbb      	adds	r3, r7, #6
 8017446:	881b      	ldrh	r3, [r3, #0]
 8017448:	f7f8 f9ce 	bl	800f7e8 <HAL_DMA_Start_IT>
 801744c:	1e03      	subs	r3, r0, #0
 801744e:	d008      	beq.n	8017462 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2284      	movs	r2, #132	@ 0x84
 8017454:	2110      	movs	r1, #16
 8017456:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	2220      	movs	r2, #32
 801745c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801745e:	2301      	movs	r3, #1
 8017460:	e01f      	b.n	80174a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	2240      	movs	r2, #64	@ 0x40
 8017468:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801746a:	f3ef 8310 	mrs	r3, PRIMASK
 801746e:	613b      	str	r3, [r7, #16]
  return(result);
 8017470:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017472:	61fb      	str	r3, [r7, #28]
 8017474:	2301      	movs	r3, #1
 8017476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	f383 8810 	msr	PRIMASK, r3
}
 801747e:	46c0      	nop			@ (mov r8, r8)
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	689a      	ldr	r2, [r3, #8]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2180      	movs	r1, #128	@ 0x80
 801748c:	430a      	orrs	r2, r1
 801748e:	609a      	str	r2, [r3, #8]
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	f383 8810 	msr	PRIMASK, r3
}
 801749a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801749c:	2300      	movs	r3, #0
 801749e:	e000      	b.n	80174a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80174a0:	2302      	movs	r3, #2
  }
}
 80174a2:	0018      	movs	r0, r3
 80174a4:	46bd      	mov	sp, r7
 80174a6:	b008      	add	sp, #32
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	46c0      	nop			@ (mov r8, r8)
 80174ac:	080188f9 	.word	0x080188f9
 80174b0:	08018995 	.word	0x08018995
 80174b4:	08018b35 	.word	0x08018b35

080174b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b088      	sub	sp, #32
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	1dbb      	adds	r3, r7, #6
 80174c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2280      	movs	r2, #128	@ 0x80
 80174ca:	589b      	ldr	r3, [r3, r2]
 80174cc:	2b20      	cmp	r3, #32
 80174ce:	d14a      	bne.n	8017566 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d003      	beq.n	80174de <HAL_UART_Receive_DMA+0x26>
 80174d6:	1dbb      	adds	r3, r7, #6
 80174d8:	881b      	ldrh	r3, [r3, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d101      	bne.n	80174e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80174de:	2301      	movs	r3, #1
 80174e0:	e042      	b.n	8017568 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	689a      	ldr	r2, [r3, #8]
 80174e6:	2380      	movs	r3, #128	@ 0x80
 80174e8:	015b      	lsls	r3, r3, #5
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d109      	bne.n	8017502 <HAL_UART_Receive_DMA+0x4a>
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	691b      	ldr	r3, [r3, #16]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d105      	bne.n	8017502 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	2201      	movs	r2, #1
 80174fa:	4013      	ands	r3, r2
 80174fc:	d001      	beq.n	8017502 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80174fe:	2301      	movs	r3, #1
 8017500:	e032      	b.n	8017568 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	2200      	movs	r2, #0
 8017506:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	4a18      	ldr	r2, [pc, #96]	@ (8017570 <HAL_UART_Receive_DMA+0xb8>)
 801750e:	4293      	cmp	r3, r2
 8017510:	d020      	beq.n	8017554 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	685a      	ldr	r2, [r3, #4]
 8017518:	2380      	movs	r3, #128	@ 0x80
 801751a:	041b      	lsls	r3, r3, #16
 801751c:	4013      	ands	r3, r2
 801751e:	d019      	beq.n	8017554 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017520:	f3ef 8310 	mrs	r3, PRIMASK
 8017524:	613b      	str	r3, [r7, #16]
  return(result);
 8017526:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017528:	61fb      	str	r3, [r7, #28]
 801752a:	2301      	movs	r3, #1
 801752c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	f383 8810 	msr	PRIMASK, r3
}
 8017534:	46c0      	nop			@ (mov r8, r8)
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2180      	movs	r1, #128	@ 0x80
 8017542:	04c9      	lsls	r1, r1, #19
 8017544:	430a      	orrs	r2, r1
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	69fb      	ldr	r3, [r7, #28]
 801754a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801754c:	69bb      	ldr	r3, [r7, #24]
 801754e:	f383 8810 	msr	PRIMASK, r3
}
 8017552:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017554:	1dbb      	adds	r3, r7, #6
 8017556:	881a      	ldrh	r2, [r3, #0]
 8017558:	68b9      	ldr	r1, [r7, #8]
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	0018      	movs	r0, r3
 801755e:	f001 f8a3 	bl	80186a8 <UART_Start_Receive_DMA>
 8017562:	0003      	movs	r3, r0
 8017564:	e000      	b.n	8017568 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017566:	2302      	movs	r3, #2
  }
}
 8017568:	0018      	movs	r0, r3
 801756a:	46bd      	mov	sp, r7
 801756c:	b008      	add	sp, #32
 801756e:	bd80      	pop	{r7, pc}
 8017570:	40004800 	.word	0x40004800

08017574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017574:	b590      	push	{r4, r7, lr}
 8017576:	b0ab      	sub	sp, #172	@ 0xac
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	69db      	ldr	r3, [r3, #28]
 8017582:	22a4      	movs	r2, #164	@ 0xa4
 8017584:	18b9      	adds	r1, r7, r2
 8017586:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	20a0      	movs	r0, #160	@ 0xa0
 8017590:	1839      	adds	r1, r7, r0
 8017592:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	689b      	ldr	r3, [r3, #8]
 801759a:	219c      	movs	r1, #156	@ 0x9c
 801759c:	1879      	adds	r1, r7, r1
 801759e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80175a0:	0011      	movs	r1, r2
 80175a2:	18bb      	adds	r3, r7, r2
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	4a9c      	ldr	r2, [pc, #624]	@ (8017818 <HAL_UART_IRQHandler+0x2a4>)
 80175a8:	4013      	ands	r3, r2
 80175aa:	2298      	movs	r2, #152	@ 0x98
 80175ac:	18bc      	adds	r4, r7, r2
 80175ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80175b0:	18bb      	adds	r3, r7, r2
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d114      	bne.n	80175e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80175b8:	187b      	adds	r3, r7, r1
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2220      	movs	r2, #32
 80175be:	4013      	ands	r3, r2
 80175c0:	d00f      	beq.n	80175e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80175c2:	183b      	adds	r3, r7, r0
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	2220      	movs	r2, #32
 80175c8:	4013      	ands	r3, r2
 80175ca:	d00a      	beq.n	80175e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d100      	bne.n	80175d6 <HAL_UART_IRQHandler+0x62>
 80175d4:	e2aa      	b.n	8017b2c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	0010      	movs	r0, r2
 80175de:	4798      	blx	r3
      }
      return;
 80175e0:	e2a4      	b.n	8017b2c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80175e2:	2398      	movs	r3, #152	@ 0x98
 80175e4:	18fb      	adds	r3, r7, r3
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d100      	bne.n	80175ee <HAL_UART_IRQHandler+0x7a>
 80175ec:	e11a      	b.n	8017824 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80175ee:	239c      	movs	r3, #156	@ 0x9c
 80175f0:	18fb      	adds	r3, r7, r3
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	2201      	movs	r2, #1
 80175f6:	4013      	ands	r3, r2
 80175f8:	d106      	bne.n	8017608 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80175fa:	23a0      	movs	r3, #160	@ 0xa0
 80175fc:	18fb      	adds	r3, r7, r3
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	4a86      	ldr	r2, [pc, #536]	@ (801781c <HAL_UART_IRQHandler+0x2a8>)
 8017602:	4013      	ands	r3, r2
 8017604:	d100      	bne.n	8017608 <HAL_UART_IRQHandler+0x94>
 8017606:	e10d      	b.n	8017824 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017608:	23a4      	movs	r3, #164	@ 0xa4
 801760a:	18fb      	adds	r3, r7, r3
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	2201      	movs	r2, #1
 8017610:	4013      	ands	r3, r2
 8017612:	d012      	beq.n	801763a <HAL_UART_IRQHandler+0xc6>
 8017614:	23a0      	movs	r3, #160	@ 0xa0
 8017616:	18fb      	adds	r3, r7, r3
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	2380      	movs	r3, #128	@ 0x80
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	4013      	ands	r3, r2
 8017620:	d00b      	beq.n	801763a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	2201      	movs	r2, #1
 8017628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	2284      	movs	r2, #132	@ 0x84
 801762e:	589b      	ldr	r3, [r3, r2]
 8017630:	2201      	movs	r2, #1
 8017632:	431a      	orrs	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2184      	movs	r1, #132	@ 0x84
 8017638:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801763a:	23a4      	movs	r3, #164	@ 0xa4
 801763c:	18fb      	adds	r3, r7, r3
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	2202      	movs	r2, #2
 8017642:	4013      	ands	r3, r2
 8017644:	d011      	beq.n	801766a <HAL_UART_IRQHandler+0xf6>
 8017646:	239c      	movs	r3, #156	@ 0x9c
 8017648:	18fb      	adds	r3, r7, r3
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2201      	movs	r2, #1
 801764e:	4013      	ands	r3, r2
 8017650:	d00b      	beq.n	801766a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2202      	movs	r2, #2
 8017658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2284      	movs	r2, #132	@ 0x84
 801765e:	589b      	ldr	r3, [r3, r2]
 8017660:	2204      	movs	r2, #4
 8017662:	431a      	orrs	r2, r3
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2184      	movs	r1, #132	@ 0x84
 8017668:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801766a:	23a4      	movs	r3, #164	@ 0xa4
 801766c:	18fb      	adds	r3, r7, r3
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2204      	movs	r2, #4
 8017672:	4013      	ands	r3, r2
 8017674:	d011      	beq.n	801769a <HAL_UART_IRQHandler+0x126>
 8017676:	239c      	movs	r3, #156	@ 0x9c
 8017678:	18fb      	adds	r3, r7, r3
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2201      	movs	r2, #1
 801767e:	4013      	ands	r3, r2
 8017680:	d00b      	beq.n	801769a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	2204      	movs	r2, #4
 8017688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2284      	movs	r2, #132	@ 0x84
 801768e:	589b      	ldr	r3, [r3, r2]
 8017690:	2202      	movs	r2, #2
 8017692:	431a      	orrs	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2184      	movs	r1, #132	@ 0x84
 8017698:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801769a:	23a4      	movs	r3, #164	@ 0xa4
 801769c:	18fb      	adds	r3, r7, r3
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	2208      	movs	r2, #8
 80176a2:	4013      	ands	r3, r2
 80176a4:	d017      	beq.n	80176d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80176a6:	23a0      	movs	r3, #160	@ 0xa0
 80176a8:	18fb      	adds	r3, r7, r3
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2220      	movs	r2, #32
 80176ae:	4013      	ands	r3, r2
 80176b0:	d105      	bne.n	80176be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80176b2:	239c      	movs	r3, #156	@ 0x9c
 80176b4:	18fb      	adds	r3, r7, r3
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2201      	movs	r2, #1
 80176ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80176bc:	d00b      	beq.n	80176d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	2208      	movs	r2, #8
 80176c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2284      	movs	r2, #132	@ 0x84
 80176ca:	589b      	ldr	r3, [r3, r2]
 80176cc:	2208      	movs	r2, #8
 80176ce:	431a      	orrs	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2184      	movs	r1, #132	@ 0x84
 80176d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80176d6:	23a4      	movs	r3, #164	@ 0xa4
 80176d8:	18fb      	adds	r3, r7, r3
 80176da:	681a      	ldr	r2, [r3, #0]
 80176dc:	2380      	movs	r3, #128	@ 0x80
 80176de:	011b      	lsls	r3, r3, #4
 80176e0:	4013      	ands	r3, r2
 80176e2:	d013      	beq.n	801770c <HAL_UART_IRQHandler+0x198>
 80176e4:	23a0      	movs	r3, #160	@ 0xa0
 80176e6:	18fb      	adds	r3, r7, r3
 80176e8:	681a      	ldr	r2, [r3, #0]
 80176ea:	2380      	movs	r3, #128	@ 0x80
 80176ec:	04db      	lsls	r3, r3, #19
 80176ee:	4013      	ands	r3, r2
 80176f0:	d00c      	beq.n	801770c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	2280      	movs	r2, #128	@ 0x80
 80176f8:	0112      	lsls	r2, r2, #4
 80176fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	2284      	movs	r2, #132	@ 0x84
 8017700:	589b      	ldr	r3, [r3, r2]
 8017702:	2220      	movs	r2, #32
 8017704:	431a      	orrs	r2, r3
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2184      	movs	r1, #132	@ 0x84
 801770a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2284      	movs	r2, #132	@ 0x84
 8017710:	589b      	ldr	r3, [r3, r2]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d100      	bne.n	8017718 <HAL_UART_IRQHandler+0x1a4>
 8017716:	e20b      	b.n	8017b30 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017718:	23a4      	movs	r3, #164	@ 0xa4
 801771a:	18fb      	adds	r3, r7, r3
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	2220      	movs	r2, #32
 8017720:	4013      	ands	r3, r2
 8017722:	d00e      	beq.n	8017742 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017724:	23a0      	movs	r3, #160	@ 0xa0
 8017726:	18fb      	adds	r3, r7, r3
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2220      	movs	r2, #32
 801772c:	4013      	ands	r3, r2
 801772e:	d008      	beq.n	8017742 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017734:	2b00      	cmp	r3, #0
 8017736:	d004      	beq.n	8017742 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801773c:	687a      	ldr	r2, [r7, #4]
 801773e:	0010      	movs	r0, r2
 8017740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2284      	movs	r2, #132	@ 0x84
 8017746:	589b      	ldr	r3, [r3, r2]
 8017748:	2194      	movs	r1, #148	@ 0x94
 801774a:	187a      	adds	r2, r7, r1
 801774c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	689b      	ldr	r3, [r3, #8]
 8017754:	2240      	movs	r2, #64	@ 0x40
 8017756:	4013      	ands	r3, r2
 8017758:	2b40      	cmp	r3, #64	@ 0x40
 801775a:	d004      	beq.n	8017766 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801775c:	187b      	adds	r3, r7, r1
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	2228      	movs	r2, #40	@ 0x28
 8017762:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017764:	d04b      	beq.n	80177fe <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	0018      	movs	r0, r3
 801776a:	f001 f861 	bl	8018830 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	689b      	ldr	r3, [r3, #8]
 8017774:	2240      	movs	r2, #64	@ 0x40
 8017776:	4013      	ands	r3, r2
 8017778:	2b40      	cmp	r3, #64	@ 0x40
 801777a:	d139      	bne.n	80177f0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801777c:	f3ef 8310 	mrs	r3, PRIMASK
 8017780:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017784:	2090      	movs	r0, #144	@ 0x90
 8017786:	183a      	adds	r2, r7, r0
 8017788:	6013      	str	r3, [r2, #0]
 801778a:	2301      	movs	r3, #1
 801778c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801778e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017790:	f383 8810 	msr	PRIMASK, r3
}
 8017794:	46c0      	nop			@ (mov r8, r8)
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	689a      	ldr	r2, [r3, #8]
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2140      	movs	r1, #64	@ 0x40
 80177a2:	438a      	bics	r2, r1
 80177a4:	609a      	str	r2, [r3, #8]
 80177a6:	183b      	adds	r3, r7, r0
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80177ae:	f383 8810 	msr	PRIMASK, r3
}
 80177b2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d012      	beq.n	80177e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177c0:	4a17      	ldr	r2, [pc, #92]	@ (8017820 <HAL_UART_IRQHandler+0x2ac>)
 80177c2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177c8:	0018      	movs	r0, r3
 80177ca:	f7f8 f8b3 	bl	800f934 <HAL_DMA_Abort_IT>
 80177ce:	1e03      	subs	r3, r0, #0
 80177d0:	d020      	beq.n	8017814 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177dc:	0018      	movs	r0, r3
 80177de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177e0:	e018      	b.n	8017814 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	2298      	movs	r2, #152	@ 0x98
 80177e6:	589b      	ldr	r3, [r3, r2]
 80177e8:	687a      	ldr	r2, [r7, #4]
 80177ea:	0010      	movs	r0, r2
 80177ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177ee:	e011      	b.n	8017814 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2298      	movs	r2, #152	@ 0x98
 80177f4:	589b      	ldr	r3, [r3, r2]
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	0010      	movs	r0, r2
 80177fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177fc:	e00a      	b.n	8017814 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	2298      	movs	r2, #152	@ 0x98
 8017802:	589b      	ldr	r3, [r3, r2]
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	0010      	movs	r0, r2
 8017808:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2284      	movs	r2, #132	@ 0x84
 801780e:	2100      	movs	r1, #0
 8017810:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017812:	e18d      	b.n	8017b30 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017814:	46c0      	nop			@ (mov r8, r8)
    return;
 8017816:	e18b      	b.n	8017b30 <HAL_UART_IRQHandler+0x5bc>
 8017818:	0000080f 	.word	0x0000080f
 801781c:	04000120 	.word	0x04000120
 8017820:	08018bbd 	.word	0x08018bbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017828:	2b01      	cmp	r3, #1
 801782a:	d000      	beq.n	801782e <HAL_UART_IRQHandler+0x2ba>
 801782c:	e13d      	b.n	8017aaa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801782e:	23a4      	movs	r3, #164	@ 0xa4
 8017830:	18fb      	adds	r3, r7, r3
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2210      	movs	r2, #16
 8017836:	4013      	ands	r3, r2
 8017838:	d100      	bne.n	801783c <HAL_UART_IRQHandler+0x2c8>
 801783a:	e136      	b.n	8017aaa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801783c:	23a0      	movs	r3, #160	@ 0xa0
 801783e:	18fb      	adds	r3, r7, r3
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2210      	movs	r2, #16
 8017844:	4013      	ands	r3, r2
 8017846:	d100      	bne.n	801784a <HAL_UART_IRQHandler+0x2d6>
 8017848:	e12f      	b.n	8017aaa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2210      	movs	r2, #16
 8017850:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	689b      	ldr	r3, [r3, #8]
 8017858:	2240      	movs	r2, #64	@ 0x40
 801785a:	4013      	ands	r3, r2
 801785c:	2b40      	cmp	r3, #64	@ 0x40
 801785e:	d000      	beq.n	8017862 <HAL_UART_IRQHandler+0x2ee>
 8017860:	e0a2      	b.n	80179a8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	685a      	ldr	r2, [r3, #4]
 801786a:	217e      	movs	r1, #126	@ 0x7e
 801786c:	187b      	adds	r3, r7, r1
 801786e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017870:	187b      	adds	r3, r7, r1
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d100      	bne.n	801787a <HAL_UART_IRQHandler+0x306>
 8017878:	e15c      	b.n	8017b34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2258      	movs	r2, #88	@ 0x58
 801787e:	5a9b      	ldrh	r3, [r3, r2]
 8017880:	187a      	adds	r2, r7, r1
 8017882:	8812      	ldrh	r2, [r2, #0]
 8017884:	429a      	cmp	r2, r3
 8017886:	d300      	bcc.n	801788a <HAL_UART_IRQHandler+0x316>
 8017888:	e154      	b.n	8017b34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	187a      	adds	r2, r7, r1
 801788e:	215a      	movs	r1, #90	@ 0x5a
 8017890:	8812      	ldrh	r2, [r2, #0]
 8017892:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2220      	movs	r2, #32
 801789e:	4013      	ands	r3, r2
 80178a0:	d16f      	bne.n	8017982 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178a2:	f3ef 8310 	mrs	r3, PRIMASK
 80178a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80178a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80178aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80178ac:	2301      	movs	r3, #1
 80178ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178b2:	f383 8810 	msr	PRIMASK, r3
}
 80178b6:	46c0      	nop			@ (mov r8, r8)
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	681a      	ldr	r2, [r3, #0]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	49a0      	ldr	r1, [pc, #640]	@ (8017b44 <HAL_UART_IRQHandler+0x5d0>)
 80178c4:	400a      	ands	r2, r1
 80178c6:	601a      	str	r2, [r3, #0]
 80178c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80178ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178ce:	f383 8810 	msr	PRIMASK, r3
}
 80178d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178d4:	f3ef 8310 	mrs	r3, PRIMASK
 80178d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80178da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80178dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80178de:	2301      	movs	r3, #1
 80178e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80178e4:	f383 8810 	msr	PRIMASK, r3
}
 80178e8:	46c0      	nop			@ (mov r8, r8)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	689a      	ldr	r2, [r3, #8]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2101      	movs	r1, #1
 80178f6:	438a      	bics	r2, r1
 80178f8:	609a      	str	r2, [r3, #8]
 80178fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80178fc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017900:	f383 8810 	msr	PRIMASK, r3
}
 8017904:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017906:	f3ef 8310 	mrs	r3, PRIMASK
 801790a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801790c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801790e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017910:	2301      	movs	r3, #1
 8017912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017916:	f383 8810 	msr	PRIMASK, r3
}
 801791a:	46c0      	nop			@ (mov r8, r8)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	689a      	ldr	r2, [r3, #8]
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	2140      	movs	r1, #64	@ 0x40
 8017928:	438a      	bics	r2, r1
 801792a:	609a      	str	r2, [r3, #8]
 801792c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801792e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017932:	f383 8810 	msr	PRIMASK, r3
}
 8017936:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2280      	movs	r2, #128	@ 0x80
 801793c:	2120      	movs	r1, #32
 801793e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2200      	movs	r2, #0
 8017944:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017946:	f3ef 8310 	mrs	r3, PRIMASK
 801794a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801794c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801794e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017950:	2301      	movs	r3, #1
 8017952:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017956:	f383 8810 	msr	PRIMASK, r3
}
 801795a:	46c0      	nop			@ (mov r8, r8)
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	681a      	ldr	r2, [r3, #0]
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2110      	movs	r1, #16
 8017968:	438a      	bics	r2, r1
 801796a:	601a      	str	r2, [r3, #0]
 801796c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801796e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017972:	f383 8810 	msr	PRIMASK, r3
}
 8017976:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801797c:	0018      	movs	r0, r3
 801797e:	f7f7 ff99 	bl	800f8b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2202      	movs	r2, #2
 8017986:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	22ac      	movs	r2, #172	@ 0xac
 801798c:	589b      	ldr	r3, [r3, r2]
 801798e:	687a      	ldr	r2, [r7, #4]
 8017990:	2158      	movs	r1, #88	@ 0x58
 8017992:	5a51      	ldrh	r1, [r2, r1]
 8017994:	687a      	ldr	r2, [r7, #4]
 8017996:	205a      	movs	r0, #90	@ 0x5a
 8017998:	5a12      	ldrh	r2, [r2, r0]
 801799a:	b292      	uxth	r2, r2
 801799c:	1a8a      	subs	r2, r1, r2
 801799e:	b291      	uxth	r1, r2
 80179a0:	687a      	ldr	r2, [r7, #4]
 80179a2:	0010      	movs	r0, r2
 80179a4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80179a6:	e0c5      	b.n	8017b34 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2258      	movs	r2, #88	@ 0x58
 80179ac:	5a99      	ldrh	r1, [r3, r2]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	225a      	movs	r2, #90	@ 0x5a
 80179b2:	5a9b      	ldrh	r3, [r3, r2]
 80179b4:	b29a      	uxth	r2, r3
 80179b6:	208e      	movs	r0, #142	@ 0x8e
 80179b8:	183b      	adds	r3, r7, r0
 80179ba:	1a8a      	subs	r2, r1, r2
 80179bc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	225a      	movs	r2, #90	@ 0x5a
 80179c2:	5a9b      	ldrh	r3, [r3, r2]
 80179c4:	b29b      	uxth	r3, r3
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d100      	bne.n	80179cc <HAL_UART_IRQHandler+0x458>
 80179ca:	e0b5      	b.n	8017b38 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80179cc:	183b      	adds	r3, r7, r0
 80179ce:	881b      	ldrh	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d100      	bne.n	80179d6 <HAL_UART_IRQHandler+0x462>
 80179d4:	e0b0      	b.n	8017b38 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179d6:	f3ef 8310 	mrs	r3, PRIMASK
 80179da:	60fb      	str	r3, [r7, #12]
  return(result);
 80179dc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80179de:	2488      	movs	r4, #136	@ 0x88
 80179e0:	193a      	adds	r2, r7, r4
 80179e2:	6013      	str	r3, [r2, #0]
 80179e4:	2301      	movs	r3, #1
 80179e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	f383 8810 	msr	PRIMASK, r3
}
 80179ee:	46c0      	nop			@ (mov r8, r8)
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	4953      	ldr	r1, [pc, #332]	@ (8017b48 <HAL_UART_IRQHandler+0x5d4>)
 80179fc:	400a      	ands	r2, r1
 80179fe:	601a      	str	r2, [r3, #0]
 8017a00:	193b      	adds	r3, r7, r4
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	f383 8810 	msr	PRIMASK, r3
}
 8017a0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8017a12:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a14:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a16:	2484      	movs	r4, #132	@ 0x84
 8017a18:	193a      	adds	r2, r7, r4
 8017a1a:	6013      	str	r3, [r2, #0]
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a20:	69fb      	ldr	r3, [r7, #28]
 8017a22:	f383 8810 	msr	PRIMASK, r3
}
 8017a26:	46c0      	nop			@ (mov r8, r8)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	689a      	ldr	r2, [r3, #8]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	2101      	movs	r1, #1
 8017a34:	438a      	bics	r2, r1
 8017a36:	609a      	str	r2, [r3, #8]
 8017a38:	193b      	adds	r3, r7, r4
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a3e:	6a3b      	ldr	r3, [r7, #32]
 8017a40:	f383 8810 	msr	PRIMASK, r3
}
 8017a44:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	2280      	movs	r2, #128	@ 0x80
 8017a4a:	2120      	movs	r1, #32
 8017a4c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2200      	movs	r2, #0
 8017a52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2200      	movs	r2, #0
 8017a58:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8017a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a62:	2480      	movs	r4, #128	@ 0x80
 8017a64:	193a      	adds	r2, r7, r4
 8017a66:	6013      	str	r3, [r2, #0]
 8017a68:	2301      	movs	r3, #1
 8017a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a6e:	f383 8810 	msr	PRIMASK, r3
}
 8017a72:	46c0      	nop			@ (mov r8, r8)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	681a      	ldr	r2, [r3, #0]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2110      	movs	r1, #16
 8017a80:	438a      	bics	r2, r1
 8017a82:	601a      	str	r2, [r3, #0]
 8017a84:	193b      	adds	r3, r7, r4
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a8c:	f383 8810 	msr	PRIMASK, r3
}
 8017a90:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2202      	movs	r2, #2
 8017a96:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	22ac      	movs	r2, #172	@ 0xac
 8017a9c:	589b      	ldr	r3, [r3, r2]
 8017a9e:	183a      	adds	r2, r7, r0
 8017aa0:	8811      	ldrh	r1, [r2, #0]
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	0010      	movs	r0, r2
 8017aa6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017aa8:	e046      	b.n	8017b38 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017aaa:	23a4      	movs	r3, #164	@ 0xa4
 8017aac:	18fb      	adds	r3, r7, r3
 8017aae:	681a      	ldr	r2, [r3, #0]
 8017ab0:	2380      	movs	r3, #128	@ 0x80
 8017ab2:	035b      	lsls	r3, r3, #13
 8017ab4:	4013      	ands	r3, r2
 8017ab6:	d012      	beq.n	8017ade <HAL_UART_IRQHandler+0x56a>
 8017ab8:	239c      	movs	r3, #156	@ 0x9c
 8017aba:	18fb      	adds	r3, r7, r3
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	2380      	movs	r3, #128	@ 0x80
 8017ac0:	03db      	lsls	r3, r3, #15
 8017ac2:	4013      	ands	r3, r2
 8017ac4:	d00b      	beq.n	8017ade <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2280      	movs	r2, #128	@ 0x80
 8017acc:	0352      	lsls	r2, r2, #13
 8017ace:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	22a8      	movs	r2, #168	@ 0xa8
 8017ad4:	589b      	ldr	r3, [r3, r2]
 8017ad6:	687a      	ldr	r2, [r7, #4]
 8017ad8:	0010      	movs	r0, r2
 8017ada:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017adc:	e02f      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017ade:	23a4      	movs	r3, #164	@ 0xa4
 8017ae0:	18fb      	adds	r3, r7, r3
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2280      	movs	r2, #128	@ 0x80
 8017ae6:	4013      	ands	r3, r2
 8017ae8:	d00f      	beq.n	8017b0a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017aea:	23a0      	movs	r3, #160	@ 0xa0
 8017aec:	18fb      	adds	r3, r7, r3
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2280      	movs	r2, #128	@ 0x80
 8017af2:	4013      	ands	r3, r2
 8017af4:	d009      	beq.n	8017b0a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d01e      	beq.n	8017b3c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b02:	687a      	ldr	r2, [r7, #4]
 8017b04:	0010      	movs	r0, r2
 8017b06:	4798      	blx	r3
    }
    return;
 8017b08:	e018      	b.n	8017b3c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017b0a:	23a4      	movs	r3, #164	@ 0xa4
 8017b0c:	18fb      	adds	r3, r7, r3
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2240      	movs	r2, #64	@ 0x40
 8017b12:	4013      	ands	r3, r2
 8017b14:	d013      	beq.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
 8017b16:	23a0      	movs	r3, #160	@ 0xa0
 8017b18:	18fb      	adds	r3, r7, r3
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2240      	movs	r2, #64	@ 0x40
 8017b1e:	4013      	ands	r3, r2
 8017b20:	d00d      	beq.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	0018      	movs	r0, r3
 8017b26:	f001 f862 	bl	8018bee <UART_EndTransmit_IT>
    return;
 8017b2a:	e008      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b2c:	46c0      	nop			@ (mov r8, r8)
 8017b2e:	e006      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017b30:	46c0      	nop			@ (mov r8, r8)
 8017b32:	e004      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b34:	46c0      	nop			@ (mov r8, r8)
 8017b36:	e002      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017b38:	46c0      	nop			@ (mov r8, r8)
 8017b3a:	e000      	b.n	8017b3e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017b3c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	b02b      	add	sp, #172	@ 0xac
 8017b42:	bd90      	pop	{r4, r7, pc}
 8017b44:	fffffeff 	.word	0xfffffeff
 8017b48:	fffffedf 	.word	0xfffffedf

08017b4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017b54:	46c0      	nop			@ (mov r8, r8)
 8017b56:	46bd      	mov	sp, r7
 8017b58:	b002      	add	sp, #8
 8017b5a:	bd80      	pop	{r7, pc}

08017b5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b64:	46c0      	nop			@ (mov r8, r8)
 8017b66:	46bd      	mov	sp, r7
 8017b68:	b002      	add	sp, #8
 8017b6a:	bd80      	pop	{r7, pc}

08017b6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017b74:	46c0      	nop			@ (mov r8, r8)
 8017b76:	46bd      	mov	sp, r7
 8017b78:	b002      	add	sp, #8
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b082      	sub	sp, #8
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017b84:	46c0      	nop			@ (mov r8, r8)
 8017b86:	46bd      	mov	sp, r7
 8017b88:	b002      	add	sp, #8
 8017b8a:	bd80      	pop	{r7, pc}

08017b8c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017b94:	46c0      	nop			@ (mov r8, r8)
 8017b96:	46bd      	mov	sp, r7
 8017b98:	b002      	add	sp, #8
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017ba4:	46c0      	nop			@ (mov r8, r8)
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	b002      	add	sp, #8
 8017baa:	bd80      	pop	{r7, pc}

08017bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	000a      	movs	r2, r1
 8017bb6:	1cbb      	adds	r3, r7, #2
 8017bb8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017bba:	46c0      	nop			@ (mov r8, r8)
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	b002      	add	sp, #8
 8017bc0:	bd80      	pop	{r7, pc}
	...

08017bc4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	2188      	movs	r1, #136	@ 0x88
 8017bd0:	4a14      	ldr	r2, [pc, #80]	@ (8017c24 <UART_InitCallbacksToDefault+0x60>)
 8017bd2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	218c      	movs	r1, #140	@ 0x8c
 8017bd8:	4a13      	ldr	r2, [pc, #76]	@ (8017c28 <UART_InitCallbacksToDefault+0x64>)
 8017bda:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2190      	movs	r1, #144	@ 0x90
 8017be0:	4a12      	ldr	r2, [pc, #72]	@ (8017c2c <UART_InitCallbacksToDefault+0x68>)
 8017be2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2194      	movs	r1, #148	@ 0x94
 8017be8:	4a11      	ldr	r2, [pc, #68]	@ (8017c30 <UART_InitCallbacksToDefault+0x6c>)
 8017bea:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2198      	movs	r1, #152	@ 0x98
 8017bf0:	4a10      	ldr	r2, [pc, #64]	@ (8017c34 <UART_InitCallbacksToDefault+0x70>)
 8017bf2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	219c      	movs	r1, #156	@ 0x9c
 8017bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8017c38 <UART_InitCallbacksToDefault+0x74>)
 8017bfa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	21a0      	movs	r1, #160	@ 0xa0
 8017c00:	4a0e      	ldr	r2, [pc, #56]	@ (8017c3c <UART_InitCallbacksToDefault+0x78>)
 8017c02:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	21a4      	movs	r1, #164	@ 0xa4
 8017c08:	4a0d      	ldr	r2, [pc, #52]	@ (8017c40 <UART_InitCallbacksToDefault+0x7c>)
 8017c0a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	21a8      	movs	r1, #168	@ 0xa8
 8017c10:	4a0c      	ldr	r2, [pc, #48]	@ (8017c44 <UART_InitCallbacksToDefault+0x80>)
 8017c12:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	21ac      	movs	r1, #172	@ 0xac
 8017c18:	4a0b      	ldr	r2, [pc, #44]	@ (8017c48 <UART_InitCallbacksToDefault+0x84>)
 8017c1a:	505a      	str	r2, [r3, r1]

}
 8017c1c:	46c0      	nop			@ (mov r8, r8)
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	b002      	add	sp, #8
 8017c22:	bd80      	pop	{r7, pc}
 8017c24:	08017b5d 	.word	0x08017b5d
 8017c28:	08017b4d 	.word	0x08017b4d
 8017c2c:	08017b6d 	.word	0x08017b6d
 8017c30:	0800829d 	.word	0x0800829d
 8017c34:	08003cd1 	.word	0x08003cd1
 8017c38:	08017b7d 	.word	0x08017b7d
 8017c3c:	08017b8d 	.word	0x08017b8d
 8017c40:	08017b9d 	.word	0x08017b9d
 8017c44:	08018fe1 	.word	0x08018fe1
 8017c48:	08017bad 	.word	0x08017bad

08017c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017c4c:	b5b0      	push	{r4, r5, r7, lr}
 8017c4e:	b08e      	sub	sp, #56	@ 0x38
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017c54:	231a      	movs	r3, #26
 8017c56:	2218      	movs	r2, #24
 8017c58:	189b      	adds	r3, r3, r2
 8017c5a:	19db      	adds	r3, r3, r7
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017c60:	69fb      	ldr	r3, [r7, #28]
 8017c62:	689a      	ldr	r2, [r3, #8]
 8017c64:	69fb      	ldr	r3, [r7, #28]
 8017c66:	691b      	ldr	r3, [r3, #16]
 8017c68:	431a      	orrs	r2, r3
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	695b      	ldr	r3, [r3, #20]
 8017c6e:	431a      	orrs	r2, r3
 8017c70:	69fb      	ldr	r3, [r7, #28]
 8017c72:	69db      	ldr	r3, [r3, #28]
 8017c74:	4313      	orrs	r3, r2
 8017c76:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017c78:	69fb      	ldr	r3, [r7, #28]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4ac3      	ldr	r2, [pc, #780]	@ (8017f8c <UART_SetConfig+0x340>)
 8017c80:	4013      	ands	r3, r2
 8017c82:	0019      	movs	r1, r3
 8017c84:	69fb      	ldr	r3, [r7, #28]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c8a:	430a      	orrs	r2, r1
 8017c8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c8e:	69fb      	ldr	r3, [r7, #28]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	4abe      	ldr	r2, [pc, #760]	@ (8017f90 <UART_SetConfig+0x344>)
 8017c96:	4013      	ands	r3, r2
 8017c98:	0019      	movs	r1, r3
 8017c9a:	69fb      	ldr	r3, [r7, #28]
 8017c9c:	68da      	ldr	r2, [r3, #12]
 8017c9e:	69fb      	ldr	r3, [r7, #28]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	430a      	orrs	r2, r1
 8017ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	699b      	ldr	r3, [r3, #24]
 8017caa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017cac:	69fb      	ldr	r3, [r7, #28]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4ab8      	ldr	r2, [pc, #736]	@ (8017f94 <UART_SetConfig+0x348>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d004      	beq.n	8017cc0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017cb6:	69fb      	ldr	r3, [r7, #28]
 8017cb8:	6a1b      	ldr	r3, [r3, #32]
 8017cba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017cbc:	4313      	orrs	r3, r2
 8017cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017cc0:	69fb      	ldr	r3, [r7, #28]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	689b      	ldr	r3, [r3, #8]
 8017cc6:	4ab4      	ldr	r2, [pc, #720]	@ (8017f98 <UART_SetConfig+0x34c>)
 8017cc8:	4013      	ands	r3, r2
 8017cca:	0019      	movs	r1, r3
 8017ccc:	69fb      	ldr	r3, [r7, #28]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017cd2:	430a      	orrs	r2, r1
 8017cd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	4ab0      	ldr	r2, [pc, #704]	@ (8017f9c <UART_SetConfig+0x350>)
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	d131      	bne.n	8017d44 <UART_SetConfig+0xf8>
 8017ce0:	4baf      	ldr	r3, [pc, #700]	@ (8017fa0 <UART_SetConfig+0x354>)
 8017ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017ce4:	2203      	movs	r2, #3
 8017ce6:	4013      	ands	r3, r2
 8017ce8:	2b03      	cmp	r3, #3
 8017cea:	d01d      	beq.n	8017d28 <UART_SetConfig+0xdc>
 8017cec:	d823      	bhi.n	8017d36 <UART_SetConfig+0xea>
 8017cee:	2b02      	cmp	r3, #2
 8017cf0:	d00c      	beq.n	8017d0c <UART_SetConfig+0xc0>
 8017cf2:	d820      	bhi.n	8017d36 <UART_SetConfig+0xea>
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d002      	beq.n	8017cfe <UART_SetConfig+0xb2>
 8017cf8:	2b01      	cmp	r3, #1
 8017cfa:	d00e      	beq.n	8017d1a <UART_SetConfig+0xce>
 8017cfc:	e01b      	b.n	8017d36 <UART_SetConfig+0xea>
 8017cfe:	231b      	movs	r3, #27
 8017d00:	2218      	movs	r2, #24
 8017d02:	189b      	adds	r3, r3, r2
 8017d04:	19db      	adds	r3, r3, r7
 8017d06:	2201      	movs	r2, #1
 8017d08:	701a      	strb	r2, [r3, #0]
 8017d0a:	e0b4      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d0c:	231b      	movs	r3, #27
 8017d0e:	2218      	movs	r2, #24
 8017d10:	189b      	adds	r3, r3, r2
 8017d12:	19db      	adds	r3, r3, r7
 8017d14:	2202      	movs	r2, #2
 8017d16:	701a      	strb	r2, [r3, #0]
 8017d18:	e0ad      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d1a:	231b      	movs	r3, #27
 8017d1c:	2218      	movs	r2, #24
 8017d1e:	189b      	adds	r3, r3, r2
 8017d20:	19db      	adds	r3, r3, r7
 8017d22:	2204      	movs	r2, #4
 8017d24:	701a      	strb	r2, [r3, #0]
 8017d26:	e0a6      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d28:	231b      	movs	r3, #27
 8017d2a:	2218      	movs	r2, #24
 8017d2c:	189b      	adds	r3, r3, r2
 8017d2e:	19db      	adds	r3, r3, r7
 8017d30:	2208      	movs	r2, #8
 8017d32:	701a      	strb	r2, [r3, #0]
 8017d34:	e09f      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d36:	231b      	movs	r3, #27
 8017d38:	2218      	movs	r2, #24
 8017d3a:	189b      	adds	r3, r3, r2
 8017d3c:	19db      	adds	r3, r3, r7
 8017d3e:	2210      	movs	r2, #16
 8017d40:	701a      	strb	r2, [r3, #0]
 8017d42:	e098      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d44:	69fb      	ldr	r3, [r7, #28]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4a96      	ldr	r2, [pc, #600]	@ (8017fa4 <UART_SetConfig+0x358>)
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d131      	bne.n	8017db2 <UART_SetConfig+0x166>
 8017d4e:	4b94      	ldr	r3, [pc, #592]	@ (8017fa0 <UART_SetConfig+0x354>)
 8017d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017d52:	220c      	movs	r2, #12
 8017d54:	4013      	ands	r3, r2
 8017d56:	2b0c      	cmp	r3, #12
 8017d58:	d01d      	beq.n	8017d96 <UART_SetConfig+0x14a>
 8017d5a:	d823      	bhi.n	8017da4 <UART_SetConfig+0x158>
 8017d5c:	2b08      	cmp	r3, #8
 8017d5e:	d00c      	beq.n	8017d7a <UART_SetConfig+0x12e>
 8017d60:	d820      	bhi.n	8017da4 <UART_SetConfig+0x158>
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d002      	beq.n	8017d6c <UART_SetConfig+0x120>
 8017d66:	2b04      	cmp	r3, #4
 8017d68:	d00e      	beq.n	8017d88 <UART_SetConfig+0x13c>
 8017d6a:	e01b      	b.n	8017da4 <UART_SetConfig+0x158>
 8017d6c:	231b      	movs	r3, #27
 8017d6e:	2218      	movs	r2, #24
 8017d70:	189b      	adds	r3, r3, r2
 8017d72:	19db      	adds	r3, r3, r7
 8017d74:	2200      	movs	r2, #0
 8017d76:	701a      	strb	r2, [r3, #0]
 8017d78:	e07d      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d7a:	231b      	movs	r3, #27
 8017d7c:	2218      	movs	r2, #24
 8017d7e:	189b      	adds	r3, r3, r2
 8017d80:	19db      	adds	r3, r3, r7
 8017d82:	2202      	movs	r2, #2
 8017d84:	701a      	strb	r2, [r3, #0]
 8017d86:	e076      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d88:	231b      	movs	r3, #27
 8017d8a:	2218      	movs	r2, #24
 8017d8c:	189b      	adds	r3, r3, r2
 8017d8e:	19db      	adds	r3, r3, r7
 8017d90:	2204      	movs	r2, #4
 8017d92:	701a      	strb	r2, [r3, #0]
 8017d94:	e06f      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017d96:	231b      	movs	r3, #27
 8017d98:	2218      	movs	r2, #24
 8017d9a:	189b      	adds	r3, r3, r2
 8017d9c:	19db      	adds	r3, r3, r7
 8017d9e:	2208      	movs	r2, #8
 8017da0:	701a      	strb	r2, [r3, #0]
 8017da2:	e068      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017da4:	231b      	movs	r3, #27
 8017da6:	2218      	movs	r2, #24
 8017da8:	189b      	adds	r3, r3, r2
 8017daa:	19db      	adds	r3, r3, r7
 8017dac:	2210      	movs	r2, #16
 8017dae:	701a      	strb	r2, [r3, #0]
 8017db0:	e061      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4a7c      	ldr	r2, [pc, #496]	@ (8017fa8 <UART_SetConfig+0x35c>)
 8017db8:	4293      	cmp	r3, r2
 8017dba:	d106      	bne.n	8017dca <UART_SetConfig+0x17e>
 8017dbc:	231b      	movs	r3, #27
 8017dbe:	2218      	movs	r2, #24
 8017dc0:	189b      	adds	r3, r3, r2
 8017dc2:	19db      	adds	r3, r3, r7
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	701a      	strb	r2, [r3, #0]
 8017dc8:	e055      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017dca:	69fb      	ldr	r3, [r7, #28]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	4a77      	ldr	r2, [pc, #476]	@ (8017fac <UART_SetConfig+0x360>)
 8017dd0:	4293      	cmp	r3, r2
 8017dd2:	d106      	bne.n	8017de2 <UART_SetConfig+0x196>
 8017dd4:	231b      	movs	r3, #27
 8017dd6:	2218      	movs	r2, #24
 8017dd8:	189b      	adds	r3, r3, r2
 8017dda:	19db      	adds	r3, r3, r7
 8017ddc:	2200      	movs	r2, #0
 8017dde:	701a      	strb	r2, [r3, #0]
 8017de0:	e049      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	4a6b      	ldr	r2, [pc, #428]	@ (8017f94 <UART_SetConfig+0x348>)
 8017de8:	4293      	cmp	r3, r2
 8017dea:	d13e      	bne.n	8017e6a <UART_SetConfig+0x21e>
 8017dec:	4b6c      	ldr	r3, [pc, #432]	@ (8017fa0 <UART_SetConfig+0x354>)
 8017dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017df0:	23c0      	movs	r3, #192	@ 0xc0
 8017df2:	011b      	lsls	r3, r3, #4
 8017df4:	4013      	ands	r3, r2
 8017df6:	22c0      	movs	r2, #192	@ 0xc0
 8017df8:	0112      	lsls	r2, r2, #4
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d027      	beq.n	8017e4e <UART_SetConfig+0x202>
 8017dfe:	22c0      	movs	r2, #192	@ 0xc0
 8017e00:	0112      	lsls	r2, r2, #4
 8017e02:	4293      	cmp	r3, r2
 8017e04:	d82a      	bhi.n	8017e5c <UART_SetConfig+0x210>
 8017e06:	2280      	movs	r2, #128	@ 0x80
 8017e08:	0112      	lsls	r2, r2, #4
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d011      	beq.n	8017e32 <UART_SetConfig+0x1e6>
 8017e0e:	2280      	movs	r2, #128	@ 0x80
 8017e10:	0112      	lsls	r2, r2, #4
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d822      	bhi.n	8017e5c <UART_SetConfig+0x210>
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d004      	beq.n	8017e24 <UART_SetConfig+0x1d8>
 8017e1a:	2280      	movs	r2, #128	@ 0x80
 8017e1c:	00d2      	lsls	r2, r2, #3
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d00e      	beq.n	8017e40 <UART_SetConfig+0x1f4>
 8017e22:	e01b      	b.n	8017e5c <UART_SetConfig+0x210>
 8017e24:	231b      	movs	r3, #27
 8017e26:	2218      	movs	r2, #24
 8017e28:	189b      	adds	r3, r3, r2
 8017e2a:	19db      	adds	r3, r3, r7
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	701a      	strb	r2, [r3, #0]
 8017e30:	e021      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017e32:	231b      	movs	r3, #27
 8017e34:	2218      	movs	r2, #24
 8017e36:	189b      	adds	r3, r3, r2
 8017e38:	19db      	adds	r3, r3, r7
 8017e3a:	2202      	movs	r2, #2
 8017e3c:	701a      	strb	r2, [r3, #0]
 8017e3e:	e01a      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017e40:	231b      	movs	r3, #27
 8017e42:	2218      	movs	r2, #24
 8017e44:	189b      	adds	r3, r3, r2
 8017e46:	19db      	adds	r3, r3, r7
 8017e48:	2204      	movs	r2, #4
 8017e4a:	701a      	strb	r2, [r3, #0]
 8017e4c:	e013      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017e4e:	231b      	movs	r3, #27
 8017e50:	2218      	movs	r2, #24
 8017e52:	189b      	adds	r3, r3, r2
 8017e54:	19db      	adds	r3, r3, r7
 8017e56:	2208      	movs	r2, #8
 8017e58:	701a      	strb	r2, [r3, #0]
 8017e5a:	e00c      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017e5c:	231b      	movs	r3, #27
 8017e5e:	2218      	movs	r2, #24
 8017e60:	189b      	adds	r3, r3, r2
 8017e62:	19db      	adds	r3, r3, r7
 8017e64:	2210      	movs	r2, #16
 8017e66:	701a      	strb	r2, [r3, #0]
 8017e68:	e005      	b.n	8017e76 <UART_SetConfig+0x22a>
 8017e6a:	231b      	movs	r3, #27
 8017e6c:	2218      	movs	r2, #24
 8017e6e:	189b      	adds	r3, r3, r2
 8017e70:	19db      	adds	r3, r3, r7
 8017e72:	2210      	movs	r2, #16
 8017e74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	4a46      	ldr	r2, [pc, #280]	@ (8017f94 <UART_SetConfig+0x348>)
 8017e7c:	4293      	cmp	r3, r2
 8017e7e:	d000      	beq.n	8017e82 <UART_SetConfig+0x236>
 8017e80:	e09a      	b.n	8017fb8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017e82:	231b      	movs	r3, #27
 8017e84:	2218      	movs	r2, #24
 8017e86:	189b      	adds	r3, r3, r2
 8017e88:	19db      	adds	r3, r3, r7
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	2b08      	cmp	r3, #8
 8017e8e:	d01d      	beq.n	8017ecc <UART_SetConfig+0x280>
 8017e90:	dc20      	bgt.n	8017ed4 <UART_SetConfig+0x288>
 8017e92:	2b04      	cmp	r3, #4
 8017e94:	d015      	beq.n	8017ec2 <UART_SetConfig+0x276>
 8017e96:	dc1d      	bgt.n	8017ed4 <UART_SetConfig+0x288>
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d002      	beq.n	8017ea2 <UART_SetConfig+0x256>
 8017e9c:	2b02      	cmp	r3, #2
 8017e9e:	d005      	beq.n	8017eac <UART_SetConfig+0x260>
 8017ea0:	e018      	b.n	8017ed4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017ea2:	f7fd fe4b 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
 8017ea6:	0003      	movs	r3, r0
 8017ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eaa:	e01c      	b.n	8017ee6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017eac:	4b3c      	ldr	r3, [pc, #240]	@ (8017fa0 <UART_SetConfig+0x354>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	2210      	movs	r2, #16
 8017eb2:	4013      	ands	r3, r2
 8017eb4:	d002      	beq.n	8017ebc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8017fb0 <UART_SetConfig+0x364>)
 8017eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017eba:	e014      	b.n	8017ee6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8017fb4 <UART_SetConfig+0x368>)
 8017ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ec0:	e011      	b.n	8017ee6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017ec2:	f7fd fd8b 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 8017ec6:	0003      	movs	r3, r0
 8017ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eca:	e00c      	b.n	8017ee6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017ecc:	2380      	movs	r3, #128	@ 0x80
 8017ece:	021b      	lsls	r3, r3, #8
 8017ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ed2:	e008      	b.n	8017ee6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017ed8:	231a      	movs	r3, #26
 8017eda:	2218      	movs	r2, #24
 8017edc:	189b      	adds	r3, r3, r2
 8017ede:	19db      	adds	r3, r3, r7
 8017ee0:	2201      	movs	r2, #1
 8017ee2:	701a      	strb	r2, [r3, #0]
        break;
 8017ee4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d100      	bne.n	8017eee <UART_SetConfig+0x2a2>
 8017eec:	e133      	b.n	8018156 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017eee:	69fb      	ldr	r3, [r7, #28]
 8017ef0:	685a      	ldr	r2, [r3, #4]
 8017ef2:	0013      	movs	r3, r2
 8017ef4:	005b      	lsls	r3, r3, #1
 8017ef6:	189b      	adds	r3, r3, r2
 8017ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d305      	bcc.n	8017f0a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d906      	bls.n	8017f18 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017f0a:	231a      	movs	r3, #26
 8017f0c:	2218      	movs	r2, #24
 8017f0e:	189b      	adds	r3, r3, r2
 8017f10:	19db      	adds	r3, r3, r7
 8017f12:	2201      	movs	r2, #1
 8017f14:	701a      	strb	r2, [r3, #0]
 8017f16:	e11e      	b.n	8018156 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f1a:	613b      	str	r3, [r7, #16]
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	617b      	str	r3, [r7, #20]
 8017f20:	6939      	ldr	r1, [r7, #16]
 8017f22:	697a      	ldr	r2, [r7, #20]
 8017f24:	000b      	movs	r3, r1
 8017f26:	0e1b      	lsrs	r3, r3, #24
 8017f28:	0010      	movs	r0, r2
 8017f2a:	0205      	lsls	r5, r0, #8
 8017f2c:	431d      	orrs	r5, r3
 8017f2e:	000b      	movs	r3, r1
 8017f30:	021c      	lsls	r4, r3, #8
 8017f32:	69fb      	ldr	r3, [r7, #28]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	085b      	lsrs	r3, r3, #1
 8017f38:	60bb      	str	r3, [r7, #8]
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	60fb      	str	r3, [r7, #12]
 8017f3e:	68b8      	ldr	r0, [r7, #8]
 8017f40:	68f9      	ldr	r1, [r7, #12]
 8017f42:	1900      	adds	r0, r0, r4
 8017f44:	4169      	adcs	r1, r5
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	603b      	str	r3, [r7, #0]
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	607b      	str	r3, [r7, #4]
 8017f50:	683a      	ldr	r2, [r7, #0]
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f7e8 fb14 	bl	8000580 <__aeabi_uldivmod>
 8017f58:	0002      	movs	r2, r0
 8017f5a:	000b      	movs	r3, r1
 8017f5c:	0013      	movs	r3, r2
 8017f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f62:	23c0      	movs	r3, #192	@ 0xc0
 8017f64:	009b      	lsls	r3, r3, #2
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d309      	bcc.n	8017f7e <UART_SetConfig+0x332>
 8017f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f6c:	2380      	movs	r3, #128	@ 0x80
 8017f6e:	035b      	lsls	r3, r3, #13
 8017f70:	429a      	cmp	r2, r3
 8017f72:	d204      	bcs.n	8017f7e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f7a:	60da      	str	r2, [r3, #12]
 8017f7c:	e0eb      	b.n	8018156 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017f7e:	231a      	movs	r3, #26
 8017f80:	2218      	movs	r2, #24
 8017f82:	189b      	adds	r3, r3, r2
 8017f84:	19db      	adds	r3, r3, r7
 8017f86:	2201      	movs	r2, #1
 8017f88:	701a      	strb	r2, [r3, #0]
 8017f8a:	e0e4      	b.n	8018156 <UART_SetConfig+0x50a>
 8017f8c:	efff69f3 	.word	0xefff69f3
 8017f90:	ffffcfff 	.word	0xffffcfff
 8017f94:	40004800 	.word	0x40004800
 8017f98:	fffff4ff 	.word	0xfffff4ff
 8017f9c:	40013800 	.word	0x40013800
 8017fa0:	40021000 	.word	0x40021000
 8017fa4:	40004400 	.word	0x40004400
 8017fa8:	40004c00 	.word	0x40004c00
 8017fac:	40005000 	.word	0x40005000
 8017fb0:	003d0900 	.word	0x003d0900
 8017fb4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017fb8:	69fb      	ldr	r3, [r7, #28]
 8017fba:	69da      	ldr	r2, [r3, #28]
 8017fbc:	2380      	movs	r3, #128	@ 0x80
 8017fbe:	021b      	lsls	r3, r3, #8
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d000      	beq.n	8017fc6 <UART_SetConfig+0x37a>
 8017fc4:	e070      	b.n	80180a8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017fc6:	231b      	movs	r3, #27
 8017fc8:	2218      	movs	r2, #24
 8017fca:	189b      	adds	r3, r3, r2
 8017fcc:	19db      	adds	r3, r3, r7
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	2b08      	cmp	r3, #8
 8017fd2:	d822      	bhi.n	801801a <UART_SetConfig+0x3ce>
 8017fd4:	009a      	lsls	r2, r3, #2
 8017fd6:	4b67      	ldr	r3, [pc, #412]	@ (8018174 <UART_SetConfig+0x528>)
 8017fd8:	18d3      	adds	r3, r2, r3
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017fde:	f7fd fdad 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
 8017fe2:	0003      	movs	r3, r0
 8017fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017fe6:	e021      	b.n	801802c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017fe8:	f7fd fdbe 	bl	8015b68 <HAL_RCC_GetPCLK2Freq>
 8017fec:	0003      	movs	r3, r0
 8017fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ff0:	e01c      	b.n	801802c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017ff2:	4b61      	ldr	r3, [pc, #388]	@ (8018178 <UART_SetConfig+0x52c>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2210      	movs	r2, #16
 8017ff8:	4013      	ands	r3, r2
 8017ffa:	d002      	beq.n	8018002 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017ffc:	4b5f      	ldr	r3, [pc, #380]	@ (801817c <UART_SetConfig+0x530>)
 8017ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018000:	e014      	b.n	801802c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018002:	4b5f      	ldr	r3, [pc, #380]	@ (8018180 <UART_SetConfig+0x534>)
 8018004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018006:	e011      	b.n	801802c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018008:	f7fd fce8 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 801800c:	0003      	movs	r3, r0
 801800e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018010:	e00c      	b.n	801802c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018012:	2380      	movs	r3, #128	@ 0x80
 8018014:	021b      	lsls	r3, r3, #8
 8018016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018018:	e008      	b.n	801802c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801801a:	2300      	movs	r3, #0
 801801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801801e:	231a      	movs	r3, #26
 8018020:	2218      	movs	r2, #24
 8018022:	189b      	adds	r3, r3, r2
 8018024:	19db      	adds	r3, r3, r7
 8018026:	2201      	movs	r2, #1
 8018028:	701a      	strb	r2, [r3, #0]
        break;
 801802a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801802e:	2b00      	cmp	r3, #0
 8018030:	d100      	bne.n	8018034 <UART_SetConfig+0x3e8>
 8018032:	e090      	b.n	8018156 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018036:	005a      	lsls	r2, r3, #1
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	085b      	lsrs	r3, r3, #1
 801803e:	18d2      	adds	r2, r2, r3
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	0019      	movs	r1, r3
 8018046:	0010      	movs	r0, r2
 8018048:	f7e8 f8ac 	bl	80001a4 <__udivsi3>
 801804c:	0003      	movs	r3, r0
 801804e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018052:	2b0f      	cmp	r3, #15
 8018054:	d921      	bls.n	801809a <UART_SetConfig+0x44e>
 8018056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018058:	2380      	movs	r3, #128	@ 0x80
 801805a:	025b      	lsls	r3, r3, #9
 801805c:	429a      	cmp	r2, r3
 801805e:	d21c      	bcs.n	801809a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018062:	b29a      	uxth	r2, r3
 8018064:	200e      	movs	r0, #14
 8018066:	2418      	movs	r4, #24
 8018068:	1903      	adds	r3, r0, r4
 801806a:	19db      	adds	r3, r3, r7
 801806c:	210f      	movs	r1, #15
 801806e:	438a      	bics	r2, r1
 8018070:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018074:	085b      	lsrs	r3, r3, #1
 8018076:	b29b      	uxth	r3, r3
 8018078:	2207      	movs	r2, #7
 801807a:	4013      	ands	r3, r2
 801807c:	b299      	uxth	r1, r3
 801807e:	1903      	adds	r3, r0, r4
 8018080:	19db      	adds	r3, r3, r7
 8018082:	1902      	adds	r2, r0, r4
 8018084:	19d2      	adds	r2, r2, r7
 8018086:	8812      	ldrh	r2, [r2, #0]
 8018088:	430a      	orrs	r2, r1
 801808a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	1902      	adds	r2, r0, r4
 8018092:	19d2      	adds	r2, r2, r7
 8018094:	8812      	ldrh	r2, [r2, #0]
 8018096:	60da      	str	r2, [r3, #12]
 8018098:	e05d      	b.n	8018156 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801809a:	231a      	movs	r3, #26
 801809c:	2218      	movs	r2, #24
 801809e:	189b      	adds	r3, r3, r2
 80180a0:	19db      	adds	r3, r3, r7
 80180a2:	2201      	movs	r2, #1
 80180a4:	701a      	strb	r2, [r3, #0]
 80180a6:	e056      	b.n	8018156 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80180a8:	231b      	movs	r3, #27
 80180aa:	2218      	movs	r2, #24
 80180ac:	189b      	adds	r3, r3, r2
 80180ae:	19db      	adds	r3, r3, r7
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	2b08      	cmp	r3, #8
 80180b4:	d822      	bhi.n	80180fc <UART_SetConfig+0x4b0>
 80180b6:	009a      	lsls	r2, r3, #2
 80180b8:	4b32      	ldr	r3, [pc, #200]	@ (8018184 <UART_SetConfig+0x538>)
 80180ba:	18d3      	adds	r3, r2, r3
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80180c0:	f7fd fd3c 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
 80180c4:	0003      	movs	r3, r0
 80180c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180c8:	e021      	b.n	801810e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80180ca:	f7fd fd4d 	bl	8015b68 <HAL_RCC_GetPCLK2Freq>
 80180ce:	0003      	movs	r3, r0
 80180d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180d2:	e01c      	b.n	801810e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80180d4:	4b28      	ldr	r3, [pc, #160]	@ (8018178 <UART_SetConfig+0x52c>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2210      	movs	r2, #16
 80180da:	4013      	ands	r3, r2
 80180dc:	d002      	beq.n	80180e4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80180de:	4b27      	ldr	r3, [pc, #156]	@ (801817c <UART_SetConfig+0x530>)
 80180e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80180e2:	e014      	b.n	801810e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80180e4:	4b26      	ldr	r3, [pc, #152]	@ (8018180 <UART_SetConfig+0x534>)
 80180e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180e8:	e011      	b.n	801810e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80180ea:	f7fd fc77 	bl	80159dc <HAL_RCC_GetSysClockFreq>
 80180ee:	0003      	movs	r3, r0
 80180f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180f2:	e00c      	b.n	801810e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80180f4:	2380      	movs	r3, #128	@ 0x80
 80180f6:	021b      	lsls	r3, r3, #8
 80180f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80180fa:	e008      	b.n	801810e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80180fc:	2300      	movs	r3, #0
 80180fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018100:	231a      	movs	r3, #26
 8018102:	2218      	movs	r2, #24
 8018104:	189b      	adds	r3, r3, r2
 8018106:	19db      	adds	r3, r3, r7
 8018108:	2201      	movs	r2, #1
 801810a:	701a      	strb	r2, [r3, #0]
        break;
 801810c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801810e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018110:	2b00      	cmp	r3, #0
 8018112:	d020      	beq.n	8018156 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018114:	69fb      	ldr	r3, [r7, #28]
 8018116:	685b      	ldr	r3, [r3, #4]
 8018118:	085a      	lsrs	r2, r3, #1
 801811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801811c:	18d2      	adds	r2, r2, r3
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	0019      	movs	r1, r3
 8018124:	0010      	movs	r0, r2
 8018126:	f7e8 f83d 	bl	80001a4 <__udivsi3>
 801812a:	0003      	movs	r3, r0
 801812c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018130:	2b0f      	cmp	r3, #15
 8018132:	d90a      	bls.n	801814a <UART_SetConfig+0x4fe>
 8018134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018136:	2380      	movs	r3, #128	@ 0x80
 8018138:	025b      	lsls	r3, r3, #9
 801813a:	429a      	cmp	r2, r3
 801813c:	d205      	bcs.n	801814a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018140:	b29a      	uxth	r2, r3
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	60da      	str	r2, [r3, #12]
 8018148:	e005      	b.n	8018156 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801814a:	231a      	movs	r3, #26
 801814c:	2218      	movs	r2, #24
 801814e:	189b      	adds	r3, r3, r2
 8018150:	19db      	adds	r3, r3, r7
 8018152:	2201      	movs	r2, #1
 8018154:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018156:	69fb      	ldr	r3, [r7, #28]
 8018158:	2200      	movs	r2, #0
 801815a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801815c:	69fb      	ldr	r3, [r7, #28]
 801815e:	2200      	movs	r2, #0
 8018160:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018162:	231a      	movs	r3, #26
 8018164:	2218      	movs	r2, #24
 8018166:	189b      	adds	r3, r3, r2
 8018168:	19db      	adds	r3, r3, r7
 801816a:	781b      	ldrb	r3, [r3, #0]
}
 801816c:	0018      	movs	r0, r3
 801816e:	46bd      	mov	sp, r7
 8018170:	b00e      	add	sp, #56	@ 0x38
 8018172:	bdb0      	pop	{r4, r5, r7, pc}
 8018174:	08025694 	.word	0x08025694
 8018178:	40021000 	.word	0x40021000
 801817c:	003d0900 	.word	0x003d0900
 8018180:	00f42400 	.word	0x00f42400
 8018184:	080256b8 	.word	0x080256b8

08018188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018194:	2201      	movs	r2, #1
 8018196:	4013      	ands	r3, r2
 8018198:	d00b      	beq.n	80181b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	685b      	ldr	r3, [r3, #4]
 80181a0:	4a4a      	ldr	r2, [pc, #296]	@ (80182cc <UART_AdvFeatureConfig+0x144>)
 80181a2:	4013      	ands	r3, r2
 80181a4:	0019      	movs	r1, r3
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	430a      	orrs	r2, r1
 80181b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181b6:	2202      	movs	r2, #2
 80181b8:	4013      	ands	r3, r2
 80181ba:	d00b      	beq.n	80181d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	685b      	ldr	r3, [r3, #4]
 80181c2:	4a43      	ldr	r2, [pc, #268]	@ (80182d0 <UART_AdvFeatureConfig+0x148>)
 80181c4:	4013      	ands	r3, r2
 80181c6:	0019      	movs	r1, r3
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	430a      	orrs	r2, r1
 80181d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181d8:	2204      	movs	r2, #4
 80181da:	4013      	ands	r3, r2
 80181dc:	d00b      	beq.n	80181f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	4a3b      	ldr	r2, [pc, #236]	@ (80182d4 <UART_AdvFeatureConfig+0x14c>)
 80181e6:	4013      	ands	r3, r2
 80181e8:	0019      	movs	r1, r3
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	430a      	orrs	r2, r1
 80181f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181fa:	2208      	movs	r2, #8
 80181fc:	4013      	ands	r3, r2
 80181fe:	d00b      	beq.n	8018218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	685b      	ldr	r3, [r3, #4]
 8018206:	4a34      	ldr	r2, [pc, #208]	@ (80182d8 <UART_AdvFeatureConfig+0x150>)
 8018208:	4013      	ands	r3, r2
 801820a:	0019      	movs	r1, r3
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	430a      	orrs	r2, r1
 8018216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801821c:	2210      	movs	r2, #16
 801821e:	4013      	ands	r3, r2
 8018220:	d00b      	beq.n	801823a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	689b      	ldr	r3, [r3, #8]
 8018228:	4a2c      	ldr	r2, [pc, #176]	@ (80182dc <UART_AdvFeatureConfig+0x154>)
 801822a:	4013      	ands	r3, r2
 801822c:	0019      	movs	r1, r3
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	430a      	orrs	r2, r1
 8018238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801823e:	2220      	movs	r2, #32
 8018240:	4013      	ands	r3, r2
 8018242:	d00b      	beq.n	801825c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	689b      	ldr	r3, [r3, #8]
 801824a:	4a25      	ldr	r2, [pc, #148]	@ (80182e0 <UART_AdvFeatureConfig+0x158>)
 801824c:	4013      	ands	r3, r2
 801824e:	0019      	movs	r1, r3
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	430a      	orrs	r2, r1
 801825a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018260:	2240      	movs	r2, #64	@ 0x40
 8018262:	4013      	ands	r3, r2
 8018264:	d01d      	beq.n	80182a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	4a1d      	ldr	r2, [pc, #116]	@ (80182e4 <UART_AdvFeatureConfig+0x15c>)
 801826e:	4013      	ands	r3, r2
 8018270:	0019      	movs	r1, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	430a      	orrs	r2, r1
 801827c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018282:	2380      	movs	r3, #128	@ 0x80
 8018284:	035b      	lsls	r3, r3, #13
 8018286:	429a      	cmp	r2, r3
 8018288:	d10b      	bne.n	80182a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	4a15      	ldr	r2, [pc, #84]	@ (80182e8 <UART_AdvFeatureConfig+0x160>)
 8018292:	4013      	ands	r3, r2
 8018294:	0019      	movs	r1, r3
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	430a      	orrs	r2, r1
 80182a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182a6:	2280      	movs	r2, #128	@ 0x80
 80182a8:	4013      	ands	r3, r2
 80182aa:	d00b      	beq.n	80182c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	4a0e      	ldr	r2, [pc, #56]	@ (80182ec <UART_AdvFeatureConfig+0x164>)
 80182b4:	4013      	ands	r3, r2
 80182b6:	0019      	movs	r1, r3
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	430a      	orrs	r2, r1
 80182c2:	605a      	str	r2, [r3, #4]
  }
}
 80182c4:	46c0      	nop			@ (mov r8, r8)
 80182c6:	46bd      	mov	sp, r7
 80182c8:	b002      	add	sp, #8
 80182ca:	bd80      	pop	{r7, pc}
 80182cc:	fffdffff 	.word	0xfffdffff
 80182d0:	fffeffff 	.word	0xfffeffff
 80182d4:	fffbffff 	.word	0xfffbffff
 80182d8:	ffff7fff 	.word	0xffff7fff
 80182dc:	ffffefff 	.word	0xffffefff
 80182e0:	ffffdfff 	.word	0xffffdfff
 80182e4:	ffefffff 	.word	0xffefffff
 80182e8:	ff9fffff 	.word	0xff9fffff
 80182ec:	fff7ffff 	.word	0xfff7ffff

080182f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b092      	sub	sp, #72	@ 0x48
 80182f4:	af02      	add	r7, sp, #8
 80182f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2284      	movs	r2, #132	@ 0x84
 80182fc:	2100      	movs	r1, #0
 80182fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018300:	f7f6 fd20 	bl	800ed44 <HAL_GetTick>
 8018304:	0003      	movs	r3, r0
 8018306:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	2208      	movs	r2, #8
 8018310:	4013      	ands	r3, r2
 8018312:	2b08      	cmp	r3, #8
 8018314:	d12c      	bne.n	8018370 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018318:	2280      	movs	r2, #128	@ 0x80
 801831a:	0391      	lsls	r1, r2, #14
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	4a46      	ldr	r2, [pc, #280]	@ (8018438 <UART_CheckIdleState+0x148>)
 8018320:	9200      	str	r2, [sp, #0]
 8018322:	2200      	movs	r2, #0
 8018324:	f000 f88c 	bl	8018440 <UART_WaitOnFlagUntilTimeout>
 8018328:	1e03      	subs	r3, r0, #0
 801832a:	d021      	beq.n	8018370 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801832c:	f3ef 8310 	mrs	r3, PRIMASK
 8018330:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018336:	2301      	movs	r3, #1
 8018338:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801833c:	f383 8810 	msr	PRIMASK, r3
}
 8018340:	46c0      	nop			@ (mov r8, r8)
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2180      	movs	r1, #128	@ 0x80
 801834e:	438a      	bics	r2, r1
 8018350:	601a      	str	r2, [r3, #0]
 8018352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018358:	f383 8810 	msr	PRIMASK, r3
}
 801835c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2220      	movs	r2, #32
 8018362:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2278      	movs	r2, #120	@ 0x78
 8018368:	2100      	movs	r1, #0
 801836a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801836c:	2303      	movs	r3, #3
 801836e:	e05f      	b.n	8018430 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	2204      	movs	r2, #4
 8018378:	4013      	ands	r3, r2
 801837a:	2b04      	cmp	r3, #4
 801837c:	d146      	bne.n	801840c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801837e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018380:	2280      	movs	r2, #128	@ 0x80
 8018382:	03d1      	lsls	r1, r2, #15
 8018384:	6878      	ldr	r0, [r7, #4]
 8018386:	4a2c      	ldr	r2, [pc, #176]	@ (8018438 <UART_CheckIdleState+0x148>)
 8018388:	9200      	str	r2, [sp, #0]
 801838a:	2200      	movs	r2, #0
 801838c:	f000 f858 	bl	8018440 <UART_WaitOnFlagUntilTimeout>
 8018390:	1e03      	subs	r3, r0, #0
 8018392:	d03b      	beq.n	801840c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018394:	f3ef 8310 	mrs	r3, PRIMASK
 8018398:	60fb      	str	r3, [r7, #12]
  return(result);
 801839a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801839c:	637b      	str	r3, [r7, #52]	@ 0x34
 801839e:	2301      	movs	r3, #1
 80183a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183a2:	693b      	ldr	r3, [r7, #16]
 80183a4:	f383 8810 	msr	PRIMASK, r3
}
 80183a8:	46c0      	nop			@ (mov r8, r8)
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4921      	ldr	r1, [pc, #132]	@ (801843c <UART_CheckIdleState+0x14c>)
 80183b6:	400a      	ands	r2, r1
 80183b8:	601a      	str	r2, [r3, #0]
 80183ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183be:	697b      	ldr	r3, [r7, #20]
 80183c0:	f383 8810 	msr	PRIMASK, r3
}
 80183c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183c6:	f3ef 8310 	mrs	r3, PRIMASK
 80183ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80183cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80183ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80183d0:	2301      	movs	r3, #1
 80183d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183d4:	69fb      	ldr	r3, [r7, #28]
 80183d6:	f383 8810 	msr	PRIMASK, r3
}
 80183da:	46c0      	nop			@ (mov r8, r8)
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	689a      	ldr	r2, [r3, #8]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2101      	movs	r1, #1
 80183e8:	438a      	bics	r2, r1
 80183ea:	609a      	str	r2, [r3, #8]
 80183ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183f0:	6a3b      	ldr	r3, [r7, #32]
 80183f2:	f383 8810 	msr	PRIMASK, r3
}
 80183f6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2280      	movs	r2, #128	@ 0x80
 80183fc:	2120      	movs	r1, #32
 80183fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	2278      	movs	r2, #120	@ 0x78
 8018404:	2100      	movs	r1, #0
 8018406:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018408:	2303      	movs	r3, #3
 801840a:	e011      	b.n	8018430 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2220      	movs	r2, #32
 8018410:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2280      	movs	r2, #128	@ 0x80
 8018416:	2120      	movs	r1, #32
 8018418:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2200      	movs	r2, #0
 801841e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2200      	movs	r2, #0
 8018424:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	2278      	movs	r2, #120	@ 0x78
 801842a:	2100      	movs	r1, #0
 801842c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801842e:	2300      	movs	r3, #0
}
 8018430:	0018      	movs	r0, r3
 8018432:	46bd      	mov	sp, r7
 8018434:	b010      	add	sp, #64	@ 0x40
 8018436:	bd80      	pop	{r7, pc}
 8018438:	01ffffff 	.word	0x01ffffff
 801843c:	fffffedf 	.word	0xfffffedf

08018440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	60f8      	str	r0, [r7, #12]
 8018448:	60b9      	str	r1, [r7, #8]
 801844a:	603b      	str	r3, [r7, #0]
 801844c:	1dfb      	adds	r3, r7, #7
 801844e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018450:	e04b      	b.n	80184ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018452:	69bb      	ldr	r3, [r7, #24]
 8018454:	3301      	adds	r3, #1
 8018456:	d048      	beq.n	80184ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018458:	f7f6 fc74 	bl	800ed44 <HAL_GetTick>
 801845c:	0002      	movs	r2, r0
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	1ad3      	subs	r3, r2, r3
 8018462:	69ba      	ldr	r2, [r7, #24]
 8018464:	429a      	cmp	r2, r3
 8018466:	d302      	bcc.n	801846e <UART_WaitOnFlagUntilTimeout+0x2e>
 8018468:	69bb      	ldr	r3, [r7, #24]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d101      	bne.n	8018472 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801846e:	2303      	movs	r3, #3
 8018470:	e04b      	b.n	801850a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	2204      	movs	r2, #4
 801847a:	4013      	ands	r3, r2
 801847c:	d035      	beq.n	80184ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	69db      	ldr	r3, [r3, #28]
 8018484:	2208      	movs	r2, #8
 8018486:	4013      	ands	r3, r2
 8018488:	2b08      	cmp	r3, #8
 801848a:	d111      	bne.n	80184b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2208      	movs	r2, #8
 8018492:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	0018      	movs	r0, r3
 8018498:	f000 f9ca 	bl	8018830 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	2284      	movs	r2, #132	@ 0x84
 80184a0:	2108      	movs	r1, #8
 80184a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	2278      	movs	r2, #120	@ 0x78
 80184a8:	2100      	movs	r1, #0
 80184aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80184ac:	2301      	movs	r3, #1
 80184ae:	e02c      	b.n	801850a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	69da      	ldr	r2, [r3, #28]
 80184b6:	2380      	movs	r3, #128	@ 0x80
 80184b8:	011b      	lsls	r3, r3, #4
 80184ba:	401a      	ands	r2, r3
 80184bc:	2380      	movs	r3, #128	@ 0x80
 80184be:	011b      	lsls	r3, r3, #4
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d112      	bne.n	80184ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	2280      	movs	r2, #128	@ 0x80
 80184ca:	0112      	lsls	r2, r2, #4
 80184cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	0018      	movs	r0, r3
 80184d2:	f000 f9ad 	bl	8018830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2284      	movs	r2, #132	@ 0x84
 80184da:	2120      	movs	r1, #32
 80184dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2278      	movs	r2, #120	@ 0x78
 80184e2:	2100      	movs	r1, #0
 80184e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80184e6:	2303      	movs	r3, #3
 80184e8:	e00f      	b.n	801850a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	69db      	ldr	r3, [r3, #28]
 80184f0:	68ba      	ldr	r2, [r7, #8]
 80184f2:	4013      	ands	r3, r2
 80184f4:	68ba      	ldr	r2, [r7, #8]
 80184f6:	1ad3      	subs	r3, r2, r3
 80184f8:	425a      	negs	r2, r3
 80184fa:	4153      	adcs	r3, r2
 80184fc:	b2db      	uxtb	r3, r3
 80184fe:	001a      	movs	r2, r3
 8018500:	1dfb      	adds	r3, r7, #7
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	429a      	cmp	r2, r3
 8018506:	d0a4      	beq.n	8018452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018508:	2300      	movs	r3, #0
}
 801850a:	0018      	movs	r0, r3
 801850c:	46bd      	mov	sp, r7
 801850e:	b004      	add	sp, #16
 8018510:	bd80      	pop	{r7, pc}
	...

08018514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b090      	sub	sp, #64	@ 0x40
 8018518:	af00      	add	r7, sp, #0
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	1dbb      	adds	r3, r7, #6
 8018520:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	68ba      	ldr	r2, [r7, #8]
 8018526:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	1dba      	adds	r2, r7, #6
 801852c:	2158      	movs	r1, #88	@ 0x58
 801852e:	8812      	ldrh	r2, [r2, #0]
 8018530:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	1dba      	adds	r2, r7, #6
 8018536:	215a      	movs	r1, #90	@ 0x5a
 8018538:	8812      	ldrh	r2, [r2, #0]
 801853a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2200      	movs	r2, #0
 8018540:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	689a      	ldr	r2, [r3, #8]
 8018546:	2380      	movs	r3, #128	@ 0x80
 8018548:	015b      	lsls	r3, r3, #5
 801854a:	429a      	cmp	r2, r3
 801854c:	d10d      	bne.n	801856a <UART_Start_Receive_IT+0x56>
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	691b      	ldr	r3, [r3, #16]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d104      	bne.n	8018560 <UART_Start_Receive_IT+0x4c>
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	225c      	movs	r2, #92	@ 0x5c
 801855a:	4950      	ldr	r1, [pc, #320]	@ (801869c <UART_Start_Receive_IT+0x188>)
 801855c:	5299      	strh	r1, [r3, r2]
 801855e:	e02e      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	225c      	movs	r2, #92	@ 0x5c
 8018564:	21ff      	movs	r1, #255	@ 0xff
 8018566:	5299      	strh	r1, [r3, r2]
 8018568:	e029      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	689b      	ldr	r3, [r3, #8]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d10d      	bne.n	801858e <UART_Start_Receive_IT+0x7a>
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	691b      	ldr	r3, [r3, #16]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d104      	bne.n	8018584 <UART_Start_Receive_IT+0x70>
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	225c      	movs	r2, #92	@ 0x5c
 801857e:	21ff      	movs	r1, #255	@ 0xff
 8018580:	5299      	strh	r1, [r3, r2]
 8018582:	e01c      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	225c      	movs	r2, #92	@ 0x5c
 8018588:	217f      	movs	r1, #127	@ 0x7f
 801858a:	5299      	strh	r1, [r3, r2]
 801858c:	e017      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	689a      	ldr	r2, [r3, #8]
 8018592:	2380      	movs	r3, #128	@ 0x80
 8018594:	055b      	lsls	r3, r3, #21
 8018596:	429a      	cmp	r2, r3
 8018598:	d10d      	bne.n	80185b6 <UART_Start_Receive_IT+0xa2>
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	691b      	ldr	r3, [r3, #16]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d104      	bne.n	80185ac <UART_Start_Receive_IT+0x98>
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	225c      	movs	r2, #92	@ 0x5c
 80185a6:	217f      	movs	r1, #127	@ 0x7f
 80185a8:	5299      	strh	r1, [r3, r2]
 80185aa:	e008      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	225c      	movs	r2, #92	@ 0x5c
 80185b0:	213f      	movs	r1, #63	@ 0x3f
 80185b2:	5299      	strh	r1, [r3, r2]
 80185b4:	e003      	b.n	80185be <UART_Start_Receive_IT+0xaa>
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	225c      	movs	r2, #92	@ 0x5c
 80185ba:	2100      	movs	r1, #0
 80185bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2284      	movs	r2, #132	@ 0x84
 80185c2:	2100      	movs	r1, #0
 80185c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2280      	movs	r2, #128	@ 0x80
 80185ca:	2122      	movs	r1, #34	@ 0x22
 80185cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185ce:	f3ef 8310 	mrs	r3, PRIMASK
 80185d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80185d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80185d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80185d8:	2301      	movs	r3, #1
 80185da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185de:	f383 8810 	msr	PRIMASK, r3
}
 80185e2:	46c0      	nop			@ (mov r8, r8)
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	689a      	ldr	r2, [r3, #8]
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	2101      	movs	r1, #1
 80185f0:	430a      	orrs	r2, r1
 80185f2:	609a      	str	r2, [r3, #8]
 80185f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185fa:	f383 8810 	msr	PRIMASK, r3
}
 80185fe:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	689a      	ldr	r2, [r3, #8]
 8018604:	2380      	movs	r3, #128	@ 0x80
 8018606:	015b      	lsls	r3, r3, #5
 8018608:	429a      	cmp	r2, r3
 801860a:	d107      	bne.n	801861c <UART_Start_Receive_IT+0x108>
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	691b      	ldr	r3, [r3, #16]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d103      	bne.n	801861c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	4a22      	ldr	r2, [pc, #136]	@ (80186a0 <UART_Start_Receive_IT+0x18c>)
 8018618:	669a      	str	r2, [r3, #104]	@ 0x68
 801861a:	e002      	b.n	8018622 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	4a21      	ldr	r2, [pc, #132]	@ (80186a4 <UART_Start_Receive_IT+0x190>)
 8018620:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	691b      	ldr	r3, [r3, #16]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d019      	beq.n	801865e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801862a:	f3ef 8310 	mrs	r3, PRIMASK
 801862e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018630:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018632:	637b      	str	r3, [r7, #52]	@ 0x34
 8018634:	2301      	movs	r3, #1
 8018636:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018638:	6a3b      	ldr	r3, [r7, #32]
 801863a:	f383 8810 	msr	PRIMASK, r3
}
 801863e:	46c0      	nop			@ (mov r8, r8)
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	681a      	ldr	r2, [r3, #0]
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	2190      	movs	r1, #144	@ 0x90
 801864c:	0049      	lsls	r1, r1, #1
 801864e:	430a      	orrs	r2, r1
 8018650:	601a      	str	r2, [r3, #0]
 8018652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018654:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018658:	f383 8810 	msr	PRIMASK, r3
}
 801865c:	e018      	b.n	8018690 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801865e:	f3ef 8310 	mrs	r3, PRIMASK
 8018662:	613b      	str	r3, [r7, #16]
  return(result);
 8018664:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018666:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018668:	2301      	movs	r3, #1
 801866a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	f383 8810 	msr	PRIMASK, r3
}
 8018672:	46c0      	nop			@ (mov r8, r8)
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2120      	movs	r1, #32
 8018680:	430a      	orrs	r2, r1
 8018682:	601a      	str	r2, [r3, #0]
 8018684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018688:	69bb      	ldr	r3, [r7, #24]
 801868a:	f383 8810 	msr	PRIMASK, r3
}
 801868e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8018690:	2300      	movs	r3, #0
}
 8018692:	0018      	movs	r0, r3
 8018694:	46bd      	mov	sp, r7
 8018696:	b010      	add	sp, #64	@ 0x40
 8018698:	bd80      	pop	{r7, pc}
 801869a:	46c0      	nop			@ (mov r8, r8)
 801869c:	000001ff 	.word	0x000001ff
 80186a0:	08018e15 	.word	0x08018e15
 80186a4:	08018c49 	.word	0x08018c49

080186a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b090      	sub	sp, #64	@ 0x40
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	60f8      	str	r0, [r7, #12]
 80186b0:	60b9      	str	r1, [r7, #8]
 80186b2:	1dbb      	adds	r3, r7, #6
 80186b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	68ba      	ldr	r2, [r7, #8]
 80186ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	1dba      	adds	r2, r7, #6
 80186c0:	2158      	movs	r1, #88	@ 0x58
 80186c2:	8812      	ldrh	r2, [r2, #0]
 80186c4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	2284      	movs	r2, #132	@ 0x84
 80186ca:	2100      	movs	r1, #0
 80186cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2280      	movs	r2, #128	@ 0x80
 80186d2:	2122      	movs	r1, #34	@ 0x22
 80186d4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d028      	beq.n	8018730 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186e2:	4a3e      	ldr	r2, [pc, #248]	@ (80187dc <UART_Start_Receive_DMA+0x134>)
 80186e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186ea:	4a3d      	ldr	r2, [pc, #244]	@ (80187e0 <UART_Start_Receive_DMA+0x138>)
 80186ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186f2:	4a3c      	ldr	r2, [pc, #240]	@ (80187e4 <UART_Start_Receive_DMA+0x13c>)
 80186f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80186fa:	2200      	movs	r2, #0
 80186fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	3324      	adds	r3, #36	@ 0x24
 8018708:	0019      	movs	r1, r3
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801870e:	001a      	movs	r2, r3
 8018710:	1dbb      	adds	r3, r7, #6
 8018712:	881b      	ldrh	r3, [r3, #0]
 8018714:	f7f7 f868 	bl	800f7e8 <HAL_DMA_Start_IT>
 8018718:	1e03      	subs	r3, r0, #0
 801871a:	d009      	beq.n	8018730 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2284      	movs	r2, #132	@ 0x84
 8018720:	2110      	movs	r1, #16
 8018722:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2280      	movs	r2, #128	@ 0x80
 8018728:	2120      	movs	r1, #32
 801872a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801872c:	2301      	movs	r3, #1
 801872e:	e050      	b.n	80187d2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	691b      	ldr	r3, [r3, #16]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d019      	beq.n	801876c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018738:	f3ef 8310 	mrs	r3, PRIMASK
 801873c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018742:	2301      	movs	r3, #1
 8018744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018748:	f383 8810 	msr	PRIMASK, r3
}
 801874c:	46c0      	nop			@ (mov r8, r8)
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	2180      	movs	r1, #128	@ 0x80
 801875a:	0049      	lsls	r1, r1, #1
 801875c:	430a      	orrs	r2, r1
 801875e:	601a      	str	r2, [r3, #0]
 8018760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018762:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018766:	f383 8810 	msr	PRIMASK, r3
}
 801876a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801876c:	f3ef 8310 	mrs	r3, PRIMASK
 8018770:	613b      	str	r3, [r7, #16]
  return(result);
 8018772:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018776:	2301      	movs	r3, #1
 8018778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	f383 8810 	msr	PRIMASK, r3
}
 8018780:	46c0      	nop			@ (mov r8, r8)
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	689a      	ldr	r2, [r3, #8]
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	2101      	movs	r1, #1
 801878e:	430a      	orrs	r2, r1
 8018790:	609a      	str	r2, [r3, #8]
 8018792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018794:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018796:	69bb      	ldr	r3, [r7, #24]
 8018798:	f383 8810 	msr	PRIMASK, r3
}
 801879c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801879e:	f3ef 8310 	mrs	r3, PRIMASK
 80187a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80187a4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80187a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80187a8:	2301      	movs	r3, #1
 80187aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187ac:	6a3b      	ldr	r3, [r7, #32]
 80187ae:	f383 8810 	msr	PRIMASK, r3
}
 80187b2:	46c0      	nop			@ (mov r8, r8)
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	689a      	ldr	r2, [r3, #8]
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2140      	movs	r1, #64	@ 0x40
 80187c0:	430a      	orrs	r2, r1
 80187c2:	609a      	str	r2, [r3, #8]
 80187c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ca:	f383 8810 	msr	PRIMASK, r3
}
 80187ce:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80187d0:	2300      	movs	r3, #0
}
 80187d2:	0018      	movs	r0, r3
 80187d4:	46bd      	mov	sp, r7
 80187d6:	b010      	add	sp, #64	@ 0x40
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	46c0      	nop			@ (mov r8, r8)
 80187dc:	080189b9 	.word	0x080189b9
 80187e0:	08018aed 	.word	0x08018aed
 80187e4:	08018b35 	.word	0x08018b35

080187e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b086      	sub	sp, #24
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187f0:	f3ef 8310 	mrs	r3, PRIMASK
 80187f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80187f6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80187f8:	617b      	str	r3, [r7, #20]
 80187fa:	2301      	movs	r3, #1
 80187fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	f383 8810 	msr	PRIMASK, r3
}
 8018804:	46c0      	nop			@ (mov r8, r8)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	21c0      	movs	r1, #192	@ 0xc0
 8018812:	438a      	bics	r2, r1
 8018814:	601a      	str	r2, [r3, #0]
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801881a:	693b      	ldr	r3, [r7, #16]
 801881c:	f383 8810 	msr	PRIMASK, r3
}
 8018820:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2220      	movs	r2, #32
 8018826:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018828:	46c0      	nop			@ (mov r8, r8)
 801882a:	46bd      	mov	sp, r7
 801882c:	b006      	add	sp, #24
 801882e:	bd80      	pop	{r7, pc}

08018830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b08e      	sub	sp, #56	@ 0x38
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018838:	f3ef 8310 	mrs	r3, PRIMASK
 801883c:	617b      	str	r3, [r7, #20]
  return(result);
 801883e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018840:	637b      	str	r3, [r7, #52]	@ 0x34
 8018842:	2301      	movs	r3, #1
 8018844:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018846:	69bb      	ldr	r3, [r7, #24]
 8018848:	f383 8810 	msr	PRIMASK, r3
}
 801884c:	46c0      	nop			@ (mov r8, r8)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	681a      	ldr	r2, [r3, #0]
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	4926      	ldr	r1, [pc, #152]	@ (80188f4 <UART_EndRxTransfer+0xc4>)
 801885a:	400a      	ands	r2, r1
 801885c:	601a      	str	r2, [r3, #0]
 801885e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018862:	69fb      	ldr	r3, [r7, #28]
 8018864:	f383 8810 	msr	PRIMASK, r3
}
 8018868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801886a:	f3ef 8310 	mrs	r3, PRIMASK
 801886e:	623b      	str	r3, [r7, #32]
  return(result);
 8018870:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018872:	633b      	str	r3, [r7, #48]	@ 0x30
 8018874:	2301      	movs	r3, #1
 8018876:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801887a:	f383 8810 	msr	PRIMASK, r3
}
 801887e:	46c0      	nop			@ (mov r8, r8)
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	689a      	ldr	r2, [r3, #8]
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	2101      	movs	r1, #1
 801888c:	438a      	bics	r2, r1
 801888e:	609a      	str	r2, [r3, #8]
 8018890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018892:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018896:	f383 8810 	msr	PRIMASK, r3
}
 801889a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d118      	bne.n	80188d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188a4:	f3ef 8310 	mrs	r3, PRIMASK
 80188a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80188aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80188ae:	2301      	movs	r3, #1
 80188b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	f383 8810 	msr	PRIMASK, r3
}
 80188b8:	46c0      	nop			@ (mov r8, r8)
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	681a      	ldr	r2, [r3, #0]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	2110      	movs	r1, #16
 80188c6:	438a      	bics	r2, r1
 80188c8:	601a      	str	r2, [r3, #0]
 80188ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188ce:	693b      	ldr	r3, [r7, #16]
 80188d0:	f383 8810 	msr	PRIMASK, r3
}
 80188d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2280      	movs	r2, #128	@ 0x80
 80188da:	2120      	movs	r1, #32
 80188dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	2200      	movs	r2, #0
 80188e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2200      	movs	r2, #0
 80188e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80188ea:	46c0      	nop			@ (mov r8, r8)
 80188ec:	46bd      	mov	sp, r7
 80188ee:	b00e      	add	sp, #56	@ 0x38
 80188f0:	bd80      	pop	{r7, pc}
 80188f2:	46c0      	nop			@ (mov r8, r8)
 80188f4:	fffffedf 	.word	0xfffffedf

080188f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b08c      	sub	sp, #48	@ 0x30
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018904:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	2220      	movs	r2, #32
 801890e:	4013      	ands	r3, r2
 8018910:	d135      	bne.n	801897e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018914:	2252      	movs	r2, #82	@ 0x52
 8018916:	2100      	movs	r1, #0
 8018918:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801891a:	f3ef 8310 	mrs	r3, PRIMASK
 801891e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018920:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018924:	2301      	movs	r3, #1
 8018926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018928:	693b      	ldr	r3, [r7, #16]
 801892a:	f383 8810 	msr	PRIMASK, r3
}
 801892e:	46c0      	nop			@ (mov r8, r8)
 8018930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	689a      	ldr	r2, [r3, #8]
 8018936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	2180      	movs	r1, #128	@ 0x80
 801893c:	438a      	bics	r2, r1
 801893e:	609a      	str	r2, [r3, #8]
 8018940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018944:	697b      	ldr	r3, [r7, #20]
 8018946:	f383 8810 	msr	PRIMASK, r3
}
 801894a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801894c:	f3ef 8310 	mrs	r3, PRIMASK
 8018950:	61bb      	str	r3, [r7, #24]
  return(result);
 8018952:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018954:	627b      	str	r3, [r7, #36]	@ 0x24
 8018956:	2301      	movs	r3, #1
 8018958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801895a:	69fb      	ldr	r3, [r7, #28]
 801895c:	f383 8810 	msr	PRIMASK, r3
}
 8018960:	46c0      	nop			@ (mov r8, r8)
 8018962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	681a      	ldr	r2, [r3, #0]
 8018968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2140      	movs	r1, #64	@ 0x40
 801896e:	430a      	orrs	r2, r1
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018976:	6a3b      	ldr	r3, [r7, #32]
 8018978:	f383 8810 	msr	PRIMASK, r3
}
 801897c:	e006      	b.n	801898c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018980:	228c      	movs	r2, #140	@ 0x8c
 8018982:	589b      	ldr	r3, [r3, r2]
 8018984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018986:	0010      	movs	r0, r2
 8018988:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801898a:	46c0      	nop			@ (mov r8, r8)
 801898c:	46c0      	nop			@ (mov r8, r8)
 801898e:	46bd      	mov	sp, r7
 8018990:	b00c      	add	sp, #48	@ 0x30
 8018992:	bd80      	pop	{r7, pc}

08018994 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b084      	sub	sp, #16
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	2288      	movs	r2, #136	@ 0x88
 80189a6:	589b      	ldr	r3, [r3, r2]
 80189a8:	68fa      	ldr	r2, [r7, #12]
 80189aa:	0010      	movs	r0, r2
 80189ac:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80189ae:	46c0      	nop			@ (mov r8, r8)
 80189b0:	46bd      	mov	sp, r7
 80189b2:	b004      	add	sp, #16
 80189b4:	bd80      	pop	{r7, pc}
	...

080189b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b094      	sub	sp, #80	@ 0x50
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	2220      	movs	r2, #32
 80189ce:	4013      	ands	r3, r2
 80189d0:	d16f      	bne.n	8018ab2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80189d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189d4:	225a      	movs	r2, #90	@ 0x5a
 80189d6:	2100      	movs	r1, #0
 80189d8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189da:	f3ef 8310 	mrs	r3, PRIMASK
 80189de:	61bb      	str	r3, [r7, #24]
  return(result);
 80189e0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80189e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80189e4:	2301      	movs	r3, #1
 80189e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	f383 8810 	msr	PRIMASK, r3
}
 80189ee:	46c0      	nop			@ (mov r8, r8)
 80189f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	681a      	ldr	r2, [r3, #0]
 80189f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	493b      	ldr	r1, [pc, #236]	@ (8018ae8 <UART_DMAReceiveCplt+0x130>)
 80189fc:	400a      	ands	r2, r1
 80189fe:	601a      	str	r2, [r3, #0]
 8018a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018a02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a04:	6a3b      	ldr	r3, [r7, #32]
 8018a06:	f383 8810 	msr	PRIMASK, r3
}
 8018a0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8018a10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8018a16:	2301      	movs	r3, #1
 8018a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a1c:	f383 8810 	msr	PRIMASK, r3
}
 8018a20:	46c0      	nop			@ (mov r8, r8)
 8018a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	689a      	ldr	r2, [r3, #8]
 8018a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2101      	movs	r1, #1
 8018a2e:	438a      	bics	r2, r1
 8018a30:	609a      	str	r2, [r3, #8]
 8018a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a38:	f383 8810 	msr	PRIMASK, r3
}
 8018a3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8018a42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8018a48:	2301      	movs	r3, #1
 8018a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a4e:	f383 8810 	msr	PRIMASK, r3
}
 8018a52:	46c0      	nop			@ (mov r8, r8)
 8018a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	689a      	ldr	r2, [r3, #8]
 8018a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2140      	movs	r1, #64	@ 0x40
 8018a60:	438a      	bics	r2, r1
 8018a62:	609a      	str	r2, [r3, #8]
 8018a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a6a:	f383 8810 	msr	PRIMASK, r3
}
 8018a6e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a72:	2280      	movs	r2, #128	@ 0x80
 8018a74:	2120      	movs	r1, #32
 8018a76:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d118      	bne.n	8018ab2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a80:	f3ef 8310 	mrs	r3, PRIMASK
 8018a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a86:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	f383 8810 	msr	PRIMASK, r3
}
 8018a94:	46c0      	nop			@ (mov r8, r8)
 8018a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	681a      	ldr	r2, [r3, #0]
 8018a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	2110      	movs	r1, #16
 8018aa2:	438a      	bics	r2, r1
 8018aa4:	601a      	str	r2, [r3, #0]
 8018aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018aa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	f383 8810 	msr	PRIMASK, r3
}
 8018ab0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018abc:	2b01      	cmp	r3, #1
 8018abe:	d109      	bne.n	8018ad4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ac2:	22ac      	movs	r2, #172	@ 0xac
 8018ac4:	589b      	ldr	r3, [r3, r2]
 8018ac6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018ac8:	2158      	movs	r1, #88	@ 0x58
 8018aca:	5a51      	ldrh	r1, [r2, r1]
 8018acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018ace:	0010      	movs	r0, r2
 8018ad0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018ad2:	e005      	b.n	8018ae0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ad6:	2294      	movs	r2, #148	@ 0x94
 8018ad8:	589b      	ldr	r3, [r3, r2]
 8018ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018adc:	0010      	movs	r0, r2
 8018ade:	4798      	blx	r3
}
 8018ae0:	46c0      	nop			@ (mov r8, r8)
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	b014      	add	sp, #80	@ 0x50
 8018ae6:	bd80      	pop	{r7, pc}
 8018ae8:	fffffeff 	.word	0xfffffeff

08018aec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018af8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	2201      	movs	r2, #1
 8018afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d10b      	bne.n	8018b20 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	22ac      	movs	r2, #172	@ 0xac
 8018b0c:	589b      	ldr	r3, [r3, r2]
 8018b0e:	68fa      	ldr	r2, [r7, #12]
 8018b10:	2158      	movs	r1, #88	@ 0x58
 8018b12:	5a52      	ldrh	r2, [r2, r1]
 8018b14:	0852      	lsrs	r2, r2, #1
 8018b16:	b291      	uxth	r1, r2
 8018b18:	68fa      	ldr	r2, [r7, #12]
 8018b1a:	0010      	movs	r0, r2
 8018b1c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018b1e:	e005      	b.n	8018b2c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	2290      	movs	r2, #144	@ 0x90
 8018b24:	589b      	ldr	r3, [r3, r2]
 8018b26:	68fa      	ldr	r2, [r7, #12]
 8018b28:	0010      	movs	r0, r2
 8018b2a:	4798      	blx	r3
}
 8018b2c:	46c0      	nop			@ (mov r8, r8)
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	b004      	add	sp, #16
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b086      	sub	sp, #24
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018b46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	2280      	movs	r2, #128	@ 0x80
 8018b4c:	589b      	ldr	r3, [r3, r2]
 8018b4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	689b      	ldr	r3, [r3, #8]
 8018b56:	2280      	movs	r2, #128	@ 0x80
 8018b58:	4013      	ands	r3, r2
 8018b5a:	2b80      	cmp	r3, #128	@ 0x80
 8018b5c:	d10a      	bne.n	8018b74 <UART_DMAError+0x40>
 8018b5e:	693b      	ldr	r3, [r7, #16]
 8018b60:	2b21      	cmp	r3, #33	@ 0x21
 8018b62:	d107      	bne.n	8018b74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018b64:	697b      	ldr	r3, [r7, #20]
 8018b66:	2252      	movs	r2, #82	@ 0x52
 8018b68:	2100      	movs	r1, #0
 8018b6a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018b6c:	697b      	ldr	r3, [r7, #20]
 8018b6e:	0018      	movs	r0, r3
 8018b70:	f7ff fe3a 	bl	80187e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	689b      	ldr	r3, [r3, #8]
 8018b7a:	2240      	movs	r2, #64	@ 0x40
 8018b7c:	4013      	ands	r3, r2
 8018b7e:	2b40      	cmp	r3, #64	@ 0x40
 8018b80:	d10a      	bne.n	8018b98 <UART_DMAError+0x64>
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	2b22      	cmp	r3, #34	@ 0x22
 8018b86:	d107      	bne.n	8018b98 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	225a      	movs	r2, #90	@ 0x5a
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018b90:	697b      	ldr	r3, [r7, #20]
 8018b92:	0018      	movs	r0, r3
 8018b94:	f7ff fe4c 	bl	8018830 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	2284      	movs	r2, #132	@ 0x84
 8018b9c:	589b      	ldr	r3, [r3, r2]
 8018b9e:	2210      	movs	r2, #16
 8018ba0:	431a      	orrs	r2, r3
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	2184      	movs	r1, #132	@ 0x84
 8018ba6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	2298      	movs	r2, #152	@ 0x98
 8018bac:	589b      	ldr	r3, [r3, r2]
 8018bae:	697a      	ldr	r2, [r7, #20]
 8018bb0:	0010      	movs	r0, r2
 8018bb2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018bb4:	46c0      	nop			@ (mov r8, r8)
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	b006      	add	sp, #24
 8018bba:	bd80      	pop	{r7, pc}

08018bbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b084      	sub	sp, #16
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	225a      	movs	r2, #90	@ 0x5a
 8018bce:	2100      	movs	r1, #0
 8018bd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	2252      	movs	r2, #82	@ 0x52
 8018bd6:	2100      	movs	r1, #0
 8018bd8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	2298      	movs	r2, #152	@ 0x98
 8018bde:	589b      	ldr	r3, [r3, r2]
 8018be0:	68fa      	ldr	r2, [r7, #12]
 8018be2:	0010      	movs	r0, r2
 8018be4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018be6:	46c0      	nop			@ (mov r8, r8)
 8018be8:	46bd      	mov	sp, r7
 8018bea:	b004      	add	sp, #16
 8018bec:	bd80      	pop	{r7, pc}

08018bee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018bee:	b580      	push	{r7, lr}
 8018bf0:	b086      	sub	sp, #24
 8018bf2:	af00      	add	r7, sp, #0
 8018bf4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8018bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8018bfc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018bfe:	617b      	str	r3, [r7, #20]
 8018c00:	2301      	movs	r3, #1
 8018c02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	f383 8810 	msr	PRIMASK, r3
}
 8018c0a:	46c0      	nop			@ (mov r8, r8)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	681a      	ldr	r2, [r3, #0]
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	2140      	movs	r1, #64	@ 0x40
 8018c18:	438a      	bics	r2, r1
 8018c1a:	601a      	str	r2, [r3, #0]
 8018c1c:	697b      	ldr	r3, [r7, #20]
 8018c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	f383 8810 	msr	PRIMASK, r3
}
 8018c26:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	2220      	movs	r2, #32
 8018c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	2200      	movs	r2, #0
 8018c32:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	228c      	movs	r2, #140	@ 0x8c
 8018c38:	589b      	ldr	r3, [r3, r2]
 8018c3a:	687a      	ldr	r2, [r7, #4]
 8018c3c:	0010      	movs	r0, r2
 8018c3e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018c40:	46c0      	nop			@ (mov r8, r8)
 8018c42:	46bd      	mov	sp, r7
 8018c44:	b006      	add	sp, #24
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b094      	sub	sp, #80	@ 0x50
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018c50:	204e      	movs	r0, #78	@ 0x4e
 8018c52:	183b      	adds	r3, r7, r0
 8018c54:	687a      	ldr	r2, [r7, #4]
 8018c56:	215c      	movs	r1, #92	@ 0x5c
 8018c58:	5a52      	ldrh	r2, [r2, r1]
 8018c5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2280      	movs	r2, #128	@ 0x80
 8018c60:	589b      	ldr	r3, [r3, r2]
 8018c62:	2b22      	cmp	r3, #34	@ 0x22
 8018c64:	d000      	beq.n	8018c68 <UART_RxISR_8BIT+0x20>
 8018c66:	e0c2      	b.n	8018dee <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c6e:	214c      	movs	r1, #76	@ 0x4c
 8018c70:	187b      	adds	r3, r7, r1
 8018c72:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018c74:	187b      	adds	r3, r7, r1
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	b2da      	uxtb	r2, r3
 8018c7a:	183b      	adds	r3, r7, r0
 8018c7c:	881b      	ldrh	r3, [r3, #0]
 8018c7e:	b2d9      	uxtb	r1, r3
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c84:	400a      	ands	r2, r1
 8018c86:	b2d2      	uxtb	r2, r2
 8018c88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c8e:	1c5a      	adds	r2, r3, #1
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	225a      	movs	r2, #90	@ 0x5a
 8018c98:	5a9b      	ldrh	r3, [r3, r2]
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	3b01      	subs	r3, #1
 8018c9e:	b299      	uxth	r1, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	225a      	movs	r2, #90	@ 0x5a
 8018ca4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	225a      	movs	r2, #90	@ 0x5a
 8018caa:	5a9b      	ldrh	r3, [r3, r2]
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d000      	beq.n	8018cb4 <UART_RxISR_8BIT+0x6c>
 8018cb2:	e0a4      	b.n	8018dfe <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8018cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cc4:	f383 8810 	msr	PRIMASK, r3
}
 8018cc8:	46c0      	nop			@ (mov r8, r8)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	681a      	ldr	r2, [r3, #0]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	494c      	ldr	r1, [pc, #304]	@ (8018e08 <UART_RxISR_8BIT+0x1c0>)
 8018cd6:	400a      	ands	r2, r1
 8018cd8:	601a      	str	r2, [r3, #0]
 8018cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ce0:	f383 8810 	msr	PRIMASK, r3
}
 8018ce4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8018cea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018cf6:	f383 8810 	msr	PRIMASK, r3
}
 8018cfa:	46c0      	nop			@ (mov r8, r8)
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	689a      	ldr	r2, [r3, #8]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	2101      	movs	r1, #1
 8018d08:	438a      	bics	r2, r1
 8018d0a:	609a      	str	r2, [r3, #8]
 8018d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d12:	f383 8810 	msr	PRIMASK, r3
}
 8018d16:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2280      	movs	r2, #128	@ 0x80
 8018d1c:	2120      	movs	r1, #32
 8018d1e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	2200      	movs	r2, #0
 8018d24:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2200      	movs	r2, #0
 8018d2a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	4a36      	ldr	r2, [pc, #216]	@ (8018e0c <UART_RxISR_8BIT+0x1c4>)
 8018d32:	4293      	cmp	r3, r2
 8018d34:	d01f      	beq.n	8018d76 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	685a      	ldr	r2, [r3, #4]
 8018d3c:	2380      	movs	r3, #128	@ 0x80
 8018d3e:	041b      	lsls	r3, r3, #16
 8018d40:	4013      	ands	r3, r2
 8018d42:	d018      	beq.n	8018d76 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d44:	f3ef 8310 	mrs	r3, PRIMASK
 8018d48:	61bb      	str	r3, [r7, #24]
  return(result);
 8018d4a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8018d4e:	2301      	movs	r3, #1
 8018d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d52:	69fb      	ldr	r3, [r7, #28]
 8018d54:	f383 8810 	msr	PRIMASK, r3
}
 8018d58:	46c0      	nop			@ (mov r8, r8)
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	681a      	ldr	r2, [r3, #0]
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	492a      	ldr	r1, [pc, #168]	@ (8018e10 <UART_RxISR_8BIT+0x1c8>)
 8018d66:	400a      	ands	r2, r1
 8018d68:	601a      	str	r2, [r3, #0]
 8018d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d6e:	6a3b      	ldr	r3, [r7, #32]
 8018d70:	f383 8810 	msr	PRIMASK, r3
}
 8018d74:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018d7a:	2b01      	cmp	r3, #1
 8018d7c:	d130      	bne.n	8018de0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	2200      	movs	r2, #0
 8018d82:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d84:	f3ef 8310 	mrs	r3, PRIMASK
 8018d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8018d8a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d8e:	2301      	movs	r3, #1
 8018d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d92:	693b      	ldr	r3, [r7, #16]
 8018d94:	f383 8810 	msr	PRIMASK, r3
}
 8018d98:	46c0      	nop			@ (mov r8, r8)
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	2110      	movs	r1, #16
 8018da6:	438a      	bics	r2, r1
 8018da8:	601a      	str	r2, [r3, #0]
 8018daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	f383 8810 	msr	PRIMASK, r3
}
 8018db4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	69db      	ldr	r3, [r3, #28]
 8018dbc:	2210      	movs	r2, #16
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	2b10      	cmp	r3, #16
 8018dc2:	d103      	bne.n	8018dcc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	2210      	movs	r2, #16
 8018dca:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	22ac      	movs	r2, #172	@ 0xac
 8018dd0:	589b      	ldr	r3, [r3, r2]
 8018dd2:	687a      	ldr	r2, [r7, #4]
 8018dd4:	2158      	movs	r1, #88	@ 0x58
 8018dd6:	5a51      	ldrh	r1, [r2, r1]
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	0010      	movs	r0, r2
 8018ddc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018dde:	e00e      	b.n	8018dfe <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2294      	movs	r2, #148	@ 0x94
 8018de4:	589b      	ldr	r3, [r3, r2]
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	0010      	movs	r0, r2
 8018dea:	4798      	blx	r3
}
 8018dec:	e007      	b.n	8018dfe <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	699a      	ldr	r2, [r3, #24]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	2108      	movs	r1, #8
 8018dfa:	430a      	orrs	r2, r1
 8018dfc:	619a      	str	r2, [r3, #24]
}
 8018dfe:	46c0      	nop			@ (mov r8, r8)
 8018e00:	46bd      	mov	sp, r7
 8018e02:	b014      	add	sp, #80	@ 0x50
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	46c0      	nop			@ (mov r8, r8)
 8018e08:	fffffedf 	.word	0xfffffedf
 8018e0c:	40004800 	.word	0x40004800
 8018e10:	fbffffff 	.word	0xfbffffff

08018e14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b094      	sub	sp, #80	@ 0x50
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018e1c:	204e      	movs	r0, #78	@ 0x4e
 8018e1e:	183b      	adds	r3, r7, r0
 8018e20:	687a      	ldr	r2, [r7, #4]
 8018e22:	215c      	movs	r1, #92	@ 0x5c
 8018e24:	5a52      	ldrh	r2, [r2, r1]
 8018e26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2280      	movs	r2, #128	@ 0x80
 8018e2c:	589b      	ldr	r3, [r3, r2]
 8018e2e:	2b22      	cmp	r3, #34	@ 0x22
 8018e30:	d000      	beq.n	8018e34 <UART_RxISR_16BIT+0x20>
 8018e32:	e0c2      	b.n	8018fba <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018e3a:	214c      	movs	r1, #76	@ 0x4c
 8018e3c:	187b      	adds	r3, r7, r1
 8018e3e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e44:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018e46:	187b      	adds	r3, r7, r1
 8018e48:	183a      	adds	r2, r7, r0
 8018e4a:	881b      	ldrh	r3, [r3, #0]
 8018e4c:	8812      	ldrh	r2, [r2, #0]
 8018e4e:	4013      	ands	r3, r2
 8018e50:	b29a      	uxth	r2, r3
 8018e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e5a:	1c9a      	adds	r2, r3, #2
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	225a      	movs	r2, #90	@ 0x5a
 8018e64:	5a9b      	ldrh	r3, [r3, r2]
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	3b01      	subs	r3, #1
 8018e6a:	b299      	uxth	r1, r3
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	225a      	movs	r2, #90	@ 0x5a
 8018e70:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	225a      	movs	r2, #90	@ 0x5a
 8018e76:	5a9b      	ldrh	r3, [r3, r2]
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d000      	beq.n	8018e80 <UART_RxISR_16BIT+0x6c>
 8018e7e:	e0a4      	b.n	8018fca <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e80:	f3ef 8310 	mrs	r3, PRIMASK
 8018e84:	623b      	str	r3, [r7, #32]
  return(result);
 8018e86:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e8a:	2301      	movs	r3, #1
 8018e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e90:	f383 8810 	msr	PRIMASK, r3
}
 8018e94:	46c0      	nop			@ (mov r8, r8)
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	494c      	ldr	r1, [pc, #304]	@ (8018fd4 <UART_RxISR_16BIT+0x1c0>)
 8018ea2:	400a      	ands	r2, r1
 8018ea4:	601a      	str	r2, [r3, #0]
 8018ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018eac:	f383 8810 	msr	PRIMASK, r3
}
 8018eb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8018eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ec2:	f383 8810 	msr	PRIMASK, r3
}
 8018ec6:	46c0      	nop			@ (mov r8, r8)
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	689a      	ldr	r2, [r3, #8]
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	2101      	movs	r1, #1
 8018ed4:	438a      	bics	r2, r1
 8018ed6:	609a      	str	r2, [r3, #8]
 8018ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018eda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ede:	f383 8810 	msr	PRIMASK, r3
}
 8018ee2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2280      	movs	r2, #128	@ 0x80
 8018ee8:	2120      	movs	r1, #32
 8018eea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4a36      	ldr	r2, [pc, #216]	@ (8018fd8 <UART_RxISR_16BIT+0x1c4>)
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d01f      	beq.n	8018f42 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	685a      	ldr	r2, [r3, #4]
 8018f08:	2380      	movs	r3, #128	@ 0x80
 8018f0a:	041b      	lsls	r3, r3, #16
 8018f0c:	4013      	ands	r3, r2
 8018f0e:	d018      	beq.n	8018f42 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f10:	f3ef 8310 	mrs	r3, PRIMASK
 8018f14:	617b      	str	r3, [r7, #20]
  return(result);
 8018f16:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f1e:	69bb      	ldr	r3, [r7, #24]
 8018f20:	f383 8810 	msr	PRIMASK, r3
}
 8018f24:	46c0      	nop			@ (mov r8, r8)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	681a      	ldr	r2, [r3, #0]
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	492a      	ldr	r1, [pc, #168]	@ (8018fdc <UART_RxISR_16BIT+0x1c8>)
 8018f32:	400a      	ands	r2, r1
 8018f34:	601a      	str	r2, [r3, #0]
 8018f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f3a:	69fb      	ldr	r3, [r7, #28]
 8018f3c:	f383 8810 	msr	PRIMASK, r3
}
 8018f40:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f46:	2b01      	cmp	r3, #1
 8018f48:	d130      	bne.n	8018fac <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f50:	f3ef 8310 	mrs	r3, PRIMASK
 8018f54:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f56:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f383 8810 	msr	PRIMASK, r3
}
 8018f64:	46c0      	nop			@ (mov r8, r8)
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	681a      	ldr	r2, [r3, #0]
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2110      	movs	r1, #16
 8018f72:	438a      	bics	r2, r1
 8018f74:	601a      	str	r2, [r3, #0]
 8018f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f7a:	693b      	ldr	r3, [r7, #16]
 8018f7c:	f383 8810 	msr	PRIMASK, r3
}
 8018f80:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	69db      	ldr	r3, [r3, #28]
 8018f88:	2210      	movs	r2, #16
 8018f8a:	4013      	ands	r3, r2
 8018f8c:	2b10      	cmp	r3, #16
 8018f8e:	d103      	bne.n	8018f98 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	2210      	movs	r2, #16
 8018f96:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	22ac      	movs	r2, #172	@ 0xac
 8018f9c:	589b      	ldr	r3, [r3, r2]
 8018f9e:	687a      	ldr	r2, [r7, #4]
 8018fa0:	2158      	movs	r1, #88	@ 0x58
 8018fa2:	5a51      	ldrh	r1, [r2, r1]
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	0010      	movs	r0, r2
 8018fa8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018faa:	e00e      	b.n	8018fca <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	2294      	movs	r2, #148	@ 0x94
 8018fb0:	589b      	ldr	r3, [r3, r2]
 8018fb2:	687a      	ldr	r2, [r7, #4]
 8018fb4:	0010      	movs	r0, r2
 8018fb6:	4798      	blx	r3
}
 8018fb8:	e007      	b.n	8018fca <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	699a      	ldr	r2, [r3, #24]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	2108      	movs	r1, #8
 8018fc6:	430a      	orrs	r2, r1
 8018fc8:	619a      	str	r2, [r3, #24]
}
 8018fca:	46c0      	nop			@ (mov r8, r8)
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	b014      	add	sp, #80	@ 0x50
 8018fd0:	bd80      	pop	{r7, pc}
 8018fd2:	46c0      	nop			@ (mov r8, r8)
 8018fd4:	fffffedf 	.word	0xfffffedf
 8018fd8:	40004800 	.word	0x40004800
 8018fdc:	fbffffff 	.word	0xfbffffff

08018fe0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018fe8:	46c0      	nop			@ (mov r8, r8)
 8018fea:	46bd      	mov	sp, r7
 8018fec:	b002      	add	sp, #8
 8018fee:	bd80      	pop	{r7, pc}

08018ff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b084      	sub	sp, #16
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2244      	movs	r2, #68	@ 0x44
 8018ffc:	2100      	movs	r1, #0
 8018ffe:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019000:	4b05      	ldr	r3, [pc, #20]	@ (8019018 <USB_EnableGlobalInt+0x28>)
 8019002:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	b299      	uxth	r1, r3
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2240      	movs	r2, #64	@ 0x40
 801900c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801900e:	2300      	movs	r3, #0
}
 8019010:	0018      	movs	r0, r3
 8019012:	46bd      	mov	sp, r7
 8019014:	b004      	add	sp, #16
 8019016:	bd80      	pop	{r7, pc}
 8019018:	0000bf80 	.word	0x0000bf80

0801901c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b084      	sub	sp, #16
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019024:	4b09      	ldr	r3, [pc, #36]	@ (801904c <USB_DisableGlobalInt+0x30>)
 8019026:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2240      	movs	r2, #64	@ 0x40
 801902c:	5a9b      	ldrh	r3, [r3, r2]
 801902e:	b29b      	uxth	r3, r3
 8019030:	68fa      	ldr	r2, [r7, #12]
 8019032:	b292      	uxth	r2, r2
 8019034:	43d2      	mvns	r2, r2
 8019036:	b292      	uxth	r2, r2
 8019038:	4013      	ands	r3, r2
 801903a:	b299      	uxth	r1, r3
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2240      	movs	r2, #64	@ 0x40
 8019040:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019042:	2300      	movs	r3, #0
}
 8019044:	0018      	movs	r0, r3
 8019046:	46bd      	mov	sp, r7
 8019048:	b004      	add	sp, #16
 801904a:	bd80      	pop	{r7, pc}
 801904c:	0000bf80 	.word	0x0000bf80

08019050 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019050:	b084      	sub	sp, #16
 8019052:	b590      	push	{r4, r7, lr}
 8019054:	b083      	sub	sp, #12
 8019056:	af00      	add	r7, sp, #0
 8019058:	6078      	str	r0, [r7, #4]
 801905a:	2004      	movs	r0, #4
 801905c:	2410      	movs	r4, #16
 801905e:	1900      	adds	r0, r0, r4
 8019060:	2408      	movs	r4, #8
 8019062:	46a4      	mov	ip, r4
 8019064:	44bc      	add	ip, r7
 8019066:	4460      	add	r0, ip
 8019068:	6001      	str	r1, [r0, #0]
 801906a:	6042      	str	r2, [r0, #4]
 801906c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	2240      	movs	r2, #64	@ 0x40
 8019072:	2101      	movs	r1, #1
 8019074:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	2240      	movs	r2, #64	@ 0x40
 801907a:	2100      	movs	r1, #0
 801907c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2244      	movs	r2, #68	@ 0x44
 8019082:	2100      	movs	r1, #0
 8019084:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2250      	movs	r2, #80	@ 0x50
 801908a:	2100      	movs	r1, #0
 801908c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801908e:	2300      	movs	r3, #0
}
 8019090:	0018      	movs	r0, r3
 8019092:	46bd      	mov	sp, r7
 8019094:	b003      	add	sp, #12
 8019096:	bc90      	pop	{r4, r7}
 8019098:	bc08      	pop	{r3}
 801909a:	b004      	add	sp, #16
 801909c:	4718      	bx	r3
	...

080190a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b09c      	sub	sp, #112	@ 0x70
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
 80190a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80190aa:	236f      	movs	r3, #111	@ 0x6f
 80190ac:	18fb      	adds	r3, r7, r3
 80190ae:	2200      	movs	r2, #0
 80190b0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	009b      	lsls	r3, r3, #2
 80190ba:	18d3      	adds	r3, r2, r3
 80190bc:	881b      	ldrh	r3, [r3, #0]
 80190be:	b29a      	uxth	r2, r3
 80190c0:	236c      	movs	r3, #108	@ 0x6c
 80190c2:	18fb      	adds	r3, r7, r3
 80190c4:	49a3      	ldr	r1, [pc, #652]	@ (8019354 <USB_ActivateEndpoint+0x2b4>)
 80190c6:	400a      	ands	r2, r1
 80190c8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	78db      	ldrb	r3, [r3, #3]
 80190ce:	2b03      	cmp	r3, #3
 80190d0:	d017      	beq.n	8019102 <USB_ActivateEndpoint+0x62>
 80190d2:	dc28      	bgt.n	8019126 <USB_ActivateEndpoint+0x86>
 80190d4:	2b02      	cmp	r3, #2
 80190d6:	d00e      	beq.n	80190f6 <USB_ActivateEndpoint+0x56>
 80190d8:	dc25      	bgt.n	8019126 <USB_ActivateEndpoint+0x86>
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d002      	beq.n	80190e4 <USB_ActivateEndpoint+0x44>
 80190de:	2b01      	cmp	r3, #1
 80190e0:	d018      	beq.n	8019114 <USB_ActivateEndpoint+0x74>
 80190e2:	e020      	b.n	8019126 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80190e4:	226c      	movs	r2, #108	@ 0x6c
 80190e6:	18bb      	adds	r3, r7, r2
 80190e8:	18ba      	adds	r2, r7, r2
 80190ea:	8812      	ldrh	r2, [r2, #0]
 80190ec:	2180      	movs	r1, #128	@ 0x80
 80190ee:	0089      	lsls	r1, r1, #2
 80190f0:	430a      	orrs	r2, r1
 80190f2:	801a      	strh	r2, [r3, #0]
      break;
 80190f4:	e01c      	b.n	8019130 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80190f6:	226c      	movs	r2, #108	@ 0x6c
 80190f8:	18bb      	adds	r3, r7, r2
 80190fa:	18ba      	adds	r2, r7, r2
 80190fc:	8812      	ldrh	r2, [r2, #0]
 80190fe:	801a      	strh	r2, [r3, #0]
      break;
 8019100:	e016      	b.n	8019130 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019102:	226c      	movs	r2, #108	@ 0x6c
 8019104:	18bb      	adds	r3, r7, r2
 8019106:	18ba      	adds	r2, r7, r2
 8019108:	8812      	ldrh	r2, [r2, #0]
 801910a:	21c0      	movs	r1, #192	@ 0xc0
 801910c:	00c9      	lsls	r1, r1, #3
 801910e:	430a      	orrs	r2, r1
 8019110:	801a      	strh	r2, [r3, #0]
      break;
 8019112:	e00d      	b.n	8019130 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019114:	226c      	movs	r2, #108	@ 0x6c
 8019116:	18bb      	adds	r3, r7, r2
 8019118:	18ba      	adds	r2, r7, r2
 801911a:	8812      	ldrh	r2, [r2, #0]
 801911c:	2180      	movs	r1, #128	@ 0x80
 801911e:	00c9      	lsls	r1, r1, #3
 8019120:	430a      	orrs	r2, r1
 8019122:	801a      	strh	r2, [r3, #0]
      break;
 8019124:	e004      	b.n	8019130 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019126:	236f      	movs	r3, #111	@ 0x6f
 8019128:	18fb      	adds	r3, r7, r3
 801912a:	2201      	movs	r2, #1
 801912c:	701a      	strb	r2, [r3, #0]
      break;
 801912e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	18d3      	adds	r3, r2, r3
 801913a:	226c      	movs	r2, #108	@ 0x6c
 801913c:	18ba      	adds	r2, r7, r2
 801913e:	8812      	ldrh	r2, [r2, #0]
 8019140:	4985      	ldr	r1, [pc, #532]	@ (8019358 <USB_ActivateEndpoint+0x2b8>)
 8019142:	430a      	orrs	r2, r1
 8019144:	b292      	uxth	r2, r2
 8019146:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019148:	687a      	ldr	r2, [r7, #4]
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	009b      	lsls	r3, r3, #2
 8019150:	18d3      	adds	r3, r2, r3
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	b29b      	uxth	r3, r3
 8019156:	b21b      	sxth	r3, r3
 8019158:	4a80      	ldr	r2, [pc, #512]	@ (801935c <USB_ActivateEndpoint+0x2bc>)
 801915a:	4013      	ands	r3, r2
 801915c:	b21a      	sxth	r2, r3
 801915e:	683b      	ldr	r3, [r7, #0]
 8019160:	781b      	ldrb	r3, [r3, #0]
 8019162:	b21b      	sxth	r3, r3
 8019164:	4313      	orrs	r3, r2
 8019166:	b21a      	sxth	r2, r3
 8019168:	2166      	movs	r1, #102	@ 0x66
 801916a:	187b      	adds	r3, r7, r1
 801916c:	801a      	strh	r2, [r3, #0]
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	683b      	ldr	r3, [r7, #0]
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	009b      	lsls	r3, r3, #2
 8019176:	18d3      	adds	r3, r2, r3
 8019178:	187a      	adds	r2, r7, r1
 801917a:	8812      	ldrh	r2, [r2, #0]
 801917c:	4976      	ldr	r1, [pc, #472]	@ (8019358 <USB_ActivateEndpoint+0x2b8>)
 801917e:	430a      	orrs	r2, r1
 8019180:	b292      	uxth	r2, r2
 8019182:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	7b1b      	ldrb	r3, [r3, #12]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d000      	beq.n	801918e <USB_ActivateEndpoint+0xee>
 801918c:	e178      	b.n	8019480 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801918e:	683b      	ldr	r3, [r7, #0]
 8019190:	785b      	ldrb	r3, [r3, #1]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d100      	bne.n	8019198 <USB_ActivateEndpoint+0xf8>
 8019196:	e07a      	b.n	801928e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	61bb      	str	r3, [r7, #24]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	2250      	movs	r2, #80	@ 0x50
 80191a0:	5a9b      	ldrh	r3, [r3, r2]
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	001a      	movs	r2, r3
 80191a6:	69bb      	ldr	r3, [r7, #24]
 80191a8:	189b      	adds	r3, r3, r2
 80191aa:	61bb      	str	r3, [r7, #24]
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	00da      	lsls	r2, r3, #3
 80191b2:	69bb      	ldr	r3, [r7, #24]
 80191b4:	18d3      	adds	r3, r2, r3
 80191b6:	2280      	movs	r2, #128	@ 0x80
 80191b8:	00d2      	lsls	r2, r2, #3
 80191ba:	4694      	mov	ip, r2
 80191bc:	4463      	add	r3, ip
 80191be:	617b      	str	r3, [r7, #20]
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	88db      	ldrh	r3, [r3, #6]
 80191c4:	085b      	lsrs	r3, r3, #1
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	18db      	adds	r3, r3, r3
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80191d0:	687a      	ldr	r2, [r7, #4]
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	781b      	ldrb	r3, [r3, #0]
 80191d6:	009b      	lsls	r3, r3, #2
 80191d8:	18d2      	adds	r2, r2, r3
 80191da:	2112      	movs	r1, #18
 80191dc:	187b      	adds	r3, r7, r1
 80191de:	8812      	ldrh	r2, [r2, #0]
 80191e0:	801a      	strh	r2, [r3, #0]
 80191e2:	187b      	adds	r3, r7, r1
 80191e4:	881b      	ldrh	r3, [r3, #0]
 80191e6:	2240      	movs	r2, #64	@ 0x40
 80191e8:	4013      	ands	r3, r2
 80191ea:	d016      	beq.n	801921a <USB_ActivateEndpoint+0x17a>
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	009b      	lsls	r3, r3, #2
 80191f4:	18d3      	adds	r3, r2, r3
 80191f6:	881b      	ldrh	r3, [r3, #0]
 80191f8:	b29a      	uxth	r2, r3
 80191fa:	2010      	movs	r0, #16
 80191fc:	183b      	adds	r3, r7, r0
 80191fe:	4957      	ldr	r1, [pc, #348]	@ (801935c <USB_ActivateEndpoint+0x2bc>)
 8019200:	400a      	ands	r2, r1
 8019202:	801a      	strh	r2, [r3, #0]
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	781b      	ldrb	r3, [r3, #0]
 801920a:	009b      	lsls	r3, r3, #2
 801920c:	18d3      	adds	r3, r2, r3
 801920e:	183a      	adds	r2, r7, r0
 8019210:	8812      	ldrh	r2, [r2, #0]
 8019212:	4953      	ldr	r1, [pc, #332]	@ (8019360 <USB_ActivateEndpoint+0x2c0>)
 8019214:	430a      	orrs	r2, r1
 8019216:	b292      	uxth	r2, r2
 8019218:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801921a:	683b      	ldr	r3, [r7, #0]
 801921c:	78db      	ldrb	r3, [r3, #3]
 801921e:	2b01      	cmp	r3, #1
 8019220:	d01d      	beq.n	801925e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	009b      	lsls	r3, r3, #2
 801922a:	18d3      	adds	r3, r2, r3
 801922c:	881b      	ldrh	r3, [r3, #0]
 801922e:	b29a      	uxth	r2, r3
 8019230:	200c      	movs	r0, #12
 8019232:	183b      	adds	r3, r7, r0
 8019234:	494b      	ldr	r1, [pc, #300]	@ (8019364 <USB_ActivateEndpoint+0x2c4>)
 8019236:	400a      	ands	r2, r1
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	183b      	adds	r3, r7, r0
 801923c:	183a      	adds	r2, r7, r0
 801923e:	8812      	ldrh	r2, [r2, #0]
 8019240:	2120      	movs	r1, #32
 8019242:	404a      	eors	r2, r1
 8019244:	801a      	strh	r2, [r3, #0]
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	781b      	ldrb	r3, [r3, #0]
 801924c:	009b      	lsls	r3, r3, #2
 801924e:	18d3      	adds	r3, r2, r3
 8019250:	183a      	adds	r2, r7, r0
 8019252:	8812      	ldrh	r2, [r2, #0]
 8019254:	4940      	ldr	r1, [pc, #256]	@ (8019358 <USB_ActivateEndpoint+0x2b8>)
 8019256:	430a      	orrs	r2, r1
 8019258:	b292      	uxth	r2, r2
 801925a:	801a      	strh	r2, [r3, #0]
 801925c:	e2b4      	b.n	80197c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	781b      	ldrb	r3, [r3, #0]
 8019264:	009b      	lsls	r3, r3, #2
 8019266:	18d3      	adds	r3, r2, r3
 8019268:	881b      	ldrh	r3, [r3, #0]
 801926a:	b29a      	uxth	r2, r3
 801926c:	200e      	movs	r0, #14
 801926e:	183b      	adds	r3, r7, r0
 8019270:	493c      	ldr	r1, [pc, #240]	@ (8019364 <USB_ActivateEndpoint+0x2c4>)
 8019272:	400a      	ands	r2, r1
 8019274:	801a      	strh	r2, [r3, #0]
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	781b      	ldrb	r3, [r3, #0]
 801927c:	009b      	lsls	r3, r3, #2
 801927e:	18d3      	adds	r3, r2, r3
 8019280:	183a      	adds	r2, r7, r0
 8019282:	8812      	ldrh	r2, [r2, #0]
 8019284:	4934      	ldr	r1, [pc, #208]	@ (8019358 <USB_ActivateEndpoint+0x2b8>)
 8019286:	430a      	orrs	r2, r1
 8019288:	b292      	uxth	r2, r2
 801928a:	801a      	strh	r2, [r3, #0]
 801928c:	e29c      	b.n	80197c8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	633b      	str	r3, [r7, #48]	@ 0x30
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2250      	movs	r2, #80	@ 0x50
 8019296:	5a9b      	ldrh	r3, [r3, r2]
 8019298:	b29b      	uxth	r3, r3
 801929a:	001a      	movs	r2, r3
 801929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801929e:	189b      	adds	r3, r3, r2
 80192a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	00da      	lsls	r2, r3, #3
 80192a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192aa:	18d3      	adds	r3, r2, r3
 80192ac:	4a2e      	ldr	r2, [pc, #184]	@ (8019368 <USB_ActivateEndpoint+0x2c8>)
 80192ae:	4694      	mov	ip, r2
 80192b0:	4463      	add	r3, ip
 80192b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192b4:	683b      	ldr	r3, [r7, #0]
 80192b6:	88db      	ldrh	r3, [r3, #6]
 80192b8:	085b      	lsrs	r3, r3, #1
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	18db      	adds	r3, r3, r3
 80192be:	b29a      	uxth	r2, r3
 80192c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	2250      	movs	r2, #80	@ 0x50
 80192cc:	5a9b      	ldrh	r3, [r3, r2]
 80192ce:	b29b      	uxth	r3, r3
 80192d0:	001a      	movs	r2, r3
 80192d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192d4:	189b      	adds	r3, r3, r2
 80192d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80192d8:	683b      	ldr	r3, [r7, #0]
 80192da:	781b      	ldrb	r3, [r3, #0]
 80192dc:	00da      	lsls	r2, r3, #3
 80192de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192e0:	18d3      	adds	r3, r2, r3
 80192e2:	4a22      	ldr	r2, [pc, #136]	@ (801936c <USB_ActivateEndpoint+0x2cc>)
 80192e4:	4694      	mov	ip, r2
 80192e6:	4463      	add	r3, ip
 80192e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80192ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ec:	881b      	ldrh	r3, [r3, #0]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	059b      	lsls	r3, r3, #22
 80192f2:	0d9b      	lsrs	r3, r3, #22
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192f8:	801a      	strh	r2, [r3, #0]
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	691b      	ldr	r3, [r3, #16]
 80192fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8019300:	d91a      	bls.n	8019338 <USB_ActivateEndpoint+0x298>
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	691b      	ldr	r3, [r3, #16]
 8019306:	095b      	lsrs	r3, r3, #5
 8019308:	66bb      	str	r3, [r7, #104]	@ 0x68
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	691b      	ldr	r3, [r3, #16]
 801930e:	221f      	movs	r2, #31
 8019310:	4013      	ands	r3, r2
 8019312:	d102      	bne.n	801931a <USB_ActivateEndpoint+0x27a>
 8019314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019316:	3b01      	subs	r3, #1
 8019318:	66bb      	str	r3, [r7, #104]	@ 0x68
 801931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801931c:	881b      	ldrh	r3, [r3, #0]
 801931e:	b29a      	uxth	r2, r3
 8019320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019322:	b29b      	uxth	r3, r3
 8019324:	029b      	lsls	r3, r3, #10
 8019326:	b29b      	uxth	r3, r3
 8019328:	4313      	orrs	r3, r2
 801932a:	b29b      	uxth	r3, r3
 801932c:	4a10      	ldr	r2, [pc, #64]	@ (8019370 <USB_ActivateEndpoint+0x2d0>)
 801932e:	4313      	orrs	r3, r2
 8019330:	b29a      	uxth	r2, r3
 8019332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019334:	801a      	strh	r2, [r3, #0]
 8019336:	e034      	b.n	80193a2 <USB_ActivateEndpoint+0x302>
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	691b      	ldr	r3, [r3, #16]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d119      	bne.n	8019374 <USB_ActivateEndpoint+0x2d4>
 8019340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019342:	881b      	ldrh	r3, [r3, #0]
 8019344:	b29b      	uxth	r3, r3
 8019346:	4a0a      	ldr	r2, [pc, #40]	@ (8019370 <USB_ActivateEndpoint+0x2d0>)
 8019348:	4313      	orrs	r3, r2
 801934a:	b29a      	uxth	r2, r3
 801934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801934e:	801a      	strh	r2, [r3, #0]
 8019350:	e027      	b.n	80193a2 <USB_ActivateEndpoint+0x302>
 8019352:	46c0      	nop			@ (mov r8, r8)
 8019354:	ffff898f 	.word	0xffff898f
 8019358:	ffff8080 	.word	0xffff8080
 801935c:	ffff8f8f 	.word	0xffff8f8f
 8019360:	ffff80c0 	.word	0xffff80c0
 8019364:	ffff8fbf 	.word	0xffff8fbf
 8019368:	00000404 	.word	0x00000404
 801936c:	00000406 	.word	0x00000406
 8019370:	ffff8000 	.word	0xffff8000
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	691b      	ldr	r3, [r3, #16]
 8019378:	085b      	lsrs	r3, r3, #1
 801937a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	691b      	ldr	r3, [r3, #16]
 8019380:	2201      	movs	r2, #1
 8019382:	4013      	ands	r3, r2
 8019384:	d002      	beq.n	801938c <USB_ActivateEndpoint+0x2ec>
 8019386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019388:	3301      	adds	r3, #1
 801938a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	b29a      	uxth	r2, r3
 8019392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019394:	b29b      	uxth	r3, r3
 8019396:	029b      	lsls	r3, r3, #10
 8019398:	b29b      	uxth	r3, r3
 801939a:	4313      	orrs	r3, r2
 801939c:	b29a      	uxth	r2, r3
 801939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	781b      	ldrb	r3, [r3, #0]
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	18d2      	adds	r2, r2, r3
 80193ac:	2122      	movs	r1, #34	@ 0x22
 80193ae:	187b      	adds	r3, r7, r1
 80193b0:	8812      	ldrh	r2, [r2, #0]
 80193b2:	801a      	strh	r2, [r3, #0]
 80193b4:	187b      	adds	r3, r7, r1
 80193b6:	881a      	ldrh	r2, [r3, #0]
 80193b8:	2380      	movs	r3, #128	@ 0x80
 80193ba:	01db      	lsls	r3, r3, #7
 80193bc:	4013      	ands	r3, r2
 80193be:	d016      	beq.n	80193ee <USB_ActivateEndpoint+0x34e>
 80193c0:	687a      	ldr	r2, [r7, #4]
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	18d3      	adds	r3, r2, r3
 80193ca:	881b      	ldrh	r3, [r3, #0]
 80193cc:	b29a      	uxth	r2, r3
 80193ce:	2020      	movs	r0, #32
 80193d0:	183b      	adds	r3, r7, r0
 80193d2:	49dd      	ldr	r1, [pc, #884]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 80193d4:	400a      	ands	r2, r1
 80193d6:	801a      	strh	r2, [r3, #0]
 80193d8:	687a      	ldr	r2, [r7, #4]
 80193da:	683b      	ldr	r3, [r7, #0]
 80193dc:	781b      	ldrb	r3, [r3, #0]
 80193de:	009b      	lsls	r3, r3, #2
 80193e0:	18d3      	adds	r3, r2, r3
 80193e2:	183a      	adds	r2, r7, r0
 80193e4:	8812      	ldrh	r2, [r2, #0]
 80193e6:	49d9      	ldr	r1, [pc, #868]	@ (801974c <USB_ActivateEndpoint+0x6ac>)
 80193e8:	430a      	orrs	r2, r1
 80193ea:	b292      	uxth	r2, r2
 80193ec:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d125      	bne.n	8019442 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80193f6:	687a      	ldr	r2, [r7, #4]
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	781b      	ldrb	r3, [r3, #0]
 80193fc:	009b      	lsls	r3, r3, #2
 80193fe:	18d3      	adds	r3, r2, r3
 8019400:	881b      	ldrh	r3, [r3, #0]
 8019402:	b29a      	uxth	r2, r3
 8019404:	201c      	movs	r0, #28
 8019406:	183b      	adds	r3, r7, r0
 8019408:	49d1      	ldr	r1, [pc, #836]	@ (8019750 <USB_ActivateEndpoint+0x6b0>)
 801940a:	400a      	ands	r2, r1
 801940c:	801a      	strh	r2, [r3, #0]
 801940e:	183b      	adds	r3, r7, r0
 8019410:	183a      	adds	r2, r7, r0
 8019412:	8812      	ldrh	r2, [r2, #0]
 8019414:	2180      	movs	r1, #128	@ 0x80
 8019416:	0149      	lsls	r1, r1, #5
 8019418:	404a      	eors	r2, r1
 801941a:	801a      	strh	r2, [r3, #0]
 801941c:	183b      	adds	r3, r7, r0
 801941e:	183a      	adds	r2, r7, r0
 8019420:	8812      	ldrh	r2, [r2, #0]
 8019422:	2180      	movs	r1, #128	@ 0x80
 8019424:	0189      	lsls	r1, r1, #6
 8019426:	404a      	eors	r2, r1
 8019428:	801a      	strh	r2, [r3, #0]
 801942a:	687a      	ldr	r2, [r7, #4]
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	009b      	lsls	r3, r3, #2
 8019432:	18d3      	adds	r3, r2, r3
 8019434:	183a      	adds	r2, r7, r0
 8019436:	8812      	ldrh	r2, [r2, #0]
 8019438:	49c6      	ldr	r1, [pc, #792]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 801943a:	430a      	orrs	r2, r1
 801943c:	b292      	uxth	r2, r2
 801943e:	801a      	strh	r2, [r3, #0]
 8019440:	e1c2      	b.n	80197c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	18d3      	adds	r3, r2, r3
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	b29a      	uxth	r2, r3
 8019450:	201e      	movs	r0, #30
 8019452:	183b      	adds	r3, r7, r0
 8019454:	49be      	ldr	r1, [pc, #760]	@ (8019750 <USB_ActivateEndpoint+0x6b0>)
 8019456:	400a      	ands	r2, r1
 8019458:	801a      	strh	r2, [r3, #0]
 801945a:	183b      	adds	r3, r7, r0
 801945c:	183a      	adds	r2, r7, r0
 801945e:	8812      	ldrh	r2, [r2, #0]
 8019460:	2180      	movs	r1, #128	@ 0x80
 8019462:	0189      	lsls	r1, r1, #6
 8019464:	404a      	eors	r2, r1
 8019466:	801a      	strh	r2, [r3, #0]
 8019468:	687a      	ldr	r2, [r7, #4]
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	781b      	ldrb	r3, [r3, #0]
 801946e:	009b      	lsls	r3, r3, #2
 8019470:	18d3      	adds	r3, r2, r3
 8019472:	183a      	adds	r2, r7, r0
 8019474:	8812      	ldrh	r2, [r2, #0]
 8019476:	49b7      	ldr	r1, [pc, #732]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 8019478:	430a      	orrs	r2, r1
 801947a:	b292      	uxth	r2, r2
 801947c:	801a      	strh	r2, [r3, #0]
 801947e:	e1a3      	b.n	80197c8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	78db      	ldrb	r3, [r3, #3]
 8019484:	2b02      	cmp	r3, #2
 8019486:	d117      	bne.n	80194b8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	781b      	ldrb	r3, [r3, #0]
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	18d3      	adds	r3, r2, r3
 8019492:	881b      	ldrh	r3, [r3, #0]
 8019494:	b29a      	uxth	r2, r3
 8019496:	2062      	movs	r0, #98	@ 0x62
 8019498:	183b      	adds	r3, r7, r0
 801949a:	49ab      	ldr	r1, [pc, #684]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 801949c:	400a      	ands	r2, r1
 801949e:	801a      	strh	r2, [r3, #0]
 80194a0:	687a      	ldr	r2, [r7, #4]
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	18d3      	adds	r3, r2, r3
 80194aa:	183a      	adds	r2, r7, r0
 80194ac:	8812      	ldrh	r2, [r2, #0]
 80194ae:	49aa      	ldr	r1, [pc, #680]	@ (8019758 <USB_ActivateEndpoint+0x6b8>)
 80194b0:	430a      	orrs	r2, r1
 80194b2:	b292      	uxth	r2, r2
 80194b4:	801a      	strh	r2, [r3, #0]
 80194b6:	e016      	b.n	80194e6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	781b      	ldrb	r3, [r3, #0]
 80194be:	009b      	lsls	r3, r3, #2
 80194c0:	18d3      	adds	r3, r2, r3
 80194c2:	881b      	ldrh	r3, [r3, #0]
 80194c4:	b29a      	uxth	r2, r3
 80194c6:	2064      	movs	r0, #100	@ 0x64
 80194c8:	183b      	adds	r3, r7, r0
 80194ca:	49a4      	ldr	r1, [pc, #656]	@ (801975c <USB_ActivateEndpoint+0x6bc>)
 80194cc:	400a      	ands	r2, r1
 80194ce:	801a      	strh	r2, [r3, #0]
 80194d0:	687a      	ldr	r2, [r7, #4]
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	009b      	lsls	r3, r3, #2
 80194d8:	18d3      	adds	r3, r2, r3
 80194da:	183a      	adds	r2, r7, r0
 80194dc:	8812      	ldrh	r2, [r2, #0]
 80194de:	499d      	ldr	r1, [pc, #628]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 80194e0:	430a      	orrs	r2, r1
 80194e2:	b292      	uxth	r2, r2
 80194e4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2250      	movs	r2, #80	@ 0x50
 80194ee:	5a9b      	ldrh	r3, [r3, r2]
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	001a      	movs	r2, r3
 80194f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80194f6:	189b      	adds	r3, r3, r2
 80194f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80194fa:	683b      	ldr	r3, [r7, #0]
 80194fc:	781b      	ldrb	r3, [r3, #0]
 80194fe:	00da      	lsls	r2, r3, #3
 8019500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019502:	18d3      	adds	r3, r2, r3
 8019504:	2280      	movs	r2, #128	@ 0x80
 8019506:	00d2      	lsls	r2, r2, #3
 8019508:	4694      	mov	ip, r2
 801950a:	4463      	add	r3, ip
 801950c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	891b      	ldrh	r3, [r3, #8]
 8019512:	085b      	lsrs	r3, r3, #1
 8019514:	b29b      	uxth	r3, r3
 8019516:	18db      	adds	r3, r3, r3
 8019518:	b29a      	uxth	r2, r3
 801951a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801951c:	801a      	strh	r2, [r3, #0]
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	657b      	str	r3, [r7, #84]	@ 0x54
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2250      	movs	r2, #80	@ 0x50
 8019526:	5a9b      	ldrh	r3, [r3, r2]
 8019528:	b29b      	uxth	r3, r3
 801952a:	001a      	movs	r2, r3
 801952c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801952e:	189b      	adds	r3, r3, r2
 8019530:	657b      	str	r3, [r7, #84]	@ 0x54
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	781b      	ldrb	r3, [r3, #0]
 8019536:	00da      	lsls	r2, r3, #3
 8019538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801953a:	18d3      	adds	r3, r2, r3
 801953c:	4a88      	ldr	r2, [pc, #544]	@ (8019760 <USB_ActivateEndpoint+0x6c0>)
 801953e:	4694      	mov	ip, r2
 8019540:	4463      	add	r3, ip
 8019542:	653b      	str	r3, [r7, #80]	@ 0x50
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	895b      	ldrh	r3, [r3, #10]
 8019548:	085b      	lsrs	r3, r3, #1
 801954a:	b29b      	uxth	r3, r3
 801954c:	18db      	adds	r3, r3, r3
 801954e:	b29a      	uxth	r2, r3
 8019550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019552:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	785b      	ldrb	r3, [r3, #1]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d000      	beq.n	801955e <USB_ActivateEndpoint+0x4be>
 801955c:	e087      	b.n	801966e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	781b      	ldrb	r3, [r3, #0]
 8019564:	009b      	lsls	r3, r3, #2
 8019566:	18d2      	adds	r2, r2, r3
 8019568:	2140      	movs	r1, #64	@ 0x40
 801956a:	187b      	adds	r3, r7, r1
 801956c:	8812      	ldrh	r2, [r2, #0]
 801956e:	801a      	strh	r2, [r3, #0]
 8019570:	187b      	adds	r3, r7, r1
 8019572:	881a      	ldrh	r2, [r3, #0]
 8019574:	2380      	movs	r3, #128	@ 0x80
 8019576:	01db      	lsls	r3, r3, #7
 8019578:	4013      	ands	r3, r2
 801957a:	d016      	beq.n	80195aa <USB_ActivateEndpoint+0x50a>
 801957c:	687a      	ldr	r2, [r7, #4]
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	781b      	ldrb	r3, [r3, #0]
 8019582:	009b      	lsls	r3, r3, #2
 8019584:	18d3      	adds	r3, r2, r3
 8019586:	881b      	ldrh	r3, [r3, #0]
 8019588:	b29a      	uxth	r2, r3
 801958a:	203e      	movs	r0, #62	@ 0x3e
 801958c:	183b      	adds	r3, r7, r0
 801958e:	496e      	ldr	r1, [pc, #440]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 8019590:	400a      	ands	r2, r1
 8019592:	801a      	strh	r2, [r3, #0]
 8019594:	687a      	ldr	r2, [r7, #4]
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	781b      	ldrb	r3, [r3, #0]
 801959a:	009b      	lsls	r3, r3, #2
 801959c:	18d3      	adds	r3, r2, r3
 801959e:	183a      	adds	r2, r7, r0
 80195a0:	8812      	ldrh	r2, [r2, #0]
 80195a2:	496a      	ldr	r1, [pc, #424]	@ (801974c <USB_ActivateEndpoint+0x6ac>)
 80195a4:	430a      	orrs	r2, r1
 80195a6:	b292      	uxth	r2, r2
 80195a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80195aa:	687a      	ldr	r2, [r7, #4]
 80195ac:	683b      	ldr	r3, [r7, #0]
 80195ae:	781b      	ldrb	r3, [r3, #0]
 80195b0:	009b      	lsls	r3, r3, #2
 80195b2:	18d2      	adds	r2, r2, r3
 80195b4:	213c      	movs	r1, #60	@ 0x3c
 80195b6:	187b      	adds	r3, r7, r1
 80195b8:	8812      	ldrh	r2, [r2, #0]
 80195ba:	801a      	strh	r2, [r3, #0]
 80195bc:	187b      	adds	r3, r7, r1
 80195be:	881b      	ldrh	r3, [r3, #0]
 80195c0:	2240      	movs	r2, #64	@ 0x40
 80195c2:	4013      	ands	r3, r2
 80195c4:	d016      	beq.n	80195f4 <USB_ActivateEndpoint+0x554>
 80195c6:	687a      	ldr	r2, [r7, #4]
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	781b      	ldrb	r3, [r3, #0]
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	18d3      	adds	r3, r2, r3
 80195d0:	881b      	ldrh	r3, [r3, #0]
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	203a      	movs	r0, #58	@ 0x3a
 80195d6:	183b      	adds	r3, r7, r0
 80195d8:	495b      	ldr	r1, [pc, #364]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 80195da:	400a      	ands	r2, r1
 80195dc:	801a      	strh	r2, [r3, #0]
 80195de:	687a      	ldr	r2, [r7, #4]
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	781b      	ldrb	r3, [r3, #0]
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	18d3      	adds	r3, r2, r3
 80195e8:	183a      	adds	r2, r7, r0
 80195ea:	8812      	ldrh	r2, [r2, #0]
 80195ec:	495d      	ldr	r1, [pc, #372]	@ (8019764 <USB_ActivateEndpoint+0x6c4>)
 80195ee:	430a      	orrs	r2, r1
 80195f0:	b292      	uxth	r2, r2
 80195f2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80195f4:	687a      	ldr	r2, [r7, #4]
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	009b      	lsls	r3, r3, #2
 80195fc:	18d3      	adds	r3, r2, r3
 80195fe:	881b      	ldrh	r3, [r3, #0]
 8019600:	b29a      	uxth	r2, r3
 8019602:	2038      	movs	r0, #56	@ 0x38
 8019604:	183b      	adds	r3, r7, r0
 8019606:	4952      	ldr	r1, [pc, #328]	@ (8019750 <USB_ActivateEndpoint+0x6b0>)
 8019608:	400a      	ands	r2, r1
 801960a:	801a      	strh	r2, [r3, #0]
 801960c:	183b      	adds	r3, r7, r0
 801960e:	183a      	adds	r2, r7, r0
 8019610:	8812      	ldrh	r2, [r2, #0]
 8019612:	2180      	movs	r1, #128	@ 0x80
 8019614:	0149      	lsls	r1, r1, #5
 8019616:	404a      	eors	r2, r1
 8019618:	801a      	strh	r2, [r3, #0]
 801961a:	183b      	adds	r3, r7, r0
 801961c:	183a      	adds	r2, r7, r0
 801961e:	8812      	ldrh	r2, [r2, #0]
 8019620:	2180      	movs	r1, #128	@ 0x80
 8019622:	0189      	lsls	r1, r1, #6
 8019624:	404a      	eors	r2, r1
 8019626:	801a      	strh	r2, [r3, #0]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	781b      	ldrb	r3, [r3, #0]
 801962e:	009b      	lsls	r3, r3, #2
 8019630:	18d3      	adds	r3, r2, r3
 8019632:	183a      	adds	r2, r7, r0
 8019634:	8812      	ldrh	r2, [r2, #0]
 8019636:	4947      	ldr	r1, [pc, #284]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 8019638:	430a      	orrs	r2, r1
 801963a:	b292      	uxth	r2, r2
 801963c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801963e:	687a      	ldr	r2, [r7, #4]
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	009b      	lsls	r3, r3, #2
 8019646:	18d3      	adds	r3, r2, r3
 8019648:	881b      	ldrh	r3, [r3, #0]
 801964a:	b29a      	uxth	r2, r3
 801964c:	2036      	movs	r0, #54	@ 0x36
 801964e:	183b      	adds	r3, r7, r0
 8019650:	4945      	ldr	r1, [pc, #276]	@ (8019768 <USB_ActivateEndpoint+0x6c8>)
 8019652:	400a      	ands	r2, r1
 8019654:	801a      	strh	r2, [r3, #0]
 8019656:	687a      	ldr	r2, [r7, #4]
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	009b      	lsls	r3, r3, #2
 801965e:	18d3      	adds	r3, r2, r3
 8019660:	183a      	adds	r2, r7, r0
 8019662:	8812      	ldrh	r2, [r2, #0]
 8019664:	493b      	ldr	r1, [pc, #236]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 8019666:	430a      	orrs	r2, r1
 8019668:	b292      	uxth	r2, r2
 801966a:	801a      	strh	r2, [r3, #0]
 801966c:	e0ac      	b.n	80197c8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801966e:	687a      	ldr	r2, [r7, #4]
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	781b      	ldrb	r3, [r3, #0]
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	18d2      	adds	r2, r2, r3
 8019678:	214e      	movs	r1, #78	@ 0x4e
 801967a:	187b      	adds	r3, r7, r1
 801967c:	8812      	ldrh	r2, [r2, #0]
 801967e:	801a      	strh	r2, [r3, #0]
 8019680:	187b      	adds	r3, r7, r1
 8019682:	881a      	ldrh	r2, [r3, #0]
 8019684:	2380      	movs	r3, #128	@ 0x80
 8019686:	01db      	lsls	r3, r3, #7
 8019688:	4013      	ands	r3, r2
 801968a:	d016      	beq.n	80196ba <USB_ActivateEndpoint+0x61a>
 801968c:	687a      	ldr	r2, [r7, #4]
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	009b      	lsls	r3, r3, #2
 8019694:	18d3      	adds	r3, r2, r3
 8019696:	881b      	ldrh	r3, [r3, #0]
 8019698:	b29a      	uxth	r2, r3
 801969a:	204c      	movs	r0, #76	@ 0x4c
 801969c:	183b      	adds	r3, r7, r0
 801969e:	492a      	ldr	r1, [pc, #168]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 80196a0:	400a      	ands	r2, r1
 80196a2:	801a      	strh	r2, [r3, #0]
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	683b      	ldr	r3, [r7, #0]
 80196a8:	781b      	ldrb	r3, [r3, #0]
 80196aa:	009b      	lsls	r3, r3, #2
 80196ac:	18d3      	adds	r3, r2, r3
 80196ae:	183a      	adds	r2, r7, r0
 80196b0:	8812      	ldrh	r2, [r2, #0]
 80196b2:	4926      	ldr	r1, [pc, #152]	@ (801974c <USB_ActivateEndpoint+0x6ac>)
 80196b4:	430a      	orrs	r2, r1
 80196b6:	b292      	uxth	r2, r2
 80196b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	781b      	ldrb	r3, [r3, #0]
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	18d2      	adds	r2, r2, r3
 80196c4:	214a      	movs	r1, #74	@ 0x4a
 80196c6:	187b      	adds	r3, r7, r1
 80196c8:	8812      	ldrh	r2, [r2, #0]
 80196ca:	801a      	strh	r2, [r3, #0]
 80196cc:	187b      	adds	r3, r7, r1
 80196ce:	881b      	ldrh	r3, [r3, #0]
 80196d0:	2240      	movs	r2, #64	@ 0x40
 80196d2:	4013      	ands	r3, r2
 80196d4:	d016      	beq.n	8019704 <USB_ActivateEndpoint+0x664>
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	009b      	lsls	r3, r3, #2
 80196de:	18d3      	adds	r3, r2, r3
 80196e0:	881b      	ldrh	r3, [r3, #0]
 80196e2:	b29a      	uxth	r2, r3
 80196e4:	2048      	movs	r0, #72	@ 0x48
 80196e6:	183b      	adds	r3, r7, r0
 80196e8:	4917      	ldr	r1, [pc, #92]	@ (8019748 <USB_ActivateEndpoint+0x6a8>)
 80196ea:	400a      	ands	r2, r1
 80196ec:	801a      	strh	r2, [r3, #0]
 80196ee:	687a      	ldr	r2, [r7, #4]
 80196f0:	683b      	ldr	r3, [r7, #0]
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	18d3      	adds	r3, r2, r3
 80196f8:	183a      	adds	r2, r7, r0
 80196fa:	8812      	ldrh	r2, [r2, #0]
 80196fc:	4919      	ldr	r1, [pc, #100]	@ (8019764 <USB_ActivateEndpoint+0x6c4>)
 80196fe:	430a      	orrs	r2, r1
 8019700:	b292      	uxth	r2, r2
 8019702:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019704:	683b      	ldr	r3, [r7, #0]
 8019706:	78db      	ldrb	r3, [r3, #3]
 8019708:	2b01      	cmp	r3, #1
 801970a:	d02f      	beq.n	801976c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801970c:	687a      	ldr	r2, [r7, #4]
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	18d3      	adds	r3, r2, r3
 8019716:	881b      	ldrh	r3, [r3, #0]
 8019718:	b29a      	uxth	r2, r3
 801971a:	2044      	movs	r0, #68	@ 0x44
 801971c:	183b      	adds	r3, r7, r0
 801971e:	4912      	ldr	r1, [pc, #72]	@ (8019768 <USB_ActivateEndpoint+0x6c8>)
 8019720:	400a      	ands	r2, r1
 8019722:	801a      	strh	r2, [r3, #0]
 8019724:	183b      	adds	r3, r7, r0
 8019726:	183a      	adds	r2, r7, r0
 8019728:	8812      	ldrh	r2, [r2, #0]
 801972a:	2120      	movs	r1, #32
 801972c:	404a      	eors	r2, r1
 801972e:	801a      	strh	r2, [r3, #0]
 8019730:	687a      	ldr	r2, [r7, #4]
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	18d3      	adds	r3, r2, r3
 801973a:	183a      	adds	r2, r7, r0
 801973c:	8812      	ldrh	r2, [r2, #0]
 801973e:	4905      	ldr	r1, [pc, #20]	@ (8019754 <USB_ActivateEndpoint+0x6b4>)
 8019740:	430a      	orrs	r2, r1
 8019742:	b292      	uxth	r2, r2
 8019744:	801a      	strh	r2, [r3, #0]
 8019746:	e028      	b.n	801979a <USB_ActivateEndpoint+0x6fa>
 8019748:	ffff8f8f 	.word	0xffff8f8f
 801974c:	ffffc080 	.word	0xffffc080
 8019750:	ffffbf8f 	.word	0xffffbf8f
 8019754:	ffff8080 	.word	0xffff8080
 8019758:	ffff8180 	.word	0xffff8180
 801975c:	ffff8e8f 	.word	0xffff8e8f
 8019760:	00000404 	.word	0x00000404
 8019764:	ffff80c0 	.word	0xffff80c0
 8019768:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801976c:	687a      	ldr	r2, [r7, #4]
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	781b      	ldrb	r3, [r3, #0]
 8019772:	009b      	lsls	r3, r3, #2
 8019774:	18d3      	adds	r3, r2, r3
 8019776:	881b      	ldrh	r3, [r3, #0]
 8019778:	b29a      	uxth	r2, r3
 801977a:	2046      	movs	r0, #70	@ 0x46
 801977c:	183b      	adds	r3, r7, r0
 801977e:	4916      	ldr	r1, [pc, #88]	@ (80197d8 <USB_ActivateEndpoint+0x738>)
 8019780:	400a      	ands	r2, r1
 8019782:	801a      	strh	r2, [r3, #0]
 8019784:	687a      	ldr	r2, [r7, #4]
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	009b      	lsls	r3, r3, #2
 801978c:	18d3      	adds	r3, r2, r3
 801978e:	183a      	adds	r2, r7, r0
 8019790:	8812      	ldrh	r2, [r2, #0]
 8019792:	4912      	ldr	r1, [pc, #72]	@ (80197dc <USB_ActivateEndpoint+0x73c>)
 8019794:	430a      	orrs	r2, r1
 8019796:	b292      	uxth	r2, r2
 8019798:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801979a:	687a      	ldr	r2, [r7, #4]
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	781b      	ldrb	r3, [r3, #0]
 80197a0:	009b      	lsls	r3, r3, #2
 80197a2:	18d3      	adds	r3, r2, r3
 80197a4:	881b      	ldrh	r3, [r3, #0]
 80197a6:	b29a      	uxth	r2, r3
 80197a8:	2042      	movs	r0, #66	@ 0x42
 80197aa:	183b      	adds	r3, r7, r0
 80197ac:	490c      	ldr	r1, [pc, #48]	@ (80197e0 <USB_ActivateEndpoint+0x740>)
 80197ae:	400a      	ands	r2, r1
 80197b0:	801a      	strh	r2, [r3, #0]
 80197b2:	687a      	ldr	r2, [r7, #4]
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	009b      	lsls	r3, r3, #2
 80197ba:	18d3      	adds	r3, r2, r3
 80197bc:	183a      	adds	r2, r7, r0
 80197be:	8812      	ldrh	r2, [r2, #0]
 80197c0:	4906      	ldr	r1, [pc, #24]	@ (80197dc <USB_ActivateEndpoint+0x73c>)
 80197c2:	430a      	orrs	r2, r1
 80197c4:	b292      	uxth	r2, r2
 80197c6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80197c8:	236f      	movs	r3, #111	@ 0x6f
 80197ca:	18fb      	adds	r3, r7, r3
 80197cc:	781b      	ldrb	r3, [r3, #0]
}
 80197ce:	0018      	movs	r0, r3
 80197d0:	46bd      	mov	sp, r7
 80197d2:	b01c      	add	sp, #112	@ 0x70
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	46c0      	nop			@ (mov r8, r8)
 80197d8:	ffff8fbf 	.word	0xffff8fbf
 80197dc:	ffff8080 	.word	0xffff8080
 80197e0:	ffffbf8f 	.word	0xffffbf8f

080197e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b08c      	sub	sp, #48	@ 0x30
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	7b1b      	ldrb	r3, [r3, #12]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d000      	beq.n	80197f8 <USB_DeactivateEndpoint+0x14>
 80197f6:	e07e      	b.n	80198f6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	785b      	ldrb	r3, [r3, #1]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d03c      	beq.n	801987a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	009b      	lsls	r3, r3, #2
 8019808:	18d2      	adds	r2, r2, r3
 801980a:	210c      	movs	r1, #12
 801980c:	187b      	adds	r3, r7, r1
 801980e:	8812      	ldrh	r2, [r2, #0]
 8019810:	801a      	strh	r2, [r3, #0]
 8019812:	187b      	adds	r3, r7, r1
 8019814:	881b      	ldrh	r3, [r3, #0]
 8019816:	2240      	movs	r2, #64	@ 0x40
 8019818:	4013      	ands	r3, r2
 801981a:	d016      	beq.n	801984a <USB_DeactivateEndpoint+0x66>
 801981c:	687a      	ldr	r2, [r7, #4]
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	009b      	lsls	r3, r3, #2
 8019824:	18d3      	adds	r3, r2, r3
 8019826:	881b      	ldrh	r3, [r3, #0]
 8019828:	b29a      	uxth	r2, r3
 801982a:	200a      	movs	r0, #10
 801982c:	183b      	adds	r3, r7, r0
 801982e:	49c7      	ldr	r1, [pc, #796]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 8019830:	400a      	ands	r2, r1
 8019832:	801a      	strh	r2, [r3, #0]
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	18d3      	adds	r3, r2, r3
 801983e:	183a      	adds	r2, r7, r0
 8019840:	8812      	ldrh	r2, [r2, #0]
 8019842:	49c3      	ldr	r1, [pc, #780]	@ (8019b50 <USB_DeactivateEndpoint+0x36c>)
 8019844:	430a      	orrs	r2, r1
 8019846:	b292      	uxth	r2, r2
 8019848:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	18d3      	adds	r3, r2, r3
 8019854:	881b      	ldrh	r3, [r3, #0]
 8019856:	b29a      	uxth	r2, r3
 8019858:	2008      	movs	r0, #8
 801985a:	183b      	adds	r3, r7, r0
 801985c:	49bd      	ldr	r1, [pc, #756]	@ (8019b54 <USB_DeactivateEndpoint+0x370>)
 801985e:	400a      	ands	r2, r1
 8019860:	801a      	strh	r2, [r3, #0]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	183a      	adds	r2, r7, r0
 801986e:	8812      	ldrh	r2, [r2, #0]
 8019870:	49b9      	ldr	r1, [pc, #740]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 8019872:	430a      	orrs	r2, r1
 8019874:	b292      	uxth	r2, r2
 8019876:	801a      	strh	r2, [r3, #0]
 8019878:	e163      	b.n	8019b42 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	18d2      	adds	r2, r2, r3
 8019884:	2112      	movs	r1, #18
 8019886:	187b      	adds	r3, r7, r1
 8019888:	8812      	ldrh	r2, [r2, #0]
 801988a:	801a      	strh	r2, [r3, #0]
 801988c:	187b      	adds	r3, r7, r1
 801988e:	881a      	ldrh	r2, [r3, #0]
 8019890:	2380      	movs	r3, #128	@ 0x80
 8019892:	01db      	lsls	r3, r3, #7
 8019894:	4013      	ands	r3, r2
 8019896:	d016      	beq.n	80198c6 <USB_DeactivateEndpoint+0xe2>
 8019898:	687a      	ldr	r2, [r7, #4]
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	009b      	lsls	r3, r3, #2
 80198a0:	18d3      	adds	r3, r2, r3
 80198a2:	881b      	ldrh	r3, [r3, #0]
 80198a4:	b29a      	uxth	r2, r3
 80198a6:	2010      	movs	r0, #16
 80198a8:	183b      	adds	r3, r7, r0
 80198aa:	49a8      	ldr	r1, [pc, #672]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 80198ac:	400a      	ands	r2, r1
 80198ae:	801a      	strh	r2, [r3, #0]
 80198b0:	687a      	ldr	r2, [r7, #4]
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	781b      	ldrb	r3, [r3, #0]
 80198b6:	009b      	lsls	r3, r3, #2
 80198b8:	18d3      	adds	r3, r2, r3
 80198ba:	183a      	adds	r2, r7, r0
 80198bc:	8812      	ldrh	r2, [r2, #0]
 80198be:	49a7      	ldr	r1, [pc, #668]	@ (8019b5c <USB_DeactivateEndpoint+0x378>)
 80198c0:	430a      	orrs	r2, r1
 80198c2:	b292      	uxth	r2, r2
 80198c4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80198c6:	687a      	ldr	r2, [r7, #4]
 80198c8:	683b      	ldr	r3, [r7, #0]
 80198ca:	781b      	ldrb	r3, [r3, #0]
 80198cc:	009b      	lsls	r3, r3, #2
 80198ce:	18d3      	adds	r3, r2, r3
 80198d0:	881b      	ldrh	r3, [r3, #0]
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	200e      	movs	r0, #14
 80198d6:	183b      	adds	r3, r7, r0
 80198d8:	49a1      	ldr	r1, [pc, #644]	@ (8019b60 <USB_DeactivateEndpoint+0x37c>)
 80198da:	400a      	ands	r2, r1
 80198dc:	801a      	strh	r2, [r3, #0]
 80198de:	687a      	ldr	r2, [r7, #4]
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	781b      	ldrb	r3, [r3, #0]
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	18d3      	adds	r3, r2, r3
 80198e8:	183a      	adds	r2, r7, r0
 80198ea:	8812      	ldrh	r2, [r2, #0]
 80198ec:	499a      	ldr	r1, [pc, #616]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 80198ee:	430a      	orrs	r2, r1
 80198f0:	b292      	uxth	r2, r2
 80198f2:	801a      	strh	r2, [r3, #0]
 80198f4:	e125      	b.n	8019b42 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	785b      	ldrb	r3, [r3, #1]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d000      	beq.n	8019900 <USB_DeactivateEndpoint+0x11c>
 80198fe:	e090      	b.n	8019a22 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019900:	687a      	ldr	r2, [r7, #4]
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	009b      	lsls	r3, r3, #2
 8019908:	18d2      	adds	r2, r2, r3
 801990a:	2120      	movs	r1, #32
 801990c:	187b      	adds	r3, r7, r1
 801990e:	8812      	ldrh	r2, [r2, #0]
 8019910:	801a      	strh	r2, [r3, #0]
 8019912:	187b      	adds	r3, r7, r1
 8019914:	881a      	ldrh	r2, [r3, #0]
 8019916:	2380      	movs	r3, #128	@ 0x80
 8019918:	01db      	lsls	r3, r3, #7
 801991a:	4013      	ands	r3, r2
 801991c:	d016      	beq.n	801994c <USB_DeactivateEndpoint+0x168>
 801991e:	687a      	ldr	r2, [r7, #4]
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	18d3      	adds	r3, r2, r3
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	b29a      	uxth	r2, r3
 801992c:	201e      	movs	r0, #30
 801992e:	183b      	adds	r3, r7, r0
 8019930:	4986      	ldr	r1, [pc, #536]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 8019932:	400a      	ands	r2, r1
 8019934:	801a      	strh	r2, [r3, #0]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	781b      	ldrb	r3, [r3, #0]
 801993c:	009b      	lsls	r3, r3, #2
 801993e:	18d3      	adds	r3, r2, r3
 8019940:	183a      	adds	r2, r7, r0
 8019942:	8812      	ldrh	r2, [r2, #0]
 8019944:	4985      	ldr	r1, [pc, #532]	@ (8019b5c <USB_DeactivateEndpoint+0x378>)
 8019946:	430a      	orrs	r2, r1
 8019948:	b292      	uxth	r2, r2
 801994a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801994c:	687a      	ldr	r2, [r7, #4]
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	009b      	lsls	r3, r3, #2
 8019954:	18d2      	adds	r2, r2, r3
 8019956:	211c      	movs	r1, #28
 8019958:	187b      	adds	r3, r7, r1
 801995a:	8812      	ldrh	r2, [r2, #0]
 801995c:	801a      	strh	r2, [r3, #0]
 801995e:	187b      	adds	r3, r7, r1
 8019960:	881b      	ldrh	r3, [r3, #0]
 8019962:	2240      	movs	r2, #64	@ 0x40
 8019964:	4013      	ands	r3, r2
 8019966:	d016      	beq.n	8019996 <USB_DeactivateEndpoint+0x1b2>
 8019968:	687a      	ldr	r2, [r7, #4]
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	781b      	ldrb	r3, [r3, #0]
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	18d3      	adds	r3, r2, r3
 8019972:	881b      	ldrh	r3, [r3, #0]
 8019974:	b29a      	uxth	r2, r3
 8019976:	201a      	movs	r0, #26
 8019978:	183b      	adds	r3, r7, r0
 801997a:	4974      	ldr	r1, [pc, #464]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 801997c:	400a      	ands	r2, r1
 801997e:	801a      	strh	r2, [r3, #0]
 8019980:	687a      	ldr	r2, [r7, #4]
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	009b      	lsls	r3, r3, #2
 8019988:	18d3      	adds	r3, r2, r3
 801998a:	183a      	adds	r2, r7, r0
 801998c:	8812      	ldrh	r2, [r2, #0]
 801998e:	4970      	ldr	r1, [pc, #448]	@ (8019b50 <USB_DeactivateEndpoint+0x36c>)
 8019990:	430a      	orrs	r2, r1
 8019992:	b292      	uxth	r2, r2
 8019994:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019996:	687a      	ldr	r2, [r7, #4]
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	009b      	lsls	r3, r3, #2
 801999e:	18d3      	adds	r3, r2, r3
 80199a0:	881b      	ldrh	r3, [r3, #0]
 80199a2:	b29a      	uxth	r2, r3
 80199a4:	2018      	movs	r0, #24
 80199a6:	183b      	adds	r3, r7, r0
 80199a8:	4968      	ldr	r1, [pc, #416]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 80199aa:	400a      	ands	r2, r1
 80199ac:	801a      	strh	r2, [r3, #0]
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	781b      	ldrb	r3, [r3, #0]
 80199b4:	009b      	lsls	r3, r3, #2
 80199b6:	18d3      	adds	r3, r2, r3
 80199b8:	183a      	adds	r2, r7, r0
 80199ba:	8812      	ldrh	r2, [r2, #0]
 80199bc:	4964      	ldr	r1, [pc, #400]	@ (8019b50 <USB_DeactivateEndpoint+0x36c>)
 80199be:	430a      	orrs	r2, r1
 80199c0:	b292      	uxth	r2, r2
 80199c2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	009b      	lsls	r3, r3, #2
 80199cc:	18d3      	adds	r3, r2, r3
 80199ce:	881b      	ldrh	r3, [r3, #0]
 80199d0:	b29a      	uxth	r2, r3
 80199d2:	2016      	movs	r0, #22
 80199d4:	183b      	adds	r3, r7, r0
 80199d6:	4962      	ldr	r1, [pc, #392]	@ (8019b60 <USB_DeactivateEndpoint+0x37c>)
 80199d8:	400a      	ands	r2, r1
 80199da:	801a      	strh	r2, [r3, #0]
 80199dc:	687a      	ldr	r2, [r7, #4]
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	18d3      	adds	r3, r2, r3
 80199e6:	183a      	adds	r2, r7, r0
 80199e8:	8812      	ldrh	r2, [r2, #0]
 80199ea:	495b      	ldr	r1, [pc, #364]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 80199ec:	430a      	orrs	r2, r1
 80199ee:	b292      	uxth	r2, r2
 80199f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80199f2:	687a      	ldr	r2, [r7, #4]
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	009b      	lsls	r3, r3, #2
 80199fa:	18d3      	adds	r3, r2, r3
 80199fc:	881b      	ldrh	r3, [r3, #0]
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	2014      	movs	r0, #20
 8019a02:	183b      	adds	r3, r7, r0
 8019a04:	4953      	ldr	r1, [pc, #332]	@ (8019b54 <USB_DeactivateEndpoint+0x370>)
 8019a06:	400a      	ands	r2, r1
 8019a08:	801a      	strh	r2, [r3, #0]
 8019a0a:	687a      	ldr	r2, [r7, #4]
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	009b      	lsls	r3, r3, #2
 8019a12:	18d3      	adds	r3, r2, r3
 8019a14:	183a      	adds	r2, r7, r0
 8019a16:	8812      	ldrh	r2, [r2, #0]
 8019a18:	494f      	ldr	r1, [pc, #316]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 8019a1a:	430a      	orrs	r2, r1
 8019a1c:	b292      	uxth	r2, r2
 8019a1e:	801a      	strh	r2, [r3, #0]
 8019a20:	e08f      	b.n	8019b42 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	009b      	lsls	r3, r3, #2
 8019a2a:	18d2      	adds	r2, r2, r3
 8019a2c:	212e      	movs	r1, #46	@ 0x2e
 8019a2e:	187b      	adds	r3, r7, r1
 8019a30:	8812      	ldrh	r2, [r2, #0]
 8019a32:	801a      	strh	r2, [r3, #0]
 8019a34:	187b      	adds	r3, r7, r1
 8019a36:	881a      	ldrh	r2, [r3, #0]
 8019a38:	2380      	movs	r3, #128	@ 0x80
 8019a3a:	01db      	lsls	r3, r3, #7
 8019a3c:	4013      	ands	r3, r2
 8019a3e:	d016      	beq.n	8019a6e <USB_DeactivateEndpoint+0x28a>
 8019a40:	687a      	ldr	r2, [r7, #4]
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	781b      	ldrb	r3, [r3, #0]
 8019a46:	009b      	lsls	r3, r3, #2
 8019a48:	18d3      	adds	r3, r2, r3
 8019a4a:	881b      	ldrh	r3, [r3, #0]
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	202c      	movs	r0, #44	@ 0x2c
 8019a50:	183b      	adds	r3, r7, r0
 8019a52:	493e      	ldr	r1, [pc, #248]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 8019a54:	400a      	ands	r2, r1
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	687a      	ldr	r2, [r7, #4]
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	781b      	ldrb	r3, [r3, #0]
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	18d3      	adds	r3, r2, r3
 8019a62:	183a      	adds	r2, r7, r0
 8019a64:	8812      	ldrh	r2, [r2, #0]
 8019a66:	493d      	ldr	r1, [pc, #244]	@ (8019b5c <USB_DeactivateEndpoint+0x378>)
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	b292      	uxth	r2, r2
 8019a6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019a6e:	687a      	ldr	r2, [r7, #4]
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	18d2      	adds	r2, r2, r3
 8019a78:	212a      	movs	r1, #42	@ 0x2a
 8019a7a:	187b      	adds	r3, r7, r1
 8019a7c:	8812      	ldrh	r2, [r2, #0]
 8019a7e:	801a      	strh	r2, [r3, #0]
 8019a80:	187b      	adds	r3, r7, r1
 8019a82:	881b      	ldrh	r3, [r3, #0]
 8019a84:	2240      	movs	r2, #64	@ 0x40
 8019a86:	4013      	ands	r3, r2
 8019a88:	d016      	beq.n	8019ab8 <USB_DeactivateEndpoint+0x2d4>
 8019a8a:	687a      	ldr	r2, [r7, #4]
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	781b      	ldrb	r3, [r3, #0]
 8019a90:	009b      	lsls	r3, r3, #2
 8019a92:	18d3      	adds	r3, r2, r3
 8019a94:	881b      	ldrh	r3, [r3, #0]
 8019a96:	b29a      	uxth	r2, r3
 8019a98:	2028      	movs	r0, #40	@ 0x28
 8019a9a:	183b      	adds	r3, r7, r0
 8019a9c:	492b      	ldr	r1, [pc, #172]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 8019a9e:	400a      	ands	r2, r1
 8019aa0:	801a      	strh	r2, [r3, #0]
 8019aa2:	687a      	ldr	r2, [r7, #4]
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	781b      	ldrb	r3, [r3, #0]
 8019aa8:	009b      	lsls	r3, r3, #2
 8019aaa:	18d3      	adds	r3, r2, r3
 8019aac:	183a      	adds	r2, r7, r0
 8019aae:	8812      	ldrh	r2, [r2, #0]
 8019ab0:	4927      	ldr	r1, [pc, #156]	@ (8019b50 <USB_DeactivateEndpoint+0x36c>)
 8019ab2:	430a      	orrs	r2, r1
 8019ab4:	b292      	uxth	r2, r2
 8019ab6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019ab8:	687a      	ldr	r2, [r7, #4]
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	009b      	lsls	r3, r3, #2
 8019ac0:	18d3      	adds	r3, r2, r3
 8019ac2:	881b      	ldrh	r3, [r3, #0]
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	2026      	movs	r0, #38	@ 0x26
 8019ac8:	183b      	adds	r3, r7, r0
 8019aca:	4920      	ldr	r1, [pc, #128]	@ (8019b4c <USB_DeactivateEndpoint+0x368>)
 8019acc:	400a      	ands	r2, r1
 8019ace:	801a      	strh	r2, [r3, #0]
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	683b      	ldr	r3, [r7, #0]
 8019ad4:	781b      	ldrb	r3, [r3, #0]
 8019ad6:	009b      	lsls	r3, r3, #2
 8019ad8:	18d3      	adds	r3, r2, r3
 8019ada:	183a      	adds	r2, r7, r0
 8019adc:	8812      	ldrh	r2, [r2, #0]
 8019ade:	491f      	ldr	r1, [pc, #124]	@ (8019b5c <USB_DeactivateEndpoint+0x378>)
 8019ae0:	430a      	orrs	r2, r1
 8019ae2:	b292      	uxth	r2, r2
 8019ae4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019ae6:	687a      	ldr	r2, [r7, #4]
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	009b      	lsls	r3, r3, #2
 8019aee:	18d3      	adds	r3, r2, r3
 8019af0:	881b      	ldrh	r3, [r3, #0]
 8019af2:	b29a      	uxth	r2, r3
 8019af4:	2024      	movs	r0, #36	@ 0x24
 8019af6:	183b      	adds	r3, r7, r0
 8019af8:	4916      	ldr	r1, [pc, #88]	@ (8019b54 <USB_DeactivateEndpoint+0x370>)
 8019afa:	400a      	ands	r2, r1
 8019afc:	801a      	strh	r2, [r3, #0]
 8019afe:	687a      	ldr	r2, [r7, #4]
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	009b      	lsls	r3, r3, #2
 8019b06:	18d3      	adds	r3, r2, r3
 8019b08:	183a      	adds	r2, r7, r0
 8019b0a:	8812      	ldrh	r2, [r2, #0]
 8019b0c:	4912      	ldr	r1, [pc, #72]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 8019b0e:	430a      	orrs	r2, r1
 8019b10:	b292      	uxth	r2, r2
 8019b12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019b14:	687a      	ldr	r2, [r7, #4]
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	009b      	lsls	r3, r3, #2
 8019b1c:	18d3      	adds	r3, r2, r3
 8019b1e:	881b      	ldrh	r3, [r3, #0]
 8019b20:	b29a      	uxth	r2, r3
 8019b22:	2022      	movs	r0, #34	@ 0x22
 8019b24:	183b      	adds	r3, r7, r0
 8019b26:	490e      	ldr	r1, [pc, #56]	@ (8019b60 <USB_DeactivateEndpoint+0x37c>)
 8019b28:	400a      	ands	r2, r1
 8019b2a:	801a      	strh	r2, [r3, #0]
 8019b2c:	687a      	ldr	r2, [r7, #4]
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	009b      	lsls	r3, r3, #2
 8019b34:	18d3      	adds	r3, r2, r3
 8019b36:	183a      	adds	r2, r7, r0
 8019b38:	8812      	ldrh	r2, [r2, #0]
 8019b3a:	4907      	ldr	r1, [pc, #28]	@ (8019b58 <USB_DeactivateEndpoint+0x374>)
 8019b3c:	430a      	orrs	r2, r1
 8019b3e:	b292      	uxth	r2, r2
 8019b40:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019b42:	2300      	movs	r3, #0
}
 8019b44:	0018      	movs	r0, r3
 8019b46:	46bd      	mov	sp, r7
 8019b48:	b00c      	add	sp, #48	@ 0x30
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	ffff8f8f 	.word	0xffff8f8f
 8019b50:	ffff80c0 	.word	0xffff80c0
 8019b54:	ffff8fbf 	.word	0xffff8fbf
 8019b58:	ffff8080 	.word	0xffff8080
 8019b5c:	ffffc080 	.word	0xffffc080
 8019b60:	ffffbf8f 	.word	0xffffbf8f

08019b64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019b64:	b590      	push	{r4, r7, lr}
 8019b66:	b0c3      	sub	sp, #268	@ 0x10c
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	785b      	ldrb	r3, [r3, #1]
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d001      	beq.n	8019b7a <USB_EPStartXfer+0x16>
 8019b76:	f000 fd2d 	bl	801a5d4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	699a      	ldr	r2, [r3, #24]
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	691b      	ldr	r3, [r3, #16]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d905      	bls.n	8019b92 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	691b      	ldr	r3, [r3, #16]
 8019b8a:	1d7a      	adds	r2, r7, #5
 8019b8c:	32ff      	adds	r2, #255	@ 0xff
 8019b8e:	6013      	str	r3, [r2, #0]
 8019b90:	e004      	b.n	8019b9c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	699b      	ldr	r3, [r3, #24]
 8019b96:	1d7a      	adds	r2, r7, #5
 8019b98:	32ff      	adds	r2, #255	@ 0xff
 8019b9a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	7b1b      	ldrb	r3, [r3, #12]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d125      	bne.n	8019bf0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	6959      	ldr	r1, [r3, #20]
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	88da      	ldrh	r2, [r3, #6]
 8019bac:	1d7b      	adds	r3, r7, #5
 8019bae:	33ff      	adds	r3, #255	@ 0xff
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f001 fa47 	bl	801b048 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	613b      	str	r3, [r7, #16]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2250      	movs	r2, #80	@ 0x50
 8019bc2:	5a9b      	ldrh	r3, [r3, r2]
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	001a      	movs	r2, r3
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	189b      	adds	r3, r3, r2
 8019bcc:	613b      	str	r3, [r7, #16]
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	00da      	lsls	r2, r3, #3
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	18d3      	adds	r3, r2, r3
 8019bd8:	4ad7      	ldr	r2, [pc, #860]	@ (8019f38 <USB_EPStartXfer+0x3d4>)
 8019bda:	4694      	mov	ip, r2
 8019bdc:	4463      	add	r3, ip
 8019bde:	60fb      	str	r3, [r7, #12]
 8019be0:	1d7b      	adds	r3, r7, #5
 8019be2:	33ff      	adds	r3, #255	@ 0xff
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	801a      	strh	r2, [r3, #0]
 8019bec:	f000 fccd 	bl	801a58a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	78db      	ldrb	r3, [r3, #3]
 8019bf4:	2b02      	cmp	r3, #2
 8019bf6:	d000      	beq.n	8019bfa <USB_EPStartXfer+0x96>
 8019bf8:	e362      	b.n	801a2c0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019bfa:	683b      	ldr	r3, [r7, #0]
 8019bfc:	6a1a      	ldr	r2, [r3, #32]
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	691b      	ldr	r3, [r3, #16]
 8019c02:	429a      	cmp	r2, r3
 8019c04:	d800      	bhi.n	8019c08 <USB_EPStartXfer+0xa4>
 8019c06:	e309      	b.n	801a21c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019c08:	687a      	ldr	r2, [r7, #4]
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	18d3      	adds	r3, r2, r3
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	2056      	movs	r0, #86	@ 0x56
 8019c18:	183b      	adds	r3, r7, r0
 8019c1a:	49c8      	ldr	r1, [pc, #800]	@ (8019f3c <USB_EPStartXfer+0x3d8>)
 8019c1c:	400a      	ands	r2, r1
 8019c1e:	801a      	strh	r2, [r3, #0]
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	683b      	ldr	r3, [r7, #0]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	18d3      	adds	r3, r2, r3
 8019c2a:	183a      	adds	r2, r7, r0
 8019c2c:	8812      	ldrh	r2, [r2, #0]
 8019c2e:	49c4      	ldr	r1, [pc, #784]	@ (8019f40 <USB_EPStartXfer+0x3dc>)
 8019c30:	430a      	orrs	r2, r1
 8019c32:	b292      	uxth	r2, r2
 8019c34:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019c36:	683b      	ldr	r3, [r7, #0]
 8019c38:	6a1a      	ldr	r2, [r3, #32]
 8019c3a:	1d7b      	adds	r3, r7, #5
 8019c3c:	33ff      	adds	r3, #255	@ 0xff
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	1ad2      	subs	r2, r2, r3
 8019c42:	683b      	ldr	r3, [r7, #0]
 8019c44:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	683b      	ldr	r3, [r7, #0]
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	009b      	lsls	r3, r3, #2
 8019c4e:	18d3      	adds	r3, r2, r3
 8019c50:	881b      	ldrh	r3, [r3, #0]
 8019c52:	b29b      	uxth	r3, r3
 8019c54:	001a      	movs	r2, r3
 8019c56:	2340      	movs	r3, #64	@ 0x40
 8019c58:	4013      	ands	r3, r2
 8019c5a:	d100      	bne.n	8019c5e <USB_EPStartXfer+0xfa>
 8019c5c:	e176      	b.n	8019f4c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	785b      	ldrb	r3, [r3, #1]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d000      	beq.n	8019c6c <USB_EPStartXfer+0x108>
 8019c6a:	e074      	b.n	8019d56 <USB_EPStartXfer+0x1f2>
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2250      	movs	r2, #80	@ 0x50
 8019c74:	5a9b      	ldrh	r3, [r3, r2]
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	001a      	movs	r2, r3
 8019c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c7c:	189b      	adds	r3, r3, r2
 8019c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c80:	683b      	ldr	r3, [r7, #0]
 8019c82:	781b      	ldrb	r3, [r3, #0]
 8019c84:	00da      	lsls	r2, r3, #3
 8019c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c88:	18d3      	adds	r3, r2, r3
 8019c8a:	4aae      	ldr	r2, [pc, #696]	@ (8019f44 <USB_EPStartXfer+0x3e0>)
 8019c8c:	4694      	mov	ip, r2
 8019c8e:	4463      	add	r3, ip
 8019c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c94:	881b      	ldrh	r3, [r3, #0]
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	059b      	lsls	r3, r3, #22
 8019c9a:	0d9b      	lsrs	r3, r3, #22
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ca0:	801a      	strh	r2, [r3, #0]
 8019ca2:	1d7b      	adds	r3, r7, #5
 8019ca4:	33ff      	adds	r3, #255	@ 0xff
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2b3e      	cmp	r3, #62	@ 0x3e
 8019caa:	d924      	bls.n	8019cf6 <USB_EPStartXfer+0x192>
 8019cac:	1d7b      	adds	r3, r7, #5
 8019cae:	33ff      	adds	r3, #255	@ 0xff
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	095b      	lsrs	r3, r3, #5
 8019cb4:	1c7a      	adds	r2, r7, #1
 8019cb6:	32ff      	adds	r2, #255	@ 0xff
 8019cb8:	6013      	str	r3, [r2, #0]
 8019cba:	1d7b      	adds	r3, r7, #5
 8019cbc:	33ff      	adds	r3, #255	@ 0xff
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	221f      	movs	r2, #31
 8019cc2:	4013      	ands	r3, r2
 8019cc4:	d106      	bne.n	8019cd4 <USB_EPStartXfer+0x170>
 8019cc6:	1c7b      	adds	r3, r7, #1
 8019cc8:	33ff      	adds	r3, #255	@ 0xff
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	3b01      	subs	r3, #1
 8019cce:	1c7a      	adds	r2, r7, #1
 8019cd0:	32ff      	adds	r2, #255	@ 0xff
 8019cd2:	6013      	str	r3, [r2, #0]
 8019cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cd6:	881b      	ldrh	r3, [r3, #0]
 8019cd8:	b29a      	uxth	r2, r3
 8019cda:	1c7b      	adds	r3, r7, #1
 8019cdc:	33ff      	adds	r3, #255	@ 0xff
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	b29b      	uxth	r3, r3
 8019ce2:	029b      	lsls	r3, r3, #10
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	4313      	orrs	r3, r2
 8019ce8:	b29b      	uxth	r3, r3
 8019cea:	4a97      	ldr	r2, [pc, #604]	@ (8019f48 <USB_EPStartXfer+0x3e4>)
 8019cec:	4313      	orrs	r3, r2
 8019cee:	b29a      	uxth	r2, r3
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf2:	801a      	strh	r2, [r3, #0]
 8019cf4:	e04a      	b.n	8019d8c <USB_EPStartXfer+0x228>
 8019cf6:	1d7b      	adds	r3, r7, #5
 8019cf8:	33ff      	adds	r3, #255	@ 0xff
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d108      	bne.n	8019d12 <USB_EPStartXfer+0x1ae>
 8019d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d02:	881b      	ldrh	r3, [r3, #0]
 8019d04:	b29b      	uxth	r3, r3
 8019d06:	4a90      	ldr	r2, [pc, #576]	@ (8019f48 <USB_EPStartXfer+0x3e4>)
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d0e:	801a      	strh	r2, [r3, #0]
 8019d10:	e03c      	b.n	8019d8c <USB_EPStartXfer+0x228>
 8019d12:	1d7b      	adds	r3, r7, #5
 8019d14:	33ff      	adds	r3, #255	@ 0xff
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	085b      	lsrs	r3, r3, #1
 8019d1a:	1c7a      	adds	r2, r7, #1
 8019d1c:	32ff      	adds	r2, #255	@ 0xff
 8019d1e:	6013      	str	r3, [r2, #0]
 8019d20:	1d7b      	adds	r3, r7, #5
 8019d22:	33ff      	adds	r3, #255	@ 0xff
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	2201      	movs	r2, #1
 8019d28:	4013      	ands	r3, r2
 8019d2a:	d006      	beq.n	8019d3a <USB_EPStartXfer+0x1d6>
 8019d2c:	1c7b      	adds	r3, r7, #1
 8019d2e:	33ff      	adds	r3, #255	@ 0xff
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	3301      	adds	r3, #1
 8019d34:	1c7a      	adds	r2, r7, #1
 8019d36:	32ff      	adds	r2, #255	@ 0xff
 8019d38:	6013      	str	r3, [r2, #0]
 8019d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d3c:	881b      	ldrh	r3, [r3, #0]
 8019d3e:	b29a      	uxth	r2, r3
 8019d40:	1c7b      	adds	r3, r7, #1
 8019d42:	33ff      	adds	r3, #255	@ 0xff
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	b29b      	uxth	r3, r3
 8019d48:	029b      	lsls	r3, r3, #10
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	b29a      	uxth	r2, r3
 8019d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d52:	801a      	strh	r2, [r3, #0]
 8019d54:	e01a      	b.n	8019d8c <USB_EPStartXfer+0x228>
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	785b      	ldrb	r3, [r3, #1]
 8019d5a:	2b01      	cmp	r3, #1
 8019d5c:	d116      	bne.n	8019d8c <USB_EPStartXfer+0x228>
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2250      	movs	r2, #80	@ 0x50
 8019d62:	5a9b      	ldrh	r3, [r3, r2]
 8019d64:	b29b      	uxth	r3, r3
 8019d66:	001a      	movs	r2, r3
 8019d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d6a:	189b      	adds	r3, r3, r2
 8019d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	00da      	lsls	r2, r3, #3
 8019d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d76:	18d3      	adds	r3, r2, r3
 8019d78:	4a72      	ldr	r2, [pc, #456]	@ (8019f44 <USB_EPStartXfer+0x3e0>)
 8019d7a:	4694      	mov	ip, r2
 8019d7c:	4463      	add	r3, ip
 8019d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d80:	1d7b      	adds	r3, r7, #5
 8019d82:	33ff      	adds	r3, #255	@ 0xff
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019d8c:	2076      	movs	r0, #118	@ 0x76
 8019d8e:	183b      	adds	r3, r7, r0
 8019d90:	683a      	ldr	r2, [r7, #0]
 8019d92:	8952      	ldrh	r2, [r2, #10]
 8019d94:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	6959      	ldr	r1, [r3, #20]
 8019d9a:	1d7b      	adds	r3, r7, #5
 8019d9c:	33ff      	adds	r3, #255	@ 0xff
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	b29c      	uxth	r4, r3
 8019da2:	183b      	adds	r3, r7, r0
 8019da4:	881a      	ldrh	r2, [r3, #0]
 8019da6:	6878      	ldr	r0, [r7, #4]
 8019da8:	0023      	movs	r3, r4
 8019daa:	f001 f94d 	bl	801b048 <USB_WritePMA>
            ep->xfer_buff += len;
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	695a      	ldr	r2, [r3, #20]
 8019db2:	1d7b      	adds	r3, r7, #5
 8019db4:	33ff      	adds	r3, #255	@ 0xff
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	18d2      	adds	r2, r2, r3
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	6a1a      	ldr	r2, [r3, #32]
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	691b      	ldr	r3, [r3, #16]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d908      	bls.n	8019ddc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	6a1a      	ldr	r2, [r3, #32]
 8019dce:	1d7b      	adds	r3, r7, #5
 8019dd0:	33ff      	adds	r3, #255	@ 0xff
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	1ad2      	subs	r2, r2, r3
 8019dd6:	683b      	ldr	r3, [r7, #0]
 8019dd8:	621a      	str	r2, [r3, #32]
 8019dda:	e007      	b.n	8019dec <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019ddc:	683b      	ldr	r3, [r7, #0]
 8019dde:	6a1b      	ldr	r3, [r3, #32]
 8019de0:	1d7a      	adds	r2, r7, #5
 8019de2:	32ff      	adds	r2, #255	@ 0xff
 8019de4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	2200      	movs	r2, #0
 8019dea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	785b      	ldrb	r3, [r3, #1]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d000      	beq.n	8019df6 <USB_EPStartXfer+0x292>
 8019df4:	e070      	b.n	8019ed8 <USB_EPStartXfer+0x374>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	61bb      	str	r3, [r7, #24]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	2250      	movs	r2, #80	@ 0x50
 8019dfe:	5a9b      	ldrh	r3, [r3, r2]
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	001a      	movs	r2, r3
 8019e04:	69bb      	ldr	r3, [r7, #24]
 8019e06:	189b      	adds	r3, r3, r2
 8019e08:	61bb      	str	r3, [r7, #24]
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	781b      	ldrb	r3, [r3, #0]
 8019e0e:	00da      	lsls	r2, r3, #3
 8019e10:	69bb      	ldr	r3, [r7, #24]
 8019e12:	18d3      	adds	r3, r2, r3
 8019e14:	4a48      	ldr	r2, [pc, #288]	@ (8019f38 <USB_EPStartXfer+0x3d4>)
 8019e16:	4694      	mov	ip, r2
 8019e18:	4463      	add	r3, ip
 8019e1a:	617b      	str	r3, [r7, #20]
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	059b      	lsls	r3, r3, #22
 8019e24:	0d9b      	lsrs	r3, r3, #22
 8019e26:	b29a      	uxth	r2, r3
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	801a      	strh	r2, [r3, #0]
 8019e2c:	1d7b      	adds	r3, r7, #5
 8019e2e:	33ff      	adds	r3, #255	@ 0xff
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e34:	d922      	bls.n	8019e7c <USB_EPStartXfer+0x318>
 8019e36:	1d7b      	adds	r3, r7, #5
 8019e38:	33ff      	adds	r3, #255	@ 0xff
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	095b      	lsrs	r3, r3, #5
 8019e3e:	21fc      	movs	r1, #252	@ 0xfc
 8019e40:	187a      	adds	r2, r7, r1
 8019e42:	6013      	str	r3, [r2, #0]
 8019e44:	1d7b      	adds	r3, r7, #5
 8019e46:	33ff      	adds	r3, #255	@ 0xff
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	221f      	movs	r2, #31
 8019e4c:	4013      	ands	r3, r2
 8019e4e:	d104      	bne.n	8019e5a <USB_EPStartXfer+0x2f6>
 8019e50:	187b      	adds	r3, r7, r1
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	3b01      	subs	r3, #1
 8019e56:	187a      	adds	r2, r7, r1
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	881b      	ldrh	r3, [r3, #0]
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	23fc      	movs	r3, #252	@ 0xfc
 8019e62:	18fb      	adds	r3, r7, r3
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	029b      	lsls	r3, r3, #10
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	4a35      	ldr	r2, [pc, #212]	@ (8019f48 <USB_EPStartXfer+0x3e4>)
 8019e72:	4313      	orrs	r3, r2
 8019e74:	b29a      	uxth	r2, r3
 8019e76:	697b      	ldr	r3, [r7, #20]
 8019e78:	801a      	strh	r2, [r3, #0]
 8019e7a:	e04a      	b.n	8019f12 <USB_EPStartXfer+0x3ae>
 8019e7c:	1d7b      	adds	r3, r7, #5
 8019e7e:	33ff      	adds	r3, #255	@ 0xff
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d108      	bne.n	8019e98 <USB_EPStartXfer+0x334>
 8019e86:	697b      	ldr	r3, [r7, #20]
 8019e88:	881b      	ldrh	r3, [r3, #0]
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8019f48 <USB_EPStartXfer+0x3e4>)
 8019e8e:	4313      	orrs	r3, r2
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	801a      	strh	r2, [r3, #0]
 8019e96:	e03c      	b.n	8019f12 <USB_EPStartXfer+0x3ae>
 8019e98:	1d7b      	adds	r3, r7, #5
 8019e9a:	33ff      	adds	r3, #255	@ 0xff
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	085b      	lsrs	r3, r3, #1
 8019ea0:	21fc      	movs	r1, #252	@ 0xfc
 8019ea2:	187a      	adds	r2, r7, r1
 8019ea4:	6013      	str	r3, [r2, #0]
 8019ea6:	1d7b      	adds	r3, r7, #5
 8019ea8:	33ff      	adds	r3, #255	@ 0xff
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	2201      	movs	r2, #1
 8019eae:	4013      	ands	r3, r2
 8019eb0:	d004      	beq.n	8019ebc <USB_EPStartXfer+0x358>
 8019eb2:	187b      	adds	r3, r7, r1
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	187a      	adds	r2, r7, r1
 8019eba:	6013      	str	r3, [r2, #0]
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	881b      	ldrh	r3, [r3, #0]
 8019ec0:	b29a      	uxth	r2, r3
 8019ec2:	23fc      	movs	r3, #252	@ 0xfc
 8019ec4:	18fb      	adds	r3, r7, r3
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	029b      	lsls	r3, r3, #10
 8019ecc:	b29b      	uxth	r3, r3
 8019ece:	4313      	orrs	r3, r2
 8019ed0:	b29a      	uxth	r2, r3
 8019ed2:	697b      	ldr	r3, [r7, #20]
 8019ed4:	801a      	strh	r2, [r3, #0]
 8019ed6:	e01c      	b.n	8019f12 <USB_EPStartXfer+0x3ae>
 8019ed8:	683b      	ldr	r3, [r7, #0]
 8019eda:	785b      	ldrb	r3, [r3, #1]
 8019edc:	2b01      	cmp	r3, #1
 8019ede:	d118      	bne.n	8019f12 <USB_EPStartXfer+0x3ae>
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	623b      	str	r3, [r7, #32]
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2250      	movs	r2, #80	@ 0x50
 8019ee8:	5a9b      	ldrh	r3, [r3, r2]
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	001a      	movs	r2, r3
 8019eee:	6a3b      	ldr	r3, [r7, #32]
 8019ef0:	189b      	adds	r3, r3, r2
 8019ef2:	623b      	str	r3, [r7, #32]
 8019ef4:	683b      	ldr	r3, [r7, #0]
 8019ef6:	781b      	ldrb	r3, [r3, #0]
 8019ef8:	00da      	lsls	r2, r3, #3
 8019efa:	6a3b      	ldr	r3, [r7, #32]
 8019efc:	18d3      	adds	r3, r2, r3
 8019efe:	4a0e      	ldr	r2, [pc, #56]	@ (8019f38 <USB_EPStartXfer+0x3d4>)
 8019f00:	4694      	mov	ip, r2
 8019f02:	4463      	add	r3, ip
 8019f04:	61fb      	str	r3, [r7, #28]
 8019f06:	1d7b      	adds	r3, r7, #5
 8019f08:	33ff      	adds	r3, #255	@ 0xff
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	69fb      	ldr	r3, [r7, #28]
 8019f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019f12:	2076      	movs	r0, #118	@ 0x76
 8019f14:	183b      	adds	r3, r7, r0
 8019f16:	683a      	ldr	r2, [r7, #0]
 8019f18:	8912      	ldrh	r2, [r2, #8]
 8019f1a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019f1c:	683b      	ldr	r3, [r7, #0]
 8019f1e:	6959      	ldr	r1, [r3, #20]
 8019f20:	1d7b      	adds	r3, r7, #5
 8019f22:	33ff      	adds	r3, #255	@ 0xff
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	b29c      	uxth	r4, r3
 8019f28:	183b      	adds	r3, r7, r0
 8019f2a:	881a      	ldrh	r2, [r3, #0]
 8019f2c:	6878      	ldr	r0, [r7, #4]
 8019f2e:	0023      	movs	r3, r4
 8019f30:	f001 f88a 	bl	801b048 <USB_WritePMA>
 8019f34:	e329      	b.n	801a58a <USB_EPStartXfer+0xa26>
 8019f36:	46c0      	nop			@ (mov r8, r8)
 8019f38:	00000402 	.word	0x00000402
 8019f3c:	ffff8f8f 	.word	0xffff8f8f
 8019f40:	ffff8180 	.word	0xffff8180
 8019f44:	00000406 	.word	0x00000406
 8019f48:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	785b      	ldrb	r3, [r3, #1]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d000      	beq.n	8019f56 <USB_EPStartXfer+0x3f2>
 8019f54:	e070      	b.n	801a038 <USB_EPStartXfer+0x4d4>
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	2250      	movs	r2, #80	@ 0x50
 8019f5e:	5a9b      	ldrh	r3, [r3, r2]
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	001a      	movs	r2, r3
 8019f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f66:	189b      	adds	r3, r3, r2
 8019f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019f6a:	683b      	ldr	r3, [r7, #0]
 8019f6c:	781b      	ldrb	r3, [r3, #0]
 8019f6e:	00da      	lsls	r2, r3, #3
 8019f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019f72:	18d3      	adds	r3, r2, r3
 8019f74:	4acd      	ldr	r2, [pc, #820]	@ (801a2ac <USB_EPStartXfer+0x748>)
 8019f76:	4694      	mov	ip, r2
 8019f78:	4463      	add	r3, ip
 8019f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f7e:	881b      	ldrh	r3, [r3, #0]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	059b      	lsls	r3, r3, #22
 8019f84:	0d9b      	lsrs	r3, r3, #22
 8019f86:	b29a      	uxth	r2, r3
 8019f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f8a:	801a      	strh	r2, [r3, #0]
 8019f8c:	1d7b      	adds	r3, r7, #5
 8019f8e:	33ff      	adds	r3, #255	@ 0xff
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f94:	d922      	bls.n	8019fdc <USB_EPStartXfer+0x478>
 8019f96:	1d7b      	adds	r3, r7, #5
 8019f98:	33ff      	adds	r3, #255	@ 0xff
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	095b      	lsrs	r3, r3, #5
 8019f9e:	21f8      	movs	r1, #248	@ 0xf8
 8019fa0:	187a      	adds	r2, r7, r1
 8019fa2:	6013      	str	r3, [r2, #0]
 8019fa4:	1d7b      	adds	r3, r7, #5
 8019fa6:	33ff      	adds	r3, #255	@ 0xff
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	221f      	movs	r2, #31
 8019fac:	4013      	ands	r3, r2
 8019fae:	d104      	bne.n	8019fba <USB_EPStartXfer+0x456>
 8019fb0:	187b      	adds	r3, r7, r1
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	187a      	adds	r2, r7, r1
 8019fb8:	6013      	str	r3, [r2, #0]
 8019fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fbc:	881b      	ldrh	r3, [r3, #0]
 8019fbe:	b29a      	uxth	r2, r3
 8019fc0:	23f8      	movs	r3, #248	@ 0xf8
 8019fc2:	18fb      	adds	r3, r7, r3
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	029b      	lsls	r3, r3, #10
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	4313      	orrs	r3, r2
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4ab7      	ldr	r2, [pc, #732]	@ (801a2b0 <USB_EPStartXfer+0x74c>)
 8019fd2:	4313      	orrs	r3, r2
 8019fd4:	b29a      	uxth	r2, r3
 8019fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fd8:	801a      	strh	r2, [r3, #0]
 8019fda:	e04a      	b.n	801a072 <USB_EPStartXfer+0x50e>
 8019fdc:	1d7b      	adds	r3, r7, #5
 8019fde:	33ff      	adds	r3, #255	@ 0xff
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d108      	bne.n	8019ff8 <USB_EPStartXfer+0x494>
 8019fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019fe8:	881b      	ldrh	r3, [r3, #0]
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	4ab0      	ldr	r2, [pc, #704]	@ (801a2b0 <USB_EPStartXfer+0x74c>)
 8019fee:	4313      	orrs	r3, r2
 8019ff0:	b29a      	uxth	r2, r3
 8019ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ff4:	801a      	strh	r2, [r3, #0]
 8019ff6:	e03c      	b.n	801a072 <USB_EPStartXfer+0x50e>
 8019ff8:	1d7b      	adds	r3, r7, #5
 8019ffa:	33ff      	adds	r3, #255	@ 0xff
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	085b      	lsrs	r3, r3, #1
 801a000:	21f8      	movs	r1, #248	@ 0xf8
 801a002:	187a      	adds	r2, r7, r1
 801a004:	6013      	str	r3, [r2, #0]
 801a006:	1d7b      	adds	r3, r7, #5
 801a008:	33ff      	adds	r3, #255	@ 0xff
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	2201      	movs	r2, #1
 801a00e:	4013      	ands	r3, r2
 801a010:	d004      	beq.n	801a01c <USB_EPStartXfer+0x4b8>
 801a012:	187b      	adds	r3, r7, r1
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	3301      	adds	r3, #1
 801a018:	187a      	adds	r2, r7, r1
 801a01a:	6013      	str	r3, [r2, #0]
 801a01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a01e:	881b      	ldrh	r3, [r3, #0]
 801a020:	b29a      	uxth	r2, r3
 801a022:	23f8      	movs	r3, #248	@ 0xf8
 801a024:	18fb      	adds	r3, r7, r3
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	b29b      	uxth	r3, r3
 801a02a:	029b      	lsls	r3, r3, #10
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	4313      	orrs	r3, r2
 801a030:	b29a      	uxth	r2, r3
 801a032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a034:	801a      	strh	r2, [r3, #0]
 801a036:	e01c      	b.n	801a072 <USB_EPStartXfer+0x50e>
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	785b      	ldrb	r3, [r3, #1]
 801a03c:	2b01      	cmp	r3, #1
 801a03e:	d118      	bne.n	801a072 <USB_EPStartXfer+0x50e>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	653b      	str	r3, [r7, #80]	@ 0x50
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2250      	movs	r2, #80	@ 0x50
 801a048:	5a9b      	ldrh	r3, [r3, r2]
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	001a      	movs	r2, r3
 801a04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a050:	189b      	adds	r3, r3, r2
 801a052:	653b      	str	r3, [r7, #80]	@ 0x50
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	00da      	lsls	r2, r3, #3
 801a05a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a05c:	18d3      	adds	r3, r2, r3
 801a05e:	4a93      	ldr	r2, [pc, #588]	@ (801a2ac <USB_EPStartXfer+0x748>)
 801a060:	4694      	mov	ip, r2
 801a062:	4463      	add	r3, ip
 801a064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a066:	1d7b      	adds	r3, r7, #5
 801a068:	33ff      	adds	r3, #255	@ 0xff
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a070:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a072:	2076      	movs	r0, #118	@ 0x76
 801a074:	183b      	adds	r3, r7, r0
 801a076:	683a      	ldr	r2, [r7, #0]
 801a078:	8912      	ldrh	r2, [r2, #8]
 801a07a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	6959      	ldr	r1, [r3, #20]
 801a080:	1d7b      	adds	r3, r7, #5
 801a082:	33ff      	adds	r3, #255	@ 0xff
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	b29c      	uxth	r4, r3
 801a088:	183b      	adds	r3, r7, r0
 801a08a:	881a      	ldrh	r2, [r3, #0]
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	0023      	movs	r3, r4
 801a090:	f000 ffda 	bl	801b048 <USB_WritePMA>
            ep->xfer_buff += len;
 801a094:	683b      	ldr	r3, [r7, #0]
 801a096:	695a      	ldr	r2, [r3, #20]
 801a098:	1d7b      	adds	r3, r7, #5
 801a09a:	33ff      	adds	r3, #255	@ 0xff
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	18d2      	adds	r2, r2, r3
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a0a4:	683b      	ldr	r3, [r7, #0]
 801a0a6:	6a1a      	ldr	r2, [r3, #32]
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	691b      	ldr	r3, [r3, #16]
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d908      	bls.n	801a0c2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	6a1a      	ldr	r2, [r3, #32]
 801a0b4:	1d7b      	adds	r3, r7, #5
 801a0b6:	33ff      	adds	r3, #255	@ 0xff
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	1ad2      	subs	r2, r2, r3
 801a0bc:	683b      	ldr	r3, [r7, #0]
 801a0be:	621a      	str	r2, [r3, #32]
 801a0c0:	e007      	b.n	801a0d2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	6a1b      	ldr	r3, [r3, #32]
 801a0c6:	1d7a      	adds	r2, r7, #5
 801a0c8:	32ff      	adds	r2, #255	@ 0xff
 801a0ca:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	643b      	str	r3, [r7, #64]	@ 0x40
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	785b      	ldrb	r3, [r3, #1]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d000      	beq.n	801a0e0 <USB_EPStartXfer+0x57c>
 801a0de:	e070      	b.n	801a1c2 <USB_EPStartXfer+0x65e>
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	2250      	movs	r2, #80	@ 0x50
 801a0e8:	5a9b      	ldrh	r3, [r3, r2]
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	001a      	movs	r2, r3
 801a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0f0:	189b      	adds	r3, r3, r2
 801a0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	781b      	ldrb	r3, [r3, #0]
 801a0f8:	00da      	lsls	r2, r3, #3
 801a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0fc:	18d3      	adds	r3, r2, r3
 801a0fe:	4a6d      	ldr	r2, [pc, #436]	@ (801a2b4 <USB_EPStartXfer+0x750>)
 801a100:	4694      	mov	ip, r2
 801a102:	4463      	add	r3, ip
 801a104:	637b      	str	r3, [r7, #52]	@ 0x34
 801a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a108:	881b      	ldrh	r3, [r3, #0]
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	059b      	lsls	r3, r3, #22
 801a10e:	0d9b      	lsrs	r3, r3, #22
 801a110:	b29a      	uxth	r2, r3
 801a112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a114:	801a      	strh	r2, [r3, #0]
 801a116:	1d7b      	adds	r3, r7, #5
 801a118:	33ff      	adds	r3, #255	@ 0xff
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a11e:	d922      	bls.n	801a166 <USB_EPStartXfer+0x602>
 801a120:	1d7b      	adds	r3, r7, #5
 801a122:	33ff      	adds	r3, #255	@ 0xff
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	095b      	lsrs	r3, r3, #5
 801a128:	21f4      	movs	r1, #244	@ 0xf4
 801a12a:	187a      	adds	r2, r7, r1
 801a12c:	6013      	str	r3, [r2, #0]
 801a12e:	1d7b      	adds	r3, r7, #5
 801a130:	33ff      	adds	r3, #255	@ 0xff
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	221f      	movs	r2, #31
 801a136:	4013      	ands	r3, r2
 801a138:	d104      	bne.n	801a144 <USB_EPStartXfer+0x5e0>
 801a13a:	187b      	adds	r3, r7, r1
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	3b01      	subs	r3, #1
 801a140:	187a      	adds	r2, r7, r1
 801a142:	6013      	str	r3, [r2, #0]
 801a144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a146:	881b      	ldrh	r3, [r3, #0]
 801a148:	b29a      	uxth	r2, r3
 801a14a:	23f4      	movs	r3, #244	@ 0xf4
 801a14c:	18fb      	adds	r3, r7, r3
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	b29b      	uxth	r3, r3
 801a152:	029b      	lsls	r3, r3, #10
 801a154:	b29b      	uxth	r3, r3
 801a156:	4313      	orrs	r3, r2
 801a158:	b29b      	uxth	r3, r3
 801a15a:	4a55      	ldr	r2, [pc, #340]	@ (801a2b0 <USB_EPStartXfer+0x74c>)
 801a15c:	4313      	orrs	r3, r2
 801a15e:	b29a      	uxth	r2, r3
 801a160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a162:	801a      	strh	r2, [r3, #0]
 801a164:	e048      	b.n	801a1f8 <USB_EPStartXfer+0x694>
 801a166:	1d7b      	adds	r3, r7, #5
 801a168:	33ff      	adds	r3, #255	@ 0xff
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d108      	bne.n	801a182 <USB_EPStartXfer+0x61e>
 801a170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a172:	881b      	ldrh	r3, [r3, #0]
 801a174:	b29b      	uxth	r3, r3
 801a176:	4a4e      	ldr	r2, [pc, #312]	@ (801a2b0 <USB_EPStartXfer+0x74c>)
 801a178:	4313      	orrs	r3, r2
 801a17a:	b29a      	uxth	r2, r3
 801a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a17e:	801a      	strh	r2, [r3, #0]
 801a180:	e03a      	b.n	801a1f8 <USB_EPStartXfer+0x694>
 801a182:	1d7b      	adds	r3, r7, #5
 801a184:	33ff      	adds	r3, #255	@ 0xff
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	085b      	lsrs	r3, r3, #1
 801a18a:	21f4      	movs	r1, #244	@ 0xf4
 801a18c:	187a      	adds	r2, r7, r1
 801a18e:	6013      	str	r3, [r2, #0]
 801a190:	1d7b      	adds	r3, r7, #5
 801a192:	33ff      	adds	r3, #255	@ 0xff
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	2201      	movs	r2, #1
 801a198:	4013      	ands	r3, r2
 801a19a:	d004      	beq.n	801a1a6 <USB_EPStartXfer+0x642>
 801a19c:	187b      	adds	r3, r7, r1
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	187a      	adds	r2, r7, r1
 801a1a4:	6013      	str	r3, [r2, #0]
 801a1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	b29a      	uxth	r2, r3
 801a1ac:	23f4      	movs	r3, #244	@ 0xf4
 801a1ae:	18fb      	adds	r3, r7, r3
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	029b      	lsls	r3, r3, #10
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	4313      	orrs	r3, r2
 801a1ba:	b29a      	uxth	r2, r3
 801a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1be:	801a      	strh	r2, [r3, #0]
 801a1c0:	e01a      	b.n	801a1f8 <USB_EPStartXfer+0x694>
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	785b      	ldrb	r3, [r3, #1]
 801a1c6:	2b01      	cmp	r3, #1
 801a1c8:	d116      	bne.n	801a1f8 <USB_EPStartXfer+0x694>
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2250      	movs	r2, #80	@ 0x50
 801a1ce:	5a9b      	ldrh	r3, [r3, r2]
 801a1d0:	b29b      	uxth	r3, r3
 801a1d2:	001a      	movs	r2, r3
 801a1d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a1d6:	189b      	adds	r3, r3, r2
 801a1d8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	00da      	lsls	r2, r3, #3
 801a1e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a1e2:	18d3      	adds	r3, r2, r3
 801a1e4:	4a33      	ldr	r2, [pc, #204]	@ (801a2b4 <USB_EPStartXfer+0x750>)
 801a1e6:	4694      	mov	ip, r2
 801a1e8:	4463      	add	r3, ip
 801a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a1ec:	1d7b      	adds	r3, r7, #5
 801a1ee:	33ff      	adds	r3, #255	@ 0xff
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a1f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a1f8:	2076      	movs	r0, #118	@ 0x76
 801a1fa:	183b      	adds	r3, r7, r0
 801a1fc:	683a      	ldr	r2, [r7, #0]
 801a1fe:	8952      	ldrh	r2, [r2, #10]
 801a200:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	6959      	ldr	r1, [r3, #20]
 801a206:	1d7b      	adds	r3, r7, #5
 801a208:	33ff      	adds	r3, #255	@ 0xff
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	b29c      	uxth	r4, r3
 801a20e:	183b      	adds	r3, r7, r0
 801a210:	881a      	ldrh	r2, [r3, #0]
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	0023      	movs	r3, r4
 801a216:	f000 ff17 	bl	801b048 <USB_WritePMA>
 801a21a:	e1b6      	b.n	801a58a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	6a1b      	ldr	r3, [r3, #32]
 801a220:	1d7a      	adds	r2, r7, #5
 801a222:	32ff      	adds	r2, #255	@ 0xff
 801a224:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a226:	687a      	ldr	r2, [r7, #4]
 801a228:	683b      	ldr	r3, [r7, #0]
 801a22a:	781b      	ldrb	r3, [r3, #0]
 801a22c:	009b      	lsls	r3, r3, #2
 801a22e:	18d3      	adds	r3, r2, r3
 801a230:	881b      	ldrh	r3, [r3, #0]
 801a232:	b29a      	uxth	r2, r3
 801a234:	2062      	movs	r0, #98	@ 0x62
 801a236:	183b      	adds	r3, r7, r0
 801a238:	491f      	ldr	r1, [pc, #124]	@ (801a2b8 <USB_EPStartXfer+0x754>)
 801a23a:	400a      	ands	r2, r1
 801a23c:	801a      	strh	r2, [r3, #0]
 801a23e:	687a      	ldr	r2, [r7, #4]
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	781b      	ldrb	r3, [r3, #0]
 801a244:	009b      	lsls	r3, r3, #2
 801a246:	18d3      	adds	r3, r2, r3
 801a248:	183a      	adds	r2, r7, r0
 801a24a:	8812      	ldrh	r2, [r2, #0]
 801a24c:	491b      	ldr	r1, [pc, #108]	@ (801a2bc <USB_EPStartXfer+0x758>)
 801a24e:	430a      	orrs	r2, r1
 801a250:	b292      	uxth	r2, r2
 801a252:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	2250      	movs	r2, #80	@ 0x50
 801a25c:	5a9b      	ldrh	r3, [r3, r2]
 801a25e:	b29b      	uxth	r3, r3
 801a260:	001a      	movs	r2, r3
 801a262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a264:	189b      	adds	r3, r3, r2
 801a266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a268:	683b      	ldr	r3, [r7, #0]
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	00da      	lsls	r2, r3, #3
 801a26e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a270:	18d3      	adds	r3, r2, r3
 801a272:	4a0e      	ldr	r2, [pc, #56]	@ (801a2ac <USB_EPStartXfer+0x748>)
 801a274:	4694      	mov	ip, r2
 801a276:	4463      	add	r3, ip
 801a278:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a27a:	1d7b      	adds	r3, r7, #5
 801a27c:	33ff      	adds	r3, #255	@ 0xff
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	b29a      	uxth	r2, r3
 801a282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a284:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a286:	2076      	movs	r0, #118	@ 0x76
 801a288:	183b      	adds	r3, r7, r0
 801a28a:	683a      	ldr	r2, [r7, #0]
 801a28c:	8912      	ldrh	r2, [r2, #8]
 801a28e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	6959      	ldr	r1, [r3, #20]
 801a294:	1d7b      	adds	r3, r7, #5
 801a296:	33ff      	adds	r3, #255	@ 0xff
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	b29c      	uxth	r4, r3
 801a29c:	183b      	adds	r3, r7, r0
 801a29e:	881a      	ldrh	r2, [r3, #0]
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	0023      	movs	r3, r4
 801a2a4:	f000 fed0 	bl	801b048 <USB_WritePMA>
 801a2a8:	e16f      	b.n	801a58a <USB_EPStartXfer+0xa26>
 801a2aa:	46c0      	nop			@ (mov r8, r8)
 801a2ac:	00000402 	.word	0x00000402
 801a2b0:	ffff8000 	.word	0xffff8000
 801a2b4:	00000406 	.word	0x00000406
 801a2b8:	ffff8e8f 	.word	0xffff8e8f
 801a2bc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a2c0:	683b      	ldr	r3, [r7, #0]
 801a2c2:	6a1a      	ldr	r2, [r3, #32]
 801a2c4:	1d7b      	adds	r3, r7, #5
 801a2c6:	33ff      	adds	r3, #255	@ 0xff
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	1ad2      	subs	r2, r2, r3
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a2d0:	687a      	ldr	r2, [r7, #4]
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	009b      	lsls	r3, r3, #2
 801a2d8:	18d3      	adds	r3, r2, r3
 801a2da:	881b      	ldrh	r3, [r3, #0]
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	001a      	movs	r2, r3
 801a2e0:	2340      	movs	r3, #64	@ 0x40
 801a2e2:	4013      	ands	r3, r2
 801a2e4:	d100      	bne.n	801a2e8 <USB_EPStartXfer+0x784>
 801a2e6:	e0a4      	b.n	801a432 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	673b      	str	r3, [r7, #112]	@ 0x70
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	785b      	ldrb	r3, [r3, #1]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d000      	beq.n	801a2f6 <USB_EPStartXfer+0x792>
 801a2f4:	e070      	b.n	801a3d8 <USB_EPStartXfer+0x874>
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2250      	movs	r2, #80	@ 0x50
 801a2fe:	5a9b      	ldrh	r3, [r3, r2]
 801a300:	b29b      	uxth	r3, r3
 801a302:	001a      	movs	r2, r3
 801a304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a306:	189b      	adds	r3, r3, r2
 801a308:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	781b      	ldrb	r3, [r3, #0]
 801a30e:	00da      	lsls	r2, r3, #3
 801a310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a312:	18d3      	adds	r3, r2, r3
 801a314:	4abc      	ldr	r2, [pc, #752]	@ (801a608 <USB_EPStartXfer+0xaa4>)
 801a316:	4694      	mov	ip, r2
 801a318:	4463      	add	r3, ip
 801a31a:	667b      	str	r3, [r7, #100]	@ 0x64
 801a31c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a31e:	881b      	ldrh	r3, [r3, #0]
 801a320:	b29b      	uxth	r3, r3
 801a322:	059b      	lsls	r3, r3, #22
 801a324:	0d9b      	lsrs	r3, r3, #22
 801a326:	b29a      	uxth	r2, r3
 801a328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a32a:	801a      	strh	r2, [r3, #0]
 801a32c:	1d7b      	adds	r3, r7, #5
 801a32e:	33ff      	adds	r3, #255	@ 0xff
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	2b3e      	cmp	r3, #62	@ 0x3e
 801a334:	d922      	bls.n	801a37c <USB_EPStartXfer+0x818>
 801a336:	1d7b      	adds	r3, r7, #5
 801a338:	33ff      	adds	r3, #255	@ 0xff
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	095b      	lsrs	r3, r3, #5
 801a33e:	21f0      	movs	r1, #240	@ 0xf0
 801a340:	187a      	adds	r2, r7, r1
 801a342:	6013      	str	r3, [r2, #0]
 801a344:	1d7b      	adds	r3, r7, #5
 801a346:	33ff      	adds	r3, #255	@ 0xff
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	221f      	movs	r2, #31
 801a34c:	4013      	ands	r3, r2
 801a34e:	d104      	bne.n	801a35a <USB_EPStartXfer+0x7f6>
 801a350:	187b      	adds	r3, r7, r1
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	3b01      	subs	r3, #1
 801a356:	187a      	adds	r2, r7, r1
 801a358:	6013      	str	r3, [r2, #0]
 801a35a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a35c:	881b      	ldrh	r3, [r3, #0]
 801a35e:	b29a      	uxth	r2, r3
 801a360:	23f0      	movs	r3, #240	@ 0xf0
 801a362:	18fb      	adds	r3, r7, r3
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	b29b      	uxth	r3, r3
 801a368:	029b      	lsls	r3, r3, #10
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	4313      	orrs	r3, r2
 801a36e:	b29b      	uxth	r3, r3
 801a370:	4aa6      	ldr	r2, [pc, #664]	@ (801a60c <USB_EPStartXfer+0xaa8>)
 801a372:	4313      	orrs	r3, r2
 801a374:	b29a      	uxth	r2, r3
 801a376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a378:	801a      	strh	r2, [r3, #0]
 801a37a:	e048      	b.n	801a40e <USB_EPStartXfer+0x8aa>
 801a37c:	1d7b      	adds	r3, r7, #5
 801a37e:	33ff      	adds	r3, #255	@ 0xff
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d108      	bne.n	801a398 <USB_EPStartXfer+0x834>
 801a386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a388:	881b      	ldrh	r3, [r3, #0]
 801a38a:	b29b      	uxth	r3, r3
 801a38c:	4a9f      	ldr	r2, [pc, #636]	@ (801a60c <USB_EPStartXfer+0xaa8>)
 801a38e:	4313      	orrs	r3, r2
 801a390:	b29a      	uxth	r2, r3
 801a392:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a394:	801a      	strh	r2, [r3, #0]
 801a396:	e03a      	b.n	801a40e <USB_EPStartXfer+0x8aa>
 801a398:	1d7b      	adds	r3, r7, #5
 801a39a:	33ff      	adds	r3, #255	@ 0xff
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	085b      	lsrs	r3, r3, #1
 801a3a0:	21f0      	movs	r1, #240	@ 0xf0
 801a3a2:	187a      	adds	r2, r7, r1
 801a3a4:	6013      	str	r3, [r2, #0]
 801a3a6:	1d7b      	adds	r3, r7, #5
 801a3a8:	33ff      	adds	r3, #255	@ 0xff
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	2201      	movs	r2, #1
 801a3ae:	4013      	ands	r3, r2
 801a3b0:	d004      	beq.n	801a3bc <USB_EPStartXfer+0x858>
 801a3b2:	187b      	adds	r3, r7, r1
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	187a      	adds	r2, r7, r1
 801a3ba:	6013      	str	r3, [r2, #0]
 801a3bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a3be:	881b      	ldrh	r3, [r3, #0]
 801a3c0:	b29a      	uxth	r2, r3
 801a3c2:	23f0      	movs	r3, #240	@ 0xf0
 801a3c4:	18fb      	adds	r3, r7, r3
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	b29b      	uxth	r3, r3
 801a3ca:	029b      	lsls	r3, r3, #10
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	4313      	orrs	r3, r2
 801a3d0:	b29a      	uxth	r2, r3
 801a3d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a3d4:	801a      	strh	r2, [r3, #0]
 801a3d6:	e01a      	b.n	801a40e <USB_EPStartXfer+0x8aa>
 801a3d8:	683b      	ldr	r3, [r7, #0]
 801a3da:	785b      	ldrb	r3, [r3, #1]
 801a3dc:	2b01      	cmp	r3, #1
 801a3de:	d116      	bne.n	801a40e <USB_EPStartXfer+0x8aa>
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2250      	movs	r2, #80	@ 0x50
 801a3e4:	5a9b      	ldrh	r3, [r3, r2]
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	001a      	movs	r2, r3
 801a3ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a3ec:	189b      	adds	r3, r3, r2
 801a3ee:	673b      	str	r3, [r7, #112]	@ 0x70
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	00da      	lsls	r2, r3, #3
 801a3f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a3f8:	18d3      	adds	r3, r2, r3
 801a3fa:	4a83      	ldr	r2, [pc, #524]	@ (801a608 <USB_EPStartXfer+0xaa4>)
 801a3fc:	4694      	mov	ip, r2
 801a3fe:	4463      	add	r3, ip
 801a400:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a402:	1d7b      	adds	r3, r7, #5
 801a404:	33ff      	adds	r3, #255	@ 0xff
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	b29a      	uxth	r2, r3
 801a40a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a40c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a40e:	2076      	movs	r0, #118	@ 0x76
 801a410:	183b      	adds	r3, r7, r0
 801a412:	683a      	ldr	r2, [r7, #0]
 801a414:	8952      	ldrh	r2, [r2, #10]
 801a416:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	6959      	ldr	r1, [r3, #20]
 801a41c:	1d7b      	adds	r3, r7, #5
 801a41e:	33ff      	adds	r3, #255	@ 0xff
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	b29c      	uxth	r4, r3
 801a424:	183b      	adds	r3, r7, r0
 801a426:	881a      	ldrh	r2, [r3, #0]
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	0023      	movs	r3, r4
 801a42c:	f000 fe0c 	bl	801b048 <USB_WritePMA>
 801a430:	e0ab      	b.n	801a58a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a432:	683b      	ldr	r3, [r7, #0]
 801a434:	785b      	ldrb	r3, [r3, #1]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d000      	beq.n	801a43c <USB_EPStartXfer+0x8d8>
 801a43a:	e070      	b.n	801a51e <USB_EPStartXfer+0x9ba>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2250      	movs	r2, #80	@ 0x50
 801a444:	5a9b      	ldrh	r3, [r3, r2]
 801a446:	b29b      	uxth	r3, r3
 801a448:	001a      	movs	r2, r3
 801a44a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a44c:	189b      	adds	r3, r3, r2
 801a44e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	781b      	ldrb	r3, [r3, #0]
 801a454:	00da      	lsls	r2, r3, #3
 801a456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a458:	18d3      	adds	r3, r2, r3
 801a45a:	4a6d      	ldr	r2, [pc, #436]	@ (801a610 <USB_EPStartXfer+0xaac>)
 801a45c:	4694      	mov	ip, r2
 801a45e:	4463      	add	r3, ip
 801a460:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	b29b      	uxth	r3, r3
 801a468:	059b      	lsls	r3, r3, #22
 801a46a:	0d9b      	lsrs	r3, r3, #22
 801a46c:	b29a      	uxth	r2, r3
 801a46e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a470:	801a      	strh	r2, [r3, #0]
 801a472:	1d7b      	adds	r3, r7, #5
 801a474:	33ff      	adds	r3, #255	@ 0xff
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	2b3e      	cmp	r3, #62	@ 0x3e
 801a47a:	d922      	bls.n	801a4c2 <USB_EPStartXfer+0x95e>
 801a47c:	1d7b      	adds	r3, r7, #5
 801a47e:	33ff      	adds	r3, #255	@ 0xff
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	095b      	lsrs	r3, r3, #5
 801a484:	21ec      	movs	r1, #236	@ 0xec
 801a486:	187a      	adds	r2, r7, r1
 801a488:	6013      	str	r3, [r2, #0]
 801a48a:	1d7b      	adds	r3, r7, #5
 801a48c:	33ff      	adds	r3, #255	@ 0xff
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	221f      	movs	r2, #31
 801a492:	4013      	ands	r3, r2
 801a494:	d104      	bne.n	801a4a0 <USB_EPStartXfer+0x93c>
 801a496:	187b      	adds	r3, r7, r1
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	3b01      	subs	r3, #1
 801a49c:	187a      	adds	r2, r7, r1
 801a49e:	6013      	str	r3, [r2, #0]
 801a4a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4a2:	881b      	ldrh	r3, [r3, #0]
 801a4a4:	b29a      	uxth	r2, r3
 801a4a6:	23ec      	movs	r3, #236	@ 0xec
 801a4a8:	18fb      	adds	r3, r7, r3
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	b29b      	uxth	r3, r3
 801a4ae:	029b      	lsls	r3, r3, #10
 801a4b0:	b29b      	uxth	r3, r3
 801a4b2:	4313      	orrs	r3, r2
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	4a55      	ldr	r2, [pc, #340]	@ (801a60c <USB_EPStartXfer+0xaa8>)
 801a4b8:	4313      	orrs	r3, r2
 801a4ba:	b29a      	uxth	r2, r3
 801a4bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4be:	801a      	strh	r2, [r3, #0]
 801a4c0:	e052      	b.n	801a568 <USB_EPStartXfer+0xa04>
 801a4c2:	1d7b      	adds	r3, r7, #5
 801a4c4:	33ff      	adds	r3, #255	@ 0xff
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d108      	bne.n	801a4de <USB_EPStartXfer+0x97a>
 801a4cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4ce:	881b      	ldrh	r3, [r3, #0]
 801a4d0:	b29b      	uxth	r3, r3
 801a4d2:	4a4e      	ldr	r2, [pc, #312]	@ (801a60c <USB_EPStartXfer+0xaa8>)
 801a4d4:	4313      	orrs	r3, r2
 801a4d6:	b29a      	uxth	r2, r3
 801a4d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a4da:	801a      	strh	r2, [r3, #0]
 801a4dc:	e044      	b.n	801a568 <USB_EPStartXfer+0xa04>
 801a4de:	1d7b      	adds	r3, r7, #5
 801a4e0:	33ff      	adds	r3, #255	@ 0xff
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	085b      	lsrs	r3, r3, #1
 801a4e6:	21ec      	movs	r1, #236	@ 0xec
 801a4e8:	187a      	adds	r2, r7, r1
 801a4ea:	6013      	str	r3, [r2, #0]
 801a4ec:	1d7b      	adds	r3, r7, #5
 801a4ee:	33ff      	adds	r3, #255	@ 0xff
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	2201      	movs	r2, #1
 801a4f4:	4013      	ands	r3, r2
 801a4f6:	d004      	beq.n	801a502 <USB_EPStartXfer+0x99e>
 801a4f8:	187b      	adds	r3, r7, r1
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	187a      	adds	r2, r7, r1
 801a500:	6013      	str	r3, [r2, #0]
 801a502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a504:	881b      	ldrh	r3, [r3, #0]
 801a506:	b29a      	uxth	r2, r3
 801a508:	23ec      	movs	r3, #236	@ 0xec
 801a50a:	18fb      	adds	r3, r7, r3
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	b29b      	uxth	r3, r3
 801a510:	029b      	lsls	r3, r3, #10
 801a512:	b29b      	uxth	r3, r3
 801a514:	4313      	orrs	r3, r2
 801a516:	b29a      	uxth	r2, r3
 801a518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a51a:	801a      	strh	r2, [r3, #0]
 801a51c:	e024      	b.n	801a568 <USB_EPStartXfer+0xa04>
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	785b      	ldrb	r3, [r3, #1]
 801a522:	2b01      	cmp	r3, #1
 801a524:	d120      	bne.n	801a568 <USB_EPStartXfer+0xa04>
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	2184      	movs	r1, #132	@ 0x84
 801a52a:	187a      	adds	r2, r7, r1
 801a52c:	6013      	str	r3, [r2, #0]
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2250      	movs	r2, #80	@ 0x50
 801a532:	5a9b      	ldrh	r3, [r3, r2]
 801a534:	b29b      	uxth	r3, r3
 801a536:	001a      	movs	r2, r3
 801a538:	187b      	adds	r3, r7, r1
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	189b      	adds	r3, r3, r2
 801a53e:	187a      	adds	r2, r7, r1
 801a540:	6013      	str	r3, [r2, #0]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	00da      	lsls	r2, r3, #3
 801a548:	187b      	adds	r3, r7, r1
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	18d3      	adds	r3, r2, r3
 801a54e:	4a30      	ldr	r2, [pc, #192]	@ (801a610 <USB_EPStartXfer+0xaac>)
 801a550:	4694      	mov	ip, r2
 801a552:	4463      	add	r3, ip
 801a554:	2180      	movs	r1, #128	@ 0x80
 801a556:	187a      	adds	r2, r7, r1
 801a558:	6013      	str	r3, [r2, #0]
 801a55a:	1d7b      	adds	r3, r7, #5
 801a55c:	33ff      	adds	r3, #255	@ 0xff
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	b29a      	uxth	r2, r3
 801a562:	187b      	adds	r3, r7, r1
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a568:	2076      	movs	r0, #118	@ 0x76
 801a56a:	183b      	adds	r3, r7, r0
 801a56c:	683a      	ldr	r2, [r7, #0]
 801a56e:	8912      	ldrh	r2, [r2, #8]
 801a570:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	6959      	ldr	r1, [r3, #20]
 801a576:	1d7b      	adds	r3, r7, #5
 801a578:	33ff      	adds	r3, #255	@ 0xff
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	b29c      	uxth	r4, r3
 801a57e:	183b      	adds	r3, r7, r0
 801a580:	881a      	ldrh	r2, [r3, #0]
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	0023      	movs	r3, r4
 801a586:	f000 fd5f 	bl	801b048 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	683b      	ldr	r3, [r7, #0]
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	009b      	lsls	r3, r3, #2
 801a592:	18d3      	adds	r3, r2, r3
 801a594:	881b      	ldrh	r3, [r3, #0]
 801a596:	b29a      	uxth	r2, r3
 801a598:	200a      	movs	r0, #10
 801a59a:	183b      	adds	r3, r7, r0
 801a59c:	491d      	ldr	r1, [pc, #116]	@ (801a614 <USB_EPStartXfer+0xab0>)
 801a59e:	400a      	ands	r2, r1
 801a5a0:	801a      	strh	r2, [r3, #0]
 801a5a2:	183b      	adds	r3, r7, r0
 801a5a4:	183a      	adds	r2, r7, r0
 801a5a6:	8812      	ldrh	r2, [r2, #0]
 801a5a8:	2110      	movs	r1, #16
 801a5aa:	404a      	eors	r2, r1
 801a5ac:	801a      	strh	r2, [r3, #0]
 801a5ae:	183b      	adds	r3, r7, r0
 801a5b0:	183a      	adds	r2, r7, r0
 801a5b2:	8812      	ldrh	r2, [r2, #0]
 801a5b4:	2120      	movs	r1, #32
 801a5b6:	404a      	eors	r2, r1
 801a5b8:	801a      	strh	r2, [r3, #0]
 801a5ba:	687a      	ldr	r2, [r7, #4]
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	781b      	ldrb	r3, [r3, #0]
 801a5c0:	009b      	lsls	r3, r3, #2
 801a5c2:	18d3      	adds	r3, r2, r3
 801a5c4:	183a      	adds	r2, r7, r0
 801a5c6:	8812      	ldrh	r2, [r2, #0]
 801a5c8:	4913      	ldr	r1, [pc, #76]	@ (801a618 <USB_EPStartXfer+0xab4>)
 801a5ca:	430a      	orrs	r2, r1
 801a5cc:	b292      	uxth	r2, r2
 801a5ce:	801a      	strh	r2, [r3, #0]
 801a5d0:	f000 fbf4 	bl	801adbc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a5d4:	683b      	ldr	r3, [r7, #0]
 801a5d6:	7b1b      	ldrb	r3, [r3, #12]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d000      	beq.n	801a5de <USB_EPStartXfer+0xa7a>
 801a5dc:	e0a9      	b.n	801a732 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	699a      	ldr	r2, [r3, #24]
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	691b      	ldr	r3, [r3, #16]
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d918      	bls.n	801a61c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	691b      	ldr	r3, [r3, #16]
 801a5ee:	1d7a      	adds	r2, r7, #5
 801a5f0:	32ff      	adds	r2, #255	@ 0xff
 801a5f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	699a      	ldr	r2, [r3, #24]
 801a5f8:	1d7b      	adds	r3, r7, #5
 801a5fa:	33ff      	adds	r3, #255	@ 0xff
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	1ad2      	subs	r2, r2, r3
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	619a      	str	r2, [r3, #24]
 801a604:	e012      	b.n	801a62c <USB_EPStartXfer+0xac8>
 801a606:	46c0      	nop			@ (mov r8, r8)
 801a608:	00000406 	.word	0x00000406
 801a60c:	ffff8000 	.word	0xffff8000
 801a610:	00000402 	.word	0x00000402
 801a614:	ffff8fbf 	.word	0xffff8fbf
 801a618:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a61c:	683b      	ldr	r3, [r7, #0]
 801a61e:	699b      	ldr	r3, [r3, #24]
 801a620:	1d7a      	adds	r2, r7, #5
 801a622:	32ff      	adds	r2, #255	@ 0xff
 801a624:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	2200      	movs	r2, #0
 801a62a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	2190      	movs	r1, #144	@ 0x90
 801a630:	187a      	adds	r2, r7, r1
 801a632:	6013      	str	r3, [r2, #0]
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	2250      	movs	r2, #80	@ 0x50
 801a638:	5a9b      	ldrh	r3, [r3, r2]
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	001a      	movs	r2, r3
 801a63e:	187b      	adds	r3, r7, r1
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	189b      	adds	r3, r3, r2
 801a644:	187a      	adds	r2, r7, r1
 801a646:	6013      	str	r3, [r2, #0]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	00da      	lsls	r2, r3, #3
 801a64e:	187b      	adds	r3, r7, r1
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	18d3      	adds	r3, r2, r3
 801a654:	4acf      	ldr	r2, [pc, #828]	@ (801a994 <USB_EPStartXfer+0xe30>)
 801a656:	4694      	mov	ip, r2
 801a658:	4463      	add	r3, ip
 801a65a:	218c      	movs	r1, #140	@ 0x8c
 801a65c:	187a      	adds	r2, r7, r1
 801a65e:	6013      	str	r3, [r2, #0]
 801a660:	187b      	adds	r3, r7, r1
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	881b      	ldrh	r3, [r3, #0]
 801a666:	b29b      	uxth	r3, r3
 801a668:	059b      	lsls	r3, r3, #22
 801a66a:	0d9b      	lsrs	r3, r3, #22
 801a66c:	b29a      	uxth	r2, r3
 801a66e:	187b      	adds	r3, r7, r1
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	801a      	strh	r2, [r3, #0]
 801a674:	1d7b      	adds	r3, r7, #5
 801a676:	33ff      	adds	r3, #255	@ 0xff
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a67c:	d925      	bls.n	801a6ca <USB_EPStartXfer+0xb66>
 801a67e:	1d7b      	adds	r3, r7, #5
 801a680:	33ff      	adds	r3, #255	@ 0xff
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	095b      	lsrs	r3, r3, #5
 801a686:	21e8      	movs	r1, #232	@ 0xe8
 801a688:	187a      	adds	r2, r7, r1
 801a68a:	6013      	str	r3, [r2, #0]
 801a68c:	1d7b      	adds	r3, r7, #5
 801a68e:	33ff      	adds	r3, #255	@ 0xff
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	221f      	movs	r2, #31
 801a694:	4013      	ands	r3, r2
 801a696:	d104      	bne.n	801a6a2 <USB_EPStartXfer+0xb3e>
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	3b01      	subs	r3, #1
 801a69e:	187a      	adds	r2, r7, r1
 801a6a0:	6013      	str	r3, [r2, #0]
 801a6a2:	218c      	movs	r1, #140	@ 0x8c
 801a6a4:	187b      	adds	r3, r7, r1
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	881b      	ldrh	r3, [r3, #0]
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	23e8      	movs	r3, #232	@ 0xe8
 801a6ae:	18fb      	adds	r3, r7, r3
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	b29b      	uxth	r3, r3
 801a6b4:	029b      	lsls	r3, r3, #10
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	4313      	orrs	r3, r2
 801a6ba:	b29b      	uxth	r3, r3
 801a6bc:	4ab6      	ldr	r2, [pc, #728]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a6be:	4313      	orrs	r3, r2
 801a6c0:	b29a      	uxth	r2, r3
 801a6c2:	187b      	adds	r3, r7, r1
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	801a      	strh	r2, [r3, #0]
 801a6c8:	e353      	b.n	801ad72 <USB_EPStartXfer+0x120e>
 801a6ca:	1d7b      	adds	r3, r7, #5
 801a6cc:	33ff      	adds	r3, #255	@ 0xff
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d10b      	bne.n	801a6ec <USB_EPStartXfer+0xb88>
 801a6d4:	218c      	movs	r1, #140	@ 0x8c
 801a6d6:	187b      	adds	r3, r7, r1
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	881b      	ldrh	r3, [r3, #0]
 801a6dc:	b29b      	uxth	r3, r3
 801a6de:	4aae      	ldr	r2, [pc, #696]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a6e0:	4313      	orrs	r3, r2
 801a6e2:	b29a      	uxth	r2, r3
 801a6e4:	187b      	adds	r3, r7, r1
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	801a      	strh	r2, [r3, #0]
 801a6ea:	e342      	b.n	801ad72 <USB_EPStartXfer+0x120e>
 801a6ec:	1d7b      	adds	r3, r7, #5
 801a6ee:	33ff      	adds	r3, #255	@ 0xff
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	085b      	lsrs	r3, r3, #1
 801a6f4:	21e8      	movs	r1, #232	@ 0xe8
 801a6f6:	187a      	adds	r2, r7, r1
 801a6f8:	6013      	str	r3, [r2, #0]
 801a6fa:	1d7b      	adds	r3, r7, #5
 801a6fc:	33ff      	adds	r3, #255	@ 0xff
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	2201      	movs	r2, #1
 801a702:	4013      	ands	r3, r2
 801a704:	d004      	beq.n	801a710 <USB_EPStartXfer+0xbac>
 801a706:	187b      	adds	r3, r7, r1
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	3301      	adds	r3, #1
 801a70c:	187a      	adds	r2, r7, r1
 801a70e:	6013      	str	r3, [r2, #0]
 801a710:	218c      	movs	r1, #140	@ 0x8c
 801a712:	187b      	adds	r3, r7, r1
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	881b      	ldrh	r3, [r3, #0]
 801a718:	b29a      	uxth	r2, r3
 801a71a:	23e8      	movs	r3, #232	@ 0xe8
 801a71c:	18fb      	adds	r3, r7, r3
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	b29b      	uxth	r3, r3
 801a722:	029b      	lsls	r3, r3, #10
 801a724:	b29b      	uxth	r3, r3
 801a726:	4313      	orrs	r3, r2
 801a728:	b29a      	uxth	r2, r3
 801a72a:	187b      	adds	r3, r7, r1
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	801a      	strh	r2, [r3, #0]
 801a730:	e31f      	b.n	801ad72 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	78db      	ldrb	r3, [r3, #3]
 801a736:	2b02      	cmp	r3, #2
 801a738:	d000      	beq.n	801a73c <USB_EPStartXfer+0xbd8>
 801a73a:	e191      	b.n	801aa60 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	785b      	ldrb	r3, [r3, #1]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d000      	beq.n	801a746 <USB_EPStartXfer+0xbe2>
 801a744:	e07c      	b.n	801a840 <USB_EPStartXfer+0xcdc>
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	21ac      	movs	r1, #172	@ 0xac
 801a74a:	187a      	adds	r2, r7, r1
 801a74c:	6013      	str	r3, [r2, #0]
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2250      	movs	r2, #80	@ 0x50
 801a752:	5a9b      	ldrh	r3, [r3, r2]
 801a754:	b29b      	uxth	r3, r3
 801a756:	001a      	movs	r2, r3
 801a758:	187b      	adds	r3, r7, r1
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	189b      	adds	r3, r3, r2
 801a75e:	187a      	adds	r2, r7, r1
 801a760:	6013      	str	r3, [r2, #0]
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	781b      	ldrb	r3, [r3, #0]
 801a766:	00da      	lsls	r2, r3, #3
 801a768:	187b      	adds	r3, r7, r1
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	18d3      	adds	r3, r2, r3
 801a76e:	4a8b      	ldr	r2, [pc, #556]	@ (801a99c <USB_EPStartXfer+0xe38>)
 801a770:	4694      	mov	ip, r2
 801a772:	4463      	add	r3, ip
 801a774:	21a8      	movs	r1, #168	@ 0xa8
 801a776:	187a      	adds	r2, r7, r1
 801a778:	6013      	str	r3, [r2, #0]
 801a77a:	187b      	adds	r3, r7, r1
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	881b      	ldrh	r3, [r3, #0]
 801a780:	b29b      	uxth	r3, r3
 801a782:	059b      	lsls	r3, r3, #22
 801a784:	0d9b      	lsrs	r3, r3, #22
 801a786:	b29a      	uxth	r2, r3
 801a788:	187b      	adds	r3, r7, r1
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	801a      	strh	r2, [r3, #0]
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	691b      	ldr	r3, [r3, #16]
 801a792:	2b3e      	cmp	r3, #62	@ 0x3e
 801a794:	d923      	bls.n	801a7de <USB_EPStartXfer+0xc7a>
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	691b      	ldr	r3, [r3, #16]
 801a79a:	095b      	lsrs	r3, r3, #5
 801a79c:	21e4      	movs	r1, #228	@ 0xe4
 801a79e:	187a      	adds	r2, r7, r1
 801a7a0:	6013      	str	r3, [r2, #0]
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	691b      	ldr	r3, [r3, #16]
 801a7a6:	221f      	movs	r2, #31
 801a7a8:	4013      	ands	r3, r2
 801a7aa:	d104      	bne.n	801a7b6 <USB_EPStartXfer+0xc52>
 801a7ac:	187b      	adds	r3, r7, r1
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	3b01      	subs	r3, #1
 801a7b2:	187a      	adds	r2, r7, r1
 801a7b4:	6013      	str	r3, [r2, #0]
 801a7b6:	21a8      	movs	r1, #168	@ 0xa8
 801a7b8:	187b      	adds	r3, r7, r1
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	881b      	ldrh	r3, [r3, #0]
 801a7be:	b29a      	uxth	r2, r3
 801a7c0:	23e4      	movs	r3, #228	@ 0xe4
 801a7c2:	18fb      	adds	r3, r7, r3
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	b29b      	uxth	r3, r3
 801a7c8:	029b      	lsls	r3, r3, #10
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	4313      	orrs	r3, r2
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	4a71      	ldr	r2, [pc, #452]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a7d2:	4313      	orrs	r3, r2
 801a7d4:	b29a      	uxth	r2, r3
 801a7d6:	187b      	adds	r3, r7, r1
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	801a      	strh	r2, [r3, #0]
 801a7dc:	e054      	b.n	801a888 <USB_EPStartXfer+0xd24>
 801a7de:	683b      	ldr	r3, [r7, #0]
 801a7e0:	691b      	ldr	r3, [r3, #16]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d10b      	bne.n	801a7fe <USB_EPStartXfer+0xc9a>
 801a7e6:	21a8      	movs	r1, #168	@ 0xa8
 801a7e8:	187b      	adds	r3, r7, r1
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	881b      	ldrh	r3, [r3, #0]
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	4a69      	ldr	r2, [pc, #420]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a7f2:	4313      	orrs	r3, r2
 801a7f4:	b29a      	uxth	r2, r3
 801a7f6:	187b      	adds	r3, r7, r1
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	801a      	strh	r2, [r3, #0]
 801a7fc:	e044      	b.n	801a888 <USB_EPStartXfer+0xd24>
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	691b      	ldr	r3, [r3, #16]
 801a802:	085b      	lsrs	r3, r3, #1
 801a804:	21e4      	movs	r1, #228	@ 0xe4
 801a806:	187a      	adds	r2, r7, r1
 801a808:	6013      	str	r3, [r2, #0]
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	691b      	ldr	r3, [r3, #16]
 801a80e:	2201      	movs	r2, #1
 801a810:	4013      	ands	r3, r2
 801a812:	d004      	beq.n	801a81e <USB_EPStartXfer+0xcba>
 801a814:	187b      	adds	r3, r7, r1
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	3301      	adds	r3, #1
 801a81a:	187a      	adds	r2, r7, r1
 801a81c:	6013      	str	r3, [r2, #0]
 801a81e:	21a8      	movs	r1, #168	@ 0xa8
 801a820:	187b      	adds	r3, r7, r1
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	881b      	ldrh	r3, [r3, #0]
 801a826:	b29a      	uxth	r2, r3
 801a828:	23e4      	movs	r3, #228	@ 0xe4
 801a82a:	18fb      	adds	r3, r7, r3
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	b29b      	uxth	r3, r3
 801a830:	029b      	lsls	r3, r3, #10
 801a832:	b29b      	uxth	r3, r3
 801a834:	4313      	orrs	r3, r2
 801a836:	b29a      	uxth	r2, r3
 801a838:	187b      	adds	r3, r7, r1
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	801a      	strh	r2, [r3, #0]
 801a83e:	e023      	b.n	801a888 <USB_EPStartXfer+0xd24>
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	785b      	ldrb	r3, [r3, #1]
 801a844:	2b01      	cmp	r3, #1
 801a846:	d11f      	bne.n	801a888 <USB_EPStartXfer+0xd24>
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	21b4      	movs	r1, #180	@ 0xb4
 801a84c:	187a      	adds	r2, r7, r1
 801a84e:	6013      	str	r3, [r2, #0]
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	2250      	movs	r2, #80	@ 0x50
 801a854:	5a9b      	ldrh	r3, [r3, r2]
 801a856:	b29b      	uxth	r3, r3
 801a858:	001a      	movs	r2, r3
 801a85a:	187b      	adds	r3, r7, r1
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	189b      	adds	r3, r3, r2
 801a860:	187a      	adds	r2, r7, r1
 801a862:	6013      	str	r3, [r2, #0]
 801a864:	683b      	ldr	r3, [r7, #0]
 801a866:	781b      	ldrb	r3, [r3, #0]
 801a868:	00da      	lsls	r2, r3, #3
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	18d3      	adds	r3, r2, r3
 801a870:	4a4a      	ldr	r2, [pc, #296]	@ (801a99c <USB_EPStartXfer+0xe38>)
 801a872:	4694      	mov	ip, r2
 801a874:	4463      	add	r3, ip
 801a876:	21b0      	movs	r1, #176	@ 0xb0
 801a878:	187a      	adds	r2, r7, r1
 801a87a:	6013      	str	r3, [r2, #0]
 801a87c:	683b      	ldr	r3, [r7, #0]
 801a87e:	691b      	ldr	r3, [r3, #16]
 801a880:	b29a      	uxth	r2, r3
 801a882:	187b      	adds	r3, r7, r1
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	801a      	strh	r2, [r3, #0]
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	22a4      	movs	r2, #164	@ 0xa4
 801a88c:	18ba      	adds	r2, r7, r2
 801a88e:	6013      	str	r3, [r2, #0]
 801a890:	683b      	ldr	r3, [r7, #0]
 801a892:	785b      	ldrb	r3, [r3, #1]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d000      	beq.n	801a89a <USB_EPStartXfer+0xd36>
 801a898:	e082      	b.n	801a9a0 <USB_EPStartXfer+0xe3c>
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	219c      	movs	r1, #156	@ 0x9c
 801a89e:	187a      	adds	r2, r7, r1
 801a8a0:	6013      	str	r3, [r2, #0]
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	2250      	movs	r2, #80	@ 0x50
 801a8a6:	5a9b      	ldrh	r3, [r3, r2]
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	001a      	movs	r2, r3
 801a8ac:	187b      	adds	r3, r7, r1
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	189b      	adds	r3, r3, r2
 801a8b2:	187a      	adds	r2, r7, r1
 801a8b4:	6013      	str	r3, [r2, #0]
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	00da      	lsls	r2, r3, #3
 801a8bc:	187b      	adds	r3, r7, r1
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	18d3      	adds	r3, r2, r3
 801a8c2:	4a34      	ldr	r2, [pc, #208]	@ (801a994 <USB_EPStartXfer+0xe30>)
 801a8c4:	4694      	mov	ip, r2
 801a8c6:	4463      	add	r3, ip
 801a8c8:	2198      	movs	r1, #152	@ 0x98
 801a8ca:	187a      	adds	r2, r7, r1
 801a8cc:	6013      	str	r3, [r2, #0]
 801a8ce:	187b      	adds	r3, r7, r1
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	881b      	ldrh	r3, [r3, #0]
 801a8d4:	b29b      	uxth	r3, r3
 801a8d6:	059b      	lsls	r3, r3, #22
 801a8d8:	0d9b      	lsrs	r3, r3, #22
 801a8da:	b29a      	uxth	r2, r3
 801a8dc:	187b      	adds	r3, r7, r1
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	801a      	strh	r2, [r3, #0]
 801a8e2:	683b      	ldr	r3, [r7, #0]
 801a8e4:	691b      	ldr	r3, [r3, #16]
 801a8e6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8e8:	d923      	bls.n	801a932 <USB_EPStartXfer+0xdce>
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	691b      	ldr	r3, [r3, #16]
 801a8ee:	095b      	lsrs	r3, r3, #5
 801a8f0:	21e0      	movs	r1, #224	@ 0xe0
 801a8f2:	187a      	adds	r2, r7, r1
 801a8f4:	6013      	str	r3, [r2, #0]
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	691b      	ldr	r3, [r3, #16]
 801a8fa:	221f      	movs	r2, #31
 801a8fc:	4013      	ands	r3, r2
 801a8fe:	d104      	bne.n	801a90a <USB_EPStartXfer+0xda6>
 801a900:	187b      	adds	r3, r7, r1
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	3b01      	subs	r3, #1
 801a906:	187a      	adds	r2, r7, r1
 801a908:	6013      	str	r3, [r2, #0]
 801a90a:	2198      	movs	r1, #152	@ 0x98
 801a90c:	187b      	adds	r3, r7, r1
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	881b      	ldrh	r3, [r3, #0]
 801a912:	b29a      	uxth	r2, r3
 801a914:	23e0      	movs	r3, #224	@ 0xe0
 801a916:	18fb      	adds	r3, r7, r3
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	029b      	lsls	r3, r3, #10
 801a91e:	b29b      	uxth	r3, r3
 801a920:	4313      	orrs	r3, r2
 801a922:	b29b      	uxth	r3, r3
 801a924:	4a1c      	ldr	r2, [pc, #112]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a926:	4313      	orrs	r3, r2
 801a928:	b29a      	uxth	r2, r3
 801a92a:	187b      	adds	r3, r7, r1
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	801a      	strh	r2, [r3, #0]
 801a930:	e057      	b.n	801a9e2 <USB_EPStartXfer+0xe7e>
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	691b      	ldr	r3, [r3, #16]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d10b      	bne.n	801a952 <USB_EPStartXfer+0xdee>
 801a93a:	2198      	movs	r1, #152	@ 0x98
 801a93c:	187b      	adds	r3, r7, r1
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	881b      	ldrh	r3, [r3, #0]
 801a942:	b29b      	uxth	r3, r3
 801a944:	4a14      	ldr	r2, [pc, #80]	@ (801a998 <USB_EPStartXfer+0xe34>)
 801a946:	4313      	orrs	r3, r2
 801a948:	b29a      	uxth	r2, r3
 801a94a:	187b      	adds	r3, r7, r1
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	801a      	strh	r2, [r3, #0]
 801a950:	e047      	b.n	801a9e2 <USB_EPStartXfer+0xe7e>
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	691b      	ldr	r3, [r3, #16]
 801a956:	085b      	lsrs	r3, r3, #1
 801a958:	21e0      	movs	r1, #224	@ 0xe0
 801a95a:	187a      	adds	r2, r7, r1
 801a95c:	6013      	str	r3, [r2, #0]
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	691b      	ldr	r3, [r3, #16]
 801a962:	2201      	movs	r2, #1
 801a964:	4013      	ands	r3, r2
 801a966:	d004      	beq.n	801a972 <USB_EPStartXfer+0xe0e>
 801a968:	187b      	adds	r3, r7, r1
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	3301      	adds	r3, #1
 801a96e:	187a      	adds	r2, r7, r1
 801a970:	6013      	str	r3, [r2, #0]
 801a972:	2198      	movs	r1, #152	@ 0x98
 801a974:	187b      	adds	r3, r7, r1
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	881b      	ldrh	r3, [r3, #0]
 801a97a:	b29a      	uxth	r2, r3
 801a97c:	23e0      	movs	r3, #224	@ 0xe0
 801a97e:	18fb      	adds	r3, r7, r3
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	b29b      	uxth	r3, r3
 801a984:	029b      	lsls	r3, r3, #10
 801a986:	b29b      	uxth	r3, r3
 801a988:	4313      	orrs	r3, r2
 801a98a:	b29a      	uxth	r2, r3
 801a98c:	187b      	adds	r3, r7, r1
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	801a      	strh	r2, [r3, #0]
 801a992:	e026      	b.n	801a9e2 <USB_EPStartXfer+0xe7e>
 801a994:	00000406 	.word	0x00000406
 801a998:	ffff8000 	.word	0xffff8000
 801a99c:	00000402 	.word	0x00000402
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	785b      	ldrb	r3, [r3, #1]
 801a9a4:	2b01      	cmp	r3, #1
 801a9a6:	d11c      	bne.n	801a9e2 <USB_EPStartXfer+0xe7e>
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2250      	movs	r2, #80	@ 0x50
 801a9ac:	5a9b      	ldrh	r3, [r3, r2]
 801a9ae:	b29b      	uxth	r3, r3
 801a9b0:	001a      	movs	r2, r3
 801a9b2:	21a4      	movs	r1, #164	@ 0xa4
 801a9b4:	187b      	adds	r3, r7, r1
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	189b      	adds	r3, r3, r2
 801a9ba:	187a      	adds	r2, r7, r1
 801a9bc:	6013      	str	r3, [r2, #0]
 801a9be:	683b      	ldr	r3, [r7, #0]
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	00da      	lsls	r2, r3, #3
 801a9c4:	187b      	adds	r3, r7, r1
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	18d3      	adds	r3, r2, r3
 801a9ca:	4ad2      	ldr	r2, [pc, #840]	@ (801ad14 <USB_EPStartXfer+0x11b0>)
 801a9cc:	4694      	mov	ip, r2
 801a9ce:	4463      	add	r3, ip
 801a9d0:	21a0      	movs	r1, #160	@ 0xa0
 801a9d2:	187a      	adds	r2, r7, r1
 801a9d4:	6013      	str	r3, [r2, #0]
 801a9d6:	683b      	ldr	r3, [r7, #0]
 801a9d8:	691b      	ldr	r3, [r3, #16]
 801a9da:	b29a      	uxth	r2, r3
 801a9dc:	187b      	adds	r3, r7, r1
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	69db      	ldr	r3, [r3, #28]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d100      	bne.n	801a9ec <USB_EPStartXfer+0xe88>
 801a9ea:	e1c2      	b.n	801ad72 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a9ec:	687a      	ldr	r2, [r7, #4]
 801a9ee:	683b      	ldr	r3, [r7, #0]
 801a9f0:	781b      	ldrb	r3, [r3, #0]
 801a9f2:	009b      	lsls	r3, r3, #2
 801a9f4:	18d2      	adds	r2, r2, r3
 801a9f6:	2196      	movs	r1, #150	@ 0x96
 801a9f8:	187b      	adds	r3, r7, r1
 801a9fa:	8812      	ldrh	r2, [r2, #0]
 801a9fc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a9fe:	187b      	adds	r3, r7, r1
 801aa00:	881a      	ldrh	r2, [r3, #0]
 801aa02:	2380      	movs	r3, #128	@ 0x80
 801aa04:	01db      	lsls	r3, r3, #7
 801aa06:	4013      	ands	r3, r2
 801aa08:	d004      	beq.n	801aa14 <USB_EPStartXfer+0xeb0>
 801aa0a:	187b      	adds	r3, r7, r1
 801aa0c:	881b      	ldrh	r3, [r3, #0]
 801aa0e:	2240      	movs	r2, #64	@ 0x40
 801aa10:	4013      	ands	r3, r2
 801aa12:	d10d      	bne.n	801aa30 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801aa14:	2196      	movs	r1, #150	@ 0x96
 801aa16:	187b      	adds	r3, r7, r1
 801aa18:	881a      	ldrh	r2, [r3, #0]
 801aa1a:	2380      	movs	r3, #128	@ 0x80
 801aa1c:	01db      	lsls	r3, r3, #7
 801aa1e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801aa20:	d000      	beq.n	801aa24 <USB_EPStartXfer+0xec0>
 801aa22:	e1a6      	b.n	801ad72 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801aa24:	187b      	adds	r3, r7, r1
 801aa26:	881b      	ldrh	r3, [r3, #0]
 801aa28:	2240      	movs	r2, #64	@ 0x40
 801aa2a:	4013      	ands	r3, r2
 801aa2c:	d000      	beq.n	801aa30 <USB_EPStartXfer+0xecc>
 801aa2e:	e1a0      	b.n	801ad72 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801aa30:	687a      	ldr	r2, [r7, #4]
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	009b      	lsls	r3, r3, #2
 801aa38:	18d3      	adds	r3, r2, r3
 801aa3a:	881b      	ldrh	r3, [r3, #0]
 801aa3c:	b29a      	uxth	r2, r3
 801aa3e:	2094      	movs	r0, #148	@ 0x94
 801aa40:	183b      	adds	r3, r7, r0
 801aa42:	49b5      	ldr	r1, [pc, #724]	@ (801ad18 <USB_EPStartXfer+0x11b4>)
 801aa44:	400a      	ands	r2, r1
 801aa46:	801a      	strh	r2, [r3, #0]
 801aa48:	687a      	ldr	r2, [r7, #4]
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	781b      	ldrb	r3, [r3, #0]
 801aa4e:	009b      	lsls	r3, r3, #2
 801aa50:	18d3      	adds	r3, r2, r3
 801aa52:	183a      	adds	r2, r7, r0
 801aa54:	8812      	ldrh	r2, [r2, #0]
 801aa56:	49b1      	ldr	r1, [pc, #708]	@ (801ad1c <USB_EPStartXfer+0x11b8>)
 801aa58:	430a      	orrs	r2, r1
 801aa5a:	b292      	uxth	r2, r2
 801aa5c:	801a      	strh	r2, [r3, #0]
 801aa5e:	e188      	b.n	801ad72 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	78db      	ldrb	r3, [r3, #3]
 801aa64:	2b01      	cmp	r3, #1
 801aa66:	d000      	beq.n	801aa6a <USB_EPStartXfer+0xf06>
 801aa68:	e181      	b.n	801ad6e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	699a      	ldr	r2, [r3, #24]
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	691b      	ldr	r3, [r3, #16]
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d90d      	bls.n	801aa92 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	691b      	ldr	r3, [r3, #16]
 801aa7a:	1d7a      	adds	r2, r7, #5
 801aa7c:	32ff      	adds	r2, #255	@ 0xff
 801aa7e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	699a      	ldr	r2, [r3, #24]
 801aa84:	1d7b      	adds	r3, r7, #5
 801aa86:	33ff      	adds	r3, #255	@ 0xff
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	1ad2      	subs	r2, r2, r3
 801aa8c:	683b      	ldr	r3, [r7, #0]
 801aa8e:	619a      	str	r2, [r3, #24]
 801aa90:	e007      	b.n	801aaa2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801aa92:	683b      	ldr	r3, [r7, #0]
 801aa94:	699b      	ldr	r3, [r3, #24]
 801aa96:	1d7a      	adds	r2, r7, #5
 801aa98:	32ff      	adds	r2, #255	@ 0xff
 801aa9a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	785b      	ldrb	r3, [r3, #1]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d000      	beq.n	801aaac <USB_EPStartXfer+0xf48>
 801aaaa:	e082      	b.n	801abb2 <USB_EPStartXfer+0x104e>
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	21cc      	movs	r1, #204	@ 0xcc
 801aab0:	187a      	adds	r2, r7, r1
 801aab2:	6013      	str	r3, [r2, #0]
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	2250      	movs	r2, #80	@ 0x50
 801aab8:	5a9b      	ldrh	r3, [r3, r2]
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	001a      	movs	r2, r3
 801aabe:	187b      	adds	r3, r7, r1
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	189b      	adds	r3, r3, r2
 801aac4:	187a      	adds	r2, r7, r1
 801aac6:	6013      	str	r3, [r2, #0]
 801aac8:	683b      	ldr	r3, [r7, #0]
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	00da      	lsls	r2, r3, #3
 801aace:	187b      	adds	r3, r7, r1
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	18d3      	adds	r3, r2, r3
 801aad4:	4a92      	ldr	r2, [pc, #584]	@ (801ad20 <USB_EPStartXfer+0x11bc>)
 801aad6:	4694      	mov	ip, r2
 801aad8:	4463      	add	r3, ip
 801aada:	21c8      	movs	r1, #200	@ 0xc8
 801aadc:	187a      	adds	r2, r7, r1
 801aade:	6013      	str	r3, [r2, #0]
 801aae0:	187b      	adds	r3, r7, r1
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	881b      	ldrh	r3, [r3, #0]
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	059b      	lsls	r3, r3, #22
 801aaea:	0d9b      	lsrs	r3, r3, #22
 801aaec:	b29a      	uxth	r2, r3
 801aaee:	187b      	adds	r3, r7, r1
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	801a      	strh	r2, [r3, #0]
 801aaf4:	1d7b      	adds	r3, r7, #5
 801aaf6:	33ff      	adds	r3, #255	@ 0xff
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	2b3e      	cmp	r3, #62	@ 0x3e
 801aafc:	d925      	bls.n	801ab4a <USB_EPStartXfer+0xfe6>
 801aafe:	1d7b      	adds	r3, r7, #5
 801ab00:	33ff      	adds	r3, #255	@ 0xff
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	095b      	lsrs	r3, r3, #5
 801ab06:	21dc      	movs	r1, #220	@ 0xdc
 801ab08:	187a      	adds	r2, r7, r1
 801ab0a:	6013      	str	r3, [r2, #0]
 801ab0c:	1d7b      	adds	r3, r7, #5
 801ab0e:	33ff      	adds	r3, #255	@ 0xff
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	221f      	movs	r2, #31
 801ab14:	4013      	ands	r3, r2
 801ab16:	d104      	bne.n	801ab22 <USB_EPStartXfer+0xfbe>
 801ab18:	187b      	adds	r3, r7, r1
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	3b01      	subs	r3, #1
 801ab1e:	187a      	adds	r2, r7, r1
 801ab20:	6013      	str	r3, [r2, #0]
 801ab22:	21c8      	movs	r1, #200	@ 0xc8
 801ab24:	187b      	adds	r3, r7, r1
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	881b      	ldrh	r3, [r3, #0]
 801ab2a:	b29a      	uxth	r2, r3
 801ab2c:	23dc      	movs	r3, #220	@ 0xdc
 801ab2e:	18fb      	adds	r3, r7, r3
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	b29b      	uxth	r3, r3
 801ab34:	029b      	lsls	r3, r3, #10
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	4313      	orrs	r3, r2
 801ab3a:	b29b      	uxth	r3, r3
 801ab3c:	4a79      	ldr	r2, [pc, #484]	@ (801ad24 <USB_EPStartXfer+0x11c0>)
 801ab3e:	4313      	orrs	r3, r2
 801ab40:	b29a      	uxth	r2, r3
 801ab42:	187b      	adds	r3, r7, r1
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	801a      	strh	r2, [r3, #0]
 801ab48:	e058      	b.n	801abfc <USB_EPStartXfer+0x1098>
 801ab4a:	1d7b      	adds	r3, r7, #5
 801ab4c:	33ff      	adds	r3, #255	@ 0xff
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d10b      	bne.n	801ab6c <USB_EPStartXfer+0x1008>
 801ab54:	21c8      	movs	r1, #200	@ 0xc8
 801ab56:	187b      	adds	r3, r7, r1
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	881b      	ldrh	r3, [r3, #0]
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	4a71      	ldr	r2, [pc, #452]	@ (801ad24 <USB_EPStartXfer+0x11c0>)
 801ab60:	4313      	orrs	r3, r2
 801ab62:	b29a      	uxth	r2, r3
 801ab64:	187b      	adds	r3, r7, r1
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	801a      	strh	r2, [r3, #0]
 801ab6a:	e047      	b.n	801abfc <USB_EPStartXfer+0x1098>
 801ab6c:	1d7b      	adds	r3, r7, #5
 801ab6e:	33ff      	adds	r3, #255	@ 0xff
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	085b      	lsrs	r3, r3, #1
 801ab74:	21dc      	movs	r1, #220	@ 0xdc
 801ab76:	187a      	adds	r2, r7, r1
 801ab78:	6013      	str	r3, [r2, #0]
 801ab7a:	1d7b      	adds	r3, r7, #5
 801ab7c:	33ff      	adds	r3, #255	@ 0xff
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	2201      	movs	r2, #1
 801ab82:	4013      	ands	r3, r2
 801ab84:	d004      	beq.n	801ab90 <USB_EPStartXfer+0x102c>
 801ab86:	187b      	adds	r3, r7, r1
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	187a      	adds	r2, r7, r1
 801ab8e:	6013      	str	r3, [r2, #0]
 801ab90:	21c8      	movs	r1, #200	@ 0xc8
 801ab92:	187b      	adds	r3, r7, r1
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	881b      	ldrh	r3, [r3, #0]
 801ab98:	b29a      	uxth	r2, r3
 801ab9a:	23dc      	movs	r3, #220	@ 0xdc
 801ab9c:	18fb      	adds	r3, r7, r3
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	b29b      	uxth	r3, r3
 801aba2:	029b      	lsls	r3, r3, #10
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	4313      	orrs	r3, r2
 801aba8:	b29a      	uxth	r2, r3
 801abaa:	187b      	adds	r3, r7, r1
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	801a      	strh	r2, [r3, #0]
 801abb0:	e024      	b.n	801abfc <USB_EPStartXfer+0x1098>
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	785b      	ldrb	r3, [r3, #1]
 801abb6:	2b01      	cmp	r3, #1
 801abb8:	d120      	bne.n	801abfc <USB_EPStartXfer+0x1098>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	21d4      	movs	r1, #212	@ 0xd4
 801abbe:	187a      	adds	r2, r7, r1
 801abc0:	6013      	str	r3, [r2, #0]
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2250      	movs	r2, #80	@ 0x50
 801abc6:	5a9b      	ldrh	r3, [r3, r2]
 801abc8:	b29b      	uxth	r3, r3
 801abca:	001a      	movs	r2, r3
 801abcc:	187b      	adds	r3, r7, r1
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	189b      	adds	r3, r3, r2
 801abd2:	187a      	adds	r2, r7, r1
 801abd4:	6013      	str	r3, [r2, #0]
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	781b      	ldrb	r3, [r3, #0]
 801abda:	00da      	lsls	r2, r3, #3
 801abdc:	187b      	adds	r3, r7, r1
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	18d3      	adds	r3, r2, r3
 801abe2:	4a4f      	ldr	r2, [pc, #316]	@ (801ad20 <USB_EPStartXfer+0x11bc>)
 801abe4:	4694      	mov	ip, r2
 801abe6:	4463      	add	r3, ip
 801abe8:	21d0      	movs	r1, #208	@ 0xd0
 801abea:	187a      	adds	r2, r7, r1
 801abec:	6013      	str	r3, [r2, #0]
 801abee:	1d7b      	adds	r3, r7, #5
 801abf0:	33ff      	adds	r3, #255	@ 0xff
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	b29a      	uxth	r2, r3
 801abf6:	187b      	adds	r3, r7, r1
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	801a      	strh	r2, [r3, #0]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	22c4      	movs	r2, #196	@ 0xc4
 801ac00:	18ba      	adds	r2, r7, r2
 801ac02:	6013      	str	r3, [r2, #0]
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	785b      	ldrb	r3, [r3, #1]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d000      	beq.n	801ac0e <USB_EPStartXfer+0x10aa>
 801ac0c:	e08c      	b.n	801ad28 <USB_EPStartXfer+0x11c4>
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	21bc      	movs	r1, #188	@ 0xbc
 801ac12:	187a      	adds	r2, r7, r1
 801ac14:	6013      	str	r3, [r2, #0]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	2250      	movs	r2, #80	@ 0x50
 801ac1a:	5a9b      	ldrh	r3, [r3, r2]
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	001a      	movs	r2, r3
 801ac20:	187b      	adds	r3, r7, r1
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	189b      	adds	r3, r3, r2
 801ac26:	187a      	adds	r2, r7, r1
 801ac28:	6013      	str	r3, [r2, #0]
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	781b      	ldrb	r3, [r3, #0]
 801ac2e:	00da      	lsls	r2, r3, #3
 801ac30:	187b      	adds	r3, r7, r1
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	18d3      	adds	r3, r2, r3
 801ac36:	4a37      	ldr	r2, [pc, #220]	@ (801ad14 <USB_EPStartXfer+0x11b0>)
 801ac38:	4694      	mov	ip, r2
 801ac3a:	4463      	add	r3, ip
 801ac3c:	21b8      	movs	r1, #184	@ 0xb8
 801ac3e:	187a      	adds	r2, r7, r1
 801ac40:	6013      	str	r3, [r2, #0]
 801ac42:	187b      	adds	r3, r7, r1
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	881b      	ldrh	r3, [r3, #0]
 801ac48:	b29b      	uxth	r3, r3
 801ac4a:	059b      	lsls	r3, r3, #22
 801ac4c:	0d9b      	lsrs	r3, r3, #22
 801ac4e:	b29a      	uxth	r2, r3
 801ac50:	187b      	adds	r3, r7, r1
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	801a      	strh	r2, [r3, #0]
 801ac56:	1d7b      	adds	r3, r7, #5
 801ac58:	33ff      	adds	r3, #255	@ 0xff
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac5e:	d925      	bls.n	801acac <USB_EPStartXfer+0x1148>
 801ac60:	1d7b      	adds	r3, r7, #5
 801ac62:	33ff      	adds	r3, #255	@ 0xff
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	095b      	lsrs	r3, r3, #5
 801ac68:	21d8      	movs	r1, #216	@ 0xd8
 801ac6a:	187a      	adds	r2, r7, r1
 801ac6c:	6013      	str	r3, [r2, #0]
 801ac6e:	1d7b      	adds	r3, r7, #5
 801ac70:	33ff      	adds	r3, #255	@ 0xff
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	221f      	movs	r2, #31
 801ac76:	4013      	ands	r3, r2
 801ac78:	d104      	bne.n	801ac84 <USB_EPStartXfer+0x1120>
 801ac7a:	187b      	adds	r3, r7, r1
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	3b01      	subs	r3, #1
 801ac80:	187a      	adds	r2, r7, r1
 801ac82:	6013      	str	r3, [r2, #0]
 801ac84:	21b8      	movs	r1, #184	@ 0xb8
 801ac86:	187b      	adds	r3, r7, r1
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	881b      	ldrh	r3, [r3, #0]
 801ac8c:	b29a      	uxth	r2, r3
 801ac8e:	23d8      	movs	r3, #216	@ 0xd8
 801ac90:	18fb      	adds	r3, r7, r3
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	b29b      	uxth	r3, r3
 801ac96:	029b      	lsls	r3, r3, #10
 801ac98:	b29b      	uxth	r3, r3
 801ac9a:	4313      	orrs	r3, r2
 801ac9c:	b29b      	uxth	r3, r3
 801ac9e:	4a21      	ldr	r2, [pc, #132]	@ (801ad24 <USB_EPStartXfer+0x11c0>)
 801aca0:	4313      	orrs	r3, r2
 801aca2:	b29a      	uxth	r2, r3
 801aca4:	187b      	adds	r3, r7, r1
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	801a      	strh	r2, [r3, #0]
 801acaa:	e062      	b.n	801ad72 <USB_EPStartXfer+0x120e>
 801acac:	1d7b      	adds	r3, r7, #5
 801acae:	33ff      	adds	r3, #255	@ 0xff
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d10b      	bne.n	801acce <USB_EPStartXfer+0x116a>
 801acb6:	21b8      	movs	r1, #184	@ 0xb8
 801acb8:	187b      	adds	r3, r7, r1
 801acba:	681b      	ldr	r3, [r3, #0]
 801acbc:	881b      	ldrh	r3, [r3, #0]
 801acbe:	b29b      	uxth	r3, r3
 801acc0:	4a18      	ldr	r2, [pc, #96]	@ (801ad24 <USB_EPStartXfer+0x11c0>)
 801acc2:	4313      	orrs	r3, r2
 801acc4:	b29a      	uxth	r2, r3
 801acc6:	187b      	adds	r3, r7, r1
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	801a      	strh	r2, [r3, #0]
 801accc:	e051      	b.n	801ad72 <USB_EPStartXfer+0x120e>
 801acce:	1d7b      	adds	r3, r7, #5
 801acd0:	33ff      	adds	r3, #255	@ 0xff
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	085b      	lsrs	r3, r3, #1
 801acd6:	21d8      	movs	r1, #216	@ 0xd8
 801acd8:	187a      	adds	r2, r7, r1
 801acda:	6013      	str	r3, [r2, #0]
 801acdc:	1d7b      	adds	r3, r7, #5
 801acde:	33ff      	adds	r3, #255	@ 0xff
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	2201      	movs	r2, #1
 801ace4:	4013      	ands	r3, r2
 801ace6:	d004      	beq.n	801acf2 <USB_EPStartXfer+0x118e>
 801ace8:	187b      	adds	r3, r7, r1
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	3301      	adds	r3, #1
 801acee:	187a      	adds	r2, r7, r1
 801acf0:	6013      	str	r3, [r2, #0]
 801acf2:	21b8      	movs	r1, #184	@ 0xb8
 801acf4:	187b      	adds	r3, r7, r1
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	881b      	ldrh	r3, [r3, #0]
 801acfa:	b29a      	uxth	r2, r3
 801acfc:	23d8      	movs	r3, #216	@ 0xd8
 801acfe:	18fb      	adds	r3, r7, r3
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	029b      	lsls	r3, r3, #10
 801ad06:	b29b      	uxth	r3, r3
 801ad08:	4313      	orrs	r3, r2
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	187b      	adds	r3, r7, r1
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	801a      	strh	r2, [r3, #0]
 801ad12:	e02e      	b.n	801ad72 <USB_EPStartXfer+0x120e>
 801ad14:	00000406 	.word	0x00000406
 801ad18:	ffff8f8f 	.word	0xffff8f8f
 801ad1c:	ffff80c0 	.word	0xffff80c0
 801ad20:	00000402 	.word	0x00000402
 801ad24:	ffff8000 	.word	0xffff8000
 801ad28:	683b      	ldr	r3, [r7, #0]
 801ad2a:	785b      	ldrb	r3, [r3, #1]
 801ad2c:	2b01      	cmp	r3, #1
 801ad2e:	d120      	bne.n	801ad72 <USB_EPStartXfer+0x120e>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2250      	movs	r2, #80	@ 0x50
 801ad34:	5a9b      	ldrh	r3, [r3, r2]
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	001a      	movs	r2, r3
 801ad3a:	21c4      	movs	r1, #196	@ 0xc4
 801ad3c:	187b      	adds	r3, r7, r1
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	189b      	adds	r3, r3, r2
 801ad42:	187a      	adds	r2, r7, r1
 801ad44:	6013      	str	r3, [r2, #0]
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	781b      	ldrb	r3, [r3, #0]
 801ad4a:	00da      	lsls	r2, r3, #3
 801ad4c:	187b      	adds	r3, r7, r1
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	18d3      	adds	r3, r2, r3
 801ad52:	4a1d      	ldr	r2, [pc, #116]	@ (801adc8 <USB_EPStartXfer+0x1264>)
 801ad54:	4694      	mov	ip, r2
 801ad56:	4463      	add	r3, ip
 801ad58:	21c0      	movs	r1, #192	@ 0xc0
 801ad5a:	187a      	adds	r2, r7, r1
 801ad5c:	6013      	str	r3, [r2, #0]
 801ad5e:	1d7b      	adds	r3, r7, #5
 801ad60:	33ff      	adds	r3, #255	@ 0xff
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	187b      	adds	r3, r7, r1
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	801a      	strh	r2, [r3, #0]
 801ad6c:	e001      	b.n	801ad72 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801ad6e:	2301      	movs	r3, #1
 801ad70:	e025      	b.n	801adbe <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ad72:	687a      	ldr	r2, [r7, #4]
 801ad74:	683b      	ldr	r3, [r7, #0]
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	009b      	lsls	r3, r3, #2
 801ad7a:	18d3      	adds	r3, r2, r3
 801ad7c:	881b      	ldrh	r3, [r3, #0]
 801ad7e:	b29a      	uxth	r2, r3
 801ad80:	208a      	movs	r0, #138	@ 0x8a
 801ad82:	183b      	adds	r3, r7, r0
 801ad84:	4911      	ldr	r1, [pc, #68]	@ (801adcc <USB_EPStartXfer+0x1268>)
 801ad86:	400a      	ands	r2, r1
 801ad88:	801a      	strh	r2, [r3, #0]
 801ad8a:	183b      	adds	r3, r7, r0
 801ad8c:	183a      	adds	r2, r7, r0
 801ad8e:	8812      	ldrh	r2, [r2, #0]
 801ad90:	2180      	movs	r1, #128	@ 0x80
 801ad92:	0149      	lsls	r1, r1, #5
 801ad94:	404a      	eors	r2, r1
 801ad96:	801a      	strh	r2, [r3, #0]
 801ad98:	183b      	adds	r3, r7, r0
 801ad9a:	183a      	adds	r2, r7, r0
 801ad9c:	8812      	ldrh	r2, [r2, #0]
 801ad9e:	2180      	movs	r1, #128	@ 0x80
 801ada0:	0189      	lsls	r1, r1, #6
 801ada2:	404a      	eors	r2, r1
 801ada4:	801a      	strh	r2, [r3, #0]
 801ada6:	687a      	ldr	r2, [r7, #4]
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	18d3      	adds	r3, r2, r3
 801adb0:	183a      	adds	r2, r7, r0
 801adb2:	8812      	ldrh	r2, [r2, #0]
 801adb4:	4906      	ldr	r1, [pc, #24]	@ (801add0 <USB_EPStartXfer+0x126c>)
 801adb6:	430a      	orrs	r2, r1
 801adb8:	b292      	uxth	r2, r2
 801adba:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801adbc:	2300      	movs	r3, #0
}
 801adbe:	0018      	movs	r0, r3
 801adc0:	46bd      	mov	sp, r7
 801adc2:	b043      	add	sp, #268	@ 0x10c
 801adc4:	bd90      	pop	{r4, r7, pc}
 801adc6:	46c0      	nop			@ (mov r8, r8)
 801adc8:	00000406 	.word	0x00000406
 801adcc:	ffffbf8f 	.word	0xffffbf8f
 801add0:	ffff8080 	.word	0xffff8080

0801add4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b084      	sub	sp, #16
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	785b      	ldrb	r3, [r3, #1]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d01d      	beq.n	801ae22 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801ade6:	687a      	ldr	r2, [r7, #4]
 801ade8:	683b      	ldr	r3, [r7, #0]
 801adea:	781b      	ldrb	r3, [r3, #0]
 801adec:	009b      	lsls	r3, r3, #2
 801adee:	18d3      	adds	r3, r2, r3
 801adf0:	881b      	ldrh	r3, [r3, #0]
 801adf2:	b29a      	uxth	r2, r3
 801adf4:	200c      	movs	r0, #12
 801adf6:	183b      	adds	r3, r7, r0
 801adf8:	491b      	ldr	r1, [pc, #108]	@ (801ae68 <USB_EPSetStall+0x94>)
 801adfa:	400a      	ands	r2, r1
 801adfc:	801a      	strh	r2, [r3, #0]
 801adfe:	183b      	adds	r3, r7, r0
 801ae00:	183a      	adds	r2, r7, r0
 801ae02:	8812      	ldrh	r2, [r2, #0]
 801ae04:	2110      	movs	r1, #16
 801ae06:	404a      	eors	r2, r1
 801ae08:	801a      	strh	r2, [r3, #0]
 801ae0a:	687a      	ldr	r2, [r7, #4]
 801ae0c:	683b      	ldr	r3, [r7, #0]
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	009b      	lsls	r3, r3, #2
 801ae12:	18d3      	adds	r3, r2, r3
 801ae14:	183a      	adds	r2, r7, r0
 801ae16:	8812      	ldrh	r2, [r2, #0]
 801ae18:	4914      	ldr	r1, [pc, #80]	@ (801ae6c <USB_EPSetStall+0x98>)
 801ae1a:	430a      	orrs	r2, r1
 801ae1c:	b292      	uxth	r2, r2
 801ae1e:	801a      	strh	r2, [r3, #0]
 801ae20:	e01d      	b.n	801ae5e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801ae22:	687a      	ldr	r2, [r7, #4]
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	781b      	ldrb	r3, [r3, #0]
 801ae28:	009b      	lsls	r3, r3, #2
 801ae2a:	18d3      	adds	r3, r2, r3
 801ae2c:	881b      	ldrh	r3, [r3, #0]
 801ae2e:	b29a      	uxth	r2, r3
 801ae30:	200e      	movs	r0, #14
 801ae32:	183b      	adds	r3, r7, r0
 801ae34:	490e      	ldr	r1, [pc, #56]	@ (801ae70 <USB_EPSetStall+0x9c>)
 801ae36:	400a      	ands	r2, r1
 801ae38:	801a      	strh	r2, [r3, #0]
 801ae3a:	183b      	adds	r3, r7, r0
 801ae3c:	183a      	adds	r2, r7, r0
 801ae3e:	8812      	ldrh	r2, [r2, #0]
 801ae40:	2180      	movs	r1, #128	@ 0x80
 801ae42:	0149      	lsls	r1, r1, #5
 801ae44:	404a      	eors	r2, r1
 801ae46:	801a      	strh	r2, [r3, #0]
 801ae48:	687a      	ldr	r2, [r7, #4]
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	009b      	lsls	r3, r3, #2
 801ae50:	18d3      	adds	r3, r2, r3
 801ae52:	183a      	adds	r2, r7, r0
 801ae54:	8812      	ldrh	r2, [r2, #0]
 801ae56:	4905      	ldr	r1, [pc, #20]	@ (801ae6c <USB_EPSetStall+0x98>)
 801ae58:	430a      	orrs	r2, r1
 801ae5a:	b292      	uxth	r2, r2
 801ae5c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ae5e:	2300      	movs	r3, #0
}
 801ae60:	0018      	movs	r0, r3
 801ae62:	46bd      	mov	sp, r7
 801ae64:	b004      	add	sp, #16
 801ae66:	bd80      	pop	{r7, pc}
 801ae68:	ffff8fbf 	.word	0xffff8fbf
 801ae6c:	ffff8080 	.word	0xffff8080
 801ae70:	ffffbf8f 	.word	0xffffbf8f

0801ae74 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b086      	sub	sp, #24
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
 801ae7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ae7e:	683b      	ldr	r3, [r7, #0]
 801ae80:	7b1b      	ldrb	r3, [r3, #12]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d000      	beq.n	801ae88 <USB_EPClearStall+0x14>
 801ae86:	e095      	b.n	801afb4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	785b      	ldrb	r3, [r3, #1]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d046      	beq.n	801af1e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ae90:	687a      	ldr	r2, [r7, #4]
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	781b      	ldrb	r3, [r3, #0]
 801ae96:	009b      	lsls	r3, r3, #2
 801ae98:	18d2      	adds	r2, r2, r3
 801ae9a:	2110      	movs	r1, #16
 801ae9c:	187b      	adds	r3, r7, r1
 801ae9e:	8812      	ldrh	r2, [r2, #0]
 801aea0:	801a      	strh	r2, [r3, #0]
 801aea2:	187b      	adds	r3, r7, r1
 801aea4:	881b      	ldrh	r3, [r3, #0]
 801aea6:	2240      	movs	r2, #64	@ 0x40
 801aea8:	4013      	ands	r3, r2
 801aeaa:	d016      	beq.n	801aeda <USB_EPClearStall+0x66>
 801aeac:	687a      	ldr	r2, [r7, #4]
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	781b      	ldrb	r3, [r3, #0]
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	18d3      	adds	r3, r2, r3
 801aeb6:	881b      	ldrh	r3, [r3, #0]
 801aeb8:	b29a      	uxth	r2, r3
 801aeba:	200e      	movs	r0, #14
 801aebc:	183b      	adds	r3, r7, r0
 801aebe:	4940      	ldr	r1, [pc, #256]	@ (801afc0 <USB_EPClearStall+0x14c>)
 801aec0:	400a      	ands	r2, r1
 801aec2:	801a      	strh	r2, [r3, #0]
 801aec4:	687a      	ldr	r2, [r7, #4]
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	009b      	lsls	r3, r3, #2
 801aecc:	18d3      	adds	r3, r2, r3
 801aece:	183a      	adds	r2, r7, r0
 801aed0:	8812      	ldrh	r2, [r2, #0]
 801aed2:	493c      	ldr	r1, [pc, #240]	@ (801afc4 <USB_EPClearStall+0x150>)
 801aed4:	430a      	orrs	r2, r1
 801aed6:	b292      	uxth	r2, r2
 801aed8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	78db      	ldrb	r3, [r3, #3]
 801aede:	2b01      	cmp	r3, #1
 801aee0:	d068      	beq.n	801afb4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801aee2:	687a      	ldr	r2, [r7, #4]
 801aee4:	683b      	ldr	r3, [r7, #0]
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	009b      	lsls	r3, r3, #2
 801aeea:	18d3      	adds	r3, r2, r3
 801aeec:	881b      	ldrh	r3, [r3, #0]
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	200c      	movs	r0, #12
 801aef2:	183b      	adds	r3, r7, r0
 801aef4:	4934      	ldr	r1, [pc, #208]	@ (801afc8 <USB_EPClearStall+0x154>)
 801aef6:	400a      	ands	r2, r1
 801aef8:	801a      	strh	r2, [r3, #0]
 801aefa:	183b      	adds	r3, r7, r0
 801aefc:	183a      	adds	r2, r7, r0
 801aefe:	8812      	ldrh	r2, [r2, #0]
 801af00:	2120      	movs	r1, #32
 801af02:	404a      	eors	r2, r1
 801af04:	801a      	strh	r2, [r3, #0]
 801af06:	687a      	ldr	r2, [r7, #4]
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	18d3      	adds	r3, r2, r3
 801af10:	183a      	adds	r2, r7, r0
 801af12:	8812      	ldrh	r2, [r2, #0]
 801af14:	492d      	ldr	r1, [pc, #180]	@ (801afcc <USB_EPClearStall+0x158>)
 801af16:	430a      	orrs	r2, r1
 801af18:	b292      	uxth	r2, r2
 801af1a:	801a      	strh	r2, [r3, #0]
 801af1c:	e04a      	b.n	801afb4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801af1e:	687a      	ldr	r2, [r7, #4]
 801af20:	683b      	ldr	r3, [r7, #0]
 801af22:	781b      	ldrb	r3, [r3, #0]
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	18d2      	adds	r2, r2, r3
 801af28:	2116      	movs	r1, #22
 801af2a:	187b      	adds	r3, r7, r1
 801af2c:	8812      	ldrh	r2, [r2, #0]
 801af2e:	801a      	strh	r2, [r3, #0]
 801af30:	187b      	adds	r3, r7, r1
 801af32:	881a      	ldrh	r2, [r3, #0]
 801af34:	2380      	movs	r3, #128	@ 0x80
 801af36:	01db      	lsls	r3, r3, #7
 801af38:	4013      	ands	r3, r2
 801af3a:	d016      	beq.n	801af6a <USB_EPClearStall+0xf6>
 801af3c:	687a      	ldr	r2, [r7, #4]
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	781b      	ldrb	r3, [r3, #0]
 801af42:	009b      	lsls	r3, r3, #2
 801af44:	18d3      	adds	r3, r2, r3
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	b29a      	uxth	r2, r3
 801af4a:	2014      	movs	r0, #20
 801af4c:	183b      	adds	r3, r7, r0
 801af4e:	491c      	ldr	r1, [pc, #112]	@ (801afc0 <USB_EPClearStall+0x14c>)
 801af50:	400a      	ands	r2, r1
 801af52:	801a      	strh	r2, [r3, #0]
 801af54:	687a      	ldr	r2, [r7, #4]
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	18d3      	adds	r3, r2, r3
 801af5e:	183a      	adds	r2, r7, r0
 801af60:	8812      	ldrh	r2, [r2, #0]
 801af62:	491b      	ldr	r1, [pc, #108]	@ (801afd0 <USB_EPClearStall+0x15c>)
 801af64:	430a      	orrs	r2, r1
 801af66:	b292      	uxth	r2, r2
 801af68:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801af6a:	687a      	ldr	r2, [r7, #4]
 801af6c:	683b      	ldr	r3, [r7, #0]
 801af6e:	781b      	ldrb	r3, [r3, #0]
 801af70:	009b      	lsls	r3, r3, #2
 801af72:	18d3      	adds	r3, r2, r3
 801af74:	881b      	ldrh	r3, [r3, #0]
 801af76:	b29a      	uxth	r2, r3
 801af78:	2012      	movs	r0, #18
 801af7a:	183b      	adds	r3, r7, r0
 801af7c:	4915      	ldr	r1, [pc, #84]	@ (801afd4 <USB_EPClearStall+0x160>)
 801af7e:	400a      	ands	r2, r1
 801af80:	801a      	strh	r2, [r3, #0]
 801af82:	183b      	adds	r3, r7, r0
 801af84:	183a      	adds	r2, r7, r0
 801af86:	8812      	ldrh	r2, [r2, #0]
 801af88:	2180      	movs	r1, #128	@ 0x80
 801af8a:	0149      	lsls	r1, r1, #5
 801af8c:	404a      	eors	r2, r1
 801af8e:	801a      	strh	r2, [r3, #0]
 801af90:	183b      	adds	r3, r7, r0
 801af92:	183a      	adds	r2, r7, r0
 801af94:	8812      	ldrh	r2, [r2, #0]
 801af96:	2180      	movs	r1, #128	@ 0x80
 801af98:	0189      	lsls	r1, r1, #6
 801af9a:	404a      	eors	r2, r1
 801af9c:	801a      	strh	r2, [r3, #0]
 801af9e:	687a      	ldr	r2, [r7, #4]
 801afa0:	683b      	ldr	r3, [r7, #0]
 801afa2:	781b      	ldrb	r3, [r3, #0]
 801afa4:	009b      	lsls	r3, r3, #2
 801afa6:	18d3      	adds	r3, r2, r3
 801afa8:	183a      	adds	r2, r7, r0
 801afaa:	8812      	ldrh	r2, [r2, #0]
 801afac:	4907      	ldr	r1, [pc, #28]	@ (801afcc <USB_EPClearStall+0x158>)
 801afae:	430a      	orrs	r2, r1
 801afb0:	b292      	uxth	r2, r2
 801afb2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801afb4:	2300      	movs	r3, #0
}
 801afb6:	0018      	movs	r0, r3
 801afb8:	46bd      	mov	sp, r7
 801afba:	b006      	add	sp, #24
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	46c0      	nop			@ (mov r8, r8)
 801afc0:	ffff8f8f 	.word	0xffff8f8f
 801afc4:	ffff80c0 	.word	0xffff80c0
 801afc8:	ffff8fbf 	.word	0xffff8fbf
 801afcc:	ffff8080 	.word	0xffff8080
 801afd0:	ffffc080 	.word	0xffffc080
 801afd4:	ffffbf8f 	.word	0xffffbf8f

0801afd8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	000a      	movs	r2, r1
 801afe2:	1cfb      	adds	r3, r7, #3
 801afe4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801afe6:	1cfb      	adds	r3, r7, #3
 801afe8:	781b      	ldrb	r3, [r3, #0]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d103      	bne.n	801aff6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	224c      	movs	r2, #76	@ 0x4c
 801aff2:	2180      	movs	r1, #128	@ 0x80
 801aff4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801aff6:	2300      	movs	r3, #0
}
 801aff8:	0018      	movs	r0, r3
 801affa:	46bd      	mov	sp, r7
 801affc:	b002      	add	sp, #8
 801affe:	bd80      	pop	{r7, pc}

0801b000 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b082      	sub	sp, #8
 801b004:	af00      	add	r7, sp, #0
 801b006:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	2258      	movs	r2, #88	@ 0x58
 801b00c:	5a9b      	ldrh	r3, [r3, r2]
 801b00e:	b29b      	uxth	r3, r3
 801b010:	4a05      	ldr	r2, [pc, #20]	@ (801b028 <USB_DevConnect+0x28>)
 801b012:	4313      	orrs	r3, r2
 801b014:	b299      	uxth	r1, r3
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2258      	movs	r2, #88	@ 0x58
 801b01a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b01c:	2300      	movs	r3, #0
}
 801b01e:	0018      	movs	r0, r3
 801b020:	46bd      	mov	sp, r7
 801b022:	b002      	add	sp, #8
 801b024:	bd80      	pop	{r7, pc}
 801b026:	46c0      	nop			@ (mov r8, r8)
 801b028:	ffff8000 	.word	0xffff8000

0801b02c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b084      	sub	sp, #16
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	2244      	movs	r2, #68	@ 0x44
 801b038:	5a9b      	ldrh	r3, [r3, r2]
 801b03a:	b29b      	uxth	r3, r3
 801b03c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b03e:	68fb      	ldr	r3, [r7, #12]
}
 801b040:	0018      	movs	r0, r3
 801b042:	46bd      	mov	sp, r7
 801b044:	b004      	add	sp, #16
 801b046:	bd80      	pop	{r7, pc}

0801b048 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b08a      	sub	sp, #40	@ 0x28
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	60f8      	str	r0, [r7, #12]
 801b050:	60b9      	str	r1, [r7, #8]
 801b052:	0019      	movs	r1, r3
 801b054:	1dbb      	adds	r3, r7, #6
 801b056:	801a      	strh	r2, [r3, #0]
 801b058:	1d3b      	adds	r3, r7, #4
 801b05a:	1c0a      	adds	r2, r1, #0
 801b05c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b05e:	1d3b      	adds	r3, r7, #4
 801b060:	881b      	ldrh	r3, [r3, #0]
 801b062:	3301      	adds	r3, #1
 801b064:	085b      	lsrs	r3, r3, #1
 801b066:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b06c:	68bb      	ldr	r3, [r7, #8]
 801b06e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b070:	1dbb      	adds	r3, r7, #6
 801b072:	881a      	ldrh	r2, [r3, #0]
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	18d3      	adds	r3, r2, r3
 801b078:	2280      	movs	r2, #128	@ 0x80
 801b07a:	00d2      	lsls	r2, r2, #3
 801b07c:	4694      	mov	ip, r2
 801b07e:	4463      	add	r3, ip
 801b080:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b082:	69bb      	ldr	r3, [r7, #24]
 801b084:	627b      	str	r3, [r7, #36]	@ 0x24
 801b086:	e020      	b.n	801b0ca <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b088:	69fb      	ldr	r3, [r7, #28]
 801b08a:	781a      	ldrb	r2, [r3, #0]
 801b08c:	2112      	movs	r1, #18
 801b08e:	187b      	adds	r3, r7, r1
 801b090:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b092:	69fb      	ldr	r3, [r7, #28]
 801b094:	3301      	adds	r3, #1
 801b096:	781b      	ldrb	r3, [r3, #0]
 801b098:	021b      	lsls	r3, r3, #8
 801b09a:	b21a      	sxth	r2, r3
 801b09c:	187b      	adds	r3, r7, r1
 801b09e:	2000      	movs	r0, #0
 801b0a0:	5e1b      	ldrsh	r3, [r3, r0]
 801b0a2:	4313      	orrs	r3, r2
 801b0a4:	b21a      	sxth	r2, r3
 801b0a6:	187b      	adds	r3, r7, r1
 801b0a8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b0aa:	6a3b      	ldr	r3, [r7, #32]
 801b0ac:	187a      	adds	r2, r7, r1
 801b0ae:	8812      	ldrh	r2, [r2, #0]
 801b0b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b0b2:	6a3b      	ldr	r3, [r7, #32]
 801b0b4:	3302      	adds	r3, #2
 801b0b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b0b8:	69fb      	ldr	r3, [r7, #28]
 801b0ba:	3301      	adds	r3, #1
 801b0bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b0be:	69fb      	ldr	r3, [r7, #28]
 801b0c0:	3301      	adds	r3, #1
 801b0c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0c6:	3b01      	subs	r3, #1
 801b0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d1db      	bne.n	801b088 <USB_WritePMA+0x40>
  }
}
 801b0d0:	46c0      	nop			@ (mov r8, r8)
 801b0d2:	46c0      	nop			@ (mov r8, r8)
 801b0d4:	46bd      	mov	sp, r7
 801b0d6:	b00a      	add	sp, #40	@ 0x28
 801b0d8:	bd80      	pop	{r7, pc}

0801b0da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b0da:	b580      	push	{r7, lr}
 801b0dc:	b08a      	sub	sp, #40	@ 0x28
 801b0de:	af00      	add	r7, sp, #0
 801b0e0:	60f8      	str	r0, [r7, #12]
 801b0e2:	60b9      	str	r1, [r7, #8]
 801b0e4:	0019      	movs	r1, r3
 801b0e6:	1dbb      	adds	r3, r7, #6
 801b0e8:	801a      	strh	r2, [r3, #0]
 801b0ea:	1d3b      	adds	r3, r7, #4
 801b0ec:	1c0a      	adds	r2, r1, #0
 801b0ee:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b0f0:	1d3b      	adds	r3, r7, #4
 801b0f2:	881b      	ldrh	r3, [r3, #0]
 801b0f4:	085b      	lsrs	r3, r3, #1
 801b0f6:	b29b      	uxth	r3, r3
 801b0f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b0fe:	68bb      	ldr	r3, [r7, #8]
 801b100:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b102:	1dbb      	adds	r3, r7, #6
 801b104:	881a      	ldrh	r2, [r3, #0]
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	18d3      	adds	r3, r2, r3
 801b10a:	2280      	movs	r2, #128	@ 0x80
 801b10c:	00d2      	lsls	r2, r2, #3
 801b10e:	4694      	mov	ip, r2
 801b110:	4463      	add	r3, ip
 801b112:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b114:	69bb      	ldr	r3, [r7, #24]
 801b116:	627b      	str	r3, [r7, #36]	@ 0x24
 801b118:	e018      	b.n	801b14c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b11a:	6a3b      	ldr	r3, [r7, #32]
 801b11c:	881b      	ldrh	r3, [r3, #0]
 801b11e:	b29b      	uxth	r3, r3
 801b120:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b122:	6a3b      	ldr	r3, [r7, #32]
 801b124:	3302      	adds	r3, #2
 801b126:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b128:	693b      	ldr	r3, [r7, #16]
 801b12a:	b2da      	uxtb	r2, r3
 801b12c:	69fb      	ldr	r3, [r7, #28]
 801b12e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b130:	69fb      	ldr	r3, [r7, #28]
 801b132:	3301      	adds	r3, #1
 801b134:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b136:	693b      	ldr	r3, [r7, #16]
 801b138:	0a1b      	lsrs	r3, r3, #8
 801b13a:	b2da      	uxtb	r2, r3
 801b13c:	69fb      	ldr	r3, [r7, #28]
 801b13e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b140:	69fb      	ldr	r3, [r7, #28]
 801b142:	3301      	adds	r3, #1
 801b144:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b148:	3b01      	subs	r3, #1
 801b14a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d1e3      	bne.n	801b11a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b152:	1d3b      	adds	r3, r7, #4
 801b154:	881b      	ldrh	r3, [r3, #0]
 801b156:	2201      	movs	r2, #1
 801b158:	4013      	ands	r3, r2
 801b15a:	b29b      	uxth	r3, r3
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d007      	beq.n	801b170 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b160:	6a3b      	ldr	r3, [r7, #32]
 801b162:	881b      	ldrh	r3, [r3, #0]
 801b164:	b29b      	uxth	r3, r3
 801b166:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b168:	693b      	ldr	r3, [r7, #16]
 801b16a:	b2da      	uxtb	r2, r3
 801b16c:	69fb      	ldr	r3, [r7, #28]
 801b16e:	701a      	strb	r2, [r3, #0]
  }
}
 801b170:	46c0      	nop			@ (mov r8, r8)
 801b172:	46bd      	mov	sp, r7
 801b174:	b00a      	add	sp, #40	@ 0x28
 801b176:	bd80      	pop	{r7, pc}

0801b178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b084      	sub	sp, #16
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	000a      	movs	r2, r1
 801b182:	1cfb      	adds	r3, r7, #3
 801b184:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b186:	230f      	movs	r3, #15
 801b188:	18fb      	adds	r3, r7, r3
 801b18a:	2200      	movs	r2, #0
 801b18c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	7c1b      	ldrb	r3, [r3, #16]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d116      	bne.n	801b1c4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b196:	2380      	movs	r3, #128	@ 0x80
 801b198:	009b      	lsls	r3, r3, #2
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	2202      	movs	r2, #2
 801b19e:	2181      	movs	r1, #129	@ 0x81
 801b1a0:	f002 f8eb 	bl	801d37a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	2201      	movs	r2, #1
 801b1a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b1aa:	2380      	movs	r3, #128	@ 0x80
 801b1ac:	009b      	lsls	r3, r3, #2
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	2202      	movs	r2, #2
 801b1b2:	2101      	movs	r1, #1
 801b1b4:	f002 f8e1 	bl	801d37a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b1b8:	687a      	ldr	r2, [r7, #4]
 801b1ba:	23b6      	movs	r3, #182	@ 0xb6
 801b1bc:	005b      	lsls	r3, r3, #1
 801b1be:	2101      	movs	r1, #1
 801b1c0:	50d1      	str	r1, [r2, r3]
 801b1c2:	e013      	b.n	801b1ec <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b1c4:	6878      	ldr	r0, [r7, #4]
 801b1c6:	2340      	movs	r3, #64	@ 0x40
 801b1c8:	2202      	movs	r2, #2
 801b1ca:	2181      	movs	r1, #129	@ 0x81
 801b1cc:	f002 f8d5 	bl	801d37a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	2201      	movs	r2, #1
 801b1d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b1d6:	6878      	ldr	r0, [r7, #4]
 801b1d8:	2340      	movs	r3, #64	@ 0x40
 801b1da:	2202      	movs	r2, #2
 801b1dc:	2101      	movs	r1, #1
 801b1de:	f002 f8cc 	bl	801d37a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b1e2:	687a      	ldr	r2, [r7, #4]
 801b1e4:	23b6      	movs	r3, #182	@ 0xb6
 801b1e6:	005b      	lsls	r3, r3, #1
 801b1e8:	2101      	movs	r1, #1
 801b1ea:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b1ec:	6878      	ldr	r0, [r7, #4]
 801b1ee:	2308      	movs	r3, #8
 801b1f0:	2203      	movs	r2, #3
 801b1f2:	2182      	movs	r1, #130	@ 0x82
 801b1f4:	f002 f8c1 	bl	801d37a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2201      	movs	r2, #1
 801b1fc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b1fe:	2387      	movs	r3, #135	@ 0x87
 801b200:	009b      	lsls	r3, r3, #2
 801b202:	0018      	movs	r0, r3
 801b204:	f002 fa52 	bl	801d6ac <USBD_static_malloc>
 801b208:	0001      	movs	r1, r0
 801b20a:	687a      	ldr	r2, [r7, #4]
 801b20c:	23ae      	movs	r3, #174	@ 0xae
 801b20e:	009b      	lsls	r3, r3, #2
 801b210:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b212:	687a      	ldr	r2, [r7, #4]
 801b214:	23ae      	movs	r3, #174	@ 0xae
 801b216:	009b      	lsls	r3, r3, #2
 801b218:	58d3      	ldr	r3, [r2, r3]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d104      	bne.n	801b228 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b21e:	230f      	movs	r3, #15
 801b220:	18fb      	adds	r3, r7, r3
 801b222:	2201      	movs	r2, #1
 801b224:	701a      	strb	r2, [r3, #0]
 801b226:	e02c      	b.n	801b282 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b228:	687a      	ldr	r2, [r7, #4]
 801b22a:	23ae      	movs	r3, #174	@ 0xae
 801b22c:	009b      	lsls	r3, r3, #2
 801b22e:	58d3      	ldr	r3, [r2, r3]
 801b230:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b232:	687a      	ldr	r2, [r7, #4]
 801b234:	23af      	movs	r3, #175	@ 0xaf
 801b236:	009b      	lsls	r3, r3, #2
 801b238:	58d3      	ldr	r3, [r2, r3]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b23e:	68ba      	ldr	r2, [r7, #8]
 801b240:	2385      	movs	r3, #133	@ 0x85
 801b242:	009b      	lsls	r3, r3, #2
 801b244:	2100      	movs	r1, #0
 801b246:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b248:	68ba      	ldr	r2, [r7, #8]
 801b24a:	2386      	movs	r3, #134	@ 0x86
 801b24c:	009b      	lsls	r3, r3, #2
 801b24e:	2100      	movs	r1, #0
 801b250:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	7c1b      	ldrb	r3, [r3, #16]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d10a      	bne.n	801b270 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b25a:	68ba      	ldr	r2, [r7, #8]
 801b25c:	2381      	movs	r3, #129	@ 0x81
 801b25e:	009b      	lsls	r3, r3, #2
 801b260:	58d2      	ldr	r2, [r2, r3]
 801b262:	2380      	movs	r3, #128	@ 0x80
 801b264:	009b      	lsls	r3, r3, #2
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	2101      	movs	r1, #1
 801b26a:	f002 f9d1 	bl	801d610 <USBD_LL_PrepareReceive>
 801b26e:	e008      	b.n	801b282 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b270:	68ba      	ldr	r2, [r7, #8]
 801b272:	2381      	movs	r3, #129	@ 0x81
 801b274:	009b      	lsls	r3, r3, #2
 801b276:	58d2      	ldr	r2, [r2, r3]
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	2340      	movs	r3, #64	@ 0x40
 801b27c:	2101      	movs	r1, #1
 801b27e:	f002 f9c7 	bl	801d610 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b282:	230f      	movs	r3, #15
 801b284:	18fb      	adds	r3, r7, r3
 801b286:	781b      	ldrb	r3, [r3, #0]
}
 801b288:	0018      	movs	r0, r3
 801b28a:	46bd      	mov	sp, r7
 801b28c:	b004      	add	sp, #16
 801b28e:	bd80      	pop	{r7, pc}

0801b290 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b084      	sub	sp, #16
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	000a      	movs	r2, r1
 801b29a:	1cfb      	adds	r3, r7, #3
 801b29c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b29e:	230f      	movs	r3, #15
 801b2a0:	18fb      	adds	r3, r7, r3
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	2181      	movs	r1, #129	@ 0x81
 801b2aa:	0018      	movs	r0, r3
 801b2ac:	f002 f89c 	bl	801d3e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2101      	movs	r1, #1
 801b2ba:	0018      	movs	r0, r3
 801b2bc:	f002 f894 	bl	801d3e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b2c0:	687a      	ldr	r2, [r7, #4]
 801b2c2:	23b6      	movs	r3, #182	@ 0xb6
 801b2c4:	005b      	lsls	r3, r3, #1
 801b2c6:	2100      	movs	r1, #0
 801b2c8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2182      	movs	r1, #130	@ 0x82
 801b2ce:	0018      	movs	r0, r3
 801b2d0:	f002 f88a 	bl	801d3e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b2da:	687a      	ldr	r2, [r7, #4]
 801b2dc:	23ae      	movs	r3, #174	@ 0xae
 801b2de:	009b      	lsls	r3, r3, #2
 801b2e0:	58d3      	ldr	r3, [r2, r3]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d011      	beq.n	801b30a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b2e6:	687a      	ldr	r2, [r7, #4]
 801b2e8:	23af      	movs	r3, #175	@ 0xaf
 801b2ea:	009b      	lsls	r3, r3, #2
 801b2ec:	58d3      	ldr	r3, [r2, r3]
 801b2ee:	685b      	ldr	r3, [r3, #4]
 801b2f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b2f2:	687a      	ldr	r2, [r7, #4]
 801b2f4:	23ae      	movs	r3, #174	@ 0xae
 801b2f6:	009b      	lsls	r3, r3, #2
 801b2f8:	58d3      	ldr	r3, [r2, r3]
 801b2fa:	0018      	movs	r0, r3
 801b2fc:	f002 f9e2 	bl	801d6c4 <USBD_static_free>
    pdev->pClassData = NULL;
 801b300:	687a      	ldr	r2, [r7, #4]
 801b302:	23ae      	movs	r3, #174	@ 0xae
 801b304:	009b      	lsls	r3, r3, #2
 801b306:	2100      	movs	r1, #0
 801b308:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b30a:	230f      	movs	r3, #15
 801b30c:	18fb      	adds	r3, r7, r3
 801b30e:	781b      	ldrb	r3, [r3, #0]
}
 801b310:	0018      	movs	r0, r3
 801b312:	46bd      	mov	sp, r7
 801b314:	b004      	add	sp, #16
 801b316:	bd80      	pop	{r7, pc}

0801b318 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b086      	sub	sp, #24
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
 801b320:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b322:	687a      	ldr	r2, [r7, #4]
 801b324:	23ae      	movs	r3, #174	@ 0xae
 801b326:	009b      	lsls	r3, r3, #2
 801b328:	58d3      	ldr	r3, [r2, r3]
 801b32a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b32c:	230f      	movs	r3, #15
 801b32e:	18fb      	adds	r3, r7, r3
 801b330:	2200      	movs	r2, #0
 801b332:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b334:	230c      	movs	r3, #12
 801b336:	18fb      	adds	r3, r7, r3
 801b338:	2200      	movs	r2, #0
 801b33a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b33c:	2317      	movs	r3, #23
 801b33e:	18fb      	adds	r3, r7, r3
 801b340:	2200      	movs	r2, #0
 801b342:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b344:	683b      	ldr	r3, [r7, #0]
 801b346:	781b      	ldrb	r3, [r3, #0]
 801b348:	001a      	movs	r2, r3
 801b34a:	2360      	movs	r3, #96	@ 0x60
 801b34c:	4013      	ands	r3, r2
 801b34e:	d03d      	beq.n	801b3cc <USBD_CDC_Setup+0xb4>
 801b350:	2b20      	cmp	r3, #32
 801b352:	d000      	beq.n	801b356 <USBD_CDC_Setup+0x3e>
 801b354:	e094      	b.n	801b480 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	88db      	ldrh	r3, [r3, #6]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d02b      	beq.n	801b3b6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	781b      	ldrb	r3, [r3, #0]
 801b362:	b25b      	sxtb	r3, r3
 801b364:	2b00      	cmp	r3, #0
 801b366:	da12      	bge.n	801b38e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b368:	687a      	ldr	r2, [r7, #4]
 801b36a:	23af      	movs	r3, #175	@ 0xaf
 801b36c:	009b      	lsls	r3, r3, #2
 801b36e:	58d3      	ldr	r3, [r2, r3]
 801b370:	689b      	ldr	r3, [r3, #8]
 801b372:	683a      	ldr	r2, [r7, #0]
 801b374:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b376:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b378:	683a      	ldr	r2, [r7, #0]
 801b37a:	88d2      	ldrh	r2, [r2, #6]
 801b37c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b37e:	6939      	ldr	r1, [r7, #16]
 801b380:	683b      	ldr	r3, [r7, #0]
 801b382:	88da      	ldrh	r2, [r3, #6]
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	0018      	movs	r0, r3
 801b388:	f001 fbaf 	bl	801caea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b38c:	e083      	b.n	801b496 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	7859      	ldrb	r1, [r3, #1]
 801b392:	693a      	ldr	r2, [r7, #16]
 801b394:	2380      	movs	r3, #128	@ 0x80
 801b396:	009b      	lsls	r3, r3, #2
 801b398:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	88db      	ldrh	r3, [r3, #6]
 801b39e:	b2d9      	uxtb	r1, r3
 801b3a0:	693b      	ldr	r3, [r7, #16]
 801b3a2:	4a40      	ldr	r2, [pc, #256]	@ (801b4a4 <USBD_CDC_Setup+0x18c>)
 801b3a4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b3a6:	6939      	ldr	r1, [r7, #16]
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	88da      	ldrh	r2, [r3, #6]
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	0018      	movs	r0, r3
 801b3b0:	f001 fbce 	bl	801cb50 <USBD_CtlPrepareRx>
      break;
 801b3b4:	e06f      	b.n	801b496 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b3b6:	687a      	ldr	r2, [r7, #4]
 801b3b8:	23af      	movs	r3, #175	@ 0xaf
 801b3ba:	009b      	lsls	r3, r3, #2
 801b3bc:	58d3      	ldr	r3, [r2, r3]
 801b3be:	689b      	ldr	r3, [r3, #8]
 801b3c0:	683a      	ldr	r2, [r7, #0]
 801b3c2:	7850      	ldrb	r0, [r2, #1]
 801b3c4:	6839      	ldr	r1, [r7, #0]
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	4798      	blx	r3
      break;
 801b3ca:	e064      	b.n	801b496 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b3cc:	683b      	ldr	r3, [r7, #0]
 801b3ce:	785b      	ldrb	r3, [r3, #1]
 801b3d0:	2b0b      	cmp	r3, #11
 801b3d2:	d037      	beq.n	801b444 <USBD_CDC_Setup+0x12c>
 801b3d4:	dc47      	bgt.n	801b466 <USBD_CDC_Setup+0x14e>
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d002      	beq.n	801b3e0 <USBD_CDC_Setup+0xc8>
 801b3da:	2b0a      	cmp	r3, #10
 801b3dc:	d019      	beq.n	801b412 <USBD_CDC_Setup+0xfa>
 801b3de:	e042      	b.n	801b466 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b3e0:	687a      	ldr	r2, [r7, #4]
 801b3e2:	23a7      	movs	r3, #167	@ 0xa7
 801b3e4:	009b      	lsls	r3, r3, #2
 801b3e6:	5cd3      	ldrb	r3, [r2, r3]
 801b3e8:	2b03      	cmp	r3, #3
 801b3ea:	d107      	bne.n	801b3fc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b3ec:	230c      	movs	r3, #12
 801b3ee:	18f9      	adds	r1, r7, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	2202      	movs	r2, #2
 801b3f4:	0018      	movs	r0, r3
 801b3f6:	f001 fb78 	bl	801caea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b3fa:	e040      	b.n	801b47e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b3fc:	683a      	ldr	r2, [r7, #0]
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	0011      	movs	r1, r2
 801b402:	0018      	movs	r0, r3
 801b404:	f001 faf3 	bl	801c9ee <USBD_CtlError>
            ret = USBD_FAIL;
 801b408:	2317      	movs	r3, #23
 801b40a:	18fb      	adds	r3, r7, r3
 801b40c:	2202      	movs	r2, #2
 801b40e:	701a      	strb	r2, [r3, #0]
          break;
 801b410:	e035      	b.n	801b47e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b412:	687a      	ldr	r2, [r7, #4]
 801b414:	23a7      	movs	r3, #167	@ 0xa7
 801b416:	009b      	lsls	r3, r3, #2
 801b418:	5cd3      	ldrb	r3, [r2, r3]
 801b41a:	2b03      	cmp	r3, #3
 801b41c:	d107      	bne.n	801b42e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b41e:	230f      	movs	r3, #15
 801b420:	18f9      	adds	r1, r7, r3
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2201      	movs	r2, #1
 801b426:	0018      	movs	r0, r3
 801b428:	f001 fb5f 	bl	801caea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b42c:	e027      	b.n	801b47e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b42e:	683a      	ldr	r2, [r7, #0]
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	0011      	movs	r1, r2
 801b434:	0018      	movs	r0, r3
 801b436:	f001 fada 	bl	801c9ee <USBD_CtlError>
            ret = USBD_FAIL;
 801b43a:	2317      	movs	r3, #23
 801b43c:	18fb      	adds	r3, r7, r3
 801b43e:	2202      	movs	r2, #2
 801b440:	701a      	strb	r2, [r3, #0]
          break;
 801b442:	e01c      	b.n	801b47e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b444:	687a      	ldr	r2, [r7, #4]
 801b446:	23a7      	movs	r3, #167	@ 0xa7
 801b448:	009b      	lsls	r3, r3, #2
 801b44a:	5cd3      	ldrb	r3, [r2, r3]
 801b44c:	2b03      	cmp	r3, #3
 801b44e:	d015      	beq.n	801b47c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b450:	683a      	ldr	r2, [r7, #0]
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	0011      	movs	r1, r2
 801b456:	0018      	movs	r0, r3
 801b458:	f001 fac9 	bl	801c9ee <USBD_CtlError>
            ret = USBD_FAIL;
 801b45c:	2317      	movs	r3, #23
 801b45e:	18fb      	adds	r3, r7, r3
 801b460:	2202      	movs	r2, #2
 801b462:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b464:	e00a      	b.n	801b47c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b466:	683a      	ldr	r2, [r7, #0]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	0011      	movs	r1, r2
 801b46c:	0018      	movs	r0, r3
 801b46e:	f001 fabe 	bl	801c9ee <USBD_CtlError>
          ret = USBD_FAIL;
 801b472:	2317      	movs	r3, #23
 801b474:	18fb      	adds	r3, r7, r3
 801b476:	2202      	movs	r2, #2
 801b478:	701a      	strb	r2, [r3, #0]
          break;
 801b47a:	e000      	b.n	801b47e <USBD_CDC_Setup+0x166>
          break;
 801b47c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b47e:	e00a      	b.n	801b496 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b480:	683a      	ldr	r2, [r7, #0]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	0011      	movs	r1, r2
 801b486:	0018      	movs	r0, r3
 801b488:	f001 fab1 	bl	801c9ee <USBD_CtlError>
      ret = USBD_FAIL;
 801b48c:	2317      	movs	r3, #23
 801b48e:	18fb      	adds	r3, r7, r3
 801b490:	2202      	movs	r2, #2
 801b492:	701a      	strb	r2, [r3, #0]
      break;
 801b494:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b496:	2317      	movs	r3, #23
 801b498:	18fb      	adds	r3, r7, r3
 801b49a:	781b      	ldrb	r3, [r3, #0]
}
 801b49c:	0018      	movs	r0, r3
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	b006      	add	sp, #24
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	00000201 	.word	0x00000201

0801b4a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b084      	sub	sp, #16
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
 801b4b0:	000a      	movs	r2, r1
 801b4b2:	1cfb      	adds	r3, r7, #3
 801b4b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b4b6:	687a      	ldr	r2, [r7, #4]
 801b4b8:	23ae      	movs	r3, #174	@ 0xae
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	58d3      	ldr	r3, [r2, r3]
 801b4be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b4c0:	687a      	ldr	r2, [r7, #4]
 801b4c2:	23b0      	movs	r3, #176	@ 0xb0
 801b4c4:	009b      	lsls	r3, r3, #2
 801b4c6:	58d3      	ldr	r3, [r2, r3]
 801b4c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b4ca:	687a      	ldr	r2, [r7, #4]
 801b4cc:	23ae      	movs	r3, #174	@ 0xae
 801b4ce:	009b      	lsls	r3, r3, #2
 801b4d0:	58d3      	ldr	r3, [r2, r3]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d03e      	beq.n	801b554 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b4d6:	1cfb      	adds	r3, r7, #3
 801b4d8:	781a      	ldrb	r2, [r3, #0]
 801b4da:	6879      	ldr	r1, [r7, #4]
 801b4dc:	0013      	movs	r3, r2
 801b4de:	009b      	lsls	r3, r3, #2
 801b4e0:	189b      	adds	r3, r3, r2
 801b4e2:	009b      	lsls	r3, r3, #2
 801b4e4:	18cb      	adds	r3, r1, r3
 801b4e6:	331c      	adds	r3, #28
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d02b      	beq.n	801b546 <USBD_CDC_DataIn+0x9e>
 801b4ee:	1cfb      	adds	r3, r7, #3
 801b4f0:	781a      	ldrb	r2, [r3, #0]
 801b4f2:	6879      	ldr	r1, [r7, #4]
 801b4f4:	0013      	movs	r3, r2
 801b4f6:	009b      	lsls	r3, r3, #2
 801b4f8:	189b      	adds	r3, r3, r2
 801b4fa:	009b      	lsls	r3, r3, #2
 801b4fc:	18cb      	adds	r3, r1, r3
 801b4fe:	331c      	adds	r3, #28
 801b500:	6818      	ldr	r0, [r3, #0]
 801b502:	1cfb      	adds	r3, r7, #3
 801b504:	781a      	ldrb	r2, [r3, #0]
 801b506:	68b9      	ldr	r1, [r7, #8]
 801b508:	0013      	movs	r3, r2
 801b50a:	009b      	lsls	r3, r3, #2
 801b50c:	189b      	adds	r3, r3, r2
 801b50e:	00db      	lsls	r3, r3, #3
 801b510:	18cb      	adds	r3, r1, r3
 801b512:	3338      	adds	r3, #56	@ 0x38
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	0019      	movs	r1, r3
 801b518:	f7e4 feca 	bl	80002b0 <__aeabi_uidivmod>
 801b51c:	1e0b      	subs	r3, r1, #0
 801b51e:	d112      	bne.n	801b546 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b520:	1cfb      	adds	r3, r7, #3
 801b522:	781a      	ldrb	r2, [r3, #0]
 801b524:	6879      	ldr	r1, [r7, #4]
 801b526:	0013      	movs	r3, r2
 801b528:	009b      	lsls	r3, r3, #2
 801b52a:	189b      	adds	r3, r3, r2
 801b52c:	009b      	lsls	r3, r3, #2
 801b52e:	18cb      	adds	r3, r1, r3
 801b530:	331c      	adds	r3, #28
 801b532:	2200      	movs	r2, #0
 801b534:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b536:	1cfb      	adds	r3, r7, #3
 801b538:	7819      	ldrb	r1, [r3, #0]
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	2300      	movs	r3, #0
 801b53e:	2200      	movs	r2, #0
 801b540:	f002 f82f 	bl	801d5a2 <USBD_LL_Transmit>
 801b544:	e004      	b.n	801b550 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b546:	68fa      	ldr	r2, [r7, #12]
 801b548:	2385      	movs	r3, #133	@ 0x85
 801b54a:	009b      	lsls	r3, r3, #2
 801b54c:	2100      	movs	r1, #0
 801b54e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b550:	2300      	movs	r3, #0
 801b552:	e000      	b.n	801b556 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b554:	2302      	movs	r3, #2
  }
}
 801b556:	0018      	movs	r0, r3
 801b558:	46bd      	mov	sp, r7
 801b55a:	b004      	add	sp, #16
 801b55c:	bd80      	pop	{r7, pc}

0801b55e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b55e:	b580      	push	{r7, lr}
 801b560:	b084      	sub	sp, #16
 801b562:	af00      	add	r7, sp, #0
 801b564:	6078      	str	r0, [r7, #4]
 801b566:	000a      	movs	r2, r1
 801b568:	1cfb      	adds	r3, r7, #3
 801b56a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b56c:	687a      	ldr	r2, [r7, #4]
 801b56e:	23ae      	movs	r3, #174	@ 0xae
 801b570:	009b      	lsls	r3, r3, #2
 801b572:	58d3      	ldr	r3, [r2, r3]
 801b574:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b576:	1cfb      	adds	r3, r7, #3
 801b578:	781a      	ldrb	r2, [r3, #0]
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	0011      	movs	r1, r2
 801b57e:	0018      	movs	r0, r3
 801b580:	f002 f87d 	bl	801d67e <USBD_LL_GetRxDataSize>
 801b584:	0001      	movs	r1, r0
 801b586:	68fa      	ldr	r2, [r7, #12]
 801b588:	2383      	movs	r3, #131	@ 0x83
 801b58a:	009b      	lsls	r3, r3, #2
 801b58c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b58e:	687a      	ldr	r2, [r7, #4]
 801b590:	23ae      	movs	r3, #174	@ 0xae
 801b592:	009b      	lsls	r3, r3, #2
 801b594:	58d3      	ldr	r3, [r2, r3]
 801b596:	2b00      	cmp	r3, #0
 801b598:	d011      	beq.n	801b5be <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b59a:	687a      	ldr	r2, [r7, #4]
 801b59c:	23af      	movs	r3, #175	@ 0xaf
 801b59e:	009b      	lsls	r3, r3, #2
 801b5a0:	58d3      	ldr	r3, [r2, r3]
 801b5a2:	68da      	ldr	r2, [r3, #12]
 801b5a4:	68f9      	ldr	r1, [r7, #12]
 801b5a6:	2381      	movs	r3, #129	@ 0x81
 801b5a8:	009b      	lsls	r3, r3, #2
 801b5aa:	58c8      	ldr	r0, [r1, r3]
 801b5ac:	68fb      	ldr	r3, [r7, #12]
 801b5ae:	2183      	movs	r1, #131	@ 0x83
 801b5b0:	0089      	lsls	r1, r1, #2
 801b5b2:	468c      	mov	ip, r1
 801b5b4:	4463      	add	r3, ip
 801b5b6:	0019      	movs	r1, r3
 801b5b8:	4790      	blx	r2

    return USBD_OK;
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	e000      	b.n	801b5c0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b5be:	2302      	movs	r3, #2
  }
}
 801b5c0:	0018      	movs	r0, r3
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	b004      	add	sp, #16
 801b5c6:	bd80      	pop	{r7, pc}

0801b5c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b5c8:	b590      	push	{r4, r7, lr}
 801b5ca:	b085      	sub	sp, #20
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b5d0:	687a      	ldr	r2, [r7, #4]
 801b5d2:	23ae      	movs	r3, #174	@ 0xae
 801b5d4:	009b      	lsls	r3, r3, #2
 801b5d6:	58d3      	ldr	r3, [r2, r3]
 801b5d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	23af      	movs	r3, #175	@ 0xaf
 801b5de:	009b      	lsls	r3, r3, #2
 801b5e0:	58d3      	ldr	r3, [r2, r3]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d018      	beq.n	801b618 <USBD_CDC_EP0_RxReady+0x50>
 801b5e6:	68fa      	ldr	r2, [r7, #12]
 801b5e8:	2380      	movs	r3, #128	@ 0x80
 801b5ea:	009b      	lsls	r3, r3, #2
 801b5ec:	5cd3      	ldrb	r3, [r2, r3]
 801b5ee:	2bff      	cmp	r3, #255	@ 0xff
 801b5f0:	d012      	beq.n	801b618 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b5f2:	687a      	ldr	r2, [r7, #4]
 801b5f4:	23af      	movs	r3, #175	@ 0xaf
 801b5f6:	009b      	lsls	r3, r3, #2
 801b5f8:	58d3      	ldr	r3, [r2, r3]
 801b5fa:	689b      	ldr	r3, [r3, #8]
 801b5fc:	68f9      	ldr	r1, [r7, #12]
 801b5fe:	2280      	movs	r2, #128	@ 0x80
 801b600:	0092      	lsls	r2, r2, #2
 801b602:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b604:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b606:	68fa      	ldr	r2, [r7, #12]
 801b608:	4c06      	ldr	r4, [pc, #24]	@ (801b624 <USBD_CDC_EP0_RxReady+0x5c>)
 801b60a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b60c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b60e:	68fa      	ldr	r2, [r7, #12]
 801b610:	2380      	movs	r3, #128	@ 0x80
 801b612:	009b      	lsls	r3, r3, #2
 801b614:	21ff      	movs	r1, #255	@ 0xff
 801b616:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b618:	2300      	movs	r3, #0
}
 801b61a:	0018      	movs	r0, r3
 801b61c:	46bd      	mov	sp, r7
 801b61e:	b005      	add	sp, #20
 801b620:	bd90      	pop	{r4, r7, pc}
 801b622:	46c0      	nop			@ (mov r8, r8)
 801b624:	00000201 	.word	0x00000201

0801b628 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b082      	sub	sp, #8
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2243      	movs	r2, #67	@ 0x43
 801b634:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b636:	4b02      	ldr	r3, [pc, #8]	@ (801b640 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b638:	0018      	movs	r0, r3
 801b63a:	46bd      	mov	sp, r7
 801b63c:	b002      	add	sp, #8
 801b63e:	bd80      	pop	{r7, pc}
 801b640:	20000174 	.word	0x20000174

0801b644 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b082      	sub	sp, #8
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	2243      	movs	r2, #67	@ 0x43
 801b650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b652:	4b02      	ldr	r3, [pc, #8]	@ (801b65c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b654:	0018      	movs	r0, r3
 801b656:	46bd      	mov	sp, r7
 801b658:	b002      	add	sp, #8
 801b65a:	bd80      	pop	{r7, pc}
 801b65c:	20000130 	.word	0x20000130

0801b660 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b082      	sub	sp, #8
 801b664:	af00      	add	r7, sp, #0
 801b666:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	2243      	movs	r2, #67	@ 0x43
 801b66c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b66e:	4b02      	ldr	r3, [pc, #8]	@ (801b678 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b670:	0018      	movs	r0, r3
 801b672:	46bd      	mov	sp, r7
 801b674:	b002      	add	sp, #8
 801b676:	bd80      	pop	{r7, pc}
 801b678:	200001b8 	.word	0x200001b8

0801b67c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b082      	sub	sp, #8
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	220a      	movs	r2, #10
 801b688:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b68a:	4b02      	ldr	r3, [pc, #8]	@ (801b694 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b68c:	0018      	movs	r0, r3
 801b68e:	46bd      	mov	sp, r7
 801b690:	b002      	add	sp, #8
 801b692:	bd80      	pop	{r7, pc}
 801b694:	200000ec 	.word	0x200000ec

0801b698 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b698:	b580      	push	{r7, lr}
 801b69a:	b084      	sub	sp, #16
 801b69c:	af00      	add	r7, sp, #0
 801b69e:	6078      	str	r0, [r7, #4]
 801b6a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b6a2:	200f      	movs	r0, #15
 801b6a4:	183b      	adds	r3, r7, r0
 801b6a6:	2202      	movs	r2, #2
 801b6a8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d007      	beq.n	801b6c0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b6b0:	687a      	ldr	r2, [r7, #4]
 801b6b2:	23af      	movs	r3, #175	@ 0xaf
 801b6b4:	009b      	lsls	r3, r3, #2
 801b6b6:	6839      	ldr	r1, [r7, #0]
 801b6b8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b6ba:	183b      	adds	r3, r7, r0
 801b6bc:	2200      	movs	r2, #0
 801b6be:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b6c0:	230f      	movs	r3, #15
 801b6c2:	18fb      	adds	r3, r7, r3
 801b6c4:	781b      	ldrb	r3, [r3, #0]
}
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	b004      	add	sp, #16
 801b6cc:	bd80      	pop	{r7, pc}

0801b6ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b6ce:	b580      	push	{r7, lr}
 801b6d0:	b086      	sub	sp, #24
 801b6d2:	af00      	add	r7, sp, #0
 801b6d4:	60f8      	str	r0, [r7, #12]
 801b6d6:	60b9      	str	r1, [r7, #8]
 801b6d8:	1dbb      	adds	r3, r7, #6
 801b6da:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b6dc:	68fa      	ldr	r2, [r7, #12]
 801b6de:	23ae      	movs	r3, #174	@ 0xae
 801b6e0:	009b      	lsls	r3, r3, #2
 801b6e2:	58d3      	ldr	r3, [r2, r3]
 801b6e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b6e6:	697a      	ldr	r2, [r7, #20]
 801b6e8:	2382      	movs	r3, #130	@ 0x82
 801b6ea:	009b      	lsls	r3, r3, #2
 801b6ec:	68b9      	ldr	r1, [r7, #8]
 801b6ee:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b6f0:	1dbb      	adds	r3, r7, #6
 801b6f2:	8819      	ldrh	r1, [r3, #0]
 801b6f4:	697a      	ldr	r2, [r7, #20]
 801b6f6:	2384      	movs	r3, #132	@ 0x84
 801b6f8:	009b      	lsls	r3, r3, #2
 801b6fa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b6fc:	2300      	movs	r3, #0
}
 801b6fe:	0018      	movs	r0, r3
 801b700:	46bd      	mov	sp, r7
 801b702:	b006      	add	sp, #24
 801b704:	bd80      	pop	{r7, pc}

0801b706 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b706:	b580      	push	{r7, lr}
 801b708:	b084      	sub	sp, #16
 801b70a:	af00      	add	r7, sp, #0
 801b70c:	6078      	str	r0, [r7, #4]
 801b70e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b710:	687a      	ldr	r2, [r7, #4]
 801b712:	23ae      	movs	r3, #174	@ 0xae
 801b714:	009b      	lsls	r3, r3, #2
 801b716:	58d3      	ldr	r3, [r2, r3]
 801b718:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b71a:	68fa      	ldr	r2, [r7, #12]
 801b71c:	2381      	movs	r3, #129	@ 0x81
 801b71e:	009b      	lsls	r3, r3, #2
 801b720:	6839      	ldr	r1, [r7, #0]
 801b722:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b724:	2300      	movs	r3, #0
}
 801b726:	0018      	movs	r0, r3
 801b728:	46bd      	mov	sp, r7
 801b72a:	b004      	add	sp, #16
 801b72c:	bd80      	pop	{r7, pc}

0801b72e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b72e:	b580      	push	{r7, lr}
 801b730:	b084      	sub	sp, #16
 801b732:	af00      	add	r7, sp, #0
 801b734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b736:	687a      	ldr	r2, [r7, #4]
 801b738:	23ae      	movs	r3, #174	@ 0xae
 801b73a:	009b      	lsls	r3, r3, #2
 801b73c:	58d3      	ldr	r3, [r2, r3]
 801b73e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b740:	687a      	ldr	r2, [r7, #4]
 801b742:	23ae      	movs	r3, #174	@ 0xae
 801b744:	009b      	lsls	r3, r3, #2
 801b746:	58d3      	ldr	r3, [r2, r3]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d022      	beq.n	801b792 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b74c:	68fa      	ldr	r2, [r7, #12]
 801b74e:	2385      	movs	r3, #133	@ 0x85
 801b750:	009b      	lsls	r3, r3, #2
 801b752:	58d3      	ldr	r3, [r2, r3]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d11a      	bne.n	801b78e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b758:	68fa      	ldr	r2, [r7, #12]
 801b75a:	2385      	movs	r3, #133	@ 0x85
 801b75c:	009b      	lsls	r3, r3, #2
 801b75e:	2101      	movs	r1, #1
 801b760:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b762:	68fa      	ldr	r2, [r7, #12]
 801b764:	2384      	movs	r3, #132	@ 0x84
 801b766:	009b      	lsls	r3, r3, #2
 801b768:	58d2      	ldr	r2, [r2, r3]
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b76e:	68fa      	ldr	r2, [r7, #12]
 801b770:	2382      	movs	r3, #130	@ 0x82
 801b772:	009b      	lsls	r3, r3, #2
 801b774:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b776:	68fa      	ldr	r2, [r7, #12]
 801b778:	2384      	movs	r3, #132	@ 0x84
 801b77a:	009b      	lsls	r3, r3, #2
 801b77c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b77e:	b29b      	uxth	r3, r3
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	000a      	movs	r2, r1
 801b784:	2181      	movs	r1, #129	@ 0x81
 801b786:	f001 ff0c 	bl	801d5a2 <USBD_LL_Transmit>

      return USBD_OK;
 801b78a:	2300      	movs	r3, #0
 801b78c:	e002      	b.n	801b794 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b78e:	2301      	movs	r3, #1
 801b790:	e000      	b.n	801b794 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b792:	2302      	movs	r3, #2
  }
}
 801b794:	0018      	movs	r0, r3
 801b796:	46bd      	mov	sp, r7
 801b798:	b004      	add	sp, #16
 801b79a:	bd80      	pop	{r7, pc}

0801b79c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b084      	sub	sp, #16
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b7a4:	687a      	ldr	r2, [r7, #4]
 801b7a6:	23ae      	movs	r3, #174	@ 0xae
 801b7a8:	009b      	lsls	r3, r3, #2
 801b7aa:	58d3      	ldr	r3, [r2, r3]
 801b7ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b7ae:	687a      	ldr	r2, [r7, #4]
 801b7b0:	23ae      	movs	r3, #174	@ 0xae
 801b7b2:	009b      	lsls	r3, r3, #2
 801b7b4:	58d3      	ldr	r3, [r2, r3]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d019      	beq.n	801b7ee <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	7c1b      	ldrb	r3, [r3, #16]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d10a      	bne.n	801b7d8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b7c2:	68fa      	ldr	r2, [r7, #12]
 801b7c4:	2381      	movs	r3, #129	@ 0x81
 801b7c6:	009b      	lsls	r3, r3, #2
 801b7c8:	58d2      	ldr	r2, [r2, r3]
 801b7ca:	2380      	movs	r3, #128	@ 0x80
 801b7cc:	009b      	lsls	r3, r3, #2
 801b7ce:	6878      	ldr	r0, [r7, #4]
 801b7d0:	2101      	movs	r1, #1
 801b7d2:	f001 ff1d 	bl	801d610 <USBD_LL_PrepareReceive>
 801b7d6:	e008      	b.n	801b7ea <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b7d8:	68fa      	ldr	r2, [r7, #12]
 801b7da:	2381      	movs	r3, #129	@ 0x81
 801b7dc:	009b      	lsls	r3, r3, #2
 801b7de:	58d2      	ldr	r2, [r2, r3]
 801b7e0:	6878      	ldr	r0, [r7, #4]
 801b7e2:	2340      	movs	r3, #64	@ 0x40
 801b7e4:	2101      	movs	r1, #1
 801b7e6:	f001 ff13 	bl	801d610 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	e000      	b.n	801b7f0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b7ee:	2302      	movs	r3, #2
  }
}
 801b7f0:	0018      	movs	r0, r3
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	b004      	add	sp, #16
 801b7f6:	bd80      	pop	{r7, pc}

0801b7f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b084      	sub	sp, #16
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	60f8      	str	r0, [r7, #12]
 801b800:	60b9      	str	r1, [r7, #8]
 801b802:	1dfb      	adds	r3, r7, #7
 801b804:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d101      	bne.n	801b810 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b80c:	2302      	movs	r3, #2
 801b80e:	e020      	b.n	801b852 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b810:	68fa      	ldr	r2, [r7, #12]
 801b812:	23ad      	movs	r3, #173	@ 0xad
 801b814:	009b      	lsls	r3, r3, #2
 801b816:	58d3      	ldr	r3, [r2, r3]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d004      	beq.n	801b826 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b81c:	68fa      	ldr	r2, [r7, #12]
 801b81e:	23ad      	movs	r3, #173	@ 0xad
 801b820:	009b      	lsls	r3, r3, #2
 801b822:	2100      	movs	r1, #0
 801b824:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b826:	68bb      	ldr	r3, [r7, #8]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d004      	beq.n	801b836 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b82c:	68fa      	ldr	r2, [r7, #12]
 801b82e:	23ac      	movs	r3, #172	@ 0xac
 801b830:	009b      	lsls	r3, r3, #2
 801b832:	68b9      	ldr	r1, [r7, #8]
 801b834:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b836:	68fa      	ldr	r2, [r7, #12]
 801b838:	23a7      	movs	r3, #167	@ 0xa7
 801b83a:	009b      	lsls	r3, r3, #2
 801b83c:	2101      	movs	r1, #1
 801b83e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	1dfa      	adds	r2, r7, #7
 801b844:	7812      	ldrb	r2, [r2, #0]
 801b846:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	0018      	movs	r0, r3
 801b84c:	f001 fd0c 	bl	801d268 <USBD_LL_Init>

  return USBD_OK;
 801b850:	2300      	movs	r3, #0
}
 801b852:	0018      	movs	r0, r3
 801b854:	46bd      	mov	sp, r7
 801b856:	b004      	add	sp, #16
 801b858:	bd80      	pop	{r7, pc}

0801b85a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b85a:	b580      	push	{r7, lr}
 801b85c:	b084      	sub	sp, #16
 801b85e:	af00      	add	r7, sp, #0
 801b860:	6078      	str	r0, [r7, #4]
 801b862:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b864:	200f      	movs	r0, #15
 801b866:	183b      	adds	r3, r7, r0
 801b868:	2200      	movs	r2, #0
 801b86a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b86c:	683b      	ldr	r3, [r7, #0]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d008      	beq.n	801b884 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b872:	687a      	ldr	r2, [r7, #4]
 801b874:	23ad      	movs	r3, #173	@ 0xad
 801b876:	009b      	lsls	r3, r3, #2
 801b878:	6839      	ldr	r1, [r7, #0]
 801b87a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b87c:	183b      	adds	r3, r7, r0
 801b87e:	2200      	movs	r2, #0
 801b880:	701a      	strb	r2, [r3, #0]
 801b882:	e003      	b.n	801b88c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b884:	230f      	movs	r3, #15
 801b886:	18fb      	adds	r3, r7, r3
 801b888:	2202      	movs	r2, #2
 801b88a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b88c:	230f      	movs	r3, #15
 801b88e:	18fb      	adds	r3, r7, r3
 801b890:	781b      	ldrb	r3, [r3, #0]
}
 801b892:	0018      	movs	r0, r3
 801b894:	46bd      	mov	sp, r7
 801b896:	b004      	add	sp, #16
 801b898:	bd80      	pop	{r7, pc}

0801b89a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b89a:	b580      	push	{r7, lr}
 801b89c:	b082      	sub	sp, #8
 801b89e:	af00      	add	r7, sp, #0
 801b8a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	0018      	movs	r0, r3
 801b8a6:	f001 fd43 	bl	801d330 <USBD_LL_Start>

  return USBD_OK;
 801b8aa:	2300      	movs	r3, #0
}
 801b8ac:	0018      	movs	r0, r3
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	b002      	add	sp, #8
 801b8b2:	bd80      	pop	{r7, pc}

0801b8b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b8b4:	b580      	push	{r7, lr}
 801b8b6:	b082      	sub	sp, #8
 801b8b8:	af00      	add	r7, sp, #0
 801b8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b8bc:	2300      	movs	r3, #0
}
 801b8be:	0018      	movs	r0, r3
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	b002      	add	sp, #8
 801b8c4:	bd80      	pop	{r7, pc}

0801b8c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b8c6:	b590      	push	{r4, r7, lr}
 801b8c8:	b085      	sub	sp, #20
 801b8ca:	af00      	add	r7, sp, #0
 801b8cc:	6078      	str	r0, [r7, #4]
 801b8ce:	000a      	movs	r2, r1
 801b8d0:	1cfb      	adds	r3, r7, #3
 801b8d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b8d4:	240f      	movs	r4, #15
 801b8d6:	193b      	adds	r3, r7, r4
 801b8d8:	2202      	movs	r2, #2
 801b8da:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b8dc:	687a      	ldr	r2, [r7, #4]
 801b8de:	23ad      	movs	r3, #173	@ 0xad
 801b8e0:	009b      	lsls	r3, r3, #2
 801b8e2:	58d3      	ldr	r3, [r2, r3]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d00e      	beq.n	801b906 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b8e8:	687a      	ldr	r2, [r7, #4]
 801b8ea:	23ad      	movs	r3, #173	@ 0xad
 801b8ec:	009b      	lsls	r3, r3, #2
 801b8ee:	58d3      	ldr	r3, [r2, r3]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	1cfa      	adds	r2, r7, #3
 801b8f4:	7811      	ldrb	r1, [r2, #0]
 801b8f6:	687a      	ldr	r2, [r7, #4]
 801b8f8:	0010      	movs	r0, r2
 801b8fa:	4798      	blx	r3
 801b8fc:	1e03      	subs	r3, r0, #0
 801b8fe:	d102      	bne.n	801b906 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b900:	193b      	adds	r3, r7, r4
 801b902:	2200      	movs	r2, #0
 801b904:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b906:	230f      	movs	r3, #15
 801b908:	18fb      	adds	r3, r7, r3
 801b90a:	781b      	ldrb	r3, [r3, #0]
}
 801b90c:	0018      	movs	r0, r3
 801b90e:	46bd      	mov	sp, r7
 801b910:	b005      	add	sp, #20
 801b912:	bd90      	pop	{r4, r7, pc}

0801b914 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b082      	sub	sp, #8
 801b918:	af00      	add	r7, sp, #0
 801b91a:	6078      	str	r0, [r7, #4]
 801b91c:	000a      	movs	r2, r1
 801b91e:	1cfb      	adds	r3, r7, #3
 801b920:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b922:	687a      	ldr	r2, [r7, #4]
 801b924:	23ad      	movs	r3, #173	@ 0xad
 801b926:	009b      	lsls	r3, r3, #2
 801b928:	58d3      	ldr	r3, [r2, r3]
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	1cfa      	adds	r2, r7, #3
 801b92e:	7811      	ldrb	r1, [r2, #0]
 801b930:	687a      	ldr	r2, [r7, #4]
 801b932:	0010      	movs	r0, r2
 801b934:	4798      	blx	r3

  return USBD_OK;
 801b936:	2300      	movs	r3, #0
}
 801b938:	0018      	movs	r0, r3
 801b93a:	46bd      	mov	sp, r7
 801b93c:	b002      	add	sp, #8
 801b93e:	bd80      	pop	{r7, pc}

0801b940 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b082      	sub	sp, #8
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	22aa      	movs	r2, #170	@ 0xaa
 801b94e:	0092      	lsls	r2, r2, #2
 801b950:	4694      	mov	ip, r2
 801b952:	4463      	add	r3, ip
 801b954:	683a      	ldr	r2, [r7, #0]
 801b956:	0011      	movs	r1, r2
 801b958:	0018      	movs	r0, r3
 801b95a:	f001 f810 	bl	801c97e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b95e:	687a      	ldr	r2, [r7, #4]
 801b960:	23a5      	movs	r3, #165	@ 0xa5
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	2101      	movs	r1, #1
 801b966:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	4a23      	ldr	r2, [pc, #140]	@ (801b9f8 <USBD_LL_SetupStage+0xb8>)
 801b96c:	5a9b      	ldrh	r3, [r3, r2]
 801b96e:	0019      	movs	r1, r3
 801b970:	687a      	ldr	r2, [r7, #4]
 801b972:	23a6      	movs	r3, #166	@ 0xa6
 801b974:	009b      	lsls	r3, r3, #2
 801b976:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b978:	687a      	ldr	r2, [r7, #4]
 801b97a:	23aa      	movs	r3, #170	@ 0xaa
 801b97c:	009b      	lsls	r3, r3, #2
 801b97e:	5cd3      	ldrb	r3, [r2, r3]
 801b980:	001a      	movs	r2, r3
 801b982:	231f      	movs	r3, #31
 801b984:	4013      	ands	r3, r2
 801b986:	2b02      	cmp	r3, #2
 801b988:	d019      	beq.n	801b9be <USBD_LL_SetupStage+0x7e>
 801b98a:	d822      	bhi.n	801b9d2 <USBD_LL_SetupStage+0x92>
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d002      	beq.n	801b996 <USBD_LL_SetupStage+0x56>
 801b990:	2b01      	cmp	r3, #1
 801b992:	d00a      	beq.n	801b9aa <USBD_LL_SetupStage+0x6a>
 801b994:	e01d      	b.n	801b9d2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	22aa      	movs	r2, #170	@ 0xaa
 801b99a:	0092      	lsls	r2, r2, #2
 801b99c:	189a      	adds	r2, r3, r2
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	0011      	movs	r1, r2
 801b9a2:	0018      	movs	r0, r3
 801b9a4:	f000 fa10 	bl	801bdc8 <USBD_StdDevReq>
      break;
 801b9a8:	e020      	b.n	801b9ec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	22aa      	movs	r2, #170	@ 0xaa
 801b9ae:	0092      	lsls	r2, r2, #2
 801b9b0:	189a      	adds	r2, r3, r2
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	0011      	movs	r1, r2
 801b9b6:	0018      	movs	r0, r3
 801b9b8:	f000 fa78 	bl	801beac <USBD_StdItfReq>
      break;
 801b9bc:	e016      	b.n	801b9ec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	22aa      	movs	r2, #170	@ 0xaa
 801b9c2:	0092      	lsls	r2, r2, #2
 801b9c4:	189a      	adds	r2, r3, r2
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	0011      	movs	r1, r2
 801b9ca:	0018      	movs	r0, r3
 801b9cc:	f000 fac5 	bl	801bf5a <USBD_StdEPReq>
      break;
 801b9d0:	e00c      	b.n	801b9ec <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	23aa      	movs	r3, #170	@ 0xaa
 801b9d6:	009b      	lsls	r3, r3, #2
 801b9d8:	5cd3      	ldrb	r3, [r2, r3]
 801b9da:	227f      	movs	r2, #127	@ 0x7f
 801b9dc:	4393      	bics	r3, r2
 801b9de:	b2da      	uxtb	r2, r3
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	0011      	movs	r1, r2
 801b9e4:	0018      	movs	r0, r3
 801b9e6:	f001 fd2a 	bl	801d43e <USBD_LL_StallEP>
      break;
 801b9ea:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b9ec:	2300      	movs	r3, #0
}
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	b002      	add	sp, #8
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	46c0      	nop			@ (mov r8, r8)
 801b9f8:	000002ae 	.word	0x000002ae

0801b9fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b086      	sub	sp, #24
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	60f8      	str	r0, [r7, #12]
 801ba04:	607a      	str	r2, [r7, #4]
 801ba06:	200b      	movs	r0, #11
 801ba08:	183b      	adds	r3, r7, r0
 801ba0a:	1c0a      	adds	r2, r1, #0
 801ba0c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ba0e:	183b      	adds	r3, r7, r0
 801ba10:	781b      	ldrb	r3, [r3, #0]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d154      	bne.n	801bac0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	3355      	adds	r3, #85	@ 0x55
 801ba1a:	33ff      	adds	r3, #255	@ 0xff
 801ba1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	23a5      	movs	r3, #165	@ 0xa5
 801ba22:	009b      	lsls	r3, r3, #2
 801ba24:	58d3      	ldr	r3, [r2, r3]
 801ba26:	2b03      	cmp	r3, #3
 801ba28:	d139      	bne.n	801ba9e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801ba2a:	697b      	ldr	r3, [r7, #20]
 801ba2c:	68da      	ldr	r2, [r3, #12]
 801ba2e:	697b      	ldr	r3, [r7, #20]
 801ba30:	691b      	ldr	r3, [r3, #16]
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d919      	bls.n	801ba6a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801ba36:	697b      	ldr	r3, [r7, #20]
 801ba38:	68da      	ldr	r2, [r3, #12]
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	691b      	ldr	r3, [r3, #16]
 801ba3e:	1ad2      	subs	r2, r2, r3
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	68da      	ldr	r2, [r3, #12]
 801ba48:	697b      	ldr	r3, [r7, #20]
 801ba4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ba4c:	429a      	cmp	r2, r3
 801ba4e:	d203      	bcs.n	801ba58 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba50:	697b      	ldr	r3, [r7, #20]
 801ba52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801ba54:	b29b      	uxth	r3, r3
 801ba56:	e002      	b.n	801ba5e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ba5c:	b29b      	uxth	r3, r3
 801ba5e:	6879      	ldr	r1, [r7, #4]
 801ba60:	68f8      	ldr	r0, [r7, #12]
 801ba62:	001a      	movs	r2, r3
 801ba64:	f001 f898 	bl	801cb98 <USBD_CtlContinueRx>
 801ba68:	e045      	b.n	801baf6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba6a:	68fa      	ldr	r2, [r7, #12]
 801ba6c:	23ad      	movs	r3, #173	@ 0xad
 801ba6e:	009b      	lsls	r3, r3, #2
 801ba70:	58d3      	ldr	r3, [r2, r3]
 801ba72:	691b      	ldr	r3, [r3, #16]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d00d      	beq.n	801ba94 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba78:	68fa      	ldr	r2, [r7, #12]
 801ba7a:	23a7      	movs	r3, #167	@ 0xa7
 801ba7c:	009b      	lsls	r3, r3, #2
 801ba7e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ba80:	2b03      	cmp	r3, #3
 801ba82:	d107      	bne.n	801ba94 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801ba84:	68fa      	ldr	r2, [r7, #12]
 801ba86:	23ad      	movs	r3, #173	@ 0xad
 801ba88:	009b      	lsls	r3, r3, #2
 801ba8a:	58d3      	ldr	r3, [r2, r3]
 801ba8c:	691b      	ldr	r3, [r3, #16]
 801ba8e:	68fa      	ldr	r2, [r7, #12]
 801ba90:	0010      	movs	r0, r2
 801ba92:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	0018      	movs	r0, r3
 801ba98:	f001 f891 	bl	801cbbe <USBD_CtlSendStatus>
 801ba9c:	e02b      	b.n	801baf6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801ba9e:	68fa      	ldr	r2, [r7, #12]
 801baa0:	23a5      	movs	r3, #165	@ 0xa5
 801baa2:	009b      	lsls	r3, r3, #2
 801baa4:	58d3      	ldr	r3, [r2, r3]
 801baa6:	2b05      	cmp	r3, #5
 801baa8:	d125      	bne.n	801baf6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801baaa:	68fa      	ldr	r2, [r7, #12]
 801baac:	23a5      	movs	r3, #165	@ 0xa5
 801baae:	009b      	lsls	r3, r3, #2
 801bab0:	2100      	movs	r1, #0
 801bab2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	2100      	movs	r1, #0
 801bab8:	0018      	movs	r0, r3
 801baba:	f001 fcc0 	bl	801d43e <USBD_LL_StallEP>
 801babe:	e01a      	b.n	801baf6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bac0:	68fa      	ldr	r2, [r7, #12]
 801bac2:	23ad      	movs	r3, #173	@ 0xad
 801bac4:	009b      	lsls	r3, r3, #2
 801bac6:	58d3      	ldr	r3, [r2, r3]
 801bac8:	699b      	ldr	r3, [r3, #24]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d011      	beq.n	801baf2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	23a7      	movs	r3, #167	@ 0xa7
 801bad2:	009b      	lsls	r3, r3, #2
 801bad4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bad6:	2b03      	cmp	r3, #3
 801bad8:	d10b      	bne.n	801baf2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bada:	68fa      	ldr	r2, [r7, #12]
 801badc:	23ad      	movs	r3, #173	@ 0xad
 801bade:	009b      	lsls	r3, r3, #2
 801bae0:	58d3      	ldr	r3, [r2, r3]
 801bae2:	699b      	ldr	r3, [r3, #24]
 801bae4:	220b      	movs	r2, #11
 801bae6:	18ba      	adds	r2, r7, r2
 801bae8:	7811      	ldrb	r1, [r2, #0]
 801baea:	68fa      	ldr	r2, [r7, #12]
 801baec:	0010      	movs	r0, r2
 801baee:	4798      	blx	r3
 801baf0:	e001      	b.n	801baf6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801baf2:	2302      	movs	r3, #2
 801baf4:	e000      	b.n	801baf8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801baf6:	2300      	movs	r3, #0
}
 801baf8:	0018      	movs	r0, r3
 801bafa:	46bd      	mov	sp, r7
 801bafc:	b006      	add	sp, #24
 801bafe:	bd80      	pop	{r7, pc}

0801bb00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b086      	sub	sp, #24
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	60f8      	str	r0, [r7, #12]
 801bb08:	607a      	str	r2, [r7, #4]
 801bb0a:	200b      	movs	r0, #11
 801bb0c:	183b      	adds	r3, r7, r0
 801bb0e:	1c0a      	adds	r2, r1, #0
 801bb10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bb12:	183b      	adds	r3, r7, r0
 801bb14:	781b      	ldrb	r3, [r3, #0]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d000      	beq.n	801bb1c <USBD_LL_DataInStage+0x1c>
 801bb1a:	e08e      	b.n	801bc3a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	3314      	adds	r3, #20
 801bb20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bb22:	68fa      	ldr	r2, [r7, #12]
 801bb24:	23a5      	movs	r3, #165	@ 0xa5
 801bb26:	009b      	lsls	r3, r3, #2
 801bb28:	58d3      	ldr	r3, [r2, r3]
 801bb2a:	2b02      	cmp	r3, #2
 801bb2c:	d164      	bne.n	801bbf8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	68da      	ldr	r2, [r3, #12]
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	691b      	ldr	r3, [r3, #16]
 801bb36:	429a      	cmp	r2, r3
 801bb38:	d915      	bls.n	801bb66 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bb3a:	697b      	ldr	r3, [r7, #20]
 801bb3c:	68da      	ldr	r2, [r3, #12]
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	691b      	ldr	r3, [r3, #16]
 801bb42:	1ad2      	subs	r2, r2, r3
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bb48:	697b      	ldr	r3, [r7, #20]
 801bb4a:	68db      	ldr	r3, [r3, #12]
 801bb4c:	b29a      	uxth	r2, r3
 801bb4e:	6879      	ldr	r1, [r7, #4]
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	0018      	movs	r0, r3
 801bb54:	f000 ffe9 	bl	801cb2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bb58:	68f8      	ldr	r0, [r7, #12]
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	2200      	movs	r2, #0
 801bb5e:	2100      	movs	r1, #0
 801bb60:	f001 fd56 	bl	801d610 <USBD_LL_PrepareReceive>
 801bb64:	e059      	b.n	801bc1a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	689a      	ldr	r2, [r3, #8]
 801bb6a:	697b      	ldr	r3, [r7, #20]
 801bb6c:	691b      	ldr	r3, [r3, #16]
 801bb6e:	0019      	movs	r1, r3
 801bb70:	0010      	movs	r0, r2
 801bb72:	f7e4 fb9d 	bl	80002b0 <__aeabi_uidivmod>
 801bb76:	1e0b      	subs	r3, r1, #0
 801bb78:	d11f      	bne.n	801bbba <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bb7a:	697b      	ldr	r3, [r7, #20]
 801bb7c:	689a      	ldr	r2, [r3, #8]
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d319      	bcc.n	801bbba <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bb86:	697b      	ldr	r3, [r7, #20]
 801bb88:	689a      	ldr	r2, [r3, #8]
 801bb8a:	68f9      	ldr	r1, [r7, #12]
 801bb8c:	23a6      	movs	r3, #166	@ 0xa6
 801bb8e:	009b      	lsls	r3, r3, #2
 801bb90:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d211      	bcs.n	801bbba <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2200      	movs	r2, #0
 801bb9a:	2100      	movs	r1, #0
 801bb9c:	0018      	movs	r0, r3
 801bb9e:	f000 ffc4 	bl	801cb2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bba2:	68fa      	ldr	r2, [r7, #12]
 801bba4:	23a6      	movs	r3, #166	@ 0xa6
 801bba6:	009b      	lsls	r3, r3, #2
 801bba8:	2100      	movs	r1, #0
 801bbaa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bbac:	68f8      	ldr	r0, [r7, #12]
 801bbae:	2300      	movs	r3, #0
 801bbb0:	2200      	movs	r2, #0
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	f001 fd2c 	bl	801d610 <USBD_LL_PrepareReceive>
 801bbb8:	e02f      	b.n	801bc1a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bbba:	68fa      	ldr	r2, [r7, #12]
 801bbbc:	23ad      	movs	r3, #173	@ 0xad
 801bbbe:	009b      	lsls	r3, r3, #2
 801bbc0:	58d3      	ldr	r3, [r2, r3]
 801bbc2:	68db      	ldr	r3, [r3, #12]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d00d      	beq.n	801bbe4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bbc8:	68fa      	ldr	r2, [r7, #12]
 801bbca:	23a7      	movs	r3, #167	@ 0xa7
 801bbcc:	009b      	lsls	r3, r3, #2
 801bbce:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bbd0:	2b03      	cmp	r3, #3
 801bbd2:	d107      	bne.n	801bbe4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bbd4:	68fa      	ldr	r2, [r7, #12]
 801bbd6:	23ad      	movs	r3, #173	@ 0xad
 801bbd8:	009b      	lsls	r3, r3, #2
 801bbda:	58d3      	ldr	r3, [r2, r3]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	68fa      	ldr	r2, [r7, #12]
 801bbe0:	0010      	movs	r0, r2
 801bbe2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	2180      	movs	r1, #128	@ 0x80
 801bbe8:	0018      	movs	r0, r3
 801bbea:	f001 fc28 	bl	801d43e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	0018      	movs	r0, r3
 801bbf2:	f000 fff8 	bl	801cbe6 <USBD_CtlReceiveStatus>
 801bbf6:	e010      	b.n	801bc1a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bbf8:	68fa      	ldr	r2, [r7, #12]
 801bbfa:	23a5      	movs	r3, #165	@ 0xa5
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	58d3      	ldr	r3, [r2, r3]
 801bc00:	2b04      	cmp	r3, #4
 801bc02:	d005      	beq.n	801bc10 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bc04:	68fa      	ldr	r2, [r7, #12]
 801bc06:	23a5      	movs	r3, #165	@ 0xa5
 801bc08:	009b      	lsls	r3, r3, #2
 801bc0a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d104      	bne.n	801bc1a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	2180      	movs	r1, #128	@ 0x80
 801bc14:	0018      	movs	r0, r3
 801bc16:	f001 fc12 	bl	801d43e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bc1a:	68fa      	ldr	r2, [r7, #12]
 801bc1c:	23a8      	movs	r3, #168	@ 0xa8
 801bc1e:	009b      	lsls	r3, r3, #2
 801bc20:	5cd3      	ldrb	r3, [r2, r3]
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	d124      	bne.n	801bc70 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	0018      	movs	r0, r3
 801bc2a:	f7ff fe43 	bl	801b8b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bc2e:	68fa      	ldr	r2, [r7, #12]
 801bc30:	23a8      	movs	r3, #168	@ 0xa8
 801bc32:	009b      	lsls	r3, r3, #2
 801bc34:	2100      	movs	r1, #0
 801bc36:	54d1      	strb	r1, [r2, r3]
 801bc38:	e01a      	b.n	801bc70 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bc3a:	68fa      	ldr	r2, [r7, #12]
 801bc3c:	23ad      	movs	r3, #173	@ 0xad
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	58d3      	ldr	r3, [r2, r3]
 801bc42:	695b      	ldr	r3, [r3, #20]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d011      	beq.n	801bc6c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bc48:	68fa      	ldr	r2, [r7, #12]
 801bc4a:	23a7      	movs	r3, #167	@ 0xa7
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bc50:	2b03      	cmp	r3, #3
 801bc52:	d10b      	bne.n	801bc6c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bc54:	68fa      	ldr	r2, [r7, #12]
 801bc56:	23ad      	movs	r3, #173	@ 0xad
 801bc58:	009b      	lsls	r3, r3, #2
 801bc5a:	58d3      	ldr	r3, [r2, r3]
 801bc5c:	695b      	ldr	r3, [r3, #20]
 801bc5e:	220b      	movs	r2, #11
 801bc60:	18ba      	adds	r2, r7, r2
 801bc62:	7811      	ldrb	r1, [r2, #0]
 801bc64:	68fa      	ldr	r2, [r7, #12]
 801bc66:	0010      	movs	r0, r2
 801bc68:	4798      	blx	r3
 801bc6a:	e001      	b.n	801bc70 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bc6c:	2302      	movs	r3, #2
 801bc6e:	e000      	b.n	801bc72 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bc70:	2300      	movs	r3, #0
}
 801bc72:	0018      	movs	r0, r3
 801bc74:	46bd      	mov	sp, r7
 801bc76:	b006      	add	sp, #24
 801bc78:	bd80      	pop	{r7, pc}

0801bc7a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bc7a:	b580      	push	{r7, lr}
 801bc7c:	b082      	sub	sp, #8
 801bc7e:	af00      	add	r7, sp, #0
 801bc80:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bc82:	6878      	ldr	r0, [r7, #4]
 801bc84:	2340      	movs	r3, #64	@ 0x40
 801bc86:	2200      	movs	r2, #0
 801bc88:	2100      	movs	r1, #0
 801bc8a:	f001 fb76 	bl	801d37a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bc8e:	687a      	ldr	r2, [r7, #4]
 801bc90:	23ac      	movs	r3, #172	@ 0xac
 801bc92:	005b      	lsls	r3, r3, #1
 801bc94:	2101      	movs	r1, #1
 801bc96:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	23b2      	movs	r3, #178	@ 0xb2
 801bc9c:	005b      	lsls	r3, r3, #1
 801bc9e:	2140      	movs	r1, #64	@ 0x40
 801bca0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bca2:	6878      	ldr	r0, [r7, #4]
 801bca4:	2340      	movs	r3, #64	@ 0x40
 801bca6:	2200      	movs	r2, #0
 801bca8:	2180      	movs	r1, #128	@ 0x80
 801bcaa:	f001 fb66 	bl	801d37a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	2201      	movs	r2, #1
 801bcb2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	2240      	movs	r2, #64	@ 0x40
 801bcb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bcba:	687a      	ldr	r2, [r7, #4]
 801bcbc:	23a7      	movs	r3, #167	@ 0xa7
 801bcbe:	009b      	lsls	r3, r3, #2
 801bcc0:	2101      	movs	r1, #1
 801bcc2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bcc4:	687a      	ldr	r2, [r7, #4]
 801bcc6:	23a5      	movs	r3, #165	@ 0xa5
 801bcc8:	009b      	lsls	r3, r3, #2
 801bcca:	2100      	movs	r1, #0
 801bccc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bcd4:	687a      	ldr	r2, [r7, #4]
 801bcd6:	23a9      	movs	r3, #169	@ 0xa9
 801bcd8:	009b      	lsls	r3, r3, #2
 801bcda:	2100      	movs	r1, #0
 801bcdc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	23ae      	movs	r3, #174	@ 0xae
 801bce2:	009b      	lsls	r3, r3, #2
 801bce4:	58d3      	ldr	r3, [r2, r3]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d00a      	beq.n	801bd00 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	23ad      	movs	r3, #173	@ 0xad
 801bcee:	009b      	lsls	r3, r3, #2
 801bcf0:	58d3      	ldr	r3, [r2, r3]
 801bcf2:	685a      	ldr	r2, [r3, #4]
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	685b      	ldr	r3, [r3, #4]
 801bcf8:	b2d9      	uxtb	r1, r3
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	0018      	movs	r0, r3
 801bcfe:	4790      	blx	r2
  }

  return USBD_OK;
 801bd00:	2300      	movs	r3, #0
}
 801bd02:	0018      	movs	r0, r3
 801bd04:	46bd      	mov	sp, r7
 801bd06:	b002      	add	sp, #8
 801bd08:	bd80      	pop	{r7, pc}

0801bd0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bd0a:	b580      	push	{r7, lr}
 801bd0c:	b082      	sub	sp, #8
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	6078      	str	r0, [r7, #4]
 801bd12:	000a      	movs	r2, r1
 801bd14:	1cfb      	adds	r3, r7, #3
 801bd16:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	1cfa      	adds	r2, r7, #3
 801bd1c:	7812      	ldrb	r2, [r2, #0]
 801bd1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bd20:	2300      	movs	r3, #0
}
 801bd22:	0018      	movs	r0, r3
 801bd24:	46bd      	mov	sp, r7
 801bd26:	b002      	add	sp, #8
 801bd28:	bd80      	pop	{r7, pc}
	...

0801bd2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bd2c:	b580      	push	{r7, lr}
 801bd2e:	b082      	sub	sp, #8
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bd34:	687a      	ldr	r2, [r7, #4]
 801bd36:	23a7      	movs	r3, #167	@ 0xa7
 801bd38:	009b      	lsls	r3, r3, #2
 801bd3a:	5cd1      	ldrb	r1, [r2, r3]
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	4a06      	ldr	r2, [pc, #24]	@ (801bd58 <USBD_LL_Suspend+0x2c>)
 801bd40:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bd42:	687a      	ldr	r2, [r7, #4]
 801bd44:	23a7      	movs	r3, #167	@ 0xa7
 801bd46:	009b      	lsls	r3, r3, #2
 801bd48:	2104      	movs	r1, #4
 801bd4a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bd4c:	2300      	movs	r3, #0
}
 801bd4e:	0018      	movs	r0, r3
 801bd50:	46bd      	mov	sp, r7
 801bd52:	b002      	add	sp, #8
 801bd54:	bd80      	pop	{r7, pc}
 801bd56:	46c0      	nop			@ (mov r8, r8)
 801bd58:	0000029d 	.word	0x0000029d

0801bd5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b082      	sub	sp, #8
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bd64:	687a      	ldr	r2, [r7, #4]
 801bd66:	23a7      	movs	r3, #167	@ 0xa7
 801bd68:	009b      	lsls	r3, r3, #2
 801bd6a:	5cd3      	ldrb	r3, [r2, r3]
 801bd6c:	2b04      	cmp	r3, #4
 801bd6e:	d106      	bne.n	801bd7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	4a05      	ldr	r2, [pc, #20]	@ (801bd88 <USBD_LL_Resume+0x2c>)
 801bd74:	5c99      	ldrb	r1, [r3, r2]
 801bd76:	687a      	ldr	r2, [r7, #4]
 801bd78:	23a7      	movs	r3, #167	@ 0xa7
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bd7e:	2300      	movs	r3, #0
}
 801bd80:	0018      	movs	r0, r3
 801bd82:	46bd      	mov	sp, r7
 801bd84:	b002      	add	sp, #8
 801bd86:	bd80      	pop	{r7, pc}
 801bd88:	0000029d 	.word	0x0000029d

0801bd8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b082      	sub	sp, #8
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bd94:	687a      	ldr	r2, [r7, #4]
 801bd96:	23a7      	movs	r3, #167	@ 0xa7
 801bd98:	009b      	lsls	r3, r3, #2
 801bd9a:	5cd3      	ldrb	r3, [r2, r3]
 801bd9c:	2b03      	cmp	r3, #3
 801bd9e:	d10e      	bne.n	801bdbe <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bda0:	687a      	ldr	r2, [r7, #4]
 801bda2:	23ad      	movs	r3, #173	@ 0xad
 801bda4:	009b      	lsls	r3, r3, #2
 801bda6:	58d3      	ldr	r3, [r2, r3]
 801bda8:	69db      	ldr	r3, [r3, #28]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d007      	beq.n	801bdbe <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	23ad      	movs	r3, #173	@ 0xad
 801bdb2:	009b      	lsls	r3, r3, #2
 801bdb4:	58d3      	ldr	r3, [r2, r3]
 801bdb6:	69db      	ldr	r3, [r3, #28]
 801bdb8:	687a      	ldr	r2, [r7, #4]
 801bdba:	0010      	movs	r0, r2
 801bdbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bdbe:	2300      	movs	r3, #0
}
 801bdc0:	0018      	movs	r0, r3
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	b002      	add	sp, #8
 801bdc6:	bd80      	pop	{r7, pc}

0801bdc8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b084      	sub	sp, #16
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bdd2:	230f      	movs	r3, #15
 801bdd4:	18fb      	adds	r3, r7, r3
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bdda:	683b      	ldr	r3, [r7, #0]
 801bddc:	781b      	ldrb	r3, [r3, #0]
 801bdde:	001a      	movs	r2, r3
 801bde0:	2360      	movs	r3, #96	@ 0x60
 801bde2:	4013      	ands	r3, r2
 801bde4:	2b40      	cmp	r3, #64	@ 0x40
 801bde6:	d004      	beq.n	801bdf2 <USBD_StdDevReq+0x2a>
 801bde8:	d84f      	bhi.n	801be8a <USBD_StdDevReq+0xc2>
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d00b      	beq.n	801be06 <USBD_StdDevReq+0x3e>
 801bdee:	2b20      	cmp	r3, #32
 801bdf0:	d14b      	bne.n	801be8a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bdf2:	687a      	ldr	r2, [r7, #4]
 801bdf4:	23ad      	movs	r3, #173	@ 0xad
 801bdf6:	009b      	lsls	r3, r3, #2
 801bdf8:	58d3      	ldr	r3, [r2, r3]
 801bdfa:	689b      	ldr	r3, [r3, #8]
 801bdfc:	6839      	ldr	r1, [r7, #0]
 801bdfe:	687a      	ldr	r2, [r7, #4]
 801be00:	0010      	movs	r0, r2
 801be02:	4798      	blx	r3
      break;
 801be04:	e048      	b.n	801be98 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801be06:	683b      	ldr	r3, [r7, #0]
 801be08:	785b      	ldrb	r3, [r3, #1]
 801be0a:	2b09      	cmp	r3, #9
 801be0c:	d835      	bhi.n	801be7a <USBD_StdDevReq+0xb2>
 801be0e:	009a      	lsls	r2, r3, #2
 801be10:	4b25      	ldr	r3, [pc, #148]	@ (801bea8 <USBD_StdDevReq+0xe0>)
 801be12:	18d3      	adds	r3, r2, r3
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801be18:	683a      	ldr	r2, [r7, #0]
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	0011      	movs	r1, r2
 801be1e:	0018      	movs	r0, r3
 801be20:	f000 fa52 	bl	801c2c8 <USBD_GetDescriptor>
          break;
 801be24:	e030      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801be26:	683a      	ldr	r2, [r7, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	0011      	movs	r1, r2
 801be2c:	0018      	movs	r0, r3
 801be2e:	f000 fbfd 	bl	801c62c <USBD_SetAddress>
          break;
 801be32:	e029      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801be34:	683a      	ldr	r2, [r7, #0]
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	0011      	movs	r1, r2
 801be3a:	0018      	movs	r0, r3
 801be3c:	f000 fc4a 	bl	801c6d4 <USBD_SetConfig>
          break;
 801be40:	e022      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801be42:	683a      	ldr	r2, [r7, #0]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	0011      	movs	r1, r2
 801be48:	0018      	movs	r0, r3
 801be4a:	f000 fce7 	bl	801c81c <USBD_GetConfig>
          break;
 801be4e:	e01b      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801be50:	683a      	ldr	r2, [r7, #0]
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	0011      	movs	r1, r2
 801be56:	0018      	movs	r0, r3
 801be58:	f000 fd1b 	bl	801c892 <USBD_GetStatus>
          break;
 801be5c:	e014      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801be5e:	683a      	ldr	r2, [r7, #0]
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	0011      	movs	r1, r2
 801be64:	0018      	movs	r0, r3
 801be66:	f000 fd4e 	bl	801c906 <USBD_SetFeature>
          break;
 801be6a:	e00d      	b.n	801be88 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801be6c:	683a      	ldr	r2, [r7, #0]
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	0011      	movs	r1, r2
 801be72:	0018      	movs	r0, r3
 801be74:	f000 fd5d 	bl	801c932 <USBD_ClrFeature>
          break;
 801be78:	e006      	b.n	801be88 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801be7a:	683a      	ldr	r2, [r7, #0]
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	0011      	movs	r1, r2
 801be80:	0018      	movs	r0, r3
 801be82:	f000 fdb4 	bl	801c9ee <USBD_CtlError>
          break;
 801be86:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801be88:	e006      	b.n	801be98 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801be8a:	683a      	ldr	r2, [r7, #0]
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	0011      	movs	r1, r2
 801be90:	0018      	movs	r0, r3
 801be92:	f000 fdac 	bl	801c9ee <USBD_CtlError>
      break;
 801be96:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801be98:	230f      	movs	r3, #15
 801be9a:	18fb      	adds	r3, r7, r3
 801be9c:	781b      	ldrb	r3, [r3, #0]
}
 801be9e:	0018      	movs	r0, r3
 801bea0:	46bd      	mov	sp, r7
 801bea2:	b004      	add	sp, #16
 801bea4:	bd80      	pop	{r7, pc}
 801bea6:	46c0      	nop			@ (mov r8, r8)
 801bea8:	080256dc 	.word	0x080256dc

0801beac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801beac:	b5b0      	push	{r4, r5, r7, lr}
 801beae:	b084      	sub	sp, #16
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
 801beb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801beb6:	230f      	movs	r3, #15
 801beb8:	18fb      	adds	r3, r7, r3
 801beba:	2200      	movs	r2, #0
 801bebc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	781b      	ldrb	r3, [r3, #0]
 801bec2:	001a      	movs	r2, r3
 801bec4:	2360      	movs	r3, #96	@ 0x60
 801bec6:	4013      	ands	r3, r2
 801bec8:	2b40      	cmp	r3, #64	@ 0x40
 801beca:	d004      	beq.n	801bed6 <USBD_StdItfReq+0x2a>
 801becc:	d839      	bhi.n	801bf42 <USBD_StdItfReq+0x96>
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d001      	beq.n	801bed6 <USBD_StdItfReq+0x2a>
 801bed2:	2b20      	cmp	r3, #32
 801bed4:	d135      	bne.n	801bf42 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801bed6:	687a      	ldr	r2, [r7, #4]
 801bed8:	23a7      	movs	r3, #167	@ 0xa7
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	5cd3      	ldrb	r3, [r2, r3]
 801bede:	3b01      	subs	r3, #1
 801bee0:	2b02      	cmp	r3, #2
 801bee2:	d825      	bhi.n	801bf30 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	889b      	ldrh	r3, [r3, #4]
 801bee8:	b2db      	uxtb	r3, r3
 801beea:	2b01      	cmp	r3, #1
 801beec:	d819      	bhi.n	801bf22 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801beee:	687a      	ldr	r2, [r7, #4]
 801bef0:	23ad      	movs	r3, #173	@ 0xad
 801bef2:	009b      	lsls	r3, r3, #2
 801bef4:	58d3      	ldr	r3, [r2, r3]
 801bef6:	689b      	ldr	r3, [r3, #8]
 801bef8:	250f      	movs	r5, #15
 801befa:	197c      	adds	r4, r7, r5
 801befc:	6839      	ldr	r1, [r7, #0]
 801befe:	687a      	ldr	r2, [r7, #4]
 801bf00:	0010      	movs	r0, r2
 801bf02:	4798      	blx	r3
 801bf04:	0003      	movs	r3, r0
 801bf06:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	88db      	ldrh	r3, [r3, #6]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d116      	bne.n	801bf3e <USBD_StdItfReq+0x92>
 801bf10:	197b      	adds	r3, r7, r5
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d112      	bne.n	801bf3e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	0018      	movs	r0, r3
 801bf1c:	f000 fe4f 	bl	801cbbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801bf20:	e00d      	b.n	801bf3e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801bf22:	683a      	ldr	r2, [r7, #0]
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	0011      	movs	r1, r2
 801bf28:	0018      	movs	r0, r3
 801bf2a:	f000 fd60 	bl	801c9ee <USBD_CtlError>
          break;
 801bf2e:	e006      	b.n	801bf3e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801bf30:	683a      	ldr	r2, [r7, #0]
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	0011      	movs	r1, r2
 801bf36:	0018      	movs	r0, r3
 801bf38:	f000 fd59 	bl	801c9ee <USBD_CtlError>
          break;
 801bf3c:	e000      	b.n	801bf40 <USBD_StdItfReq+0x94>
          break;
 801bf3e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bf40:	e006      	b.n	801bf50 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801bf42:	683a      	ldr	r2, [r7, #0]
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	0011      	movs	r1, r2
 801bf48:	0018      	movs	r0, r3
 801bf4a:	f000 fd50 	bl	801c9ee <USBD_CtlError>
      break;
 801bf4e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bf50:	2300      	movs	r3, #0
}
 801bf52:	0018      	movs	r0, r3
 801bf54:	46bd      	mov	sp, r7
 801bf56:	b004      	add	sp, #16
 801bf58:	bdb0      	pop	{r4, r5, r7, pc}

0801bf5a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801bf5a:	b5b0      	push	{r4, r5, r7, lr}
 801bf5c:	b084      	sub	sp, #16
 801bf5e:	af00      	add	r7, sp, #0
 801bf60:	6078      	str	r0, [r7, #4]
 801bf62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801bf64:	230f      	movs	r3, #15
 801bf66:	18fb      	adds	r3, r7, r3
 801bf68:	2200      	movs	r2, #0
 801bf6a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	889a      	ldrh	r2, [r3, #4]
 801bf70:	230e      	movs	r3, #14
 801bf72:	18fb      	adds	r3, r7, r3
 801bf74:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf76:	683b      	ldr	r3, [r7, #0]
 801bf78:	781b      	ldrb	r3, [r3, #0]
 801bf7a:	001a      	movs	r2, r3
 801bf7c:	2360      	movs	r3, #96	@ 0x60
 801bf7e:	4013      	ands	r3, r2
 801bf80:	2b40      	cmp	r3, #64	@ 0x40
 801bf82:	d006      	beq.n	801bf92 <USBD_StdEPReq+0x38>
 801bf84:	d900      	bls.n	801bf88 <USBD_StdEPReq+0x2e>
 801bf86:	e190      	b.n	801c2aa <USBD_StdEPReq+0x350>
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d00c      	beq.n	801bfa6 <USBD_StdEPReq+0x4c>
 801bf8c:	2b20      	cmp	r3, #32
 801bf8e:	d000      	beq.n	801bf92 <USBD_StdEPReq+0x38>
 801bf90:	e18b      	b.n	801c2aa <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bf92:	687a      	ldr	r2, [r7, #4]
 801bf94:	23ad      	movs	r3, #173	@ 0xad
 801bf96:	009b      	lsls	r3, r3, #2
 801bf98:	58d3      	ldr	r3, [r2, r3]
 801bf9a:	689b      	ldr	r3, [r3, #8]
 801bf9c:	6839      	ldr	r1, [r7, #0]
 801bf9e:	687a      	ldr	r2, [r7, #4]
 801bfa0:	0010      	movs	r0, r2
 801bfa2:	4798      	blx	r3
      break;
 801bfa4:	e188      	b.n	801c2b8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	001a      	movs	r2, r3
 801bfac:	2360      	movs	r3, #96	@ 0x60
 801bfae:	4013      	ands	r3, r2
 801bfb0:	2b20      	cmp	r3, #32
 801bfb2:	d10f      	bne.n	801bfd4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	23ad      	movs	r3, #173	@ 0xad
 801bfb8:	009b      	lsls	r3, r3, #2
 801bfba:	58d3      	ldr	r3, [r2, r3]
 801bfbc:	689b      	ldr	r3, [r3, #8]
 801bfbe:	250f      	movs	r5, #15
 801bfc0:	197c      	adds	r4, r7, r5
 801bfc2:	6839      	ldr	r1, [r7, #0]
 801bfc4:	687a      	ldr	r2, [r7, #4]
 801bfc6:	0010      	movs	r0, r2
 801bfc8:	4798      	blx	r3
 801bfca:	0003      	movs	r3, r0
 801bfcc:	7023      	strb	r3, [r4, #0]

        return ret;
 801bfce:	197b      	adds	r3, r7, r5
 801bfd0:	781b      	ldrb	r3, [r3, #0]
 801bfd2:	e174      	b.n	801c2be <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801bfd4:	683b      	ldr	r3, [r7, #0]
 801bfd6:	785b      	ldrb	r3, [r3, #1]
 801bfd8:	2b03      	cmp	r3, #3
 801bfda:	d007      	beq.n	801bfec <USBD_StdEPReq+0x92>
 801bfdc:	dd00      	ble.n	801bfe0 <USBD_StdEPReq+0x86>
 801bfde:	e15c      	b.n	801c29a <USBD_StdEPReq+0x340>
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d100      	bne.n	801bfe6 <USBD_StdEPReq+0x8c>
 801bfe4:	e092      	b.n	801c10c <USBD_StdEPReq+0x1b2>
 801bfe6:	2b01      	cmp	r3, #1
 801bfe8:	d04b      	beq.n	801c082 <USBD_StdEPReq+0x128>
 801bfea:	e156      	b.n	801c29a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801bfec:	687a      	ldr	r2, [r7, #4]
 801bfee:	23a7      	movs	r3, #167	@ 0xa7
 801bff0:	009b      	lsls	r3, r3, #2
 801bff2:	5cd3      	ldrb	r3, [r2, r3]
 801bff4:	2b02      	cmp	r3, #2
 801bff6:	d002      	beq.n	801bffe <USBD_StdEPReq+0xa4>
 801bff8:	2b03      	cmp	r3, #3
 801bffa:	d01d      	beq.n	801c038 <USBD_StdEPReq+0xde>
 801bffc:	e039      	b.n	801c072 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bffe:	220e      	movs	r2, #14
 801c000:	18bb      	adds	r3, r7, r2
 801c002:	781b      	ldrb	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d010      	beq.n	801c02a <USBD_StdEPReq+0xd0>
 801c008:	18bb      	adds	r3, r7, r2
 801c00a:	781b      	ldrb	r3, [r3, #0]
 801c00c:	2b80      	cmp	r3, #128	@ 0x80
 801c00e:	d00c      	beq.n	801c02a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c010:	18bb      	adds	r3, r7, r2
 801c012:	781a      	ldrb	r2, [r3, #0]
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	0011      	movs	r1, r2
 801c018:	0018      	movs	r0, r3
 801c01a:	f001 fa10 	bl	801d43e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2180      	movs	r1, #128	@ 0x80
 801c022:	0018      	movs	r0, r3
 801c024:	f001 fa0b 	bl	801d43e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c028:	e02a      	b.n	801c080 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c02a:	683a      	ldr	r2, [r7, #0]
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	0011      	movs	r1, r2
 801c030:	0018      	movs	r0, r3
 801c032:	f000 fcdc 	bl	801c9ee <USBD_CtlError>
              break;
 801c036:	e023      	b.n	801c080 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c038:	683b      	ldr	r3, [r7, #0]
 801c03a:	885b      	ldrh	r3, [r3, #2]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d113      	bne.n	801c068 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c040:	220e      	movs	r2, #14
 801c042:	18bb      	adds	r3, r7, r2
 801c044:	781b      	ldrb	r3, [r3, #0]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d00e      	beq.n	801c068 <USBD_StdEPReq+0x10e>
 801c04a:	18bb      	adds	r3, r7, r2
 801c04c:	781b      	ldrb	r3, [r3, #0]
 801c04e:	2b80      	cmp	r3, #128	@ 0x80
 801c050:	d00a      	beq.n	801c068 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c052:	683b      	ldr	r3, [r7, #0]
 801c054:	88db      	ldrh	r3, [r3, #6]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d106      	bne.n	801c068 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c05a:	18bb      	adds	r3, r7, r2
 801c05c:	781a      	ldrb	r2, [r3, #0]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	0011      	movs	r1, r2
 801c062:	0018      	movs	r0, r3
 801c064:	f001 f9eb 	bl	801d43e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	0018      	movs	r0, r3
 801c06c:	f000 fda7 	bl	801cbbe <USBD_CtlSendStatus>

              break;
 801c070:	e006      	b.n	801c080 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c072:	683a      	ldr	r2, [r7, #0]
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	0011      	movs	r1, r2
 801c078:	0018      	movs	r0, r3
 801c07a:	f000 fcb8 	bl	801c9ee <USBD_CtlError>
              break;
 801c07e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c080:	e112      	b.n	801c2a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c082:	687a      	ldr	r2, [r7, #4]
 801c084:	23a7      	movs	r3, #167	@ 0xa7
 801c086:	009b      	lsls	r3, r3, #2
 801c088:	5cd3      	ldrb	r3, [r2, r3]
 801c08a:	2b02      	cmp	r3, #2
 801c08c:	d002      	beq.n	801c094 <USBD_StdEPReq+0x13a>
 801c08e:	2b03      	cmp	r3, #3
 801c090:	d01d      	beq.n	801c0ce <USBD_StdEPReq+0x174>
 801c092:	e032      	b.n	801c0fa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c094:	220e      	movs	r2, #14
 801c096:	18bb      	adds	r3, r7, r2
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d010      	beq.n	801c0c0 <USBD_StdEPReq+0x166>
 801c09e:	18bb      	adds	r3, r7, r2
 801c0a0:	781b      	ldrb	r3, [r3, #0]
 801c0a2:	2b80      	cmp	r3, #128	@ 0x80
 801c0a4:	d00c      	beq.n	801c0c0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c0a6:	18bb      	adds	r3, r7, r2
 801c0a8:	781a      	ldrb	r2, [r3, #0]
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	0011      	movs	r1, r2
 801c0ae:	0018      	movs	r0, r3
 801c0b0:	f001 f9c5 	bl	801d43e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	2180      	movs	r1, #128	@ 0x80
 801c0b8:	0018      	movs	r0, r3
 801c0ba:	f001 f9c0 	bl	801d43e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c0be:	e024      	b.n	801c10a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c0c0:	683a      	ldr	r2, [r7, #0]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	0011      	movs	r1, r2
 801c0c6:	0018      	movs	r0, r3
 801c0c8:	f000 fc91 	bl	801c9ee <USBD_CtlError>
              break;
 801c0cc:	e01d      	b.n	801c10a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	885b      	ldrh	r3, [r3, #2]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d118      	bne.n	801c108 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c0d6:	210e      	movs	r1, #14
 801c0d8:	187b      	adds	r3, r7, r1
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	227f      	movs	r2, #127	@ 0x7f
 801c0de:	4013      	ands	r3, r2
 801c0e0:	d006      	beq.n	801c0f0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c0e2:	187b      	adds	r3, r7, r1
 801c0e4:	781a      	ldrb	r2, [r3, #0]
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	0011      	movs	r1, r2
 801c0ea:	0018      	movs	r0, r3
 801c0ec:	f001 f9d2 	bl	801d494 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	0018      	movs	r0, r3
 801c0f4:	f000 fd63 	bl	801cbbe <USBD_CtlSendStatus>
              }
              break;
 801c0f8:	e006      	b.n	801c108 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c0fa:	683a      	ldr	r2, [r7, #0]
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	0011      	movs	r1, r2
 801c100:	0018      	movs	r0, r3
 801c102:	f000 fc74 	bl	801c9ee <USBD_CtlError>
              break;
 801c106:	e000      	b.n	801c10a <USBD_StdEPReq+0x1b0>
              break;
 801c108:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c10a:	e0cd      	b.n	801c2a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	23a7      	movs	r3, #167	@ 0xa7
 801c110:	009b      	lsls	r3, r3, #2
 801c112:	5cd3      	ldrb	r3, [r2, r3]
 801c114:	2b02      	cmp	r3, #2
 801c116:	d002      	beq.n	801c11e <USBD_StdEPReq+0x1c4>
 801c118:	2b03      	cmp	r3, #3
 801c11a:	d03c      	beq.n	801c196 <USBD_StdEPReq+0x23c>
 801c11c:	e0b5      	b.n	801c28a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c11e:	220e      	movs	r2, #14
 801c120:	18bb      	adds	r3, r7, r2
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d00a      	beq.n	801c13e <USBD_StdEPReq+0x1e4>
 801c128:	18bb      	adds	r3, r7, r2
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	2b80      	cmp	r3, #128	@ 0x80
 801c12e:	d006      	beq.n	801c13e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c130:	683a      	ldr	r2, [r7, #0]
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	0011      	movs	r1, r2
 801c136:	0018      	movs	r0, r3
 801c138:	f000 fc59 	bl	801c9ee <USBD_CtlError>
                break;
 801c13c:	e0ac      	b.n	801c298 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c13e:	220e      	movs	r2, #14
 801c140:	18bb      	adds	r3, r7, r2
 801c142:	781b      	ldrb	r3, [r3, #0]
 801c144:	b25b      	sxtb	r3, r3
 801c146:	2b00      	cmp	r3, #0
 801c148:	da0c      	bge.n	801c164 <USBD_StdEPReq+0x20a>
 801c14a:	18bb      	adds	r3, r7, r2
 801c14c:	781b      	ldrb	r3, [r3, #0]
 801c14e:	227f      	movs	r2, #127	@ 0x7f
 801c150:	401a      	ands	r2, r3
 801c152:	0013      	movs	r3, r2
 801c154:	009b      	lsls	r3, r3, #2
 801c156:	189b      	adds	r3, r3, r2
 801c158:	009b      	lsls	r3, r3, #2
 801c15a:	3310      	adds	r3, #16
 801c15c:	687a      	ldr	r2, [r7, #4]
 801c15e:	18d3      	adds	r3, r2, r3
 801c160:	3304      	adds	r3, #4
 801c162:	e00d      	b.n	801c180 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c164:	230e      	movs	r3, #14
 801c166:	18fb      	adds	r3, r7, r3
 801c168:	781b      	ldrb	r3, [r3, #0]
 801c16a:	227f      	movs	r2, #127	@ 0x7f
 801c16c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c16e:	0013      	movs	r3, r2
 801c170:	009b      	lsls	r3, r3, #2
 801c172:	189b      	adds	r3, r3, r2
 801c174:	009b      	lsls	r3, r3, #2
 801c176:	3351      	adds	r3, #81	@ 0x51
 801c178:	33ff      	adds	r3, #255	@ 0xff
 801c17a:	687a      	ldr	r2, [r7, #4]
 801c17c:	18d3      	adds	r3, r2, r3
 801c17e:	3304      	adds	r3, #4
 801c180:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c182:	68bb      	ldr	r3, [r7, #8]
 801c184:	2200      	movs	r2, #0
 801c186:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c188:	68b9      	ldr	r1, [r7, #8]
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	2202      	movs	r2, #2
 801c18e:	0018      	movs	r0, r3
 801c190:	f000 fcab 	bl	801caea <USBD_CtlSendData>
              break;
 801c194:	e080      	b.n	801c298 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c196:	220e      	movs	r2, #14
 801c198:	18bb      	adds	r3, r7, r2
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	b25b      	sxtb	r3, r3
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	da14      	bge.n	801c1cc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c1a2:	18bb      	adds	r3, r7, r2
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	220f      	movs	r2, #15
 801c1a8:	401a      	ands	r2, r3
 801c1aa:	6879      	ldr	r1, [r7, #4]
 801c1ac:	0013      	movs	r3, r2
 801c1ae:	009b      	lsls	r3, r3, #2
 801c1b0:	189b      	adds	r3, r3, r2
 801c1b2:	009b      	lsls	r3, r3, #2
 801c1b4:	18cb      	adds	r3, r1, r3
 801c1b6:	3318      	adds	r3, #24
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d11e      	bne.n	801c1fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c1be:	683a      	ldr	r2, [r7, #0]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	0011      	movs	r1, r2
 801c1c4:	0018      	movs	r0, r3
 801c1c6:	f000 fc12 	bl	801c9ee <USBD_CtlError>
                  break;
 801c1ca:	e065      	b.n	801c298 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c1cc:	230e      	movs	r3, #14
 801c1ce:	18fb      	adds	r3, r7, r3
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	220f      	movs	r2, #15
 801c1d4:	401a      	ands	r2, r3
 801c1d6:	6878      	ldr	r0, [r7, #4]
 801c1d8:	23ac      	movs	r3, #172	@ 0xac
 801c1da:	0059      	lsls	r1, r3, #1
 801c1dc:	0013      	movs	r3, r2
 801c1de:	009b      	lsls	r3, r3, #2
 801c1e0:	189b      	adds	r3, r3, r2
 801c1e2:	009b      	lsls	r3, r3, #2
 801c1e4:	18c3      	adds	r3, r0, r3
 801c1e6:	185b      	adds	r3, r3, r1
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d106      	bne.n	801c1fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c1ee:	683a      	ldr	r2, [r7, #0]
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	0011      	movs	r1, r2
 801c1f4:	0018      	movs	r0, r3
 801c1f6:	f000 fbfa 	bl	801c9ee <USBD_CtlError>
                  break;
 801c1fa:	e04d      	b.n	801c298 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c1fc:	220e      	movs	r2, #14
 801c1fe:	18bb      	adds	r3, r7, r2
 801c200:	781b      	ldrb	r3, [r3, #0]
 801c202:	b25b      	sxtb	r3, r3
 801c204:	2b00      	cmp	r3, #0
 801c206:	da0c      	bge.n	801c222 <USBD_StdEPReq+0x2c8>
 801c208:	18bb      	adds	r3, r7, r2
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	227f      	movs	r2, #127	@ 0x7f
 801c20e:	401a      	ands	r2, r3
 801c210:	0013      	movs	r3, r2
 801c212:	009b      	lsls	r3, r3, #2
 801c214:	189b      	adds	r3, r3, r2
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	3310      	adds	r3, #16
 801c21a:	687a      	ldr	r2, [r7, #4]
 801c21c:	18d3      	adds	r3, r2, r3
 801c21e:	3304      	adds	r3, #4
 801c220:	e00d      	b.n	801c23e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c222:	230e      	movs	r3, #14
 801c224:	18fb      	adds	r3, r7, r3
 801c226:	781b      	ldrb	r3, [r3, #0]
 801c228:	227f      	movs	r2, #127	@ 0x7f
 801c22a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c22c:	0013      	movs	r3, r2
 801c22e:	009b      	lsls	r3, r3, #2
 801c230:	189b      	adds	r3, r3, r2
 801c232:	009b      	lsls	r3, r3, #2
 801c234:	3351      	adds	r3, #81	@ 0x51
 801c236:	33ff      	adds	r3, #255	@ 0xff
 801c238:	687a      	ldr	r2, [r7, #4]
 801c23a:	18d3      	adds	r3, r2, r3
 801c23c:	3304      	adds	r3, #4
 801c23e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c240:	220e      	movs	r2, #14
 801c242:	18bb      	adds	r3, r7, r2
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d003      	beq.n	801c252 <USBD_StdEPReq+0x2f8>
 801c24a:	18bb      	adds	r3, r7, r2
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	2b80      	cmp	r3, #128	@ 0x80
 801c250:	d103      	bne.n	801c25a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	2200      	movs	r2, #0
 801c256:	601a      	str	r2, [r3, #0]
 801c258:	e010      	b.n	801c27c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c25a:	230e      	movs	r3, #14
 801c25c:	18fb      	adds	r3, r7, r3
 801c25e:	781a      	ldrb	r2, [r3, #0]
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	0011      	movs	r1, r2
 801c264:	0018      	movs	r0, r3
 801c266:	f001 f940 	bl	801d4ea <USBD_LL_IsStallEP>
 801c26a:	1e03      	subs	r3, r0, #0
 801c26c:	d003      	beq.n	801c276 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	2201      	movs	r2, #1
 801c272:	601a      	str	r2, [r3, #0]
 801c274:	e002      	b.n	801c27c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	2200      	movs	r2, #0
 801c27a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c27c:	68b9      	ldr	r1, [r7, #8]
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	2202      	movs	r2, #2
 801c282:	0018      	movs	r0, r3
 801c284:	f000 fc31 	bl	801caea <USBD_CtlSendData>
              break;
 801c288:	e006      	b.n	801c298 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c28a:	683a      	ldr	r2, [r7, #0]
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	0011      	movs	r1, r2
 801c290:	0018      	movs	r0, r3
 801c292:	f000 fbac 	bl	801c9ee <USBD_CtlError>
              break;
 801c296:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c298:	e006      	b.n	801c2a8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c29a:	683a      	ldr	r2, [r7, #0]
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	0011      	movs	r1, r2
 801c2a0:	0018      	movs	r0, r3
 801c2a2:	f000 fba4 	bl	801c9ee <USBD_CtlError>
          break;
 801c2a6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c2a8:	e006      	b.n	801c2b8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	0011      	movs	r1, r2
 801c2b0:	0018      	movs	r0, r3
 801c2b2:	f000 fb9c 	bl	801c9ee <USBD_CtlError>
      break;
 801c2b6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c2b8:	230f      	movs	r3, #15
 801c2ba:	18fb      	adds	r3, r7, r3
 801c2bc:	781b      	ldrb	r3, [r3, #0]
}
 801c2be:	0018      	movs	r0, r3
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	b004      	add	sp, #16
 801c2c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c2c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b084      	sub	sp, #16
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	6078      	str	r0, [r7, #4]
 801c2d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c2d2:	2308      	movs	r3, #8
 801c2d4:	18fb      	adds	r3, r7, r3
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c2da:	2300      	movs	r3, #0
 801c2dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c2de:	230b      	movs	r3, #11
 801c2e0:	18fb      	adds	r3, r7, r3
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	885b      	ldrh	r3, [r3, #2]
 801c2ea:	0a1b      	lsrs	r3, r3, #8
 801c2ec:	b29b      	uxth	r3, r3
 801c2ee:	2b07      	cmp	r3, #7
 801c2f0:	d900      	bls.n	801c2f4 <USBD_GetDescriptor+0x2c>
 801c2f2:	e159      	b.n	801c5a8 <USBD_GetDescriptor+0x2e0>
 801c2f4:	009a      	lsls	r2, r3, #2
 801c2f6:	4bcb      	ldr	r3, [pc, #812]	@ (801c624 <USBD_GetDescriptor+0x35c>)
 801c2f8:	18d3      	adds	r3, r2, r3
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c2fe:	687a      	ldr	r2, [r7, #4]
 801c300:	23ac      	movs	r3, #172	@ 0xac
 801c302:	009b      	lsls	r3, r3, #2
 801c304:	58d3      	ldr	r3, [r2, r3]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	687a      	ldr	r2, [r7, #4]
 801c30a:	7c12      	ldrb	r2, [r2, #16]
 801c30c:	2108      	movs	r1, #8
 801c30e:	1879      	adds	r1, r7, r1
 801c310:	0010      	movs	r0, r2
 801c312:	4798      	blx	r3
 801c314:	0003      	movs	r3, r0
 801c316:	60fb      	str	r3, [r7, #12]
      break;
 801c318:	e153      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	7c1b      	ldrb	r3, [r3, #16]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d10f      	bne.n	801c342 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c322:	687a      	ldr	r2, [r7, #4]
 801c324:	23ad      	movs	r3, #173	@ 0xad
 801c326:	009b      	lsls	r3, r3, #2
 801c328:	58d3      	ldr	r3, [r2, r3]
 801c32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c32c:	2208      	movs	r2, #8
 801c32e:	18ba      	adds	r2, r7, r2
 801c330:	0010      	movs	r0, r2
 801c332:	4798      	blx	r3
 801c334:	0003      	movs	r3, r0
 801c336:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	3301      	adds	r3, #1
 801c33c:	2202      	movs	r2, #2
 801c33e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c340:	e13f      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c342:	687a      	ldr	r2, [r7, #4]
 801c344:	23ad      	movs	r3, #173	@ 0xad
 801c346:	009b      	lsls	r3, r3, #2
 801c348:	58d3      	ldr	r3, [r2, r3]
 801c34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c34c:	2208      	movs	r2, #8
 801c34e:	18ba      	adds	r2, r7, r2
 801c350:	0010      	movs	r0, r2
 801c352:	4798      	blx	r3
 801c354:	0003      	movs	r3, r0
 801c356:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	3301      	adds	r3, #1
 801c35c:	2202      	movs	r2, #2
 801c35e:	701a      	strb	r2, [r3, #0]
      break;
 801c360:	e12f      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	885b      	ldrh	r3, [r3, #2]
 801c366:	b2db      	uxtb	r3, r3
 801c368:	2b05      	cmp	r3, #5
 801c36a:	d900      	bls.n	801c36e <USBD_GetDescriptor+0xa6>
 801c36c:	e0d0      	b.n	801c510 <USBD_GetDescriptor+0x248>
 801c36e:	009a      	lsls	r2, r3, #2
 801c370:	4bad      	ldr	r3, [pc, #692]	@ (801c628 <USBD_GetDescriptor+0x360>)
 801c372:	18d3      	adds	r3, r2, r3
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	23ac      	movs	r3, #172	@ 0xac
 801c37c:	009b      	lsls	r3, r3, #2
 801c37e:	58d3      	ldr	r3, [r2, r3]
 801c380:	685b      	ldr	r3, [r3, #4]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d00d      	beq.n	801c3a2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	23ac      	movs	r3, #172	@ 0xac
 801c38a:	009b      	lsls	r3, r3, #2
 801c38c:	58d3      	ldr	r3, [r2, r3]
 801c38e:	685b      	ldr	r3, [r3, #4]
 801c390:	687a      	ldr	r2, [r7, #4]
 801c392:	7c12      	ldrb	r2, [r2, #16]
 801c394:	2108      	movs	r1, #8
 801c396:	1879      	adds	r1, r7, r1
 801c398:	0010      	movs	r0, r2
 801c39a:	4798      	blx	r3
 801c39c:	0003      	movs	r3, r0
 801c39e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3a0:	e0c3      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3a2:	683a      	ldr	r2, [r7, #0]
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	0011      	movs	r1, r2
 801c3a8:	0018      	movs	r0, r3
 801c3aa:	f000 fb20 	bl	801c9ee <USBD_CtlError>
            err++;
 801c3ae:	210b      	movs	r1, #11
 801c3b0:	187b      	adds	r3, r7, r1
 801c3b2:	781a      	ldrb	r2, [r3, #0]
 801c3b4:	187b      	adds	r3, r7, r1
 801c3b6:	3201      	adds	r2, #1
 801c3b8:	701a      	strb	r2, [r3, #0]
          break;
 801c3ba:	e0b6      	b.n	801c52a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c3bc:	687a      	ldr	r2, [r7, #4]
 801c3be:	23ac      	movs	r3, #172	@ 0xac
 801c3c0:	009b      	lsls	r3, r3, #2
 801c3c2:	58d3      	ldr	r3, [r2, r3]
 801c3c4:	689b      	ldr	r3, [r3, #8]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d00d      	beq.n	801c3e6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c3ca:	687a      	ldr	r2, [r7, #4]
 801c3cc:	23ac      	movs	r3, #172	@ 0xac
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	58d3      	ldr	r3, [r2, r3]
 801c3d2:	689b      	ldr	r3, [r3, #8]
 801c3d4:	687a      	ldr	r2, [r7, #4]
 801c3d6:	7c12      	ldrb	r2, [r2, #16]
 801c3d8:	2108      	movs	r1, #8
 801c3da:	1879      	adds	r1, r7, r1
 801c3dc:	0010      	movs	r0, r2
 801c3de:	4798      	blx	r3
 801c3e0:	0003      	movs	r3, r0
 801c3e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3e4:	e0a1      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3e6:	683a      	ldr	r2, [r7, #0]
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	0011      	movs	r1, r2
 801c3ec:	0018      	movs	r0, r3
 801c3ee:	f000 fafe 	bl	801c9ee <USBD_CtlError>
            err++;
 801c3f2:	210b      	movs	r1, #11
 801c3f4:	187b      	adds	r3, r7, r1
 801c3f6:	781a      	ldrb	r2, [r3, #0]
 801c3f8:	187b      	adds	r3, r7, r1
 801c3fa:	3201      	adds	r2, #1
 801c3fc:	701a      	strb	r2, [r3, #0]
          break;
 801c3fe:	e094      	b.n	801c52a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c400:	687a      	ldr	r2, [r7, #4]
 801c402:	23ac      	movs	r3, #172	@ 0xac
 801c404:	009b      	lsls	r3, r3, #2
 801c406:	58d3      	ldr	r3, [r2, r3]
 801c408:	68db      	ldr	r3, [r3, #12]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d00d      	beq.n	801c42a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c40e:	687a      	ldr	r2, [r7, #4]
 801c410:	23ac      	movs	r3, #172	@ 0xac
 801c412:	009b      	lsls	r3, r3, #2
 801c414:	58d3      	ldr	r3, [r2, r3]
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	687a      	ldr	r2, [r7, #4]
 801c41a:	7c12      	ldrb	r2, [r2, #16]
 801c41c:	2108      	movs	r1, #8
 801c41e:	1879      	adds	r1, r7, r1
 801c420:	0010      	movs	r0, r2
 801c422:	4798      	blx	r3
 801c424:	0003      	movs	r3, r0
 801c426:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c428:	e07f      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c42a:	683a      	ldr	r2, [r7, #0]
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	0011      	movs	r1, r2
 801c430:	0018      	movs	r0, r3
 801c432:	f000 fadc 	bl	801c9ee <USBD_CtlError>
            err++;
 801c436:	210b      	movs	r1, #11
 801c438:	187b      	adds	r3, r7, r1
 801c43a:	781a      	ldrb	r2, [r3, #0]
 801c43c:	187b      	adds	r3, r7, r1
 801c43e:	3201      	adds	r2, #1
 801c440:	701a      	strb	r2, [r3, #0]
          break;
 801c442:	e072      	b.n	801c52a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c444:	687a      	ldr	r2, [r7, #4]
 801c446:	23ac      	movs	r3, #172	@ 0xac
 801c448:	009b      	lsls	r3, r3, #2
 801c44a:	58d3      	ldr	r3, [r2, r3]
 801c44c:	691b      	ldr	r3, [r3, #16]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d00d      	beq.n	801c46e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c452:	687a      	ldr	r2, [r7, #4]
 801c454:	23ac      	movs	r3, #172	@ 0xac
 801c456:	009b      	lsls	r3, r3, #2
 801c458:	58d3      	ldr	r3, [r2, r3]
 801c45a:	691b      	ldr	r3, [r3, #16]
 801c45c:	687a      	ldr	r2, [r7, #4]
 801c45e:	7c12      	ldrb	r2, [r2, #16]
 801c460:	2108      	movs	r1, #8
 801c462:	1879      	adds	r1, r7, r1
 801c464:	0010      	movs	r0, r2
 801c466:	4798      	blx	r3
 801c468:	0003      	movs	r3, r0
 801c46a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c46c:	e05d      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c46e:	683a      	ldr	r2, [r7, #0]
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	0011      	movs	r1, r2
 801c474:	0018      	movs	r0, r3
 801c476:	f000 faba 	bl	801c9ee <USBD_CtlError>
            err++;
 801c47a:	210b      	movs	r1, #11
 801c47c:	187b      	adds	r3, r7, r1
 801c47e:	781a      	ldrb	r2, [r3, #0]
 801c480:	187b      	adds	r3, r7, r1
 801c482:	3201      	adds	r2, #1
 801c484:	701a      	strb	r2, [r3, #0]
          break;
 801c486:	e050      	b.n	801c52a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c488:	687a      	ldr	r2, [r7, #4]
 801c48a:	23ac      	movs	r3, #172	@ 0xac
 801c48c:	009b      	lsls	r3, r3, #2
 801c48e:	58d3      	ldr	r3, [r2, r3]
 801c490:	695b      	ldr	r3, [r3, #20]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d00d      	beq.n	801c4b2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c496:	687a      	ldr	r2, [r7, #4]
 801c498:	23ac      	movs	r3, #172	@ 0xac
 801c49a:	009b      	lsls	r3, r3, #2
 801c49c:	58d3      	ldr	r3, [r2, r3]
 801c49e:	695b      	ldr	r3, [r3, #20]
 801c4a0:	687a      	ldr	r2, [r7, #4]
 801c4a2:	7c12      	ldrb	r2, [r2, #16]
 801c4a4:	2108      	movs	r1, #8
 801c4a6:	1879      	adds	r1, r7, r1
 801c4a8:	0010      	movs	r0, r2
 801c4aa:	4798      	blx	r3
 801c4ac:	0003      	movs	r3, r0
 801c4ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c4b0:	e03b      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c4b2:	683a      	ldr	r2, [r7, #0]
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	0011      	movs	r1, r2
 801c4b8:	0018      	movs	r0, r3
 801c4ba:	f000 fa98 	bl	801c9ee <USBD_CtlError>
            err++;
 801c4be:	210b      	movs	r1, #11
 801c4c0:	187b      	adds	r3, r7, r1
 801c4c2:	781a      	ldrb	r2, [r3, #0]
 801c4c4:	187b      	adds	r3, r7, r1
 801c4c6:	3201      	adds	r2, #1
 801c4c8:	701a      	strb	r2, [r3, #0]
          break;
 801c4ca:	e02e      	b.n	801c52a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c4cc:	687a      	ldr	r2, [r7, #4]
 801c4ce:	23ac      	movs	r3, #172	@ 0xac
 801c4d0:	009b      	lsls	r3, r3, #2
 801c4d2:	58d3      	ldr	r3, [r2, r3]
 801c4d4:	699b      	ldr	r3, [r3, #24]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d00d      	beq.n	801c4f6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c4da:	687a      	ldr	r2, [r7, #4]
 801c4dc:	23ac      	movs	r3, #172	@ 0xac
 801c4de:	009b      	lsls	r3, r3, #2
 801c4e0:	58d3      	ldr	r3, [r2, r3]
 801c4e2:	699b      	ldr	r3, [r3, #24]
 801c4e4:	687a      	ldr	r2, [r7, #4]
 801c4e6:	7c12      	ldrb	r2, [r2, #16]
 801c4e8:	2108      	movs	r1, #8
 801c4ea:	1879      	adds	r1, r7, r1
 801c4ec:	0010      	movs	r0, r2
 801c4ee:	4798      	blx	r3
 801c4f0:	0003      	movs	r3, r0
 801c4f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c4f4:	e019      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c4f6:	683a      	ldr	r2, [r7, #0]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	0011      	movs	r1, r2
 801c4fc:	0018      	movs	r0, r3
 801c4fe:	f000 fa76 	bl	801c9ee <USBD_CtlError>
            err++;
 801c502:	210b      	movs	r1, #11
 801c504:	187b      	adds	r3, r7, r1
 801c506:	781a      	ldrb	r2, [r3, #0]
 801c508:	187b      	adds	r3, r7, r1
 801c50a:	3201      	adds	r2, #1
 801c50c:	701a      	strb	r2, [r3, #0]
          break;
 801c50e:	e00c      	b.n	801c52a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c510:	683a      	ldr	r2, [r7, #0]
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	0011      	movs	r1, r2
 801c516:	0018      	movs	r0, r3
 801c518:	f000 fa69 	bl	801c9ee <USBD_CtlError>
          err++;
 801c51c:	210b      	movs	r1, #11
 801c51e:	187b      	adds	r3, r7, r1
 801c520:	781a      	ldrb	r2, [r3, #0]
 801c522:	187b      	adds	r3, r7, r1
 801c524:	3201      	adds	r2, #1
 801c526:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c528:	e04b      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>
 801c52a:	e04a      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	7c1b      	ldrb	r3, [r3, #16]
 801c530:	2b00      	cmp	r3, #0
 801c532:	d10b      	bne.n	801c54c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c534:	687a      	ldr	r2, [r7, #4]
 801c536:	23ad      	movs	r3, #173	@ 0xad
 801c538:	009b      	lsls	r3, r3, #2
 801c53a:	58d3      	ldr	r3, [r2, r3]
 801c53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c53e:	2208      	movs	r2, #8
 801c540:	18ba      	adds	r2, r7, r2
 801c542:	0010      	movs	r0, r2
 801c544:	4798      	blx	r3
 801c546:	0003      	movs	r3, r0
 801c548:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c54a:	e03a      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c54c:	683a      	ldr	r2, [r7, #0]
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	0011      	movs	r1, r2
 801c552:	0018      	movs	r0, r3
 801c554:	f000 fa4b 	bl	801c9ee <USBD_CtlError>
        err++;
 801c558:	210b      	movs	r1, #11
 801c55a:	187b      	adds	r3, r7, r1
 801c55c:	781a      	ldrb	r2, [r3, #0]
 801c55e:	187b      	adds	r3, r7, r1
 801c560:	3201      	adds	r2, #1
 801c562:	701a      	strb	r2, [r3, #0]
      break;
 801c564:	e02d      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	7c1b      	ldrb	r3, [r3, #16]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d10f      	bne.n	801c58e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c56e:	687a      	ldr	r2, [r7, #4]
 801c570:	23ad      	movs	r3, #173	@ 0xad
 801c572:	009b      	lsls	r3, r3, #2
 801c574:	58d3      	ldr	r3, [r2, r3]
 801c576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c578:	2208      	movs	r2, #8
 801c57a:	18ba      	adds	r2, r7, r2
 801c57c:	0010      	movs	r0, r2
 801c57e:	4798      	blx	r3
 801c580:	0003      	movs	r3, r0
 801c582:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	3301      	adds	r3, #1
 801c588:	2207      	movs	r2, #7
 801c58a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c58c:	e019      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c58e:	683a      	ldr	r2, [r7, #0]
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	0011      	movs	r1, r2
 801c594:	0018      	movs	r0, r3
 801c596:	f000 fa2a 	bl	801c9ee <USBD_CtlError>
        err++;
 801c59a:	210b      	movs	r1, #11
 801c59c:	187b      	adds	r3, r7, r1
 801c59e:	781a      	ldrb	r2, [r3, #0]
 801c5a0:	187b      	adds	r3, r7, r1
 801c5a2:	3201      	adds	r2, #1
 801c5a4:	701a      	strb	r2, [r3, #0]
      break;
 801c5a6:	e00c      	b.n	801c5c2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c5a8:	683a      	ldr	r2, [r7, #0]
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	0011      	movs	r1, r2
 801c5ae:	0018      	movs	r0, r3
 801c5b0:	f000 fa1d 	bl	801c9ee <USBD_CtlError>
      err++;
 801c5b4:	210b      	movs	r1, #11
 801c5b6:	187b      	adds	r3, r7, r1
 801c5b8:	781a      	ldrb	r2, [r3, #0]
 801c5ba:	187b      	adds	r3, r7, r1
 801c5bc:	3201      	adds	r2, #1
 801c5be:	701a      	strb	r2, [r3, #0]
      break;
 801c5c0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c5c2:	230b      	movs	r3, #11
 801c5c4:	18fb      	adds	r3, r7, r3
 801c5c6:	781b      	ldrb	r3, [r3, #0]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d127      	bne.n	801c61c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c5cc:	2108      	movs	r1, #8
 801c5ce:	187b      	adds	r3, r7, r1
 801c5d0:	881b      	ldrh	r3, [r3, #0]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d019      	beq.n	801c60a <USBD_GetDescriptor+0x342>
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	88db      	ldrh	r3, [r3, #6]
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d015      	beq.n	801c60a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	88da      	ldrh	r2, [r3, #6]
 801c5e2:	187b      	adds	r3, r7, r1
 801c5e4:	881b      	ldrh	r3, [r3, #0]
 801c5e6:	1c18      	adds	r0, r3, #0
 801c5e8:	1c11      	adds	r1, r2, #0
 801c5ea:	b28a      	uxth	r2, r1
 801c5ec:	b283      	uxth	r3, r0
 801c5ee:	429a      	cmp	r2, r3
 801c5f0:	d900      	bls.n	801c5f4 <USBD_GetDescriptor+0x32c>
 801c5f2:	1c01      	adds	r1, r0, #0
 801c5f4:	b28a      	uxth	r2, r1
 801c5f6:	2108      	movs	r1, #8
 801c5f8:	187b      	adds	r3, r7, r1
 801c5fa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c5fc:	187b      	adds	r3, r7, r1
 801c5fe:	881a      	ldrh	r2, [r3, #0]
 801c600:	68f9      	ldr	r1, [r7, #12]
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	0018      	movs	r0, r3
 801c606:	f000 fa70 	bl	801caea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c60a:	683b      	ldr	r3, [r7, #0]
 801c60c:	88db      	ldrh	r3, [r3, #6]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d105      	bne.n	801c61e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	0018      	movs	r0, r3
 801c616:	f000 fad2 	bl	801cbbe <USBD_CtlSendStatus>
 801c61a:	e000      	b.n	801c61e <USBD_GetDescriptor+0x356>
    return;
 801c61c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c61e:	46bd      	mov	sp, r7
 801c620:	b004      	add	sp, #16
 801c622:	bd80      	pop	{r7, pc}
 801c624:	08025704 	.word	0x08025704
 801c628:	08025724 	.word	0x08025724

0801c62c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c62c:	b590      	push	{r4, r7, lr}
 801c62e:	b085      	sub	sp, #20
 801c630:	af00      	add	r7, sp, #0
 801c632:	6078      	str	r0, [r7, #4]
 801c634:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	889b      	ldrh	r3, [r3, #4]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d13d      	bne.n	801c6ba <USBD_SetAddress+0x8e>
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	88db      	ldrh	r3, [r3, #6]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d139      	bne.n	801c6ba <USBD_SetAddress+0x8e>
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	885b      	ldrh	r3, [r3, #2]
 801c64a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c64c:	d835      	bhi.n	801c6ba <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	885b      	ldrh	r3, [r3, #2]
 801c652:	b2da      	uxtb	r2, r3
 801c654:	230f      	movs	r3, #15
 801c656:	18fb      	adds	r3, r7, r3
 801c658:	217f      	movs	r1, #127	@ 0x7f
 801c65a:	400a      	ands	r2, r1
 801c65c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	23a7      	movs	r3, #167	@ 0xa7
 801c662:	009b      	lsls	r3, r3, #2
 801c664:	5cd3      	ldrb	r3, [r2, r3]
 801c666:	2b03      	cmp	r3, #3
 801c668:	d106      	bne.n	801c678 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c66a:	683a      	ldr	r2, [r7, #0]
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	0011      	movs	r1, r2
 801c670:	0018      	movs	r0, r3
 801c672:	f000 f9bc 	bl	801c9ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c676:	e027      	b.n	801c6c8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	240f      	movs	r4, #15
 801c67c:	193a      	adds	r2, r7, r4
 801c67e:	4914      	ldr	r1, [pc, #80]	@ (801c6d0 <USBD_SetAddress+0xa4>)
 801c680:	7812      	ldrb	r2, [r2, #0]
 801c682:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c684:	193b      	adds	r3, r7, r4
 801c686:	781a      	ldrb	r2, [r3, #0]
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	0011      	movs	r1, r2
 801c68c:	0018      	movs	r0, r3
 801c68e:	f000 ff5d 	bl	801d54c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	0018      	movs	r0, r3
 801c696:	f000 fa92 	bl	801cbbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c69a:	193b      	adds	r3, r7, r4
 801c69c:	781b      	ldrb	r3, [r3, #0]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d005      	beq.n	801c6ae <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c6a2:	687a      	ldr	r2, [r7, #4]
 801c6a4:	23a7      	movs	r3, #167	@ 0xa7
 801c6a6:	009b      	lsls	r3, r3, #2
 801c6a8:	2102      	movs	r1, #2
 801c6aa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6ac:	e00c      	b.n	801c6c8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c6ae:	687a      	ldr	r2, [r7, #4]
 801c6b0:	23a7      	movs	r3, #167	@ 0xa7
 801c6b2:	009b      	lsls	r3, r3, #2
 801c6b4:	2101      	movs	r1, #1
 801c6b6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6b8:	e006      	b.n	801c6c8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c6ba:	683a      	ldr	r2, [r7, #0]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	0011      	movs	r1, r2
 801c6c0:	0018      	movs	r0, r3
 801c6c2:	f000 f994 	bl	801c9ee <USBD_CtlError>
  }
}
 801c6c6:	46c0      	nop			@ (mov r8, r8)
 801c6c8:	46c0      	nop			@ (mov r8, r8)
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	b005      	add	sp, #20
 801c6ce:	bd90      	pop	{r4, r7, pc}
 801c6d0:	0000029e 	.word	0x0000029e

0801c6d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b082      	sub	sp, #8
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
 801c6dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c6de:	683b      	ldr	r3, [r7, #0]
 801c6e0:	885b      	ldrh	r3, [r3, #2]
 801c6e2:	b2da      	uxtb	r2, r3
 801c6e4:	4b4c      	ldr	r3, [pc, #304]	@ (801c818 <USBD_SetConfig+0x144>)
 801c6e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c6e8:	4b4b      	ldr	r3, [pc, #300]	@ (801c818 <USBD_SetConfig+0x144>)
 801c6ea:	781b      	ldrb	r3, [r3, #0]
 801c6ec:	2b01      	cmp	r3, #1
 801c6ee:	d906      	bls.n	801c6fe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c6f0:	683a      	ldr	r2, [r7, #0]
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	0011      	movs	r1, r2
 801c6f6:	0018      	movs	r0, r3
 801c6f8:	f000 f979 	bl	801c9ee <USBD_CtlError>
 801c6fc:	e088      	b.n	801c810 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c6fe:	687a      	ldr	r2, [r7, #4]
 801c700:	23a7      	movs	r3, #167	@ 0xa7
 801c702:	009b      	lsls	r3, r3, #2
 801c704:	5cd3      	ldrb	r3, [r2, r3]
 801c706:	2b02      	cmp	r3, #2
 801c708:	d002      	beq.n	801c710 <USBD_SetConfig+0x3c>
 801c70a:	2b03      	cmp	r3, #3
 801c70c:	d029      	beq.n	801c762 <USBD_SetConfig+0x8e>
 801c70e:	e071      	b.n	801c7f4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c710:	4b41      	ldr	r3, [pc, #260]	@ (801c818 <USBD_SetConfig+0x144>)
 801c712:	781b      	ldrb	r3, [r3, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d01f      	beq.n	801c758 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c718:	4b3f      	ldr	r3, [pc, #252]	@ (801c818 <USBD_SetConfig+0x144>)
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	001a      	movs	r2, r3
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c722:	687a      	ldr	r2, [r7, #4]
 801c724:	23a7      	movs	r3, #167	@ 0xa7
 801c726:	009b      	lsls	r3, r3, #2
 801c728:	2103      	movs	r1, #3
 801c72a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c72c:	4b3a      	ldr	r3, [pc, #232]	@ (801c818 <USBD_SetConfig+0x144>)
 801c72e:	781a      	ldrb	r2, [r3, #0]
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	0011      	movs	r1, r2
 801c734:	0018      	movs	r0, r3
 801c736:	f7ff f8c6 	bl	801b8c6 <USBD_SetClassConfig>
 801c73a:	0003      	movs	r3, r0
 801c73c:	2b02      	cmp	r3, #2
 801c73e:	d106      	bne.n	801c74e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c740:	683a      	ldr	r2, [r7, #0]
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	0011      	movs	r1, r2
 801c746:	0018      	movs	r0, r3
 801c748:	f000 f951 	bl	801c9ee <USBD_CtlError>
            return;
 801c74c:	e060      	b.n	801c810 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	0018      	movs	r0, r3
 801c752:	f000 fa34 	bl	801cbbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c756:	e05b      	b.n	801c810 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	0018      	movs	r0, r3
 801c75c:	f000 fa2f 	bl	801cbbe <USBD_CtlSendStatus>
        break;
 801c760:	e056      	b.n	801c810 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c762:	4b2d      	ldr	r3, [pc, #180]	@ (801c818 <USBD_SetConfig+0x144>)
 801c764:	781b      	ldrb	r3, [r3, #0]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d115      	bne.n	801c796 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c76a:	687a      	ldr	r2, [r7, #4]
 801c76c:	23a7      	movs	r3, #167	@ 0xa7
 801c76e:	009b      	lsls	r3, r3, #2
 801c770:	2102      	movs	r1, #2
 801c772:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c774:	4b28      	ldr	r3, [pc, #160]	@ (801c818 <USBD_SetConfig+0x144>)
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	001a      	movs	r2, r3
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c77e:	4b26      	ldr	r3, [pc, #152]	@ (801c818 <USBD_SetConfig+0x144>)
 801c780:	781a      	ldrb	r2, [r3, #0]
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	0011      	movs	r1, r2
 801c786:	0018      	movs	r0, r3
 801c788:	f7ff f8c4 	bl	801b914 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	0018      	movs	r0, r3
 801c790:	f000 fa15 	bl	801cbbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c794:	e03c      	b.n	801c810 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c796:	4b20      	ldr	r3, [pc, #128]	@ (801c818 <USBD_SetConfig+0x144>)
 801c798:	781b      	ldrb	r3, [r3, #0]
 801c79a:	001a      	movs	r2, r3
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	685b      	ldr	r3, [r3, #4]
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d022      	beq.n	801c7ea <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	685b      	ldr	r3, [r3, #4]
 801c7a8:	b2da      	uxtb	r2, r3
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	0011      	movs	r1, r2
 801c7ae:	0018      	movs	r0, r3
 801c7b0:	f7ff f8b0 	bl	801b914 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c7b4:	4b18      	ldr	r3, [pc, #96]	@ (801c818 <USBD_SetConfig+0x144>)
 801c7b6:	781b      	ldrb	r3, [r3, #0]
 801c7b8:	001a      	movs	r2, r3
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c7be:	4b16      	ldr	r3, [pc, #88]	@ (801c818 <USBD_SetConfig+0x144>)
 801c7c0:	781a      	ldrb	r2, [r3, #0]
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	0011      	movs	r1, r2
 801c7c6:	0018      	movs	r0, r3
 801c7c8:	f7ff f87d 	bl	801b8c6 <USBD_SetClassConfig>
 801c7cc:	0003      	movs	r3, r0
 801c7ce:	2b02      	cmp	r3, #2
 801c7d0:	d106      	bne.n	801c7e0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c7d2:	683a      	ldr	r2, [r7, #0]
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	0011      	movs	r1, r2
 801c7d8:	0018      	movs	r0, r3
 801c7da:	f000 f908 	bl	801c9ee <USBD_CtlError>
            return;
 801c7de:	e017      	b.n	801c810 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	0018      	movs	r0, r3
 801c7e4:	f000 f9eb 	bl	801cbbe <USBD_CtlSendStatus>
        break;
 801c7e8:	e012      	b.n	801c810 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	0018      	movs	r0, r3
 801c7ee:	f000 f9e6 	bl	801cbbe <USBD_CtlSendStatus>
        break;
 801c7f2:	e00d      	b.n	801c810 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c7f4:	683a      	ldr	r2, [r7, #0]
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	0011      	movs	r1, r2
 801c7fa:	0018      	movs	r0, r3
 801c7fc:	f000 f8f7 	bl	801c9ee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c800:	4b05      	ldr	r3, [pc, #20]	@ (801c818 <USBD_SetConfig+0x144>)
 801c802:	781a      	ldrb	r2, [r3, #0]
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	0011      	movs	r1, r2
 801c808:	0018      	movs	r0, r3
 801c80a:	f7ff f883 	bl	801b914 <USBD_ClrClassConfig>
        break;
 801c80e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c810:	46bd      	mov	sp, r7
 801c812:	b002      	add	sp, #8
 801c814:	bd80      	pop	{r7, pc}
 801c816:	46c0      	nop			@ (mov r8, r8)
 801c818:	200023d8 	.word	0x200023d8

0801c81c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
 801c824:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c826:	683b      	ldr	r3, [r7, #0]
 801c828:	88db      	ldrh	r3, [r3, #6]
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d006      	beq.n	801c83c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	0011      	movs	r1, r2
 801c834:	0018      	movs	r0, r3
 801c836:	f000 f8da 	bl	801c9ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c83a:	e026      	b.n	801c88a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c83c:	687a      	ldr	r2, [r7, #4]
 801c83e:	23a7      	movs	r3, #167	@ 0xa7
 801c840:	009b      	lsls	r3, r3, #2
 801c842:	5cd3      	ldrb	r3, [r2, r3]
 801c844:	2b02      	cmp	r3, #2
 801c846:	dc02      	bgt.n	801c84e <USBD_GetConfig+0x32>
 801c848:	2b00      	cmp	r3, #0
 801c84a:	dc03      	bgt.n	801c854 <USBD_GetConfig+0x38>
 801c84c:	e016      	b.n	801c87c <USBD_GetConfig+0x60>
 801c84e:	2b03      	cmp	r3, #3
 801c850:	d00c      	beq.n	801c86c <USBD_GetConfig+0x50>
 801c852:	e013      	b.n	801c87c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	2200      	movs	r2, #0
 801c858:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	3308      	adds	r3, #8
 801c85e:	0019      	movs	r1, r3
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	2201      	movs	r2, #1
 801c864:	0018      	movs	r0, r3
 801c866:	f000 f940 	bl	801caea <USBD_CtlSendData>
        break;
 801c86a:	e00e      	b.n	801c88a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	1d19      	adds	r1, r3, #4
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2201      	movs	r2, #1
 801c874:	0018      	movs	r0, r3
 801c876:	f000 f938 	bl	801caea <USBD_CtlSendData>
        break;
 801c87a:	e006      	b.n	801c88a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c87c:	683a      	ldr	r2, [r7, #0]
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	0011      	movs	r1, r2
 801c882:	0018      	movs	r0, r3
 801c884:	f000 f8b3 	bl	801c9ee <USBD_CtlError>
        break;
 801c888:	46c0      	nop			@ (mov r8, r8)
}
 801c88a:	46c0      	nop			@ (mov r8, r8)
 801c88c:	46bd      	mov	sp, r7
 801c88e:	b002      	add	sp, #8
 801c890:	bd80      	pop	{r7, pc}

0801c892 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c892:	b580      	push	{r7, lr}
 801c894:	b082      	sub	sp, #8
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
 801c89a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c89c:	687a      	ldr	r2, [r7, #4]
 801c89e:	23a7      	movs	r3, #167	@ 0xa7
 801c8a0:	009b      	lsls	r3, r3, #2
 801c8a2:	5cd3      	ldrb	r3, [r2, r3]
 801c8a4:	3b01      	subs	r3, #1
 801c8a6:	2b02      	cmp	r3, #2
 801c8a8:	d822      	bhi.n	801c8f0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c8aa:	683b      	ldr	r3, [r7, #0]
 801c8ac:	88db      	ldrh	r3, [r3, #6]
 801c8ae:	2b02      	cmp	r3, #2
 801c8b0:	d006      	beq.n	801c8c0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c8b2:	683a      	ldr	r2, [r7, #0]
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	0011      	movs	r1, r2
 801c8b8:	0018      	movs	r0, r3
 801c8ba:	f000 f898 	bl	801c9ee <USBD_CtlError>
        break;
 801c8be:	e01e      	b.n	801c8fe <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c8c6:	687a      	ldr	r2, [r7, #4]
 801c8c8:	23a9      	movs	r3, #169	@ 0xa9
 801c8ca:	009b      	lsls	r3, r3, #2
 801c8cc:	58d3      	ldr	r3, [r2, r3]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d005      	beq.n	801c8de <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	68db      	ldr	r3, [r3, #12]
 801c8d6:	2202      	movs	r2, #2
 801c8d8:	431a      	orrs	r2, r3
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	330c      	adds	r3, #12
 801c8e2:	0019      	movs	r1, r3
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	2202      	movs	r2, #2
 801c8e8:	0018      	movs	r0, r3
 801c8ea:	f000 f8fe 	bl	801caea <USBD_CtlSendData>
      break;
 801c8ee:	e006      	b.n	801c8fe <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c8f0:	683a      	ldr	r2, [r7, #0]
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	0011      	movs	r1, r2
 801c8f6:	0018      	movs	r0, r3
 801c8f8:	f000 f879 	bl	801c9ee <USBD_CtlError>
      break;
 801c8fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c8fe:	46c0      	nop			@ (mov r8, r8)
 801c900:	46bd      	mov	sp, r7
 801c902:	b002      	add	sp, #8
 801c904:	bd80      	pop	{r7, pc}

0801c906 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c906:	b580      	push	{r7, lr}
 801c908:	b082      	sub	sp, #8
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
 801c90e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c910:	683b      	ldr	r3, [r7, #0]
 801c912:	885b      	ldrh	r3, [r3, #2]
 801c914:	2b01      	cmp	r3, #1
 801c916:	d108      	bne.n	801c92a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c918:	687a      	ldr	r2, [r7, #4]
 801c91a:	23a9      	movs	r3, #169	@ 0xa9
 801c91c:	009b      	lsls	r3, r3, #2
 801c91e:	2101      	movs	r1, #1
 801c920:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	0018      	movs	r0, r3
 801c926:	f000 f94a 	bl	801cbbe <USBD_CtlSendStatus>
  }
}
 801c92a:	46c0      	nop			@ (mov r8, r8)
 801c92c:	46bd      	mov	sp, r7
 801c92e:	b002      	add	sp, #8
 801c930:	bd80      	pop	{r7, pc}

0801c932 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c932:	b580      	push	{r7, lr}
 801c934:	b082      	sub	sp, #8
 801c936:	af00      	add	r7, sp, #0
 801c938:	6078      	str	r0, [r7, #4]
 801c93a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c93c:	687a      	ldr	r2, [r7, #4]
 801c93e:	23a7      	movs	r3, #167	@ 0xa7
 801c940:	009b      	lsls	r3, r3, #2
 801c942:	5cd3      	ldrb	r3, [r2, r3]
 801c944:	3b01      	subs	r3, #1
 801c946:	2b02      	cmp	r3, #2
 801c948:	d80d      	bhi.n	801c966 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c94a:	683b      	ldr	r3, [r7, #0]
 801c94c:	885b      	ldrh	r3, [r3, #2]
 801c94e:	2b01      	cmp	r3, #1
 801c950:	d110      	bne.n	801c974 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	23a9      	movs	r3, #169	@ 0xa9
 801c956:	009b      	lsls	r3, r3, #2
 801c958:	2100      	movs	r1, #0
 801c95a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	0018      	movs	r0, r3
 801c960:	f000 f92d 	bl	801cbbe <USBD_CtlSendStatus>
      }
      break;
 801c964:	e006      	b.n	801c974 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c966:	683a      	ldr	r2, [r7, #0]
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	0011      	movs	r1, r2
 801c96c:	0018      	movs	r0, r3
 801c96e:	f000 f83e 	bl	801c9ee <USBD_CtlError>
      break;
 801c972:	e000      	b.n	801c976 <USBD_ClrFeature+0x44>
      break;
 801c974:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c976:	46c0      	nop			@ (mov r8, r8)
 801c978:	46bd      	mov	sp, r7
 801c97a:	b002      	add	sp, #8
 801c97c:	bd80      	pop	{r7, pc}

0801c97e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c97e:	b580      	push	{r7, lr}
 801c980:	b082      	sub	sp, #8
 801c982:	af00      	add	r7, sp, #0
 801c984:	6078      	str	r0, [r7, #4]
 801c986:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c988:	683b      	ldr	r3, [r7, #0]
 801c98a:	781a      	ldrb	r2, [r3, #0]
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c990:	683b      	ldr	r3, [r7, #0]
 801c992:	785a      	ldrb	r2, [r3, #1]
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	3302      	adds	r3, #2
 801c99c:	781b      	ldrb	r3, [r3, #0]
 801c99e:	001a      	movs	r2, r3
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	3303      	adds	r3, #3
 801c9a4:	781b      	ldrb	r3, [r3, #0]
 801c9a6:	021b      	lsls	r3, r3, #8
 801c9a8:	b29b      	uxth	r3, r3
 801c9aa:	18d3      	adds	r3, r2, r3
 801c9ac:	b29a      	uxth	r2, r3
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c9b2:	683b      	ldr	r3, [r7, #0]
 801c9b4:	3304      	adds	r3, #4
 801c9b6:	781b      	ldrb	r3, [r3, #0]
 801c9b8:	001a      	movs	r2, r3
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	3305      	adds	r3, #5
 801c9be:	781b      	ldrb	r3, [r3, #0]
 801c9c0:	021b      	lsls	r3, r3, #8
 801c9c2:	b29b      	uxth	r3, r3
 801c9c4:	18d3      	adds	r3, r2, r3
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c9cc:	683b      	ldr	r3, [r7, #0]
 801c9ce:	3306      	adds	r3, #6
 801c9d0:	781b      	ldrb	r3, [r3, #0]
 801c9d2:	001a      	movs	r2, r3
 801c9d4:	683b      	ldr	r3, [r7, #0]
 801c9d6:	3307      	adds	r3, #7
 801c9d8:	781b      	ldrb	r3, [r3, #0]
 801c9da:	021b      	lsls	r3, r3, #8
 801c9dc:	b29b      	uxth	r3, r3
 801c9de:	18d3      	adds	r3, r2, r3
 801c9e0:	b29a      	uxth	r2, r3
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	80da      	strh	r2, [r3, #6]

}
 801c9e6:	46c0      	nop			@ (mov r8, r8)
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	b002      	add	sp, #8
 801c9ec:	bd80      	pop	{r7, pc}

0801c9ee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c9ee:	b580      	push	{r7, lr}
 801c9f0:	b082      	sub	sp, #8
 801c9f2:	af00      	add	r7, sp, #0
 801c9f4:	6078      	str	r0, [r7, #4]
 801c9f6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	2180      	movs	r1, #128	@ 0x80
 801c9fc:	0018      	movs	r0, r3
 801c9fe:	f000 fd1e 	bl	801d43e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	2100      	movs	r1, #0
 801ca06:	0018      	movs	r0, r3
 801ca08:	f000 fd19 	bl	801d43e <USBD_LL_StallEP>
}
 801ca0c:	46c0      	nop			@ (mov r8, r8)
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	b002      	add	sp, #8
 801ca12:	bd80      	pop	{r7, pc}

0801ca14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ca14:	b590      	push	{r4, r7, lr}
 801ca16:	b087      	sub	sp, #28
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	60f8      	str	r0, [r7, #12]
 801ca1c:	60b9      	str	r1, [r7, #8]
 801ca1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801ca20:	2417      	movs	r4, #23
 801ca22:	193b      	adds	r3, r7, r4
 801ca24:	2200      	movs	r2, #0
 801ca26:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d03c      	beq.n	801caa8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	0018      	movs	r0, r3
 801ca32:	f000 f83d 	bl	801cab0 <USBD_GetLen>
 801ca36:	0003      	movs	r3, r0
 801ca38:	3301      	adds	r3, #1
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	18db      	adds	r3, r3, r3
 801ca3e:	b29a      	uxth	r2, r3
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801ca44:	193b      	adds	r3, r7, r4
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	193a      	adds	r2, r7, r4
 801ca4a:	1c59      	adds	r1, r3, #1
 801ca4c:	7011      	strb	r1, [r2, #0]
 801ca4e:	001a      	movs	r2, r3
 801ca50:	68bb      	ldr	r3, [r7, #8]
 801ca52:	189b      	adds	r3, r3, r2
 801ca54:	687a      	ldr	r2, [r7, #4]
 801ca56:	7812      	ldrb	r2, [r2, #0]
 801ca58:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ca5a:	193b      	adds	r3, r7, r4
 801ca5c:	781b      	ldrb	r3, [r3, #0]
 801ca5e:	193a      	adds	r2, r7, r4
 801ca60:	1c59      	adds	r1, r3, #1
 801ca62:	7011      	strb	r1, [r2, #0]
 801ca64:	001a      	movs	r2, r3
 801ca66:	68bb      	ldr	r3, [r7, #8]
 801ca68:	189b      	adds	r3, r3, r2
 801ca6a:	2203      	movs	r2, #3
 801ca6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801ca6e:	e017      	b.n	801caa0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	1c5a      	adds	r2, r3, #1
 801ca74:	60fa      	str	r2, [r7, #12]
 801ca76:	2417      	movs	r4, #23
 801ca78:	193a      	adds	r2, r7, r4
 801ca7a:	7812      	ldrb	r2, [r2, #0]
 801ca7c:	1939      	adds	r1, r7, r4
 801ca7e:	1c50      	adds	r0, r2, #1
 801ca80:	7008      	strb	r0, [r1, #0]
 801ca82:	0011      	movs	r1, r2
 801ca84:	68ba      	ldr	r2, [r7, #8]
 801ca86:	1852      	adds	r2, r2, r1
 801ca88:	781b      	ldrb	r3, [r3, #0]
 801ca8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801ca8c:	193b      	adds	r3, r7, r4
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	193a      	adds	r2, r7, r4
 801ca92:	1c59      	adds	r1, r3, #1
 801ca94:	7011      	strb	r1, [r2, #0]
 801ca96:	001a      	movs	r2, r3
 801ca98:	68bb      	ldr	r3, [r7, #8]
 801ca9a:	189b      	adds	r3, r3, r2
 801ca9c:	2200      	movs	r2, #0
 801ca9e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	781b      	ldrb	r3, [r3, #0]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d1e3      	bne.n	801ca70 <USBD_GetString+0x5c>
    }
  }
}
 801caa8:	46c0      	nop			@ (mov r8, r8)
 801caaa:	46bd      	mov	sp, r7
 801caac:	b007      	add	sp, #28
 801caae:	bd90      	pop	{r4, r7, pc}

0801cab0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cab0:	b580      	push	{r7, lr}
 801cab2:	b084      	sub	sp, #16
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cab8:	230f      	movs	r3, #15
 801caba:	18fb      	adds	r3, r7, r3
 801cabc:	2200      	movs	r2, #0
 801cabe:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cac0:	e008      	b.n	801cad4 <USBD_GetLen+0x24>
  {
    len++;
 801cac2:	210f      	movs	r1, #15
 801cac4:	187b      	adds	r3, r7, r1
 801cac6:	781a      	ldrb	r2, [r3, #0]
 801cac8:	187b      	adds	r3, r7, r1
 801caca:	3201      	adds	r2, #1
 801cacc:	701a      	strb	r2, [r3, #0]
    buf++;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	3301      	adds	r3, #1
 801cad2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	781b      	ldrb	r3, [r3, #0]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d1f2      	bne.n	801cac2 <USBD_GetLen+0x12>
  }

  return len;
 801cadc:	230f      	movs	r3, #15
 801cade:	18fb      	adds	r3, r7, r3
 801cae0:	781b      	ldrb	r3, [r3, #0]
}
 801cae2:	0018      	movs	r0, r3
 801cae4:	46bd      	mov	sp, r7
 801cae6:	b004      	add	sp, #16
 801cae8:	bd80      	pop	{r7, pc}

0801caea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801caea:	b580      	push	{r7, lr}
 801caec:	b084      	sub	sp, #16
 801caee:	af00      	add	r7, sp, #0
 801caf0:	60f8      	str	r0, [r7, #12]
 801caf2:	60b9      	str	r1, [r7, #8]
 801caf4:	1dbb      	adds	r3, r7, #6
 801caf6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801caf8:	68fa      	ldr	r2, [r7, #12]
 801cafa:	23a5      	movs	r3, #165	@ 0xa5
 801cafc:	009b      	lsls	r3, r3, #2
 801cafe:	2102      	movs	r1, #2
 801cb00:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cb02:	1dbb      	adds	r3, r7, #6
 801cb04:	881a      	ldrh	r2, [r3, #0]
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cb0a:	1dbb      	adds	r3, r7, #6
 801cb0c:	881a      	ldrh	r2, [r3, #0]
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cb12:	1dbb      	adds	r3, r7, #6
 801cb14:	881b      	ldrh	r3, [r3, #0]
 801cb16:	68ba      	ldr	r2, [r7, #8]
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	2100      	movs	r1, #0
 801cb1c:	f000 fd41 	bl	801d5a2 <USBD_LL_Transmit>

  return USBD_OK;
 801cb20:	2300      	movs	r3, #0
}
 801cb22:	0018      	movs	r0, r3
 801cb24:	46bd      	mov	sp, r7
 801cb26:	b004      	add	sp, #16
 801cb28:	bd80      	pop	{r7, pc}

0801cb2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cb2a:	b580      	push	{r7, lr}
 801cb2c:	b084      	sub	sp, #16
 801cb2e:	af00      	add	r7, sp, #0
 801cb30:	60f8      	str	r0, [r7, #12]
 801cb32:	60b9      	str	r1, [r7, #8]
 801cb34:	1dbb      	adds	r3, r7, #6
 801cb36:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cb38:	1dbb      	adds	r3, r7, #6
 801cb3a:	881b      	ldrh	r3, [r3, #0]
 801cb3c:	68ba      	ldr	r2, [r7, #8]
 801cb3e:	68f8      	ldr	r0, [r7, #12]
 801cb40:	2100      	movs	r1, #0
 801cb42:	f000 fd2e 	bl	801d5a2 <USBD_LL_Transmit>

  return USBD_OK;
 801cb46:	2300      	movs	r3, #0
}
 801cb48:	0018      	movs	r0, r3
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	b004      	add	sp, #16
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b084      	sub	sp, #16
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	60f8      	str	r0, [r7, #12]
 801cb58:	60b9      	str	r1, [r7, #8]
 801cb5a:	1dbb      	adds	r3, r7, #6
 801cb5c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cb5e:	68fa      	ldr	r2, [r7, #12]
 801cb60:	23a5      	movs	r3, #165	@ 0xa5
 801cb62:	009b      	lsls	r3, r3, #2
 801cb64:	2103      	movs	r1, #3
 801cb66:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cb68:	1dbb      	adds	r3, r7, #6
 801cb6a:	8819      	ldrh	r1, [r3, #0]
 801cb6c:	68fa      	ldr	r2, [r7, #12]
 801cb6e:	23ae      	movs	r3, #174	@ 0xae
 801cb70:	005b      	lsls	r3, r3, #1
 801cb72:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cb74:	1dbb      	adds	r3, r7, #6
 801cb76:	8819      	ldrh	r1, [r3, #0]
 801cb78:	68fa      	ldr	r2, [r7, #12]
 801cb7a:	23b0      	movs	r3, #176	@ 0xb0
 801cb7c:	005b      	lsls	r3, r3, #1
 801cb7e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cb80:	1dbb      	adds	r3, r7, #6
 801cb82:	881b      	ldrh	r3, [r3, #0]
 801cb84:	68ba      	ldr	r2, [r7, #8]
 801cb86:	68f8      	ldr	r0, [r7, #12]
 801cb88:	2100      	movs	r1, #0
 801cb8a:	f000 fd41 	bl	801d610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb8e:	2300      	movs	r3, #0
}
 801cb90:	0018      	movs	r0, r3
 801cb92:	46bd      	mov	sp, r7
 801cb94:	b004      	add	sp, #16
 801cb96:	bd80      	pop	{r7, pc}

0801cb98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b084      	sub	sp, #16
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	60f8      	str	r0, [r7, #12]
 801cba0:	60b9      	str	r1, [r7, #8]
 801cba2:	1dbb      	adds	r3, r7, #6
 801cba4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cba6:	1dbb      	adds	r3, r7, #6
 801cba8:	881b      	ldrh	r3, [r3, #0]
 801cbaa:	68ba      	ldr	r2, [r7, #8]
 801cbac:	68f8      	ldr	r0, [r7, #12]
 801cbae:	2100      	movs	r1, #0
 801cbb0:	f000 fd2e 	bl	801d610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cbb4:	2300      	movs	r3, #0
}
 801cbb6:	0018      	movs	r0, r3
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	b004      	add	sp, #16
 801cbbc:	bd80      	pop	{r7, pc}

0801cbbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cbbe:	b580      	push	{r7, lr}
 801cbc0:	b082      	sub	sp, #8
 801cbc2:	af00      	add	r7, sp, #0
 801cbc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cbc6:	687a      	ldr	r2, [r7, #4]
 801cbc8:	23a5      	movs	r3, #165	@ 0xa5
 801cbca:	009b      	lsls	r3, r3, #2
 801cbcc:	2104      	movs	r1, #4
 801cbce:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cbd0:	6878      	ldr	r0, [r7, #4]
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	2100      	movs	r1, #0
 801cbd8:	f000 fce3 	bl	801d5a2 <USBD_LL_Transmit>

  return USBD_OK;
 801cbdc:	2300      	movs	r3, #0
}
 801cbde:	0018      	movs	r0, r3
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	b002      	add	sp, #8
 801cbe4:	bd80      	pop	{r7, pc}

0801cbe6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cbe6:	b580      	push	{r7, lr}
 801cbe8:	b082      	sub	sp, #8
 801cbea:	af00      	add	r7, sp, #0
 801cbec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cbee:	687a      	ldr	r2, [r7, #4]
 801cbf0:	23a5      	movs	r3, #165	@ 0xa5
 801cbf2:	009b      	lsls	r3, r3, #2
 801cbf4:	2105      	movs	r1, #5
 801cbf6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cbf8:	6878      	ldr	r0, [r7, #4]
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	2100      	movs	r1, #0
 801cc00:	f000 fd06 	bl	801d610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cc04:	2300      	movs	r3, #0
}
 801cc06:	0018      	movs	r0, r3
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	b002      	add	sp, #8
 801cc0c:	bd80      	pop	{r7, pc}
	...

0801cc10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cc14:	4914      	ldr	r1, [pc, #80]	@ (801cc68 <MX_USB_DEVICE_Init+0x58>)
 801cc16:	4b15      	ldr	r3, [pc, #84]	@ (801cc6c <MX_USB_DEVICE_Init+0x5c>)
 801cc18:	2200      	movs	r2, #0
 801cc1a:	0018      	movs	r0, r3
 801cc1c:	f7fe fdec 	bl	801b7f8 <USBD_Init>
 801cc20:	1e03      	subs	r3, r0, #0
 801cc22:	d001      	beq.n	801cc28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cc24:	f7eb fb72 	bl	800830c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cc28:	4a11      	ldr	r2, [pc, #68]	@ (801cc70 <MX_USB_DEVICE_Init+0x60>)
 801cc2a:	4b10      	ldr	r3, [pc, #64]	@ (801cc6c <MX_USB_DEVICE_Init+0x5c>)
 801cc2c:	0011      	movs	r1, r2
 801cc2e:	0018      	movs	r0, r3
 801cc30:	f7fe fe13 	bl	801b85a <USBD_RegisterClass>
 801cc34:	1e03      	subs	r3, r0, #0
 801cc36:	d001      	beq.n	801cc3c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cc38:	f7eb fb68 	bl	800830c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cc3c:	4a0d      	ldr	r2, [pc, #52]	@ (801cc74 <MX_USB_DEVICE_Init+0x64>)
 801cc3e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc6c <MX_USB_DEVICE_Init+0x5c>)
 801cc40:	0011      	movs	r1, r2
 801cc42:	0018      	movs	r0, r3
 801cc44:	f7fe fd28 	bl	801b698 <USBD_CDC_RegisterInterface>
 801cc48:	1e03      	subs	r3, r0, #0
 801cc4a:	d001      	beq.n	801cc50 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cc4c:	f7eb fb5e 	bl	800830c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cc50:	4b06      	ldr	r3, [pc, #24]	@ (801cc6c <MX_USB_DEVICE_Init+0x5c>)
 801cc52:	0018      	movs	r0, r3
 801cc54:	f7fe fe21 	bl	801b89a <USBD_Start>
 801cc58:	1e03      	subs	r3, r0, #0
 801cc5a:	d001      	beq.n	801cc60 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cc5c:	f7eb fb56 	bl	800830c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cc60:	46c0      	nop			@ (mov r8, r8)
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bd80      	pop	{r7, pc}
 801cc66:	46c0      	nop			@ (mov r8, r8)
 801cc68:	2000020c 	.word	0x2000020c
 801cc6c:	200023dc 	.word	0x200023dc
 801cc70:	200000f8 	.word	0x200000f8
 801cc74:	200001fc 	.word	0x200001fc

0801cc78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cc7c:	4907      	ldr	r1, [pc, #28]	@ (801cc9c <CDC_Init_FS+0x24>)
 801cc7e:	4b08      	ldr	r3, [pc, #32]	@ (801cca0 <CDC_Init_FS+0x28>)
 801cc80:	2200      	movs	r2, #0
 801cc82:	0018      	movs	r0, r3
 801cc84:	f7fe fd23 	bl	801b6ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cc88:	4a06      	ldr	r2, [pc, #24]	@ (801cca4 <CDC_Init_FS+0x2c>)
 801cc8a:	4b05      	ldr	r3, [pc, #20]	@ (801cca0 <CDC_Init_FS+0x28>)
 801cc8c:	0011      	movs	r1, r2
 801cc8e:	0018      	movs	r0, r3
 801cc90:	f7fe fd39 	bl	801b706 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cc94:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cc96:	0018      	movs	r0, r3
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}
 801cc9c:	20002b60 	.word	0x20002b60
 801cca0:	200023dc 	.word	0x200023dc
 801cca4:	20002760 	.word	0x20002760

0801cca8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ccac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ccae:	0018      	movs	r0, r3
 801ccb0:	46bd      	mov	sp, r7
 801ccb2:	bd80      	pop	{r7, pc}

0801ccb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b082      	sub	sp, #8
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6039      	str	r1, [r7, #0]
 801ccbc:	0011      	movs	r1, r2
 801ccbe:	1dfb      	adds	r3, r7, #7
 801ccc0:	1c02      	adds	r2, r0, #0
 801ccc2:	701a      	strb	r2, [r3, #0]
 801ccc4:	1d3b      	adds	r3, r7, #4
 801ccc6:	1c0a      	adds	r2, r1, #0
 801ccc8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ccca:	1dfb      	adds	r3, r7, #7
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	2b23      	cmp	r3, #35	@ 0x23
 801ccd0:	d804      	bhi.n	801ccdc <CDC_Control_FS+0x28>
 801ccd2:	009a      	lsls	r2, r3, #2
 801ccd4:	4b04      	ldr	r3, [pc, #16]	@ (801cce8 <CDC_Control_FS+0x34>)
 801ccd6:	18d3      	adds	r3, r2, r3
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ccdc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ccde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cce0:	0018      	movs	r0, r3
 801cce2:	46bd      	mov	sp, r7
 801cce4:	b002      	add	sp, #8
 801cce6:	bd80      	pop	{r7, pc}
 801cce8:	0802573c 	.word	0x0802573c

0801ccec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ccec:	b580      	push	{r7, lr}
 801ccee:	b082      	sub	sp, #8
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	6078      	str	r0, [r7, #4]
 801ccf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801ccf6:	4b12      	ldr	r3, [pc, #72]	@ (801cd40 <CDC_Receive_FS+0x54>)
 801ccf8:	781b      	ldrb	r3, [r3, #0]
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d013      	beq.n	801cd26 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	b29a      	uxth	r2, r3
 801cd04:	2301      	movs	r3, #1
 801cd06:	425b      	negs	r3, r3
 801cd08:	6879      	ldr	r1, [r7, #4]
 801cd0a:	480e      	ldr	r0, [pc, #56]	@ (801cd44 <CDC_Receive_FS+0x58>)
 801cd0c:	f7fa fa46 	bl	801719c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cd10:	687a      	ldr	r2, [r7, #4]
 801cd12:	4b0d      	ldr	r3, [pc, #52]	@ (801cd48 <CDC_Receive_FS+0x5c>)
 801cd14:	0011      	movs	r1, r2
 801cd16:	0018      	movs	r0, r3
 801cd18:	f7fe fcf5 	bl	801b706 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd1c:	4b0a      	ldr	r3, [pc, #40]	@ (801cd48 <CDC_Receive_FS+0x5c>)
 801cd1e:	0018      	movs	r0, r3
 801cd20:	f7fe fd3c 	bl	801b79c <USBD_CDC_ReceivePacket>
 801cd24:	e006      	b.n	801cd34 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801cd26:	683b      	ldr	r3, [r7, #0]
 801cd28:	681a      	ldr	r2, [r3, #0]
 801cd2a:	4b08      	ldr	r3, [pc, #32]	@ (801cd4c <CDC_Receive_FS+0x60>)
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	18d2      	adds	r2, r2, r3
 801cd30:	4b06      	ldr	r3, [pc, #24]	@ (801cd4c <CDC_Receive_FS+0x60>)
 801cd32:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801cd34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cd36:	0018      	movs	r0, r3
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	b002      	add	sp, #8
 801cd3c:	bd80      	pop	{r7, pc}
 801cd3e:	46c0      	nop			@ (mov r8, r8)
 801cd40:	200026a0 	.word	0x200026a0
 801cd44:	200026a4 	.word	0x200026a4
 801cd48:	200023dc 	.word	0x200023dc
 801cd4c:	2000275c 	.word	0x2000275c

0801cd50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cd50:	b5b0      	push	{r4, r5, r7, lr}
 801cd52:	b084      	sub	sp, #16
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]
 801cd58:	000a      	movs	r2, r1
 801cd5a:	1cbb      	adds	r3, r7, #2
 801cd5c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801cd5e:	230f      	movs	r3, #15
 801cd60:	18fb      	adds	r3, r7, r3
 801cd62:	2200      	movs	r2, #0
 801cd64:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cd66:	4a11      	ldr	r2, [pc, #68]	@ (801cdac <CDC_Transmit_FS+0x5c>)
 801cd68:	23ae      	movs	r3, #174	@ 0xae
 801cd6a:	009b      	lsls	r3, r3, #2
 801cd6c:	58d3      	ldr	r3, [r2, r3]
 801cd6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cd70:	68ba      	ldr	r2, [r7, #8]
 801cd72:	2385      	movs	r3, #133	@ 0x85
 801cd74:	009b      	lsls	r3, r3, #2
 801cd76:	58d3      	ldr	r3, [r2, r3]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d001      	beq.n	801cd80 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	e010      	b.n	801cda2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cd80:	1cbb      	adds	r3, r7, #2
 801cd82:	881a      	ldrh	r2, [r3, #0]
 801cd84:	6879      	ldr	r1, [r7, #4]
 801cd86:	4b09      	ldr	r3, [pc, #36]	@ (801cdac <CDC_Transmit_FS+0x5c>)
 801cd88:	0018      	movs	r0, r3
 801cd8a:	f7fe fca0 	bl	801b6ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cd8e:	250f      	movs	r5, #15
 801cd90:	197c      	adds	r4, r7, r5
 801cd92:	4b06      	ldr	r3, [pc, #24]	@ (801cdac <CDC_Transmit_FS+0x5c>)
 801cd94:	0018      	movs	r0, r3
 801cd96:	f7fe fcca 	bl	801b72e <USBD_CDC_TransmitPacket>
 801cd9a:	0003      	movs	r3, r0
 801cd9c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cd9e:	197b      	adds	r3, r7, r5
 801cda0:	781b      	ldrb	r3, [r3, #0]
}
 801cda2:	0018      	movs	r0, r3
 801cda4:	46bd      	mov	sp, r7
 801cda6:	b004      	add	sp, #16
 801cda8:	bdb0      	pop	{r4, r5, r7, pc}
 801cdaa:	46c0      	nop			@ (mov r8, r8)
 801cdac:	200023dc 	.word	0x200023dc

0801cdb0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cdb4:	4b02      	ldr	r3, [pc, #8]	@ (801cdc0 <EnableESPProg+0x10>)
 801cdb6:	2201      	movs	r2, #1
 801cdb8:	701a      	strb	r2, [r3, #0]
}
 801cdba:	46c0      	nop			@ (mov r8, r8)
 801cdbc:	46bd      	mov	sp, r7
 801cdbe:	bd80      	pop	{r7, pc}
 801cdc0:	200026a0 	.word	0x200026a0

0801cdc4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cdc8:	4b01      	ldr	r3, [pc, #4]	@ (801cdd0 <GetUsbRxPointer+0xc>)
}
 801cdca:	0018      	movs	r0, r3
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}
 801cdd0:	20002760 	.word	0x20002760

0801cdd4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cdd8:	4b07      	ldr	r3, [pc, #28]	@ (801cdf8 <ResetUsbRxDataSize+0x24>)
 801cdda:	2200      	movs	r2, #0
 801cddc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cdde:	4a07      	ldr	r2, [pc, #28]	@ (801cdfc <ResetUsbRxDataSize+0x28>)
 801cde0:	4b07      	ldr	r3, [pc, #28]	@ (801ce00 <ResetUsbRxDataSize+0x2c>)
 801cde2:	0011      	movs	r1, r2
 801cde4:	0018      	movs	r0, r3
 801cde6:	f7fe fc8e 	bl	801b706 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cdea:	4b05      	ldr	r3, [pc, #20]	@ (801ce00 <ResetUsbRxDataSize+0x2c>)
 801cdec:	0018      	movs	r0, r3
 801cdee:	f7fe fcd5 	bl	801b79c <USBD_CDC_ReceivePacket>
}
 801cdf2:	46c0      	nop			@ (mov r8, r8)
 801cdf4:	46bd      	mov	sp, r7
 801cdf6:	bd80      	pop	{r7, pc}
 801cdf8:	2000275c 	.word	0x2000275c
 801cdfc:	20002760 	.word	0x20002760
 801ce00:	200023dc 	.word	0x200023dc

0801ce04 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801ce08:	4b02      	ldr	r3, [pc, #8]	@ (801ce14 <GetUsbRxDataSize+0x10>)
 801ce0a:	681b      	ldr	r3, [r3, #0]
}
 801ce0c:	0018      	movs	r0, r3
 801ce0e:	46bd      	mov	sp, r7
 801ce10:	bd80      	pop	{r7, pc}
 801ce12:	46c0      	nop			@ (mov r8, r8)
 801ce14:	2000275c 	.word	0x2000275c

0801ce18 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b082      	sub	sp, #8
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801ce20:	687a      	ldr	r2, [r7, #4]
 801ce22:	4b07      	ldr	r3, [pc, #28]	@ (801ce40 <GetUsbRxNextChunk+0x28>)
 801ce24:	18d2      	adds	r2, r2, r3
 801ce26:	4b07      	ldr	r3, [pc, #28]	@ (801ce44 <GetUsbRxNextChunk+0x2c>)
 801ce28:	0011      	movs	r1, r2
 801ce2a:	0018      	movs	r0, r3
 801ce2c:	f7fe fc6b 	bl	801b706 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ce30:	4b04      	ldr	r3, [pc, #16]	@ (801ce44 <GetUsbRxNextChunk+0x2c>)
 801ce32:	0018      	movs	r0, r3
 801ce34:	f7fe fcb2 	bl	801b79c <USBD_CDC_ReceivePacket>
}
 801ce38:	46c0      	nop			@ (mov r8, r8)
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	b002      	add	sp, #8
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	20002760 	.word	0x20002760
 801ce44:	200023dc 	.word	0x200023dc

0801ce48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b082      	sub	sp, #8
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	0002      	movs	r2, r0
 801ce50:	6039      	str	r1, [r7, #0]
 801ce52:	1dfb      	adds	r3, r7, #7
 801ce54:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ce56:	683b      	ldr	r3, [r7, #0]
 801ce58:	2212      	movs	r2, #18
 801ce5a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ce5c:	4b02      	ldr	r3, [pc, #8]	@ (801ce68 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ce5e:	0018      	movs	r0, r3
 801ce60:	46bd      	mov	sp, r7
 801ce62:	b002      	add	sp, #8
 801ce64:	bd80      	pop	{r7, pc}
 801ce66:	46c0      	nop			@ (mov r8, r8)
 801ce68:	20000228 	.word	0x20000228

0801ce6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b082      	sub	sp, #8
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	0002      	movs	r2, r0
 801ce74:	6039      	str	r1, [r7, #0]
 801ce76:	1dfb      	adds	r3, r7, #7
 801ce78:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	2204      	movs	r2, #4
 801ce7e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ce80:	4b02      	ldr	r3, [pc, #8]	@ (801ce8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801ce82:	0018      	movs	r0, r3
 801ce84:	46bd      	mov	sp, r7
 801ce86:	b002      	add	sp, #8
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	46c0      	nop			@ (mov r8, r8)
 801ce8c:	2000023c 	.word	0x2000023c

0801ce90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b082      	sub	sp, #8
 801ce94:	af00      	add	r7, sp, #0
 801ce96:	0002      	movs	r2, r0
 801ce98:	6039      	str	r1, [r7, #0]
 801ce9a:	1dfb      	adds	r3, r7, #7
 801ce9c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ce9e:	1dfb      	adds	r3, r7, #7
 801cea0:	781b      	ldrb	r3, [r3, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d106      	bne.n	801ceb4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cea6:	683a      	ldr	r2, [r7, #0]
 801cea8:	4908      	ldr	r1, [pc, #32]	@ (801cecc <USBD_FS_ProductStrDescriptor+0x3c>)
 801ceaa:	4b09      	ldr	r3, [pc, #36]	@ (801ced0 <USBD_FS_ProductStrDescriptor+0x40>)
 801ceac:	0018      	movs	r0, r3
 801ceae:	f7ff fdb1 	bl	801ca14 <USBD_GetString>
 801ceb2:	e005      	b.n	801cec0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ceb4:	683a      	ldr	r2, [r7, #0]
 801ceb6:	4905      	ldr	r1, [pc, #20]	@ (801cecc <USBD_FS_ProductStrDescriptor+0x3c>)
 801ceb8:	4b05      	ldr	r3, [pc, #20]	@ (801ced0 <USBD_FS_ProductStrDescriptor+0x40>)
 801ceba:	0018      	movs	r0, r3
 801cebc:	f7ff fdaa 	bl	801ca14 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cec0:	4b02      	ldr	r3, [pc, #8]	@ (801cecc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801cec2:	0018      	movs	r0, r3
 801cec4:	46bd      	mov	sp, r7
 801cec6:	b002      	add	sp, #8
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	46c0      	nop			@ (mov r8, r8)
 801cecc:	20002f60 	.word	0x20002f60
 801ced0:	080251c8 	.word	0x080251c8

0801ced4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b082      	sub	sp, #8
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	0002      	movs	r2, r0
 801cedc:	6039      	str	r1, [r7, #0]
 801cede:	1dfb      	adds	r3, r7, #7
 801cee0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	4904      	ldr	r1, [pc, #16]	@ (801cef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cee6:	4b05      	ldr	r3, [pc, #20]	@ (801cefc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801cee8:	0018      	movs	r0, r3
 801ceea:	f7ff fd93 	bl	801ca14 <USBD_GetString>
  return USBD_StrDesc;
 801ceee:	4b02      	ldr	r3, [pc, #8]	@ (801cef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801cef0:	0018      	movs	r0, r3
 801cef2:	46bd      	mov	sp, r7
 801cef4:	b002      	add	sp, #8
 801cef6:	bd80      	pop	{r7, pc}
 801cef8:	20002f60 	.word	0x20002f60
 801cefc:	080251e0 	.word	0x080251e0

0801cf00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf00:	b580      	push	{r7, lr}
 801cf02:	b082      	sub	sp, #8
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	0002      	movs	r2, r0
 801cf08:	6039      	str	r1, [r7, #0]
 801cf0a:	1dfb      	adds	r3, r7, #7
 801cf0c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cf0e:	683b      	ldr	r3, [r7, #0]
 801cf10:	221a      	movs	r2, #26
 801cf12:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cf14:	f000 f84c 	bl	801cfb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cf18:	4b02      	ldr	r3, [pc, #8]	@ (801cf24 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801cf1a:	0018      	movs	r0, r3
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	b002      	add	sp, #8
 801cf20:	bd80      	pop	{r7, pc}
 801cf22:	46c0      	nop			@ (mov r8, r8)
 801cf24:	20000240 	.word	0x20000240

0801cf28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf28:	b580      	push	{r7, lr}
 801cf2a:	b082      	sub	sp, #8
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	0002      	movs	r2, r0
 801cf30:	6039      	str	r1, [r7, #0]
 801cf32:	1dfb      	adds	r3, r7, #7
 801cf34:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801cf36:	1dfb      	adds	r3, r7, #7
 801cf38:	781b      	ldrb	r3, [r3, #0]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d106      	bne.n	801cf4c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf3e:	683a      	ldr	r2, [r7, #0]
 801cf40:	4908      	ldr	r1, [pc, #32]	@ (801cf64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cf42:	4b09      	ldr	r3, [pc, #36]	@ (801cf68 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cf44:	0018      	movs	r0, r3
 801cf46:	f7ff fd65 	bl	801ca14 <USBD_GetString>
 801cf4a:	e005      	b.n	801cf58 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf4c:	683a      	ldr	r2, [r7, #0]
 801cf4e:	4905      	ldr	r1, [pc, #20]	@ (801cf64 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cf50:	4b05      	ldr	r3, [pc, #20]	@ (801cf68 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cf52:	0018      	movs	r0, r3
 801cf54:	f7ff fd5e 	bl	801ca14 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf58:	4b02      	ldr	r3, [pc, #8]	@ (801cf64 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801cf5a:	0018      	movs	r0, r3
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	b002      	add	sp, #8
 801cf60:	bd80      	pop	{r7, pc}
 801cf62:	46c0      	nop			@ (mov r8, r8)
 801cf64:	20002f60 	.word	0x20002f60
 801cf68:	080251f4 	.word	0x080251f4

0801cf6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b082      	sub	sp, #8
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	0002      	movs	r2, r0
 801cf74:	6039      	str	r1, [r7, #0]
 801cf76:	1dfb      	adds	r3, r7, #7
 801cf78:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cf7a:	1dfb      	adds	r3, r7, #7
 801cf7c:	781b      	ldrb	r3, [r3, #0]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d106      	bne.n	801cf90 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf82:	683a      	ldr	r2, [r7, #0]
 801cf84:	4908      	ldr	r1, [pc, #32]	@ (801cfa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cf86:	4b09      	ldr	r3, [pc, #36]	@ (801cfac <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cf88:	0018      	movs	r0, r3
 801cf8a:	f7ff fd43 	bl	801ca14 <USBD_GetString>
 801cf8e:	e005      	b.n	801cf9c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cf90:	683a      	ldr	r2, [r7, #0]
 801cf92:	4905      	ldr	r1, [pc, #20]	@ (801cfa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cf94:	4b05      	ldr	r3, [pc, #20]	@ (801cfac <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cf96:	0018      	movs	r0, r3
 801cf98:	f7ff fd3c 	bl	801ca14 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf9c:	4b02      	ldr	r3, [pc, #8]	@ (801cfa8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801cf9e:	0018      	movs	r0, r3
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	b002      	add	sp, #8
 801cfa4:	bd80      	pop	{r7, pc}
 801cfa6:	46c0      	nop			@ (mov r8, r8)
 801cfa8:	20002f60 	.word	0x20002f60
 801cfac:	08025200 	.word	0x08025200

0801cfb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b084      	sub	sp, #16
 801cfb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cfb6:	4b10      	ldr	r3, [pc, #64]	@ (801cff8 <Get_SerialNum+0x48>)
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cfbc:	4b0f      	ldr	r3, [pc, #60]	@ (801cffc <Get_SerialNum+0x4c>)
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cfc2:	4b0f      	ldr	r3, [pc, #60]	@ (801d000 <Get_SerialNum+0x50>)
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cfc8:	68fa      	ldr	r2, [r7, #12]
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	18d3      	adds	r3, r2, r3
 801cfce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d00b      	beq.n	801cfee <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cfd6:	490b      	ldr	r1, [pc, #44]	@ (801d004 <Get_SerialNum+0x54>)
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	2208      	movs	r2, #8
 801cfdc:	0018      	movs	r0, r3
 801cfde:	f000 f815 	bl	801d00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cfe2:	4909      	ldr	r1, [pc, #36]	@ (801d008 <Get_SerialNum+0x58>)
 801cfe4:	68bb      	ldr	r3, [r7, #8]
 801cfe6:	2204      	movs	r2, #4
 801cfe8:	0018      	movs	r0, r3
 801cfea:	f000 f80f 	bl	801d00c <IntToUnicode>
  }
}
 801cfee:	46c0      	nop			@ (mov r8, r8)
 801cff0:	46bd      	mov	sp, r7
 801cff2:	b004      	add	sp, #16
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	46c0      	nop			@ (mov r8, r8)
 801cff8:	1ff80050 	.word	0x1ff80050
 801cffc:	1ff80054 	.word	0x1ff80054
 801d000:	1ff80058 	.word	0x1ff80058
 801d004:	20000242 	.word	0x20000242
 801d008:	20000252 	.word	0x20000252

0801d00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b086      	sub	sp, #24
 801d010:	af00      	add	r7, sp, #0
 801d012:	60f8      	str	r0, [r7, #12]
 801d014:	60b9      	str	r1, [r7, #8]
 801d016:	1dfb      	adds	r3, r7, #7
 801d018:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d01a:	2117      	movs	r1, #23
 801d01c:	187b      	adds	r3, r7, r1
 801d01e:	2200      	movs	r2, #0
 801d020:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d022:	187b      	adds	r3, r7, r1
 801d024:	2200      	movs	r2, #0
 801d026:	701a      	strb	r2, [r3, #0]
 801d028:	e02f      	b.n	801d08a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	0f1b      	lsrs	r3, r3, #28
 801d02e:	2b09      	cmp	r3, #9
 801d030:	d80d      	bhi.n	801d04e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	0f1b      	lsrs	r3, r3, #28
 801d036:	b2da      	uxtb	r2, r3
 801d038:	2317      	movs	r3, #23
 801d03a:	18fb      	adds	r3, r7, r3
 801d03c:	781b      	ldrb	r3, [r3, #0]
 801d03e:	005b      	lsls	r3, r3, #1
 801d040:	0019      	movs	r1, r3
 801d042:	68bb      	ldr	r3, [r7, #8]
 801d044:	185b      	adds	r3, r3, r1
 801d046:	3230      	adds	r2, #48	@ 0x30
 801d048:	b2d2      	uxtb	r2, r2
 801d04a:	701a      	strb	r2, [r3, #0]
 801d04c:	e00c      	b.n	801d068 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	0f1b      	lsrs	r3, r3, #28
 801d052:	b2da      	uxtb	r2, r3
 801d054:	2317      	movs	r3, #23
 801d056:	18fb      	adds	r3, r7, r3
 801d058:	781b      	ldrb	r3, [r3, #0]
 801d05a:	005b      	lsls	r3, r3, #1
 801d05c:	0019      	movs	r1, r3
 801d05e:	68bb      	ldr	r3, [r7, #8]
 801d060:	185b      	adds	r3, r3, r1
 801d062:	3237      	adds	r2, #55	@ 0x37
 801d064:	b2d2      	uxtb	r2, r2
 801d066:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	011b      	lsls	r3, r3, #4
 801d06c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d06e:	2117      	movs	r1, #23
 801d070:	187b      	adds	r3, r7, r1
 801d072:	781b      	ldrb	r3, [r3, #0]
 801d074:	005b      	lsls	r3, r3, #1
 801d076:	3301      	adds	r3, #1
 801d078:	68ba      	ldr	r2, [r7, #8]
 801d07a:	18d3      	adds	r3, r2, r3
 801d07c:	2200      	movs	r2, #0
 801d07e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d080:	187b      	adds	r3, r7, r1
 801d082:	781a      	ldrb	r2, [r3, #0]
 801d084:	187b      	adds	r3, r7, r1
 801d086:	3201      	adds	r2, #1
 801d088:	701a      	strb	r2, [r3, #0]
 801d08a:	2317      	movs	r3, #23
 801d08c:	18fa      	adds	r2, r7, r3
 801d08e:	1dfb      	adds	r3, r7, #7
 801d090:	7812      	ldrb	r2, [r2, #0]
 801d092:	781b      	ldrb	r3, [r3, #0]
 801d094:	429a      	cmp	r2, r3
 801d096:	d3c8      	bcc.n	801d02a <IntToUnicode+0x1e>
  }
}
 801d098:	46c0      	nop			@ (mov r8, r8)
 801d09a:	46c0      	nop			@ (mov r8, r8)
 801d09c:	46bd      	mov	sp, r7
 801d09e:	b006      	add	sp, #24
 801d0a0:	bd80      	pop	{r7, pc}
	...

0801d0a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	b082      	sub	sp, #8
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	4a0a      	ldr	r2, [pc, #40]	@ (801d0dc <HAL_PCD_MspInit+0x38>)
 801d0b2:	4293      	cmp	r3, r2
 801d0b4:	d10e      	bne.n	801d0d4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d0b6:	4b0a      	ldr	r3, [pc, #40]	@ (801d0e0 <HAL_PCD_MspInit+0x3c>)
 801d0b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d0ba:	4b09      	ldr	r3, [pc, #36]	@ (801d0e0 <HAL_PCD_MspInit+0x3c>)
 801d0bc:	2180      	movs	r1, #128	@ 0x80
 801d0be:	0409      	lsls	r1, r1, #16
 801d0c0:	430a      	orrs	r2, r1
 801d0c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	2100      	movs	r1, #0
 801d0c8:	201f      	movs	r0, #31
 801d0ca:	f7f2 fadf 	bl	800f68c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d0ce:	201f      	movs	r0, #31
 801d0d0:	f7f2 faf1 	bl	800f6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d0d4:	46c0      	nop			@ (mov r8, r8)
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	b002      	add	sp, #8
 801d0da:	bd80      	pop	{r7, pc}
 801d0dc:	40005c00 	.word	0x40005c00
 801d0e0:	40021000 	.word	0x40021000

0801d0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b082      	sub	sp, #8
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d0ec:	687a      	ldr	r2, [r7, #4]
 801d0ee:	23bc      	movs	r3, #188	@ 0xbc
 801d0f0:	009b      	lsls	r3, r3, #2
 801d0f2:	58d2      	ldr	r2, [r2, r3]
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	21ac      	movs	r1, #172	@ 0xac
 801d0f8:	0089      	lsls	r1, r1, #2
 801d0fa:	468c      	mov	ip, r1
 801d0fc:	4463      	add	r3, ip
 801d0fe:	0019      	movs	r1, r3
 801d100:	0010      	movs	r0, r2
 801d102:	f7fe fc1d 	bl	801b940 <USBD_LL_SetupStage>
}
 801d106:	46c0      	nop			@ (mov r8, r8)
 801d108:	46bd      	mov	sp, r7
 801d10a:	b002      	add	sp, #8
 801d10c:	bd80      	pop	{r7, pc}

0801d10e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d10e:	b590      	push	{r4, r7, lr}
 801d110:	b083      	sub	sp, #12
 801d112:	af00      	add	r7, sp, #0
 801d114:	6078      	str	r0, [r7, #4]
 801d116:	000a      	movs	r2, r1
 801d118:	1cfb      	adds	r3, r7, #3
 801d11a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d11c:	687a      	ldr	r2, [r7, #4]
 801d11e:	23bc      	movs	r3, #188	@ 0xbc
 801d120:	009b      	lsls	r3, r3, #2
 801d122:	58d4      	ldr	r4, [r2, r3]
 801d124:	1cfb      	adds	r3, r7, #3
 801d126:	781a      	ldrb	r2, [r3, #0]
 801d128:	6878      	ldr	r0, [r7, #4]
 801d12a:	23be      	movs	r3, #190	@ 0xbe
 801d12c:	0059      	lsls	r1, r3, #1
 801d12e:	0013      	movs	r3, r2
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	189b      	adds	r3, r3, r2
 801d134:	00db      	lsls	r3, r3, #3
 801d136:	18c3      	adds	r3, r0, r3
 801d138:	185b      	adds	r3, r3, r1
 801d13a:	681a      	ldr	r2, [r3, #0]
 801d13c:	1cfb      	adds	r3, r7, #3
 801d13e:	781b      	ldrb	r3, [r3, #0]
 801d140:	0019      	movs	r1, r3
 801d142:	0020      	movs	r0, r4
 801d144:	f7fe fc5a 	bl	801b9fc <USBD_LL_DataOutStage>
}
 801d148:	46c0      	nop			@ (mov r8, r8)
 801d14a:	46bd      	mov	sp, r7
 801d14c:	b003      	add	sp, #12
 801d14e:	bd90      	pop	{r4, r7, pc}

0801d150 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b082      	sub	sp, #8
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
 801d158:	000a      	movs	r2, r1
 801d15a:	1cfb      	adds	r3, r7, #3
 801d15c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d15e:	687a      	ldr	r2, [r7, #4]
 801d160:	23bc      	movs	r3, #188	@ 0xbc
 801d162:	009b      	lsls	r3, r3, #2
 801d164:	58d0      	ldr	r0, [r2, r3]
 801d166:	1cfb      	adds	r3, r7, #3
 801d168:	781a      	ldrb	r2, [r3, #0]
 801d16a:	6879      	ldr	r1, [r7, #4]
 801d16c:	0013      	movs	r3, r2
 801d16e:	009b      	lsls	r3, r3, #2
 801d170:	189b      	adds	r3, r3, r2
 801d172:	00db      	lsls	r3, r3, #3
 801d174:	18cb      	adds	r3, r1, r3
 801d176:	333c      	adds	r3, #60	@ 0x3c
 801d178:	681a      	ldr	r2, [r3, #0]
 801d17a:	1cfb      	adds	r3, r7, #3
 801d17c:	781b      	ldrb	r3, [r3, #0]
 801d17e:	0019      	movs	r1, r3
 801d180:	f7fe fcbe 	bl	801bb00 <USBD_LL_DataInStage>
}
 801d184:	46c0      	nop			@ (mov r8, r8)
 801d186:	46bd      	mov	sp, r7
 801d188:	b002      	add	sp, #8
 801d18a:	bd80      	pop	{r7, pc}

0801d18c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b082      	sub	sp, #8
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d194:	687a      	ldr	r2, [r7, #4]
 801d196:	23bc      	movs	r3, #188	@ 0xbc
 801d198:	009b      	lsls	r3, r3, #2
 801d19a:	58d3      	ldr	r3, [r2, r3]
 801d19c:	0018      	movs	r0, r3
 801d19e:	f7fe fdf5 	bl	801bd8c <USBD_LL_SOF>
}
 801d1a2:	46c0      	nop			@ (mov r8, r8)
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	b002      	add	sp, #8
 801d1a8:	bd80      	pop	{r7, pc}

0801d1aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1aa:	b580      	push	{r7, lr}
 801d1ac:	b084      	sub	sp, #16
 801d1ae:	af00      	add	r7, sp, #0
 801d1b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d1b2:	230f      	movs	r3, #15
 801d1b4:	18fb      	adds	r3, r7, r3
 801d1b6:	2201      	movs	r2, #1
 801d1b8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	689b      	ldr	r3, [r3, #8]
 801d1be:	2b02      	cmp	r3, #2
 801d1c0:	d001      	beq.n	801d1c6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d1c2:	f7eb f8a3 	bl	800830c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d1c6:	687a      	ldr	r2, [r7, #4]
 801d1c8:	23bc      	movs	r3, #188	@ 0xbc
 801d1ca:	009b      	lsls	r3, r3, #2
 801d1cc:	58d2      	ldr	r2, [r2, r3]
 801d1ce:	230f      	movs	r3, #15
 801d1d0:	18fb      	adds	r3, r7, r3
 801d1d2:	781b      	ldrb	r3, [r3, #0]
 801d1d4:	0019      	movs	r1, r3
 801d1d6:	0010      	movs	r0, r2
 801d1d8:	f7fe fd97 	bl	801bd0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d1dc:	687a      	ldr	r2, [r7, #4]
 801d1de:	23bc      	movs	r3, #188	@ 0xbc
 801d1e0:	009b      	lsls	r3, r3, #2
 801d1e2:	58d3      	ldr	r3, [r2, r3]
 801d1e4:	0018      	movs	r0, r3
 801d1e6:	f7fe fd48 	bl	801bc7a <USBD_LL_Reset>
}
 801d1ea:	46c0      	nop			@ (mov r8, r8)
 801d1ec:	46bd      	mov	sp, r7
 801d1ee:	b004      	add	sp, #16
 801d1f0:	bd80      	pop	{r7, pc}
	...

0801d1f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b082      	sub	sp, #8
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d1fc:	687a      	ldr	r2, [r7, #4]
 801d1fe:	23bc      	movs	r3, #188	@ 0xbc
 801d200:	009b      	lsls	r3, r3, #2
 801d202:	58d3      	ldr	r3, [r2, r3]
 801d204:	0018      	movs	r0, r3
 801d206:	f7fe fd91 	bl	801bd2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	699b      	ldr	r3, [r3, #24]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d005      	beq.n	801d21e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d212:	4b05      	ldr	r3, [pc, #20]	@ (801d228 <HAL_PCD_SuspendCallback+0x34>)
 801d214:	691a      	ldr	r2, [r3, #16]
 801d216:	4b04      	ldr	r3, [pc, #16]	@ (801d228 <HAL_PCD_SuspendCallback+0x34>)
 801d218:	2106      	movs	r1, #6
 801d21a:	430a      	orrs	r2, r1
 801d21c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d21e:	46c0      	nop			@ (mov r8, r8)
 801d220:	46bd      	mov	sp, r7
 801d222:	b002      	add	sp, #8
 801d224:	bd80      	pop	{r7, pc}
 801d226:	46c0      	nop			@ (mov r8, r8)
 801d228:	e000ed00 	.word	0xe000ed00

0801d22c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d22c:	b580      	push	{r7, lr}
 801d22e:	b082      	sub	sp, #8
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	699b      	ldr	r3, [r3, #24]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d007      	beq.n	801d24c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d23c:	4b09      	ldr	r3, [pc, #36]	@ (801d264 <HAL_PCD_ResumeCallback+0x38>)
 801d23e:	691a      	ldr	r2, [r3, #16]
 801d240:	4b08      	ldr	r3, [pc, #32]	@ (801d264 <HAL_PCD_ResumeCallback+0x38>)
 801d242:	2106      	movs	r1, #6
 801d244:	438a      	bics	r2, r1
 801d246:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d248:	f000 fa44 	bl	801d6d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d24c:	687a      	ldr	r2, [r7, #4]
 801d24e:	23bc      	movs	r3, #188	@ 0xbc
 801d250:	009b      	lsls	r3, r3, #2
 801d252:	58d3      	ldr	r3, [r2, r3]
 801d254:	0018      	movs	r0, r3
 801d256:	f7fe fd81 	bl	801bd5c <USBD_LL_Resume>
}
 801d25a:	46c0      	nop			@ (mov r8, r8)
 801d25c:	46bd      	mov	sp, r7
 801d25e:	b002      	add	sp, #8
 801d260:	bd80      	pop	{r7, pc}
 801d262:	46c0      	nop			@ (mov r8, r8)
 801d264:	e000ed00 	.word	0xe000ed00

0801d268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	b082      	sub	sp, #8
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d270:	4a2d      	ldr	r2, [pc, #180]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d272:	23bc      	movs	r3, #188	@ 0xbc
 801d274:	009b      	lsls	r3, r3, #2
 801d276:	6879      	ldr	r1, [r7, #4]
 801d278:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d27a:	687a      	ldr	r2, [r7, #4]
 801d27c:	23b0      	movs	r3, #176	@ 0xb0
 801d27e:	009b      	lsls	r3, r3, #2
 801d280:	4929      	ldr	r1, [pc, #164]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d282:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d284:	4b28      	ldr	r3, [pc, #160]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d286:	4a29      	ldr	r2, [pc, #164]	@ (801d32c <USBD_LL_Init+0xc4>)
 801d288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d28a:	4b27      	ldr	r3, [pc, #156]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d28c:	2208      	movs	r2, #8
 801d28e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d290:	4b25      	ldr	r3, [pc, #148]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d292:	2202      	movs	r2, #2
 801d294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d296:	4b24      	ldr	r3, [pc, #144]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d298:	2202      	movs	r2, #2
 801d29a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d29c:	4b22      	ldr	r3, [pc, #136]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d29e:	2200      	movs	r2, #0
 801d2a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d2a2:	4b21      	ldr	r3, [pc, #132]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d2a8:	4b1f      	ldr	r3, [pc, #124]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d2ae:	4b1e      	ldr	r3, [pc, #120]	@ (801d328 <USBD_LL_Init+0xc0>)
 801d2b0:	0018      	movs	r0, r3
 801d2b2:	f7f5 ff95 	bl	80131e0 <HAL_PCD_Init>
 801d2b6:	1e03      	subs	r3, r0, #0
 801d2b8:	d001      	beq.n	801d2be <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d2ba:	f7eb f827 	bl	800830c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d2be:	687a      	ldr	r2, [r7, #4]
 801d2c0:	23b0      	movs	r3, #176	@ 0xb0
 801d2c2:	009b      	lsls	r3, r3, #2
 801d2c4:	58d0      	ldr	r0, [r2, r3]
 801d2c6:	2318      	movs	r3, #24
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	2100      	movs	r1, #0
 801d2cc:	f7f7 fd56 	bl	8014d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d2d0:	687a      	ldr	r2, [r7, #4]
 801d2d2:	23b0      	movs	r3, #176	@ 0xb0
 801d2d4:	009b      	lsls	r3, r3, #2
 801d2d6:	58d0      	ldr	r0, [r2, r3]
 801d2d8:	2358      	movs	r3, #88	@ 0x58
 801d2da:	2200      	movs	r2, #0
 801d2dc:	2180      	movs	r1, #128	@ 0x80
 801d2de:	f7f7 fd4d 	bl	8014d7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d2e2:	687a      	ldr	r2, [r7, #4]
 801d2e4:	23b0      	movs	r3, #176	@ 0xb0
 801d2e6:	009b      	lsls	r3, r3, #2
 801d2e8:	58d0      	ldr	r0, [r2, r3]
 801d2ea:	23c0      	movs	r3, #192	@ 0xc0
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	2181      	movs	r1, #129	@ 0x81
 801d2f0:	f7f7 fd44 	bl	8014d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d2f4:	687a      	ldr	r2, [r7, #4]
 801d2f6:	23b0      	movs	r3, #176	@ 0xb0
 801d2f8:	009b      	lsls	r3, r3, #2
 801d2fa:	58d0      	ldr	r0, [r2, r3]
 801d2fc:	2388      	movs	r3, #136	@ 0x88
 801d2fe:	005b      	lsls	r3, r3, #1
 801d300:	2200      	movs	r2, #0
 801d302:	2101      	movs	r1, #1
 801d304:	f7f7 fd3a 	bl	8014d7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d308:	687a      	ldr	r2, [r7, #4]
 801d30a:	23b0      	movs	r3, #176	@ 0xb0
 801d30c:	009b      	lsls	r3, r3, #2
 801d30e:	58d0      	ldr	r0, [r2, r3]
 801d310:	2380      	movs	r3, #128	@ 0x80
 801d312:	005b      	lsls	r3, r3, #1
 801d314:	2200      	movs	r2, #0
 801d316:	2182      	movs	r1, #130	@ 0x82
 801d318:	f7f7 fd30 	bl	8014d7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d31c:	2300      	movs	r3, #0
}
 801d31e:	0018      	movs	r0, r3
 801d320:	46bd      	mov	sp, r7
 801d322:	b002      	add	sp, #8
 801d324:	bd80      	pop	{r7, pc}
 801d326:	46c0      	nop			@ (mov r8, r8)
 801d328:	20003160 	.word	0x20003160
 801d32c:	40005c00 	.word	0x40005c00

0801d330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d330:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d332:	b085      	sub	sp, #20
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d338:	210f      	movs	r1, #15
 801d33a:	187b      	adds	r3, r7, r1
 801d33c:	2200      	movs	r2, #0
 801d33e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d340:	260e      	movs	r6, #14
 801d342:	19bb      	adds	r3, r7, r6
 801d344:	2200      	movs	r2, #0
 801d346:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d348:	687a      	ldr	r2, [r7, #4]
 801d34a:	23b0      	movs	r3, #176	@ 0xb0
 801d34c:	009b      	lsls	r3, r3, #2
 801d34e:	58d3      	ldr	r3, [r2, r3]
 801d350:	000d      	movs	r5, r1
 801d352:	187c      	adds	r4, r7, r1
 801d354:	0018      	movs	r0, r3
 801d356:	f7f6 f843 	bl	80133e0 <HAL_PCD_Start>
 801d35a:	0003      	movs	r3, r0
 801d35c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d35e:	19bc      	adds	r4, r7, r6
 801d360:	197b      	adds	r3, r7, r5
 801d362:	781b      	ldrb	r3, [r3, #0]
 801d364:	0018      	movs	r0, r3
 801d366:	f000 f9bc 	bl	801d6e2 <USBD_Get_USB_Status>
 801d36a:	0003      	movs	r3, r0
 801d36c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d36e:	19bb      	adds	r3, r7, r6
 801d370:	781b      	ldrb	r3, [r3, #0]
}
 801d372:	0018      	movs	r0, r3
 801d374:	46bd      	mov	sp, r7
 801d376:	b005      	add	sp, #20
 801d378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d37a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d37c:	b085      	sub	sp, #20
 801d37e:	af00      	add	r7, sp, #0
 801d380:	6078      	str	r0, [r7, #4]
 801d382:	000c      	movs	r4, r1
 801d384:	0010      	movs	r0, r2
 801d386:	0019      	movs	r1, r3
 801d388:	1cfb      	adds	r3, r7, #3
 801d38a:	1c22      	adds	r2, r4, #0
 801d38c:	701a      	strb	r2, [r3, #0]
 801d38e:	1cbb      	adds	r3, r7, #2
 801d390:	1c02      	adds	r2, r0, #0
 801d392:	701a      	strb	r2, [r3, #0]
 801d394:	003b      	movs	r3, r7
 801d396:	1c0a      	adds	r2, r1, #0
 801d398:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d39a:	260f      	movs	r6, #15
 801d39c:	19bb      	adds	r3, r7, r6
 801d39e:	2200      	movs	r2, #0
 801d3a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3a2:	250e      	movs	r5, #14
 801d3a4:	197b      	adds	r3, r7, r5
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d3aa:	687a      	ldr	r2, [r7, #4]
 801d3ac:	23b0      	movs	r3, #176	@ 0xb0
 801d3ae:	009b      	lsls	r3, r3, #2
 801d3b0:	58d0      	ldr	r0, [r2, r3]
 801d3b2:	19bc      	adds	r4, r7, r6
 801d3b4:	1cbb      	adds	r3, r7, #2
 801d3b6:	781d      	ldrb	r5, [r3, #0]
 801d3b8:	003b      	movs	r3, r7
 801d3ba:	881a      	ldrh	r2, [r3, #0]
 801d3bc:	1cfb      	adds	r3, r7, #3
 801d3be:	7819      	ldrb	r1, [r3, #0]
 801d3c0:	002b      	movs	r3, r5
 801d3c2:	f7f6 f9a2 	bl	801370a <HAL_PCD_EP_Open>
 801d3c6:	0003      	movs	r3, r0
 801d3c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3ca:	250e      	movs	r5, #14
 801d3cc:	197c      	adds	r4, r7, r5
 801d3ce:	19bb      	adds	r3, r7, r6
 801d3d0:	781b      	ldrb	r3, [r3, #0]
 801d3d2:	0018      	movs	r0, r3
 801d3d4:	f000 f985 	bl	801d6e2 <USBD_Get_USB_Status>
 801d3d8:	0003      	movs	r3, r0
 801d3da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d3dc:	197b      	adds	r3, r7, r5
 801d3de:	781b      	ldrb	r3, [r3, #0]
}
 801d3e0:	0018      	movs	r0, r3
 801d3e2:	46bd      	mov	sp, r7
 801d3e4:	b005      	add	sp, #20
 801d3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3ea:	b085      	sub	sp, #20
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	000a      	movs	r2, r1
 801d3f2:	1cfb      	adds	r3, r7, #3
 801d3f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3f6:	210f      	movs	r1, #15
 801d3f8:	187b      	adds	r3, r7, r1
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3fe:	260e      	movs	r6, #14
 801d400:	19bb      	adds	r3, r7, r6
 801d402:	2200      	movs	r2, #0
 801d404:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d406:	687a      	ldr	r2, [r7, #4]
 801d408:	23b0      	movs	r3, #176	@ 0xb0
 801d40a:	009b      	lsls	r3, r3, #2
 801d40c:	58d2      	ldr	r2, [r2, r3]
 801d40e:	000d      	movs	r5, r1
 801d410:	187c      	adds	r4, r7, r1
 801d412:	1cfb      	adds	r3, r7, #3
 801d414:	781b      	ldrb	r3, [r3, #0]
 801d416:	0019      	movs	r1, r3
 801d418:	0010      	movs	r0, r2
 801d41a:	f7f6 f9e5 	bl	80137e8 <HAL_PCD_EP_Close>
 801d41e:	0003      	movs	r3, r0
 801d420:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d422:	19bc      	adds	r4, r7, r6
 801d424:	197b      	adds	r3, r7, r5
 801d426:	781b      	ldrb	r3, [r3, #0]
 801d428:	0018      	movs	r0, r3
 801d42a:	f000 f95a 	bl	801d6e2 <USBD_Get_USB_Status>
 801d42e:	0003      	movs	r3, r0
 801d430:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d432:	19bb      	adds	r3, r7, r6
 801d434:	781b      	ldrb	r3, [r3, #0]
}
 801d436:	0018      	movs	r0, r3
 801d438:	46bd      	mov	sp, r7
 801d43a:	b005      	add	sp, #20
 801d43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d43e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d43e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d440:	b085      	sub	sp, #20
 801d442:	af00      	add	r7, sp, #0
 801d444:	6078      	str	r0, [r7, #4]
 801d446:	000a      	movs	r2, r1
 801d448:	1cfb      	adds	r3, r7, #3
 801d44a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d44c:	210f      	movs	r1, #15
 801d44e:	187b      	adds	r3, r7, r1
 801d450:	2200      	movs	r2, #0
 801d452:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d454:	260e      	movs	r6, #14
 801d456:	19bb      	adds	r3, r7, r6
 801d458:	2200      	movs	r2, #0
 801d45a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d45c:	687a      	ldr	r2, [r7, #4]
 801d45e:	23b0      	movs	r3, #176	@ 0xb0
 801d460:	009b      	lsls	r3, r3, #2
 801d462:	58d2      	ldr	r2, [r2, r3]
 801d464:	000d      	movs	r5, r1
 801d466:	187c      	adds	r4, r7, r1
 801d468:	1cfb      	adds	r3, r7, #3
 801d46a:	781b      	ldrb	r3, [r3, #0]
 801d46c:	0019      	movs	r1, r3
 801d46e:	0010      	movs	r0, r2
 801d470:	f7f6 fa97 	bl	80139a2 <HAL_PCD_EP_SetStall>
 801d474:	0003      	movs	r3, r0
 801d476:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d478:	19bc      	adds	r4, r7, r6
 801d47a:	197b      	adds	r3, r7, r5
 801d47c:	781b      	ldrb	r3, [r3, #0]
 801d47e:	0018      	movs	r0, r3
 801d480:	f000 f92f 	bl	801d6e2 <USBD_Get_USB_Status>
 801d484:	0003      	movs	r3, r0
 801d486:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d488:	19bb      	adds	r3, r7, r6
 801d48a:	781b      	ldrb	r3, [r3, #0]
}
 801d48c:	0018      	movs	r0, r3
 801d48e:	46bd      	mov	sp, r7
 801d490:	b005      	add	sp, #20
 801d492:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d494 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d496:	b085      	sub	sp, #20
 801d498:	af00      	add	r7, sp, #0
 801d49a:	6078      	str	r0, [r7, #4]
 801d49c:	000a      	movs	r2, r1
 801d49e:	1cfb      	adds	r3, r7, #3
 801d4a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4a2:	210f      	movs	r1, #15
 801d4a4:	187b      	adds	r3, r7, r1
 801d4a6:	2200      	movs	r2, #0
 801d4a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4aa:	260e      	movs	r6, #14
 801d4ac:	19bb      	adds	r3, r7, r6
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d4b2:	687a      	ldr	r2, [r7, #4]
 801d4b4:	23b0      	movs	r3, #176	@ 0xb0
 801d4b6:	009b      	lsls	r3, r3, #2
 801d4b8:	58d2      	ldr	r2, [r2, r3]
 801d4ba:	000d      	movs	r5, r1
 801d4bc:	187c      	adds	r4, r7, r1
 801d4be:	1cfb      	adds	r3, r7, #3
 801d4c0:	781b      	ldrb	r3, [r3, #0]
 801d4c2:	0019      	movs	r1, r3
 801d4c4:	0010      	movs	r0, r2
 801d4c6:	f7f6 fac8 	bl	8013a5a <HAL_PCD_EP_ClrStall>
 801d4ca:	0003      	movs	r3, r0
 801d4cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4ce:	19bc      	adds	r4, r7, r6
 801d4d0:	197b      	adds	r3, r7, r5
 801d4d2:	781b      	ldrb	r3, [r3, #0]
 801d4d4:	0018      	movs	r0, r3
 801d4d6:	f000 f904 	bl	801d6e2 <USBD_Get_USB_Status>
 801d4da:	0003      	movs	r3, r0
 801d4dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4de:	19bb      	adds	r3, r7, r6
 801d4e0:	781b      	ldrb	r3, [r3, #0]
}
 801d4e2:	0018      	movs	r0, r3
 801d4e4:	46bd      	mov	sp, r7
 801d4e6:	b005      	add	sp, #20
 801d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d4ea:	b580      	push	{r7, lr}
 801d4ec:	b084      	sub	sp, #16
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	6078      	str	r0, [r7, #4]
 801d4f2:	000a      	movs	r2, r1
 801d4f4:	1cfb      	adds	r3, r7, #3
 801d4f6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d4f8:	687a      	ldr	r2, [r7, #4]
 801d4fa:	23b0      	movs	r3, #176	@ 0xb0
 801d4fc:	009b      	lsls	r3, r3, #2
 801d4fe:	58d3      	ldr	r3, [r2, r3]
 801d500:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d502:	1cfb      	adds	r3, r7, #3
 801d504:	781b      	ldrb	r3, [r3, #0]
 801d506:	b25b      	sxtb	r3, r3
 801d508:	2b00      	cmp	r3, #0
 801d50a:	da0d      	bge.n	801d528 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d50c:	1cfb      	adds	r3, r7, #3
 801d50e:	781b      	ldrb	r3, [r3, #0]
 801d510:	227f      	movs	r2, #127	@ 0x7f
 801d512:	4013      	ands	r3, r2
 801d514:	68f9      	ldr	r1, [r7, #12]
 801d516:	1c5a      	adds	r2, r3, #1
 801d518:	0013      	movs	r3, r2
 801d51a:	009b      	lsls	r3, r3, #2
 801d51c:	189b      	adds	r3, r3, r2
 801d51e:	00db      	lsls	r3, r3, #3
 801d520:	18cb      	adds	r3, r1, r3
 801d522:	3302      	adds	r3, #2
 801d524:	781b      	ldrb	r3, [r3, #0]
 801d526:	e00d      	b.n	801d544 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d528:	1cfb      	adds	r3, r7, #3
 801d52a:	781b      	ldrb	r3, [r3, #0]
 801d52c:	227f      	movs	r2, #127	@ 0x7f
 801d52e:	401a      	ands	r2, r3
 801d530:	68f8      	ldr	r0, [r7, #12]
 801d532:	23b5      	movs	r3, #181	@ 0xb5
 801d534:	0059      	lsls	r1, r3, #1
 801d536:	0013      	movs	r3, r2
 801d538:	009b      	lsls	r3, r3, #2
 801d53a:	189b      	adds	r3, r3, r2
 801d53c:	00db      	lsls	r3, r3, #3
 801d53e:	18c3      	adds	r3, r0, r3
 801d540:	185b      	adds	r3, r3, r1
 801d542:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d544:	0018      	movs	r0, r3
 801d546:	46bd      	mov	sp, r7
 801d548:	b004      	add	sp, #16
 801d54a:	bd80      	pop	{r7, pc}

0801d54c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d54e:	b085      	sub	sp, #20
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
 801d554:	000a      	movs	r2, r1
 801d556:	1cfb      	adds	r3, r7, #3
 801d558:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d55a:	210f      	movs	r1, #15
 801d55c:	187b      	adds	r3, r7, r1
 801d55e:	2200      	movs	r2, #0
 801d560:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d562:	260e      	movs	r6, #14
 801d564:	19bb      	adds	r3, r7, r6
 801d566:	2200      	movs	r2, #0
 801d568:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d56a:	687a      	ldr	r2, [r7, #4]
 801d56c:	23b0      	movs	r3, #176	@ 0xb0
 801d56e:	009b      	lsls	r3, r3, #2
 801d570:	58d2      	ldr	r2, [r2, r3]
 801d572:	000d      	movs	r5, r1
 801d574:	187c      	adds	r4, r7, r1
 801d576:	1cfb      	adds	r3, r7, #3
 801d578:	781b      	ldrb	r3, [r3, #0]
 801d57a:	0019      	movs	r1, r3
 801d57c:	0010      	movs	r0, r2
 801d57e:	f7f6 f899 	bl	80136b4 <HAL_PCD_SetAddress>
 801d582:	0003      	movs	r3, r0
 801d584:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d586:	19bc      	adds	r4, r7, r6
 801d588:	197b      	adds	r3, r7, r5
 801d58a:	781b      	ldrb	r3, [r3, #0]
 801d58c:	0018      	movs	r0, r3
 801d58e:	f000 f8a8 	bl	801d6e2 <USBD_Get_USB_Status>
 801d592:	0003      	movs	r3, r0
 801d594:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d596:	19bb      	adds	r3, r7, r6
 801d598:	781b      	ldrb	r3, [r3, #0]
}
 801d59a:	0018      	movs	r0, r3
 801d59c:	46bd      	mov	sp, r7
 801d59e:	b005      	add	sp, #20
 801d5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5a4:	b087      	sub	sp, #28
 801d5a6:	af00      	add	r7, sp, #0
 801d5a8:	60f8      	str	r0, [r7, #12]
 801d5aa:	0008      	movs	r0, r1
 801d5ac:	607a      	str	r2, [r7, #4]
 801d5ae:	0019      	movs	r1, r3
 801d5b0:	230b      	movs	r3, #11
 801d5b2:	18fb      	adds	r3, r7, r3
 801d5b4:	1c02      	adds	r2, r0, #0
 801d5b6:	701a      	strb	r2, [r3, #0]
 801d5b8:	2408      	movs	r4, #8
 801d5ba:	193b      	adds	r3, r7, r4
 801d5bc:	1c0a      	adds	r2, r1, #0
 801d5be:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5c0:	2117      	movs	r1, #23
 801d5c2:	187b      	adds	r3, r7, r1
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5c8:	2516      	movs	r5, #22
 801d5ca:	197b      	adds	r3, r7, r5
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d5d0:	68fa      	ldr	r2, [r7, #12]
 801d5d2:	23b0      	movs	r3, #176	@ 0xb0
 801d5d4:	009b      	lsls	r3, r3, #2
 801d5d6:	58d0      	ldr	r0, [r2, r3]
 801d5d8:	193b      	adds	r3, r7, r4
 801d5da:	881d      	ldrh	r5, [r3, #0]
 801d5dc:	000e      	movs	r6, r1
 801d5de:	187c      	adds	r4, r7, r1
 801d5e0:	687a      	ldr	r2, [r7, #4]
 801d5e2:	230b      	movs	r3, #11
 801d5e4:	18fb      	adds	r3, r7, r3
 801d5e6:	7819      	ldrb	r1, [r3, #0]
 801d5e8:	002b      	movs	r3, r5
 801d5ea:	f7f6 f99e 	bl	801392a <HAL_PCD_EP_Transmit>
 801d5ee:	0003      	movs	r3, r0
 801d5f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5f2:	2516      	movs	r5, #22
 801d5f4:	197c      	adds	r4, r7, r5
 801d5f6:	19bb      	adds	r3, r7, r6
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	0018      	movs	r0, r3
 801d5fc:	f000 f871 	bl	801d6e2 <USBD_Get_USB_Status>
 801d600:	0003      	movs	r3, r0
 801d602:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d604:	197b      	adds	r3, r7, r5
 801d606:	781b      	ldrb	r3, [r3, #0]
}
 801d608:	0018      	movs	r0, r3
 801d60a:	46bd      	mov	sp, r7
 801d60c:	b007      	add	sp, #28
 801d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d610:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d612:	b087      	sub	sp, #28
 801d614:	af00      	add	r7, sp, #0
 801d616:	60f8      	str	r0, [r7, #12]
 801d618:	0008      	movs	r0, r1
 801d61a:	607a      	str	r2, [r7, #4]
 801d61c:	0019      	movs	r1, r3
 801d61e:	230b      	movs	r3, #11
 801d620:	18fb      	adds	r3, r7, r3
 801d622:	1c02      	adds	r2, r0, #0
 801d624:	701a      	strb	r2, [r3, #0]
 801d626:	2408      	movs	r4, #8
 801d628:	193b      	adds	r3, r7, r4
 801d62a:	1c0a      	adds	r2, r1, #0
 801d62c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d62e:	2117      	movs	r1, #23
 801d630:	187b      	adds	r3, r7, r1
 801d632:	2200      	movs	r2, #0
 801d634:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d636:	2516      	movs	r5, #22
 801d638:	197b      	adds	r3, r7, r5
 801d63a:	2200      	movs	r2, #0
 801d63c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d63e:	68fa      	ldr	r2, [r7, #12]
 801d640:	23b0      	movs	r3, #176	@ 0xb0
 801d642:	009b      	lsls	r3, r3, #2
 801d644:	58d0      	ldr	r0, [r2, r3]
 801d646:	193b      	adds	r3, r7, r4
 801d648:	881d      	ldrh	r5, [r3, #0]
 801d64a:	000e      	movs	r6, r1
 801d64c:	187c      	adds	r4, r7, r1
 801d64e:	687a      	ldr	r2, [r7, #4]
 801d650:	230b      	movs	r3, #11
 801d652:	18fb      	adds	r3, r7, r3
 801d654:	7819      	ldrb	r1, [r3, #0]
 801d656:	002b      	movs	r3, r5
 801d658:	f7f6 f917 	bl	801388a <HAL_PCD_EP_Receive>
 801d65c:	0003      	movs	r3, r0
 801d65e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d660:	2516      	movs	r5, #22
 801d662:	197c      	adds	r4, r7, r5
 801d664:	19bb      	adds	r3, r7, r6
 801d666:	781b      	ldrb	r3, [r3, #0]
 801d668:	0018      	movs	r0, r3
 801d66a:	f000 f83a 	bl	801d6e2 <USBD_Get_USB_Status>
 801d66e:	0003      	movs	r3, r0
 801d670:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d672:	197b      	adds	r3, r7, r5
 801d674:	781b      	ldrb	r3, [r3, #0]
}
 801d676:	0018      	movs	r0, r3
 801d678:	46bd      	mov	sp, r7
 801d67a:	b007      	add	sp, #28
 801d67c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d67e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d67e:	b580      	push	{r7, lr}
 801d680:	b082      	sub	sp, #8
 801d682:	af00      	add	r7, sp, #0
 801d684:	6078      	str	r0, [r7, #4]
 801d686:	000a      	movs	r2, r1
 801d688:	1cfb      	adds	r3, r7, #3
 801d68a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d68c:	687a      	ldr	r2, [r7, #4]
 801d68e:	23b0      	movs	r3, #176	@ 0xb0
 801d690:	009b      	lsls	r3, r3, #2
 801d692:	58d2      	ldr	r2, [r2, r3]
 801d694:	1cfb      	adds	r3, r7, #3
 801d696:	781b      	ldrb	r3, [r3, #0]
 801d698:	0019      	movs	r1, r3
 801d69a:	0010      	movs	r0, r2
 801d69c:	f7f6 f92c 	bl	80138f8 <HAL_PCD_EP_GetRxCount>
 801d6a0:	0003      	movs	r3, r0
}
 801d6a2:	0018      	movs	r0, r3
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	b002      	add	sp, #8
 801d6a8:	bd80      	pop	{r7, pc}
	...

0801d6ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b082      	sub	sp, #8
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d6b4:	4b02      	ldr	r3, [pc, #8]	@ (801d6c0 <USBD_static_malloc+0x14>)
}
 801d6b6:	0018      	movs	r0, r3
 801d6b8:	46bd      	mov	sp, r7
 801d6ba:	b002      	add	sp, #8
 801d6bc:	bd80      	pop	{r7, pc}
 801d6be:	46c0      	nop			@ (mov r8, r8)
 801d6c0:	20003454 	.word	0x20003454

0801d6c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b082      	sub	sp, #8
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	6078      	str	r0, [r7, #4]

}
 801d6cc:	46c0      	nop			@ (mov r8, r8)
 801d6ce:	46bd      	mov	sp, r7
 801d6d0:	b002      	add	sp, #8
 801d6d2:	bd80      	pop	{r7, pc}

0801d6d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d6d8:	f7ea fcd2 	bl	8008080 <SystemClock_Config>
}
 801d6dc:	46c0      	nop			@ (mov r8, r8)
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bd80      	pop	{r7, pc}

0801d6e2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d6e2:	b580      	push	{r7, lr}
 801d6e4:	b084      	sub	sp, #16
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	0002      	movs	r2, r0
 801d6ea:	1dfb      	adds	r3, r7, #7
 801d6ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6ee:	230f      	movs	r3, #15
 801d6f0:	18fb      	adds	r3, r7, r3
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d6f6:	1dfb      	adds	r3, r7, #7
 801d6f8:	781b      	ldrb	r3, [r3, #0]
 801d6fa:	2b03      	cmp	r3, #3
 801d6fc:	d017      	beq.n	801d72e <USBD_Get_USB_Status+0x4c>
 801d6fe:	dc1b      	bgt.n	801d738 <USBD_Get_USB_Status+0x56>
 801d700:	2b02      	cmp	r3, #2
 801d702:	d00f      	beq.n	801d724 <USBD_Get_USB_Status+0x42>
 801d704:	dc18      	bgt.n	801d738 <USBD_Get_USB_Status+0x56>
 801d706:	2b00      	cmp	r3, #0
 801d708:	d002      	beq.n	801d710 <USBD_Get_USB_Status+0x2e>
 801d70a:	2b01      	cmp	r3, #1
 801d70c:	d005      	beq.n	801d71a <USBD_Get_USB_Status+0x38>
 801d70e:	e013      	b.n	801d738 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d710:	230f      	movs	r3, #15
 801d712:	18fb      	adds	r3, r7, r3
 801d714:	2200      	movs	r2, #0
 801d716:	701a      	strb	r2, [r3, #0]
    break;
 801d718:	e013      	b.n	801d742 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d71a:	230f      	movs	r3, #15
 801d71c:	18fb      	adds	r3, r7, r3
 801d71e:	2202      	movs	r2, #2
 801d720:	701a      	strb	r2, [r3, #0]
    break;
 801d722:	e00e      	b.n	801d742 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d724:	230f      	movs	r3, #15
 801d726:	18fb      	adds	r3, r7, r3
 801d728:	2201      	movs	r2, #1
 801d72a:	701a      	strb	r2, [r3, #0]
    break;
 801d72c:	e009      	b.n	801d742 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d72e:	230f      	movs	r3, #15
 801d730:	18fb      	adds	r3, r7, r3
 801d732:	2202      	movs	r2, #2
 801d734:	701a      	strb	r2, [r3, #0]
    break;
 801d736:	e004      	b.n	801d742 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d738:	230f      	movs	r3, #15
 801d73a:	18fb      	adds	r3, r7, r3
 801d73c:	2202      	movs	r2, #2
 801d73e:	701a      	strb	r2, [r3, #0]
    break;
 801d740:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d742:	230f      	movs	r3, #15
 801d744:	18fb      	adds	r3, r7, r3
 801d746:	781b      	ldrb	r3, [r3, #0]
}
 801d748:	0018      	movs	r0, r3
 801d74a:	46bd      	mov	sp, r7
 801d74c:	b004      	add	sp, #16
 801d74e:	bd80      	pop	{r7, pc}

0801d750 <arm_cfft_radix4by2_q31>:
 801d750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d752:	465f      	mov	r7, fp
 801d754:	4656      	mov	r6, sl
 801d756:	464d      	mov	r5, r9
 801d758:	4644      	mov	r4, r8
 801d75a:	000b      	movs	r3, r1
 801d75c:	b4f0      	push	{r4, r5, r6, r7}
 801d75e:	085b      	lsrs	r3, r3, #1
 801d760:	b08f      	sub	sp, #60	@ 0x3c
 801d762:	910a      	str	r1, [sp, #40]	@ 0x28
 801d764:	0007      	movs	r7, r0
 801d766:	9009      	str	r0, [sp, #36]	@ 0x24
 801d768:	0011      	movs	r1, r2
 801d76a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d76c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d100      	bne.n	801d774 <arm_cfft_radix4by2_q31+0x24>
 801d772:	e0a0      	b.n	801d8b6 <arm_cfft_radix4by2_q31+0x166>
 801d774:	0002      	movs	r2, r0
 801d776:	00db      	lsls	r3, r3, #3
 801d778:	3204      	adds	r2, #4
 801d77a:	4691      	mov	r9, r2
 801d77c:	4698      	mov	r8, r3
 801d77e:	000a      	movs	r2, r1
 801d780:	464e      	mov	r6, r9
 801d782:	4442      	add	r2, r8
 801d784:	4699      	mov	r9, r3
 801d786:	4688      	mov	r8, r1
 801d788:	9208      	str	r2, [sp, #32]
 801d78a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d78c:	4643      	mov	r3, r8
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	469b      	mov	fp, r3
 801d792:	4643      	mov	r3, r8
 801d794:	685b      	ldr	r3, [r3, #4]
 801d796:	469a      	mov	sl, r3
 801d798:	683b      	ldr	r3, [r7, #0]
 801d79a:	109c      	asrs	r4, r3, #2
 801d79c:	464b      	mov	r3, r9
 801d79e:	58fb      	ldr	r3, [r7, r3]
 801d7a0:	109a      	asrs	r2, r3, #2
 801d7a2:	18a3      	adds	r3, r4, r2
 801d7a4:	603b      	str	r3, [r7, #0]
 801d7a6:	6833      	ldr	r3, [r6, #0]
 801d7a8:	1aa4      	subs	r4, r4, r2
 801d7aa:	109d      	asrs	r5, r3, #2
 801d7ac:	464b      	mov	r3, r9
 801d7ae:	58f3      	ldr	r3, [r6, r3]
 801d7b0:	17e2      	asrs	r2, r4, #31
 801d7b2:	109b      	asrs	r3, r3, #2
 801d7b4:	18e9      	adds	r1, r5, r3
 801d7b6:	6031      	str	r1, [r6, #0]
 801d7b8:	0011      	movs	r1, r2
 801d7ba:	465a      	mov	r2, fp
 801d7bc:	17d2      	asrs	r2, r2, #31
 801d7be:	0010      	movs	r0, r2
 801d7c0:	4652      	mov	r2, sl
 801d7c2:	1aed      	subs	r5, r5, r3
 801d7c4:	17eb      	asrs	r3, r5, #31
 801d7c6:	17d2      	asrs	r2, r2, #31
 801d7c8:	9307      	str	r3, [sp, #28]
 801d7ca:	9204      	str	r2, [sp, #16]
 801d7cc:	0003      	movs	r3, r0
 801d7ce:	465a      	mov	r2, fp
 801d7d0:	9006      	str	r0, [sp, #24]
 801d7d2:	0020      	movs	r0, r4
 801d7d4:	9105      	str	r1, [sp, #20]
 801d7d6:	f7e2 fef3 	bl	80005c0 <__aeabi_lmul>
 801d7da:	2280      	movs	r2, #128	@ 0x80
 801d7dc:	2300      	movs	r3, #0
 801d7de:	0612      	lsls	r2, r2, #24
 801d7e0:	1880      	adds	r0, r0, r2
 801d7e2:	4159      	adcs	r1, r3
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	9101      	str	r1, [sp, #4]
 801d7e8:	9300      	str	r3, [sp, #0]
 801d7ea:	4652      	mov	r2, sl
 801d7ec:	9b04      	ldr	r3, [sp, #16]
 801d7ee:	0028      	movs	r0, r5
 801d7f0:	17e9      	asrs	r1, r5, #31
 801d7f2:	f7e2 fee5 	bl	80005c0 <__aeabi_lmul>
 801d7f6:	9a00      	ldr	r2, [sp, #0]
 801d7f8:	9b01      	ldr	r3, [sp, #4]
 801d7fa:	1880      	adds	r0, r0, r2
 801d7fc:	4159      	adcs	r1, r3
 801d7fe:	2280      	movs	r2, #128	@ 0x80
 801d800:	2300      	movs	r3, #0
 801d802:	0612      	lsls	r2, r2, #24
 801d804:	1880      	adds	r0, r0, r2
 801d806:	4159      	adcs	r1, r3
 801d808:	464a      	mov	r2, r9
 801d80a:	004b      	lsls	r3, r1, #1
 801d80c:	50bb      	str	r3, [r7, r2]
 801d80e:	4658      	mov	r0, fp
 801d810:	002a      	movs	r2, r5
 801d812:	9b07      	ldr	r3, [sp, #28]
 801d814:	9906      	ldr	r1, [sp, #24]
 801d816:	f7e2 fed3 	bl	80005c0 <__aeabi_lmul>
 801d81a:	2280      	movs	r2, #128	@ 0x80
 801d81c:	2300      	movs	r3, #0
 801d81e:	0612      	lsls	r2, r2, #24
 801d820:	1880      	adds	r0, r0, r2
 801d822:	4159      	adcs	r1, r3
 801d824:	2000      	movs	r0, #0
 801d826:	9103      	str	r1, [sp, #12]
 801d828:	9002      	str	r0, [sp, #8]
 801d82a:	4652      	mov	r2, sl
 801d82c:	9b04      	ldr	r3, [sp, #16]
 801d82e:	0020      	movs	r0, r4
 801d830:	9905      	ldr	r1, [sp, #20]
 801d832:	f7e2 fec5 	bl	80005c0 <__aeabi_lmul>
 801d836:	9a02      	ldr	r2, [sp, #8]
 801d838:	9b03      	ldr	r3, [sp, #12]
 801d83a:	1a12      	subs	r2, r2, r0
 801d83c:	418b      	sbcs	r3, r1
 801d83e:	2080      	movs	r0, #128	@ 0x80
 801d840:	2100      	movs	r1, #0
 801d842:	0600      	lsls	r0, r0, #24
 801d844:	1812      	adds	r2, r2, r0
 801d846:	414b      	adcs	r3, r1
 801d848:	464a      	mov	r2, r9
 801d84a:	005b      	lsls	r3, r3, #1
 801d84c:	50b3      	str	r3, [r6, r2]
 801d84e:	2308      	movs	r3, #8
 801d850:	469c      	mov	ip, r3
 801d852:	9b08      	ldr	r3, [sp, #32]
 801d854:	44e0      	add	r8, ip
 801d856:	3708      	adds	r7, #8
 801d858:	3608      	adds	r6, #8
 801d85a:	4598      	cmp	r8, r3
 801d85c:	d196      	bne.n	801d78c <arm_cfft_radix4by2_q31+0x3c>
 801d85e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d860:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d862:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d864:	2302      	movs	r3, #2
 801d866:	003a      	movs	r2, r7
 801d868:	0029      	movs	r1, r5
 801d86a:	0020      	movs	r0, r4
 801d86c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d86e:	f000 f957 	bl	801db20 <arm_radix4_butterfly_q31>
 801d872:	46a4      	mov	ip, r4
 801d874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d876:	2302      	movs	r3, #2
 801d878:	0088      	lsls	r0, r1, #2
 801d87a:	4460      	add	r0, ip
 801d87c:	003a      	movs	r2, r7
 801d87e:	0029      	movs	r1, r5
 801d880:	f000 f94e 	bl	801db20 <arm_radix4_butterfly_q31>
 801d884:	46a4      	mov	ip, r4
 801d886:	0128      	lsls	r0, r5, #4
 801d888:	4460      	add	r0, ip
 801d88a:	6833      	ldr	r3, [r6, #0]
 801d88c:	005b      	lsls	r3, r3, #1
 801d88e:	6033      	str	r3, [r6, #0]
 801d890:	6873      	ldr	r3, [r6, #4]
 801d892:	005b      	lsls	r3, r3, #1
 801d894:	6073      	str	r3, [r6, #4]
 801d896:	68b3      	ldr	r3, [r6, #8]
 801d898:	005b      	lsls	r3, r3, #1
 801d89a:	60b3      	str	r3, [r6, #8]
 801d89c:	68f3      	ldr	r3, [r6, #12]
 801d89e:	005b      	lsls	r3, r3, #1
 801d8a0:	60f3      	str	r3, [r6, #12]
 801d8a2:	3610      	adds	r6, #16
 801d8a4:	42b0      	cmp	r0, r6
 801d8a6:	d1f0      	bne.n	801d88a <arm_cfft_radix4by2_q31+0x13a>
 801d8a8:	b00f      	add	sp, #60	@ 0x3c
 801d8aa:	bc3c      	pop	{r2, r3, r4, r5}
 801d8ac:	4690      	mov	r8, r2
 801d8ae:	4699      	mov	r9, r3
 801d8b0:	46a2      	mov	sl, r4
 801d8b2:	46ab      	mov	fp, r5
 801d8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8b6:	2302      	movs	r3, #2
 801d8b8:	2100      	movs	r1, #0
 801d8ba:	0015      	movs	r5, r2
 801d8bc:	f000 f930 	bl	801db20 <arm_radix4_butterfly_q31>
 801d8c0:	46bc      	mov	ip, r7
 801d8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8c4:	002a      	movs	r2, r5
 801d8c6:	0098      	lsls	r0, r3, #2
 801d8c8:	4460      	add	r0, ip
 801d8ca:	2302      	movs	r3, #2
 801d8cc:	2100      	movs	r1, #0
 801d8ce:	f000 f927 	bl	801db20 <arm_radix4_butterfly_q31>
 801d8d2:	e7e9      	b.n	801d8a8 <arm_cfft_radix4by2_q31+0x158>

0801d8d4 <arm_cfft_radix4by2_inverse_q31>:
 801d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8d6:	465f      	mov	r7, fp
 801d8d8:	4656      	mov	r6, sl
 801d8da:	464d      	mov	r5, r9
 801d8dc:	4644      	mov	r4, r8
 801d8de:	000b      	movs	r3, r1
 801d8e0:	b4f0      	push	{r4, r5, r6, r7}
 801d8e2:	085b      	lsrs	r3, r3, #1
 801d8e4:	b08f      	sub	sp, #60	@ 0x3c
 801d8e6:	910a      	str	r1, [sp, #40]	@ 0x28
 801d8e8:	0007      	movs	r7, r0
 801d8ea:	9009      	str	r0, [sp, #36]	@ 0x24
 801d8ec:	0011      	movs	r1, r2
 801d8ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d8f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d100      	bne.n	801d8f8 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d8f6:	e0a0      	b.n	801da3a <arm_cfft_radix4by2_inverse_q31+0x166>
 801d8f8:	0002      	movs	r2, r0
 801d8fa:	00db      	lsls	r3, r3, #3
 801d8fc:	3204      	adds	r2, #4
 801d8fe:	4691      	mov	r9, r2
 801d900:	4698      	mov	r8, r3
 801d902:	000a      	movs	r2, r1
 801d904:	464e      	mov	r6, r9
 801d906:	4442      	add	r2, r8
 801d908:	4699      	mov	r9, r3
 801d90a:	4688      	mov	r8, r1
 801d90c:	9208      	str	r2, [sp, #32]
 801d90e:	900d      	str	r0, [sp, #52]	@ 0x34
 801d910:	4643      	mov	r3, r8
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	469b      	mov	fp, r3
 801d916:	4643      	mov	r3, r8
 801d918:	685b      	ldr	r3, [r3, #4]
 801d91a:	469a      	mov	sl, r3
 801d91c:	683b      	ldr	r3, [r7, #0]
 801d91e:	109c      	asrs	r4, r3, #2
 801d920:	464b      	mov	r3, r9
 801d922:	58fb      	ldr	r3, [r7, r3]
 801d924:	109a      	asrs	r2, r3, #2
 801d926:	18a3      	adds	r3, r4, r2
 801d928:	603b      	str	r3, [r7, #0]
 801d92a:	6833      	ldr	r3, [r6, #0]
 801d92c:	1aa4      	subs	r4, r4, r2
 801d92e:	109d      	asrs	r5, r3, #2
 801d930:	464b      	mov	r3, r9
 801d932:	58f3      	ldr	r3, [r6, r3]
 801d934:	17e2      	asrs	r2, r4, #31
 801d936:	109b      	asrs	r3, r3, #2
 801d938:	18e9      	adds	r1, r5, r3
 801d93a:	6031      	str	r1, [r6, #0]
 801d93c:	0011      	movs	r1, r2
 801d93e:	465a      	mov	r2, fp
 801d940:	17d2      	asrs	r2, r2, #31
 801d942:	0010      	movs	r0, r2
 801d944:	4652      	mov	r2, sl
 801d946:	1aed      	subs	r5, r5, r3
 801d948:	17eb      	asrs	r3, r5, #31
 801d94a:	17d2      	asrs	r2, r2, #31
 801d94c:	9307      	str	r3, [sp, #28]
 801d94e:	9204      	str	r2, [sp, #16]
 801d950:	0003      	movs	r3, r0
 801d952:	465a      	mov	r2, fp
 801d954:	9006      	str	r0, [sp, #24]
 801d956:	0020      	movs	r0, r4
 801d958:	9105      	str	r1, [sp, #20]
 801d95a:	f7e2 fe31 	bl	80005c0 <__aeabi_lmul>
 801d95e:	2280      	movs	r2, #128	@ 0x80
 801d960:	2300      	movs	r3, #0
 801d962:	0612      	lsls	r2, r2, #24
 801d964:	1880      	adds	r0, r0, r2
 801d966:	4159      	adcs	r1, r3
 801d968:	2300      	movs	r3, #0
 801d96a:	9101      	str	r1, [sp, #4]
 801d96c:	9300      	str	r3, [sp, #0]
 801d96e:	4652      	mov	r2, sl
 801d970:	9b04      	ldr	r3, [sp, #16]
 801d972:	0028      	movs	r0, r5
 801d974:	17e9      	asrs	r1, r5, #31
 801d976:	f7e2 fe23 	bl	80005c0 <__aeabi_lmul>
 801d97a:	9a00      	ldr	r2, [sp, #0]
 801d97c:	9b01      	ldr	r3, [sp, #4]
 801d97e:	1a12      	subs	r2, r2, r0
 801d980:	418b      	sbcs	r3, r1
 801d982:	2080      	movs	r0, #128	@ 0x80
 801d984:	2100      	movs	r1, #0
 801d986:	0600      	lsls	r0, r0, #24
 801d988:	1812      	adds	r2, r2, r0
 801d98a:	414b      	adcs	r3, r1
 801d98c:	464a      	mov	r2, r9
 801d98e:	005b      	lsls	r3, r3, #1
 801d990:	50bb      	str	r3, [r7, r2]
 801d992:	4658      	mov	r0, fp
 801d994:	002a      	movs	r2, r5
 801d996:	9b07      	ldr	r3, [sp, #28]
 801d998:	9906      	ldr	r1, [sp, #24]
 801d99a:	f7e2 fe11 	bl	80005c0 <__aeabi_lmul>
 801d99e:	2280      	movs	r2, #128	@ 0x80
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	0612      	lsls	r2, r2, #24
 801d9a4:	1880      	adds	r0, r0, r2
 801d9a6:	4159      	adcs	r1, r3
 801d9a8:	2000      	movs	r0, #0
 801d9aa:	9103      	str	r1, [sp, #12]
 801d9ac:	9002      	str	r0, [sp, #8]
 801d9ae:	4652      	mov	r2, sl
 801d9b0:	9b04      	ldr	r3, [sp, #16]
 801d9b2:	0020      	movs	r0, r4
 801d9b4:	9905      	ldr	r1, [sp, #20]
 801d9b6:	f7e2 fe03 	bl	80005c0 <__aeabi_lmul>
 801d9ba:	9b02      	ldr	r3, [sp, #8]
 801d9bc:	9c03      	ldr	r4, [sp, #12]
 801d9be:	18c0      	adds	r0, r0, r3
 801d9c0:	4161      	adcs	r1, r4
 801d9c2:	2380      	movs	r3, #128	@ 0x80
 801d9c4:	2400      	movs	r4, #0
 801d9c6:	061b      	lsls	r3, r3, #24
 801d9c8:	18c0      	adds	r0, r0, r3
 801d9ca:	4161      	adcs	r1, r4
 801d9cc:	464a      	mov	r2, r9
 801d9ce:	004b      	lsls	r3, r1, #1
 801d9d0:	50b3      	str	r3, [r6, r2]
 801d9d2:	2308      	movs	r3, #8
 801d9d4:	469c      	mov	ip, r3
 801d9d6:	9b08      	ldr	r3, [sp, #32]
 801d9d8:	44e0      	add	r8, ip
 801d9da:	3708      	adds	r7, #8
 801d9dc:	3608      	adds	r6, #8
 801d9de:	4598      	cmp	r8, r3
 801d9e0:	d196      	bne.n	801d910 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d9e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d9e4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d9e6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d9e8:	2302      	movs	r3, #2
 801d9ea:	003a      	movs	r2, r7
 801d9ec:	0029      	movs	r1, r5
 801d9ee:	0020      	movs	r0, r4
 801d9f0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d9f2:	f000 fb3b 	bl	801e06c <arm_radix4_butterfly_inverse_q31>
 801d9f6:	46a4      	mov	ip, r4
 801d9f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d9fa:	2302      	movs	r3, #2
 801d9fc:	0088      	lsls	r0, r1, #2
 801d9fe:	4460      	add	r0, ip
 801da00:	003a      	movs	r2, r7
 801da02:	0029      	movs	r1, r5
 801da04:	f000 fb32 	bl	801e06c <arm_radix4_butterfly_inverse_q31>
 801da08:	46a4      	mov	ip, r4
 801da0a:	0128      	lsls	r0, r5, #4
 801da0c:	4460      	add	r0, ip
 801da0e:	6833      	ldr	r3, [r6, #0]
 801da10:	005b      	lsls	r3, r3, #1
 801da12:	6033      	str	r3, [r6, #0]
 801da14:	6873      	ldr	r3, [r6, #4]
 801da16:	005b      	lsls	r3, r3, #1
 801da18:	6073      	str	r3, [r6, #4]
 801da1a:	68b3      	ldr	r3, [r6, #8]
 801da1c:	005b      	lsls	r3, r3, #1
 801da1e:	60b3      	str	r3, [r6, #8]
 801da20:	68f3      	ldr	r3, [r6, #12]
 801da22:	005b      	lsls	r3, r3, #1
 801da24:	60f3      	str	r3, [r6, #12]
 801da26:	3610      	adds	r6, #16
 801da28:	42b0      	cmp	r0, r6
 801da2a:	d1f0      	bne.n	801da0e <arm_cfft_radix4by2_inverse_q31+0x13a>
 801da2c:	b00f      	add	sp, #60	@ 0x3c
 801da2e:	bc3c      	pop	{r2, r3, r4, r5}
 801da30:	4690      	mov	r8, r2
 801da32:	4699      	mov	r9, r3
 801da34:	46a2      	mov	sl, r4
 801da36:	46ab      	mov	fp, r5
 801da38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da3a:	2302      	movs	r3, #2
 801da3c:	2100      	movs	r1, #0
 801da3e:	0015      	movs	r5, r2
 801da40:	f000 fb14 	bl	801e06c <arm_radix4_butterfly_inverse_q31>
 801da44:	46bc      	mov	ip, r7
 801da46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da48:	002a      	movs	r2, r5
 801da4a:	0098      	lsls	r0, r3, #2
 801da4c:	4460      	add	r0, ip
 801da4e:	2302      	movs	r3, #2
 801da50:	2100      	movs	r1, #0
 801da52:	f000 fb0b 	bl	801e06c <arm_radix4_butterfly_inverse_q31>
 801da56:	e7e9      	b.n	801da2c <arm_cfft_radix4by2_inverse_q31+0x158>

0801da58 <arm_cfft_q31>:
 801da58:	b570      	push	{r4, r5, r6, lr}
 801da5a:	001e      	movs	r6, r3
 801da5c:	2380      	movs	r3, #128	@ 0x80
 801da5e:	000d      	movs	r5, r1
 801da60:	0004      	movs	r4, r0
 801da62:	8801      	ldrh	r1, [r0, #0]
 801da64:	005b      	lsls	r3, r3, #1
 801da66:	2a01      	cmp	r2, #1
 801da68:	d028      	beq.n	801dabc <arm_cfft_q31+0x64>
 801da6a:	4299      	cmp	r1, r3
 801da6c:	d020      	beq.n	801dab0 <arm_cfft_q31+0x58>
 801da6e:	d812      	bhi.n	801da96 <arm_cfft_q31+0x3e>
 801da70:	2920      	cmp	r1, #32
 801da72:	d004      	beq.n	801da7e <arm_cfft_q31+0x26>
 801da74:	d949      	bls.n	801db0a <arm_cfft_q31+0xb2>
 801da76:	2940      	cmp	r1, #64	@ 0x40
 801da78:	d01a      	beq.n	801dab0 <arm_cfft_q31+0x58>
 801da7a:	2980      	cmp	r1, #128	@ 0x80
 801da7c:	d103      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801da7e:	6862      	ldr	r2, [r4, #4]
 801da80:	0028      	movs	r0, r5
 801da82:	f7ff fe65 	bl	801d750 <arm_cfft_radix4by2_q31>
 801da86:	2e00      	cmp	r6, #0
 801da88:	d004      	beq.n	801da94 <arm_cfft_q31+0x3c>
 801da8a:	68a2      	ldr	r2, [r4, #8]
 801da8c:	89a1      	ldrh	r1, [r4, #12]
 801da8e:	0028      	movs	r0, r5
 801da90:	f7e2 fb3a 	bl	8000108 <arm_bitreversal_32>
 801da94:	bd70      	pop	{r4, r5, r6, pc}
 801da96:	2380      	movs	r3, #128	@ 0x80
 801da98:	00db      	lsls	r3, r3, #3
 801da9a:	4299      	cmp	r1, r3
 801da9c:	d008      	beq.n	801dab0 <arm_cfft_q31+0x58>
 801da9e:	d92f      	bls.n	801db00 <arm_cfft_q31+0xa8>
 801daa0:	2380      	movs	r3, #128	@ 0x80
 801daa2:	011b      	lsls	r3, r3, #4
 801daa4:	4299      	cmp	r1, r3
 801daa6:	d0ea      	beq.n	801da7e <arm_cfft_q31+0x26>
 801daa8:	2380      	movs	r3, #128	@ 0x80
 801daaa:	015b      	lsls	r3, r3, #5
 801daac:	4299      	cmp	r1, r3
 801daae:	d1ea      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801dab0:	2301      	movs	r3, #1
 801dab2:	6862      	ldr	r2, [r4, #4]
 801dab4:	0028      	movs	r0, r5
 801dab6:	f000 f833 	bl	801db20 <arm_radix4_butterfly_q31>
 801daba:	e7e4      	b.n	801da86 <arm_cfft_q31+0x2e>
 801dabc:	4299      	cmp	r1, r3
 801dabe:	d019      	beq.n	801daf4 <arm_cfft_q31+0x9c>
 801dac0:	d80b      	bhi.n	801dada <arm_cfft_q31+0x82>
 801dac2:	2920      	cmp	r1, #32
 801dac4:	d004      	beq.n	801dad0 <arm_cfft_q31+0x78>
 801dac6:	d928      	bls.n	801db1a <arm_cfft_q31+0xc2>
 801dac8:	2940      	cmp	r1, #64	@ 0x40
 801daca:	d013      	beq.n	801daf4 <arm_cfft_q31+0x9c>
 801dacc:	2980      	cmp	r1, #128	@ 0x80
 801dace:	d1da      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801dad0:	6862      	ldr	r2, [r4, #4]
 801dad2:	0028      	movs	r0, r5
 801dad4:	f7ff fefe 	bl	801d8d4 <arm_cfft_radix4by2_inverse_q31>
 801dad8:	e7d5      	b.n	801da86 <arm_cfft_q31+0x2e>
 801dada:	2380      	movs	r3, #128	@ 0x80
 801dadc:	00db      	lsls	r3, r3, #3
 801dade:	4299      	cmp	r1, r3
 801dae0:	d008      	beq.n	801daf4 <arm_cfft_q31+0x9c>
 801dae2:	d915      	bls.n	801db10 <arm_cfft_q31+0xb8>
 801dae4:	2380      	movs	r3, #128	@ 0x80
 801dae6:	011b      	lsls	r3, r3, #4
 801dae8:	4299      	cmp	r1, r3
 801daea:	d0f1      	beq.n	801dad0 <arm_cfft_q31+0x78>
 801daec:	2380      	movs	r3, #128	@ 0x80
 801daee:	015b      	lsls	r3, r3, #5
 801daf0:	4299      	cmp	r1, r3
 801daf2:	d1c8      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801daf4:	2301      	movs	r3, #1
 801daf6:	6862      	ldr	r2, [r4, #4]
 801daf8:	0028      	movs	r0, r5
 801dafa:	f000 fab7 	bl	801e06c <arm_radix4_butterfly_inverse_q31>
 801dafe:	e7c2      	b.n	801da86 <arm_cfft_q31+0x2e>
 801db00:	2380      	movs	r3, #128	@ 0x80
 801db02:	009b      	lsls	r3, r3, #2
 801db04:	4299      	cmp	r1, r3
 801db06:	d0ba      	beq.n	801da7e <arm_cfft_q31+0x26>
 801db08:	e7bd      	b.n	801da86 <arm_cfft_q31+0x2e>
 801db0a:	2910      	cmp	r1, #16
 801db0c:	d1bb      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801db0e:	e7cf      	b.n	801dab0 <arm_cfft_q31+0x58>
 801db10:	2380      	movs	r3, #128	@ 0x80
 801db12:	009b      	lsls	r3, r3, #2
 801db14:	4299      	cmp	r1, r3
 801db16:	d0db      	beq.n	801dad0 <arm_cfft_q31+0x78>
 801db18:	e7b5      	b.n	801da86 <arm_cfft_q31+0x2e>
 801db1a:	2910      	cmp	r1, #16
 801db1c:	d1b3      	bne.n	801da86 <arm_cfft_q31+0x2e>
 801db1e:	e7e9      	b.n	801daf4 <arm_cfft_q31+0x9c>

0801db20 <arm_radix4_butterfly_q31>:
 801db20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db22:	464d      	mov	r5, r9
 801db24:	4644      	mov	r4, r8
 801db26:	465f      	mov	r7, fp
 801db28:	4656      	mov	r6, sl
 801db2a:	469c      	mov	ip, r3
 801db2c:	b4f0      	push	{r4, r5, r6, r7}
 801db2e:	b0a7      	sub	sp, #156	@ 0x9c
 801db30:	9114      	str	r1, [sp, #80]	@ 0x50
 801db32:	0889      	lsrs	r1, r1, #2
 801db34:	9310      	str	r3, [sp, #64]	@ 0x40
 801db36:	00cb      	lsls	r3, r1, #3
 801db38:	0015      	movs	r5, r2
 801db3a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801db3c:	18c2      	adds	r2, r0, r3
 801db3e:	000c      	movs	r4, r1
 801db40:	469a      	mov	sl, r3
 801db42:	9124      	str	r1, [sp, #144]	@ 0x90
 801db44:	18d1      	adds	r1, r2, r3
 801db46:	4663      	mov	r3, ip
 801db48:	468b      	mov	fp, r1
 801db4a:	0119      	lsls	r1, r3, #4
 801db4c:	910d      	str	r1, [sp, #52]	@ 0x34
 801db4e:	00d9      	lsls	r1, r3, #3
 801db50:	005b      	lsls	r3, r3, #1
 801db52:	4463      	add	r3, ip
 801db54:	910e      	str	r1, [sp, #56]	@ 0x38
 801db56:	00d9      	lsls	r1, r3, #3
 801db58:	465b      	mov	r3, fp
 801db5a:	44da      	add	sl, fp
 801db5c:	4690      	mov	r8, r2
 801db5e:	4683      	mov	fp, r0
 801db60:	4699      	mov	r9, r3
 801db62:	9022      	str	r0, [sp, #136]	@ 0x88
 801db64:	9025      	str	r0, [sp, #148]	@ 0x94
 801db66:	910f      	str	r1, [sp, #60]	@ 0x3c
 801db68:	9502      	str	r5, [sp, #8]
 801db6a:	9500      	str	r5, [sp, #0]
 801db6c:	9501      	str	r5, [sp, #4]
 801db6e:	9407      	str	r4, [sp, #28]
 801db70:	465b      	mov	r3, fp
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	4642      	mov	r2, r8
 801db76:	111c      	asrs	r4, r3, #4
 801db78:	464b      	mov	r3, r9
 801db7a:	4658      	mov	r0, fp
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	6812      	ldr	r2, [r2, #0]
 801db80:	111b      	asrs	r3, r3, #4
 801db82:	18e7      	adds	r7, r4, r3
 801db84:	1ae3      	subs	r3, r4, r3
 801db86:	1114      	asrs	r4, r2, #4
 801db88:	4652      	mov	r2, sl
 801db8a:	6840      	ldr	r0, [r0, #4]
 801db8c:	6812      	ldr	r2, [r2, #0]
 801db8e:	1105      	asrs	r5, r0, #4
 801db90:	4648      	mov	r0, r9
 801db92:	9303      	str	r3, [sp, #12]
 801db94:	1113      	asrs	r3, r2, #4
 801db96:	18e2      	adds	r2, r4, r3
 801db98:	465c      	mov	r4, fp
 801db9a:	6840      	ldr	r0, [r0, #4]
 801db9c:	1103      	asrs	r3, r0, #4
 801db9e:	18ee      	adds	r6, r5, r3
 801dba0:	1ae8      	subs	r0, r5, r3
 801dba2:	18bb      	adds	r3, r7, r2
 801dba4:	6023      	str	r3, [r4, #0]
 801dba6:	4644      	mov	r4, r8
 801dba8:	6864      	ldr	r4, [r4, #4]
 801dbaa:	9004      	str	r0, [sp, #16]
 801dbac:	1125      	asrs	r5, r4, #4
 801dbae:	4654      	mov	r4, sl
 801dbb0:	6864      	ldr	r4, [r4, #4]
 801dbb2:	1123      	asrs	r3, r4, #4
 801dbb4:	465c      	mov	r4, fp
 801dbb6:	18eb      	adds	r3, r5, r3
 801dbb8:	18f1      	adds	r1, r6, r3
 801dbba:	6061      	str	r1, [r4, #4]
 801dbbc:	4655      	mov	r5, sl
 801dbbe:	4644      	mov	r4, r8
 801dbc0:	686d      	ldr	r5, [r5, #4]
 801dbc2:	6864      	ldr	r4, [r4, #4]
 801dbc4:	1129      	asrs	r1, r5, #4
 801dbc6:	1124      	asrs	r4, r4, #4
 801dbc8:	1a64      	subs	r4, r4, r1
 801dbca:	4641      	mov	r1, r8
 801dbcc:	6809      	ldr	r1, [r1, #0]
 801dbce:	9405      	str	r4, [sp, #20]
 801dbd0:	1108      	asrs	r0, r1, #4
 801dbd2:	4651      	mov	r1, sl
 801dbd4:	6809      	ldr	r1, [r1, #0]
 801dbd6:	1abc      	subs	r4, r7, r2
 801dbd8:	1109      	asrs	r1, r1, #4
 801dbda:	1a41      	subs	r1, r0, r1
 801dbdc:	17e2      	asrs	r2, r4, #31
 801dbde:	9106      	str	r1, [sp, #24]
 801dbe0:	0011      	movs	r1, r2
 801dbe2:	9a01      	ldr	r2, [sp, #4]
 801dbe4:	9108      	str	r1, [sp, #32]
 801dbe6:	6817      	ldr	r7, [r2, #0]
 801dbe8:	17fd      	asrs	r5, r7, #31
 801dbea:	0028      	movs	r0, r5
 801dbec:	1af5      	subs	r5, r6, r3
 801dbee:	17ee      	asrs	r6, r5, #31
 801dbf0:	960a      	str	r6, [sp, #40]	@ 0x28
 801dbf2:	6856      	ldr	r6, [r2, #4]
 801dbf4:	9009      	str	r0, [sp, #36]	@ 0x24
 801dbf6:	17f3      	asrs	r3, r6, #31
 801dbf8:	003a      	movs	r2, r7
 801dbfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dbfc:	0003      	movs	r3, r0
 801dbfe:	0020      	movs	r0, r4
 801dc00:	f7e2 fcde 	bl	80005c0 <__aeabi_lmul>
 801dc04:	0032      	movs	r2, r6
 801dc06:	17f3      	asrs	r3, r6, #31
 801dc08:	910c      	str	r1, [sp, #48]	@ 0x30
 801dc0a:	0028      	movs	r0, r5
 801dc0c:	17e9      	asrs	r1, r5, #31
 801dc0e:	f7e2 fcd7 	bl	80005c0 <__aeabi_lmul>
 801dc12:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc14:	002a      	movs	r2, r5
 801dc16:	4684      	mov	ip, r0
 801dc18:	4640      	mov	r0, r8
 801dc1a:	4461      	add	r1, ip
 801dc1c:	0049      	lsls	r1, r1, #1
 801dc1e:	6001      	str	r1, [r0, #0]
 801dc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc24:	0038      	movs	r0, r7
 801dc26:	f7e2 fccb 	bl	80005c0 <__aeabi_lmul>
 801dc2a:	0032      	movs	r2, r6
 801dc2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc2e:	000d      	movs	r5, r1
 801dc30:	0020      	movs	r0, r4
 801dc32:	9908      	ldr	r1, [sp, #32]
 801dc34:	f7e2 fcc4 	bl	80005c0 <__aeabi_lmul>
 801dc38:	4646      	mov	r6, r8
 801dc3a:	1a6d      	subs	r5, r5, r1
 801dc3c:	006d      	lsls	r5, r5, #1
 801dc3e:	6075      	str	r5, [r6, #4]
 801dc40:	9903      	ldr	r1, [sp, #12]
 801dc42:	9d05      	ldr	r5, [sp, #20]
 801dc44:	000c      	movs	r4, r1
 801dc46:	46ac      	mov	ip, r5
 801dc48:	4464      	add	r4, ip
 801dc4a:	17e6      	asrs	r6, r4, #31
 801dc4c:	0031      	movs	r1, r6
 801dc4e:	9b00      	ldr	r3, [sp, #0]
 801dc50:	9804      	ldr	r0, [sp, #16]
 801dc52:	681e      	ldr	r6, [r3, #0]
 801dc54:	17f7      	asrs	r7, r6, #31
 801dc56:	9709      	str	r7, [sp, #36]	@ 0x24
 801dc58:	9f06      	ldr	r7, [sp, #24]
 801dc5a:	0032      	movs	r2, r6
 801dc5c:	1bc7      	subs	r7, r0, r7
 801dc5e:	17fd      	asrs	r5, r7, #31
 801dc60:	950a      	str	r5, [sp, #40]	@ 0x28
 801dc62:	685d      	ldr	r5, [r3, #4]
 801dc64:	17f3      	asrs	r3, r6, #31
 801dc66:	17e8      	asrs	r0, r5, #31
 801dc68:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dc6a:	0020      	movs	r0, r4
 801dc6c:	9108      	str	r1, [sp, #32]
 801dc6e:	f7e2 fca7 	bl	80005c0 <__aeabi_lmul>
 801dc72:	002a      	movs	r2, r5
 801dc74:	17eb      	asrs	r3, r5, #31
 801dc76:	910c      	str	r1, [sp, #48]	@ 0x30
 801dc78:	0038      	movs	r0, r7
 801dc7a:	17f9      	asrs	r1, r7, #31
 801dc7c:	f7e2 fca0 	bl	80005c0 <__aeabi_lmul>
 801dc80:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc82:	003a      	movs	r2, r7
 801dc84:	4684      	mov	ip, r0
 801dc86:	4648      	mov	r0, r9
 801dc88:	4461      	add	r1, ip
 801dc8a:	0049      	lsls	r1, r1, #1
 801dc8c:	6001      	str	r1, [r0, #0]
 801dc8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dc90:	0030      	movs	r0, r6
 801dc92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dc94:	f7e2 fc94 	bl	80005c0 <__aeabi_lmul>
 801dc98:	002a      	movs	r2, r5
 801dc9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc9c:	000e      	movs	r6, r1
 801dc9e:	0020      	movs	r0, r4
 801dca0:	9908      	ldr	r1, [sp, #32]
 801dca2:	f7e2 fc8d 	bl	80005c0 <__aeabi_lmul>
 801dca6:	464c      	mov	r4, r9
 801dca8:	9d05      	ldr	r5, [sp, #20]
 801dcaa:	1a76      	subs	r6, r6, r1
 801dcac:	9903      	ldr	r1, [sp, #12]
 801dcae:	0076      	lsls	r6, r6, #1
 801dcb0:	6066      	str	r6, [r4, #4]
 801dcb2:	1b4c      	subs	r4, r1, r5
 801dcb4:	9e06      	ldr	r6, [sp, #24]
 801dcb6:	17e1      	asrs	r1, r4, #31
 801dcb8:	9103      	str	r1, [sp, #12]
 801dcba:	9902      	ldr	r1, [sp, #8]
 801dcbc:	46b4      	mov	ip, r6
 801dcbe:	680f      	ldr	r7, [r1, #0]
 801dcc0:	9804      	ldr	r0, [sp, #16]
 801dcc2:	17fd      	asrs	r5, r7, #31
 801dcc4:	002b      	movs	r3, r5
 801dcc6:	684e      	ldr	r6, [r1, #4]
 801dcc8:	4460      	add	r0, ip
 801dcca:	0005      	movs	r5, r0
 801dccc:	17c0      	asrs	r0, r0, #31
 801dcce:	9005      	str	r0, [sp, #20]
 801dcd0:	17f0      	asrs	r0, r6, #31
 801dcd2:	9006      	str	r0, [sp, #24]
 801dcd4:	003a      	movs	r2, r7
 801dcd6:	0020      	movs	r0, r4
 801dcd8:	17e1      	asrs	r1, r4, #31
 801dcda:	9304      	str	r3, [sp, #16]
 801dcdc:	f7e2 fc70 	bl	80005c0 <__aeabi_lmul>
 801dce0:	0032      	movs	r2, r6
 801dce2:	9108      	str	r1, [sp, #32]
 801dce4:	17f3      	asrs	r3, r6, #31
 801dce6:	0028      	movs	r0, r5
 801dce8:	17e9      	asrs	r1, r5, #31
 801dcea:	f7e2 fc69 	bl	80005c0 <__aeabi_lmul>
 801dcee:	9808      	ldr	r0, [sp, #32]
 801dcf0:	002a      	movs	r2, r5
 801dcf2:	4684      	mov	ip, r0
 801dcf4:	4650      	mov	r0, sl
 801dcf6:	4461      	add	r1, ip
 801dcf8:	0049      	lsls	r1, r1, #1
 801dcfa:	6001      	str	r1, [r0, #0]
 801dcfc:	9b05      	ldr	r3, [sp, #20]
 801dcfe:	9904      	ldr	r1, [sp, #16]
 801dd00:	0038      	movs	r0, r7
 801dd02:	f7e2 fc5d 	bl	80005c0 <__aeabi_lmul>
 801dd06:	0020      	movs	r0, r4
 801dd08:	2408      	movs	r4, #8
 801dd0a:	000d      	movs	r5, r1
 801dd0c:	0032      	movs	r2, r6
 801dd0e:	9b06      	ldr	r3, [sp, #24]
 801dd10:	9903      	ldr	r1, [sp, #12]
 801dd12:	f7e2 fc55 	bl	80005c0 <__aeabi_lmul>
 801dd16:	46a4      	mov	ip, r4
 801dd18:	4650      	mov	r0, sl
 801dd1a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dd1c:	44e3      	add	fp, ip
 801dd1e:	44e0      	add	r8, ip
 801dd20:	44e1      	add	r9, ip
 801dd22:	44e2      	add	sl, ip
 801dd24:	46a4      	mov	ip, r4
 801dd26:	1a6d      	subs	r5, r5, r1
 801dd28:	006d      	lsls	r5, r5, #1
 801dd2a:	9a01      	ldr	r2, [sp, #4]
 801dd2c:	6045      	str	r5, [r0, #4]
 801dd2e:	9807      	ldr	r0, [sp, #28]
 801dd30:	4462      	add	r2, ip
 801dd32:	3801      	subs	r0, #1
 801dd34:	9201      	str	r2, [sp, #4]
 801dd36:	9007      	str	r0, [sp, #28]
 801dd38:	9b00      	ldr	r3, [sp, #0]
 801dd3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd3c:	9902      	ldr	r1, [sp, #8]
 801dd3e:	4694      	mov	ip, r2
 801dd40:	4463      	add	r3, ip
 801dd42:	9300      	str	r3, [sp, #0]
 801dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd46:	469c      	mov	ip, r3
 801dd48:	4461      	add	r1, ip
 801dd4a:	9102      	str	r1, [sp, #8]
 801dd4c:	2800      	cmp	r0, #0
 801dd4e:	d000      	beq.n	801dd52 <arm_radix4_butterfly_q31+0x232>
 801dd50:	e70e      	b.n	801db70 <arm_radix4_butterfly_q31+0x50>
 801dd52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dd54:	009b      	lsls	r3, r3, #2
 801dd56:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dd58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd5a:	9320      	str	r3, [sp, #128]	@ 0x80
 801dd5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dd5e:	2b04      	cmp	r3, #4
 801dd60:	d800      	bhi.n	801dd64 <arm_radix4_butterfly_q31+0x244>
 801dd62:	e180      	b.n	801e066 <arm_radix4_butterfly_q31+0x546>
 801dd64:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd66:	0893      	lsrs	r3, r2, #2
 801dd68:	1e59      	subs	r1, r3, #1
 801dd6a:	9321      	str	r3, [sp, #132]	@ 0x84
 801dd6c:	00db      	lsls	r3, r3, #3
 801dd6e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dd70:	00d3      	lsls	r3, r2, #3
 801dd72:	9300      	str	r3, [sp, #0]
 801dd74:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dd76:	911a      	str	r1, [sp, #104]	@ 0x68
 801dd78:	00da      	lsls	r2, r3, #3
 801dd7a:	921e      	str	r2, [sp, #120]	@ 0x78
 801dd7c:	011a      	lsls	r2, r3, #4
 801dd7e:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd80:	001a      	movs	r2, r3
 801dd82:	4694      	mov	ip, r2
 801dd84:	005b      	lsls	r3, r3, #1
 801dd86:	4463      	add	r3, ip
 801dd88:	00db      	lsls	r3, r3, #3
 801dd8a:	931c      	str	r3, [sp, #112]	@ 0x70
 801dd8c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dd8e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dd90:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dd92:	9318      	str	r3, [sp, #96]	@ 0x60
 801dd94:	9319      	str	r3, [sp, #100]	@ 0x64
 801dd96:	9316      	str	r3, [sp, #88]	@ 0x58
 801dd98:	2300      	movs	r3, #0
 801dd9a:	9315      	str	r3, [sp, #84]	@ 0x54
 801dd9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd9e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dda0:	681a      	ldr	r2, [r3, #0]
 801dda2:	685b      	ldr	r3, [r3, #4]
 801dda4:	9205      	str	r2, [sp, #20]
 801dda6:	9306      	str	r3, [sp, #24]
 801dda8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ddaa:	468c      	mov	ip, r1
 801ddac:	681a      	ldr	r2, [r3, #0]
 801ddae:	685b      	ldr	r3, [r3, #4]
 801ddb0:	9207      	str	r2, [sp, #28]
 801ddb2:	9308      	str	r3, [sp, #32]
 801ddb4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ddb6:	681a      	ldr	r2, [r3, #0]
 801ddb8:	685b      	ldr	r3, [r3, #4]
 801ddba:	9209      	str	r2, [sp, #36]	@ 0x24
 801ddbc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ddbe:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddc0:	0013      	movs	r3, r2
 801ddc2:	4463      	add	r3, ip
 801ddc4:	4698      	mov	r8, r3
 801ddc6:	0013      	movs	r3, r2
 801ddc8:	4442      	add	r2, r8
 801ddca:	4691      	mov	r9, r2
 801ddcc:	001a      	movs	r2, r3
 801ddce:	444a      	add	r2, r9
 801ddd0:	4692      	mov	sl, r2
 801ddd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ddd4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ddd6:	4293      	cmp	r3, r2
 801ddd8:	d800      	bhi.n	801dddc <arm_radix4_butterfly_q31+0x2bc>
 801ddda:	e0dd      	b.n	801df98 <arm_radix4_butterfly_q31+0x478>
 801dddc:	4694      	mov	ip, r2
 801ddde:	468b      	mov	fp, r1
 801dde0:	4644      	mov	r4, r8
 801dde2:	4655      	mov	r5, sl
 801dde4:	9b07      	ldr	r3, [sp, #28]
 801dde6:	17db      	asrs	r3, r3, #31
 801dde8:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddea:	9b08      	ldr	r3, [sp, #32]
 801ddec:	17db      	asrs	r3, r3, #31
 801ddee:	930d      	str	r3, [sp, #52]	@ 0x34
 801ddf0:	9b05      	ldr	r3, [sp, #20]
 801ddf2:	17db      	asrs	r3, r3, #31
 801ddf4:	930e      	str	r3, [sp, #56]	@ 0x38
 801ddf6:	9b06      	ldr	r3, [sp, #24]
 801ddf8:	17db      	asrs	r3, r3, #31
 801ddfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ddfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddfe:	17db      	asrs	r3, r3, #31
 801de00:	9310      	str	r3, [sp, #64]	@ 0x40
 801de02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de04:	17db      	asrs	r3, r3, #31
 801de06:	9311      	str	r3, [sp, #68]	@ 0x44
 801de08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de0a:	4463      	add	r3, ip
 801de0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de0e:	465b      	mov	r3, fp
 801de10:	4659      	mov	r1, fp
 801de12:	681a      	ldr	r2, [r3, #0]
 801de14:	464b      	mov	r3, r9
 801de16:	684f      	ldr	r7, [r1, #4]
 801de18:	4649      	mov	r1, r9
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	18d6      	adds	r6, r2, r3
 801de1e:	1ad3      	subs	r3, r2, r3
 801de20:	9301      	str	r3, [sp, #4]
 801de22:	684b      	ldr	r3, [r1, #4]
 801de24:	18f8      	adds	r0, r7, r3
 801de26:	1af9      	subs	r1, r7, r3
 801de28:	6827      	ldr	r7, [r4, #0]
 801de2a:	9102      	str	r1, [sp, #8]
 801de2c:	003a      	movs	r2, r7
 801de2e:	682f      	ldr	r7, [r5, #0]
 801de30:	46bc      	mov	ip, r7
 801de32:	465f      	mov	r7, fp
 801de34:	4462      	add	r2, ip
 801de36:	18b3      	adds	r3, r6, r2
 801de38:	109b      	asrs	r3, r3, #2
 801de3a:	603b      	str	r3, [r7, #0]
 801de3c:	6867      	ldr	r7, [r4, #4]
 801de3e:	1ab6      	subs	r6, r6, r2
 801de40:	46b8      	mov	r8, r7
 801de42:	686f      	ldr	r7, [r5, #4]
 801de44:	17f2      	asrs	r2, r6, #31
 801de46:	46bc      	mov	ip, r7
 801de48:	44e0      	add	r8, ip
 801de4a:	4643      	mov	r3, r8
 801de4c:	465f      	mov	r7, fp
 801de4e:	18c1      	adds	r1, r0, r3
 801de50:	1089      	asrs	r1, r1, #2
 801de52:	6079      	str	r1, [r7, #4]
 801de54:	9900      	ldr	r1, [sp, #0]
 801de56:	4690      	mov	r8, r2
 801de58:	468c      	mov	ip, r1
 801de5a:	6867      	ldr	r7, [r4, #4]
 801de5c:	6869      	ldr	r1, [r5, #4]
 801de5e:	44e3      	add	fp, ip
 801de60:	1a7f      	subs	r7, r7, r1
 801de62:	9703      	str	r7, [sp, #12]
 801de64:	6829      	ldr	r1, [r5, #0]
 801de66:	6827      	ldr	r7, [r4, #0]
 801de68:	1a7f      	subs	r7, r7, r1
 801de6a:	9704      	str	r7, [sp, #16]
 801de6c:	1ac7      	subs	r7, r0, r3
 801de6e:	17fa      	asrs	r2, r7, #31
 801de70:	4692      	mov	sl, r2
 801de72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de74:	9a07      	ldr	r2, [sp, #28]
 801de76:	0030      	movs	r0, r6
 801de78:	4641      	mov	r1, r8
 801de7a:	f7e2 fba1 	bl	80005c0 <__aeabi_lmul>
 801de7e:	9a08      	ldr	r2, [sp, #32]
 801de80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de82:	9112      	str	r1, [sp, #72]	@ 0x48
 801de84:	0038      	movs	r0, r7
 801de86:	4651      	mov	r1, sl
 801de88:	f7e2 fb9a 	bl	80005c0 <__aeabi_lmul>
 801de8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de8e:	9a07      	ldr	r2, [sp, #28]
 801de90:	4684      	mov	ip, r0
 801de92:	4461      	add	r1, ip
 801de94:	1049      	asrs	r1, r1, #1
 801de96:	6021      	str	r1, [r4, #0]
 801de98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de9a:	0038      	movs	r0, r7
 801de9c:	4651      	mov	r1, sl
 801de9e:	f7e2 fb8f 	bl	80005c0 <__aeabi_lmul>
 801dea2:	9a08      	ldr	r2, [sp, #32]
 801dea4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dea6:	000f      	movs	r7, r1
 801dea8:	0030      	movs	r0, r6
 801deaa:	4641      	mov	r1, r8
 801deac:	f7e2 fb88 	bl	80005c0 <__aeabi_lmul>
 801deb0:	9b00      	ldr	r3, [sp, #0]
 801deb2:	9a01      	ldr	r2, [sp, #4]
 801deb4:	469c      	mov	ip, r3
 801deb6:	9803      	ldr	r0, [sp, #12]
 801deb8:	1a7f      	subs	r7, r7, r1
 801deba:	107f      	asrs	r7, r7, #1
 801debc:	6067      	str	r7, [r4, #4]
 801debe:	0016      	movs	r6, r2
 801dec0:	4464      	add	r4, ip
 801dec2:	4684      	mov	ip, r0
 801dec4:	4466      	add	r6, ip
 801dec6:	17f2      	asrs	r2, r6, #31
 801dec8:	4690      	mov	r8, r2
 801deca:	9902      	ldr	r1, [sp, #8]
 801decc:	9f04      	ldr	r7, [sp, #16]
 801dece:	0030      	movs	r0, r6
 801ded0:	1bcf      	subs	r7, r1, r7
 801ded2:	17fa      	asrs	r2, r7, #31
 801ded4:	4692      	mov	sl, r2
 801ded6:	4641      	mov	r1, r8
 801ded8:	9a05      	ldr	r2, [sp, #20]
 801deda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dedc:	f7e2 fb70 	bl	80005c0 <__aeabi_lmul>
 801dee0:	9a06      	ldr	r2, [sp, #24]
 801dee2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dee4:	9112      	str	r1, [sp, #72]	@ 0x48
 801dee6:	0038      	movs	r0, r7
 801dee8:	4651      	mov	r1, sl
 801deea:	f7e2 fb69 	bl	80005c0 <__aeabi_lmul>
 801deee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801def0:	9a05      	ldr	r2, [sp, #20]
 801def2:	4684      	mov	ip, r0
 801def4:	4648      	mov	r0, r9
 801def6:	4461      	add	r1, ip
 801def8:	1049      	asrs	r1, r1, #1
 801defa:	6001      	str	r1, [r0, #0]
 801defc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801defe:	0038      	movs	r0, r7
 801df00:	4651      	mov	r1, sl
 801df02:	f7e2 fb5d 	bl	80005c0 <__aeabi_lmul>
 801df06:	9a06      	ldr	r2, [sp, #24]
 801df08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801df0a:	000f      	movs	r7, r1
 801df0c:	0030      	movs	r0, r6
 801df0e:	4641      	mov	r1, r8
 801df10:	f7e2 fb56 	bl	80005c0 <__aeabi_lmul>
 801df14:	464e      	mov	r6, r9
 801df16:	9a00      	ldr	r2, [sp, #0]
 801df18:	9b01      	ldr	r3, [sp, #4]
 801df1a:	4694      	mov	ip, r2
 801df1c:	9803      	ldr	r0, [sp, #12]
 801df1e:	1a7f      	subs	r7, r7, r1
 801df20:	107f      	asrs	r7, r7, #1
 801df22:	6077      	str	r7, [r6, #4]
 801df24:	1a1e      	subs	r6, r3, r0
 801df26:	9b04      	ldr	r3, [sp, #16]
 801df28:	44e1      	add	r9, ip
 801df2a:	469c      	mov	ip, r3
 801df2c:	17f0      	asrs	r0, r6, #31
 801df2e:	4680      	mov	r8, r0
 801df30:	9902      	ldr	r1, [sp, #8]
 801df32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df34:	4461      	add	r1, ip
 801df36:	17cb      	asrs	r3, r1, #31
 801df38:	000f      	movs	r7, r1
 801df3a:	469a      	mov	sl, r3
 801df3c:	0030      	movs	r0, r6
 801df3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df40:	4641      	mov	r1, r8
 801df42:	f7e2 fb3d 	bl	80005c0 <__aeabi_lmul>
 801df46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df4a:	9101      	str	r1, [sp, #4]
 801df4c:	0038      	movs	r0, r7
 801df4e:	4651      	mov	r1, sl
 801df50:	f7e2 fb36 	bl	80005c0 <__aeabi_lmul>
 801df54:	9801      	ldr	r0, [sp, #4]
 801df56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df58:	4684      	mov	ip, r0
 801df5a:	4461      	add	r1, ip
 801df5c:	1049      	asrs	r1, r1, #1
 801df5e:	6029      	str	r1, [r5, #0]
 801df60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801df62:	0038      	movs	r0, r7
 801df64:	4651      	mov	r1, sl
 801df66:	f7e2 fb2b 	bl	80005c0 <__aeabi_lmul>
 801df6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df6c:	000f      	movs	r7, r1
 801df6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801df70:	0030      	movs	r0, r6
 801df72:	4641      	mov	r1, r8
 801df74:	f7e2 fb24 	bl	80005c0 <__aeabi_lmul>
 801df78:	1a7f      	subs	r7, r7, r1
 801df7a:	107f      	asrs	r7, r7, #1
 801df7c:	606f      	str	r7, [r5, #4]
 801df7e:	9a00      	ldr	r2, [sp, #0]
 801df80:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801df82:	4694      	mov	ip, r2
 801df84:	4465      	add	r5, ip
 801df86:	468c      	mov	ip, r1
 801df88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801df8a:	0013      	movs	r3, r2
 801df8c:	4462      	add	r2, ip
 801df8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801df90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801df92:	429a      	cmp	r2, r3
 801df94:	d900      	bls.n	801df98 <arm_radix4_butterfly_q31+0x478>
 801df96:	e73a      	b.n	801de0e <arm_radix4_butterfly_q31+0x2ee>
 801df98:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801df9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801df9c:	468c      	mov	ip, r1
 801df9e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801dfa0:	4462      	add	r2, ip
 801dfa2:	468c      	mov	ip, r1
 801dfa4:	9216      	str	r2, [sp, #88]	@ 0x58
 801dfa6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801dfa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801dfaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dfac:	4462      	add	r2, ip
 801dfae:	468c      	mov	ip, r1
 801dfb0:	9219      	str	r2, [sp, #100]	@ 0x64
 801dfb2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801dfb4:	3301      	adds	r3, #1
 801dfb6:	4462      	add	r2, ip
 801dfb8:	9218      	str	r2, [sp, #96]	@ 0x60
 801dfba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801dfbc:	9315      	str	r3, [sp, #84]	@ 0x54
 801dfbe:	3208      	adds	r2, #8
 801dfc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801dfc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dfc4:	4293      	cmp	r3, r2
 801dfc6:	d800      	bhi.n	801dfca <arm_radix4_butterfly_q31+0x4aa>
 801dfc8:	e6e8      	b.n	801dd9c <arm_radix4_butterfly_q31+0x27c>
 801dfca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dfcc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801dfce:	009b      	lsls	r3, r3, #2
 801dfd0:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dfd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dfd4:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dfd6:	089b      	lsrs	r3, r3, #2
 801dfd8:	9320      	str	r3, [sp, #128]	@ 0x80
 801dfda:	2b04      	cmp	r3, #4
 801dfdc:	d900      	bls.n	801dfe0 <arm_radix4_butterfly_q31+0x4c0>
 801dfde:	e6c1      	b.n	801dd64 <arm_radix4_butterfly_q31+0x244>
 801dfe0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfe2:	469a      	mov	sl, r3
 801dfe4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dfe6:	691c      	ldr	r4, [r3, #16]
 801dfe8:	685a      	ldr	r2, [r3, #4]
 801dfea:	46a1      	mov	r9, r4
 801dfec:	4690      	mov	r8, r2
 801dfee:	6819      	ldr	r1, [r3, #0]
 801dff0:	689a      	ldr	r2, [r3, #8]
 801dff2:	699f      	ldr	r7, [r3, #24]
 801dff4:	188d      	adds	r5, r1, r2
 801dff6:	444d      	add	r5, r9
 801dff8:	19ed      	adds	r5, r5, r7
 801dffa:	69de      	ldr	r6, [r3, #28]
 801dffc:	601d      	str	r5, [r3, #0]
 801dffe:	4645      	mov	r5, r8
 801e000:	46b4      	mov	ip, r6
 801e002:	68d8      	ldr	r0, [r3, #12]
 801e004:	695c      	ldr	r4, [r3, #20]
 801e006:	182d      	adds	r5, r5, r0
 801e008:	192d      	adds	r5, r5, r4
 801e00a:	4465      	add	r5, ip
 801e00c:	605d      	str	r5, [r3, #4]
 801e00e:	1a8d      	subs	r5, r1, r2
 801e010:	444d      	add	r5, r9
 801e012:	1bed      	subs	r5, r5, r7
 801e014:	609d      	str	r5, [r3, #8]
 801e016:	4645      	mov	r5, r8
 801e018:	1a2d      	subs	r5, r5, r0
 801e01a:	192d      	adds	r5, r5, r4
 801e01c:	1bad      	subs	r5, r5, r6
 801e01e:	464e      	mov	r6, r9
 801e020:	60dd      	str	r5, [r3, #12]
 801e022:	180d      	adds	r5, r1, r0
 801e024:	1bad      	subs	r5, r5, r6
 801e026:	4666      	mov	r6, ip
 801e028:	1bad      	subs	r5, r5, r6
 801e02a:	611d      	str	r5, [r3, #16]
 801e02c:	4645      	mov	r5, r8
 801e02e:	1aad      	subs	r5, r5, r2
 801e030:	4442      	add	r2, r8
 801e032:	1b12      	subs	r2, r2, r4
 801e034:	1bd2      	subs	r2, r2, r7
 801e036:	1a08      	subs	r0, r1, r0
 801e038:	61da      	str	r2, [r3, #28]
 801e03a:	4649      	mov	r1, r9
 801e03c:	2201      	movs	r2, #1
 801e03e:	1a41      	subs	r1, r0, r1
 801e040:	4252      	negs	r2, r2
 801e042:	4461      	add	r1, ip
 801e044:	4694      	mov	ip, r2
 801e046:	44e2      	add	sl, ip
 801e048:	4652      	mov	r2, sl
 801e04a:	1b2d      	subs	r5, r5, r4
 801e04c:	19ed      	adds	r5, r5, r7
 801e04e:	615d      	str	r5, [r3, #20]
 801e050:	6199      	str	r1, [r3, #24]
 801e052:	3320      	adds	r3, #32
 801e054:	2a00      	cmp	r2, #0
 801e056:	d1c6      	bne.n	801dfe6 <arm_radix4_butterfly_q31+0x4c6>
 801e058:	b027      	add	sp, #156	@ 0x9c
 801e05a:	bc3c      	pop	{r2, r3, r4, r5}
 801e05c:	4690      	mov	r8, r2
 801e05e:	4699      	mov	r9, r3
 801e060:	46a2      	mov	sl, r4
 801e062:	46ab      	mov	fp, r5
 801e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e066:	469a      	mov	sl, r3
 801e068:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e06a:	e7bc      	b.n	801dfe6 <arm_radix4_butterfly_q31+0x4c6>

0801e06c <arm_radix4_butterfly_inverse_q31>:
 801e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e06e:	464d      	mov	r5, r9
 801e070:	4644      	mov	r4, r8
 801e072:	465f      	mov	r7, fp
 801e074:	4656      	mov	r6, sl
 801e076:	b4f0      	push	{r4, r5, r6, r7}
 801e078:	b0a7      	sub	sp, #156	@ 0x9c
 801e07a:	469c      	mov	ip, r3
 801e07c:	9114      	str	r1, [sp, #80]	@ 0x50
 801e07e:	0889      	lsrs	r1, r1, #2
 801e080:	9310      	str	r3, [sp, #64]	@ 0x40
 801e082:	00cb      	lsls	r3, r1, #3
 801e084:	0015      	movs	r5, r2
 801e086:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e088:	18c2      	adds	r2, r0, r3
 801e08a:	000c      	movs	r4, r1
 801e08c:	9124      	str	r1, [sp, #144]	@ 0x90
 801e08e:	18d1      	adds	r1, r2, r3
 801e090:	468b      	mov	fp, r1
 801e092:	469a      	mov	sl, r3
 801e094:	4663      	mov	r3, ip
 801e096:	44da      	add	sl, fp
 801e098:	46d0      	mov	r8, sl
 801e09a:	4681      	mov	r9, r0
 801e09c:	4692      	mov	sl, r2
 801e09e:	0119      	lsls	r1, r3, #4
 801e0a0:	910d      	str	r1, [sp, #52]	@ 0x34
 801e0a2:	00d9      	lsls	r1, r3, #3
 801e0a4:	005b      	lsls	r3, r3, #1
 801e0a6:	4463      	add	r3, ip
 801e0a8:	910e      	str	r1, [sp, #56]	@ 0x38
 801e0aa:	00d9      	lsls	r1, r3, #3
 801e0ac:	9022      	str	r0, [sp, #136]	@ 0x88
 801e0ae:	9025      	str	r0, [sp, #148]	@ 0x94
 801e0b0:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e0b2:	9502      	str	r5, [sp, #8]
 801e0b4:	9500      	str	r5, [sp, #0]
 801e0b6:	9501      	str	r5, [sp, #4]
 801e0b8:	9409      	str	r4, [sp, #36]	@ 0x24
 801e0ba:	464b      	mov	r3, r9
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	4652      	mov	r2, sl
 801e0c0:	111c      	asrs	r4, r3, #4
 801e0c2:	465b      	mov	r3, fp
 801e0c4:	4648      	mov	r0, r9
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	6812      	ldr	r2, [r2, #0]
 801e0ca:	6840      	ldr	r0, [r0, #4]
 801e0cc:	111b      	asrs	r3, r3, #4
 801e0ce:	18e7      	adds	r7, r4, r3
 801e0d0:	1ae3      	subs	r3, r4, r3
 801e0d2:	1114      	asrs	r4, r2, #4
 801e0d4:	4642      	mov	r2, r8
 801e0d6:	1105      	asrs	r5, r0, #4
 801e0d8:	4658      	mov	r0, fp
 801e0da:	6812      	ldr	r2, [r2, #0]
 801e0dc:	6840      	ldr	r0, [r0, #4]
 801e0de:	9303      	str	r3, [sp, #12]
 801e0e0:	1113      	asrs	r3, r2, #4
 801e0e2:	18e2      	adds	r2, r4, r3
 801e0e4:	1103      	asrs	r3, r0, #4
 801e0e6:	18ee      	adds	r6, r5, r3
 801e0e8:	1ae8      	subs	r0, r5, r3
 801e0ea:	464d      	mov	r5, r9
 801e0ec:	18bb      	adds	r3, r7, r2
 801e0ee:	602b      	str	r3, [r5, #0]
 801e0f0:	4641      	mov	r1, r8
 801e0f2:	4655      	mov	r5, sl
 801e0f4:	6849      	ldr	r1, [r1, #4]
 801e0f6:	686d      	ldr	r5, [r5, #4]
 801e0f8:	110b      	asrs	r3, r1, #4
 801e0fa:	112d      	asrs	r5, r5, #4
 801e0fc:	18eb      	adds	r3, r5, r3
 801e0fe:	464d      	mov	r5, r9
 801e100:	18f1      	adds	r1, r6, r3
 801e102:	6069      	str	r1, [r5, #4]
 801e104:	4655      	mov	r5, sl
 801e106:	686d      	ldr	r5, [r5, #4]
 801e108:	9004      	str	r0, [sp, #16]
 801e10a:	112c      	asrs	r4, r5, #4
 801e10c:	4645      	mov	r5, r8
 801e10e:	686d      	ldr	r5, [r5, #4]
 801e110:	1129      	asrs	r1, r5, #4
 801e112:	1a65      	subs	r5, r4, r1
 801e114:	4651      	mov	r1, sl
 801e116:	6809      	ldr	r1, [r1, #0]
 801e118:	1abc      	subs	r4, r7, r2
 801e11a:	1108      	asrs	r0, r1, #4
 801e11c:	4641      	mov	r1, r8
 801e11e:	17e2      	asrs	r2, r4, #31
 801e120:	6809      	ldr	r1, [r1, #0]
 801e122:	9207      	str	r2, [sp, #28]
 801e124:	9a01      	ldr	r2, [sp, #4]
 801e126:	1109      	asrs	r1, r1, #4
 801e128:	6817      	ldr	r7, [r2, #0]
 801e12a:	1a41      	subs	r1, r0, r1
 801e12c:	9106      	str	r1, [sp, #24]
 801e12e:	0039      	movs	r1, r7
 801e130:	17ff      	asrs	r7, r7, #31
 801e132:	0038      	movs	r0, r7
 801e134:	9505      	str	r5, [sp, #20]
 801e136:	1af5      	subs	r5, r6, r3
 801e138:	17ef      	asrs	r7, r5, #31
 801e13a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e13c:	6857      	ldr	r7, [r2, #4]
 801e13e:	0003      	movs	r3, r0
 801e140:	17fe      	asrs	r6, r7, #31
 801e142:	000a      	movs	r2, r1
 801e144:	9108      	str	r1, [sp, #32]
 801e146:	900a      	str	r0, [sp, #40]	@ 0x28
 801e148:	17e1      	asrs	r1, r4, #31
 801e14a:	0020      	movs	r0, r4
 801e14c:	960c      	str	r6, [sp, #48]	@ 0x30
 801e14e:	f7e2 fa37 	bl	80005c0 <__aeabi_lmul>
 801e152:	003a      	movs	r2, r7
 801e154:	17fb      	asrs	r3, r7, #31
 801e156:	000e      	movs	r6, r1
 801e158:	0028      	movs	r0, r5
 801e15a:	17e9      	asrs	r1, r5, #31
 801e15c:	f7e2 fa30 	bl	80005c0 <__aeabi_lmul>
 801e160:	4653      	mov	r3, sl
 801e162:	1a76      	subs	r6, r6, r1
 801e164:	0076      	lsls	r6, r6, #1
 801e166:	601e      	str	r6, [r3, #0]
 801e168:	002a      	movs	r2, r5
 801e16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e16c:	9808      	ldr	r0, [sp, #32]
 801e16e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e170:	f7e2 fa26 	bl	80005c0 <__aeabi_lmul>
 801e174:	003a      	movs	r2, r7
 801e176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e178:	000d      	movs	r5, r1
 801e17a:	0020      	movs	r0, r4
 801e17c:	9907      	ldr	r1, [sp, #28]
 801e17e:	f7e2 fa1f 	bl	80005c0 <__aeabi_lmul>
 801e182:	4657      	mov	r7, sl
 801e184:	186d      	adds	r5, r5, r1
 801e186:	006d      	lsls	r5, r5, #1
 801e188:	607d      	str	r5, [r7, #4]
 801e18a:	9b03      	ldr	r3, [sp, #12]
 801e18c:	9e06      	ldr	r6, [sp, #24]
 801e18e:	9d05      	ldr	r5, [sp, #20]
 801e190:	46b4      	mov	ip, r6
 801e192:	1b5d      	subs	r5, r3, r5
 801e194:	9b00      	ldr	r3, [sp, #0]
 801e196:	17ef      	asrs	r7, r5, #31
 801e198:	0039      	movs	r1, r7
 801e19a:	681f      	ldr	r7, [r3, #0]
 801e19c:	17fc      	asrs	r4, r7, #31
 801e19e:	0020      	movs	r0, r4
 801e1a0:	9c04      	ldr	r4, [sp, #16]
 801e1a2:	4464      	add	r4, ip
 801e1a4:	17e6      	asrs	r6, r4, #31
 801e1a6:	9407      	str	r4, [sp, #28]
 801e1a8:	9608      	str	r6, [sp, #32]
 801e1aa:	685e      	ldr	r6, [r3, #4]
 801e1ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e1ae:	17f2      	asrs	r2, r6, #31
 801e1b0:	0003      	movs	r3, r0
 801e1b2:	920c      	str	r2, [sp, #48]	@ 0x30
 801e1b4:	0028      	movs	r0, r5
 801e1b6:	003a      	movs	r2, r7
 801e1b8:	910a      	str	r1, [sp, #40]	@ 0x28
 801e1ba:	f7e2 fa01 	bl	80005c0 <__aeabi_lmul>
 801e1be:	0032      	movs	r2, r6
 801e1c0:	17f3      	asrs	r3, r6, #31
 801e1c2:	9807      	ldr	r0, [sp, #28]
 801e1c4:	000c      	movs	r4, r1
 801e1c6:	9908      	ldr	r1, [sp, #32]
 801e1c8:	f7e2 f9fa 	bl	80005c0 <__aeabi_lmul>
 801e1cc:	4658      	mov	r0, fp
 801e1ce:	1a64      	subs	r4, r4, r1
 801e1d0:	0064      	lsls	r4, r4, #1
 801e1d2:	9a07      	ldr	r2, [sp, #28]
 801e1d4:	6004      	str	r4, [r0, #0]
 801e1d6:	9b08      	ldr	r3, [sp, #32]
 801e1d8:	0038      	movs	r0, r7
 801e1da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e1dc:	f7e2 f9f0 	bl	80005c0 <__aeabi_lmul>
 801e1e0:	0032      	movs	r2, r6
 801e1e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1e4:	000c      	movs	r4, r1
 801e1e6:	0028      	movs	r0, r5
 801e1e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e1ea:	f7e2 f9e9 	bl	80005c0 <__aeabi_lmul>
 801e1ee:	9d05      	ldr	r5, [sp, #20]
 801e1f0:	465f      	mov	r7, fp
 801e1f2:	46ac      	mov	ip, r5
 801e1f4:	1864      	adds	r4, r4, r1
 801e1f6:	9903      	ldr	r1, [sp, #12]
 801e1f8:	0064      	lsls	r4, r4, #1
 801e1fa:	4461      	add	r1, ip
 801e1fc:	607c      	str	r4, [r7, #4]
 801e1fe:	000c      	movs	r4, r1
 801e200:	17c9      	asrs	r1, r1, #31
 801e202:	9105      	str	r1, [sp, #20]
 801e204:	9902      	ldr	r1, [sp, #8]
 801e206:	9804      	ldr	r0, [sp, #16]
 801e208:	680d      	ldr	r5, [r1, #0]
 801e20a:	9e06      	ldr	r6, [sp, #24]
 801e20c:	002b      	movs	r3, r5
 801e20e:	17ed      	asrs	r5, r5, #31
 801e210:	684f      	ldr	r7, [r1, #4]
 801e212:	9503      	str	r5, [sp, #12]
 801e214:	1b85      	subs	r5, r0, r6
 801e216:	17e8      	asrs	r0, r5, #31
 801e218:	001a      	movs	r2, r3
 801e21a:	9006      	str	r0, [sp, #24]
 801e21c:	17fe      	asrs	r6, r7, #31
 801e21e:	9304      	str	r3, [sp, #16]
 801e220:	0020      	movs	r0, r4
 801e222:	9b03      	ldr	r3, [sp, #12]
 801e224:	17e1      	asrs	r1, r4, #31
 801e226:	9607      	str	r6, [sp, #28]
 801e228:	f7e2 f9ca 	bl	80005c0 <__aeabi_lmul>
 801e22c:	003a      	movs	r2, r7
 801e22e:	000e      	movs	r6, r1
 801e230:	17fb      	asrs	r3, r7, #31
 801e232:	0028      	movs	r0, r5
 801e234:	17e9      	asrs	r1, r5, #31
 801e236:	f7e2 f9c3 	bl	80005c0 <__aeabi_lmul>
 801e23a:	4640      	mov	r0, r8
 801e23c:	1a76      	subs	r6, r6, r1
 801e23e:	0076      	lsls	r6, r6, #1
 801e240:	002a      	movs	r2, r5
 801e242:	9b06      	ldr	r3, [sp, #24]
 801e244:	6006      	str	r6, [r0, #0]
 801e246:	9903      	ldr	r1, [sp, #12]
 801e248:	9804      	ldr	r0, [sp, #16]
 801e24a:	f7e2 f9b9 	bl	80005c0 <__aeabi_lmul>
 801e24e:	0020      	movs	r0, r4
 801e250:	2408      	movs	r4, #8
 801e252:	9b07      	ldr	r3, [sp, #28]
 801e254:	000d      	movs	r5, r1
 801e256:	003a      	movs	r2, r7
 801e258:	9905      	ldr	r1, [sp, #20]
 801e25a:	f7e2 f9b1 	bl	80005c0 <__aeabi_lmul>
 801e25e:	4640      	mov	r0, r8
 801e260:	46a4      	mov	ip, r4
 801e262:	186d      	adds	r5, r5, r1
 801e264:	006d      	lsls	r5, r5, #1
 801e266:	6045      	str	r5, [r0, #4]
 801e268:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e26a:	44e1      	add	r9, ip
 801e26c:	3801      	subs	r0, #1
 801e26e:	9009      	str	r0, [sp, #36]	@ 0x24
 801e270:	9a01      	ldr	r2, [sp, #4]
 801e272:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e274:	44e2      	add	sl, ip
 801e276:	44e3      	add	fp, ip
 801e278:	44e0      	add	r8, ip
 801e27a:	46a4      	mov	ip, r4
 801e27c:	4462      	add	r2, ip
 801e27e:	9201      	str	r2, [sp, #4]
 801e280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e282:	9b00      	ldr	r3, [sp, #0]
 801e284:	4694      	mov	ip, r2
 801e286:	4463      	add	r3, ip
 801e288:	9300      	str	r3, [sp, #0]
 801e28a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e28c:	9902      	ldr	r1, [sp, #8]
 801e28e:	469c      	mov	ip, r3
 801e290:	4461      	add	r1, ip
 801e292:	9102      	str	r1, [sp, #8]
 801e294:	2800      	cmp	r0, #0
 801e296:	d000      	beq.n	801e29a <arm_radix4_butterfly_inverse_q31+0x22e>
 801e298:	e70f      	b.n	801e0ba <arm_radix4_butterfly_inverse_q31+0x4e>
 801e29a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e29c:	009b      	lsls	r3, r3, #2
 801e29e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e2a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e2a2:	9320      	str	r3, [sp, #128]	@ 0x80
 801e2a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e2a6:	2b04      	cmp	r3, #4
 801e2a8:	d800      	bhi.n	801e2ac <arm_radix4_butterfly_inverse_q31+0x240>
 801e2aa:	e17c      	b.n	801e5a6 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e2ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e2ae:	0893      	lsrs	r3, r2, #2
 801e2b0:	1e59      	subs	r1, r3, #1
 801e2b2:	9321      	str	r3, [sp, #132]	@ 0x84
 801e2b4:	00db      	lsls	r3, r3, #3
 801e2b6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e2b8:	00d3      	lsls	r3, r2, #3
 801e2ba:	9300      	str	r3, [sp, #0]
 801e2bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e2be:	911a      	str	r1, [sp, #104]	@ 0x68
 801e2c0:	00da      	lsls	r2, r3, #3
 801e2c2:	921e      	str	r2, [sp, #120]	@ 0x78
 801e2c4:	011a      	lsls	r2, r3, #4
 801e2c6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e2c8:	001a      	movs	r2, r3
 801e2ca:	4694      	mov	ip, r2
 801e2cc:	005b      	lsls	r3, r3, #1
 801e2ce:	4463      	add	r3, ip
 801e2d0:	00db      	lsls	r3, r3, #3
 801e2d2:	931c      	str	r3, [sp, #112]	@ 0x70
 801e2d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e2d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e2d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2da:	9318      	str	r3, [sp, #96]	@ 0x60
 801e2dc:	9319      	str	r3, [sp, #100]	@ 0x64
 801e2de:	9316      	str	r3, [sp, #88]	@ 0x58
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	9315      	str	r3, [sp, #84]	@ 0x54
 801e2e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e2e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e2e8:	681a      	ldr	r2, [r3, #0]
 801e2ea:	685b      	ldr	r3, [r3, #4]
 801e2ec:	9205      	str	r2, [sp, #20]
 801e2ee:	9306      	str	r3, [sp, #24]
 801e2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e2f2:	468c      	mov	ip, r1
 801e2f4:	681a      	ldr	r2, [r3, #0]
 801e2f6:	685b      	ldr	r3, [r3, #4]
 801e2f8:	9207      	str	r2, [sp, #28]
 801e2fa:	9308      	str	r3, [sp, #32]
 801e2fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e2fe:	681a      	ldr	r2, [r3, #0]
 801e300:	685b      	ldr	r3, [r3, #4]
 801e302:	9209      	str	r2, [sp, #36]	@ 0x24
 801e304:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e306:	930a      	str	r3, [sp, #40]	@ 0x28
 801e308:	0013      	movs	r3, r2
 801e30a:	4463      	add	r3, ip
 801e30c:	4698      	mov	r8, r3
 801e30e:	0013      	movs	r3, r2
 801e310:	4442      	add	r2, r8
 801e312:	4691      	mov	r9, r2
 801e314:	001a      	movs	r2, r3
 801e316:	444a      	add	r2, r9
 801e318:	4692      	mov	sl, r2
 801e31a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e31c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e31e:	4293      	cmp	r3, r2
 801e320:	d800      	bhi.n	801e324 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e322:	e0d9      	b.n	801e4d8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e324:	4694      	mov	ip, r2
 801e326:	4644      	mov	r4, r8
 801e328:	4655      	mov	r5, sl
 801e32a:	4688      	mov	r8, r1
 801e32c:	9b07      	ldr	r3, [sp, #28]
 801e32e:	17db      	asrs	r3, r3, #31
 801e330:	930c      	str	r3, [sp, #48]	@ 0x30
 801e332:	9b08      	ldr	r3, [sp, #32]
 801e334:	17db      	asrs	r3, r3, #31
 801e336:	930d      	str	r3, [sp, #52]	@ 0x34
 801e338:	9b05      	ldr	r3, [sp, #20]
 801e33a:	17db      	asrs	r3, r3, #31
 801e33c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e33e:	9b06      	ldr	r3, [sp, #24]
 801e340:	17db      	asrs	r3, r3, #31
 801e342:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e346:	17db      	asrs	r3, r3, #31
 801e348:	9310      	str	r3, [sp, #64]	@ 0x40
 801e34a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e34c:	17db      	asrs	r3, r3, #31
 801e34e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e350:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e352:	4463      	add	r3, ip
 801e354:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e356:	4643      	mov	r3, r8
 801e358:	4641      	mov	r1, r8
 801e35a:	681a      	ldr	r2, [r3, #0]
 801e35c:	464b      	mov	r3, r9
 801e35e:	684f      	ldr	r7, [r1, #4]
 801e360:	4649      	mov	r1, r9
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	18d6      	adds	r6, r2, r3
 801e366:	1ad3      	subs	r3, r2, r3
 801e368:	9301      	str	r3, [sp, #4]
 801e36a:	684b      	ldr	r3, [r1, #4]
 801e36c:	1af9      	subs	r1, r7, r3
 801e36e:	9102      	str	r1, [sp, #8]
 801e370:	6829      	ldr	r1, [r5, #0]
 801e372:	18f8      	adds	r0, r7, r3
 801e374:	468c      	mov	ip, r1
 801e376:	6827      	ldr	r7, [r4, #0]
 801e378:	4467      	add	r7, ip
 801e37a:	003a      	movs	r2, r7
 801e37c:	19f3      	adds	r3, r6, r7
 801e37e:	4647      	mov	r7, r8
 801e380:	109b      	asrs	r3, r3, #2
 801e382:	603b      	str	r3, [r7, #0]
 801e384:	6869      	ldr	r1, [r5, #4]
 801e386:	6867      	ldr	r7, [r4, #4]
 801e388:	468c      	mov	ip, r1
 801e38a:	4467      	add	r7, ip
 801e38c:	003b      	movs	r3, r7
 801e38e:	19c1      	adds	r1, r0, r7
 801e390:	4647      	mov	r7, r8
 801e392:	1ab6      	subs	r6, r6, r2
 801e394:	1089      	asrs	r1, r1, #2
 801e396:	6079      	str	r1, [r7, #4]
 801e398:	17f2      	asrs	r2, r6, #31
 801e39a:	9900      	ldr	r1, [sp, #0]
 801e39c:	4692      	mov	sl, r2
 801e39e:	468c      	mov	ip, r1
 801e3a0:	6867      	ldr	r7, [r4, #4]
 801e3a2:	6869      	ldr	r1, [r5, #4]
 801e3a4:	44e0      	add	r8, ip
 801e3a6:	1a7f      	subs	r7, r7, r1
 801e3a8:	9703      	str	r7, [sp, #12]
 801e3aa:	6821      	ldr	r1, [r4, #0]
 801e3ac:	682f      	ldr	r7, [r5, #0]
 801e3ae:	1bc9      	subs	r1, r1, r7
 801e3b0:	1ac7      	subs	r7, r0, r3
 801e3b2:	17fa      	asrs	r2, r7, #31
 801e3b4:	4693      	mov	fp, r2
 801e3b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3b8:	9a07      	ldr	r2, [sp, #28]
 801e3ba:	9104      	str	r1, [sp, #16]
 801e3bc:	0030      	movs	r0, r6
 801e3be:	4651      	mov	r1, sl
 801e3c0:	f7e2 f8fe 	bl	80005c0 <__aeabi_lmul>
 801e3c4:	9a08      	ldr	r2, [sp, #32]
 801e3c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3c8:	9112      	str	r1, [sp, #72]	@ 0x48
 801e3ca:	0038      	movs	r0, r7
 801e3cc:	4659      	mov	r1, fp
 801e3ce:	f7e2 f8f7 	bl	80005c0 <__aeabi_lmul>
 801e3d2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e3d4:	9a07      	ldr	r2, [sp, #28]
 801e3d6:	1a41      	subs	r1, r0, r1
 801e3d8:	1049      	asrs	r1, r1, #1
 801e3da:	6021      	str	r1, [r4, #0]
 801e3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3de:	0038      	movs	r0, r7
 801e3e0:	4659      	mov	r1, fp
 801e3e2:	f7e2 f8ed 	bl	80005c0 <__aeabi_lmul>
 801e3e6:	9a08      	ldr	r2, [sp, #32]
 801e3e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e3ea:	000f      	movs	r7, r1
 801e3ec:	0030      	movs	r0, r6
 801e3ee:	4651      	mov	r1, sl
 801e3f0:	f7e2 f8e6 	bl	80005c0 <__aeabi_lmul>
 801e3f4:	9b00      	ldr	r3, [sp, #0]
 801e3f6:	187f      	adds	r7, r7, r1
 801e3f8:	469c      	mov	ip, r3
 801e3fa:	107f      	asrs	r7, r7, #1
 801e3fc:	6067      	str	r7, [r4, #4]
 801e3fe:	9a01      	ldr	r2, [sp, #4]
 801e400:	9f03      	ldr	r7, [sp, #12]
 801e402:	9802      	ldr	r0, [sp, #8]
 801e404:	1bd7      	subs	r7, r2, r7
 801e406:	17fe      	asrs	r6, r7, #31
 801e408:	0031      	movs	r1, r6
 801e40a:	9e04      	ldr	r6, [sp, #16]
 801e40c:	4682      	mov	sl, r0
 801e40e:	4464      	add	r4, ip
 801e410:	46b4      	mov	ip, r6
 801e412:	44e2      	add	sl, ip
 801e414:	4652      	mov	r2, sl
 801e416:	17d2      	asrs	r2, r2, #31
 801e418:	4693      	mov	fp, r2
 801e41a:	0038      	movs	r0, r7
 801e41c:	9a05      	ldr	r2, [sp, #20]
 801e41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e420:	9112      	str	r1, [sp, #72]	@ 0x48
 801e422:	f7e2 f8cd 	bl	80005c0 <__aeabi_lmul>
 801e426:	9a06      	ldr	r2, [sp, #24]
 801e428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e42a:	000e      	movs	r6, r1
 801e42c:	4650      	mov	r0, sl
 801e42e:	4659      	mov	r1, fp
 801e430:	f7e2 f8c6 	bl	80005c0 <__aeabi_lmul>
 801e434:	4648      	mov	r0, r9
 801e436:	1a76      	subs	r6, r6, r1
 801e438:	1076      	asrs	r6, r6, #1
 801e43a:	6006      	str	r6, [r0, #0]
 801e43c:	9a05      	ldr	r2, [sp, #20]
 801e43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e440:	4650      	mov	r0, sl
 801e442:	4659      	mov	r1, fp
 801e444:	f7e2 f8bc 	bl	80005c0 <__aeabi_lmul>
 801e448:	9a06      	ldr	r2, [sp, #24]
 801e44a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e44c:	000e      	movs	r6, r1
 801e44e:	0038      	movs	r0, r7
 801e450:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e452:	f7e2 f8b5 	bl	80005c0 <__aeabi_lmul>
 801e456:	9a00      	ldr	r2, [sp, #0]
 801e458:	9f03      	ldr	r7, [sp, #12]
 801e45a:	4694      	mov	ip, r2
 801e45c:	1876      	adds	r6, r6, r1
 801e45e:	4649      	mov	r1, r9
 801e460:	44e1      	add	r9, ip
 801e462:	46bc      	mov	ip, r7
 801e464:	9b01      	ldr	r3, [sp, #4]
 801e466:	1076      	asrs	r6, r6, #1
 801e468:	4463      	add	r3, ip
 801e46a:	17df      	asrs	r7, r3, #31
 801e46c:	604e      	str	r6, [r1, #4]
 801e46e:	46ba      	mov	sl, r7
 801e470:	001e      	movs	r6, r3
 801e472:	9802      	ldr	r0, [sp, #8]
 801e474:	9b04      	ldr	r3, [sp, #16]
 801e476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e478:	1ac7      	subs	r7, r0, r3
 801e47a:	17fb      	asrs	r3, r7, #31
 801e47c:	469b      	mov	fp, r3
 801e47e:	0030      	movs	r0, r6
 801e480:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e482:	4651      	mov	r1, sl
 801e484:	f7e2 f89c 	bl	80005c0 <__aeabi_lmul>
 801e488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e48a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e48c:	9101      	str	r1, [sp, #4]
 801e48e:	0038      	movs	r0, r7
 801e490:	4659      	mov	r1, fp
 801e492:	f7e2 f895 	bl	80005c0 <__aeabi_lmul>
 801e496:	9801      	ldr	r0, [sp, #4]
 801e498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e49a:	1a41      	subs	r1, r0, r1
 801e49c:	1049      	asrs	r1, r1, #1
 801e49e:	6029      	str	r1, [r5, #0]
 801e4a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e4a2:	0038      	movs	r0, r7
 801e4a4:	4659      	mov	r1, fp
 801e4a6:	f7e2 f88b 	bl	80005c0 <__aeabi_lmul>
 801e4aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e4ac:	000f      	movs	r7, r1
 801e4ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e4b0:	0030      	movs	r0, r6
 801e4b2:	4651      	mov	r1, sl
 801e4b4:	f7e2 f884 	bl	80005c0 <__aeabi_lmul>
 801e4b8:	187f      	adds	r7, r7, r1
 801e4ba:	107f      	asrs	r7, r7, #1
 801e4bc:	606f      	str	r7, [r5, #4]
 801e4be:	9a00      	ldr	r2, [sp, #0]
 801e4c0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e4c2:	4694      	mov	ip, r2
 801e4c4:	4465      	add	r5, ip
 801e4c6:	468c      	mov	ip, r1
 801e4c8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e4ca:	0013      	movs	r3, r2
 801e4cc:	4462      	add	r2, ip
 801e4ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e4d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e4d2:	429a      	cmp	r2, r3
 801e4d4:	d900      	bls.n	801e4d8 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e4d6:	e73e      	b.n	801e356 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e4d8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e4dc:	468c      	mov	ip, r1
 801e4de:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e4e0:	4462      	add	r2, ip
 801e4e2:	468c      	mov	ip, r1
 801e4e4:	9216      	str	r2, [sp, #88]	@ 0x58
 801e4e6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e4e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e4ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e4ec:	4462      	add	r2, ip
 801e4ee:	468c      	mov	ip, r1
 801e4f0:	9219      	str	r2, [sp, #100]	@ 0x64
 801e4f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e4f4:	3301      	adds	r3, #1
 801e4f6:	4462      	add	r2, ip
 801e4f8:	9218      	str	r2, [sp, #96]	@ 0x60
 801e4fa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e4fc:	9315      	str	r3, [sp, #84]	@ 0x54
 801e4fe:	3208      	adds	r2, #8
 801e500:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e502:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e504:	4293      	cmp	r3, r2
 801e506:	d800      	bhi.n	801e50a <arm_radix4_butterfly_inverse_q31+0x49e>
 801e508:	e6ec      	b.n	801e2e4 <arm_radix4_butterfly_inverse_q31+0x278>
 801e50a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e50c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e50e:	009b      	lsls	r3, r3, #2
 801e510:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e512:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e514:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e516:	089b      	lsrs	r3, r3, #2
 801e518:	9320      	str	r3, [sp, #128]	@ 0x80
 801e51a:	2b04      	cmp	r3, #4
 801e51c:	d900      	bls.n	801e520 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e51e:	e6c5      	b.n	801e2ac <arm_radix4_butterfly_inverse_q31+0x240>
 801e520:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e522:	469a      	mov	sl, r3
 801e524:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e526:	681a      	ldr	r2, [r3, #0]
 801e528:	6918      	ldr	r0, [r3, #16]
 801e52a:	4691      	mov	r9, r2
 801e52c:	464c      	mov	r4, r9
 801e52e:	4680      	mov	r8, r0
 801e530:	69de      	ldr	r6, [r3, #28]
 801e532:	689d      	ldr	r5, [r3, #8]
 801e534:	46b4      	mov	ip, r6
 801e536:	6998      	ldr	r0, [r3, #24]
 801e538:	1964      	adds	r4, r4, r5
 801e53a:	6859      	ldr	r1, [r3, #4]
 801e53c:	68da      	ldr	r2, [r3, #12]
 801e53e:	4444      	add	r4, r8
 801e540:	695f      	ldr	r7, [r3, #20]
 801e542:	1824      	adds	r4, r4, r0
 801e544:	601c      	str	r4, [r3, #0]
 801e546:	188c      	adds	r4, r1, r2
 801e548:	19e4      	adds	r4, r4, r7
 801e54a:	4464      	add	r4, ip
 801e54c:	605c      	str	r4, [r3, #4]
 801e54e:	464c      	mov	r4, r9
 801e550:	1b64      	subs	r4, r4, r5
 801e552:	4444      	add	r4, r8
 801e554:	1a24      	subs	r4, r4, r0
 801e556:	609c      	str	r4, [r3, #8]
 801e558:	1a8c      	subs	r4, r1, r2
 801e55a:	19e4      	adds	r4, r4, r7
 801e55c:	1ba4      	subs	r4, r4, r6
 801e55e:	60dc      	str	r4, [r3, #12]
 801e560:	464c      	mov	r4, r9
 801e562:	4646      	mov	r6, r8
 801e564:	1aa4      	subs	r4, r4, r2
 801e566:	1ba4      	subs	r4, r4, r6
 801e568:	4464      	add	r4, ip
 801e56a:	611c      	str	r4, [r3, #16]
 801e56c:	194c      	adds	r4, r1, r5
 801e56e:	1be4      	subs	r4, r4, r7
 801e570:	1a24      	subs	r4, r4, r0
 801e572:	615c      	str	r4, [r3, #20]
 801e574:	4644      	mov	r4, r8
 801e576:	4666      	mov	r6, ip
 801e578:	444a      	add	r2, r9
 801e57a:	1b12      	subs	r2, r2, r4
 801e57c:	1b92      	subs	r2, r2, r6
 801e57e:	619a      	str	r2, [r3, #24]
 801e580:	1b4a      	subs	r2, r1, r5
 801e582:	1bd1      	subs	r1, r2, r7
 801e584:	2201      	movs	r2, #1
 801e586:	4252      	negs	r2, r2
 801e588:	4694      	mov	ip, r2
 801e58a:	44e2      	add	sl, ip
 801e58c:	4652      	mov	r2, sl
 801e58e:	1809      	adds	r1, r1, r0
 801e590:	61d9      	str	r1, [r3, #28]
 801e592:	3320      	adds	r3, #32
 801e594:	2a00      	cmp	r2, #0
 801e596:	d1c6      	bne.n	801e526 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e598:	b027      	add	sp, #156	@ 0x9c
 801e59a:	bc3c      	pop	{r2, r3, r4, r5}
 801e59c:	4690      	mov	r8, r2
 801e59e:	4699      	mov	r9, r3
 801e5a0:	46a2      	mov	sl, r4
 801e5a2:	46ab      	mov	fp, r5
 801e5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5a6:	469a      	mov	sl, r3
 801e5a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e5aa:	e7bc      	b.n	801e526 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e5ac <arm_cmplx_mag_squared_q31>:
 801e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5ae:	464f      	mov	r7, r9
 801e5b0:	4646      	mov	r6, r8
 801e5b2:	0004      	movs	r4, r0
 801e5b4:	b4c0      	push	{r6, r7}
 801e5b6:	0016      	movs	r6, r2
 801e5b8:	000f      	movs	r7, r1
 801e5ba:	2a00      	cmp	r2, #0
 801e5bc:	d018      	beq.n	801e5f0 <arm_cmplx_mag_squared_q31+0x44>
 801e5be:	6823      	ldr	r3, [r4, #0]
 801e5c0:	6822      	ldr	r2, [r4, #0]
 801e5c2:	17d9      	asrs	r1, r3, #31
 801e5c4:	6863      	ldr	r3, [r4, #4]
 801e5c6:	0010      	movs	r0, r2
 801e5c8:	4698      	mov	r8, r3
 801e5ca:	17db      	asrs	r3, r3, #31
 801e5cc:	4699      	mov	r9, r3
 801e5ce:	000b      	movs	r3, r1
 801e5d0:	f7e1 fff6 	bl	80005c0 <__aeabi_lmul>
 801e5d4:	4642      	mov	r2, r8
 801e5d6:	104d      	asrs	r5, r1, #1
 801e5d8:	464b      	mov	r3, r9
 801e5da:	4640      	mov	r0, r8
 801e5dc:	4649      	mov	r1, r9
 801e5de:	f7e1 ffef 	bl	80005c0 <__aeabi_lmul>
 801e5e2:	1049      	asrs	r1, r1, #1
 801e5e4:	1869      	adds	r1, r5, r1
 801e5e6:	3e01      	subs	r6, #1
 801e5e8:	c702      	stmia	r7!, {r1}
 801e5ea:	3408      	adds	r4, #8
 801e5ec:	2e00      	cmp	r6, #0
 801e5ee:	d1e6      	bne.n	801e5be <arm_cmplx_mag_squared_q31+0x12>
 801e5f0:	bc0c      	pop	{r2, r3}
 801e5f2:	4690      	mov	r8, r2
 801e5f4:	4699      	mov	r9, r3
 801e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e5f8 <arm_mult_q31>:
 801e5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5fa:	4646      	mov	r6, r8
 801e5fc:	464f      	mov	r7, r9
 801e5fe:	4690      	mov	r8, r2
 801e600:	b4c0      	push	{r6, r7}
 801e602:	001d      	movs	r5, r3
 801e604:	0006      	movs	r6, r0
 801e606:	000f      	movs	r7, r1
 801e608:	2400      	movs	r4, #0
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d020      	beq.n	801e650 <arm_mult_q31+0x58>
 801e60e:	4b12      	ldr	r3, [pc, #72]	@ (801e658 <arm_mult_q31+0x60>)
 801e610:	4699      	mov	r9, r3
 801e612:	e007      	b.n	801e624 <arm_mult_q31+0x2c>
 801e614:	464b      	mov	r3, r9
 801e616:	4059      	eors	r1, r3
 801e618:	4643      	mov	r3, r8
 801e61a:	3d01      	subs	r5, #1
 801e61c:	5119      	str	r1, [r3, r4]
 801e61e:	3404      	adds	r4, #4
 801e620:	2d00      	cmp	r5, #0
 801e622:	d015      	beq.n	801e650 <arm_mult_q31+0x58>
 801e624:	5933      	ldr	r3, [r6, r4]
 801e626:	593a      	ldr	r2, [r7, r4]
 801e628:	17d9      	asrs	r1, r3, #31
 801e62a:	593b      	ldr	r3, [r7, r4]
 801e62c:	5930      	ldr	r0, [r6, r4]
 801e62e:	17db      	asrs	r3, r3, #31
 801e630:	f7e1 ffc6 	bl	80005c0 <__aeabi_lmul>
 801e634:	004b      	lsls	r3, r1, #1
 801e636:	0fc0      	lsrs	r0, r0, #31
 801e638:	4318      	orrs	r0, r3
 801e63a:	17c9      	asrs	r1, r1, #31
 801e63c:	17c3      	asrs	r3, r0, #31
 801e63e:	428b      	cmp	r3, r1
 801e640:	d1e8      	bne.n	801e614 <arm_mult_q31+0x1c>
 801e642:	0001      	movs	r1, r0
 801e644:	4643      	mov	r3, r8
 801e646:	3d01      	subs	r5, #1
 801e648:	5119      	str	r1, [r3, r4]
 801e64a:	3404      	adds	r4, #4
 801e64c:	2d00      	cmp	r5, #0
 801e64e:	d1e9      	bne.n	801e624 <arm_mult_q31+0x2c>
 801e650:	bc0c      	pop	{r2, r3}
 801e652:	4690      	mov	r8, r2
 801e654:	4699      	mov	r9, r3
 801e656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e658:	7fffffff 	.word	0x7fffffff

0801e65c <arm_add_q31>:
 801e65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e65e:	465f      	mov	r7, fp
 801e660:	4656      	mov	r6, sl
 801e662:	464d      	mov	r5, r9
 801e664:	4644      	mov	r4, r8
 801e666:	b4f0      	push	{r4, r5, r6, r7}
 801e668:	4693      	mov	fp, r2
 801e66a:	b083      	sub	sp, #12
 801e66c:	4681      	mov	r9, r0
 801e66e:	468a      	mov	sl, r1
 801e670:	4698      	mov	r8, r3
 801e672:	2200      	movs	r2, #0
 801e674:	2b00      	cmp	r3, #0
 801e676:	d020      	beq.n	801e6ba <arm_add_q31+0x5e>
 801e678:	4649      	mov	r1, r9
 801e67a:	4653      	mov	r3, sl
 801e67c:	588e      	ldr	r6, [r1, r2]
 801e67e:	589b      	ldr	r3, [r3, r2]
 801e680:	17f7      	asrs	r7, r6, #31
 801e682:	001c      	movs	r4, r3
 801e684:	0030      	movs	r0, r6
 801e686:	0039      	movs	r1, r7
 801e688:	17dd      	asrs	r5, r3, #31
 801e68a:	46b4      	mov	ip, r6
 801e68c:	1900      	adds	r0, r0, r4
 801e68e:	4169      	adcs	r1, r5
 801e690:	4463      	add	r3, ip
 801e692:	9000      	str	r0, [sp, #0]
 801e694:	9101      	str	r1, [sp, #4]
 801e696:	17d9      	asrs	r1, r3, #31
 801e698:	468c      	mov	ip, r1
 801e69a:	9901      	ldr	r1, [sp, #4]
 801e69c:	458c      	cmp	ip, r1
 801e69e:	d002      	beq.n	801e6a6 <arm_add_q31+0x4a>
 801e6a0:	17cb      	asrs	r3, r1, #31
 801e6a2:	4909      	ldr	r1, [pc, #36]	@ (801e6c8 <arm_add_q31+0x6c>)
 801e6a4:	404b      	eors	r3, r1
 801e6a6:	4659      	mov	r1, fp
 801e6a8:	508b      	str	r3, [r1, r2]
 801e6aa:	2301      	movs	r3, #1
 801e6ac:	425b      	negs	r3, r3
 801e6ae:	469c      	mov	ip, r3
 801e6b0:	44e0      	add	r8, ip
 801e6b2:	4643      	mov	r3, r8
 801e6b4:	3204      	adds	r2, #4
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d1de      	bne.n	801e678 <arm_add_q31+0x1c>
 801e6ba:	b003      	add	sp, #12
 801e6bc:	bc3c      	pop	{r2, r3, r4, r5}
 801e6be:	4690      	mov	r8, r2
 801e6c0:	4699      	mov	r9, r3
 801e6c2:	46a2      	mov	sl, r4
 801e6c4:	46ab      	mov	fp, r5
 801e6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6c8:	7fffffff 	.word	0x7fffffff

0801e6cc <atof>:
 801e6cc:	b510      	push	{r4, lr}
 801e6ce:	2100      	movs	r1, #0
 801e6d0:	f000 fe12 	bl	801f2f8 <strtod>
 801e6d4:	bd10      	pop	{r4, pc}

0801e6d6 <atoi>:
 801e6d6:	b510      	push	{r4, lr}
 801e6d8:	220a      	movs	r2, #10
 801e6da:	2100      	movs	r1, #0
 801e6dc:	f000 fea4 	bl	801f428 <strtol>
 801e6e0:	bd10      	pop	{r4, pc}
	...

0801e6e4 <sulp>:
 801e6e4:	b570      	push	{r4, r5, r6, lr}
 801e6e6:	0016      	movs	r6, r2
 801e6e8:	000d      	movs	r5, r1
 801e6ea:	f003 fcf3 	bl	80220d4 <__ulp>
 801e6ee:	2e00      	cmp	r6, #0
 801e6f0:	d00d      	beq.n	801e70e <sulp+0x2a>
 801e6f2:	236b      	movs	r3, #107	@ 0x6b
 801e6f4:	006a      	lsls	r2, r5, #1
 801e6f6:	0d52      	lsrs	r2, r2, #21
 801e6f8:	1a9b      	subs	r3, r3, r2
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	dd07      	ble.n	801e70e <sulp+0x2a>
 801e6fe:	2400      	movs	r4, #0
 801e700:	4a03      	ldr	r2, [pc, #12]	@ (801e710 <sulp+0x2c>)
 801e702:	051b      	lsls	r3, r3, #20
 801e704:	189d      	adds	r5, r3, r2
 801e706:	002b      	movs	r3, r5
 801e708:	0022      	movs	r2, r4
 801e70a:	f7e3 ff97 	bl	800263c <__aeabi_dmul>
 801e70e:	bd70      	pop	{r4, r5, r6, pc}
 801e710:	3ff00000 	.word	0x3ff00000

0801e714 <_strtod_l>:
 801e714:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e716:	b0a3      	sub	sp, #140	@ 0x8c
 801e718:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e71a:	2200      	movs	r2, #0
 801e71c:	2600      	movs	r6, #0
 801e71e:	2700      	movs	r7, #0
 801e720:	9005      	str	r0, [sp, #20]
 801e722:	9109      	str	r1, [sp, #36]	@ 0x24
 801e724:	921e      	str	r2, [sp, #120]	@ 0x78
 801e726:	911d      	str	r1, [sp, #116]	@ 0x74
 801e728:	780a      	ldrb	r2, [r1, #0]
 801e72a:	2a2b      	cmp	r2, #43	@ 0x2b
 801e72c:	d053      	beq.n	801e7d6 <_strtod_l+0xc2>
 801e72e:	d83f      	bhi.n	801e7b0 <_strtod_l+0x9c>
 801e730:	2a0d      	cmp	r2, #13
 801e732:	d839      	bhi.n	801e7a8 <_strtod_l+0x94>
 801e734:	2a08      	cmp	r2, #8
 801e736:	d839      	bhi.n	801e7ac <_strtod_l+0x98>
 801e738:	2a00      	cmp	r2, #0
 801e73a:	d042      	beq.n	801e7c2 <_strtod_l+0xae>
 801e73c:	2200      	movs	r2, #0
 801e73e:	9212      	str	r2, [sp, #72]	@ 0x48
 801e740:	2100      	movs	r1, #0
 801e742:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e744:	910c      	str	r1, [sp, #48]	@ 0x30
 801e746:	782a      	ldrb	r2, [r5, #0]
 801e748:	2a30      	cmp	r2, #48	@ 0x30
 801e74a:	d000      	beq.n	801e74e <_strtod_l+0x3a>
 801e74c:	e083      	b.n	801e856 <_strtod_l+0x142>
 801e74e:	786a      	ldrb	r2, [r5, #1]
 801e750:	3120      	adds	r1, #32
 801e752:	438a      	bics	r2, r1
 801e754:	2a58      	cmp	r2, #88	@ 0x58
 801e756:	d000      	beq.n	801e75a <_strtod_l+0x46>
 801e758:	e073      	b.n	801e842 <_strtod_l+0x12e>
 801e75a:	9302      	str	r3, [sp, #8]
 801e75c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e75e:	4a95      	ldr	r2, [pc, #596]	@ (801e9b4 <_strtod_l+0x2a0>)
 801e760:	9301      	str	r3, [sp, #4]
 801e762:	ab1e      	add	r3, sp, #120	@ 0x78
 801e764:	9300      	str	r3, [sp, #0]
 801e766:	9805      	ldr	r0, [sp, #20]
 801e768:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e76a:	a91d      	add	r1, sp, #116	@ 0x74
 801e76c:	f002 fd62 	bl	8021234 <__gethex>
 801e770:	230f      	movs	r3, #15
 801e772:	0002      	movs	r2, r0
 801e774:	401a      	ands	r2, r3
 801e776:	0004      	movs	r4, r0
 801e778:	9206      	str	r2, [sp, #24]
 801e77a:	4218      	tst	r0, r3
 801e77c:	d005      	beq.n	801e78a <_strtod_l+0x76>
 801e77e:	2a06      	cmp	r2, #6
 801e780:	d12b      	bne.n	801e7da <_strtod_l+0xc6>
 801e782:	2300      	movs	r3, #0
 801e784:	3501      	adds	r5, #1
 801e786:	951d      	str	r5, [sp, #116]	@ 0x74
 801e788:	9312      	str	r3, [sp, #72]	@ 0x48
 801e78a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d002      	beq.n	801e796 <_strtod_l+0x82>
 801e790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e792:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e794:	6013      	str	r3, [r2, #0]
 801e796:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d019      	beq.n	801e7d0 <_strtod_l+0xbc>
 801e79c:	2380      	movs	r3, #128	@ 0x80
 801e79e:	0030      	movs	r0, r6
 801e7a0:	061b      	lsls	r3, r3, #24
 801e7a2:	18f9      	adds	r1, r7, r3
 801e7a4:	b023      	add	sp, #140	@ 0x8c
 801e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7a8:	2a20      	cmp	r2, #32
 801e7aa:	d1c7      	bne.n	801e73c <_strtod_l+0x28>
 801e7ac:	3101      	adds	r1, #1
 801e7ae:	e7ba      	b.n	801e726 <_strtod_l+0x12>
 801e7b0:	2a2d      	cmp	r2, #45	@ 0x2d
 801e7b2:	d1c3      	bne.n	801e73c <_strtod_l+0x28>
 801e7b4:	3a2c      	subs	r2, #44	@ 0x2c
 801e7b6:	9212      	str	r2, [sp, #72]	@ 0x48
 801e7b8:	1c4a      	adds	r2, r1, #1
 801e7ba:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7bc:	784a      	ldrb	r2, [r1, #1]
 801e7be:	2a00      	cmp	r2, #0
 801e7c0:	d1be      	bne.n	801e740 <_strtod_l+0x2c>
 801e7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7c4:	931d      	str	r3, [sp, #116]	@ 0x74
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	9312      	str	r3, [sp, #72]	@ 0x48
 801e7ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d1df      	bne.n	801e790 <_strtod_l+0x7c>
 801e7d0:	0030      	movs	r0, r6
 801e7d2:	0039      	movs	r1, r7
 801e7d4:	e7e6      	b.n	801e7a4 <_strtod_l+0x90>
 801e7d6:	2200      	movs	r2, #0
 801e7d8:	e7ed      	b.n	801e7b6 <_strtod_l+0xa2>
 801e7da:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e7dc:	2a00      	cmp	r2, #0
 801e7de:	d007      	beq.n	801e7f0 <_strtod_l+0xdc>
 801e7e0:	2135      	movs	r1, #53	@ 0x35
 801e7e2:	a820      	add	r0, sp, #128	@ 0x80
 801e7e4:	f003 fd6c 	bl	80222c0 <__copybits>
 801e7e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e7ea:	9805      	ldr	r0, [sp, #20]
 801e7ec:	f003 f926 	bl	8021a3c <_Bfree>
 801e7f0:	9806      	ldr	r0, [sp, #24]
 801e7f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e7f4:	3801      	subs	r0, #1
 801e7f6:	2804      	cmp	r0, #4
 801e7f8:	d806      	bhi.n	801e808 <_strtod_l+0xf4>
 801e7fa:	f7e1 fcbf 	bl	800017c <__gnu_thumb1_case_uqi>
 801e7fe:	0312      	.short	0x0312
 801e800:	1e1c      	.short	0x1e1c
 801e802:	12          	.byte	0x12
 801e803:	00          	.byte	0x00
 801e804:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e806:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e808:	05e4      	lsls	r4, r4, #23
 801e80a:	d502      	bpl.n	801e812 <_strtod_l+0xfe>
 801e80c:	2380      	movs	r3, #128	@ 0x80
 801e80e:	061b      	lsls	r3, r3, #24
 801e810:	431f      	orrs	r7, r3
 801e812:	4b69      	ldr	r3, [pc, #420]	@ (801e9b8 <_strtod_l+0x2a4>)
 801e814:	423b      	tst	r3, r7
 801e816:	d1b8      	bne.n	801e78a <_strtod_l+0x76>
 801e818:	f001 fd90 	bl	802033c <__errno>
 801e81c:	2322      	movs	r3, #34	@ 0x22
 801e81e:	6003      	str	r3, [r0, #0]
 801e820:	e7b3      	b.n	801e78a <_strtod_l+0x76>
 801e822:	4966      	ldr	r1, [pc, #408]	@ (801e9bc <_strtod_l+0x2a8>)
 801e824:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e826:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e828:	400a      	ands	r2, r1
 801e82a:	4965      	ldr	r1, [pc, #404]	@ (801e9c0 <_strtod_l+0x2ac>)
 801e82c:	185b      	adds	r3, r3, r1
 801e82e:	051b      	lsls	r3, r3, #20
 801e830:	431a      	orrs	r2, r3
 801e832:	0017      	movs	r7, r2
 801e834:	e7e8      	b.n	801e808 <_strtod_l+0xf4>
 801e836:	4f60      	ldr	r7, [pc, #384]	@ (801e9b8 <_strtod_l+0x2a4>)
 801e838:	e7e6      	b.n	801e808 <_strtod_l+0xf4>
 801e83a:	2601      	movs	r6, #1
 801e83c:	4f61      	ldr	r7, [pc, #388]	@ (801e9c4 <_strtod_l+0x2b0>)
 801e83e:	4276      	negs	r6, r6
 801e840:	e7e2      	b.n	801e808 <_strtod_l+0xf4>
 801e842:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e844:	1c5a      	adds	r2, r3, #1
 801e846:	921d      	str	r2, [sp, #116]	@ 0x74
 801e848:	785b      	ldrb	r3, [r3, #1]
 801e84a:	2b30      	cmp	r3, #48	@ 0x30
 801e84c:	d0f9      	beq.n	801e842 <_strtod_l+0x12e>
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d09b      	beq.n	801e78a <_strtod_l+0x76>
 801e852:	2301      	movs	r3, #1
 801e854:	930c      	str	r3, [sp, #48]	@ 0x30
 801e856:	2500      	movs	r5, #0
 801e858:	220a      	movs	r2, #10
 801e85a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e85c:	950d      	str	r5, [sp, #52]	@ 0x34
 801e85e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e860:	9508      	str	r5, [sp, #32]
 801e862:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e864:	7804      	ldrb	r4, [r0, #0]
 801e866:	0023      	movs	r3, r4
 801e868:	3b30      	subs	r3, #48	@ 0x30
 801e86a:	b2d9      	uxtb	r1, r3
 801e86c:	2909      	cmp	r1, #9
 801e86e:	d927      	bls.n	801e8c0 <_strtod_l+0x1ac>
 801e870:	2201      	movs	r2, #1
 801e872:	4955      	ldr	r1, [pc, #340]	@ (801e9c8 <_strtod_l+0x2b4>)
 801e874:	f001 fcd4 	bl	8020220 <strncmp>
 801e878:	2800      	cmp	r0, #0
 801e87a:	d031      	beq.n	801e8e0 <_strtod_l+0x1cc>
 801e87c:	2000      	movs	r0, #0
 801e87e:	0023      	movs	r3, r4
 801e880:	4684      	mov	ip, r0
 801e882:	9a08      	ldr	r2, [sp, #32]
 801e884:	900e      	str	r0, [sp, #56]	@ 0x38
 801e886:	9206      	str	r2, [sp, #24]
 801e888:	2220      	movs	r2, #32
 801e88a:	0019      	movs	r1, r3
 801e88c:	4391      	bics	r1, r2
 801e88e:	000a      	movs	r2, r1
 801e890:	2100      	movs	r1, #0
 801e892:	9107      	str	r1, [sp, #28]
 801e894:	2a45      	cmp	r2, #69	@ 0x45
 801e896:	d000      	beq.n	801e89a <_strtod_l+0x186>
 801e898:	e0c0      	b.n	801ea1c <_strtod_l+0x308>
 801e89a:	9b06      	ldr	r3, [sp, #24]
 801e89c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e89e:	4303      	orrs	r3, r0
 801e8a0:	4313      	orrs	r3, r2
 801e8a2:	428b      	cmp	r3, r1
 801e8a4:	d08d      	beq.n	801e7c2 <_strtod_l+0xae>
 801e8a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	931d      	str	r3, [sp, #116]	@ 0x74
 801e8ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8b0:	785b      	ldrb	r3, [r3, #1]
 801e8b2:	2b2b      	cmp	r3, #43	@ 0x2b
 801e8b4:	d070      	beq.n	801e998 <_strtod_l+0x284>
 801e8b6:	000c      	movs	r4, r1
 801e8b8:	2b2d      	cmp	r3, #45	@ 0x2d
 801e8ba:	d173      	bne.n	801e9a4 <_strtod_l+0x290>
 801e8bc:	2401      	movs	r4, #1
 801e8be:	e06c      	b.n	801e99a <_strtod_l+0x286>
 801e8c0:	9908      	ldr	r1, [sp, #32]
 801e8c2:	2908      	cmp	r1, #8
 801e8c4:	dc09      	bgt.n	801e8da <_strtod_l+0x1c6>
 801e8c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e8c8:	4351      	muls	r1, r2
 801e8ca:	185b      	adds	r3, r3, r1
 801e8cc:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8ce:	9b08      	ldr	r3, [sp, #32]
 801e8d0:	3001      	adds	r0, #1
 801e8d2:	3301      	adds	r3, #1
 801e8d4:	9308      	str	r3, [sp, #32]
 801e8d6:	901d      	str	r0, [sp, #116]	@ 0x74
 801e8d8:	e7c3      	b.n	801e862 <_strtod_l+0x14e>
 801e8da:	4355      	muls	r5, r2
 801e8dc:	195d      	adds	r5, r3, r5
 801e8de:	e7f6      	b.n	801e8ce <_strtod_l+0x1ba>
 801e8e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8e2:	1c5a      	adds	r2, r3, #1
 801e8e4:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8e6:	9a08      	ldr	r2, [sp, #32]
 801e8e8:	785b      	ldrb	r3, [r3, #1]
 801e8ea:	2a00      	cmp	r2, #0
 801e8ec:	d03a      	beq.n	801e964 <_strtod_l+0x250>
 801e8ee:	900e      	str	r0, [sp, #56]	@ 0x38
 801e8f0:	9206      	str	r2, [sp, #24]
 801e8f2:	001a      	movs	r2, r3
 801e8f4:	3a30      	subs	r2, #48	@ 0x30
 801e8f6:	2a09      	cmp	r2, #9
 801e8f8:	d912      	bls.n	801e920 <_strtod_l+0x20c>
 801e8fa:	2201      	movs	r2, #1
 801e8fc:	4694      	mov	ip, r2
 801e8fe:	e7c3      	b.n	801e888 <_strtod_l+0x174>
 801e900:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e902:	3001      	adds	r0, #1
 801e904:	1c5a      	adds	r2, r3, #1
 801e906:	921d      	str	r2, [sp, #116]	@ 0x74
 801e908:	785b      	ldrb	r3, [r3, #1]
 801e90a:	2b30      	cmp	r3, #48	@ 0x30
 801e90c:	d0f8      	beq.n	801e900 <_strtod_l+0x1ec>
 801e90e:	001a      	movs	r2, r3
 801e910:	3a31      	subs	r2, #49	@ 0x31
 801e912:	2a08      	cmp	r2, #8
 801e914:	d83b      	bhi.n	801e98e <_strtod_l+0x27a>
 801e916:	900e      	str	r0, [sp, #56]	@ 0x38
 801e918:	2000      	movs	r0, #0
 801e91a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e91c:	9006      	str	r0, [sp, #24]
 801e91e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e920:	001a      	movs	r2, r3
 801e922:	1c41      	adds	r1, r0, #1
 801e924:	3a30      	subs	r2, #48	@ 0x30
 801e926:	2b30      	cmp	r3, #48	@ 0x30
 801e928:	d016      	beq.n	801e958 <_strtod_l+0x244>
 801e92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e92c:	185b      	adds	r3, r3, r1
 801e92e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e930:	9b06      	ldr	r3, [sp, #24]
 801e932:	210a      	movs	r1, #10
 801e934:	469c      	mov	ip, r3
 801e936:	4484      	add	ip, r0
 801e938:	459c      	cmp	ip, r3
 801e93a:	d115      	bne.n	801e968 <_strtod_l+0x254>
 801e93c:	9906      	ldr	r1, [sp, #24]
 801e93e:	9b06      	ldr	r3, [sp, #24]
 801e940:	3101      	adds	r1, #1
 801e942:	1809      	adds	r1, r1, r0
 801e944:	181b      	adds	r3, r3, r0
 801e946:	9106      	str	r1, [sp, #24]
 801e948:	2b08      	cmp	r3, #8
 801e94a:	dc19      	bgt.n	801e980 <_strtod_l+0x26c>
 801e94c:	230a      	movs	r3, #10
 801e94e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e950:	434b      	muls	r3, r1
 801e952:	2100      	movs	r1, #0
 801e954:	18d3      	adds	r3, r2, r3
 801e956:	930d      	str	r3, [sp, #52]	@ 0x34
 801e958:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e95a:	0008      	movs	r0, r1
 801e95c:	1c5a      	adds	r2, r3, #1
 801e95e:	921d      	str	r2, [sp, #116]	@ 0x74
 801e960:	785b      	ldrb	r3, [r3, #1]
 801e962:	e7c6      	b.n	801e8f2 <_strtod_l+0x1de>
 801e964:	9808      	ldr	r0, [sp, #32]
 801e966:	e7d0      	b.n	801e90a <_strtod_l+0x1f6>
 801e968:	1c5c      	adds	r4, r3, #1
 801e96a:	2b08      	cmp	r3, #8
 801e96c:	dc04      	bgt.n	801e978 <_strtod_l+0x264>
 801e96e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e970:	434b      	muls	r3, r1
 801e972:	930d      	str	r3, [sp, #52]	@ 0x34
 801e974:	0023      	movs	r3, r4
 801e976:	e7df      	b.n	801e938 <_strtod_l+0x224>
 801e978:	2c10      	cmp	r4, #16
 801e97a:	dcfb      	bgt.n	801e974 <_strtod_l+0x260>
 801e97c:	434d      	muls	r5, r1
 801e97e:	e7f9      	b.n	801e974 <_strtod_l+0x260>
 801e980:	2100      	movs	r1, #0
 801e982:	2b0f      	cmp	r3, #15
 801e984:	dce8      	bgt.n	801e958 <_strtod_l+0x244>
 801e986:	230a      	movs	r3, #10
 801e988:	435d      	muls	r5, r3
 801e98a:	1955      	adds	r5, r2, r5
 801e98c:	e7e4      	b.n	801e958 <_strtod_l+0x244>
 801e98e:	2200      	movs	r2, #0
 801e990:	920e      	str	r2, [sp, #56]	@ 0x38
 801e992:	9206      	str	r2, [sp, #24]
 801e994:	3201      	adds	r2, #1
 801e996:	e7b1      	b.n	801e8fc <_strtod_l+0x1e8>
 801e998:	2400      	movs	r4, #0
 801e99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e99c:	3302      	adds	r3, #2
 801e99e:	931d      	str	r3, [sp, #116]	@ 0x74
 801e9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9a2:	789b      	ldrb	r3, [r3, #2]
 801e9a4:	001a      	movs	r2, r3
 801e9a6:	3a30      	subs	r2, #48	@ 0x30
 801e9a8:	2a09      	cmp	r2, #9
 801e9aa:	d913      	bls.n	801e9d4 <_strtod_l+0x2c0>
 801e9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9ae:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9b0:	2200      	movs	r2, #0
 801e9b2:	e032      	b.n	801ea1a <_strtod_l+0x306>
 801e9b4:	08025bd4 	.word	0x08025bd4
 801e9b8:	7ff00000 	.word	0x7ff00000
 801e9bc:	ffefffff 	.word	0xffefffff
 801e9c0:	00000433 	.word	0x00000433
 801e9c4:	7fffffff 	.word	0x7fffffff
 801e9c8:	08025bbc 	.word	0x08025bbc
 801e9cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9ce:	1c5a      	adds	r2, r3, #1
 801e9d0:	921d      	str	r2, [sp, #116]	@ 0x74
 801e9d2:	785b      	ldrb	r3, [r3, #1]
 801e9d4:	2b30      	cmp	r3, #48	@ 0x30
 801e9d6:	d0f9      	beq.n	801e9cc <_strtod_l+0x2b8>
 801e9d8:	2200      	movs	r2, #0
 801e9da:	9207      	str	r2, [sp, #28]
 801e9dc:	001a      	movs	r2, r3
 801e9de:	3a31      	subs	r2, #49	@ 0x31
 801e9e0:	2a08      	cmp	r2, #8
 801e9e2:	d81b      	bhi.n	801ea1c <_strtod_l+0x308>
 801e9e4:	3b30      	subs	r3, #48	@ 0x30
 801e9e6:	9310      	str	r3, [sp, #64]	@ 0x40
 801e9e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9ea:	9307      	str	r3, [sp, #28]
 801e9ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9ee:	1c59      	adds	r1, r3, #1
 801e9f0:	911d      	str	r1, [sp, #116]	@ 0x74
 801e9f2:	785b      	ldrb	r3, [r3, #1]
 801e9f4:	001a      	movs	r2, r3
 801e9f6:	3a30      	subs	r2, #48	@ 0x30
 801e9f8:	2a09      	cmp	r2, #9
 801e9fa:	d93a      	bls.n	801ea72 <_strtod_l+0x35e>
 801e9fc:	9a07      	ldr	r2, [sp, #28]
 801e9fe:	1a8a      	subs	r2, r1, r2
 801ea00:	49b4      	ldr	r1, [pc, #720]	@ (801ecd4 <_strtod_l+0x5c0>)
 801ea02:	9107      	str	r1, [sp, #28]
 801ea04:	2a08      	cmp	r2, #8
 801ea06:	dc04      	bgt.n	801ea12 <_strtod_l+0x2fe>
 801ea08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ea0a:	9207      	str	r2, [sp, #28]
 801ea0c:	428a      	cmp	r2, r1
 801ea0e:	dd00      	ble.n	801ea12 <_strtod_l+0x2fe>
 801ea10:	9107      	str	r1, [sp, #28]
 801ea12:	2c00      	cmp	r4, #0
 801ea14:	d002      	beq.n	801ea1c <_strtod_l+0x308>
 801ea16:	9a07      	ldr	r2, [sp, #28]
 801ea18:	4252      	negs	r2, r2
 801ea1a:	9207      	str	r2, [sp, #28]
 801ea1c:	9a06      	ldr	r2, [sp, #24]
 801ea1e:	2a00      	cmp	r2, #0
 801ea20:	d14d      	bne.n	801eabe <_strtod_l+0x3aa>
 801ea22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea24:	4310      	orrs	r0, r2
 801ea26:	d000      	beq.n	801ea2a <_strtod_l+0x316>
 801ea28:	e6af      	b.n	801e78a <_strtod_l+0x76>
 801ea2a:	4662      	mov	r2, ip
 801ea2c:	2a00      	cmp	r2, #0
 801ea2e:	d000      	beq.n	801ea32 <_strtod_l+0x31e>
 801ea30:	e6c7      	b.n	801e7c2 <_strtod_l+0xae>
 801ea32:	2b69      	cmp	r3, #105	@ 0x69
 801ea34:	d027      	beq.n	801ea86 <_strtod_l+0x372>
 801ea36:	dc23      	bgt.n	801ea80 <_strtod_l+0x36c>
 801ea38:	2b49      	cmp	r3, #73	@ 0x49
 801ea3a:	d024      	beq.n	801ea86 <_strtod_l+0x372>
 801ea3c:	2b4e      	cmp	r3, #78	@ 0x4e
 801ea3e:	d000      	beq.n	801ea42 <_strtod_l+0x32e>
 801ea40:	e6bf      	b.n	801e7c2 <_strtod_l+0xae>
 801ea42:	49a5      	ldr	r1, [pc, #660]	@ (801ecd8 <_strtod_l+0x5c4>)
 801ea44:	a81d      	add	r0, sp, #116	@ 0x74
 801ea46:	f002 fe2b 	bl	80216a0 <__match>
 801ea4a:	2800      	cmp	r0, #0
 801ea4c:	d100      	bne.n	801ea50 <_strtod_l+0x33c>
 801ea4e:	e6b8      	b.n	801e7c2 <_strtod_l+0xae>
 801ea50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea52:	781b      	ldrb	r3, [r3, #0]
 801ea54:	2b28      	cmp	r3, #40	@ 0x28
 801ea56:	d12c      	bne.n	801eab2 <_strtod_l+0x39e>
 801ea58:	49a0      	ldr	r1, [pc, #640]	@ (801ecdc <_strtod_l+0x5c8>)
 801ea5a:	aa20      	add	r2, sp, #128	@ 0x80
 801ea5c:	a81d      	add	r0, sp, #116	@ 0x74
 801ea5e:	f002 fe33 	bl	80216c8 <__hexnan>
 801ea62:	2805      	cmp	r0, #5
 801ea64:	d125      	bne.n	801eab2 <_strtod_l+0x39e>
 801ea66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ea68:	4a9d      	ldr	r2, [pc, #628]	@ (801ece0 <_strtod_l+0x5cc>)
 801ea6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ea6c:	431a      	orrs	r2, r3
 801ea6e:	0017      	movs	r7, r2
 801ea70:	e68b      	b.n	801e78a <_strtod_l+0x76>
 801ea72:	220a      	movs	r2, #10
 801ea74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ea76:	434a      	muls	r2, r1
 801ea78:	18d2      	adds	r2, r2, r3
 801ea7a:	3a30      	subs	r2, #48	@ 0x30
 801ea7c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ea7e:	e7b5      	b.n	801e9ec <_strtod_l+0x2d8>
 801ea80:	2b6e      	cmp	r3, #110	@ 0x6e
 801ea82:	d0de      	beq.n	801ea42 <_strtod_l+0x32e>
 801ea84:	e69d      	b.n	801e7c2 <_strtod_l+0xae>
 801ea86:	4997      	ldr	r1, [pc, #604]	@ (801ece4 <_strtod_l+0x5d0>)
 801ea88:	a81d      	add	r0, sp, #116	@ 0x74
 801ea8a:	f002 fe09 	bl	80216a0 <__match>
 801ea8e:	2800      	cmp	r0, #0
 801ea90:	d100      	bne.n	801ea94 <_strtod_l+0x380>
 801ea92:	e696      	b.n	801e7c2 <_strtod_l+0xae>
 801ea94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea96:	4994      	ldr	r1, [pc, #592]	@ (801ece8 <_strtod_l+0x5d4>)
 801ea98:	3b01      	subs	r3, #1
 801ea9a:	a81d      	add	r0, sp, #116	@ 0x74
 801ea9c:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea9e:	f002 fdff 	bl	80216a0 <__match>
 801eaa2:	2800      	cmp	r0, #0
 801eaa4:	d102      	bne.n	801eaac <_strtod_l+0x398>
 801eaa6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eaa8:	3301      	adds	r3, #1
 801eaaa:	931d      	str	r3, [sp, #116]	@ 0x74
 801eaac:	2600      	movs	r6, #0
 801eaae:	4f8c      	ldr	r7, [pc, #560]	@ (801ece0 <_strtod_l+0x5cc>)
 801eab0:	e66b      	b.n	801e78a <_strtod_l+0x76>
 801eab2:	488e      	ldr	r0, [pc, #568]	@ (801ecec <_strtod_l+0x5d8>)
 801eab4:	f001 fc84 	bl	80203c0 <nan>
 801eab8:	0006      	movs	r6, r0
 801eaba:	000f      	movs	r7, r1
 801eabc:	e665      	b.n	801e78a <_strtod_l+0x76>
 801eabe:	9b07      	ldr	r3, [sp, #28]
 801eac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eac2:	1a9b      	subs	r3, r3, r2
 801eac4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eac6:	9b08      	ldr	r3, [sp, #32]
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	d101      	bne.n	801ead0 <_strtod_l+0x3bc>
 801eacc:	9b06      	ldr	r3, [sp, #24]
 801eace:	9308      	str	r3, [sp, #32]
 801ead0:	9c06      	ldr	r4, [sp, #24]
 801ead2:	2c10      	cmp	r4, #16
 801ead4:	dd00      	ble.n	801ead8 <_strtod_l+0x3c4>
 801ead6:	2410      	movs	r4, #16
 801ead8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801eada:	f7e4 fc9f 	bl	800341c <__aeabi_ui2d>
 801eade:	9b06      	ldr	r3, [sp, #24]
 801eae0:	0006      	movs	r6, r0
 801eae2:	000f      	movs	r7, r1
 801eae4:	2b09      	cmp	r3, #9
 801eae6:	dc13      	bgt.n	801eb10 <_strtod_l+0x3fc>
 801eae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d100      	bne.n	801eaf0 <_strtod_l+0x3dc>
 801eaee:	e64c      	b.n	801e78a <_strtod_l+0x76>
 801eaf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	dc00      	bgt.n	801eaf8 <_strtod_l+0x3e4>
 801eaf6:	e07e      	b.n	801ebf6 <_strtod_l+0x4e2>
 801eaf8:	2b16      	cmp	r3, #22
 801eafa:	dc63      	bgt.n	801ebc4 <_strtod_l+0x4b0>
 801eafc:	497c      	ldr	r1, [pc, #496]	@ (801ecf0 <_strtod_l+0x5dc>)
 801eafe:	00db      	lsls	r3, r3, #3
 801eb00:	18c9      	adds	r1, r1, r3
 801eb02:	0032      	movs	r2, r6
 801eb04:	6808      	ldr	r0, [r1, #0]
 801eb06:	6849      	ldr	r1, [r1, #4]
 801eb08:	003b      	movs	r3, r7
 801eb0a:	f7e3 fd97 	bl	800263c <__aeabi_dmul>
 801eb0e:	e7d3      	b.n	801eab8 <_strtod_l+0x3a4>
 801eb10:	0022      	movs	r2, r4
 801eb12:	4b77      	ldr	r3, [pc, #476]	@ (801ecf0 <_strtod_l+0x5dc>)
 801eb14:	3a09      	subs	r2, #9
 801eb16:	00d2      	lsls	r2, r2, #3
 801eb18:	189b      	adds	r3, r3, r2
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	685b      	ldr	r3, [r3, #4]
 801eb1e:	f7e3 fd8d 	bl	800263c <__aeabi_dmul>
 801eb22:	0006      	movs	r6, r0
 801eb24:	0028      	movs	r0, r5
 801eb26:	000f      	movs	r7, r1
 801eb28:	f7e4 fc78 	bl	800341c <__aeabi_ui2d>
 801eb2c:	000b      	movs	r3, r1
 801eb2e:	0002      	movs	r2, r0
 801eb30:	0039      	movs	r1, r7
 801eb32:	0030      	movs	r0, r6
 801eb34:	f7e2 fdda 	bl	80016ec <__aeabi_dadd>
 801eb38:	9b06      	ldr	r3, [sp, #24]
 801eb3a:	0006      	movs	r6, r0
 801eb3c:	000f      	movs	r7, r1
 801eb3e:	2b0f      	cmp	r3, #15
 801eb40:	ddd2      	ble.n	801eae8 <_strtod_l+0x3d4>
 801eb42:	9b06      	ldr	r3, [sp, #24]
 801eb44:	1b1c      	subs	r4, r3, r4
 801eb46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb48:	18e4      	adds	r4, r4, r3
 801eb4a:	2c00      	cmp	r4, #0
 801eb4c:	dc00      	bgt.n	801eb50 <_strtod_l+0x43c>
 801eb4e:	e09b      	b.n	801ec88 <_strtod_l+0x574>
 801eb50:	220f      	movs	r2, #15
 801eb52:	0023      	movs	r3, r4
 801eb54:	4013      	ands	r3, r2
 801eb56:	4214      	tst	r4, r2
 801eb58:	d00a      	beq.n	801eb70 <_strtod_l+0x45c>
 801eb5a:	4965      	ldr	r1, [pc, #404]	@ (801ecf0 <_strtod_l+0x5dc>)
 801eb5c:	00db      	lsls	r3, r3, #3
 801eb5e:	18c9      	adds	r1, r1, r3
 801eb60:	0032      	movs	r2, r6
 801eb62:	6808      	ldr	r0, [r1, #0]
 801eb64:	6849      	ldr	r1, [r1, #4]
 801eb66:	003b      	movs	r3, r7
 801eb68:	f7e3 fd68 	bl	800263c <__aeabi_dmul>
 801eb6c:	0006      	movs	r6, r0
 801eb6e:	000f      	movs	r7, r1
 801eb70:	230f      	movs	r3, #15
 801eb72:	439c      	bics	r4, r3
 801eb74:	d073      	beq.n	801ec5e <_strtod_l+0x54a>
 801eb76:	3326      	adds	r3, #38	@ 0x26
 801eb78:	33ff      	adds	r3, #255	@ 0xff
 801eb7a:	429c      	cmp	r4, r3
 801eb7c:	dd4b      	ble.n	801ec16 <_strtod_l+0x502>
 801eb7e:	2300      	movs	r3, #0
 801eb80:	9306      	str	r3, [sp, #24]
 801eb82:	9307      	str	r3, [sp, #28]
 801eb84:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb86:	9308      	str	r3, [sp, #32]
 801eb88:	2322      	movs	r3, #34	@ 0x22
 801eb8a:	2600      	movs	r6, #0
 801eb8c:	9a05      	ldr	r2, [sp, #20]
 801eb8e:	4f54      	ldr	r7, [pc, #336]	@ (801ece0 <_strtod_l+0x5cc>)
 801eb90:	6013      	str	r3, [r2, #0]
 801eb92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb94:	42b3      	cmp	r3, r6
 801eb96:	d100      	bne.n	801eb9a <_strtod_l+0x486>
 801eb98:	e5f7      	b.n	801e78a <_strtod_l+0x76>
 801eb9a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eb9c:	9805      	ldr	r0, [sp, #20]
 801eb9e:	f002 ff4d 	bl	8021a3c <_Bfree>
 801eba2:	9908      	ldr	r1, [sp, #32]
 801eba4:	9805      	ldr	r0, [sp, #20]
 801eba6:	f002 ff49 	bl	8021a3c <_Bfree>
 801ebaa:	9907      	ldr	r1, [sp, #28]
 801ebac:	9805      	ldr	r0, [sp, #20]
 801ebae:	f002 ff45 	bl	8021a3c <_Bfree>
 801ebb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ebb4:	9805      	ldr	r0, [sp, #20]
 801ebb6:	f002 ff41 	bl	8021a3c <_Bfree>
 801ebba:	9906      	ldr	r1, [sp, #24]
 801ebbc:	9805      	ldr	r0, [sp, #20]
 801ebbe:	f002 ff3d 	bl	8021a3c <_Bfree>
 801ebc2:	e5e2      	b.n	801e78a <_strtod_l+0x76>
 801ebc4:	2325      	movs	r3, #37	@ 0x25
 801ebc6:	9a06      	ldr	r2, [sp, #24]
 801ebc8:	1a9b      	subs	r3, r3, r2
 801ebca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	dbb8      	blt.n	801eb42 <_strtod_l+0x42e>
 801ebd0:	240f      	movs	r4, #15
 801ebd2:	9b06      	ldr	r3, [sp, #24]
 801ebd4:	4d46      	ldr	r5, [pc, #280]	@ (801ecf0 <_strtod_l+0x5dc>)
 801ebd6:	1ae4      	subs	r4, r4, r3
 801ebd8:	00e1      	lsls	r1, r4, #3
 801ebda:	1869      	adds	r1, r5, r1
 801ebdc:	0032      	movs	r2, r6
 801ebde:	6808      	ldr	r0, [r1, #0]
 801ebe0:	6849      	ldr	r1, [r1, #4]
 801ebe2:	003b      	movs	r3, r7
 801ebe4:	f7e3 fd2a 	bl	800263c <__aeabi_dmul>
 801ebe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebea:	1b1c      	subs	r4, r3, r4
 801ebec:	00e4      	lsls	r4, r4, #3
 801ebee:	192d      	adds	r5, r5, r4
 801ebf0:	682a      	ldr	r2, [r5, #0]
 801ebf2:	686b      	ldr	r3, [r5, #4]
 801ebf4:	e789      	b.n	801eb0a <_strtod_l+0x3f6>
 801ebf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebf8:	3316      	adds	r3, #22
 801ebfa:	dba2      	blt.n	801eb42 <_strtod_l+0x42e>
 801ebfc:	9907      	ldr	r1, [sp, #28]
 801ebfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec00:	4b3b      	ldr	r3, [pc, #236]	@ (801ecf0 <_strtod_l+0x5dc>)
 801ec02:	1a52      	subs	r2, r2, r1
 801ec04:	00d2      	lsls	r2, r2, #3
 801ec06:	189b      	adds	r3, r3, r2
 801ec08:	0030      	movs	r0, r6
 801ec0a:	681a      	ldr	r2, [r3, #0]
 801ec0c:	685b      	ldr	r3, [r3, #4]
 801ec0e:	0039      	movs	r1, r7
 801ec10:	f7e3 f8d0 	bl	8001db4 <__aeabi_ddiv>
 801ec14:	e750      	b.n	801eab8 <_strtod_l+0x3a4>
 801ec16:	2300      	movs	r3, #0
 801ec18:	0030      	movs	r0, r6
 801ec1a:	0039      	movs	r1, r7
 801ec1c:	4d35      	ldr	r5, [pc, #212]	@ (801ecf4 <_strtod_l+0x5e0>)
 801ec1e:	1124      	asrs	r4, r4, #4
 801ec20:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec22:	2c01      	cmp	r4, #1
 801ec24:	dc1e      	bgt.n	801ec64 <_strtod_l+0x550>
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d001      	beq.n	801ec2e <_strtod_l+0x51a>
 801ec2a:	0006      	movs	r6, r0
 801ec2c:	000f      	movs	r7, r1
 801ec2e:	4b32      	ldr	r3, [pc, #200]	@ (801ecf8 <_strtod_l+0x5e4>)
 801ec30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec32:	18ff      	adds	r7, r7, r3
 801ec34:	4b2f      	ldr	r3, [pc, #188]	@ (801ecf4 <_strtod_l+0x5e0>)
 801ec36:	00d5      	lsls	r5, r2, #3
 801ec38:	195d      	adds	r5, r3, r5
 801ec3a:	0032      	movs	r2, r6
 801ec3c:	6828      	ldr	r0, [r5, #0]
 801ec3e:	6869      	ldr	r1, [r5, #4]
 801ec40:	003b      	movs	r3, r7
 801ec42:	f7e3 fcfb 	bl	800263c <__aeabi_dmul>
 801ec46:	4b26      	ldr	r3, [pc, #152]	@ (801ece0 <_strtod_l+0x5cc>)
 801ec48:	4a2c      	ldr	r2, [pc, #176]	@ (801ecfc <_strtod_l+0x5e8>)
 801ec4a:	0006      	movs	r6, r0
 801ec4c:	400b      	ands	r3, r1
 801ec4e:	4293      	cmp	r3, r2
 801ec50:	d895      	bhi.n	801eb7e <_strtod_l+0x46a>
 801ec52:	4a2b      	ldr	r2, [pc, #172]	@ (801ed00 <_strtod_l+0x5ec>)
 801ec54:	4293      	cmp	r3, r2
 801ec56:	d913      	bls.n	801ec80 <_strtod_l+0x56c>
 801ec58:	2601      	movs	r6, #1
 801ec5a:	4f2a      	ldr	r7, [pc, #168]	@ (801ed04 <_strtod_l+0x5f0>)
 801ec5c:	4276      	negs	r6, r6
 801ec5e:	2300      	movs	r3, #0
 801ec60:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec62:	e086      	b.n	801ed72 <_strtod_l+0x65e>
 801ec64:	2201      	movs	r2, #1
 801ec66:	4214      	tst	r4, r2
 801ec68:	d004      	beq.n	801ec74 <_strtod_l+0x560>
 801ec6a:	682a      	ldr	r2, [r5, #0]
 801ec6c:	686b      	ldr	r3, [r5, #4]
 801ec6e:	f7e3 fce5 	bl	800263c <__aeabi_dmul>
 801ec72:	2301      	movs	r3, #1
 801ec74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ec76:	1064      	asrs	r4, r4, #1
 801ec78:	3201      	adds	r2, #1
 801ec7a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec7c:	3508      	adds	r5, #8
 801ec7e:	e7d0      	b.n	801ec22 <_strtod_l+0x50e>
 801ec80:	23d4      	movs	r3, #212	@ 0xd4
 801ec82:	049b      	lsls	r3, r3, #18
 801ec84:	18cf      	adds	r7, r1, r3
 801ec86:	e7ea      	b.n	801ec5e <_strtod_l+0x54a>
 801ec88:	2c00      	cmp	r4, #0
 801ec8a:	d0e8      	beq.n	801ec5e <_strtod_l+0x54a>
 801ec8c:	4264      	negs	r4, r4
 801ec8e:	230f      	movs	r3, #15
 801ec90:	0022      	movs	r2, r4
 801ec92:	401a      	ands	r2, r3
 801ec94:	421c      	tst	r4, r3
 801ec96:	d00a      	beq.n	801ecae <_strtod_l+0x59a>
 801ec98:	4b15      	ldr	r3, [pc, #84]	@ (801ecf0 <_strtod_l+0x5dc>)
 801ec9a:	00d2      	lsls	r2, r2, #3
 801ec9c:	189b      	adds	r3, r3, r2
 801ec9e:	0030      	movs	r0, r6
 801eca0:	681a      	ldr	r2, [r3, #0]
 801eca2:	685b      	ldr	r3, [r3, #4]
 801eca4:	0039      	movs	r1, r7
 801eca6:	f7e3 f885 	bl	8001db4 <__aeabi_ddiv>
 801ecaa:	0006      	movs	r6, r0
 801ecac:	000f      	movs	r7, r1
 801ecae:	1124      	asrs	r4, r4, #4
 801ecb0:	d0d5      	beq.n	801ec5e <_strtod_l+0x54a>
 801ecb2:	2c1f      	cmp	r4, #31
 801ecb4:	dd28      	ble.n	801ed08 <_strtod_l+0x5f4>
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	9306      	str	r3, [sp, #24]
 801ecba:	9307      	str	r3, [sp, #28]
 801ecbc:	930d      	str	r3, [sp, #52]	@ 0x34
 801ecbe:	9308      	str	r3, [sp, #32]
 801ecc0:	2322      	movs	r3, #34	@ 0x22
 801ecc2:	9a05      	ldr	r2, [sp, #20]
 801ecc4:	2600      	movs	r6, #0
 801ecc6:	6013      	str	r3, [r2, #0]
 801ecc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecca:	2700      	movs	r7, #0
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d000      	beq.n	801ecd2 <_strtod_l+0x5be>
 801ecd0:	e763      	b.n	801eb9a <_strtod_l+0x486>
 801ecd2:	e55a      	b.n	801e78a <_strtod_l+0x76>
 801ecd4:	00004e1f 	.word	0x00004e1f
 801ecd8:	08025d1e 	.word	0x08025d1e
 801ecdc:	08025bc0 	.word	0x08025bc0
 801ece0:	7ff00000 	.word	0x7ff00000
 801ece4:	08025d16 	.word	0x08025d16
 801ece8:	08025d50 	.word	0x08025d50
 801ecec:	08025fdc 	.word	0x08025fdc
 801ecf0:	08025ec8 	.word	0x08025ec8
 801ecf4:	08025ea0 	.word	0x08025ea0
 801ecf8:	fcb00000 	.word	0xfcb00000
 801ecfc:	7ca00000 	.word	0x7ca00000
 801ed00:	7c900000 	.word	0x7c900000
 801ed04:	7fefffff 	.word	0x7fefffff
 801ed08:	2310      	movs	r3, #16
 801ed0a:	0022      	movs	r2, r4
 801ed0c:	401a      	ands	r2, r3
 801ed0e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ed10:	421c      	tst	r4, r3
 801ed12:	d001      	beq.n	801ed18 <_strtod_l+0x604>
 801ed14:	335a      	adds	r3, #90	@ 0x5a
 801ed16:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed18:	0030      	movs	r0, r6
 801ed1a:	0039      	movs	r1, r7
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	4dbf      	ldr	r5, [pc, #764]	@ (801f01c <_strtod_l+0x908>)
 801ed20:	2201      	movs	r2, #1
 801ed22:	4214      	tst	r4, r2
 801ed24:	d004      	beq.n	801ed30 <_strtod_l+0x61c>
 801ed26:	682a      	ldr	r2, [r5, #0]
 801ed28:	686b      	ldr	r3, [r5, #4]
 801ed2a:	f7e3 fc87 	bl	800263c <__aeabi_dmul>
 801ed2e:	2301      	movs	r3, #1
 801ed30:	1064      	asrs	r4, r4, #1
 801ed32:	3508      	adds	r5, #8
 801ed34:	2c00      	cmp	r4, #0
 801ed36:	d1f3      	bne.n	801ed20 <_strtod_l+0x60c>
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d001      	beq.n	801ed40 <_strtod_l+0x62c>
 801ed3c:	0006      	movs	r6, r0
 801ed3e:	000f      	movs	r7, r1
 801ed40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d00d      	beq.n	801ed62 <_strtod_l+0x64e>
 801ed46:	236b      	movs	r3, #107	@ 0x6b
 801ed48:	007a      	lsls	r2, r7, #1
 801ed4a:	0d52      	lsrs	r2, r2, #21
 801ed4c:	0039      	movs	r1, r7
 801ed4e:	1a9b      	subs	r3, r3, r2
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	dd06      	ble.n	801ed62 <_strtod_l+0x64e>
 801ed54:	2b1f      	cmp	r3, #31
 801ed56:	dd5a      	ble.n	801ee0e <_strtod_l+0x6fa>
 801ed58:	2600      	movs	r6, #0
 801ed5a:	2b34      	cmp	r3, #52	@ 0x34
 801ed5c:	dd50      	ble.n	801ee00 <_strtod_l+0x6ec>
 801ed5e:	27dc      	movs	r7, #220	@ 0xdc
 801ed60:	04bf      	lsls	r7, r7, #18
 801ed62:	2200      	movs	r2, #0
 801ed64:	2300      	movs	r3, #0
 801ed66:	0030      	movs	r0, r6
 801ed68:	0039      	movs	r1, r7
 801ed6a:	f7e1 fba1 	bl	80004b0 <__aeabi_dcmpeq>
 801ed6e:	2800      	cmp	r0, #0
 801ed70:	d1a1      	bne.n	801ecb6 <_strtod_l+0x5a2>
 801ed72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed74:	9a08      	ldr	r2, [sp, #32]
 801ed76:	9300      	str	r3, [sp, #0]
 801ed78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed7a:	9b06      	ldr	r3, [sp, #24]
 801ed7c:	9805      	ldr	r0, [sp, #20]
 801ed7e:	f002 fec5 	bl	8021b0c <__s2b>
 801ed82:	900d      	str	r0, [sp, #52]	@ 0x34
 801ed84:	2800      	cmp	r0, #0
 801ed86:	d100      	bne.n	801ed8a <_strtod_l+0x676>
 801ed88:	e6f9      	b.n	801eb7e <_strtod_l+0x46a>
 801ed8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed8c:	9907      	ldr	r1, [sp, #28]
 801ed8e:	17da      	asrs	r2, r3, #31
 801ed90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed92:	1a5b      	subs	r3, r3, r1
 801ed94:	401a      	ands	r2, r3
 801ed96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed98:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ed9a:	43db      	mvns	r3, r3
 801ed9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ed9e:	17db      	asrs	r3, r3, #31
 801eda0:	401a      	ands	r2, r3
 801eda2:	2300      	movs	r3, #0
 801eda4:	921a      	str	r2, [sp, #104]	@ 0x68
 801eda6:	9306      	str	r3, [sp, #24]
 801eda8:	9307      	str	r3, [sp, #28]
 801edaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edac:	9805      	ldr	r0, [sp, #20]
 801edae:	6859      	ldr	r1, [r3, #4]
 801edb0:	f002 fe00 	bl	80219b4 <_Balloc>
 801edb4:	9008      	str	r0, [sp, #32]
 801edb6:	2800      	cmp	r0, #0
 801edb8:	d100      	bne.n	801edbc <_strtod_l+0x6a8>
 801edba:	e6e5      	b.n	801eb88 <_strtod_l+0x474>
 801edbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edbe:	300c      	adds	r0, #12
 801edc0:	0019      	movs	r1, r3
 801edc2:	691a      	ldr	r2, [r3, #16]
 801edc4:	310c      	adds	r1, #12
 801edc6:	3202      	adds	r2, #2
 801edc8:	0092      	lsls	r2, r2, #2
 801edca:	f001 faef 	bl	80203ac <memcpy>
 801edce:	ab20      	add	r3, sp, #128	@ 0x80
 801edd0:	9301      	str	r3, [sp, #4]
 801edd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 801edd4:	9300      	str	r3, [sp, #0]
 801edd6:	0032      	movs	r2, r6
 801edd8:	003b      	movs	r3, r7
 801edda:	9805      	ldr	r0, [sp, #20]
 801eddc:	9610      	str	r6, [sp, #64]	@ 0x40
 801edde:	9711      	str	r7, [sp, #68]	@ 0x44
 801ede0:	f003 f9e4 	bl	80221ac <__d2b>
 801ede4:	901e      	str	r0, [sp, #120]	@ 0x78
 801ede6:	2800      	cmp	r0, #0
 801ede8:	d100      	bne.n	801edec <_strtod_l+0x6d8>
 801edea:	e6cd      	b.n	801eb88 <_strtod_l+0x474>
 801edec:	2101      	movs	r1, #1
 801edee:	9805      	ldr	r0, [sp, #20]
 801edf0:	f002 ff28 	bl	8021c44 <__i2b>
 801edf4:	9007      	str	r0, [sp, #28]
 801edf6:	2800      	cmp	r0, #0
 801edf8:	d10e      	bne.n	801ee18 <_strtod_l+0x704>
 801edfa:	2300      	movs	r3, #0
 801edfc:	9307      	str	r3, [sp, #28]
 801edfe:	e6c3      	b.n	801eb88 <_strtod_l+0x474>
 801ee00:	234b      	movs	r3, #75	@ 0x4b
 801ee02:	1a9a      	subs	r2, r3, r2
 801ee04:	3b4c      	subs	r3, #76	@ 0x4c
 801ee06:	4093      	lsls	r3, r2
 801ee08:	4019      	ands	r1, r3
 801ee0a:	000f      	movs	r7, r1
 801ee0c:	e7a9      	b.n	801ed62 <_strtod_l+0x64e>
 801ee0e:	2201      	movs	r2, #1
 801ee10:	4252      	negs	r2, r2
 801ee12:	409a      	lsls	r2, r3
 801ee14:	4016      	ands	r6, r2
 801ee16:	e7a4      	b.n	801ed62 <_strtod_l+0x64e>
 801ee18:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ee1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ee1c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ee1e:	1ad4      	subs	r4, r2, r3
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	db01      	blt.n	801ee28 <_strtod_l+0x714>
 801ee24:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ee26:	195d      	adds	r5, r3, r5
 801ee28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ee2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ee2c:	1a5b      	subs	r3, r3, r1
 801ee2e:	2136      	movs	r1, #54	@ 0x36
 801ee30:	189b      	adds	r3, r3, r2
 801ee32:	1a8a      	subs	r2, r1, r2
 801ee34:	497a      	ldr	r1, [pc, #488]	@ (801f020 <_strtod_l+0x90c>)
 801ee36:	2001      	movs	r0, #1
 801ee38:	468c      	mov	ip, r1
 801ee3a:	2100      	movs	r1, #0
 801ee3c:	3b01      	subs	r3, #1
 801ee3e:	9116      	str	r1, [sp, #88]	@ 0x58
 801ee40:	9014      	str	r0, [sp, #80]	@ 0x50
 801ee42:	4563      	cmp	r3, ip
 801ee44:	da06      	bge.n	801ee54 <_strtod_l+0x740>
 801ee46:	4661      	mov	r1, ip
 801ee48:	1ac9      	subs	r1, r1, r3
 801ee4a:	1a52      	subs	r2, r2, r1
 801ee4c:	291f      	cmp	r1, #31
 801ee4e:	dc3f      	bgt.n	801eed0 <_strtod_l+0x7bc>
 801ee50:	4088      	lsls	r0, r1
 801ee52:	9014      	str	r0, [sp, #80]	@ 0x50
 801ee54:	18ab      	adds	r3, r5, r2
 801ee56:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee58:	18a4      	adds	r4, r4, r2
 801ee5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee5e:	191c      	adds	r4, r3, r4
 801ee60:	002b      	movs	r3, r5
 801ee62:	4295      	cmp	r5, r2
 801ee64:	dd00      	ble.n	801ee68 <_strtod_l+0x754>
 801ee66:	0013      	movs	r3, r2
 801ee68:	42a3      	cmp	r3, r4
 801ee6a:	dd00      	ble.n	801ee6e <_strtod_l+0x75a>
 801ee6c:	0023      	movs	r3, r4
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	dd04      	ble.n	801ee7c <_strtod_l+0x768>
 801ee72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee74:	1ae4      	subs	r4, r4, r3
 801ee76:	1ad2      	subs	r2, r2, r3
 801ee78:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee7a:	1aed      	subs	r5, r5, r3
 801ee7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	dd16      	ble.n	801eeb0 <_strtod_l+0x79c>
 801ee82:	001a      	movs	r2, r3
 801ee84:	9907      	ldr	r1, [sp, #28]
 801ee86:	9805      	ldr	r0, [sp, #20]
 801ee88:	f002 ffa6 	bl	8021dd8 <__pow5mult>
 801ee8c:	9007      	str	r0, [sp, #28]
 801ee8e:	2800      	cmp	r0, #0
 801ee90:	d0b3      	beq.n	801edfa <_strtod_l+0x6e6>
 801ee92:	0001      	movs	r1, r0
 801ee94:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ee96:	9805      	ldr	r0, [sp, #20]
 801ee98:	f002 feec 	bl	8021c74 <__multiply>
 801ee9c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	d100      	bne.n	801eea4 <_strtod_l+0x790>
 801eea2:	e671      	b.n	801eb88 <_strtod_l+0x474>
 801eea4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eea6:	9805      	ldr	r0, [sp, #20]
 801eea8:	f002 fdc8 	bl	8021a3c <_Bfree>
 801eeac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eeae:	931e      	str	r3, [sp, #120]	@ 0x78
 801eeb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	dc12      	bgt.n	801eedc <_strtod_l+0x7c8>
 801eeb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	dd18      	ble.n	801eeee <_strtod_l+0x7da>
 801eebc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801eebe:	9908      	ldr	r1, [sp, #32]
 801eec0:	9805      	ldr	r0, [sp, #20]
 801eec2:	f002 ff89 	bl	8021dd8 <__pow5mult>
 801eec6:	9008      	str	r0, [sp, #32]
 801eec8:	2800      	cmp	r0, #0
 801eeca:	d110      	bne.n	801eeee <_strtod_l+0x7da>
 801eecc:	2300      	movs	r3, #0
 801eece:	e65a      	b.n	801eb86 <_strtod_l+0x472>
 801eed0:	4954      	ldr	r1, [pc, #336]	@ (801f024 <_strtod_l+0x910>)
 801eed2:	1acb      	subs	r3, r1, r3
 801eed4:	0001      	movs	r1, r0
 801eed6:	4099      	lsls	r1, r3
 801eed8:	9116      	str	r1, [sp, #88]	@ 0x58
 801eeda:	e7ba      	b.n	801ee52 <_strtod_l+0x73e>
 801eedc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eede:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eee0:	9805      	ldr	r0, [sp, #20]
 801eee2:	f002 ffd5 	bl	8021e90 <__lshift>
 801eee6:	901e      	str	r0, [sp, #120]	@ 0x78
 801eee8:	2800      	cmp	r0, #0
 801eeea:	d1e4      	bne.n	801eeb6 <_strtod_l+0x7a2>
 801eeec:	e64c      	b.n	801eb88 <_strtod_l+0x474>
 801eeee:	2c00      	cmp	r4, #0
 801eef0:	dd07      	ble.n	801ef02 <_strtod_l+0x7ee>
 801eef2:	0022      	movs	r2, r4
 801eef4:	9908      	ldr	r1, [sp, #32]
 801eef6:	9805      	ldr	r0, [sp, #20]
 801eef8:	f002 ffca 	bl	8021e90 <__lshift>
 801eefc:	9008      	str	r0, [sp, #32]
 801eefe:	2800      	cmp	r0, #0
 801ef00:	d0e4      	beq.n	801eecc <_strtod_l+0x7b8>
 801ef02:	2d00      	cmp	r5, #0
 801ef04:	dd08      	ble.n	801ef18 <_strtod_l+0x804>
 801ef06:	002a      	movs	r2, r5
 801ef08:	9907      	ldr	r1, [sp, #28]
 801ef0a:	9805      	ldr	r0, [sp, #20]
 801ef0c:	f002 ffc0 	bl	8021e90 <__lshift>
 801ef10:	9007      	str	r0, [sp, #28]
 801ef12:	2800      	cmp	r0, #0
 801ef14:	d100      	bne.n	801ef18 <_strtod_l+0x804>
 801ef16:	e637      	b.n	801eb88 <_strtod_l+0x474>
 801ef18:	9a08      	ldr	r2, [sp, #32]
 801ef1a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ef1c:	9805      	ldr	r0, [sp, #20]
 801ef1e:	f003 f83f 	bl	8021fa0 <__mdiff>
 801ef22:	9006      	str	r0, [sp, #24]
 801ef24:	2800      	cmp	r0, #0
 801ef26:	d100      	bne.n	801ef2a <_strtod_l+0x816>
 801ef28:	e62e      	b.n	801eb88 <_strtod_l+0x474>
 801ef2a:	68c3      	ldr	r3, [r0, #12]
 801ef2c:	9907      	ldr	r1, [sp, #28]
 801ef2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ef30:	2300      	movs	r3, #0
 801ef32:	60c3      	str	r3, [r0, #12]
 801ef34:	f003 f818 	bl	8021f68 <__mcmp>
 801ef38:	2800      	cmp	r0, #0
 801ef3a:	da3b      	bge.n	801efb4 <_strtod_l+0x8a0>
 801ef3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef3e:	4333      	orrs	r3, r6
 801ef40:	d167      	bne.n	801f012 <_strtod_l+0x8fe>
 801ef42:	033b      	lsls	r3, r7, #12
 801ef44:	d165      	bne.n	801f012 <_strtod_l+0x8fe>
 801ef46:	22d6      	movs	r2, #214	@ 0xd6
 801ef48:	4b37      	ldr	r3, [pc, #220]	@ (801f028 <_strtod_l+0x914>)
 801ef4a:	04d2      	lsls	r2, r2, #19
 801ef4c:	403b      	ands	r3, r7
 801ef4e:	4293      	cmp	r3, r2
 801ef50:	d95f      	bls.n	801f012 <_strtod_l+0x8fe>
 801ef52:	9b06      	ldr	r3, [sp, #24]
 801ef54:	695b      	ldr	r3, [r3, #20]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d103      	bne.n	801ef62 <_strtod_l+0x84e>
 801ef5a:	9b06      	ldr	r3, [sp, #24]
 801ef5c:	691b      	ldr	r3, [r3, #16]
 801ef5e:	2b01      	cmp	r3, #1
 801ef60:	dd57      	ble.n	801f012 <_strtod_l+0x8fe>
 801ef62:	9906      	ldr	r1, [sp, #24]
 801ef64:	2201      	movs	r2, #1
 801ef66:	9805      	ldr	r0, [sp, #20]
 801ef68:	f002 ff92 	bl	8021e90 <__lshift>
 801ef6c:	9907      	ldr	r1, [sp, #28]
 801ef6e:	9006      	str	r0, [sp, #24]
 801ef70:	f002 fffa 	bl	8021f68 <__mcmp>
 801ef74:	2800      	cmp	r0, #0
 801ef76:	dd4c      	ble.n	801f012 <_strtod_l+0x8fe>
 801ef78:	4b2b      	ldr	r3, [pc, #172]	@ (801f028 <_strtod_l+0x914>)
 801ef7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef7c:	403b      	ands	r3, r7
 801ef7e:	2a00      	cmp	r2, #0
 801ef80:	d074      	beq.n	801f06c <_strtod_l+0x958>
 801ef82:	22d6      	movs	r2, #214	@ 0xd6
 801ef84:	04d2      	lsls	r2, r2, #19
 801ef86:	4293      	cmp	r3, r2
 801ef88:	d870      	bhi.n	801f06c <_strtod_l+0x958>
 801ef8a:	22dc      	movs	r2, #220	@ 0xdc
 801ef8c:	0492      	lsls	r2, r2, #18
 801ef8e:	4293      	cmp	r3, r2
 801ef90:	d800      	bhi.n	801ef94 <_strtod_l+0x880>
 801ef92:	e695      	b.n	801ecc0 <_strtod_l+0x5ac>
 801ef94:	0030      	movs	r0, r6
 801ef96:	0039      	movs	r1, r7
 801ef98:	4b24      	ldr	r3, [pc, #144]	@ (801f02c <_strtod_l+0x918>)
 801ef9a:	2200      	movs	r2, #0
 801ef9c:	f7e3 fb4e 	bl	800263c <__aeabi_dmul>
 801efa0:	4b21      	ldr	r3, [pc, #132]	@ (801f028 <_strtod_l+0x914>)
 801efa2:	0006      	movs	r6, r0
 801efa4:	000f      	movs	r7, r1
 801efa6:	420b      	tst	r3, r1
 801efa8:	d000      	beq.n	801efac <_strtod_l+0x898>
 801efaa:	e5f6      	b.n	801eb9a <_strtod_l+0x486>
 801efac:	2322      	movs	r3, #34	@ 0x22
 801efae:	9a05      	ldr	r2, [sp, #20]
 801efb0:	6013      	str	r3, [r2, #0]
 801efb2:	e5f2      	b.n	801eb9a <_strtod_l+0x486>
 801efb4:	970e      	str	r7, [sp, #56]	@ 0x38
 801efb6:	2800      	cmp	r0, #0
 801efb8:	d175      	bne.n	801f0a6 <_strtod_l+0x992>
 801efba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801efbc:	033b      	lsls	r3, r7, #12
 801efbe:	0b1b      	lsrs	r3, r3, #12
 801efc0:	2a00      	cmp	r2, #0
 801efc2:	d039      	beq.n	801f038 <_strtod_l+0x924>
 801efc4:	4a1a      	ldr	r2, [pc, #104]	@ (801f030 <_strtod_l+0x91c>)
 801efc6:	4293      	cmp	r3, r2
 801efc8:	d138      	bne.n	801f03c <_strtod_l+0x928>
 801efca:	2101      	movs	r1, #1
 801efcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efce:	4249      	negs	r1, r1
 801efd0:	0032      	movs	r2, r6
 801efd2:	0008      	movs	r0, r1
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d00b      	beq.n	801eff0 <_strtod_l+0x8dc>
 801efd8:	24d4      	movs	r4, #212	@ 0xd4
 801efda:	4b13      	ldr	r3, [pc, #76]	@ (801f028 <_strtod_l+0x914>)
 801efdc:	0008      	movs	r0, r1
 801efde:	403b      	ands	r3, r7
 801efe0:	04e4      	lsls	r4, r4, #19
 801efe2:	42a3      	cmp	r3, r4
 801efe4:	d804      	bhi.n	801eff0 <_strtod_l+0x8dc>
 801efe6:	306c      	adds	r0, #108	@ 0x6c
 801efe8:	0d1b      	lsrs	r3, r3, #20
 801efea:	1ac3      	subs	r3, r0, r3
 801efec:	4099      	lsls	r1, r3
 801efee:	0008      	movs	r0, r1
 801eff0:	4282      	cmp	r2, r0
 801eff2:	d123      	bne.n	801f03c <_strtod_l+0x928>
 801eff4:	4b0f      	ldr	r3, [pc, #60]	@ (801f034 <_strtod_l+0x920>)
 801eff6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801eff8:	4299      	cmp	r1, r3
 801effa:	d102      	bne.n	801f002 <_strtod_l+0x8ee>
 801effc:	3201      	adds	r2, #1
 801effe:	d100      	bne.n	801f002 <_strtod_l+0x8ee>
 801f000:	e5c2      	b.n	801eb88 <_strtod_l+0x474>
 801f002:	4b09      	ldr	r3, [pc, #36]	@ (801f028 <_strtod_l+0x914>)
 801f004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f006:	2600      	movs	r6, #0
 801f008:	401a      	ands	r2, r3
 801f00a:	0013      	movs	r3, r2
 801f00c:	2280      	movs	r2, #128	@ 0x80
 801f00e:	0352      	lsls	r2, r2, #13
 801f010:	189f      	adds	r7, r3, r2
 801f012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f014:	2b00      	cmp	r3, #0
 801f016:	d1bd      	bne.n	801ef94 <_strtod_l+0x880>
 801f018:	e5bf      	b.n	801eb9a <_strtod_l+0x486>
 801f01a:	46c0      	nop			@ (mov r8, r8)
 801f01c:	08025be8 	.word	0x08025be8
 801f020:	fffffc02 	.word	0xfffffc02
 801f024:	fffffbe2 	.word	0xfffffbe2
 801f028:	7ff00000 	.word	0x7ff00000
 801f02c:	39500000 	.word	0x39500000
 801f030:	000fffff 	.word	0x000fffff
 801f034:	7fefffff 	.word	0x7fefffff
 801f038:	4333      	orrs	r3, r6
 801f03a:	d09d      	beq.n	801ef78 <_strtod_l+0x864>
 801f03c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f03e:	2b00      	cmp	r3, #0
 801f040:	d01c      	beq.n	801f07c <_strtod_l+0x968>
 801f042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f044:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f046:	4213      	tst	r3, r2
 801f048:	d0e3      	beq.n	801f012 <_strtod_l+0x8fe>
 801f04a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f04c:	0030      	movs	r0, r6
 801f04e:	0039      	movs	r1, r7
 801f050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f052:	2b00      	cmp	r3, #0
 801f054:	d016      	beq.n	801f084 <_strtod_l+0x970>
 801f056:	f7ff fb45 	bl	801e6e4 <sulp>
 801f05a:	0002      	movs	r2, r0
 801f05c:	000b      	movs	r3, r1
 801f05e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f060:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f062:	f7e2 fb43 	bl	80016ec <__aeabi_dadd>
 801f066:	0006      	movs	r6, r0
 801f068:	000f      	movs	r7, r1
 801f06a:	e7d2      	b.n	801f012 <_strtod_l+0x8fe>
 801f06c:	2601      	movs	r6, #1
 801f06e:	4a92      	ldr	r2, [pc, #584]	@ (801f2b8 <_strtod_l+0xba4>)
 801f070:	4276      	negs	r6, r6
 801f072:	189b      	adds	r3, r3, r2
 801f074:	4a91      	ldr	r2, [pc, #580]	@ (801f2bc <_strtod_l+0xba8>)
 801f076:	431a      	orrs	r2, r3
 801f078:	0017      	movs	r7, r2
 801f07a:	e7ca      	b.n	801f012 <_strtod_l+0x8fe>
 801f07c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f07e:	4233      	tst	r3, r6
 801f080:	d0c7      	beq.n	801f012 <_strtod_l+0x8fe>
 801f082:	e7e2      	b.n	801f04a <_strtod_l+0x936>
 801f084:	f7ff fb2e 	bl	801e6e4 <sulp>
 801f088:	0002      	movs	r2, r0
 801f08a:	000b      	movs	r3, r1
 801f08c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f08e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f090:	f7e3 fd9c 	bl	8002bcc <__aeabi_dsub>
 801f094:	2200      	movs	r2, #0
 801f096:	2300      	movs	r3, #0
 801f098:	0006      	movs	r6, r0
 801f09a:	000f      	movs	r7, r1
 801f09c:	f7e1 fa08 	bl	80004b0 <__aeabi_dcmpeq>
 801f0a0:	2800      	cmp	r0, #0
 801f0a2:	d0b6      	beq.n	801f012 <_strtod_l+0x8fe>
 801f0a4:	e60c      	b.n	801ecc0 <_strtod_l+0x5ac>
 801f0a6:	9907      	ldr	r1, [sp, #28]
 801f0a8:	9806      	ldr	r0, [sp, #24]
 801f0aa:	f003 f8df 	bl	802226c <__ratio>
 801f0ae:	2380      	movs	r3, #128	@ 0x80
 801f0b0:	2200      	movs	r2, #0
 801f0b2:	05db      	lsls	r3, r3, #23
 801f0b4:	0004      	movs	r4, r0
 801f0b6:	000d      	movs	r5, r1
 801f0b8:	f7e1 fa0a 	bl	80004d0 <__aeabi_dcmple>
 801f0bc:	2800      	cmp	r0, #0
 801f0be:	d06c      	beq.n	801f19a <_strtod_l+0xa86>
 801f0c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d177      	bne.n	801f1b6 <_strtod_l+0xaa2>
 801f0c6:	2e00      	cmp	r6, #0
 801f0c8:	d157      	bne.n	801f17a <_strtod_l+0xa66>
 801f0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0cc:	031b      	lsls	r3, r3, #12
 801f0ce:	d15a      	bne.n	801f186 <_strtod_l+0xa72>
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	0020      	movs	r0, r4
 801f0d4:	0029      	movs	r1, r5
 801f0d6:	4b7a      	ldr	r3, [pc, #488]	@ (801f2c0 <_strtod_l+0xbac>)
 801f0d8:	f7e1 f9f0 	bl	80004bc <__aeabi_dcmplt>
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	d159      	bne.n	801f194 <_strtod_l+0xa80>
 801f0e0:	0020      	movs	r0, r4
 801f0e2:	0029      	movs	r1, r5
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	4b77      	ldr	r3, [pc, #476]	@ (801f2c4 <_strtod_l+0xbb0>)
 801f0e8:	f7e3 faa8 	bl	800263c <__aeabi_dmul>
 801f0ec:	0004      	movs	r4, r0
 801f0ee:	000d      	movs	r5, r1
 801f0f0:	2380      	movs	r3, #128	@ 0x80
 801f0f2:	061b      	lsls	r3, r3, #24
 801f0f4:	18eb      	adds	r3, r5, r3
 801f0f6:	940a      	str	r4, [sp, #40]	@ 0x28
 801f0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f0fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0fe:	9214      	str	r2, [sp, #80]	@ 0x50
 801f100:	9315      	str	r3, [sp, #84]	@ 0x54
 801f102:	4a71      	ldr	r2, [pc, #452]	@ (801f2c8 <_strtod_l+0xbb4>)
 801f104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f106:	4013      	ands	r3, r2
 801f108:	9316      	str	r3, [sp, #88]	@ 0x58
 801f10a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f10c:	4b6f      	ldr	r3, [pc, #444]	@ (801f2cc <_strtod_l+0xbb8>)
 801f10e:	429a      	cmp	r2, r3
 801f110:	d000      	beq.n	801f114 <_strtod_l+0xa00>
 801f112:	e087      	b.n	801f224 <_strtod_l+0xb10>
 801f114:	4a6e      	ldr	r2, [pc, #440]	@ (801f2d0 <_strtod_l+0xbbc>)
 801f116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f118:	4694      	mov	ip, r2
 801f11a:	4463      	add	r3, ip
 801f11c:	001f      	movs	r7, r3
 801f11e:	0030      	movs	r0, r6
 801f120:	0019      	movs	r1, r3
 801f122:	f002 ffd7 	bl	80220d4 <__ulp>
 801f126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f12a:	f7e3 fa87 	bl	800263c <__aeabi_dmul>
 801f12e:	0032      	movs	r2, r6
 801f130:	003b      	movs	r3, r7
 801f132:	f7e2 fadb 	bl	80016ec <__aeabi_dadd>
 801f136:	4a64      	ldr	r2, [pc, #400]	@ (801f2c8 <_strtod_l+0xbb4>)
 801f138:	4b66      	ldr	r3, [pc, #408]	@ (801f2d4 <_strtod_l+0xbc0>)
 801f13a:	0006      	movs	r6, r0
 801f13c:	400a      	ands	r2, r1
 801f13e:	429a      	cmp	r2, r3
 801f140:	d940      	bls.n	801f1c4 <_strtod_l+0xab0>
 801f142:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f144:	4a64      	ldr	r2, [pc, #400]	@ (801f2d8 <_strtod_l+0xbc4>)
 801f146:	4293      	cmp	r3, r2
 801f148:	d103      	bne.n	801f152 <_strtod_l+0xa3e>
 801f14a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f14c:	3301      	adds	r3, #1
 801f14e:	d100      	bne.n	801f152 <_strtod_l+0xa3e>
 801f150:	e51a      	b.n	801eb88 <_strtod_l+0x474>
 801f152:	2601      	movs	r6, #1
 801f154:	4f60      	ldr	r7, [pc, #384]	@ (801f2d8 <_strtod_l+0xbc4>)
 801f156:	4276      	negs	r6, r6
 801f158:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f15a:	9805      	ldr	r0, [sp, #20]
 801f15c:	f002 fc6e 	bl	8021a3c <_Bfree>
 801f160:	9908      	ldr	r1, [sp, #32]
 801f162:	9805      	ldr	r0, [sp, #20]
 801f164:	f002 fc6a 	bl	8021a3c <_Bfree>
 801f168:	9907      	ldr	r1, [sp, #28]
 801f16a:	9805      	ldr	r0, [sp, #20]
 801f16c:	f002 fc66 	bl	8021a3c <_Bfree>
 801f170:	9906      	ldr	r1, [sp, #24]
 801f172:	9805      	ldr	r0, [sp, #20]
 801f174:	f002 fc62 	bl	8021a3c <_Bfree>
 801f178:	e617      	b.n	801edaa <_strtod_l+0x696>
 801f17a:	2e01      	cmp	r6, #1
 801f17c:	d103      	bne.n	801f186 <_strtod_l+0xa72>
 801f17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f180:	2b00      	cmp	r3, #0
 801f182:	d100      	bne.n	801f186 <_strtod_l+0xa72>
 801f184:	e59c      	b.n	801ecc0 <_strtod_l+0x5ac>
 801f186:	2300      	movs	r3, #0
 801f188:	4c54      	ldr	r4, [pc, #336]	@ (801f2dc <_strtod_l+0xbc8>)
 801f18a:	4d4d      	ldr	r5, [pc, #308]	@ (801f2c0 <_strtod_l+0xbac>)
 801f18c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f18e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f190:	2400      	movs	r4, #0
 801f192:	e7b2      	b.n	801f0fa <_strtod_l+0x9e6>
 801f194:	2400      	movs	r4, #0
 801f196:	4d4b      	ldr	r5, [pc, #300]	@ (801f2c4 <_strtod_l+0xbb0>)
 801f198:	e7aa      	b.n	801f0f0 <_strtod_l+0x9dc>
 801f19a:	0020      	movs	r0, r4
 801f19c:	0029      	movs	r1, r5
 801f19e:	4b49      	ldr	r3, [pc, #292]	@ (801f2c4 <_strtod_l+0xbb0>)
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	f7e3 fa4b 	bl	800263c <__aeabi_dmul>
 801f1a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1a8:	0004      	movs	r4, r0
 801f1aa:	000d      	movs	r5, r1
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d09f      	beq.n	801f0f0 <_strtod_l+0x9dc>
 801f1b0:	940a      	str	r4, [sp, #40]	@ 0x28
 801f1b2:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f1b4:	e7a1      	b.n	801f0fa <_strtod_l+0x9e6>
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	4c41      	ldr	r4, [pc, #260]	@ (801f2c0 <_strtod_l+0xbac>)
 801f1ba:	0025      	movs	r5, r4
 801f1bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801f1be:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f1c0:	001c      	movs	r4, r3
 801f1c2:	e79a      	b.n	801f0fa <_strtod_l+0x9e6>
 801f1c4:	23d4      	movs	r3, #212	@ 0xd4
 801f1c6:	049b      	lsls	r3, r3, #18
 801f1c8:	18cf      	adds	r7, r1, r3
 801f1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1cc:	9710      	str	r7, [sp, #64]	@ 0x40
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d1c2      	bne.n	801f158 <_strtod_l+0xa44>
 801f1d2:	4b3d      	ldr	r3, [pc, #244]	@ (801f2c8 <_strtod_l+0xbb4>)
 801f1d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1d6:	403b      	ands	r3, r7
 801f1d8:	429a      	cmp	r2, r3
 801f1da:	d1bd      	bne.n	801f158 <_strtod_l+0xa44>
 801f1dc:	0020      	movs	r0, r4
 801f1de:	0029      	movs	r1, r5
 801f1e0:	f7e1 fa52 	bl	8000688 <__aeabi_d2lz>
 801f1e4:	f7e1 fa8a 	bl	80006fc <__aeabi_l2d>
 801f1e8:	0002      	movs	r2, r0
 801f1ea:	000b      	movs	r3, r1
 801f1ec:	0020      	movs	r0, r4
 801f1ee:	0029      	movs	r1, r5
 801f1f0:	f7e3 fcec 	bl	8002bcc <__aeabi_dsub>
 801f1f4:	033c      	lsls	r4, r7, #12
 801f1f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1f8:	0b24      	lsrs	r4, r4, #12
 801f1fa:	4334      	orrs	r4, r6
 801f1fc:	900e      	str	r0, [sp, #56]	@ 0x38
 801f1fe:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f200:	4a37      	ldr	r2, [pc, #220]	@ (801f2e0 <_strtod_l+0xbcc>)
 801f202:	431c      	orrs	r4, r3
 801f204:	d052      	beq.n	801f2ac <_strtod_l+0xb98>
 801f206:	4b37      	ldr	r3, [pc, #220]	@ (801f2e4 <_strtod_l+0xbd0>)
 801f208:	f7e1 f958 	bl	80004bc <__aeabi_dcmplt>
 801f20c:	2800      	cmp	r0, #0
 801f20e:	d000      	beq.n	801f212 <_strtod_l+0xafe>
 801f210:	e4c3      	b.n	801eb9a <_strtod_l+0x486>
 801f212:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f214:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f216:	4a34      	ldr	r2, [pc, #208]	@ (801f2e8 <_strtod_l+0xbd4>)
 801f218:	4b2a      	ldr	r3, [pc, #168]	@ (801f2c4 <_strtod_l+0xbb0>)
 801f21a:	f7e1 f963 	bl	80004e4 <__aeabi_dcmpgt>
 801f21e:	2800      	cmp	r0, #0
 801f220:	d09a      	beq.n	801f158 <_strtod_l+0xa44>
 801f222:	e4ba      	b.n	801eb9a <_strtod_l+0x486>
 801f224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f226:	2b00      	cmp	r3, #0
 801f228:	d02a      	beq.n	801f280 <_strtod_l+0xb6c>
 801f22a:	23d4      	movs	r3, #212	@ 0xd4
 801f22c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f22e:	04db      	lsls	r3, r3, #19
 801f230:	429a      	cmp	r2, r3
 801f232:	d825      	bhi.n	801f280 <_strtod_l+0xb6c>
 801f234:	0020      	movs	r0, r4
 801f236:	0029      	movs	r1, r5
 801f238:	4a2c      	ldr	r2, [pc, #176]	@ (801f2ec <_strtod_l+0xbd8>)
 801f23a:	4b2d      	ldr	r3, [pc, #180]	@ (801f2f0 <_strtod_l+0xbdc>)
 801f23c:	f7e1 f948 	bl	80004d0 <__aeabi_dcmple>
 801f240:	2800      	cmp	r0, #0
 801f242:	d016      	beq.n	801f272 <_strtod_l+0xb5e>
 801f244:	0020      	movs	r0, r4
 801f246:	0029      	movs	r1, r5
 801f248:	f7e1 fa00 	bl	800064c <__aeabi_d2uiz>
 801f24c:	2800      	cmp	r0, #0
 801f24e:	d100      	bne.n	801f252 <_strtod_l+0xb3e>
 801f250:	3001      	adds	r0, #1
 801f252:	f7e4 f8e3 	bl	800341c <__aeabi_ui2d>
 801f256:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f258:	0004      	movs	r4, r0
 801f25a:	000d      	movs	r5, r1
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	d122      	bne.n	801f2a6 <_strtod_l+0xb92>
 801f260:	2380      	movs	r3, #128	@ 0x80
 801f262:	061b      	lsls	r3, r3, #24
 801f264:	18cb      	adds	r3, r1, r3
 801f266:	9018      	str	r0, [sp, #96]	@ 0x60
 801f268:	9319      	str	r3, [sp, #100]	@ 0x64
 801f26a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f26c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f26e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f270:	9315      	str	r3, [sp, #84]	@ 0x54
 801f272:	22d6      	movs	r2, #214	@ 0xd6
 801f274:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f276:	04d2      	lsls	r2, r2, #19
 801f278:	189b      	adds	r3, r3, r2
 801f27a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f27c:	1a9b      	subs	r3, r3, r2
 801f27e:	9315      	str	r3, [sp, #84]	@ 0x54
 801f280:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f282:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f284:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f286:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f288:	f002 ff24 	bl	80220d4 <__ulp>
 801f28c:	0002      	movs	r2, r0
 801f28e:	000b      	movs	r3, r1
 801f290:	0030      	movs	r0, r6
 801f292:	0039      	movs	r1, r7
 801f294:	f7e3 f9d2 	bl	800263c <__aeabi_dmul>
 801f298:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f29a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f29c:	f7e2 fa26 	bl	80016ec <__aeabi_dadd>
 801f2a0:	0006      	movs	r6, r0
 801f2a2:	000f      	movs	r7, r1
 801f2a4:	e791      	b.n	801f1ca <_strtod_l+0xab6>
 801f2a6:	9418      	str	r4, [sp, #96]	@ 0x60
 801f2a8:	9519      	str	r5, [sp, #100]	@ 0x64
 801f2aa:	e7de      	b.n	801f26a <_strtod_l+0xb56>
 801f2ac:	4b11      	ldr	r3, [pc, #68]	@ (801f2f4 <_strtod_l+0xbe0>)
 801f2ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f2b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f2b2:	f7e1 f903 	bl	80004bc <__aeabi_dcmplt>
 801f2b6:	e7b2      	b.n	801f21e <_strtod_l+0xb0a>
 801f2b8:	fff00000 	.word	0xfff00000
 801f2bc:	000fffff 	.word	0x000fffff
 801f2c0:	3ff00000 	.word	0x3ff00000
 801f2c4:	3fe00000 	.word	0x3fe00000
 801f2c8:	7ff00000 	.word	0x7ff00000
 801f2cc:	7fe00000 	.word	0x7fe00000
 801f2d0:	fcb00000 	.word	0xfcb00000
 801f2d4:	7c9fffff 	.word	0x7c9fffff
 801f2d8:	7fefffff 	.word	0x7fefffff
 801f2dc:	bff00000 	.word	0xbff00000
 801f2e0:	94a03595 	.word	0x94a03595
 801f2e4:	3fdfffff 	.word	0x3fdfffff
 801f2e8:	35afe535 	.word	0x35afe535
 801f2ec:	ffc00000 	.word	0xffc00000
 801f2f0:	41dfffff 	.word	0x41dfffff
 801f2f4:	3fcfffff 	.word	0x3fcfffff

0801f2f8 <strtod>:
 801f2f8:	b510      	push	{r4, lr}
 801f2fa:	4c04      	ldr	r4, [pc, #16]	@ (801f30c <strtod+0x14>)
 801f2fc:	000a      	movs	r2, r1
 801f2fe:	0001      	movs	r1, r0
 801f300:	4b03      	ldr	r3, [pc, #12]	@ (801f310 <strtod+0x18>)
 801f302:	6820      	ldr	r0, [r4, #0]
 801f304:	f7ff fa06 	bl	801e714 <_strtod_l>
 801f308:	bd10      	pop	{r4, pc}
 801f30a:	46c0      	nop			@ (mov r8, r8)
 801f30c:	200003d4 	.word	0x200003d4
 801f310:	20000268 	.word	0x20000268

0801f314 <_strtol_l.constprop.0>:
 801f314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f316:	b085      	sub	sp, #20
 801f318:	0017      	movs	r7, r2
 801f31a:	001e      	movs	r6, r3
 801f31c:	9003      	str	r0, [sp, #12]
 801f31e:	9101      	str	r1, [sp, #4]
 801f320:	2b24      	cmp	r3, #36	@ 0x24
 801f322:	d844      	bhi.n	801f3ae <_strtol_l.constprop.0+0x9a>
 801f324:	000c      	movs	r4, r1
 801f326:	2b01      	cmp	r3, #1
 801f328:	d041      	beq.n	801f3ae <_strtol_l.constprop.0+0x9a>
 801f32a:	4b3d      	ldr	r3, [pc, #244]	@ (801f420 <_strtol_l.constprop.0+0x10c>)
 801f32c:	2208      	movs	r2, #8
 801f32e:	469c      	mov	ip, r3
 801f330:	0023      	movs	r3, r4
 801f332:	4661      	mov	r1, ip
 801f334:	781d      	ldrb	r5, [r3, #0]
 801f336:	3401      	adds	r4, #1
 801f338:	5d48      	ldrb	r0, [r1, r5]
 801f33a:	0001      	movs	r1, r0
 801f33c:	4011      	ands	r1, r2
 801f33e:	4210      	tst	r0, r2
 801f340:	d1f6      	bne.n	801f330 <_strtol_l.constprop.0+0x1c>
 801f342:	2d2d      	cmp	r5, #45	@ 0x2d
 801f344:	d13a      	bne.n	801f3bc <_strtol_l.constprop.0+0xa8>
 801f346:	7825      	ldrb	r5, [r4, #0]
 801f348:	1c9c      	adds	r4, r3, #2
 801f34a:	2301      	movs	r3, #1
 801f34c:	9300      	str	r3, [sp, #0]
 801f34e:	2210      	movs	r2, #16
 801f350:	0033      	movs	r3, r6
 801f352:	4393      	bics	r3, r2
 801f354:	d109      	bne.n	801f36a <_strtol_l.constprop.0+0x56>
 801f356:	2d30      	cmp	r5, #48	@ 0x30
 801f358:	d136      	bne.n	801f3c8 <_strtol_l.constprop.0+0xb4>
 801f35a:	2120      	movs	r1, #32
 801f35c:	7823      	ldrb	r3, [r4, #0]
 801f35e:	438b      	bics	r3, r1
 801f360:	2b58      	cmp	r3, #88	@ 0x58
 801f362:	d131      	bne.n	801f3c8 <_strtol_l.constprop.0+0xb4>
 801f364:	0016      	movs	r6, r2
 801f366:	7865      	ldrb	r5, [r4, #1]
 801f368:	3402      	adds	r4, #2
 801f36a:	4a2e      	ldr	r2, [pc, #184]	@ (801f424 <_strtol_l.constprop.0+0x110>)
 801f36c:	9b00      	ldr	r3, [sp, #0]
 801f36e:	4694      	mov	ip, r2
 801f370:	4463      	add	r3, ip
 801f372:	0031      	movs	r1, r6
 801f374:	0018      	movs	r0, r3
 801f376:	9302      	str	r3, [sp, #8]
 801f378:	f7e0 ff9a 	bl	80002b0 <__aeabi_uidivmod>
 801f37c:	2200      	movs	r2, #0
 801f37e:	4684      	mov	ip, r0
 801f380:	0010      	movs	r0, r2
 801f382:	002b      	movs	r3, r5
 801f384:	3b30      	subs	r3, #48	@ 0x30
 801f386:	2b09      	cmp	r3, #9
 801f388:	d825      	bhi.n	801f3d6 <_strtol_l.constprop.0+0xc2>
 801f38a:	001d      	movs	r5, r3
 801f38c:	42ae      	cmp	r6, r5
 801f38e:	dd31      	ble.n	801f3f4 <_strtol_l.constprop.0+0xe0>
 801f390:	1c53      	adds	r3, r2, #1
 801f392:	d009      	beq.n	801f3a8 <_strtol_l.constprop.0+0x94>
 801f394:	2201      	movs	r2, #1
 801f396:	4252      	negs	r2, r2
 801f398:	4584      	cmp	ip, r0
 801f39a:	d305      	bcc.n	801f3a8 <_strtol_l.constprop.0+0x94>
 801f39c:	d101      	bne.n	801f3a2 <_strtol_l.constprop.0+0x8e>
 801f39e:	42a9      	cmp	r1, r5
 801f3a0:	db25      	blt.n	801f3ee <_strtol_l.constprop.0+0xda>
 801f3a2:	2201      	movs	r2, #1
 801f3a4:	4370      	muls	r0, r6
 801f3a6:	1828      	adds	r0, r5, r0
 801f3a8:	7825      	ldrb	r5, [r4, #0]
 801f3aa:	3401      	adds	r4, #1
 801f3ac:	e7e9      	b.n	801f382 <_strtol_l.constprop.0+0x6e>
 801f3ae:	f000 ffc5 	bl	802033c <__errno>
 801f3b2:	2316      	movs	r3, #22
 801f3b4:	6003      	str	r3, [r0, #0]
 801f3b6:	2000      	movs	r0, #0
 801f3b8:	b005      	add	sp, #20
 801f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3bc:	9100      	str	r1, [sp, #0]
 801f3be:	2d2b      	cmp	r5, #43	@ 0x2b
 801f3c0:	d1c5      	bne.n	801f34e <_strtol_l.constprop.0+0x3a>
 801f3c2:	7825      	ldrb	r5, [r4, #0]
 801f3c4:	1c9c      	adds	r4, r3, #2
 801f3c6:	e7c2      	b.n	801f34e <_strtol_l.constprop.0+0x3a>
 801f3c8:	2e00      	cmp	r6, #0
 801f3ca:	d1ce      	bne.n	801f36a <_strtol_l.constprop.0+0x56>
 801f3cc:	3608      	adds	r6, #8
 801f3ce:	2d30      	cmp	r5, #48	@ 0x30
 801f3d0:	d0cb      	beq.n	801f36a <_strtol_l.constprop.0+0x56>
 801f3d2:	3602      	adds	r6, #2
 801f3d4:	e7c9      	b.n	801f36a <_strtol_l.constprop.0+0x56>
 801f3d6:	002b      	movs	r3, r5
 801f3d8:	3b41      	subs	r3, #65	@ 0x41
 801f3da:	2b19      	cmp	r3, #25
 801f3dc:	d801      	bhi.n	801f3e2 <_strtol_l.constprop.0+0xce>
 801f3de:	3d37      	subs	r5, #55	@ 0x37
 801f3e0:	e7d4      	b.n	801f38c <_strtol_l.constprop.0+0x78>
 801f3e2:	002b      	movs	r3, r5
 801f3e4:	3b61      	subs	r3, #97	@ 0x61
 801f3e6:	2b19      	cmp	r3, #25
 801f3e8:	d804      	bhi.n	801f3f4 <_strtol_l.constprop.0+0xe0>
 801f3ea:	3d57      	subs	r5, #87	@ 0x57
 801f3ec:	e7ce      	b.n	801f38c <_strtol_l.constprop.0+0x78>
 801f3ee:	2201      	movs	r2, #1
 801f3f0:	4252      	negs	r2, r2
 801f3f2:	e7d9      	b.n	801f3a8 <_strtol_l.constprop.0+0x94>
 801f3f4:	1c53      	adds	r3, r2, #1
 801f3f6:	d108      	bne.n	801f40a <_strtol_l.constprop.0+0xf6>
 801f3f8:	2322      	movs	r3, #34	@ 0x22
 801f3fa:	9a03      	ldr	r2, [sp, #12]
 801f3fc:	9802      	ldr	r0, [sp, #8]
 801f3fe:	6013      	str	r3, [r2, #0]
 801f400:	2f00      	cmp	r7, #0
 801f402:	d0d9      	beq.n	801f3b8 <_strtol_l.constprop.0+0xa4>
 801f404:	1e63      	subs	r3, r4, #1
 801f406:	9301      	str	r3, [sp, #4]
 801f408:	e007      	b.n	801f41a <_strtol_l.constprop.0+0x106>
 801f40a:	9b00      	ldr	r3, [sp, #0]
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d000      	beq.n	801f412 <_strtol_l.constprop.0+0xfe>
 801f410:	4240      	negs	r0, r0
 801f412:	2f00      	cmp	r7, #0
 801f414:	d0d0      	beq.n	801f3b8 <_strtol_l.constprop.0+0xa4>
 801f416:	2a00      	cmp	r2, #0
 801f418:	d1f4      	bne.n	801f404 <_strtol_l.constprop.0+0xf0>
 801f41a:	9b01      	ldr	r3, [sp, #4]
 801f41c:	603b      	str	r3, [r7, #0]
 801f41e:	e7cb      	b.n	801f3b8 <_strtol_l.constprop.0+0xa4>
 801f420:	08025c11 	.word	0x08025c11
 801f424:	7fffffff 	.word	0x7fffffff

0801f428 <strtol>:
 801f428:	b510      	push	{r4, lr}
 801f42a:	4c04      	ldr	r4, [pc, #16]	@ (801f43c <strtol+0x14>)
 801f42c:	0013      	movs	r3, r2
 801f42e:	000a      	movs	r2, r1
 801f430:	0001      	movs	r1, r0
 801f432:	6820      	ldr	r0, [r4, #0]
 801f434:	f7ff ff6e 	bl	801f314 <_strtol_l.constprop.0>
 801f438:	bd10      	pop	{r4, pc}
 801f43a:	46c0      	nop			@ (mov r8, r8)
 801f43c:	200003d4 	.word	0x200003d4

0801f440 <__cvt>:
 801f440:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f442:	001f      	movs	r7, r3
 801f444:	2300      	movs	r3, #0
 801f446:	0016      	movs	r6, r2
 801f448:	b08b      	sub	sp, #44	@ 0x2c
 801f44a:	429f      	cmp	r7, r3
 801f44c:	da04      	bge.n	801f458 <__cvt+0x18>
 801f44e:	2180      	movs	r1, #128	@ 0x80
 801f450:	0609      	lsls	r1, r1, #24
 801f452:	187b      	adds	r3, r7, r1
 801f454:	001f      	movs	r7, r3
 801f456:	232d      	movs	r3, #45	@ 0x2d
 801f458:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f45a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f45c:	7013      	strb	r3, [r2, #0]
 801f45e:	2320      	movs	r3, #32
 801f460:	2203      	movs	r2, #3
 801f462:	439d      	bics	r5, r3
 801f464:	2d46      	cmp	r5, #70	@ 0x46
 801f466:	d007      	beq.n	801f478 <__cvt+0x38>
 801f468:	002b      	movs	r3, r5
 801f46a:	3b45      	subs	r3, #69	@ 0x45
 801f46c:	4259      	negs	r1, r3
 801f46e:	414b      	adcs	r3, r1
 801f470:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f472:	3a01      	subs	r2, #1
 801f474:	18cb      	adds	r3, r1, r3
 801f476:	9310      	str	r3, [sp, #64]	@ 0x40
 801f478:	ab09      	add	r3, sp, #36	@ 0x24
 801f47a:	9304      	str	r3, [sp, #16]
 801f47c:	ab08      	add	r3, sp, #32
 801f47e:	9303      	str	r3, [sp, #12]
 801f480:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f482:	9200      	str	r2, [sp, #0]
 801f484:	9302      	str	r3, [sp, #8]
 801f486:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f488:	0032      	movs	r2, r6
 801f48a:	9301      	str	r3, [sp, #4]
 801f48c:	003b      	movs	r3, r7
 801f48e:	f001 f82b 	bl	80204e8 <_dtoa_r>
 801f492:	0004      	movs	r4, r0
 801f494:	2d47      	cmp	r5, #71	@ 0x47
 801f496:	d11b      	bne.n	801f4d0 <__cvt+0x90>
 801f498:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f49a:	07db      	lsls	r3, r3, #31
 801f49c:	d511      	bpl.n	801f4c2 <__cvt+0x82>
 801f49e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f4a0:	18c3      	adds	r3, r0, r3
 801f4a2:	9307      	str	r3, [sp, #28]
 801f4a4:	2200      	movs	r2, #0
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	0030      	movs	r0, r6
 801f4aa:	0039      	movs	r1, r7
 801f4ac:	f7e1 f800 	bl	80004b0 <__aeabi_dcmpeq>
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	d001      	beq.n	801f4b8 <__cvt+0x78>
 801f4b4:	9b07      	ldr	r3, [sp, #28]
 801f4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4b8:	2230      	movs	r2, #48	@ 0x30
 801f4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4bc:	9907      	ldr	r1, [sp, #28]
 801f4be:	428b      	cmp	r3, r1
 801f4c0:	d320      	bcc.n	801f504 <__cvt+0xc4>
 801f4c2:	0020      	movs	r0, r4
 801f4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f4c8:	1b1b      	subs	r3, r3, r4
 801f4ca:	6013      	str	r3, [r2, #0]
 801f4cc:	b00b      	add	sp, #44	@ 0x2c
 801f4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f4d2:	18c3      	adds	r3, r0, r3
 801f4d4:	9307      	str	r3, [sp, #28]
 801f4d6:	2d46      	cmp	r5, #70	@ 0x46
 801f4d8:	d1e4      	bne.n	801f4a4 <__cvt+0x64>
 801f4da:	7803      	ldrb	r3, [r0, #0]
 801f4dc:	2b30      	cmp	r3, #48	@ 0x30
 801f4de:	d10c      	bne.n	801f4fa <__cvt+0xba>
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	2300      	movs	r3, #0
 801f4e4:	0030      	movs	r0, r6
 801f4e6:	0039      	movs	r1, r7
 801f4e8:	f7e0 ffe2 	bl	80004b0 <__aeabi_dcmpeq>
 801f4ec:	2800      	cmp	r0, #0
 801f4ee:	d104      	bne.n	801f4fa <__cvt+0xba>
 801f4f0:	2301      	movs	r3, #1
 801f4f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f4f4:	1a9b      	subs	r3, r3, r2
 801f4f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f4f8:	6013      	str	r3, [r2, #0]
 801f4fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f4fc:	9a07      	ldr	r2, [sp, #28]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	18d3      	adds	r3, r2, r3
 801f502:	e7ce      	b.n	801f4a2 <__cvt+0x62>
 801f504:	1c59      	adds	r1, r3, #1
 801f506:	9109      	str	r1, [sp, #36]	@ 0x24
 801f508:	701a      	strb	r2, [r3, #0]
 801f50a:	e7d6      	b.n	801f4ba <__cvt+0x7a>

0801f50c <__exponent>:
 801f50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f50e:	232b      	movs	r3, #43	@ 0x2b
 801f510:	0005      	movs	r5, r0
 801f512:	000c      	movs	r4, r1
 801f514:	b085      	sub	sp, #20
 801f516:	7002      	strb	r2, [r0, #0]
 801f518:	2900      	cmp	r1, #0
 801f51a:	da01      	bge.n	801f520 <__exponent+0x14>
 801f51c:	424c      	negs	r4, r1
 801f51e:	3302      	adds	r3, #2
 801f520:	706b      	strb	r3, [r5, #1]
 801f522:	2c09      	cmp	r4, #9
 801f524:	dd2c      	ble.n	801f580 <__exponent+0x74>
 801f526:	ab02      	add	r3, sp, #8
 801f528:	1dde      	adds	r6, r3, #7
 801f52a:	0020      	movs	r0, r4
 801f52c:	210a      	movs	r1, #10
 801f52e:	f7e0 ffa9 	bl	8000484 <__aeabi_idivmod>
 801f532:	0037      	movs	r7, r6
 801f534:	3130      	adds	r1, #48	@ 0x30
 801f536:	3e01      	subs	r6, #1
 801f538:	0020      	movs	r0, r4
 801f53a:	7031      	strb	r1, [r6, #0]
 801f53c:	210a      	movs	r1, #10
 801f53e:	9401      	str	r4, [sp, #4]
 801f540:	f7e0 feba 	bl	80002b8 <__divsi3>
 801f544:	9b01      	ldr	r3, [sp, #4]
 801f546:	0004      	movs	r4, r0
 801f548:	2b63      	cmp	r3, #99	@ 0x63
 801f54a:	dcee      	bgt.n	801f52a <__exponent+0x1e>
 801f54c:	1eba      	subs	r2, r7, #2
 801f54e:	1ca8      	adds	r0, r5, #2
 801f550:	0001      	movs	r1, r0
 801f552:	0013      	movs	r3, r2
 801f554:	3430      	adds	r4, #48	@ 0x30
 801f556:	7014      	strb	r4, [r2, #0]
 801f558:	ac02      	add	r4, sp, #8
 801f55a:	3407      	adds	r4, #7
 801f55c:	429c      	cmp	r4, r3
 801f55e:	d80a      	bhi.n	801f576 <__exponent+0x6a>
 801f560:	2300      	movs	r3, #0
 801f562:	42a2      	cmp	r2, r4
 801f564:	d803      	bhi.n	801f56e <__exponent+0x62>
 801f566:	3309      	adds	r3, #9
 801f568:	aa02      	add	r2, sp, #8
 801f56a:	189b      	adds	r3, r3, r2
 801f56c:	1bdb      	subs	r3, r3, r7
 801f56e:	18c0      	adds	r0, r0, r3
 801f570:	1b40      	subs	r0, r0, r5
 801f572:	b005      	add	sp, #20
 801f574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f576:	781c      	ldrb	r4, [r3, #0]
 801f578:	3301      	adds	r3, #1
 801f57a:	700c      	strb	r4, [r1, #0]
 801f57c:	3101      	adds	r1, #1
 801f57e:	e7eb      	b.n	801f558 <__exponent+0x4c>
 801f580:	2330      	movs	r3, #48	@ 0x30
 801f582:	18e4      	adds	r4, r4, r3
 801f584:	70ab      	strb	r3, [r5, #2]
 801f586:	1d28      	adds	r0, r5, #4
 801f588:	70ec      	strb	r4, [r5, #3]
 801f58a:	e7f1      	b.n	801f570 <__exponent+0x64>

0801f58c <_printf_float>:
 801f58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f58e:	b097      	sub	sp, #92	@ 0x5c
 801f590:	000d      	movs	r5, r1
 801f592:	920a      	str	r2, [sp, #40]	@ 0x28
 801f594:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f596:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f598:	9009      	str	r0, [sp, #36]	@ 0x24
 801f59a:	f000 fe7d 	bl	8020298 <_localeconv_r>
 801f59e:	6803      	ldr	r3, [r0, #0]
 801f5a0:	0018      	movs	r0, r3
 801f5a2:	930d      	str	r3, [sp, #52]	@ 0x34
 801f5a4:	f7e0 fde2 	bl	800016c <strlen>
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f5ac:	9314      	str	r3, [sp, #80]	@ 0x50
 801f5ae:	7e2b      	ldrb	r3, [r5, #24]
 801f5b0:	2207      	movs	r2, #7
 801f5b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f5b4:	682b      	ldr	r3, [r5, #0]
 801f5b6:	930e      	str	r3, [sp, #56]	@ 0x38
 801f5b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f5ba:	6823      	ldr	r3, [r4, #0]
 801f5bc:	05c9      	lsls	r1, r1, #23
 801f5be:	d545      	bpl.n	801f64c <_printf_float+0xc0>
 801f5c0:	189b      	adds	r3, r3, r2
 801f5c2:	4393      	bics	r3, r2
 801f5c4:	001a      	movs	r2, r3
 801f5c6:	3208      	adds	r2, #8
 801f5c8:	6022      	str	r2, [r4, #0]
 801f5ca:	2201      	movs	r2, #1
 801f5cc:	681e      	ldr	r6, [r3, #0]
 801f5ce:	685f      	ldr	r7, [r3, #4]
 801f5d0:	007b      	lsls	r3, r7, #1
 801f5d2:	085b      	lsrs	r3, r3, #1
 801f5d4:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5d6:	9610      	str	r6, [sp, #64]	@ 0x40
 801f5d8:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f5da:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f5dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f5de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f5e0:	4ba7      	ldr	r3, [pc, #668]	@ (801f880 <_printf_float+0x2f4>)
 801f5e2:	4252      	negs	r2, r2
 801f5e4:	f7e3 fe8e 	bl	8003304 <__aeabi_dcmpun>
 801f5e8:	2800      	cmp	r0, #0
 801f5ea:	d131      	bne.n	801f650 <_printf_float+0xc4>
 801f5ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f5ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f5f0:	2201      	movs	r2, #1
 801f5f2:	4ba3      	ldr	r3, [pc, #652]	@ (801f880 <_printf_float+0x2f4>)
 801f5f4:	4252      	negs	r2, r2
 801f5f6:	f7e0 ff6b 	bl	80004d0 <__aeabi_dcmple>
 801f5fa:	2800      	cmp	r0, #0
 801f5fc:	d128      	bne.n	801f650 <_printf_float+0xc4>
 801f5fe:	2200      	movs	r2, #0
 801f600:	2300      	movs	r3, #0
 801f602:	0030      	movs	r0, r6
 801f604:	0039      	movs	r1, r7
 801f606:	f7e0 ff59 	bl	80004bc <__aeabi_dcmplt>
 801f60a:	2800      	cmp	r0, #0
 801f60c:	d003      	beq.n	801f616 <_printf_float+0x8a>
 801f60e:	002b      	movs	r3, r5
 801f610:	222d      	movs	r2, #45	@ 0x2d
 801f612:	3343      	adds	r3, #67	@ 0x43
 801f614:	701a      	strb	r2, [r3, #0]
 801f616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f618:	4f9a      	ldr	r7, [pc, #616]	@ (801f884 <_printf_float+0x2f8>)
 801f61a:	2b47      	cmp	r3, #71	@ 0x47
 801f61c:	d900      	bls.n	801f620 <_printf_float+0x94>
 801f61e:	4f9a      	ldr	r7, [pc, #616]	@ (801f888 <_printf_float+0x2fc>)
 801f620:	2303      	movs	r3, #3
 801f622:	2400      	movs	r4, #0
 801f624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f626:	612b      	str	r3, [r5, #16]
 801f628:	3301      	adds	r3, #1
 801f62a:	439a      	bics	r2, r3
 801f62c:	602a      	str	r2, [r5, #0]
 801f62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f630:	0029      	movs	r1, r5
 801f632:	9300      	str	r3, [sp, #0]
 801f634:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f638:	aa15      	add	r2, sp, #84	@ 0x54
 801f63a:	f000 f9e5 	bl	801fa08 <_printf_common>
 801f63e:	3001      	adds	r0, #1
 801f640:	d000      	beq.n	801f644 <_printf_float+0xb8>
 801f642:	e09f      	b.n	801f784 <_printf_float+0x1f8>
 801f644:	2001      	movs	r0, #1
 801f646:	4240      	negs	r0, r0
 801f648:	b017      	add	sp, #92	@ 0x5c
 801f64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f64c:	3307      	adds	r3, #7
 801f64e:	e7b8      	b.n	801f5c2 <_printf_float+0x36>
 801f650:	0032      	movs	r2, r6
 801f652:	003b      	movs	r3, r7
 801f654:	0030      	movs	r0, r6
 801f656:	0039      	movs	r1, r7
 801f658:	f7e3 fe54 	bl	8003304 <__aeabi_dcmpun>
 801f65c:	2800      	cmp	r0, #0
 801f65e:	d00b      	beq.n	801f678 <_printf_float+0xec>
 801f660:	2f00      	cmp	r7, #0
 801f662:	da03      	bge.n	801f66c <_printf_float+0xe0>
 801f664:	002b      	movs	r3, r5
 801f666:	222d      	movs	r2, #45	@ 0x2d
 801f668:	3343      	adds	r3, #67	@ 0x43
 801f66a:	701a      	strb	r2, [r3, #0]
 801f66c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f66e:	4f87      	ldr	r7, [pc, #540]	@ (801f88c <_printf_float+0x300>)
 801f670:	2b47      	cmp	r3, #71	@ 0x47
 801f672:	d9d5      	bls.n	801f620 <_printf_float+0x94>
 801f674:	4f86      	ldr	r7, [pc, #536]	@ (801f890 <_printf_float+0x304>)
 801f676:	e7d3      	b.n	801f620 <_printf_float+0x94>
 801f678:	2220      	movs	r2, #32
 801f67a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f67c:	686b      	ldr	r3, [r5, #4]
 801f67e:	4394      	bics	r4, r2
 801f680:	1c5a      	adds	r2, r3, #1
 801f682:	d146      	bne.n	801f712 <_printf_float+0x186>
 801f684:	3307      	adds	r3, #7
 801f686:	606b      	str	r3, [r5, #4]
 801f688:	2380      	movs	r3, #128	@ 0x80
 801f68a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f68c:	00db      	lsls	r3, r3, #3
 801f68e:	4313      	orrs	r3, r2
 801f690:	2200      	movs	r2, #0
 801f692:	602b      	str	r3, [r5, #0]
 801f694:	9206      	str	r2, [sp, #24]
 801f696:	aa14      	add	r2, sp, #80	@ 0x50
 801f698:	9205      	str	r2, [sp, #20]
 801f69a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f69c:	a90a      	add	r1, sp, #40	@ 0x28
 801f69e:	9204      	str	r2, [sp, #16]
 801f6a0:	aa13      	add	r2, sp, #76	@ 0x4c
 801f6a2:	9203      	str	r2, [sp, #12]
 801f6a4:	2223      	movs	r2, #35	@ 0x23
 801f6a6:	1852      	adds	r2, r2, r1
 801f6a8:	9202      	str	r2, [sp, #8]
 801f6aa:	9301      	str	r3, [sp, #4]
 801f6ac:	686b      	ldr	r3, [r5, #4]
 801f6ae:	0032      	movs	r2, r6
 801f6b0:	9300      	str	r3, [sp, #0]
 801f6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6b4:	003b      	movs	r3, r7
 801f6b6:	f7ff fec3 	bl	801f440 <__cvt>
 801f6ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f6bc:	0007      	movs	r7, r0
 801f6be:	2c47      	cmp	r4, #71	@ 0x47
 801f6c0:	d12d      	bne.n	801f71e <_printf_float+0x192>
 801f6c2:	1cd3      	adds	r3, r2, #3
 801f6c4:	db02      	blt.n	801f6cc <_printf_float+0x140>
 801f6c6:	686b      	ldr	r3, [r5, #4]
 801f6c8:	429a      	cmp	r2, r3
 801f6ca:	dd48      	ble.n	801f75e <_printf_float+0x1d2>
 801f6cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f6d0:	3b02      	subs	r3, #2
 801f6d2:	b2db      	uxtb	r3, r3
 801f6d4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f6d6:	0028      	movs	r0, r5
 801f6d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f6da:	3901      	subs	r1, #1
 801f6dc:	3050      	adds	r0, #80	@ 0x50
 801f6de:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f6e0:	f7ff ff14 	bl	801f50c <__exponent>
 801f6e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f6e6:	0004      	movs	r4, r0
 801f6e8:	1813      	adds	r3, r2, r0
 801f6ea:	612b      	str	r3, [r5, #16]
 801f6ec:	2a01      	cmp	r2, #1
 801f6ee:	dc02      	bgt.n	801f6f6 <_printf_float+0x16a>
 801f6f0:	682a      	ldr	r2, [r5, #0]
 801f6f2:	07d2      	lsls	r2, r2, #31
 801f6f4:	d501      	bpl.n	801f6fa <_printf_float+0x16e>
 801f6f6:	3301      	adds	r3, #1
 801f6f8:	612b      	str	r3, [r5, #16]
 801f6fa:	2323      	movs	r3, #35	@ 0x23
 801f6fc:	aa0a      	add	r2, sp, #40	@ 0x28
 801f6fe:	189b      	adds	r3, r3, r2
 801f700:	781b      	ldrb	r3, [r3, #0]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d100      	bne.n	801f708 <_printf_float+0x17c>
 801f706:	e792      	b.n	801f62e <_printf_float+0xa2>
 801f708:	002b      	movs	r3, r5
 801f70a:	222d      	movs	r2, #45	@ 0x2d
 801f70c:	3343      	adds	r3, #67	@ 0x43
 801f70e:	701a      	strb	r2, [r3, #0]
 801f710:	e78d      	b.n	801f62e <_printf_float+0xa2>
 801f712:	2c47      	cmp	r4, #71	@ 0x47
 801f714:	d1b8      	bne.n	801f688 <_printf_float+0xfc>
 801f716:	2b00      	cmp	r3, #0
 801f718:	d1b6      	bne.n	801f688 <_printf_float+0xfc>
 801f71a:	3301      	adds	r3, #1
 801f71c:	e7b3      	b.n	801f686 <_printf_float+0xfa>
 801f71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f720:	0011      	movs	r1, r2
 801f722:	2b65      	cmp	r3, #101	@ 0x65
 801f724:	d9d7      	bls.n	801f6d6 <_printf_float+0x14a>
 801f726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f728:	2b66      	cmp	r3, #102	@ 0x66
 801f72a:	d11a      	bne.n	801f762 <_printf_float+0x1d6>
 801f72c:	686b      	ldr	r3, [r5, #4]
 801f72e:	2a00      	cmp	r2, #0
 801f730:	dd09      	ble.n	801f746 <_printf_float+0x1ba>
 801f732:	612a      	str	r2, [r5, #16]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d102      	bne.n	801f73e <_printf_float+0x1b2>
 801f738:	6829      	ldr	r1, [r5, #0]
 801f73a:	07c9      	lsls	r1, r1, #31
 801f73c:	d50b      	bpl.n	801f756 <_printf_float+0x1ca>
 801f73e:	3301      	adds	r3, #1
 801f740:	189b      	adds	r3, r3, r2
 801f742:	612b      	str	r3, [r5, #16]
 801f744:	e007      	b.n	801f756 <_printf_float+0x1ca>
 801f746:	2b00      	cmp	r3, #0
 801f748:	d103      	bne.n	801f752 <_printf_float+0x1c6>
 801f74a:	2201      	movs	r2, #1
 801f74c:	6829      	ldr	r1, [r5, #0]
 801f74e:	4211      	tst	r1, r2
 801f750:	d000      	beq.n	801f754 <_printf_float+0x1c8>
 801f752:	1c9a      	adds	r2, r3, #2
 801f754:	612a      	str	r2, [r5, #16]
 801f756:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f758:	2400      	movs	r4, #0
 801f75a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f75c:	e7cd      	b.n	801f6fa <_printf_float+0x16e>
 801f75e:	2367      	movs	r3, #103	@ 0x67
 801f760:	930c      	str	r3, [sp, #48]	@ 0x30
 801f762:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f764:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f766:	4299      	cmp	r1, r3
 801f768:	db06      	blt.n	801f778 <_printf_float+0x1ec>
 801f76a:	682b      	ldr	r3, [r5, #0]
 801f76c:	6129      	str	r1, [r5, #16]
 801f76e:	07db      	lsls	r3, r3, #31
 801f770:	d5f1      	bpl.n	801f756 <_printf_float+0x1ca>
 801f772:	3101      	adds	r1, #1
 801f774:	6129      	str	r1, [r5, #16]
 801f776:	e7ee      	b.n	801f756 <_printf_float+0x1ca>
 801f778:	2201      	movs	r2, #1
 801f77a:	2900      	cmp	r1, #0
 801f77c:	dce0      	bgt.n	801f740 <_printf_float+0x1b4>
 801f77e:	1892      	adds	r2, r2, r2
 801f780:	1a52      	subs	r2, r2, r1
 801f782:	e7dd      	b.n	801f740 <_printf_float+0x1b4>
 801f784:	682a      	ldr	r2, [r5, #0]
 801f786:	0553      	lsls	r3, r2, #21
 801f788:	d408      	bmi.n	801f79c <_printf_float+0x210>
 801f78a:	692b      	ldr	r3, [r5, #16]
 801f78c:	003a      	movs	r2, r7
 801f78e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f792:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f794:	47a0      	blx	r4
 801f796:	3001      	adds	r0, #1
 801f798:	d129      	bne.n	801f7ee <_printf_float+0x262>
 801f79a:	e753      	b.n	801f644 <_printf_float+0xb8>
 801f79c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f79e:	2b65      	cmp	r3, #101	@ 0x65
 801f7a0:	d800      	bhi.n	801f7a4 <_printf_float+0x218>
 801f7a2:	e0da      	b.n	801f95a <_printf_float+0x3ce>
 801f7a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f7a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f7a8:	2200      	movs	r2, #0
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	f7e0 fe80 	bl	80004b0 <__aeabi_dcmpeq>
 801f7b0:	2800      	cmp	r0, #0
 801f7b2:	d033      	beq.n	801f81c <_printf_float+0x290>
 801f7b4:	2301      	movs	r3, #1
 801f7b6:	4a37      	ldr	r2, [pc, #220]	@ (801f894 <_printf_float+0x308>)
 801f7b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7be:	47a0      	blx	r4
 801f7c0:	3001      	adds	r0, #1
 801f7c2:	d100      	bne.n	801f7c6 <_printf_float+0x23a>
 801f7c4:	e73e      	b.n	801f644 <_printf_float+0xb8>
 801f7c6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f7c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7ca:	42b3      	cmp	r3, r6
 801f7cc:	db02      	blt.n	801f7d4 <_printf_float+0x248>
 801f7ce:	682b      	ldr	r3, [r5, #0]
 801f7d0:	07db      	lsls	r3, r3, #31
 801f7d2:	d50c      	bpl.n	801f7ee <_printf_float+0x262>
 801f7d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7de:	47a0      	blx	r4
 801f7e0:	2400      	movs	r4, #0
 801f7e2:	3001      	adds	r0, #1
 801f7e4:	d100      	bne.n	801f7e8 <_printf_float+0x25c>
 801f7e6:	e72d      	b.n	801f644 <_printf_float+0xb8>
 801f7e8:	1e73      	subs	r3, r6, #1
 801f7ea:	42a3      	cmp	r3, r4
 801f7ec:	dc0a      	bgt.n	801f804 <_printf_float+0x278>
 801f7ee:	682b      	ldr	r3, [r5, #0]
 801f7f0:	079b      	lsls	r3, r3, #30
 801f7f2:	d500      	bpl.n	801f7f6 <_printf_float+0x26a>
 801f7f4:	e105      	b.n	801fa02 <_printf_float+0x476>
 801f7f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f7f8:	68e8      	ldr	r0, [r5, #12]
 801f7fa:	4298      	cmp	r0, r3
 801f7fc:	db00      	blt.n	801f800 <_printf_float+0x274>
 801f7fe:	e723      	b.n	801f648 <_printf_float+0xbc>
 801f800:	0018      	movs	r0, r3
 801f802:	e721      	b.n	801f648 <_printf_float+0xbc>
 801f804:	002a      	movs	r2, r5
 801f806:	2301      	movs	r3, #1
 801f808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f80c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f80e:	321a      	adds	r2, #26
 801f810:	47b8      	blx	r7
 801f812:	3001      	adds	r0, #1
 801f814:	d100      	bne.n	801f818 <_printf_float+0x28c>
 801f816:	e715      	b.n	801f644 <_printf_float+0xb8>
 801f818:	3401      	adds	r4, #1
 801f81a:	e7e5      	b.n	801f7e8 <_printf_float+0x25c>
 801f81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f81e:	2b00      	cmp	r3, #0
 801f820:	dc3a      	bgt.n	801f898 <_printf_float+0x30c>
 801f822:	2301      	movs	r3, #1
 801f824:	4a1b      	ldr	r2, [pc, #108]	@ (801f894 <_printf_float+0x308>)
 801f826:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f828:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f82a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f82c:	47a0      	blx	r4
 801f82e:	3001      	adds	r0, #1
 801f830:	d100      	bne.n	801f834 <_printf_float+0x2a8>
 801f832:	e707      	b.n	801f644 <_printf_float+0xb8>
 801f834:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f836:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f838:	4333      	orrs	r3, r6
 801f83a:	d102      	bne.n	801f842 <_printf_float+0x2b6>
 801f83c:	682b      	ldr	r3, [r5, #0]
 801f83e:	07db      	lsls	r3, r3, #31
 801f840:	d5d5      	bpl.n	801f7ee <_printf_float+0x262>
 801f842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f846:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f848:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f84a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f84c:	47a0      	blx	r4
 801f84e:	2300      	movs	r3, #0
 801f850:	3001      	adds	r0, #1
 801f852:	d100      	bne.n	801f856 <_printf_float+0x2ca>
 801f854:	e6f6      	b.n	801f644 <_printf_float+0xb8>
 801f856:	930c      	str	r3, [sp, #48]	@ 0x30
 801f858:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f85a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f85c:	425b      	negs	r3, r3
 801f85e:	4293      	cmp	r3, r2
 801f860:	dc01      	bgt.n	801f866 <_printf_float+0x2da>
 801f862:	0033      	movs	r3, r6
 801f864:	e792      	b.n	801f78c <_printf_float+0x200>
 801f866:	002a      	movs	r2, r5
 801f868:	2301      	movs	r3, #1
 801f86a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f86c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f86e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f870:	321a      	adds	r2, #26
 801f872:	47a0      	blx	r4
 801f874:	3001      	adds	r0, #1
 801f876:	d100      	bne.n	801f87a <_printf_float+0x2ee>
 801f878:	e6e4      	b.n	801f644 <_printf_float+0xb8>
 801f87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f87c:	3301      	adds	r3, #1
 801f87e:	e7ea      	b.n	801f856 <_printf_float+0x2ca>
 801f880:	7fefffff 	.word	0x7fefffff
 801f884:	08025d11 	.word	0x08025d11
 801f888:	08025d15 	.word	0x08025d15
 801f88c:	08025d19 	.word	0x08025d19
 801f890:	08025d1d 	.word	0x08025d1d
 801f894:	08025d21 	.word	0x08025d21
 801f898:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f89a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f89c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f89e:	429e      	cmp	r6, r3
 801f8a0:	dd00      	ble.n	801f8a4 <_printf_float+0x318>
 801f8a2:	001e      	movs	r6, r3
 801f8a4:	2e00      	cmp	r6, #0
 801f8a6:	dc31      	bgt.n	801f90c <_printf_float+0x380>
 801f8a8:	43f3      	mvns	r3, r6
 801f8aa:	2400      	movs	r4, #0
 801f8ac:	17db      	asrs	r3, r3, #31
 801f8ae:	4033      	ands	r3, r6
 801f8b0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f8b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f8b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8b6:	1af3      	subs	r3, r6, r3
 801f8b8:	42a3      	cmp	r3, r4
 801f8ba:	dc30      	bgt.n	801f91e <_printf_float+0x392>
 801f8bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8c0:	429a      	cmp	r2, r3
 801f8c2:	dc38      	bgt.n	801f936 <_printf_float+0x3aa>
 801f8c4:	682b      	ldr	r3, [r5, #0]
 801f8c6:	07db      	lsls	r3, r3, #31
 801f8c8:	d435      	bmi.n	801f936 <_printf_float+0x3aa>
 801f8ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f8cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8d0:	1b9b      	subs	r3, r3, r6
 801f8d2:	1b14      	subs	r4, r2, r4
 801f8d4:	429c      	cmp	r4, r3
 801f8d6:	dd00      	ble.n	801f8da <_printf_float+0x34e>
 801f8d8:	001c      	movs	r4, r3
 801f8da:	2c00      	cmp	r4, #0
 801f8dc:	dc34      	bgt.n	801f948 <_printf_float+0x3bc>
 801f8de:	43e3      	mvns	r3, r4
 801f8e0:	2600      	movs	r6, #0
 801f8e2:	17db      	asrs	r3, r3, #31
 801f8e4:	401c      	ands	r4, r3
 801f8e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8ea:	1ad3      	subs	r3, r2, r3
 801f8ec:	1b1b      	subs	r3, r3, r4
 801f8ee:	42b3      	cmp	r3, r6
 801f8f0:	dc00      	bgt.n	801f8f4 <_printf_float+0x368>
 801f8f2:	e77c      	b.n	801f7ee <_printf_float+0x262>
 801f8f4:	002a      	movs	r2, r5
 801f8f6:	2301      	movs	r3, #1
 801f8f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f8fe:	321a      	adds	r2, #26
 801f900:	47b8      	blx	r7
 801f902:	3001      	adds	r0, #1
 801f904:	d100      	bne.n	801f908 <_printf_float+0x37c>
 801f906:	e69d      	b.n	801f644 <_printf_float+0xb8>
 801f908:	3601      	adds	r6, #1
 801f90a:	e7ec      	b.n	801f8e6 <_printf_float+0x35a>
 801f90c:	0033      	movs	r3, r6
 801f90e:	003a      	movs	r2, r7
 801f910:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f914:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f916:	47a0      	blx	r4
 801f918:	3001      	adds	r0, #1
 801f91a:	d1c5      	bne.n	801f8a8 <_printf_float+0x31c>
 801f91c:	e692      	b.n	801f644 <_printf_float+0xb8>
 801f91e:	002a      	movs	r2, r5
 801f920:	2301      	movs	r3, #1
 801f922:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f924:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f926:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f928:	321a      	adds	r2, #26
 801f92a:	47b0      	blx	r6
 801f92c:	3001      	adds	r0, #1
 801f92e:	d100      	bne.n	801f932 <_printf_float+0x3a6>
 801f930:	e688      	b.n	801f644 <_printf_float+0xb8>
 801f932:	3401      	adds	r4, #1
 801f934:	e7bd      	b.n	801f8b2 <_printf_float+0x326>
 801f936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f93a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f93c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f93e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f940:	47a0      	blx	r4
 801f942:	3001      	adds	r0, #1
 801f944:	d1c1      	bne.n	801f8ca <_printf_float+0x33e>
 801f946:	e67d      	b.n	801f644 <_printf_float+0xb8>
 801f948:	19ba      	adds	r2, r7, r6
 801f94a:	0023      	movs	r3, r4
 801f94c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f94e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f950:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f952:	47b0      	blx	r6
 801f954:	3001      	adds	r0, #1
 801f956:	d1c2      	bne.n	801f8de <_printf_float+0x352>
 801f958:	e674      	b.n	801f644 <_printf_float+0xb8>
 801f95a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f95c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f95e:	2b01      	cmp	r3, #1
 801f960:	dc02      	bgt.n	801f968 <_printf_float+0x3dc>
 801f962:	2301      	movs	r3, #1
 801f964:	421a      	tst	r2, r3
 801f966:	d039      	beq.n	801f9dc <_printf_float+0x450>
 801f968:	2301      	movs	r3, #1
 801f96a:	003a      	movs	r2, r7
 801f96c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f96e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f970:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f972:	47b0      	blx	r6
 801f974:	3001      	adds	r0, #1
 801f976:	d100      	bne.n	801f97a <_printf_float+0x3ee>
 801f978:	e664      	b.n	801f644 <_printf_float+0xb8>
 801f97a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f97c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f97e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f980:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f982:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f984:	47b0      	blx	r6
 801f986:	3001      	adds	r0, #1
 801f988:	d100      	bne.n	801f98c <_printf_float+0x400>
 801f98a:	e65b      	b.n	801f644 <_printf_float+0xb8>
 801f98c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f98e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f992:	2200      	movs	r2, #0
 801f994:	3b01      	subs	r3, #1
 801f996:	930c      	str	r3, [sp, #48]	@ 0x30
 801f998:	2300      	movs	r3, #0
 801f99a:	f7e0 fd89 	bl	80004b0 <__aeabi_dcmpeq>
 801f99e:	2800      	cmp	r0, #0
 801f9a0:	d11a      	bne.n	801f9d8 <_printf_float+0x44c>
 801f9a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9a4:	1c7a      	adds	r2, r7, #1
 801f9a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9aa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f9ac:	47b0      	blx	r6
 801f9ae:	3001      	adds	r0, #1
 801f9b0:	d10e      	bne.n	801f9d0 <_printf_float+0x444>
 801f9b2:	e647      	b.n	801f644 <_printf_float+0xb8>
 801f9b4:	002a      	movs	r2, r5
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f9be:	321a      	adds	r2, #26
 801f9c0:	47b8      	blx	r7
 801f9c2:	3001      	adds	r0, #1
 801f9c4:	d100      	bne.n	801f9c8 <_printf_float+0x43c>
 801f9c6:	e63d      	b.n	801f644 <_printf_float+0xb8>
 801f9c8:	3601      	adds	r6, #1
 801f9ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f9cc:	429e      	cmp	r6, r3
 801f9ce:	dbf1      	blt.n	801f9b4 <_printf_float+0x428>
 801f9d0:	002a      	movs	r2, r5
 801f9d2:	0023      	movs	r3, r4
 801f9d4:	3250      	adds	r2, #80	@ 0x50
 801f9d6:	e6da      	b.n	801f78e <_printf_float+0x202>
 801f9d8:	2600      	movs	r6, #0
 801f9da:	e7f6      	b.n	801f9ca <_printf_float+0x43e>
 801f9dc:	003a      	movs	r2, r7
 801f9de:	e7e2      	b.n	801f9a6 <_printf_float+0x41a>
 801f9e0:	002a      	movs	r2, r5
 801f9e2:	2301      	movs	r3, #1
 801f9e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f9e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f9ea:	3219      	adds	r2, #25
 801f9ec:	47b0      	blx	r6
 801f9ee:	3001      	adds	r0, #1
 801f9f0:	d100      	bne.n	801f9f4 <_printf_float+0x468>
 801f9f2:	e627      	b.n	801f644 <_printf_float+0xb8>
 801f9f4:	3401      	adds	r4, #1
 801f9f6:	68eb      	ldr	r3, [r5, #12]
 801f9f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f9fa:	1a9b      	subs	r3, r3, r2
 801f9fc:	42a3      	cmp	r3, r4
 801f9fe:	dcef      	bgt.n	801f9e0 <_printf_float+0x454>
 801fa00:	e6f9      	b.n	801f7f6 <_printf_float+0x26a>
 801fa02:	2400      	movs	r4, #0
 801fa04:	e7f7      	b.n	801f9f6 <_printf_float+0x46a>
 801fa06:	46c0      	nop			@ (mov r8, r8)

0801fa08 <_printf_common>:
 801fa08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa0a:	0016      	movs	r6, r2
 801fa0c:	9301      	str	r3, [sp, #4]
 801fa0e:	688a      	ldr	r2, [r1, #8]
 801fa10:	690b      	ldr	r3, [r1, #16]
 801fa12:	000c      	movs	r4, r1
 801fa14:	9000      	str	r0, [sp, #0]
 801fa16:	4293      	cmp	r3, r2
 801fa18:	da00      	bge.n	801fa1c <_printf_common+0x14>
 801fa1a:	0013      	movs	r3, r2
 801fa1c:	0022      	movs	r2, r4
 801fa1e:	6033      	str	r3, [r6, #0]
 801fa20:	3243      	adds	r2, #67	@ 0x43
 801fa22:	7812      	ldrb	r2, [r2, #0]
 801fa24:	2a00      	cmp	r2, #0
 801fa26:	d001      	beq.n	801fa2c <_printf_common+0x24>
 801fa28:	3301      	adds	r3, #1
 801fa2a:	6033      	str	r3, [r6, #0]
 801fa2c:	6823      	ldr	r3, [r4, #0]
 801fa2e:	069b      	lsls	r3, r3, #26
 801fa30:	d502      	bpl.n	801fa38 <_printf_common+0x30>
 801fa32:	6833      	ldr	r3, [r6, #0]
 801fa34:	3302      	adds	r3, #2
 801fa36:	6033      	str	r3, [r6, #0]
 801fa38:	6822      	ldr	r2, [r4, #0]
 801fa3a:	2306      	movs	r3, #6
 801fa3c:	0015      	movs	r5, r2
 801fa3e:	401d      	ands	r5, r3
 801fa40:	421a      	tst	r2, r3
 801fa42:	d027      	beq.n	801fa94 <_printf_common+0x8c>
 801fa44:	0023      	movs	r3, r4
 801fa46:	3343      	adds	r3, #67	@ 0x43
 801fa48:	781b      	ldrb	r3, [r3, #0]
 801fa4a:	1e5a      	subs	r2, r3, #1
 801fa4c:	4193      	sbcs	r3, r2
 801fa4e:	6822      	ldr	r2, [r4, #0]
 801fa50:	0692      	lsls	r2, r2, #26
 801fa52:	d430      	bmi.n	801fab6 <_printf_common+0xae>
 801fa54:	0022      	movs	r2, r4
 801fa56:	9901      	ldr	r1, [sp, #4]
 801fa58:	9800      	ldr	r0, [sp, #0]
 801fa5a:	9d08      	ldr	r5, [sp, #32]
 801fa5c:	3243      	adds	r2, #67	@ 0x43
 801fa5e:	47a8      	blx	r5
 801fa60:	3001      	adds	r0, #1
 801fa62:	d025      	beq.n	801fab0 <_printf_common+0xa8>
 801fa64:	2206      	movs	r2, #6
 801fa66:	6823      	ldr	r3, [r4, #0]
 801fa68:	2500      	movs	r5, #0
 801fa6a:	4013      	ands	r3, r2
 801fa6c:	2b04      	cmp	r3, #4
 801fa6e:	d105      	bne.n	801fa7c <_printf_common+0x74>
 801fa70:	6833      	ldr	r3, [r6, #0]
 801fa72:	68e5      	ldr	r5, [r4, #12]
 801fa74:	1aed      	subs	r5, r5, r3
 801fa76:	43eb      	mvns	r3, r5
 801fa78:	17db      	asrs	r3, r3, #31
 801fa7a:	401d      	ands	r5, r3
 801fa7c:	68a3      	ldr	r3, [r4, #8]
 801fa7e:	6922      	ldr	r2, [r4, #16]
 801fa80:	4293      	cmp	r3, r2
 801fa82:	dd01      	ble.n	801fa88 <_printf_common+0x80>
 801fa84:	1a9b      	subs	r3, r3, r2
 801fa86:	18ed      	adds	r5, r5, r3
 801fa88:	2600      	movs	r6, #0
 801fa8a:	42b5      	cmp	r5, r6
 801fa8c:	d120      	bne.n	801fad0 <_printf_common+0xc8>
 801fa8e:	2000      	movs	r0, #0
 801fa90:	e010      	b.n	801fab4 <_printf_common+0xac>
 801fa92:	3501      	adds	r5, #1
 801fa94:	68e3      	ldr	r3, [r4, #12]
 801fa96:	6832      	ldr	r2, [r6, #0]
 801fa98:	1a9b      	subs	r3, r3, r2
 801fa9a:	42ab      	cmp	r3, r5
 801fa9c:	ddd2      	ble.n	801fa44 <_printf_common+0x3c>
 801fa9e:	0022      	movs	r2, r4
 801faa0:	2301      	movs	r3, #1
 801faa2:	9901      	ldr	r1, [sp, #4]
 801faa4:	9800      	ldr	r0, [sp, #0]
 801faa6:	9f08      	ldr	r7, [sp, #32]
 801faa8:	3219      	adds	r2, #25
 801faaa:	47b8      	blx	r7
 801faac:	3001      	adds	r0, #1
 801faae:	d1f0      	bne.n	801fa92 <_printf_common+0x8a>
 801fab0:	2001      	movs	r0, #1
 801fab2:	4240      	negs	r0, r0
 801fab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fab6:	2030      	movs	r0, #48	@ 0x30
 801fab8:	18e1      	adds	r1, r4, r3
 801faba:	3143      	adds	r1, #67	@ 0x43
 801fabc:	7008      	strb	r0, [r1, #0]
 801fabe:	0021      	movs	r1, r4
 801fac0:	1c5a      	adds	r2, r3, #1
 801fac2:	3145      	adds	r1, #69	@ 0x45
 801fac4:	7809      	ldrb	r1, [r1, #0]
 801fac6:	18a2      	adds	r2, r4, r2
 801fac8:	3243      	adds	r2, #67	@ 0x43
 801faca:	3302      	adds	r3, #2
 801facc:	7011      	strb	r1, [r2, #0]
 801face:	e7c1      	b.n	801fa54 <_printf_common+0x4c>
 801fad0:	0022      	movs	r2, r4
 801fad2:	2301      	movs	r3, #1
 801fad4:	9901      	ldr	r1, [sp, #4]
 801fad6:	9800      	ldr	r0, [sp, #0]
 801fad8:	9f08      	ldr	r7, [sp, #32]
 801fada:	321a      	adds	r2, #26
 801fadc:	47b8      	blx	r7
 801fade:	3001      	adds	r0, #1
 801fae0:	d0e6      	beq.n	801fab0 <_printf_common+0xa8>
 801fae2:	3601      	adds	r6, #1
 801fae4:	e7d1      	b.n	801fa8a <_printf_common+0x82>
	...

0801fae8 <_printf_i>:
 801fae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faea:	b08b      	sub	sp, #44	@ 0x2c
 801faec:	9206      	str	r2, [sp, #24]
 801faee:	000a      	movs	r2, r1
 801faf0:	3243      	adds	r2, #67	@ 0x43
 801faf2:	9307      	str	r3, [sp, #28]
 801faf4:	9005      	str	r0, [sp, #20]
 801faf6:	9203      	str	r2, [sp, #12]
 801faf8:	7e0a      	ldrb	r2, [r1, #24]
 801fafa:	000c      	movs	r4, r1
 801fafc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fafe:	2a78      	cmp	r2, #120	@ 0x78
 801fb00:	d809      	bhi.n	801fb16 <_printf_i+0x2e>
 801fb02:	2a62      	cmp	r2, #98	@ 0x62
 801fb04:	d80b      	bhi.n	801fb1e <_printf_i+0x36>
 801fb06:	2a00      	cmp	r2, #0
 801fb08:	d100      	bne.n	801fb0c <_printf_i+0x24>
 801fb0a:	e0bc      	b.n	801fc86 <_printf_i+0x19e>
 801fb0c:	497b      	ldr	r1, [pc, #492]	@ (801fcfc <_printf_i+0x214>)
 801fb0e:	9104      	str	r1, [sp, #16]
 801fb10:	2a58      	cmp	r2, #88	@ 0x58
 801fb12:	d100      	bne.n	801fb16 <_printf_i+0x2e>
 801fb14:	e090      	b.n	801fc38 <_printf_i+0x150>
 801fb16:	0025      	movs	r5, r4
 801fb18:	3542      	adds	r5, #66	@ 0x42
 801fb1a:	702a      	strb	r2, [r5, #0]
 801fb1c:	e022      	b.n	801fb64 <_printf_i+0x7c>
 801fb1e:	0010      	movs	r0, r2
 801fb20:	3863      	subs	r0, #99	@ 0x63
 801fb22:	2815      	cmp	r0, #21
 801fb24:	d8f7      	bhi.n	801fb16 <_printf_i+0x2e>
 801fb26:	f7e0 fb33 	bl	8000190 <__gnu_thumb1_case_shi>
 801fb2a:	0016      	.short	0x0016
 801fb2c:	fff6001f 	.word	0xfff6001f
 801fb30:	fff6fff6 	.word	0xfff6fff6
 801fb34:	001ffff6 	.word	0x001ffff6
 801fb38:	fff6fff6 	.word	0xfff6fff6
 801fb3c:	fff6fff6 	.word	0xfff6fff6
 801fb40:	003600a1 	.word	0x003600a1
 801fb44:	fff60080 	.word	0xfff60080
 801fb48:	00b2fff6 	.word	0x00b2fff6
 801fb4c:	0036fff6 	.word	0x0036fff6
 801fb50:	fff6fff6 	.word	0xfff6fff6
 801fb54:	0084      	.short	0x0084
 801fb56:	0025      	movs	r5, r4
 801fb58:	681a      	ldr	r2, [r3, #0]
 801fb5a:	3542      	adds	r5, #66	@ 0x42
 801fb5c:	1d11      	adds	r1, r2, #4
 801fb5e:	6019      	str	r1, [r3, #0]
 801fb60:	6813      	ldr	r3, [r2, #0]
 801fb62:	702b      	strb	r3, [r5, #0]
 801fb64:	2301      	movs	r3, #1
 801fb66:	e0a0      	b.n	801fcaa <_printf_i+0x1c2>
 801fb68:	6818      	ldr	r0, [r3, #0]
 801fb6a:	6809      	ldr	r1, [r1, #0]
 801fb6c:	1d02      	adds	r2, r0, #4
 801fb6e:	060d      	lsls	r5, r1, #24
 801fb70:	d50b      	bpl.n	801fb8a <_printf_i+0xa2>
 801fb72:	6806      	ldr	r6, [r0, #0]
 801fb74:	601a      	str	r2, [r3, #0]
 801fb76:	2e00      	cmp	r6, #0
 801fb78:	da03      	bge.n	801fb82 <_printf_i+0x9a>
 801fb7a:	232d      	movs	r3, #45	@ 0x2d
 801fb7c:	9a03      	ldr	r2, [sp, #12]
 801fb7e:	4276      	negs	r6, r6
 801fb80:	7013      	strb	r3, [r2, #0]
 801fb82:	4b5e      	ldr	r3, [pc, #376]	@ (801fcfc <_printf_i+0x214>)
 801fb84:	270a      	movs	r7, #10
 801fb86:	9304      	str	r3, [sp, #16]
 801fb88:	e018      	b.n	801fbbc <_printf_i+0xd4>
 801fb8a:	6806      	ldr	r6, [r0, #0]
 801fb8c:	601a      	str	r2, [r3, #0]
 801fb8e:	0649      	lsls	r1, r1, #25
 801fb90:	d5f1      	bpl.n	801fb76 <_printf_i+0x8e>
 801fb92:	b236      	sxth	r6, r6
 801fb94:	e7ef      	b.n	801fb76 <_printf_i+0x8e>
 801fb96:	6808      	ldr	r0, [r1, #0]
 801fb98:	6819      	ldr	r1, [r3, #0]
 801fb9a:	c940      	ldmia	r1!, {r6}
 801fb9c:	0605      	lsls	r5, r0, #24
 801fb9e:	d402      	bmi.n	801fba6 <_printf_i+0xbe>
 801fba0:	0640      	lsls	r0, r0, #25
 801fba2:	d500      	bpl.n	801fba6 <_printf_i+0xbe>
 801fba4:	b2b6      	uxth	r6, r6
 801fba6:	6019      	str	r1, [r3, #0]
 801fba8:	4b54      	ldr	r3, [pc, #336]	@ (801fcfc <_printf_i+0x214>)
 801fbaa:	270a      	movs	r7, #10
 801fbac:	9304      	str	r3, [sp, #16]
 801fbae:	2a6f      	cmp	r2, #111	@ 0x6f
 801fbb0:	d100      	bne.n	801fbb4 <_printf_i+0xcc>
 801fbb2:	3f02      	subs	r7, #2
 801fbb4:	0023      	movs	r3, r4
 801fbb6:	2200      	movs	r2, #0
 801fbb8:	3343      	adds	r3, #67	@ 0x43
 801fbba:	701a      	strb	r2, [r3, #0]
 801fbbc:	6863      	ldr	r3, [r4, #4]
 801fbbe:	60a3      	str	r3, [r4, #8]
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	db03      	blt.n	801fbcc <_printf_i+0xe4>
 801fbc4:	2104      	movs	r1, #4
 801fbc6:	6822      	ldr	r2, [r4, #0]
 801fbc8:	438a      	bics	r2, r1
 801fbca:	6022      	str	r2, [r4, #0]
 801fbcc:	2e00      	cmp	r6, #0
 801fbce:	d102      	bne.n	801fbd6 <_printf_i+0xee>
 801fbd0:	9d03      	ldr	r5, [sp, #12]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d00c      	beq.n	801fbf0 <_printf_i+0x108>
 801fbd6:	9d03      	ldr	r5, [sp, #12]
 801fbd8:	0030      	movs	r0, r6
 801fbda:	0039      	movs	r1, r7
 801fbdc:	f7e0 fb68 	bl	80002b0 <__aeabi_uidivmod>
 801fbe0:	9b04      	ldr	r3, [sp, #16]
 801fbe2:	3d01      	subs	r5, #1
 801fbe4:	5c5b      	ldrb	r3, [r3, r1]
 801fbe6:	702b      	strb	r3, [r5, #0]
 801fbe8:	0033      	movs	r3, r6
 801fbea:	0006      	movs	r6, r0
 801fbec:	429f      	cmp	r7, r3
 801fbee:	d9f3      	bls.n	801fbd8 <_printf_i+0xf0>
 801fbf0:	2f08      	cmp	r7, #8
 801fbf2:	d109      	bne.n	801fc08 <_printf_i+0x120>
 801fbf4:	6823      	ldr	r3, [r4, #0]
 801fbf6:	07db      	lsls	r3, r3, #31
 801fbf8:	d506      	bpl.n	801fc08 <_printf_i+0x120>
 801fbfa:	6862      	ldr	r2, [r4, #4]
 801fbfc:	6923      	ldr	r3, [r4, #16]
 801fbfe:	429a      	cmp	r2, r3
 801fc00:	dc02      	bgt.n	801fc08 <_printf_i+0x120>
 801fc02:	2330      	movs	r3, #48	@ 0x30
 801fc04:	3d01      	subs	r5, #1
 801fc06:	702b      	strb	r3, [r5, #0]
 801fc08:	9b03      	ldr	r3, [sp, #12]
 801fc0a:	1b5b      	subs	r3, r3, r5
 801fc0c:	6123      	str	r3, [r4, #16]
 801fc0e:	9b07      	ldr	r3, [sp, #28]
 801fc10:	0021      	movs	r1, r4
 801fc12:	9300      	str	r3, [sp, #0]
 801fc14:	9805      	ldr	r0, [sp, #20]
 801fc16:	9b06      	ldr	r3, [sp, #24]
 801fc18:	aa09      	add	r2, sp, #36	@ 0x24
 801fc1a:	f7ff fef5 	bl	801fa08 <_printf_common>
 801fc1e:	3001      	adds	r0, #1
 801fc20:	d148      	bne.n	801fcb4 <_printf_i+0x1cc>
 801fc22:	2001      	movs	r0, #1
 801fc24:	4240      	negs	r0, r0
 801fc26:	b00b      	add	sp, #44	@ 0x2c
 801fc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc2a:	2220      	movs	r2, #32
 801fc2c:	6809      	ldr	r1, [r1, #0]
 801fc2e:	430a      	orrs	r2, r1
 801fc30:	6022      	str	r2, [r4, #0]
 801fc32:	2278      	movs	r2, #120	@ 0x78
 801fc34:	4932      	ldr	r1, [pc, #200]	@ (801fd00 <_printf_i+0x218>)
 801fc36:	9104      	str	r1, [sp, #16]
 801fc38:	0021      	movs	r1, r4
 801fc3a:	3145      	adds	r1, #69	@ 0x45
 801fc3c:	700a      	strb	r2, [r1, #0]
 801fc3e:	6819      	ldr	r1, [r3, #0]
 801fc40:	6822      	ldr	r2, [r4, #0]
 801fc42:	c940      	ldmia	r1!, {r6}
 801fc44:	0610      	lsls	r0, r2, #24
 801fc46:	d402      	bmi.n	801fc4e <_printf_i+0x166>
 801fc48:	0650      	lsls	r0, r2, #25
 801fc4a:	d500      	bpl.n	801fc4e <_printf_i+0x166>
 801fc4c:	b2b6      	uxth	r6, r6
 801fc4e:	6019      	str	r1, [r3, #0]
 801fc50:	07d3      	lsls	r3, r2, #31
 801fc52:	d502      	bpl.n	801fc5a <_printf_i+0x172>
 801fc54:	2320      	movs	r3, #32
 801fc56:	4313      	orrs	r3, r2
 801fc58:	6023      	str	r3, [r4, #0]
 801fc5a:	2e00      	cmp	r6, #0
 801fc5c:	d001      	beq.n	801fc62 <_printf_i+0x17a>
 801fc5e:	2710      	movs	r7, #16
 801fc60:	e7a8      	b.n	801fbb4 <_printf_i+0xcc>
 801fc62:	2220      	movs	r2, #32
 801fc64:	6823      	ldr	r3, [r4, #0]
 801fc66:	4393      	bics	r3, r2
 801fc68:	6023      	str	r3, [r4, #0]
 801fc6a:	e7f8      	b.n	801fc5e <_printf_i+0x176>
 801fc6c:	681a      	ldr	r2, [r3, #0]
 801fc6e:	680d      	ldr	r5, [r1, #0]
 801fc70:	1d10      	adds	r0, r2, #4
 801fc72:	6949      	ldr	r1, [r1, #20]
 801fc74:	6018      	str	r0, [r3, #0]
 801fc76:	6813      	ldr	r3, [r2, #0]
 801fc78:	062e      	lsls	r6, r5, #24
 801fc7a:	d501      	bpl.n	801fc80 <_printf_i+0x198>
 801fc7c:	6019      	str	r1, [r3, #0]
 801fc7e:	e002      	b.n	801fc86 <_printf_i+0x19e>
 801fc80:	066d      	lsls	r5, r5, #25
 801fc82:	d5fb      	bpl.n	801fc7c <_printf_i+0x194>
 801fc84:	8019      	strh	r1, [r3, #0]
 801fc86:	2300      	movs	r3, #0
 801fc88:	9d03      	ldr	r5, [sp, #12]
 801fc8a:	6123      	str	r3, [r4, #16]
 801fc8c:	e7bf      	b.n	801fc0e <_printf_i+0x126>
 801fc8e:	681a      	ldr	r2, [r3, #0]
 801fc90:	1d11      	adds	r1, r2, #4
 801fc92:	6019      	str	r1, [r3, #0]
 801fc94:	6815      	ldr	r5, [r2, #0]
 801fc96:	2100      	movs	r1, #0
 801fc98:	0028      	movs	r0, r5
 801fc9a:	6862      	ldr	r2, [r4, #4]
 801fc9c:	f000 fb7b 	bl	8020396 <memchr>
 801fca0:	2800      	cmp	r0, #0
 801fca2:	d001      	beq.n	801fca8 <_printf_i+0x1c0>
 801fca4:	1b40      	subs	r0, r0, r5
 801fca6:	6060      	str	r0, [r4, #4]
 801fca8:	6863      	ldr	r3, [r4, #4]
 801fcaa:	6123      	str	r3, [r4, #16]
 801fcac:	2300      	movs	r3, #0
 801fcae:	9a03      	ldr	r2, [sp, #12]
 801fcb0:	7013      	strb	r3, [r2, #0]
 801fcb2:	e7ac      	b.n	801fc0e <_printf_i+0x126>
 801fcb4:	002a      	movs	r2, r5
 801fcb6:	6923      	ldr	r3, [r4, #16]
 801fcb8:	9906      	ldr	r1, [sp, #24]
 801fcba:	9805      	ldr	r0, [sp, #20]
 801fcbc:	9d07      	ldr	r5, [sp, #28]
 801fcbe:	47a8      	blx	r5
 801fcc0:	3001      	adds	r0, #1
 801fcc2:	d0ae      	beq.n	801fc22 <_printf_i+0x13a>
 801fcc4:	6823      	ldr	r3, [r4, #0]
 801fcc6:	079b      	lsls	r3, r3, #30
 801fcc8:	d415      	bmi.n	801fcf6 <_printf_i+0x20e>
 801fcca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fccc:	68e0      	ldr	r0, [r4, #12]
 801fcce:	4298      	cmp	r0, r3
 801fcd0:	daa9      	bge.n	801fc26 <_printf_i+0x13e>
 801fcd2:	0018      	movs	r0, r3
 801fcd4:	e7a7      	b.n	801fc26 <_printf_i+0x13e>
 801fcd6:	0022      	movs	r2, r4
 801fcd8:	2301      	movs	r3, #1
 801fcda:	9906      	ldr	r1, [sp, #24]
 801fcdc:	9805      	ldr	r0, [sp, #20]
 801fcde:	9e07      	ldr	r6, [sp, #28]
 801fce0:	3219      	adds	r2, #25
 801fce2:	47b0      	blx	r6
 801fce4:	3001      	adds	r0, #1
 801fce6:	d09c      	beq.n	801fc22 <_printf_i+0x13a>
 801fce8:	3501      	adds	r5, #1
 801fcea:	68e3      	ldr	r3, [r4, #12]
 801fcec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fcee:	1a9b      	subs	r3, r3, r2
 801fcf0:	42ab      	cmp	r3, r5
 801fcf2:	dcf0      	bgt.n	801fcd6 <_printf_i+0x1ee>
 801fcf4:	e7e9      	b.n	801fcca <_printf_i+0x1e2>
 801fcf6:	2500      	movs	r5, #0
 801fcf8:	e7f7      	b.n	801fcea <_printf_i+0x202>
 801fcfa:	46c0      	nop			@ (mov r8, r8)
 801fcfc:	08025d23 	.word	0x08025d23
 801fd00:	08025d34 	.word	0x08025d34

0801fd04 <std>:
 801fd04:	2300      	movs	r3, #0
 801fd06:	b510      	push	{r4, lr}
 801fd08:	0004      	movs	r4, r0
 801fd0a:	6003      	str	r3, [r0, #0]
 801fd0c:	6043      	str	r3, [r0, #4]
 801fd0e:	6083      	str	r3, [r0, #8]
 801fd10:	8181      	strh	r1, [r0, #12]
 801fd12:	6643      	str	r3, [r0, #100]	@ 0x64
 801fd14:	81c2      	strh	r2, [r0, #14]
 801fd16:	6103      	str	r3, [r0, #16]
 801fd18:	6143      	str	r3, [r0, #20]
 801fd1a:	6183      	str	r3, [r0, #24]
 801fd1c:	0019      	movs	r1, r3
 801fd1e:	2208      	movs	r2, #8
 801fd20:	305c      	adds	r0, #92	@ 0x5c
 801fd22:	f000 fa67 	bl	80201f4 <memset>
 801fd26:	4b0b      	ldr	r3, [pc, #44]	@ (801fd54 <std+0x50>)
 801fd28:	6224      	str	r4, [r4, #32]
 801fd2a:	6263      	str	r3, [r4, #36]	@ 0x24
 801fd2c:	4b0a      	ldr	r3, [pc, #40]	@ (801fd58 <std+0x54>)
 801fd2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fd30:	4b0a      	ldr	r3, [pc, #40]	@ (801fd5c <std+0x58>)
 801fd32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fd34:	4b0a      	ldr	r3, [pc, #40]	@ (801fd60 <std+0x5c>)
 801fd36:	6323      	str	r3, [r4, #48]	@ 0x30
 801fd38:	4b0a      	ldr	r3, [pc, #40]	@ (801fd64 <std+0x60>)
 801fd3a:	429c      	cmp	r4, r3
 801fd3c:	d005      	beq.n	801fd4a <std+0x46>
 801fd3e:	4b0a      	ldr	r3, [pc, #40]	@ (801fd68 <std+0x64>)
 801fd40:	429c      	cmp	r4, r3
 801fd42:	d002      	beq.n	801fd4a <std+0x46>
 801fd44:	4b09      	ldr	r3, [pc, #36]	@ (801fd6c <std+0x68>)
 801fd46:	429c      	cmp	r4, r3
 801fd48:	d103      	bne.n	801fd52 <std+0x4e>
 801fd4a:	0020      	movs	r0, r4
 801fd4c:	3058      	adds	r0, #88	@ 0x58
 801fd4e:	f000 fb1f 	bl	8020390 <__retarget_lock_init_recursive>
 801fd52:	bd10      	pop	{r4, pc}
 801fd54:	0801ffad 	.word	0x0801ffad
 801fd58:	0801ffd5 	.word	0x0801ffd5
 801fd5c:	0802000d 	.word	0x0802000d
 801fd60:	08020039 	.word	0x08020039
 801fd64:	20003674 	.word	0x20003674
 801fd68:	200036dc 	.word	0x200036dc
 801fd6c:	20003744 	.word	0x20003744

0801fd70 <stdio_exit_handler>:
 801fd70:	b510      	push	{r4, lr}
 801fd72:	4a03      	ldr	r2, [pc, #12]	@ (801fd80 <stdio_exit_handler+0x10>)
 801fd74:	4903      	ldr	r1, [pc, #12]	@ (801fd84 <stdio_exit_handler+0x14>)
 801fd76:	4804      	ldr	r0, [pc, #16]	@ (801fd88 <stdio_exit_handler+0x18>)
 801fd78:	f000 f86c 	bl	801fe54 <_fwalk_sglue>
 801fd7c:	bd10      	pop	{r4, pc}
 801fd7e:	46c0      	nop			@ (mov r8, r8)
 801fd80:	2000025c 	.word	0x2000025c
 801fd84:	080229b5 	.word	0x080229b5
 801fd88:	200003d8 	.word	0x200003d8

0801fd8c <cleanup_stdio>:
 801fd8c:	6841      	ldr	r1, [r0, #4]
 801fd8e:	4b0b      	ldr	r3, [pc, #44]	@ (801fdbc <cleanup_stdio+0x30>)
 801fd90:	b510      	push	{r4, lr}
 801fd92:	0004      	movs	r4, r0
 801fd94:	4299      	cmp	r1, r3
 801fd96:	d001      	beq.n	801fd9c <cleanup_stdio+0x10>
 801fd98:	f002 fe0c 	bl	80229b4 <_fflush_r>
 801fd9c:	68a1      	ldr	r1, [r4, #8]
 801fd9e:	4b08      	ldr	r3, [pc, #32]	@ (801fdc0 <cleanup_stdio+0x34>)
 801fda0:	4299      	cmp	r1, r3
 801fda2:	d002      	beq.n	801fdaa <cleanup_stdio+0x1e>
 801fda4:	0020      	movs	r0, r4
 801fda6:	f002 fe05 	bl	80229b4 <_fflush_r>
 801fdaa:	68e1      	ldr	r1, [r4, #12]
 801fdac:	4b05      	ldr	r3, [pc, #20]	@ (801fdc4 <cleanup_stdio+0x38>)
 801fdae:	4299      	cmp	r1, r3
 801fdb0:	d002      	beq.n	801fdb8 <cleanup_stdio+0x2c>
 801fdb2:	0020      	movs	r0, r4
 801fdb4:	f002 fdfe 	bl	80229b4 <_fflush_r>
 801fdb8:	bd10      	pop	{r4, pc}
 801fdba:	46c0      	nop			@ (mov r8, r8)
 801fdbc:	20003674 	.word	0x20003674
 801fdc0:	200036dc 	.word	0x200036dc
 801fdc4:	20003744 	.word	0x20003744

0801fdc8 <global_stdio_init.part.0>:
 801fdc8:	b510      	push	{r4, lr}
 801fdca:	4b09      	ldr	r3, [pc, #36]	@ (801fdf0 <global_stdio_init.part.0+0x28>)
 801fdcc:	4a09      	ldr	r2, [pc, #36]	@ (801fdf4 <global_stdio_init.part.0+0x2c>)
 801fdce:	2104      	movs	r1, #4
 801fdd0:	601a      	str	r2, [r3, #0]
 801fdd2:	4809      	ldr	r0, [pc, #36]	@ (801fdf8 <global_stdio_init.part.0+0x30>)
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	f7ff ff95 	bl	801fd04 <std>
 801fdda:	2201      	movs	r2, #1
 801fddc:	2109      	movs	r1, #9
 801fdde:	4807      	ldr	r0, [pc, #28]	@ (801fdfc <global_stdio_init.part.0+0x34>)
 801fde0:	f7ff ff90 	bl	801fd04 <std>
 801fde4:	2202      	movs	r2, #2
 801fde6:	2112      	movs	r1, #18
 801fde8:	4805      	ldr	r0, [pc, #20]	@ (801fe00 <global_stdio_init.part.0+0x38>)
 801fdea:	f7ff ff8b 	bl	801fd04 <std>
 801fdee:	bd10      	pop	{r4, pc}
 801fdf0:	200037ac 	.word	0x200037ac
 801fdf4:	0801fd71 	.word	0x0801fd71
 801fdf8:	20003674 	.word	0x20003674
 801fdfc:	200036dc 	.word	0x200036dc
 801fe00:	20003744 	.word	0x20003744

0801fe04 <__sfp_lock_acquire>:
 801fe04:	b510      	push	{r4, lr}
 801fe06:	4802      	ldr	r0, [pc, #8]	@ (801fe10 <__sfp_lock_acquire+0xc>)
 801fe08:	f000 fac3 	bl	8020392 <__retarget_lock_acquire_recursive>
 801fe0c:	bd10      	pop	{r4, pc}
 801fe0e:	46c0      	nop			@ (mov r8, r8)
 801fe10:	200037b5 	.word	0x200037b5

0801fe14 <__sfp_lock_release>:
 801fe14:	b510      	push	{r4, lr}
 801fe16:	4802      	ldr	r0, [pc, #8]	@ (801fe20 <__sfp_lock_release+0xc>)
 801fe18:	f000 fabc 	bl	8020394 <__retarget_lock_release_recursive>
 801fe1c:	bd10      	pop	{r4, pc}
 801fe1e:	46c0      	nop			@ (mov r8, r8)
 801fe20:	200037b5 	.word	0x200037b5

0801fe24 <__sinit>:
 801fe24:	b510      	push	{r4, lr}
 801fe26:	0004      	movs	r4, r0
 801fe28:	f7ff ffec 	bl	801fe04 <__sfp_lock_acquire>
 801fe2c:	6a23      	ldr	r3, [r4, #32]
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	d002      	beq.n	801fe38 <__sinit+0x14>
 801fe32:	f7ff ffef 	bl	801fe14 <__sfp_lock_release>
 801fe36:	bd10      	pop	{r4, pc}
 801fe38:	4b04      	ldr	r3, [pc, #16]	@ (801fe4c <__sinit+0x28>)
 801fe3a:	6223      	str	r3, [r4, #32]
 801fe3c:	4b04      	ldr	r3, [pc, #16]	@ (801fe50 <__sinit+0x2c>)
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d1f6      	bne.n	801fe32 <__sinit+0xe>
 801fe44:	f7ff ffc0 	bl	801fdc8 <global_stdio_init.part.0>
 801fe48:	e7f3      	b.n	801fe32 <__sinit+0xe>
 801fe4a:	46c0      	nop			@ (mov r8, r8)
 801fe4c:	0801fd8d 	.word	0x0801fd8d
 801fe50:	200037ac 	.word	0x200037ac

0801fe54 <_fwalk_sglue>:
 801fe54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe56:	0014      	movs	r4, r2
 801fe58:	2600      	movs	r6, #0
 801fe5a:	9000      	str	r0, [sp, #0]
 801fe5c:	9101      	str	r1, [sp, #4]
 801fe5e:	68a5      	ldr	r5, [r4, #8]
 801fe60:	6867      	ldr	r7, [r4, #4]
 801fe62:	3f01      	subs	r7, #1
 801fe64:	d504      	bpl.n	801fe70 <_fwalk_sglue+0x1c>
 801fe66:	6824      	ldr	r4, [r4, #0]
 801fe68:	2c00      	cmp	r4, #0
 801fe6a:	d1f8      	bne.n	801fe5e <_fwalk_sglue+0xa>
 801fe6c:	0030      	movs	r0, r6
 801fe6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fe70:	89ab      	ldrh	r3, [r5, #12]
 801fe72:	2b01      	cmp	r3, #1
 801fe74:	d908      	bls.n	801fe88 <_fwalk_sglue+0x34>
 801fe76:	220e      	movs	r2, #14
 801fe78:	5eab      	ldrsh	r3, [r5, r2]
 801fe7a:	3301      	adds	r3, #1
 801fe7c:	d004      	beq.n	801fe88 <_fwalk_sglue+0x34>
 801fe7e:	0029      	movs	r1, r5
 801fe80:	9800      	ldr	r0, [sp, #0]
 801fe82:	9b01      	ldr	r3, [sp, #4]
 801fe84:	4798      	blx	r3
 801fe86:	4306      	orrs	r6, r0
 801fe88:	3568      	adds	r5, #104	@ 0x68
 801fe8a:	e7ea      	b.n	801fe62 <_fwalk_sglue+0xe>

0801fe8c <iprintf>:
 801fe8c:	b40f      	push	{r0, r1, r2, r3}
 801fe8e:	b507      	push	{r0, r1, r2, lr}
 801fe90:	4905      	ldr	r1, [pc, #20]	@ (801fea8 <iprintf+0x1c>)
 801fe92:	ab04      	add	r3, sp, #16
 801fe94:	6808      	ldr	r0, [r1, #0]
 801fe96:	cb04      	ldmia	r3!, {r2}
 801fe98:	6881      	ldr	r1, [r0, #8]
 801fe9a:	9301      	str	r3, [sp, #4]
 801fe9c:	f002 fbe8 	bl	8022670 <_vfiprintf_r>
 801fea0:	b003      	add	sp, #12
 801fea2:	bc08      	pop	{r3}
 801fea4:	b004      	add	sp, #16
 801fea6:	4718      	bx	r3
 801fea8:	200003d4 	.word	0x200003d4

0801feac <_puts_r>:
 801feac:	6a03      	ldr	r3, [r0, #32]
 801feae:	b570      	push	{r4, r5, r6, lr}
 801feb0:	0005      	movs	r5, r0
 801feb2:	000e      	movs	r6, r1
 801feb4:	6884      	ldr	r4, [r0, #8]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d101      	bne.n	801febe <_puts_r+0x12>
 801feba:	f7ff ffb3 	bl	801fe24 <__sinit>
 801febe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fec0:	07db      	lsls	r3, r3, #31
 801fec2:	d405      	bmi.n	801fed0 <_puts_r+0x24>
 801fec4:	89a3      	ldrh	r3, [r4, #12]
 801fec6:	059b      	lsls	r3, r3, #22
 801fec8:	d402      	bmi.n	801fed0 <_puts_r+0x24>
 801feca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fecc:	f000 fa61 	bl	8020392 <__retarget_lock_acquire_recursive>
 801fed0:	89a3      	ldrh	r3, [r4, #12]
 801fed2:	071b      	lsls	r3, r3, #28
 801fed4:	d502      	bpl.n	801fedc <_puts_r+0x30>
 801fed6:	6923      	ldr	r3, [r4, #16]
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d11f      	bne.n	801ff1c <_puts_r+0x70>
 801fedc:	0021      	movs	r1, r4
 801fede:	0028      	movs	r0, r5
 801fee0:	f000 f92a 	bl	8020138 <__swsetup_r>
 801fee4:	2800      	cmp	r0, #0
 801fee6:	d019      	beq.n	801ff1c <_puts_r+0x70>
 801fee8:	2501      	movs	r5, #1
 801feea:	426d      	negs	r5, r5
 801feec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801feee:	07db      	lsls	r3, r3, #31
 801fef0:	d405      	bmi.n	801fefe <_puts_r+0x52>
 801fef2:	89a3      	ldrh	r3, [r4, #12]
 801fef4:	059b      	lsls	r3, r3, #22
 801fef6:	d402      	bmi.n	801fefe <_puts_r+0x52>
 801fef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fefa:	f000 fa4b 	bl	8020394 <__retarget_lock_release_recursive>
 801fefe:	0028      	movs	r0, r5
 801ff00:	bd70      	pop	{r4, r5, r6, pc}
 801ff02:	3601      	adds	r6, #1
 801ff04:	60a3      	str	r3, [r4, #8]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	da04      	bge.n	801ff14 <_puts_r+0x68>
 801ff0a:	69a2      	ldr	r2, [r4, #24]
 801ff0c:	429a      	cmp	r2, r3
 801ff0e:	dc16      	bgt.n	801ff3e <_puts_r+0x92>
 801ff10:	290a      	cmp	r1, #10
 801ff12:	d014      	beq.n	801ff3e <_puts_r+0x92>
 801ff14:	6823      	ldr	r3, [r4, #0]
 801ff16:	1c5a      	adds	r2, r3, #1
 801ff18:	6022      	str	r2, [r4, #0]
 801ff1a:	7019      	strb	r1, [r3, #0]
 801ff1c:	68a3      	ldr	r3, [r4, #8]
 801ff1e:	7831      	ldrb	r1, [r6, #0]
 801ff20:	3b01      	subs	r3, #1
 801ff22:	2900      	cmp	r1, #0
 801ff24:	d1ed      	bne.n	801ff02 <_puts_r+0x56>
 801ff26:	60a3      	str	r3, [r4, #8]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	da0f      	bge.n	801ff4c <_puts_r+0xa0>
 801ff2c:	0022      	movs	r2, r4
 801ff2e:	0028      	movs	r0, r5
 801ff30:	310a      	adds	r1, #10
 801ff32:	f000 f8bf 	bl	80200b4 <__swbuf_r>
 801ff36:	3001      	adds	r0, #1
 801ff38:	d0d6      	beq.n	801fee8 <_puts_r+0x3c>
 801ff3a:	250a      	movs	r5, #10
 801ff3c:	e7d6      	b.n	801feec <_puts_r+0x40>
 801ff3e:	0022      	movs	r2, r4
 801ff40:	0028      	movs	r0, r5
 801ff42:	f000 f8b7 	bl	80200b4 <__swbuf_r>
 801ff46:	3001      	adds	r0, #1
 801ff48:	d1e8      	bne.n	801ff1c <_puts_r+0x70>
 801ff4a:	e7cd      	b.n	801fee8 <_puts_r+0x3c>
 801ff4c:	6823      	ldr	r3, [r4, #0]
 801ff4e:	1c5a      	adds	r2, r3, #1
 801ff50:	6022      	str	r2, [r4, #0]
 801ff52:	220a      	movs	r2, #10
 801ff54:	701a      	strb	r2, [r3, #0]
 801ff56:	e7f0      	b.n	801ff3a <_puts_r+0x8e>

0801ff58 <puts>:
 801ff58:	b510      	push	{r4, lr}
 801ff5a:	4b03      	ldr	r3, [pc, #12]	@ (801ff68 <puts+0x10>)
 801ff5c:	0001      	movs	r1, r0
 801ff5e:	6818      	ldr	r0, [r3, #0]
 801ff60:	f7ff ffa4 	bl	801feac <_puts_r>
 801ff64:	bd10      	pop	{r4, pc}
 801ff66:	46c0      	nop			@ (mov r8, r8)
 801ff68:	200003d4 	.word	0x200003d4

0801ff6c <siprintf>:
 801ff6c:	b40e      	push	{r1, r2, r3}
 801ff6e:	b500      	push	{lr}
 801ff70:	490b      	ldr	r1, [pc, #44]	@ (801ffa0 <siprintf+0x34>)
 801ff72:	b09c      	sub	sp, #112	@ 0x70
 801ff74:	ab1d      	add	r3, sp, #116	@ 0x74
 801ff76:	9002      	str	r0, [sp, #8]
 801ff78:	9006      	str	r0, [sp, #24]
 801ff7a:	9107      	str	r1, [sp, #28]
 801ff7c:	9104      	str	r1, [sp, #16]
 801ff7e:	4809      	ldr	r0, [pc, #36]	@ (801ffa4 <siprintf+0x38>)
 801ff80:	4909      	ldr	r1, [pc, #36]	@ (801ffa8 <siprintf+0x3c>)
 801ff82:	cb04      	ldmia	r3!, {r2}
 801ff84:	9105      	str	r1, [sp, #20]
 801ff86:	6800      	ldr	r0, [r0, #0]
 801ff88:	a902      	add	r1, sp, #8
 801ff8a:	9301      	str	r3, [sp, #4]
 801ff8c:	f002 fa4a 	bl	8022424 <_svfiprintf_r>
 801ff90:	2200      	movs	r2, #0
 801ff92:	9b02      	ldr	r3, [sp, #8]
 801ff94:	701a      	strb	r2, [r3, #0]
 801ff96:	b01c      	add	sp, #112	@ 0x70
 801ff98:	bc08      	pop	{r3}
 801ff9a:	b003      	add	sp, #12
 801ff9c:	4718      	bx	r3
 801ff9e:	46c0      	nop			@ (mov r8, r8)
 801ffa0:	7fffffff 	.word	0x7fffffff
 801ffa4:	200003d4 	.word	0x200003d4
 801ffa8:	ffff0208 	.word	0xffff0208

0801ffac <__sread>:
 801ffac:	b570      	push	{r4, r5, r6, lr}
 801ffae:	000c      	movs	r4, r1
 801ffb0:	250e      	movs	r5, #14
 801ffb2:	5f49      	ldrsh	r1, [r1, r5]
 801ffb4:	f000 f99a 	bl	80202ec <_read_r>
 801ffb8:	2800      	cmp	r0, #0
 801ffba:	db03      	blt.n	801ffc4 <__sread+0x18>
 801ffbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ffbe:	181b      	adds	r3, r3, r0
 801ffc0:	6563      	str	r3, [r4, #84]	@ 0x54
 801ffc2:	bd70      	pop	{r4, r5, r6, pc}
 801ffc4:	89a3      	ldrh	r3, [r4, #12]
 801ffc6:	4a02      	ldr	r2, [pc, #8]	@ (801ffd0 <__sread+0x24>)
 801ffc8:	4013      	ands	r3, r2
 801ffca:	81a3      	strh	r3, [r4, #12]
 801ffcc:	e7f9      	b.n	801ffc2 <__sread+0x16>
 801ffce:	46c0      	nop			@ (mov r8, r8)
 801ffd0:	ffffefff 	.word	0xffffefff

0801ffd4 <__swrite>:
 801ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffd6:	001f      	movs	r7, r3
 801ffd8:	898b      	ldrh	r3, [r1, #12]
 801ffda:	0005      	movs	r5, r0
 801ffdc:	000c      	movs	r4, r1
 801ffde:	0016      	movs	r6, r2
 801ffe0:	05db      	lsls	r3, r3, #23
 801ffe2:	d505      	bpl.n	801fff0 <__swrite+0x1c>
 801ffe4:	230e      	movs	r3, #14
 801ffe6:	5ec9      	ldrsh	r1, [r1, r3]
 801ffe8:	2200      	movs	r2, #0
 801ffea:	2302      	movs	r3, #2
 801ffec:	f000 f96a 	bl	80202c4 <_lseek_r>
 801fff0:	89a3      	ldrh	r3, [r4, #12]
 801fff2:	4a05      	ldr	r2, [pc, #20]	@ (8020008 <__swrite+0x34>)
 801fff4:	0028      	movs	r0, r5
 801fff6:	4013      	ands	r3, r2
 801fff8:	81a3      	strh	r3, [r4, #12]
 801fffa:	0032      	movs	r2, r6
 801fffc:	230e      	movs	r3, #14
 801fffe:	5ee1      	ldrsh	r1, [r4, r3]
 8020000:	003b      	movs	r3, r7
 8020002:	f000 f987 	bl	8020314 <_write_r>
 8020006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020008:	ffffefff 	.word	0xffffefff

0802000c <__sseek>:
 802000c:	b570      	push	{r4, r5, r6, lr}
 802000e:	000c      	movs	r4, r1
 8020010:	250e      	movs	r5, #14
 8020012:	5f49      	ldrsh	r1, [r1, r5]
 8020014:	f000 f956 	bl	80202c4 <_lseek_r>
 8020018:	89a3      	ldrh	r3, [r4, #12]
 802001a:	1c42      	adds	r2, r0, #1
 802001c:	d103      	bne.n	8020026 <__sseek+0x1a>
 802001e:	4a05      	ldr	r2, [pc, #20]	@ (8020034 <__sseek+0x28>)
 8020020:	4013      	ands	r3, r2
 8020022:	81a3      	strh	r3, [r4, #12]
 8020024:	bd70      	pop	{r4, r5, r6, pc}
 8020026:	2280      	movs	r2, #128	@ 0x80
 8020028:	0152      	lsls	r2, r2, #5
 802002a:	4313      	orrs	r3, r2
 802002c:	81a3      	strh	r3, [r4, #12]
 802002e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020030:	e7f8      	b.n	8020024 <__sseek+0x18>
 8020032:	46c0      	nop			@ (mov r8, r8)
 8020034:	ffffefff 	.word	0xffffefff

08020038 <__sclose>:
 8020038:	b510      	push	{r4, lr}
 802003a:	230e      	movs	r3, #14
 802003c:	5ec9      	ldrsh	r1, [r1, r3]
 802003e:	f000 f92f 	bl	80202a0 <_close_r>
 8020042:	bd10      	pop	{r4, pc}

08020044 <_vsniprintf_r>:
 8020044:	b530      	push	{r4, r5, lr}
 8020046:	0014      	movs	r4, r2
 8020048:	0005      	movs	r5, r0
 802004a:	001a      	movs	r2, r3
 802004c:	b09b      	sub	sp, #108	@ 0x6c
 802004e:	2c00      	cmp	r4, #0
 8020050:	da05      	bge.n	802005e <_vsniprintf_r+0x1a>
 8020052:	238b      	movs	r3, #139	@ 0x8b
 8020054:	6003      	str	r3, [r0, #0]
 8020056:	2001      	movs	r0, #1
 8020058:	4240      	negs	r0, r0
 802005a:	b01b      	add	sp, #108	@ 0x6c
 802005c:	bd30      	pop	{r4, r5, pc}
 802005e:	2382      	movs	r3, #130	@ 0x82
 8020060:	4668      	mov	r0, sp
 8020062:	009b      	lsls	r3, r3, #2
 8020064:	8183      	strh	r3, [r0, #12]
 8020066:	2300      	movs	r3, #0
 8020068:	9100      	str	r1, [sp, #0]
 802006a:	9104      	str	r1, [sp, #16]
 802006c:	429c      	cmp	r4, r3
 802006e:	d000      	beq.n	8020072 <_vsniprintf_r+0x2e>
 8020070:	1e63      	subs	r3, r4, #1
 8020072:	9302      	str	r3, [sp, #8]
 8020074:	9305      	str	r3, [sp, #20]
 8020076:	2301      	movs	r3, #1
 8020078:	4669      	mov	r1, sp
 802007a:	425b      	negs	r3, r3
 802007c:	81cb      	strh	r3, [r1, #14]
 802007e:	0028      	movs	r0, r5
 8020080:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020082:	f002 f9cf 	bl	8022424 <_svfiprintf_r>
 8020086:	1c43      	adds	r3, r0, #1
 8020088:	da01      	bge.n	802008e <_vsniprintf_r+0x4a>
 802008a:	238b      	movs	r3, #139	@ 0x8b
 802008c:	602b      	str	r3, [r5, #0]
 802008e:	2c00      	cmp	r4, #0
 8020090:	d0e3      	beq.n	802005a <_vsniprintf_r+0x16>
 8020092:	2200      	movs	r2, #0
 8020094:	9b00      	ldr	r3, [sp, #0]
 8020096:	701a      	strb	r2, [r3, #0]
 8020098:	e7df      	b.n	802005a <_vsniprintf_r+0x16>
	...

0802009c <vsniprintf>:
 802009c:	b513      	push	{r0, r1, r4, lr}
 802009e:	4c04      	ldr	r4, [pc, #16]	@ (80200b0 <vsniprintf+0x14>)
 80200a0:	9300      	str	r3, [sp, #0]
 80200a2:	0013      	movs	r3, r2
 80200a4:	000a      	movs	r2, r1
 80200a6:	0001      	movs	r1, r0
 80200a8:	6820      	ldr	r0, [r4, #0]
 80200aa:	f7ff ffcb 	bl	8020044 <_vsniprintf_r>
 80200ae:	bd16      	pop	{r1, r2, r4, pc}
 80200b0:	200003d4 	.word	0x200003d4

080200b4 <__swbuf_r>:
 80200b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200b6:	0006      	movs	r6, r0
 80200b8:	000d      	movs	r5, r1
 80200ba:	0014      	movs	r4, r2
 80200bc:	2800      	cmp	r0, #0
 80200be:	d004      	beq.n	80200ca <__swbuf_r+0x16>
 80200c0:	6a03      	ldr	r3, [r0, #32]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d101      	bne.n	80200ca <__swbuf_r+0x16>
 80200c6:	f7ff fead 	bl	801fe24 <__sinit>
 80200ca:	69a3      	ldr	r3, [r4, #24]
 80200cc:	60a3      	str	r3, [r4, #8]
 80200ce:	89a3      	ldrh	r3, [r4, #12]
 80200d0:	071b      	lsls	r3, r3, #28
 80200d2:	d502      	bpl.n	80200da <__swbuf_r+0x26>
 80200d4:	6923      	ldr	r3, [r4, #16]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d109      	bne.n	80200ee <__swbuf_r+0x3a>
 80200da:	0021      	movs	r1, r4
 80200dc:	0030      	movs	r0, r6
 80200de:	f000 f82b 	bl	8020138 <__swsetup_r>
 80200e2:	2800      	cmp	r0, #0
 80200e4:	d003      	beq.n	80200ee <__swbuf_r+0x3a>
 80200e6:	2501      	movs	r5, #1
 80200e8:	426d      	negs	r5, r5
 80200ea:	0028      	movs	r0, r5
 80200ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80200ee:	6923      	ldr	r3, [r4, #16]
 80200f0:	6820      	ldr	r0, [r4, #0]
 80200f2:	b2ef      	uxtb	r7, r5
 80200f4:	1ac0      	subs	r0, r0, r3
 80200f6:	6963      	ldr	r3, [r4, #20]
 80200f8:	b2ed      	uxtb	r5, r5
 80200fa:	4283      	cmp	r3, r0
 80200fc:	dc05      	bgt.n	802010a <__swbuf_r+0x56>
 80200fe:	0021      	movs	r1, r4
 8020100:	0030      	movs	r0, r6
 8020102:	f002 fc57 	bl	80229b4 <_fflush_r>
 8020106:	2800      	cmp	r0, #0
 8020108:	d1ed      	bne.n	80200e6 <__swbuf_r+0x32>
 802010a:	68a3      	ldr	r3, [r4, #8]
 802010c:	3001      	adds	r0, #1
 802010e:	3b01      	subs	r3, #1
 8020110:	60a3      	str	r3, [r4, #8]
 8020112:	6823      	ldr	r3, [r4, #0]
 8020114:	1c5a      	adds	r2, r3, #1
 8020116:	6022      	str	r2, [r4, #0]
 8020118:	701f      	strb	r7, [r3, #0]
 802011a:	6963      	ldr	r3, [r4, #20]
 802011c:	4283      	cmp	r3, r0
 802011e:	d004      	beq.n	802012a <__swbuf_r+0x76>
 8020120:	89a3      	ldrh	r3, [r4, #12]
 8020122:	07db      	lsls	r3, r3, #31
 8020124:	d5e1      	bpl.n	80200ea <__swbuf_r+0x36>
 8020126:	2d0a      	cmp	r5, #10
 8020128:	d1df      	bne.n	80200ea <__swbuf_r+0x36>
 802012a:	0021      	movs	r1, r4
 802012c:	0030      	movs	r0, r6
 802012e:	f002 fc41 	bl	80229b4 <_fflush_r>
 8020132:	2800      	cmp	r0, #0
 8020134:	d0d9      	beq.n	80200ea <__swbuf_r+0x36>
 8020136:	e7d6      	b.n	80200e6 <__swbuf_r+0x32>

08020138 <__swsetup_r>:
 8020138:	4b2d      	ldr	r3, [pc, #180]	@ (80201f0 <__swsetup_r+0xb8>)
 802013a:	b570      	push	{r4, r5, r6, lr}
 802013c:	0005      	movs	r5, r0
 802013e:	6818      	ldr	r0, [r3, #0]
 8020140:	000c      	movs	r4, r1
 8020142:	2800      	cmp	r0, #0
 8020144:	d004      	beq.n	8020150 <__swsetup_r+0x18>
 8020146:	6a03      	ldr	r3, [r0, #32]
 8020148:	2b00      	cmp	r3, #0
 802014a:	d101      	bne.n	8020150 <__swsetup_r+0x18>
 802014c:	f7ff fe6a 	bl	801fe24 <__sinit>
 8020150:	230c      	movs	r3, #12
 8020152:	5ee2      	ldrsh	r2, [r4, r3]
 8020154:	0713      	lsls	r3, r2, #28
 8020156:	d423      	bmi.n	80201a0 <__swsetup_r+0x68>
 8020158:	06d3      	lsls	r3, r2, #27
 802015a:	d407      	bmi.n	802016c <__swsetup_r+0x34>
 802015c:	2309      	movs	r3, #9
 802015e:	602b      	str	r3, [r5, #0]
 8020160:	2340      	movs	r3, #64	@ 0x40
 8020162:	2001      	movs	r0, #1
 8020164:	4313      	orrs	r3, r2
 8020166:	81a3      	strh	r3, [r4, #12]
 8020168:	4240      	negs	r0, r0
 802016a:	e03a      	b.n	80201e2 <__swsetup_r+0xaa>
 802016c:	0752      	lsls	r2, r2, #29
 802016e:	d513      	bpl.n	8020198 <__swsetup_r+0x60>
 8020170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020172:	2900      	cmp	r1, #0
 8020174:	d008      	beq.n	8020188 <__swsetup_r+0x50>
 8020176:	0023      	movs	r3, r4
 8020178:	3344      	adds	r3, #68	@ 0x44
 802017a:	4299      	cmp	r1, r3
 802017c:	d002      	beq.n	8020184 <__swsetup_r+0x4c>
 802017e:	0028      	movs	r0, r5
 8020180:	f000 ffa6 	bl	80210d0 <_free_r>
 8020184:	2300      	movs	r3, #0
 8020186:	6363      	str	r3, [r4, #52]	@ 0x34
 8020188:	2224      	movs	r2, #36	@ 0x24
 802018a:	89a3      	ldrh	r3, [r4, #12]
 802018c:	4393      	bics	r3, r2
 802018e:	81a3      	strh	r3, [r4, #12]
 8020190:	2300      	movs	r3, #0
 8020192:	6063      	str	r3, [r4, #4]
 8020194:	6923      	ldr	r3, [r4, #16]
 8020196:	6023      	str	r3, [r4, #0]
 8020198:	2308      	movs	r3, #8
 802019a:	89a2      	ldrh	r2, [r4, #12]
 802019c:	4313      	orrs	r3, r2
 802019e:	81a3      	strh	r3, [r4, #12]
 80201a0:	6923      	ldr	r3, [r4, #16]
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d10b      	bne.n	80201be <__swsetup_r+0x86>
 80201a6:	21a0      	movs	r1, #160	@ 0xa0
 80201a8:	2280      	movs	r2, #128	@ 0x80
 80201aa:	89a3      	ldrh	r3, [r4, #12]
 80201ac:	0089      	lsls	r1, r1, #2
 80201ae:	0092      	lsls	r2, r2, #2
 80201b0:	400b      	ands	r3, r1
 80201b2:	4293      	cmp	r3, r2
 80201b4:	d003      	beq.n	80201be <__swsetup_r+0x86>
 80201b6:	0021      	movs	r1, r4
 80201b8:	0028      	movs	r0, r5
 80201ba:	f002 fc51 	bl	8022a60 <__smakebuf_r>
 80201be:	230c      	movs	r3, #12
 80201c0:	5ee2      	ldrsh	r2, [r4, r3]
 80201c2:	2101      	movs	r1, #1
 80201c4:	0013      	movs	r3, r2
 80201c6:	400b      	ands	r3, r1
 80201c8:	420a      	tst	r2, r1
 80201ca:	d00b      	beq.n	80201e4 <__swsetup_r+0xac>
 80201cc:	2300      	movs	r3, #0
 80201ce:	60a3      	str	r3, [r4, #8]
 80201d0:	6963      	ldr	r3, [r4, #20]
 80201d2:	425b      	negs	r3, r3
 80201d4:	61a3      	str	r3, [r4, #24]
 80201d6:	2000      	movs	r0, #0
 80201d8:	6923      	ldr	r3, [r4, #16]
 80201da:	4283      	cmp	r3, r0
 80201dc:	d101      	bne.n	80201e2 <__swsetup_r+0xaa>
 80201de:	0613      	lsls	r3, r2, #24
 80201e0:	d4be      	bmi.n	8020160 <__swsetup_r+0x28>
 80201e2:	bd70      	pop	{r4, r5, r6, pc}
 80201e4:	0791      	lsls	r1, r2, #30
 80201e6:	d400      	bmi.n	80201ea <__swsetup_r+0xb2>
 80201e8:	6963      	ldr	r3, [r4, #20]
 80201ea:	60a3      	str	r3, [r4, #8]
 80201ec:	e7f3      	b.n	80201d6 <__swsetup_r+0x9e>
 80201ee:	46c0      	nop			@ (mov r8, r8)
 80201f0:	200003d4 	.word	0x200003d4

080201f4 <memset>:
 80201f4:	0003      	movs	r3, r0
 80201f6:	1882      	adds	r2, r0, r2
 80201f8:	4293      	cmp	r3, r2
 80201fa:	d100      	bne.n	80201fe <memset+0xa>
 80201fc:	4770      	bx	lr
 80201fe:	7019      	strb	r1, [r3, #0]
 8020200:	3301      	adds	r3, #1
 8020202:	e7f9      	b.n	80201f8 <memset+0x4>

08020204 <strchr>:
 8020204:	b2c9      	uxtb	r1, r1
 8020206:	7803      	ldrb	r3, [r0, #0]
 8020208:	2b00      	cmp	r3, #0
 802020a:	d004      	beq.n	8020216 <strchr+0x12>
 802020c:	428b      	cmp	r3, r1
 802020e:	d100      	bne.n	8020212 <strchr+0xe>
 8020210:	4770      	bx	lr
 8020212:	3001      	adds	r0, #1
 8020214:	e7f7      	b.n	8020206 <strchr+0x2>
 8020216:	424b      	negs	r3, r1
 8020218:	4159      	adcs	r1, r3
 802021a:	4249      	negs	r1, r1
 802021c:	4008      	ands	r0, r1
 802021e:	e7f7      	b.n	8020210 <strchr+0xc>

08020220 <strncmp>:
 8020220:	b530      	push	{r4, r5, lr}
 8020222:	0005      	movs	r5, r0
 8020224:	1e10      	subs	r0, r2, #0
 8020226:	d00b      	beq.n	8020240 <strncmp+0x20>
 8020228:	2400      	movs	r4, #0
 802022a:	3a01      	subs	r2, #1
 802022c:	5d2b      	ldrb	r3, [r5, r4]
 802022e:	5d08      	ldrb	r0, [r1, r4]
 8020230:	4283      	cmp	r3, r0
 8020232:	d104      	bne.n	802023e <strncmp+0x1e>
 8020234:	42a2      	cmp	r2, r4
 8020236:	d002      	beq.n	802023e <strncmp+0x1e>
 8020238:	3401      	adds	r4, #1
 802023a:	2b00      	cmp	r3, #0
 802023c:	d1f6      	bne.n	802022c <strncmp+0xc>
 802023e:	1a18      	subs	r0, r3, r0
 8020240:	bd30      	pop	{r4, r5, pc}

08020242 <strncpy>:
 8020242:	0003      	movs	r3, r0
 8020244:	b530      	push	{r4, r5, lr}
 8020246:	001d      	movs	r5, r3
 8020248:	2a00      	cmp	r2, #0
 802024a:	d006      	beq.n	802025a <strncpy+0x18>
 802024c:	780c      	ldrb	r4, [r1, #0]
 802024e:	3a01      	subs	r2, #1
 8020250:	3301      	adds	r3, #1
 8020252:	702c      	strb	r4, [r5, #0]
 8020254:	3101      	adds	r1, #1
 8020256:	2c00      	cmp	r4, #0
 8020258:	d1f5      	bne.n	8020246 <strncpy+0x4>
 802025a:	2100      	movs	r1, #0
 802025c:	189a      	adds	r2, r3, r2
 802025e:	4293      	cmp	r3, r2
 8020260:	d100      	bne.n	8020264 <strncpy+0x22>
 8020262:	bd30      	pop	{r4, r5, pc}
 8020264:	7019      	strb	r1, [r3, #0]
 8020266:	3301      	adds	r3, #1
 8020268:	e7f9      	b.n	802025e <strncpy+0x1c>

0802026a <strstr>:
 802026a:	780a      	ldrb	r2, [r1, #0]
 802026c:	b530      	push	{r4, r5, lr}
 802026e:	2a00      	cmp	r2, #0
 8020270:	d10c      	bne.n	802028c <strstr+0x22>
 8020272:	bd30      	pop	{r4, r5, pc}
 8020274:	429a      	cmp	r2, r3
 8020276:	d108      	bne.n	802028a <strstr+0x20>
 8020278:	2301      	movs	r3, #1
 802027a:	5ccc      	ldrb	r4, [r1, r3]
 802027c:	2c00      	cmp	r4, #0
 802027e:	d0f8      	beq.n	8020272 <strstr+0x8>
 8020280:	5cc5      	ldrb	r5, [r0, r3]
 8020282:	42a5      	cmp	r5, r4
 8020284:	d101      	bne.n	802028a <strstr+0x20>
 8020286:	3301      	adds	r3, #1
 8020288:	e7f7      	b.n	802027a <strstr+0x10>
 802028a:	3001      	adds	r0, #1
 802028c:	7803      	ldrb	r3, [r0, #0]
 802028e:	2b00      	cmp	r3, #0
 8020290:	d1f0      	bne.n	8020274 <strstr+0xa>
 8020292:	0018      	movs	r0, r3
 8020294:	e7ed      	b.n	8020272 <strstr+0x8>
	...

08020298 <_localeconv_r>:
 8020298:	4800      	ldr	r0, [pc, #0]	@ (802029c <_localeconv_r+0x4>)
 802029a:	4770      	bx	lr
 802029c:	20000358 	.word	0x20000358

080202a0 <_close_r>:
 80202a0:	2300      	movs	r3, #0
 80202a2:	b570      	push	{r4, r5, r6, lr}
 80202a4:	4d06      	ldr	r5, [pc, #24]	@ (80202c0 <_close_r+0x20>)
 80202a6:	0004      	movs	r4, r0
 80202a8:	0008      	movs	r0, r1
 80202aa:	602b      	str	r3, [r5, #0]
 80202ac:	f7ed fca8 	bl	800dc00 <_close>
 80202b0:	1c43      	adds	r3, r0, #1
 80202b2:	d103      	bne.n	80202bc <_close_r+0x1c>
 80202b4:	682b      	ldr	r3, [r5, #0]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d000      	beq.n	80202bc <_close_r+0x1c>
 80202ba:	6023      	str	r3, [r4, #0]
 80202bc:	bd70      	pop	{r4, r5, r6, pc}
 80202be:	46c0      	nop			@ (mov r8, r8)
 80202c0:	200037b0 	.word	0x200037b0

080202c4 <_lseek_r>:
 80202c4:	b570      	push	{r4, r5, r6, lr}
 80202c6:	0004      	movs	r4, r0
 80202c8:	0008      	movs	r0, r1
 80202ca:	0011      	movs	r1, r2
 80202cc:	001a      	movs	r2, r3
 80202ce:	2300      	movs	r3, #0
 80202d0:	4d05      	ldr	r5, [pc, #20]	@ (80202e8 <_lseek_r+0x24>)
 80202d2:	602b      	str	r3, [r5, #0]
 80202d4:	f7ed fcb5 	bl	800dc42 <_lseek>
 80202d8:	1c43      	adds	r3, r0, #1
 80202da:	d103      	bne.n	80202e4 <_lseek_r+0x20>
 80202dc:	682b      	ldr	r3, [r5, #0]
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d000      	beq.n	80202e4 <_lseek_r+0x20>
 80202e2:	6023      	str	r3, [r4, #0]
 80202e4:	bd70      	pop	{r4, r5, r6, pc}
 80202e6:	46c0      	nop			@ (mov r8, r8)
 80202e8:	200037b0 	.word	0x200037b0

080202ec <_read_r>:
 80202ec:	b570      	push	{r4, r5, r6, lr}
 80202ee:	0004      	movs	r4, r0
 80202f0:	0008      	movs	r0, r1
 80202f2:	0011      	movs	r1, r2
 80202f4:	001a      	movs	r2, r3
 80202f6:	2300      	movs	r3, #0
 80202f8:	4d05      	ldr	r5, [pc, #20]	@ (8020310 <_read_r+0x24>)
 80202fa:	602b      	str	r3, [r5, #0]
 80202fc:	f7ed fc63 	bl	800dbc6 <_read>
 8020300:	1c43      	adds	r3, r0, #1
 8020302:	d103      	bne.n	802030c <_read_r+0x20>
 8020304:	682b      	ldr	r3, [r5, #0]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d000      	beq.n	802030c <_read_r+0x20>
 802030a:	6023      	str	r3, [r4, #0]
 802030c:	bd70      	pop	{r4, r5, r6, pc}
 802030e:	46c0      	nop			@ (mov r8, r8)
 8020310:	200037b0 	.word	0x200037b0

08020314 <_write_r>:
 8020314:	b570      	push	{r4, r5, r6, lr}
 8020316:	0004      	movs	r4, r0
 8020318:	0008      	movs	r0, r1
 802031a:	0011      	movs	r1, r2
 802031c:	001a      	movs	r2, r3
 802031e:	2300      	movs	r3, #0
 8020320:	4d05      	ldr	r5, [pc, #20]	@ (8020338 <_write_r+0x24>)
 8020322:	602b      	str	r3, [r5, #0]
 8020324:	f7ee f924 	bl	800e570 <_write>
 8020328:	1c43      	adds	r3, r0, #1
 802032a:	d103      	bne.n	8020334 <_write_r+0x20>
 802032c:	682b      	ldr	r3, [r5, #0]
 802032e:	2b00      	cmp	r3, #0
 8020330:	d000      	beq.n	8020334 <_write_r+0x20>
 8020332:	6023      	str	r3, [r4, #0]
 8020334:	bd70      	pop	{r4, r5, r6, pc}
 8020336:	46c0      	nop			@ (mov r8, r8)
 8020338:	200037b0 	.word	0x200037b0

0802033c <__errno>:
 802033c:	4b01      	ldr	r3, [pc, #4]	@ (8020344 <__errno+0x8>)
 802033e:	6818      	ldr	r0, [r3, #0]
 8020340:	4770      	bx	lr
 8020342:	46c0      	nop			@ (mov r8, r8)
 8020344:	200003d4 	.word	0x200003d4

08020348 <__libc_init_array>:
 8020348:	b570      	push	{r4, r5, r6, lr}
 802034a:	2600      	movs	r6, #0
 802034c:	4c0c      	ldr	r4, [pc, #48]	@ (8020380 <__libc_init_array+0x38>)
 802034e:	4d0d      	ldr	r5, [pc, #52]	@ (8020384 <__libc_init_array+0x3c>)
 8020350:	1b64      	subs	r4, r4, r5
 8020352:	10a4      	asrs	r4, r4, #2
 8020354:	42a6      	cmp	r6, r4
 8020356:	d109      	bne.n	802036c <__libc_init_array+0x24>
 8020358:	2600      	movs	r6, #0
 802035a:	f002 fee9 	bl	8023130 <_init>
 802035e:	4c0a      	ldr	r4, [pc, #40]	@ (8020388 <__libc_init_array+0x40>)
 8020360:	4d0a      	ldr	r5, [pc, #40]	@ (802038c <__libc_init_array+0x44>)
 8020362:	1b64      	subs	r4, r4, r5
 8020364:	10a4      	asrs	r4, r4, #2
 8020366:	42a6      	cmp	r6, r4
 8020368:	d105      	bne.n	8020376 <__libc_init_array+0x2e>
 802036a:	bd70      	pop	{r4, r5, r6, pc}
 802036c:	00b3      	lsls	r3, r6, #2
 802036e:	58eb      	ldr	r3, [r5, r3]
 8020370:	4798      	blx	r3
 8020372:	3601      	adds	r6, #1
 8020374:	e7ee      	b.n	8020354 <__libc_init_array+0xc>
 8020376:	00b3      	lsls	r3, r6, #2
 8020378:	58eb      	ldr	r3, [r5, r3]
 802037a:	4798      	blx	r3
 802037c:	3601      	adds	r6, #1
 802037e:	e7f2      	b.n	8020366 <__libc_init_array+0x1e>
 8020380:	08026000 	.word	0x08026000
 8020384:	08026000 	.word	0x08026000
 8020388:	08026004 	.word	0x08026004
 802038c:	08026000 	.word	0x08026000

08020390 <__retarget_lock_init_recursive>:
 8020390:	4770      	bx	lr

08020392 <__retarget_lock_acquire_recursive>:
 8020392:	4770      	bx	lr

08020394 <__retarget_lock_release_recursive>:
 8020394:	4770      	bx	lr

08020396 <memchr>:
 8020396:	b2c9      	uxtb	r1, r1
 8020398:	1882      	adds	r2, r0, r2
 802039a:	4290      	cmp	r0, r2
 802039c:	d101      	bne.n	80203a2 <memchr+0xc>
 802039e:	2000      	movs	r0, #0
 80203a0:	4770      	bx	lr
 80203a2:	7803      	ldrb	r3, [r0, #0]
 80203a4:	428b      	cmp	r3, r1
 80203a6:	d0fb      	beq.n	80203a0 <memchr+0xa>
 80203a8:	3001      	adds	r0, #1
 80203aa:	e7f6      	b.n	802039a <memchr+0x4>

080203ac <memcpy>:
 80203ac:	2300      	movs	r3, #0
 80203ae:	b510      	push	{r4, lr}
 80203b0:	429a      	cmp	r2, r3
 80203b2:	d100      	bne.n	80203b6 <memcpy+0xa>
 80203b4:	bd10      	pop	{r4, pc}
 80203b6:	5ccc      	ldrb	r4, [r1, r3]
 80203b8:	54c4      	strb	r4, [r0, r3]
 80203ba:	3301      	adds	r3, #1
 80203bc:	e7f8      	b.n	80203b0 <memcpy+0x4>
	...

080203c0 <nan>:
 80203c0:	2000      	movs	r0, #0
 80203c2:	4901      	ldr	r1, [pc, #4]	@ (80203c8 <nan+0x8>)
 80203c4:	4770      	bx	lr
 80203c6:	46c0      	nop			@ (mov r8, r8)
 80203c8:	7ff80000 	.word	0x7ff80000

080203cc <quorem>:
 80203cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203ce:	6902      	ldr	r2, [r0, #16]
 80203d0:	690f      	ldr	r7, [r1, #16]
 80203d2:	b087      	sub	sp, #28
 80203d4:	0006      	movs	r6, r0
 80203d6:	000b      	movs	r3, r1
 80203d8:	2000      	movs	r0, #0
 80203da:	9102      	str	r1, [sp, #8]
 80203dc:	42ba      	cmp	r2, r7
 80203de:	db6d      	blt.n	80204bc <quorem+0xf0>
 80203e0:	3f01      	subs	r7, #1
 80203e2:	00bc      	lsls	r4, r7, #2
 80203e4:	3314      	adds	r3, #20
 80203e6:	9305      	str	r3, [sp, #20]
 80203e8:	191b      	adds	r3, r3, r4
 80203ea:	9303      	str	r3, [sp, #12]
 80203ec:	0033      	movs	r3, r6
 80203ee:	3314      	adds	r3, #20
 80203f0:	191c      	adds	r4, r3, r4
 80203f2:	9301      	str	r3, [sp, #4]
 80203f4:	6823      	ldr	r3, [r4, #0]
 80203f6:	9304      	str	r3, [sp, #16]
 80203f8:	9b03      	ldr	r3, [sp, #12]
 80203fa:	9804      	ldr	r0, [sp, #16]
 80203fc:	681d      	ldr	r5, [r3, #0]
 80203fe:	3501      	adds	r5, #1
 8020400:	0029      	movs	r1, r5
 8020402:	f7df fecf 	bl	80001a4 <__udivsi3>
 8020406:	9b04      	ldr	r3, [sp, #16]
 8020408:	9000      	str	r0, [sp, #0]
 802040a:	42ab      	cmp	r3, r5
 802040c:	d32b      	bcc.n	8020466 <quorem+0x9a>
 802040e:	9b05      	ldr	r3, [sp, #20]
 8020410:	9d01      	ldr	r5, [sp, #4]
 8020412:	469c      	mov	ip, r3
 8020414:	2300      	movs	r3, #0
 8020416:	9305      	str	r3, [sp, #20]
 8020418:	9304      	str	r3, [sp, #16]
 802041a:	4662      	mov	r2, ip
 802041c:	ca08      	ldmia	r2!, {r3}
 802041e:	6828      	ldr	r0, [r5, #0]
 8020420:	4694      	mov	ip, r2
 8020422:	9a00      	ldr	r2, [sp, #0]
 8020424:	b299      	uxth	r1, r3
 8020426:	4351      	muls	r1, r2
 8020428:	9a05      	ldr	r2, [sp, #20]
 802042a:	0c1b      	lsrs	r3, r3, #16
 802042c:	1889      	adds	r1, r1, r2
 802042e:	9a00      	ldr	r2, [sp, #0]
 8020430:	4353      	muls	r3, r2
 8020432:	0c0a      	lsrs	r2, r1, #16
 8020434:	189b      	adds	r3, r3, r2
 8020436:	0c1a      	lsrs	r2, r3, #16
 8020438:	b289      	uxth	r1, r1
 802043a:	9205      	str	r2, [sp, #20]
 802043c:	b282      	uxth	r2, r0
 802043e:	1a52      	subs	r2, r2, r1
 8020440:	9904      	ldr	r1, [sp, #16]
 8020442:	0c00      	lsrs	r0, r0, #16
 8020444:	1852      	adds	r2, r2, r1
 8020446:	b29b      	uxth	r3, r3
 8020448:	1411      	asrs	r1, r2, #16
 802044a:	1ac3      	subs	r3, r0, r3
 802044c:	185b      	adds	r3, r3, r1
 802044e:	1419      	asrs	r1, r3, #16
 8020450:	b292      	uxth	r2, r2
 8020452:	041b      	lsls	r3, r3, #16
 8020454:	431a      	orrs	r2, r3
 8020456:	9b03      	ldr	r3, [sp, #12]
 8020458:	9104      	str	r1, [sp, #16]
 802045a:	c504      	stmia	r5!, {r2}
 802045c:	4563      	cmp	r3, ip
 802045e:	d2dc      	bcs.n	802041a <quorem+0x4e>
 8020460:	6823      	ldr	r3, [r4, #0]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d030      	beq.n	80204c8 <quorem+0xfc>
 8020466:	0030      	movs	r0, r6
 8020468:	9902      	ldr	r1, [sp, #8]
 802046a:	f001 fd7d 	bl	8021f68 <__mcmp>
 802046e:	2800      	cmp	r0, #0
 8020470:	db23      	blt.n	80204ba <quorem+0xee>
 8020472:	0034      	movs	r4, r6
 8020474:	2500      	movs	r5, #0
 8020476:	9902      	ldr	r1, [sp, #8]
 8020478:	3414      	adds	r4, #20
 802047a:	3114      	adds	r1, #20
 802047c:	6823      	ldr	r3, [r4, #0]
 802047e:	c901      	ldmia	r1!, {r0}
 8020480:	9302      	str	r3, [sp, #8]
 8020482:	466b      	mov	r3, sp
 8020484:	891b      	ldrh	r3, [r3, #8]
 8020486:	b282      	uxth	r2, r0
 8020488:	1a9a      	subs	r2, r3, r2
 802048a:	9b02      	ldr	r3, [sp, #8]
 802048c:	1952      	adds	r2, r2, r5
 802048e:	0c00      	lsrs	r0, r0, #16
 8020490:	0c1b      	lsrs	r3, r3, #16
 8020492:	1a1b      	subs	r3, r3, r0
 8020494:	1410      	asrs	r0, r2, #16
 8020496:	181b      	adds	r3, r3, r0
 8020498:	141d      	asrs	r5, r3, #16
 802049a:	b292      	uxth	r2, r2
 802049c:	041b      	lsls	r3, r3, #16
 802049e:	431a      	orrs	r2, r3
 80204a0:	9b03      	ldr	r3, [sp, #12]
 80204a2:	c404      	stmia	r4!, {r2}
 80204a4:	428b      	cmp	r3, r1
 80204a6:	d2e9      	bcs.n	802047c <quorem+0xb0>
 80204a8:	9a01      	ldr	r2, [sp, #4]
 80204aa:	00bb      	lsls	r3, r7, #2
 80204ac:	18d3      	adds	r3, r2, r3
 80204ae:	681a      	ldr	r2, [r3, #0]
 80204b0:	2a00      	cmp	r2, #0
 80204b2:	d013      	beq.n	80204dc <quorem+0x110>
 80204b4:	9b00      	ldr	r3, [sp, #0]
 80204b6:	3301      	adds	r3, #1
 80204b8:	9300      	str	r3, [sp, #0]
 80204ba:	9800      	ldr	r0, [sp, #0]
 80204bc:	b007      	add	sp, #28
 80204be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204c0:	6823      	ldr	r3, [r4, #0]
 80204c2:	2b00      	cmp	r3, #0
 80204c4:	d104      	bne.n	80204d0 <quorem+0x104>
 80204c6:	3f01      	subs	r7, #1
 80204c8:	9b01      	ldr	r3, [sp, #4]
 80204ca:	3c04      	subs	r4, #4
 80204cc:	42a3      	cmp	r3, r4
 80204ce:	d3f7      	bcc.n	80204c0 <quorem+0xf4>
 80204d0:	6137      	str	r7, [r6, #16]
 80204d2:	e7c8      	b.n	8020466 <quorem+0x9a>
 80204d4:	681a      	ldr	r2, [r3, #0]
 80204d6:	2a00      	cmp	r2, #0
 80204d8:	d104      	bne.n	80204e4 <quorem+0x118>
 80204da:	3f01      	subs	r7, #1
 80204dc:	9a01      	ldr	r2, [sp, #4]
 80204de:	3b04      	subs	r3, #4
 80204e0:	429a      	cmp	r2, r3
 80204e2:	d3f7      	bcc.n	80204d4 <quorem+0x108>
 80204e4:	6137      	str	r7, [r6, #16]
 80204e6:	e7e5      	b.n	80204b4 <quorem+0xe8>

080204e8 <_dtoa_r>:
 80204e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204ea:	0014      	movs	r4, r2
 80204ec:	001d      	movs	r5, r3
 80204ee:	69c6      	ldr	r6, [r0, #28]
 80204f0:	b09d      	sub	sp, #116	@ 0x74
 80204f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80204f4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80204f6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80204f8:	9003      	str	r0, [sp, #12]
 80204fa:	2e00      	cmp	r6, #0
 80204fc:	d10f      	bne.n	802051e <_dtoa_r+0x36>
 80204fe:	2010      	movs	r0, #16
 8020500:	f001 f98a 	bl	8021818 <malloc>
 8020504:	9b03      	ldr	r3, [sp, #12]
 8020506:	1e02      	subs	r2, r0, #0
 8020508:	61d8      	str	r0, [r3, #28]
 802050a:	d104      	bne.n	8020516 <_dtoa_r+0x2e>
 802050c:	21ef      	movs	r1, #239	@ 0xef
 802050e:	4bc7      	ldr	r3, [pc, #796]	@ (802082c <_dtoa_r+0x344>)
 8020510:	48c7      	ldr	r0, [pc, #796]	@ (8020830 <_dtoa_r+0x348>)
 8020512:	f002 fb2f 	bl	8022b74 <__assert_func>
 8020516:	6046      	str	r6, [r0, #4]
 8020518:	6086      	str	r6, [r0, #8]
 802051a:	6006      	str	r6, [r0, #0]
 802051c:	60c6      	str	r6, [r0, #12]
 802051e:	9b03      	ldr	r3, [sp, #12]
 8020520:	69db      	ldr	r3, [r3, #28]
 8020522:	6819      	ldr	r1, [r3, #0]
 8020524:	2900      	cmp	r1, #0
 8020526:	d00b      	beq.n	8020540 <_dtoa_r+0x58>
 8020528:	685a      	ldr	r2, [r3, #4]
 802052a:	2301      	movs	r3, #1
 802052c:	4093      	lsls	r3, r2
 802052e:	604a      	str	r2, [r1, #4]
 8020530:	608b      	str	r3, [r1, #8]
 8020532:	9803      	ldr	r0, [sp, #12]
 8020534:	f001 fa82 	bl	8021a3c <_Bfree>
 8020538:	2200      	movs	r2, #0
 802053a:	9b03      	ldr	r3, [sp, #12]
 802053c:	69db      	ldr	r3, [r3, #28]
 802053e:	601a      	str	r2, [r3, #0]
 8020540:	2d00      	cmp	r5, #0
 8020542:	da1e      	bge.n	8020582 <_dtoa_r+0x9a>
 8020544:	2301      	movs	r3, #1
 8020546:	603b      	str	r3, [r7, #0]
 8020548:	006b      	lsls	r3, r5, #1
 802054a:	085b      	lsrs	r3, r3, #1
 802054c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802054e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020550:	4bb8      	ldr	r3, [pc, #736]	@ (8020834 <_dtoa_r+0x34c>)
 8020552:	4ab8      	ldr	r2, [pc, #736]	@ (8020834 <_dtoa_r+0x34c>)
 8020554:	403b      	ands	r3, r7
 8020556:	4293      	cmp	r3, r2
 8020558:	d116      	bne.n	8020588 <_dtoa_r+0xa0>
 802055a:	4bb7      	ldr	r3, [pc, #732]	@ (8020838 <_dtoa_r+0x350>)
 802055c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802055e:	6013      	str	r3, [r2, #0]
 8020560:	033b      	lsls	r3, r7, #12
 8020562:	0b1b      	lsrs	r3, r3, #12
 8020564:	4323      	orrs	r3, r4
 8020566:	d101      	bne.n	802056c <_dtoa_r+0x84>
 8020568:	f000 fd83 	bl	8021072 <_dtoa_r+0xb8a>
 802056c:	4bb3      	ldr	r3, [pc, #716]	@ (802083c <_dtoa_r+0x354>)
 802056e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020570:	9308      	str	r3, [sp, #32]
 8020572:	2a00      	cmp	r2, #0
 8020574:	d002      	beq.n	802057c <_dtoa_r+0x94>
 8020576:	4bb2      	ldr	r3, [pc, #712]	@ (8020840 <_dtoa_r+0x358>)
 8020578:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802057a:	6013      	str	r3, [r2, #0]
 802057c:	9808      	ldr	r0, [sp, #32]
 802057e:	b01d      	add	sp, #116	@ 0x74
 8020580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020582:	2300      	movs	r3, #0
 8020584:	603b      	str	r3, [r7, #0]
 8020586:	e7e2      	b.n	802054e <_dtoa_r+0x66>
 8020588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802058a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802058c:	9212      	str	r2, [sp, #72]	@ 0x48
 802058e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020590:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020592:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020594:	2200      	movs	r2, #0
 8020596:	2300      	movs	r3, #0
 8020598:	f7df ff8a 	bl	80004b0 <__aeabi_dcmpeq>
 802059c:	1e06      	subs	r6, r0, #0
 802059e:	d00b      	beq.n	80205b8 <_dtoa_r+0xd0>
 80205a0:	2301      	movs	r3, #1
 80205a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80205a4:	6013      	str	r3, [r2, #0]
 80205a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d002      	beq.n	80205b2 <_dtoa_r+0xca>
 80205ac:	4ba5      	ldr	r3, [pc, #660]	@ (8020844 <_dtoa_r+0x35c>)
 80205ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80205b0:	6013      	str	r3, [r2, #0]
 80205b2:	4ba5      	ldr	r3, [pc, #660]	@ (8020848 <_dtoa_r+0x360>)
 80205b4:	9308      	str	r3, [sp, #32]
 80205b6:	e7e1      	b.n	802057c <_dtoa_r+0x94>
 80205b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80205ba:	9301      	str	r3, [sp, #4]
 80205bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80205be:	9300      	str	r3, [sp, #0]
 80205c0:	9803      	ldr	r0, [sp, #12]
 80205c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80205c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80205c6:	f001 fdf1 	bl	80221ac <__d2b>
 80205ca:	007a      	lsls	r2, r7, #1
 80205cc:	9005      	str	r0, [sp, #20]
 80205ce:	0d52      	lsrs	r2, r2, #21
 80205d0:	d100      	bne.n	80205d4 <_dtoa_r+0xec>
 80205d2:	e07b      	b.n	80206cc <_dtoa_r+0x1e4>
 80205d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80205d6:	9618      	str	r6, [sp, #96]	@ 0x60
 80205d8:	0319      	lsls	r1, r3, #12
 80205da:	4b9c      	ldr	r3, [pc, #624]	@ (802084c <_dtoa_r+0x364>)
 80205dc:	0b09      	lsrs	r1, r1, #12
 80205de:	430b      	orrs	r3, r1
 80205e0:	499b      	ldr	r1, [pc, #620]	@ (8020850 <_dtoa_r+0x368>)
 80205e2:	1857      	adds	r7, r2, r1
 80205e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80205e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80205e8:	0019      	movs	r1, r3
 80205ea:	2200      	movs	r2, #0
 80205ec:	4b99      	ldr	r3, [pc, #612]	@ (8020854 <_dtoa_r+0x36c>)
 80205ee:	f7e2 faed 	bl	8002bcc <__aeabi_dsub>
 80205f2:	4a99      	ldr	r2, [pc, #612]	@ (8020858 <_dtoa_r+0x370>)
 80205f4:	4b99      	ldr	r3, [pc, #612]	@ (802085c <_dtoa_r+0x374>)
 80205f6:	f7e2 f821 	bl	800263c <__aeabi_dmul>
 80205fa:	4a99      	ldr	r2, [pc, #612]	@ (8020860 <_dtoa_r+0x378>)
 80205fc:	4b99      	ldr	r3, [pc, #612]	@ (8020864 <_dtoa_r+0x37c>)
 80205fe:	f7e1 f875 	bl	80016ec <__aeabi_dadd>
 8020602:	0004      	movs	r4, r0
 8020604:	0038      	movs	r0, r7
 8020606:	000d      	movs	r5, r1
 8020608:	f7e2 feda 	bl	80033c0 <__aeabi_i2d>
 802060c:	4a96      	ldr	r2, [pc, #600]	@ (8020868 <_dtoa_r+0x380>)
 802060e:	4b97      	ldr	r3, [pc, #604]	@ (802086c <_dtoa_r+0x384>)
 8020610:	f7e2 f814 	bl	800263c <__aeabi_dmul>
 8020614:	0002      	movs	r2, r0
 8020616:	000b      	movs	r3, r1
 8020618:	0020      	movs	r0, r4
 802061a:	0029      	movs	r1, r5
 802061c:	f7e1 f866 	bl	80016ec <__aeabi_dadd>
 8020620:	0004      	movs	r4, r0
 8020622:	000d      	movs	r5, r1
 8020624:	f7e2 fe90 	bl	8003348 <__aeabi_d2iz>
 8020628:	2200      	movs	r2, #0
 802062a:	9004      	str	r0, [sp, #16]
 802062c:	2300      	movs	r3, #0
 802062e:	0020      	movs	r0, r4
 8020630:	0029      	movs	r1, r5
 8020632:	f7df ff43 	bl	80004bc <__aeabi_dcmplt>
 8020636:	2800      	cmp	r0, #0
 8020638:	d00b      	beq.n	8020652 <_dtoa_r+0x16a>
 802063a:	9804      	ldr	r0, [sp, #16]
 802063c:	f7e2 fec0 	bl	80033c0 <__aeabi_i2d>
 8020640:	002b      	movs	r3, r5
 8020642:	0022      	movs	r2, r4
 8020644:	f7df ff34 	bl	80004b0 <__aeabi_dcmpeq>
 8020648:	4243      	negs	r3, r0
 802064a:	4158      	adcs	r0, r3
 802064c:	9b04      	ldr	r3, [sp, #16]
 802064e:	1a1b      	subs	r3, r3, r0
 8020650:	9304      	str	r3, [sp, #16]
 8020652:	2301      	movs	r3, #1
 8020654:	9315      	str	r3, [sp, #84]	@ 0x54
 8020656:	9b04      	ldr	r3, [sp, #16]
 8020658:	2b16      	cmp	r3, #22
 802065a:	d810      	bhi.n	802067e <_dtoa_r+0x196>
 802065c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802065e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020660:	9a04      	ldr	r2, [sp, #16]
 8020662:	4b83      	ldr	r3, [pc, #524]	@ (8020870 <_dtoa_r+0x388>)
 8020664:	00d2      	lsls	r2, r2, #3
 8020666:	189b      	adds	r3, r3, r2
 8020668:	681a      	ldr	r2, [r3, #0]
 802066a:	685b      	ldr	r3, [r3, #4]
 802066c:	f7df ff26 	bl	80004bc <__aeabi_dcmplt>
 8020670:	2800      	cmp	r0, #0
 8020672:	d047      	beq.n	8020704 <_dtoa_r+0x21c>
 8020674:	9b04      	ldr	r3, [sp, #16]
 8020676:	3b01      	subs	r3, #1
 8020678:	9304      	str	r3, [sp, #16]
 802067a:	2300      	movs	r3, #0
 802067c:	9315      	str	r3, [sp, #84]	@ 0x54
 802067e:	2200      	movs	r2, #0
 8020680:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020682:	9206      	str	r2, [sp, #24]
 8020684:	1bdb      	subs	r3, r3, r7
 8020686:	1e5a      	subs	r2, r3, #1
 8020688:	d53e      	bpl.n	8020708 <_dtoa_r+0x220>
 802068a:	2201      	movs	r2, #1
 802068c:	1ad3      	subs	r3, r2, r3
 802068e:	9306      	str	r3, [sp, #24]
 8020690:	2300      	movs	r3, #0
 8020692:	930d      	str	r3, [sp, #52]	@ 0x34
 8020694:	9b04      	ldr	r3, [sp, #16]
 8020696:	2b00      	cmp	r3, #0
 8020698:	db38      	blt.n	802070c <_dtoa_r+0x224>
 802069a:	9a04      	ldr	r2, [sp, #16]
 802069c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802069e:	4694      	mov	ip, r2
 80206a0:	4463      	add	r3, ip
 80206a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80206a4:	2300      	movs	r3, #0
 80206a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80206a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206ac:	2401      	movs	r4, #1
 80206ae:	2b09      	cmp	r3, #9
 80206b0:	d867      	bhi.n	8020782 <_dtoa_r+0x29a>
 80206b2:	2b05      	cmp	r3, #5
 80206b4:	dd02      	ble.n	80206bc <_dtoa_r+0x1d4>
 80206b6:	2400      	movs	r4, #0
 80206b8:	3b04      	subs	r3, #4
 80206ba:	9322      	str	r3, [sp, #136]	@ 0x88
 80206bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80206be:	1e98      	subs	r0, r3, #2
 80206c0:	2803      	cmp	r0, #3
 80206c2:	d867      	bhi.n	8020794 <_dtoa_r+0x2ac>
 80206c4:	f7df fd5a 	bl	800017c <__gnu_thumb1_case_uqi>
 80206c8:	5b383a2b 	.word	0x5b383a2b
 80206cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80206ce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80206d0:	18f6      	adds	r6, r6, r3
 80206d2:	4b68      	ldr	r3, [pc, #416]	@ (8020874 <_dtoa_r+0x38c>)
 80206d4:	18f2      	adds	r2, r6, r3
 80206d6:	2a20      	cmp	r2, #32
 80206d8:	dd0f      	ble.n	80206fa <_dtoa_r+0x212>
 80206da:	2340      	movs	r3, #64	@ 0x40
 80206dc:	1a9b      	subs	r3, r3, r2
 80206de:	409f      	lsls	r7, r3
 80206e0:	4b65      	ldr	r3, [pc, #404]	@ (8020878 <_dtoa_r+0x390>)
 80206e2:	0038      	movs	r0, r7
 80206e4:	18f3      	adds	r3, r6, r3
 80206e6:	40dc      	lsrs	r4, r3
 80206e8:	4320      	orrs	r0, r4
 80206ea:	f7e2 fe97 	bl	800341c <__aeabi_ui2d>
 80206ee:	2201      	movs	r2, #1
 80206f0:	4b62      	ldr	r3, [pc, #392]	@ (802087c <_dtoa_r+0x394>)
 80206f2:	1e77      	subs	r7, r6, #1
 80206f4:	18cb      	adds	r3, r1, r3
 80206f6:	9218      	str	r2, [sp, #96]	@ 0x60
 80206f8:	e776      	b.n	80205e8 <_dtoa_r+0x100>
 80206fa:	2320      	movs	r3, #32
 80206fc:	0020      	movs	r0, r4
 80206fe:	1a9b      	subs	r3, r3, r2
 8020700:	4098      	lsls	r0, r3
 8020702:	e7f2      	b.n	80206ea <_dtoa_r+0x202>
 8020704:	9015      	str	r0, [sp, #84]	@ 0x54
 8020706:	e7ba      	b.n	802067e <_dtoa_r+0x196>
 8020708:	920d      	str	r2, [sp, #52]	@ 0x34
 802070a:	e7c3      	b.n	8020694 <_dtoa_r+0x1ac>
 802070c:	9b06      	ldr	r3, [sp, #24]
 802070e:	9a04      	ldr	r2, [sp, #16]
 8020710:	1a9b      	subs	r3, r3, r2
 8020712:	9306      	str	r3, [sp, #24]
 8020714:	4253      	negs	r3, r2
 8020716:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020718:	2300      	movs	r3, #0
 802071a:	9314      	str	r3, [sp, #80]	@ 0x50
 802071c:	e7c5      	b.n	80206aa <_dtoa_r+0x1c2>
 802071e:	2300      	movs	r3, #0
 8020720:	9310      	str	r3, [sp, #64]	@ 0x40
 8020722:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020724:	930e      	str	r3, [sp, #56]	@ 0x38
 8020726:	9309      	str	r3, [sp, #36]	@ 0x24
 8020728:	2b00      	cmp	r3, #0
 802072a:	dc13      	bgt.n	8020754 <_dtoa_r+0x26c>
 802072c:	2301      	movs	r3, #1
 802072e:	001a      	movs	r2, r3
 8020730:	930e      	str	r3, [sp, #56]	@ 0x38
 8020732:	9309      	str	r3, [sp, #36]	@ 0x24
 8020734:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020736:	e00d      	b.n	8020754 <_dtoa_r+0x26c>
 8020738:	2301      	movs	r3, #1
 802073a:	e7f1      	b.n	8020720 <_dtoa_r+0x238>
 802073c:	2300      	movs	r3, #0
 802073e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020740:	9310      	str	r3, [sp, #64]	@ 0x40
 8020742:	4694      	mov	ip, r2
 8020744:	9b04      	ldr	r3, [sp, #16]
 8020746:	4463      	add	r3, ip
 8020748:	930e      	str	r3, [sp, #56]	@ 0x38
 802074a:	3301      	adds	r3, #1
 802074c:	9309      	str	r3, [sp, #36]	@ 0x24
 802074e:	2b00      	cmp	r3, #0
 8020750:	dc00      	bgt.n	8020754 <_dtoa_r+0x26c>
 8020752:	2301      	movs	r3, #1
 8020754:	9a03      	ldr	r2, [sp, #12]
 8020756:	2100      	movs	r1, #0
 8020758:	69d0      	ldr	r0, [r2, #28]
 802075a:	2204      	movs	r2, #4
 802075c:	0015      	movs	r5, r2
 802075e:	3514      	adds	r5, #20
 8020760:	429d      	cmp	r5, r3
 8020762:	d91b      	bls.n	802079c <_dtoa_r+0x2b4>
 8020764:	6041      	str	r1, [r0, #4]
 8020766:	9803      	ldr	r0, [sp, #12]
 8020768:	f001 f924 	bl	80219b4 <_Balloc>
 802076c:	9008      	str	r0, [sp, #32]
 802076e:	2800      	cmp	r0, #0
 8020770:	d117      	bne.n	80207a2 <_dtoa_r+0x2ba>
 8020772:	21b0      	movs	r1, #176	@ 0xb0
 8020774:	4b42      	ldr	r3, [pc, #264]	@ (8020880 <_dtoa_r+0x398>)
 8020776:	482e      	ldr	r0, [pc, #184]	@ (8020830 <_dtoa_r+0x348>)
 8020778:	9a08      	ldr	r2, [sp, #32]
 802077a:	31ff      	adds	r1, #255	@ 0xff
 802077c:	e6c9      	b.n	8020512 <_dtoa_r+0x2a>
 802077e:	2301      	movs	r3, #1
 8020780:	e7dd      	b.n	802073e <_dtoa_r+0x256>
 8020782:	2300      	movs	r3, #0
 8020784:	9410      	str	r4, [sp, #64]	@ 0x40
 8020786:	9322      	str	r3, [sp, #136]	@ 0x88
 8020788:	3b01      	subs	r3, #1
 802078a:	930e      	str	r3, [sp, #56]	@ 0x38
 802078c:	9309      	str	r3, [sp, #36]	@ 0x24
 802078e:	2200      	movs	r2, #0
 8020790:	3313      	adds	r3, #19
 8020792:	e7cf      	b.n	8020734 <_dtoa_r+0x24c>
 8020794:	2301      	movs	r3, #1
 8020796:	9310      	str	r3, [sp, #64]	@ 0x40
 8020798:	3b02      	subs	r3, #2
 802079a:	e7f6      	b.n	802078a <_dtoa_r+0x2a2>
 802079c:	3101      	adds	r1, #1
 802079e:	0052      	lsls	r2, r2, #1
 80207a0:	e7dc      	b.n	802075c <_dtoa_r+0x274>
 80207a2:	9b03      	ldr	r3, [sp, #12]
 80207a4:	9a08      	ldr	r2, [sp, #32]
 80207a6:	69db      	ldr	r3, [r3, #28]
 80207a8:	601a      	str	r2, [r3, #0]
 80207aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207ac:	2b0e      	cmp	r3, #14
 80207ae:	d900      	bls.n	80207b2 <_dtoa_r+0x2ca>
 80207b0:	e0d9      	b.n	8020966 <_dtoa_r+0x47e>
 80207b2:	2c00      	cmp	r4, #0
 80207b4:	d100      	bne.n	80207b8 <_dtoa_r+0x2d0>
 80207b6:	e0d6      	b.n	8020966 <_dtoa_r+0x47e>
 80207b8:	9b04      	ldr	r3, [sp, #16]
 80207ba:	2b00      	cmp	r3, #0
 80207bc:	dd64      	ble.n	8020888 <_dtoa_r+0x3a0>
 80207be:	210f      	movs	r1, #15
 80207c0:	9a04      	ldr	r2, [sp, #16]
 80207c2:	4b2b      	ldr	r3, [pc, #172]	@ (8020870 <_dtoa_r+0x388>)
 80207c4:	400a      	ands	r2, r1
 80207c6:	00d2      	lsls	r2, r2, #3
 80207c8:	189b      	adds	r3, r3, r2
 80207ca:	681e      	ldr	r6, [r3, #0]
 80207cc:	685f      	ldr	r7, [r3, #4]
 80207ce:	9b04      	ldr	r3, [sp, #16]
 80207d0:	2402      	movs	r4, #2
 80207d2:	111d      	asrs	r5, r3, #4
 80207d4:	05db      	lsls	r3, r3, #23
 80207d6:	d50a      	bpl.n	80207ee <_dtoa_r+0x306>
 80207d8:	4b2a      	ldr	r3, [pc, #168]	@ (8020884 <_dtoa_r+0x39c>)
 80207da:	400d      	ands	r5, r1
 80207dc:	6a1a      	ldr	r2, [r3, #32]
 80207de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80207e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207e4:	f7e1 fae6 	bl	8001db4 <__aeabi_ddiv>
 80207e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80207ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207ec:	3401      	adds	r4, #1
 80207ee:	4b25      	ldr	r3, [pc, #148]	@ (8020884 <_dtoa_r+0x39c>)
 80207f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80207f2:	2d00      	cmp	r5, #0
 80207f4:	d108      	bne.n	8020808 <_dtoa_r+0x320>
 80207f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80207f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80207fa:	0032      	movs	r2, r6
 80207fc:	003b      	movs	r3, r7
 80207fe:	f7e1 fad9 	bl	8001db4 <__aeabi_ddiv>
 8020802:	900a      	str	r0, [sp, #40]	@ 0x28
 8020804:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020806:	e05a      	b.n	80208be <_dtoa_r+0x3d6>
 8020808:	2301      	movs	r3, #1
 802080a:	421d      	tst	r5, r3
 802080c:	d009      	beq.n	8020822 <_dtoa_r+0x33a>
 802080e:	18e4      	adds	r4, r4, r3
 8020810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020812:	0030      	movs	r0, r6
 8020814:	681a      	ldr	r2, [r3, #0]
 8020816:	685b      	ldr	r3, [r3, #4]
 8020818:	0039      	movs	r1, r7
 802081a:	f7e1 ff0f 	bl	800263c <__aeabi_dmul>
 802081e:	0006      	movs	r6, r0
 8020820:	000f      	movs	r7, r1
 8020822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020824:	106d      	asrs	r5, r5, #1
 8020826:	3308      	adds	r3, #8
 8020828:	e7e2      	b.n	80207f0 <_dtoa_r+0x308>
 802082a:	46c0      	nop			@ (mov r8, r8)
 802082c:	08025d5a 	.word	0x08025d5a
 8020830:	08025d71 	.word	0x08025d71
 8020834:	7ff00000 	.word	0x7ff00000
 8020838:	0000270f 	.word	0x0000270f
 802083c:	08025d56 	.word	0x08025d56
 8020840:	08025d59 	.word	0x08025d59
 8020844:	08025d22 	.word	0x08025d22
 8020848:	08025d21 	.word	0x08025d21
 802084c:	3ff00000 	.word	0x3ff00000
 8020850:	fffffc01 	.word	0xfffffc01
 8020854:	3ff80000 	.word	0x3ff80000
 8020858:	636f4361 	.word	0x636f4361
 802085c:	3fd287a7 	.word	0x3fd287a7
 8020860:	8b60c8b3 	.word	0x8b60c8b3
 8020864:	3fc68a28 	.word	0x3fc68a28
 8020868:	509f79fb 	.word	0x509f79fb
 802086c:	3fd34413 	.word	0x3fd34413
 8020870:	08025ec8 	.word	0x08025ec8
 8020874:	00000432 	.word	0x00000432
 8020878:	00000412 	.word	0x00000412
 802087c:	fe100000 	.word	0xfe100000
 8020880:	08025dc9 	.word	0x08025dc9
 8020884:	08025ea0 	.word	0x08025ea0
 8020888:	9b04      	ldr	r3, [sp, #16]
 802088a:	2402      	movs	r4, #2
 802088c:	2b00      	cmp	r3, #0
 802088e:	d016      	beq.n	80208be <_dtoa_r+0x3d6>
 8020890:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020892:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020894:	220f      	movs	r2, #15
 8020896:	425d      	negs	r5, r3
 8020898:	402a      	ands	r2, r5
 802089a:	4bd7      	ldr	r3, [pc, #860]	@ (8020bf8 <_dtoa_r+0x710>)
 802089c:	00d2      	lsls	r2, r2, #3
 802089e:	189b      	adds	r3, r3, r2
 80208a0:	681a      	ldr	r2, [r3, #0]
 80208a2:	685b      	ldr	r3, [r3, #4]
 80208a4:	f7e1 feca 	bl	800263c <__aeabi_dmul>
 80208a8:	2701      	movs	r7, #1
 80208aa:	2300      	movs	r3, #0
 80208ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80208ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80208b0:	4ed2      	ldr	r6, [pc, #840]	@ (8020bfc <_dtoa_r+0x714>)
 80208b2:	112d      	asrs	r5, r5, #4
 80208b4:	2d00      	cmp	r5, #0
 80208b6:	d000      	beq.n	80208ba <_dtoa_r+0x3d2>
 80208b8:	e0ba      	b.n	8020a30 <_dtoa_r+0x548>
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d1a1      	bne.n	8020802 <_dtoa_r+0x31a>
 80208be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80208c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80208c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d100      	bne.n	80208ca <_dtoa_r+0x3e2>
 80208c8:	e0bd      	b.n	8020a46 <_dtoa_r+0x55e>
 80208ca:	2200      	movs	r2, #0
 80208cc:	0030      	movs	r0, r6
 80208ce:	0039      	movs	r1, r7
 80208d0:	4bcb      	ldr	r3, [pc, #812]	@ (8020c00 <_dtoa_r+0x718>)
 80208d2:	f7df fdf3 	bl	80004bc <__aeabi_dcmplt>
 80208d6:	2800      	cmp	r0, #0
 80208d8:	d100      	bne.n	80208dc <_dtoa_r+0x3f4>
 80208da:	e0b4      	b.n	8020a46 <_dtoa_r+0x55e>
 80208dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d100      	bne.n	80208e4 <_dtoa_r+0x3fc>
 80208e2:	e0b0      	b.n	8020a46 <_dtoa_r+0x55e>
 80208e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	dd39      	ble.n	802095e <_dtoa_r+0x476>
 80208ea:	9b04      	ldr	r3, [sp, #16]
 80208ec:	2200      	movs	r2, #0
 80208ee:	3b01      	subs	r3, #1
 80208f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80208f2:	0030      	movs	r0, r6
 80208f4:	4bc3      	ldr	r3, [pc, #780]	@ (8020c04 <_dtoa_r+0x71c>)
 80208f6:	0039      	movs	r1, r7
 80208f8:	f7e1 fea0 	bl	800263c <__aeabi_dmul>
 80208fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80208fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020902:	3401      	adds	r4, #1
 8020904:	0020      	movs	r0, r4
 8020906:	9311      	str	r3, [sp, #68]	@ 0x44
 8020908:	f7e2 fd5a 	bl	80033c0 <__aeabi_i2d>
 802090c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802090e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020910:	f7e1 fe94 	bl	800263c <__aeabi_dmul>
 8020914:	4bbc      	ldr	r3, [pc, #752]	@ (8020c08 <_dtoa_r+0x720>)
 8020916:	2200      	movs	r2, #0
 8020918:	f7e0 fee8 	bl	80016ec <__aeabi_dadd>
 802091c:	4bbb      	ldr	r3, [pc, #748]	@ (8020c0c <_dtoa_r+0x724>)
 802091e:	0006      	movs	r6, r0
 8020920:	18cf      	adds	r7, r1, r3
 8020922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020924:	2b00      	cmp	r3, #0
 8020926:	d000      	beq.n	802092a <_dtoa_r+0x442>
 8020928:	e091      	b.n	8020a4e <_dtoa_r+0x566>
 802092a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802092c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802092e:	2200      	movs	r2, #0
 8020930:	4bb7      	ldr	r3, [pc, #732]	@ (8020c10 <_dtoa_r+0x728>)
 8020932:	f7e2 f94b 	bl	8002bcc <__aeabi_dsub>
 8020936:	0032      	movs	r2, r6
 8020938:	003b      	movs	r3, r7
 802093a:	0004      	movs	r4, r0
 802093c:	000d      	movs	r5, r1
 802093e:	f7df fdd1 	bl	80004e4 <__aeabi_dcmpgt>
 8020942:	2800      	cmp	r0, #0
 8020944:	d000      	beq.n	8020948 <_dtoa_r+0x460>
 8020946:	e29d      	b.n	8020e84 <_dtoa_r+0x99c>
 8020948:	2180      	movs	r1, #128	@ 0x80
 802094a:	0609      	lsls	r1, r1, #24
 802094c:	187b      	adds	r3, r7, r1
 802094e:	0032      	movs	r2, r6
 8020950:	0020      	movs	r0, r4
 8020952:	0029      	movs	r1, r5
 8020954:	f7df fdb2 	bl	80004bc <__aeabi_dcmplt>
 8020958:	2800      	cmp	r0, #0
 802095a:	d000      	beq.n	802095e <_dtoa_r+0x476>
 802095c:	e130      	b.n	8020bc0 <_dtoa_r+0x6d8>
 802095e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020960:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020962:	930a      	str	r3, [sp, #40]	@ 0x28
 8020964:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020966:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020968:	2b00      	cmp	r3, #0
 802096a:	da00      	bge.n	802096e <_dtoa_r+0x486>
 802096c:	e177      	b.n	8020c5e <_dtoa_r+0x776>
 802096e:	9a04      	ldr	r2, [sp, #16]
 8020970:	2a0e      	cmp	r2, #14
 8020972:	dd00      	ble.n	8020976 <_dtoa_r+0x48e>
 8020974:	e173      	b.n	8020c5e <_dtoa_r+0x776>
 8020976:	4ba0      	ldr	r3, [pc, #640]	@ (8020bf8 <_dtoa_r+0x710>)
 8020978:	00d2      	lsls	r2, r2, #3
 802097a:	189b      	adds	r3, r3, r2
 802097c:	685c      	ldr	r4, [r3, #4]
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	9306      	str	r3, [sp, #24]
 8020982:	9407      	str	r4, [sp, #28]
 8020984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020986:	2b00      	cmp	r3, #0
 8020988:	da03      	bge.n	8020992 <_dtoa_r+0x4aa>
 802098a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802098c:	2b00      	cmp	r3, #0
 802098e:	dc00      	bgt.n	8020992 <_dtoa_r+0x4aa>
 8020990:	e106      	b.n	8020ba0 <_dtoa_r+0x6b8>
 8020992:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020994:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020998:	9d08      	ldr	r5, [sp, #32]
 802099a:	3b01      	subs	r3, #1
 802099c:	195b      	adds	r3, r3, r5
 802099e:	930a      	str	r3, [sp, #40]	@ 0x28
 80209a0:	9a06      	ldr	r2, [sp, #24]
 80209a2:	9b07      	ldr	r3, [sp, #28]
 80209a4:	0030      	movs	r0, r6
 80209a6:	0039      	movs	r1, r7
 80209a8:	f7e1 fa04 	bl	8001db4 <__aeabi_ddiv>
 80209ac:	f7e2 fccc 	bl	8003348 <__aeabi_d2iz>
 80209b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80209b2:	f7e2 fd05 	bl	80033c0 <__aeabi_i2d>
 80209b6:	9a06      	ldr	r2, [sp, #24]
 80209b8:	9b07      	ldr	r3, [sp, #28]
 80209ba:	f7e1 fe3f 	bl	800263c <__aeabi_dmul>
 80209be:	0002      	movs	r2, r0
 80209c0:	000b      	movs	r3, r1
 80209c2:	0030      	movs	r0, r6
 80209c4:	0039      	movs	r1, r7
 80209c6:	f7e2 f901 	bl	8002bcc <__aeabi_dsub>
 80209ca:	002b      	movs	r3, r5
 80209cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80209ce:	3501      	adds	r5, #1
 80209d0:	3230      	adds	r2, #48	@ 0x30
 80209d2:	701a      	strb	r2, [r3, #0]
 80209d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209d6:	002c      	movs	r4, r5
 80209d8:	429a      	cmp	r2, r3
 80209da:	d000      	beq.n	80209de <_dtoa_r+0x4f6>
 80209dc:	e131      	b.n	8020c42 <_dtoa_r+0x75a>
 80209de:	0002      	movs	r2, r0
 80209e0:	000b      	movs	r3, r1
 80209e2:	f7e0 fe83 	bl	80016ec <__aeabi_dadd>
 80209e6:	9a06      	ldr	r2, [sp, #24]
 80209e8:	9b07      	ldr	r3, [sp, #28]
 80209ea:	0006      	movs	r6, r0
 80209ec:	000f      	movs	r7, r1
 80209ee:	f7df fd79 	bl	80004e4 <__aeabi_dcmpgt>
 80209f2:	2800      	cmp	r0, #0
 80209f4:	d000      	beq.n	80209f8 <_dtoa_r+0x510>
 80209f6:	e10f      	b.n	8020c18 <_dtoa_r+0x730>
 80209f8:	9a06      	ldr	r2, [sp, #24]
 80209fa:	9b07      	ldr	r3, [sp, #28]
 80209fc:	0030      	movs	r0, r6
 80209fe:	0039      	movs	r1, r7
 8020a00:	f7df fd56 	bl	80004b0 <__aeabi_dcmpeq>
 8020a04:	2800      	cmp	r0, #0
 8020a06:	d003      	beq.n	8020a10 <_dtoa_r+0x528>
 8020a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a0a:	07dd      	lsls	r5, r3, #31
 8020a0c:	d500      	bpl.n	8020a10 <_dtoa_r+0x528>
 8020a0e:	e103      	b.n	8020c18 <_dtoa_r+0x730>
 8020a10:	9905      	ldr	r1, [sp, #20]
 8020a12:	9803      	ldr	r0, [sp, #12]
 8020a14:	f001 f812 	bl	8021a3c <_Bfree>
 8020a18:	2300      	movs	r3, #0
 8020a1a:	7023      	strb	r3, [r4, #0]
 8020a1c:	9b04      	ldr	r3, [sp, #16]
 8020a1e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020a20:	3301      	adds	r3, #1
 8020a22:	6013      	str	r3, [r2, #0]
 8020a24:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d100      	bne.n	8020a2c <_dtoa_r+0x544>
 8020a2a:	e5a7      	b.n	802057c <_dtoa_r+0x94>
 8020a2c:	601c      	str	r4, [r3, #0]
 8020a2e:	e5a5      	b.n	802057c <_dtoa_r+0x94>
 8020a30:	423d      	tst	r5, r7
 8020a32:	d005      	beq.n	8020a40 <_dtoa_r+0x558>
 8020a34:	6832      	ldr	r2, [r6, #0]
 8020a36:	6873      	ldr	r3, [r6, #4]
 8020a38:	f7e1 fe00 	bl	800263c <__aeabi_dmul>
 8020a3c:	003b      	movs	r3, r7
 8020a3e:	3401      	adds	r4, #1
 8020a40:	106d      	asrs	r5, r5, #1
 8020a42:	3608      	adds	r6, #8
 8020a44:	e736      	b.n	80208b4 <_dtoa_r+0x3cc>
 8020a46:	9b04      	ldr	r3, [sp, #16]
 8020a48:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a4c:	e75a      	b.n	8020904 <_dtoa_r+0x41c>
 8020a4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a50:	4b69      	ldr	r3, [pc, #420]	@ (8020bf8 <_dtoa_r+0x710>)
 8020a52:	3a01      	subs	r2, #1
 8020a54:	00d2      	lsls	r2, r2, #3
 8020a56:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020a58:	189b      	adds	r3, r3, r2
 8020a5a:	681a      	ldr	r2, [r3, #0]
 8020a5c:	685b      	ldr	r3, [r3, #4]
 8020a5e:	2900      	cmp	r1, #0
 8020a60:	d04c      	beq.n	8020afc <_dtoa_r+0x614>
 8020a62:	2000      	movs	r0, #0
 8020a64:	496b      	ldr	r1, [pc, #428]	@ (8020c14 <_dtoa_r+0x72c>)
 8020a66:	f7e1 f9a5 	bl	8001db4 <__aeabi_ddiv>
 8020a6a:	0032      	movs	r2, r6
 8020a6c:	003b      	movs	r3, r7
 8020a6e:	f7e2 f8ad 	bl	8002bcc <__aeabi_dsub>
 8020a72:	9a08      	ldr	r2, [sp, #32]
 8020a74:	0006      	movs	r6, r0
 8020a76:	4694      	mov	ip, r2
 8020a78:	000f      	movs	r7, r1
 8020a7a:	9b08      	ldr	r3, [sp, #32]
 8020a7c:	9316      	str	r3, [sp, #88]	@ 0x58
 8020a7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a80:	4463      	add	r3, ip
 8020a82:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a88:	f7e2 fc5e 	bl	8003348 <__aeabi_d2iz>
 8020a8c:	0005      	movs	r5, r0
 8020a8e:	f7e2 fc97 	bl	80033c0 <__aeabi_i2d>
 8020a92:	0002      	movs	r2, r0
 8020a94:	000b      	movs	r3, r1
 8020a96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a9a:	f7e2 f897 	bl	8002bcc <__aeabi_dsub>
 8020a9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020aa0:	3530      	adds	r5, #48	@ 0x30
 8020aa2:	1c5c      	adds	r4, r3, #1
 8020aa4:	701d      	strb	r5, [r3, #0]
 8020aa6:	0032      	movs	r2, r6
 8020aa8:	003b      	movs	r3, r7
 8020aaa:	900a      	str	r0, [sp, #40]	@ 0x28
 8020aac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020aae:	f7df fd05 	bl	80004bc <__aeabi_dcmplt>
 8020ab2:	2800      	cmp	r0, #0
 8020ab4:	d16a      	bne.n	8020b8c <_dtoa_r+0x6a4>
 8020ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020ab8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020aba:	2000      	movs	r0, #0
 8020abc:	4950      	ldr	r1, [pc, #320]	@ (8020c00 <_dtoa_r+0x718>)
 8020abe:	f7e2 f885 	bl	8002bcc <__aeabi_dsub>
 8020ac2:	0032      	movs	r2, r6
 8020ac4:	003b      	movs	r3, r7
 8020ac6:	f7df fcf9 	bl	80004bc <__aeabi_dcmplt>
 8020aca:	2800      	cmp	r0, #0
 8020acc:	d000      	beq.n	8020ad0 <_dtoa_r+0x5e8>
 8020ace:	e0a5      	b.n	8020c1c <_dtoa_r+0x734>
 8020ad0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020ad2:	42a3      	cmp	r3, r4
 8020ad4:	d100      	bne.n	8020ad8 <_dtoa_r+0x5f0>
 8020ad6:	e742      	b.n	802095e <_dtoa_r+0x476>
 8020ad8:	2200      	movs	r2, #0
 8020ada:	0030      	movs	r0, r6
 8020adc:	0039      	movs	r1, r7
 8020ade:	4b49      	ldr	r3, [pc, #292]	@ (8020c04 <_dtoa_r+0x71c>)
 8020ae0:	f7e1 fdac 	bl	800263c <__aeabi_dmul>
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	0006      	movs	r6, r0
 8020ae8:	000f      	movs	r7, r1
 8020aea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020aee:	4b45      	ldr	r3, [pc, #276]	@ (8020c04 <_dtoa_r+0x71c>)
 8020af0:	f7e1 fda4 	bl	800263c <__aeabi_dmul>
 8020af4:	9416      	str	r4, [sp, #88]	@ 0x58
 8020af6:	900a      	str	r0, [sp, #40]	@ 0x28
 8020af8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020afa:	e7c3      	b.n	8020a84 <_dtoa_r+0x59c>
 8020afc:	0030      	movs	r0, r6
 8020afe:	0039      	movs	r1, r7
 8020b00:	f7e1 fd9c 	bl	800263c <__aeabi_dmul>
 8020b04:	9d08      	ldr	r5, [sp, #32]
 8020b06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b08:	002b      	movs	r3, r5
 8020b0a:	4694      	mov	ip, r2
 8020b0c:	9016      	str	r0, [sp, #88]	@ 0x58
 8020b0e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020b10:	4463      	add	r3, ip
 8020b12:	9319      	str	r3, [sp, #100]	@ 0x64
 8020b14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020b16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020b18:	f7e2 fc16 	bl	8003348 <__aeabi_d2iz>
 8020b1c:	0004      	movs	r4, r0
 8020b1e:	f7e2 fc4f 	bl	80033c0 <__aeabi_i2d>
 8020b22:	000b      	movs	r3, r1
 8020b24:	0002      	movs	r2, r0
 8020b26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020b28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020b2a:	f7e2 f84f 	bl	8002bcc <__aeabi_dsub>
 8020b2e:	3430      	adds	r4, #48	@ 0x30
 8020b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020b32:	702c      	strb	r4, [r5, #0]
 8020b34:	3501      	adds	r5, #1
 8020b36:	0006      	movs	r6, r0
 8020b38:	000f      	movs	r7, r1
 8020b3a:	42ab      	cmp	r3, r5
 8020b3c:	d129      	bne.n	8020b92 <_dtoa_r+0x6aa>
 8020b3e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020b40:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020b42:	9b08      	ldr	r3, [sp, #32]
 8020b44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020b46:	469c      	mov	ip, r3
 8020b48:	2200      	movs	r2, #0
 8020b4a:	4b32      	ldr	r3, [pc, #200]	@ (8020c14 <_dtoa_r+0x72c>)
 8020b4c:	4464      	add	r4, ip
 8020b4e:	f7e0 fdcd 	bl	80016ec <__aeabi_dadd>
 8020b52:	0002      	movs	r2, r0
 8020b54:	000b      	movs	r3, r1
 8020b56:	0030      	movs	r0, r6
 8020b58:	0039      	movs	r1, r7
 8020b5a:	f7df fcc3 	bl	80004e4 <__aeabi_dcmpgt>
 8020b5e:	2800      	cmp	r0, #0
 8020b60:	d15c      	bne.n	8020c1c <_dtoa_r+0x734>
 8020b62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020b64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020b66:	2000      	movs	r0, #0
 8020b68:	492a      	ldr	r1, [pc, #168]	@ (8020c14 <_dtoa_r+0x72c>)
 8020b6a:	f7e2 f82f 	bl	8002bcc <__aeabi_dsub>
 8020b6e:	0002      	movs	r2, r0
 8020b70:	000b      	movs	r3, r1
 8020b72:	0030      	movs	r0, r6
 8020b74:	0039      	movs	r1, r7
 8020b76:	f7df fca1 	bl	80004bc <__aeabi_dcmplt>
 8020b7a:	2800      	cmp	r0, #0
 8020b7c:	d100      	bne.n	8020b80 <_dtoa_r+0x698>
 8020b7e:	e6ee      	b.n	802095e <_dtoa_r+0x476>
 8020b80:	0023      	movs	r3, r4
 8020b82:	3c01      	subs	r4, #1
 8020b84:	7822      	ldrb	r2, [r4, #0]
 8020b86:	2a30      	cmp	r2, #48	@ 0x30
 8020b88:	d0fa      	beq.n	8020b80 <_dtoa_r+0x698>
 8020b8a:	001c      	movs	r4, r3
 8020b8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b8e:	9304      	str	r3, [sp, #16]
 8020b90:	e73e      	b.n	8020a10 <_dtoa_r+0x528>
 8020b92:	2200      	movs	r2, #0
 8020b94:	4b1b      	ldr	r3, [pc, #108]	@ (8020c04 <_dtoa_r+0x71c>)
 8020b96:	f7e1 fd51 	bl	800263c <__aeabi_dmul>
 8020b9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020b9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b9e:	e7b9      	b.n	8020b14 <_dtoa_r+0x62c>
 8020ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d10c      	bne.n	8020bc0 <_dtoa_r+0x6d8>
 8020ba6:	9806      	ldr	r0, [sp, #24]
 8020ba8:	9907      	ldr	r1, [sp, #28]
 8020baa:	2200      	movs	r2, #0
 8020bac:	4b18      	ldr	r3, [pc, #96]	@ (8020c10 <_dtoa_r+0x728>)
 8020bae:	f7e1 fd45 	bl	800263c <__aeabi_dmul>
 8020bb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020bb6:	f7df fc9f 	bl	80004f8 <__aeabi_dcmpge>
 8020bba:	2800      	cmp	r0, #0
 8020bbc:	d100      	bne.n	8020bc0 <_dtoa_r+0x6d8>
 8020bbe:	e164      	b.n	8020e8a <_dtoa_r+0x9a2>
 8020bc0:	2600      	movs	r6, #0
 8020bc2:	0037      	movs	r7, r6
 8020bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020bc6:	9c08      	ldr	r4, [sp, #32]
 8020bc8:	43db      	mvns	r3, r3
 8020bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bcc:	2300      	movs	r3, #0
 8020bce:	9304      	str	r3, [sp, #16]
 8020bd0:	0031      	movs	r1, r6
 8020bd2:	9803      	ldr	r0, [sp, #12]
 8020bd4:	f000 ff32 	bl	8021a3c <_Bfree>
 8020bd8:	2f00      	cmp	r7, #0
 8020bda:	d0d7      	beq.n	8020b8c <_dtoa_r+0x6a4>
 8020bdc:	9b04      	ldr	r3, [sp, #16]
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	d005      	beq.n	8020bee <_dtoa_r+0x706>
 8020be2:	42bb      	cmp	r3, r7
 8020be4:	d003      	beq.n	8020bee <_dtoa_r+0x706>
 8020be6:	0019      	movs	r1, r3
 8020be8:	9803      	ldr	r0, [sp, #12]
 8020bea:	f000 ff27 	bl	8021a3c <_Bfree>
 8020bee:	0039      	movs	r1, r7
 8020bf0:	9803      	ldr	r0, [sp, #12]
 8020bf2:	f000 ff23 	bl	8021a3c <_Bfree>
 8020bf6:	e7c9      	b.n	8020b8c <_dtoa_r+0x6a4>
 8020bf8:	08025ec8 	.word	0x08025ec8
 8020bfc:	08025ea0 	.word	0x08025ea0
 8020c00:	3ff00000 	.word	0x3ff00000
 8020c04:	40240000 	.word	0x40240000
 8020c08:	401c0000 	.word	0x401c0000
 8020c0c:	fcc00000 	.word	0xfcc00000
 8020c10:	40140000 	.word	0x40140000
 8020c14:	3fe00000 	.word	0x3fe00000
 8020c18:	9b04      	ldr	r3, [sp, #16]
 8020c1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c1c:	0023      	movs	r3, r4
 8020c1e:	001c      	movs	r4, r3
 8020c20:	3b01      	subs	r3, #1
 8020c22:	781a      	ldrb	r2, [r3, #0]
 8020c24:	2a39      	cmp	r2, #57	@ 0x39
 8020c26:	d108      	bne.n	8020c3a <_dtoa_r+0x752>
 8020c28:	9a08      	ldr	r2, [sp, #32]
 8020c2a:	429a      	cmp	r2, r3
 8020c2c:	d1f7      	bne.n	8020c1e <_dtoa_r+0x736>
 8020c2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020c30:	9908      	ldr	r1, [sp, #32]
 8020c32:	3201      	adds	r2, #1
 8020c34:	920c      	str	r2, [sp, #48]	@ 0x30
 8020c36:	2230      	movs	r2, #48	@ 0x30
 8020c38:	700a      	strb	r2, [r1, #0]
 8020c3a:	781a      	ldrb	r2, [r3, #0]
 8020c3c:	3201      	adds	r2, #1
 8020c3e:	701a      	strb	r2, [r3, #0]
 8020c40:	e7a4      	b.n	8020b8c <_dtoa_r+0x6a4>
 8020c42:	2200      	movs	r2, #0
 8020c44:	4bc6      	ldr	r3, [pc, #792]	@ (8020f60 <_dtoa_r+0xa78>)
 8020c46:	f7e1 fcf9 	bl	800263c <__aeabi_dmul>
 8020c4a:	2200      	movs	r2, #0
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	0006      	movs	r6, r0
 8020c50:	000f      	movs	r7, r1
 8020c52:	f7df fc2d 	bl	80004b0 <__aeabi_dcmpeq>
 8020c56:	2800      	cmp	r0, #0
 8020c58:	d100      	bne.n	8020c5c <_dtoa_r+0x774>
 8020c5a:	e6a1      	b.n	80209a0 <_dtoa_r+0x4b8>
 8020c5c:	e6d8      	b.n	8020a10 <_dtoa_r+0x528>
 8020c5e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020c60:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020c62:	9c06      	ldr	r4, [sp, #24]
 8020c64:	2f00      	cmp	r7, #0
 8020c66:	d014      	beq.n	8020c92 <_dtoa_r+0x7aa>
 8020c68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020c6a:	2a01      	cmp	r2, #1
 8020c6c:	dd00      	ble.n	8020c70 <_dtoa_r+0x788>
 8020c6e:	e0c8      	b.n	8020e02 <_dtoa_r+0x91a>
 8020c70:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020c72:	2a00      	cmp	r2, #0
 8020c74:	d100      	bne.n	8020c78 <_dtoa_r+0x790>
 8020c76:	e0be      	b.n	8020df6 <_dtoa_r+0x90e>
 8020c78:	4aba      	ldr	r2, [pc, #744]	@ (8020f64 <_dtoa_r+0xa7c>)
 8020c7a:	189b      	adds	r3, r3, r2
 8020c7c:	9a06      	ldr	r2, [sp, #24]
 8020c7e:	2101      	movs	r1, #1
 8020c80:	18d2      	adds	r2, r2, r3
 8020c82:	9206      	str	r2, [sp, #24]
 8020c84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c86:	9803      	ldr	r0, [sp, #12]
 8020c88:	18d3      	adds	r3, r2, r3
 8020c8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c8c:	f000 ffda 	bl	8021c44 <__i2b>
 8020c90:	0007      	movs	r7, r0
 8020c92:	2c00      	cmp	r4, #0
 8020c94:	d00e      	beq.n	8020cb4 <_dtoa_r+0x7cc>
 8020c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	dd0b      	ble.n	8020cb4 <_dtoa_r+0x7cc>
 8020c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c9e:	0023      	movs	r3, r4
 8020ca0:	4294      	cmp	r4, r2
 8020ca2:	dd00      	ble.n	8020ca6 <_dtoa_r+0x7be>
 8020ca4:	0013      	movs	r3, r2
 8020ca6:	9a06      	ldr	r2, [sp, #24]
 8020ca8:	1ae4      	subs	r4, r4, r3
 8020caa:	1ad2      	subs	r2, r2, r3
 8020cac:	9206      	str	r2, [sp, #24]
 8020cae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020cb0:	1ad3      	subs	r3, r2, r3
 8020cb2:	930d      	str	r3, [sp, #52]	@ 0x34
 8020cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d01f      	beq.n	8020cfa <_dtoa_r+0x812>
 8020cba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d100      	bne.n	8020cc2 <_dtoa_r+0x7da>
 8020cc0:	e0b5      	b.n	8020e2e <_dtoa_r+0x946>
 8020cc2:	2d00      	cmp	r5, #0
 8020cc4:	d010      	beq.n	8020ce8 <_dtoa_r+0x800>
 8020cc6:	0039      	movs	r1, r7
 8020cc8:	002a      	movs	r2, r5
 8020cca:	9803      	ldr	r0, [sp, #12]
 8020ccc:	f001 f884 	bl	8021dd8 <__pow5mult>
 8020cd0:	9a05      	ldr	r2, [sp, #20]
 8020cd2:	0001      	movs	r1, r0
 8020cd4:	0007      	movs	r7, r0
 8020cd6:	9803      	ldr	r0, [sp, #12]
 8020cd8:	f000 ffcc 	bl	8021c74 <__multiply>
 8020cdc:	0006      	movs	r6, r0
 8020cde:	9905      	ldr	r1, [sp, #20]
 8020ce0:	9803      	ldr	r0, [sp, #12]
 8020ce2:	f000 feab 	bl	8021a3c <_Bfree>
 8020ce6:	9605      	str	r6, [sp, #20]
 8020ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cea:	1b5a      	subs	r2, r3, r5
 8020cec:	42ab      	cmp	r3, r5
 8020cee:	d004      	beq.n	8020cfa <_dtoa_r+0x812>
 8020cf0:	9905      	ldr	r1, [sp, #20]
 8020cf2:	9803      	ldr	r0, [sp, #12]
 8020cf4:	f001 f870 	bl	8021dd8 <__pow5mult>
 8020cf8:	9005      	str	r0, [sp, #20]
 8020cfa:	2101      	movs	r1, #1
 8020cfc:	9803      	ldr	r0, [sp, #12]
 8020cfe:	f000 ffa1 	bl	8021c44 <__i2b>
 8020d02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d04:	0006      	movs	r6, r0
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d100      	bne.n	8020d0c <_dtoa_r+0x824>
 8020d0a:	e1bc      	b.n	8021086 <_dtoa_r+0xb9e>
 8020d0c:	001a      	movs	r2, r3
 8020d0e:	0001      	movs	r1, r0
 8020d10:	9803      	ldr	r0, [sp, #12]
 8020d12:	f001 f861 	bl	8021dd8 <__pow5mult>
 8020d16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d18:	0006      	movs	r6, r0
 8020d1a:	2500      	movs	r5, #0
 8020d1c:	2b01      	cmp	r3, #1
 8020d1e:	dc16      	bgt.n	8020d4e <_dtoa_r+0x866>
 8020d20:	2500      	movs	r5, #0
 8020d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d24:	42ab      	cmp	r3, r5
 8020d26:	d10e      	bne.n	8020d46 <_dtoa_r+0x85e>
 8020d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d2a:	031b      	lsls	r3, r3, #12
 8020d2c:	42ab      	cmp	r3, r5
 8020d2e:	d10a      	bne.n	8020d46 <_dtoa_r+0x85e>
 8020d30:	4b8d      	ldr	r3, [pc, #564]	@ (8020f68 <_dtoa_r+0xa80>)
 8020d32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020d34:	4213      	tst	r3, r2
 8020d36:	d006      	beq.n	8020d46 <_dtoa_r+0x85e>
 8020d38:	9b06      	ldr	r3, [sp, #24]
 8020d3a:	3501      	adds	r5, #1
 8020d3c:	3301      	adds	r3, #1
 8020d3e:	9306      	str	r3, [sp, #24]
 8020d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d42:	3301      	adds	r3, #1
 8020d44:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d48:	2001      	movs	r0, #1
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d008      	beq.n	8020d60 <_dtoa_r+0x878>
 8020d4e:	6933      	ldr	r3, [r6, #16]
 8020d50:	3303      	adds	r3, #3
 8020d52:	009b      	lsls	r3, r3, #2
 8020d54:	18f3      	adds	r3, r6, r3
 8020d56:	6858      	ldr	r0, [r3, #4]
 8020d58:	f000 ff24 	bl	8021ba4 <__hi0bits>
 8020d5c:	2320      	movs	r3, #32
 8020d5e:	1a18      	subs	r0, r3, r0
 8020d60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d62:	1818      	adds	r0, r3, r0
 8020d64:	0002      	movs	r2, r0
 8020d66:	231f      	movs	r3, #31
 8020d68:	401a      	ands	r2, r3
 8020d6a:	4218      	tst	r0, r3
 8020d6c:	d065      	beq.n	8020e3a <_dtoa_r+0x952>
 8020d6e:	3301      	adds	r3, #1
 8020d70:	1a9b      	subs	r3, r3, r2
 8020d72:	2b04      	cmp	r3, #4
 8020d74:	dd5d      	ble.n	8020e32 <_dtoa_r+0x94a>
 8020d76:	231c      	movs	r3, #28
 8020d78:	1a9b      	subs	r3, r3, r2
 8020d7a:	9a06      	ldr	r2, [sp, #24]
 8020d7c:	18e4      	adds	r4, r4, r3
 8020d7e:	18d2      	adds	r2, r2, r3
 8020d80:	9206      	str	r2, [sp, #24]
 8020d82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020d84:	18d3      	adds	r3, r2, r3
 8020d86:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d88:	9b06      	ldr	r3, [sp, #24]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	dd05      	ble.n	8020d9a <_dtoa_r+0x8b2>
 8020d8e:	001a      	movs	r2, r3
 8020d90:	9905      	ldr	r1, [sp, #20]
 8020d92:	9803      	ldr	r0, [sp, #12]
 8020d94:	f001 f87c 	bl	8021e90 <__lshift>
 8020d98:	9005      	str	r0, [sp, #20]
 8020d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	dd05      	ble.n	8020dac <_dtoa_r+0x8c4>
 8020da0:	0031      	movs	r1, r6
 8020da2:	001a      	movs	r2, r3
 8020da4:	9803      	ldr	r0, [sp, #12]
 8020da6:	f001 f873 	bl	8021e90 <__lshift>
 8020daa:	0006      	movs	r6, r0
 8020dac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d045      	beq.n	8020e3e <_dtoa_r+0x956>
 8020db2:	0031      	movs	r1, r6
 8020db4:	9805      	ldr	r0, [sp, #20]
 8020db6:	f001 f8d7 	bl	8021f68 <__mcmp>
 8020dba:	2800      	cmp	r0, #0
 8020dbc:	da3f      	bge.n	8020e3e <_dtoa_r+0x956>
 8020dbe:	9b04      	ldr	r3, [sp, #16]
 8020dc0:	220a      	movs	r2, #10
 8020dc2:	3b01      	subs	r3, #1
 8020dc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8020dc6:	9905      	ldr	r1, [sp, #20]
 8020dc8:	2300      	movs	r3, #0
 8020dca:	9803      	ldr	r0, [sp, #12]
 8020dcc:	f000 fe5a 	bl	8021a84 <__multadd>
 8020dd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020dd2:	9005      	str	r0, [sp, #20]
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d100      	bne.n	8020dda <_dtoa_r+0x8f2>
 8020dd8:	e15c      	b.n	8021094 <_dtoa_r+0xbac>
 8020dda:	2300      	movs	r3, #0
 8020ddc:	0039      	movs	r1, r7
 8020dde:	220a      	movs	r2, #10
 8020de0:	9803      	ldr	r0, [sp, #12]
 8020de2:	f000 fe4f 	bl	8021a84 <__multadd>
 8020de6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020de8:	0007      	movs	r7, r0
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	dc55      	bgt.n	8020e9a <_dtoa_r+0x9b2>
 8020dee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020df0:	2b02      	cmp	r3, #2
 8020df2:	dc2d      	bgt.n	8020e50 <_dtoa_r+0x968>
 8020df4:	e051      	b.n	8020e9a <_dtoa_r+0x9b2>
 8020df6:	2336      	movs	r3, #54	@ 0x36
 8020df8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020dfa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020dfc:	9c06      	ldr	r4, [sp, #24]
 8020dfe:	1a9b      	subs	r3, r3, r2
 8020e00:	e73c      	b.n	8020c7c <_dtoa_r+0x794>
 8020e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e04:	1e5d      	subs	r5, r3, #1
 8020e06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e08:	42ab      	cmp	r3, r5
 8020e0a:	db08      	blt.n	8020e1e <_dtoa_r+0x936>
 8020e0c:	1b5d      	subs	r5, r3, r5
 8020e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e10:	9c06      	ldr	r4, [sp, #24]
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	db00      	blt.n	8020e18 <_dtoa_r+0x930>
 8020e16:	e731      	b.n	8020c7c <_dtoa_r+0x794>
 8020e18:	1ae4      	subs	r4, r4, r3
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	e72e      	b.n	8020c7c <_dtoa_r+0x794>
 8020e1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e22:	1aeb      	subs	r3, r5, r3
 8020e24:	18d3      	adds	r3, r2, r3
 8020e26:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020e28:	9314      	str	r3, [sp, #80]	@ 0x50
 8020e2a:	2500      	movs	r5, #0
 8020e2c:	e7ef      	b.n	8020e0e <_dtoa_r+0x926>
 8020e2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020e30:	e75e      	b.n	8020cf0 <_dtoa_r+0x808>
 8020e32:	2b04      	cmp	r3, #4
 8020e34:	d0a8      	beq.n	8020d88 <_dtoa_r+0x8a0>
 8020e36:	331c      	adds	r3, #28
 8020e38:	e79f      	b.n	8020d7a <_dtoa_r+0x892>
 8020e3a:	0013      	movs	r3, r2
 8020e3c:	e7fb      	b.n	8020e36 <_dtoa_r+0x94e>
 8020e3e:	9b04      	ldr	r3, [sp, #16]
 8020e40:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e44:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	dc23      	bgt.n	8020e92 <_dtoa_r+0x9aa>
 8020e4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020e4c:	2b02      	cmp	r3, #2
 8020e4e:	dd20      	ble.n	8020e92 <_dtoa_r+0x9aa>
 8020e50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	d000      	beq.n	8020e58 <_dtoa_r+0x970>
 8020e56:	e6b5      	b.n	8020bc4 <_dtoa_r+0x6dc>
 8020e58:	0031      	movs	r1, r6
 8020e5a:	2205      	movs	r2, #5
 8020e5c:	9803      	ldr	r0, [sp, #12]
 8020e5e:	f000 fe11 	bl	8021a84 <__multadd>
 8020e62:	0006      	movs	r6, r0
 8020e64:	0001      	movs	r1, r0
 8020e66:	9805      	ldr	r0, [sp, #20]
 8020e68:	f001 f87e 	bl	8021f68 <__mcmp>
 8020e6c:	2800      	cmp	r0, #0
 8020e6e:	dc00      	bgt.n	8020e72 <_dtoa_r+0x98a>
 8020e70:	e6a8      	b.n	8020bc4 <_dtoa_r+0x6dc>
 8020e72:	9b08      	ldr	r3, [sp, #32]
 8020e74:	9a08      	ldr	r2, [sp, #32]
 8020e76:	1c5c      	adds	r4, r3, #1
 8020e78:	2331      	movs	r3, #49	@ 0x31
 8020e7a:	7013      	strb	r3, [r2, #0]
 8020e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e7e:	3301      	adds	r3, #1
 8020e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e82:	e6a3      	b.n	8020bcc <_dtoa_r+0x6e4>
 8020e84:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020e86:	0037      	movs	r7, r6
 8020e88:	e7f3      	b.n	8020e72 <_dtoa_r+0x98a>
 8020e8a:	9b04      	ldr	r3, [sp, #16]
 8020e8c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020e8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e90:	e7f9      	b.n	8020e86 <_dtoa_r+0x99e>
 8020e92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d100      	bne.n	8020e9a <_dtoa_r+0x9b2>
 8020e98:	e100      	b.n	802109c <_dtoa_r+0xbb4>
 8020e9a:	2c00      	cmp	r4, #0
 8020e9c:	dd05      	ble.n	8020eaa <_dtoa_r+0x9c2>
 8020e9e:	0039      	movs	r1, r7
 8020ea0:	0022      	movs	r2, r4
 8020ea2:	9803      	ldr	r0, [sp, #12]
 8020ea4:	f000 fff4 	bl	8021e90 <__lshift>
 8020ea8:	0007      	movs	r7, r0
 8020eaa:	0038      	movs	r0, r7
 8020eac:	2d00      	cmp	r5, #0
 8020eae:	d018      	beq.n	8020ee2 <_dtoa_r+0x9fa>
 8020eb0:	6879      	ldr	r1, [r7, #4]
 8020eb2:	9803      	ldr	r0, [sp, #12]
 8020eb4:	f000 fd7e 	bl	80219b4 <_Balloc>
 8020eb8:	1e04      	subs	r4, r0, #0
 8020eba:	d105      	bne.n	8020ec8 <_dtoa_r+0x9e0>
 8020ebc:	0022      	movs	r2, r4
 8020ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8020f6c <_dtoa_r+0xa84>)
 8020ec0:	482b      	ldr	r0, [pc, #172]	@ (8020f70 <_dtoa_r+0xa88>)
 8020ec2:	492c      	ldr	r1, [pc, #176]	@ (8020f74 <_dtoa_r+0xa8c>)
 8020ec4:	f7ff fb25 	bl	8020512 <_dtoa_r+0x2a>
 8020ec8:	0039      	movs	r1, r7
 8020eca:	693a      	ldr	r2, [r7, #16]
 8020ecc:	310c      	adds	r1, #12
 8020ece:	3202      	adds	r2, #2
 8020ed0:	0092      	lsls	r2, r2, #2
 8020ed2:	300c      	adds	r0, #12
 8020ed4:	f7ff fa6a 	bl	80203ac <memcpy>
 8020ed8:	2201      	movs	r2, #1
 8020eda:	0021      	movs	r1, r4
 8020edc:	9803      	ldr	r0, [sp, #12]
 8020ede:	f000 ffd7 	bl	8021e90 <__lshift>
 8020ee2:	9b08      	ldr	r3, [sp, #32]
 8020ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ee6:	9306      	str	r3, [sp, #24]
 8020ee8:	3b01      	subs	r3, #1
 8020eea:	189b      	adds	r3, r3, r2
 8020eec:	2201      	movs	r2, #1
 8020eee:	9704      	str	r7, [sp, #16]
 8020ef0:	0007      	movs	r7, r0
 8020ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ef6:	4013      	ands	r3, r2
 8020ef8:	930e      	str	r3, [sp, #56]	@ 0x38
 8020efa:	0031      	movs	r1, r6
 8020efc:	9805      	ldr	r0, [sp, #20]
 8020efe:	f7ff fa65 	bl	80203cc <quorem>
 8020f02:	9904      	ldr	r1, [sp, #16]
 8020f04:	0005      	movs	r5, r0
 8020f06:	900a      	str	r0, [sp, #40]	@ 0x28
 8020f08:	9805      	ldr	r0, [sp, #20]
 8020f0a:	f001 f82d 	bl	8021f68 <__mcmp>
 8020f0e:	003a      	movs	r2, r7
 8020f10:	900d      	str	r0, [sp, #52]	@ 0x34
 8020f12:	0031      	movs	r1, r6
 8020f14:	9803      	ldr	r0, [sp, #12]
 8020f16:	f001 f843 	bl	8021fa0 <__mdiff>
 8020f1a:	2201      	movs	r2, #1
 8020f1c:	68c3      	ldr	r3, [r0, #12]
 8020f1e:	0004      	movs	r4, r0
 8020f20:	3530      	adds	r5, #48	@ 0x30
 8020f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d104      	bne.n	8020f32 <_dtoa_r+0xa4a>
 8020f28:	0001      	movs	r1, r0
 8020f2a:	9805      	ldr	r0, [sp, #20]
 8020f2c:	f001 f81c 	bl	8021f68 <__mcmp>
 8020f30:	9009      	str	r0, [sp, #36]	@ 0x24
 8020f32:	0021      	movs	r1, r4
 8020f34:	9803      	ldr	r0, [sp, #12]
 8020f36:	f000 fd81 	bl	8021a3c <_Bfree>
 8020f3a:	9b06      	ldr	r3, [sp, #24]
 8020f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020f3e:	1c5c      	adds	r4, r3, #1
 8020f40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f42:	4313      	orrs	r3, r2
 8020f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f46:	4313      	orrs	r3, r2
 8020f48:	d116      	bne.n	8020f78 <_dtoa_r+0xa90>
 8020f4a:	2d39      	cmp	r5, #57	@ 0x39
 8020f4c:	d02f      	beq.n	8020fae <_dtoa_r+0xac6>
 8020f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	dd01      	ble.n	8020f58 <_dtoa_r+0xa70>
 8020f54:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020f56:	3531      	adds	r5, #49	@ 0x31
 8020f58:	9b06      	ldr	r3, [sp, #24]
 8020f5a:	701d      	strb	r5, [r3, #0]
 8020f5c:	e638      	b.n	8020bd0 <_dtoa_r+0x6e8>
 8020f5e:	46c0      	nop			@ (mov r8, r8)
 8020f60:	40240000 	.word	0x40240000
 8020f64:	00000433 	.word	0x00000433
 8020f68:	7ff00000 	.word	0x7ff00000
 8020f6c:	08025dc9 	.word	0x08025dc9
 8020f70:	08025d71 	.word	0x08025d71
 8020f74:	000002ef 	.word	0x000002ef
 8020f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	db04      	blt.n	8020f88 <_dtoa_r+0xaa0>
 8020f7e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020f80:	4313      	orrs	r3, r2
 8020f82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f84:	4313      	orrs	r3, r2
 8020f86:	d11e      	bne.n	8020fc6 <_dtoa_r+0xade>
 8020f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	dde4      	ble.n	8020f58 <_dtoa_r+0xa70>
 8020f8e:	9905      	ldr	r1, [sp, #20]
 8020f90:	2201      	movs	r2, #1
 8020f92:	9803      	ldr	r0, [sp, #12]
 8020f94:	f000 ff7c 	bl	8021e90 <__lshift>
 8020f98:	0031      	movs	r1, r6
 8020f9a:	9005      	str	r0, [sp, #20]
 8020f9c:	f000 ffe4 	bl	8021f68 <__mcmp>
 8020fa0:	2800      	cmp	r0, #0
 8020fa2:	dc02      	bgt.n	8020faa <_dtoa_r+0xac2>
 8020fa4:	d1d8      	bne.n	8020f58 <_dtoa_r+0xa70>
 8020fa6:	07eb      	lsls	r3, r5, #31
 8020fa8:	d5d6      	bpl.n	8020f58 <_dtoa_r+0xa70>
 8020faa:	2d39      	cmp	r5, #57	@ 0x39
 8020fac:	d1d2      	bne.n	8020f54 <_dtoa_r+0xa6c>
 8020fae:	2339      	movs	r3, #57	@ 0x39
 8020fb0:	9a06      	ldr	r2, [sp, #24]
 8020fb2:	7013      	strb	r3, [r2, #0]
 8020fb4:	0023      	movs	r3, r4
 8020fb6:	001c      	movs	r4, r3
 8020fb8:	3b01      	subs	r3, #1
 8020fba:	781a      	ldrb	r2, [r3, #0]
 8020fbc:	2a39      	cmp	r2, #57	@ 0x39
 8020fbe:	d04f      	beq.n	8021060 <_dtoa_r+0xb78>
 8020fc0:	3201      	adds	r2, #1
 8020fc2:	701a      	strb	r2, [r3, #0]
 8020fc4:	e604      	b.n	8020bd0 <_dtoa_r+0x6e8>
 8020fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	dd03      	ble.n	8020fd4 <_dtoa_r+0xaec>
 8020fcc:	2d39      	cmp	r5, #57	@ 0x39
 8020fce:	d0ee      	beq.n	8020fae <_dtoa_r+0xac6>
 8020fd0:	3501      	adds	r5, #1
 8020fd2:	e7c1      	b.n	8020f58 <_dtoa_r+0xa70>
 8020fd4:	9b06      	ldr	r3, [sp, #24]
 8020fd6:	9a06      	ldr	r2, [sp, #24]
 8020fd8:	701d      	strb	r5, [r3, #0]
 8020fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fdc:	4293      	cmp	r3, r2
 8020fde:	d02a      	beq.n	8021036 <_dtoa_r+0xb4e>
 8020fe0:	2300      	movs	r3, #0
 8020fe2:	220a      	movs	r2, #10
 8020fe4:	9905      	ldr	r1, [sp, #20]
 8020fe6:	9803      	ldr	r0, [sp, #12]
 8020fe8:	f000 fd4c 	bl	8021a84 <__multadd>
 8020fec:	9b04      	ldr	r3, [sp, #16]
 8020fee:	9005      	str	r0, [sp, #20]
 8020ff0:	42bb      	cmp	r3, r7
 8020ff2:	d109      	bne.n	8021008 <_dtoa_r+0xb20>
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	220a      	movs	r2, #10
 8020ff8:	9904      	ldr	r1, [sp, #16]
 8020ffa:	9803      	ldr	r0, [sp, #12]
 8020ffc:	f000 fd42 	bl	8021a84 <__multadd>
 8021000:	9004      	str	r0, [sp, #16]
 8021002:	0007      	movs	r7, r0
 8021004:	9406      	str	r4, [sp, #24]
 8021006:	e778      	b.n	8020efa <_dtoa_r+0xa12>
 8021008:	9904      	ldr	r1, [sp, #16]
 802100a:	2300      	movs	r3, #0
 802100c:	220a      	movs	r2, #10
 802100e:	9803      	ldr	r0, [sp, #12]
 8021010:	f000 fd38 	bl	8021a84 <__multadd>
 8021014:	2300      	movs	r3, #0
 8021016:	9004      	str	r0, [sp, #16]
 8021018:	220a      	movs	r2, #10
 802101a:	0039      	movs	r1, r7
 802101c:	9803      	ldr	r0, [sp, #12]
 802101e:	f000 fd31 	bl	8021a84 <__multadd>
 8021022:	e7ee      	b.n	8021002 <_dtoa_r+0xb1a>
 8021024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021026:	2401      	movs	r4, #1
 8021028:	2b00      	cmp	r3, #0
 802102a:	dd00      	ble.n	802102e <_dtoa_r+0xb46>
 802102c:	001c      	movs	r4, r3
 802102e:	9b08      	ldr	r3, [sp, #32]
 8021030:	191c      	adds	r4, r3, r4
 8021032:	2300      	movs	r3, #0
 8021034:	9304      	str	r3, [sp, #16]
 8021036:	9905      	ldr	r1, [sp, #20]
 8021038:	2201      	movs	r2, #1
 802103a:	9803      	ldr	r0, [sp, #12]
 802103c:	f000 ff28 	bl	8021e90 <__lshift>
 8021040:	0031      	movs	r1, r6
 8021042:	9005      	str	r0, [sp, #20]
 8021044:	f000 ff90 	bl	8021f68 <__mcmp>
 8021048:	2800      	cmp	r0, #0
 802104a:	dcb3      	bgt.n	8020fb4 <_dtoa_r+0xacc>
 802104c:	d101      	bne.n	8021052 <_dtoa_r+0xb6a>
 802104e:	07ed      	lsls	r5, r5, #31
 8021050:	d4b0      	bmi.n	8020fb4 <_dtoa_r+0xacc>
 8021052:	0023      	movs	r3, r4
 8021054:	001c      	movs	r4, r3
 8021056:	3b01      	subs	r3, #1
 8021058:	781a      	ldrb	r2, [r3, #0]
 802105a:	2a30      	cmp	r2, #48	@ 0x30
 802105c:	d0fa      	beq.n	8021054 <_dtoa_r+0xb6c>
 802105e:	e5b7      	b.n	8020bd0 <_dtoa_r+0x6e8>
 8021060:	9a08      	ldr	r2, [sp, #32]
 8021062:	429a      	cmp	r2, r3
 8021064:	d1a7      	bne.n	8020fb6 <_dtoa_r+0xace>
 8021066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021068:	3301      	adds	r3, #1
 802106a:	930c      	str	r3, [sp, #48]	@ 0x30
 802106c:	2331      	movs	r3, #49	@ 0x31
 802106e:	7013      	strb	r3, [r2, #0]
 8021070:	e5ae      	b.n	8020bd0 <_dtoa_r+0x6e8>
 8021072:	4b15      	ldr	r3, [pc, #84]	@ (80210c8 <_dtoa_r+0xbe0>)
 8021074:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021076:	9308      	str	r3, [sp, #32]
 8021078:	4b14      	ldr	r3, [pc, #80]	@ (80210cc <_dtoa_r+0xbe4>)
 802107a:	2a00      	cmp	r2, #0
 802107c:	d001      	beq.n	8021082 <_dtoa_r+0xb9a>
 802107e:	f7ff fa7b 	bl	8020578 <_dtoa_r+0x90>
 8021082:	f7ff fa7b 	bl	802057c <_dtoa_r+0x94>
 8021086:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021088:	2b01      	cmp	r3, #1
 802108a:	dc00      	bgt.n	802108e <_dtoa_r+0xba6>
 802108c:	e648      	b.n	8020d20 <_dtoa_r+0x838>
 802108e:	2001      	movs	r0, #1
 8021090:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021092:	e665      	b.n	8020d60 <_dtoa_r+0x878>
 8021094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021096:	2b00      	cmp	r3, #0
 8021098:	dc00      	bgt.n	802109c <_dtoa_r+0xbb4>
 802109a:	e6d6      	b.n	8020e4a <_dtoa_r+0x962>
 802109c:	2400      	movs	r4, #0
 802109e:	0031      	movs	r1, r6
 80210a0:	9805      	ldr	r0, [sp, #20]
 80210a2:	f7ff f993 	bl	80203cc <quorem>
 80210a6:	9b08      	ldr	r3, [sp, #32]
 80210a8:	3030      	adds	r0, #48	@ 0x30
 80210aa:	5518      	strb	r0, [r3, r4]
 80210ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210ae:	3401      	adds	r4, #1
 80210b0:	0005      	movs	r5, r0
 80210b2:	429c      	cmp	r4, r3
 80210b4:	dab6      	bge.n	8021024 <_dtoa_r+0xb3c>
 80210b6:	2300      	movs	r3, #0
 80210b8:	220a      	movs	r2, #10
 80210ba:	9905      	ldr	r1, [sp, #20]
 80210bc:	9803      	ldr	r0, [sp, #12]
 80210be:	f000 fce1 	bl	8021a84 <__multadd>
 80210c2:	9005      	str	r0, [sp, #20]
 80210c4:	e7eb      	b.n	802109e <_dtoa_r+0xbb6>
 80210c6:	46c0      	nop			@ (mov r8, r8)
 80210c8:	08025d4d 	.word	0x08025d4d
 80210cc:	08025d55 	.word	0x08025d55

080210d0 <_free_r>:
 80210d0:	b570      	push	{r4, r5, r6, lr}
 80210d2:	0005      	movs	r5, r0
 80210d4:	1e0c      	subs	r4, r1, #0
 80210d6:	d010      	beq.n	80210fa <_free_r+0x2a>
 80210d8:	3c04      	subs	r4, #4
 80210da:	6823      	ldr	r3, [r4, #0]
 80210dc:	2b00      	cmp	r3, #0
 80210de:	da00      	bge.n	80210e2 <_free_r+0x12>
 80210e0:	18e4      	adds	r4, r4, r3
 80210e2:	0028      	movs	r0, r5
 80210e4:	f000 fc56 	bl	8021994 <__malloc_lock>
 80210e8:	4a1d      	ldr	r2, [pc, #116]	@ (8021160 <_free_r+0x90>)
 80210ea:	6813      	ldr	r3, [r2, #0]
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d105      	bne.n	80210fc <_free_r+0x2c>
 80210f0:	6063      	str	r3, [r4, #4]
 80210f2:	6014      	str	r4, [r2, #0]
 80210f4:	0028      	movs	r0, r5
 80210f6:	f000 fc55 	bl	80219a4 <__malloc_unlock>
 80210fa:	bd70      	pop	{r4, r5, r6, pc}
 80210fc:	42a3      	cmp	r3, r4
 80210fe:	d908      	bls.n	8021112 <_free_r+0x42>
 8021100:	6820      	ldr	r0, [r4, #0]
 8021102:	1821      	adds	r1, r4, r0
 8021104:	428b      	cmp	r3, r1
 8021106:	d1f3      	bne.n	80210f0 <_free_r+0x20>
 8021108:	6819      	ldr	r1, [r3, #0]
 802110a:	685b      	ldr	r3, [r3, #4]
 802110c:	1809      	adds	r1, r1, r0
 802110e:	6021      	str	r1, [r4, #0]
 8021110:	e7ee      	b.n	80210f0 <_free_r+0x20>
 8021112:	001a      	movs	r2, r3
 8021114:	685b      	ldr	r3, [r3, #4]
 8021116:	2b00      	cmp	r3, #0
 8021118:	d001      	beq.n	802111e <_free_r+0x4e>
 802111a:	42a3      	cmp	r3, r4
 802111c:	d9f9      	bls.n	8021112 <_free_r+0x42>
 802111e:	6811      	ldr	r1, [r2, #0]
 8021120:	1850      	adds	r0, r2, r1
 8021122:	42a0      	cmp	r0, r4
 8021124:	d10b      	bne.n	802113e <_free_r+0x6e>
 8021126:	6820      	ldr	r0, [r4, #0]
 8021128:	1809      	adds	r1, r1, r0
 802112a:	1850      	adds	r0, r2, r1
 802112c:	6011      	str	r1, [r2, #0]
 802112e:	4283      	cmp	r3, r0
 8021130:	d1e0      	bne.n	80210f4 <_free_r+0x24>
 8021132:	6818      	ldr	r0, [r3, #0]
 8021134:	685b      	ldr	r3, [r3, #4]
 8021136:	1841      	adds	r1, r0, r1
 8021138:	6011      	str	r1, [r2, #0]
 802113a:	6053      	str	r3, [r2, #4]
 802113c:	e7da      	b.n	80210f4 <_free_r+0x24>
 802113e:	42a0      	cmp	r0, r4
 8021140:	d902      	bls.n	8021148 <_free_r+0x78>
 8021142:	230c      	movs	r3, #12
 8021144:	602b      	str	r3, [r5, #0]
 8021146:	e7d5      	b.n	80210f4 <_free_r+0x24>
 8021148:	6820      	ldr	r0, [r4, #0]
 802114a:	1821      	adds	r1, r4, r0
 802114c:	428b      	cmp	r3, r1
 802114e:	d103      	bne.n	8021158 <_free_r+0x88>
 8021150:	6819      	ldr	r1, [r3, #0]
 8021152:	685b      	ldr	r3, [r3, #4]
 8021154:	1809      	adds	r1, r1, r0
 8021156:	6021      	str	r1, [r4, #0]
 8021158:	6063      	str	r3, [r4, #4]
 802115a:	6054      	str	r4, [r2, #4]
 802115c:	e7ca      	b.n	80210f4 <_free_r+0x24>
 802115e:	46c0      	nop			@ (mov r8, r8)
 8021160:	200037bc 	.word	0x200037bc

08021164 <rshift>:
 8021164:	0002      	movs	r2, r0
 8021166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021168:	6904      	ldr	r4, [r0, #16]
 802116a:	b085      	sub	sp, #20
 802116c:	3214      	adds	r2, #20
 802116e:	114b      	asrs	r3, r1, #5
 8021170:	0016      	movs	r6, r2
 8021172:	9302      	str	r3, [sp, #8]
 8021174:	429c      	cmp	r4, r3
 8021176:	dd31      	ble.n	80211dc <rshift+0x78>
 8021178:	261f      	movs	r6, #31
 802117a:	000f      	movs	r7, r1
 802117c:	009b      	lsls	r3, r3, #2
 802117e:	00a5      	lsls	r5, r4, #2
 8021180:	18d3      	adds	r3, r2, r3
 8021182:	4037      	ands	r7, r6
 8021184:	1955      	adds	r5, r2, r5
 8021186:	9300      	str	r3, [sp, #0]
 8021188:	9701      	str	r7, [sp, #4]
 802118a:	4231      	tst	r1, r6
 802118c:	d10d      	bne.n	80211aa <rshift+0x46>
 802118e:	0016      	movs	r6, r2
 8021190:	0019      	movs	r1, r3
 8021192:	428d      	cmp	r5, r1
 8021194:	d836      	bhi.n	8021204 <rshift+0xa0>
 8021196:	9b00      	ldr	r3, [sp, #0]
 8021198:	2600      	movs	r6, #0
 802119a:	3b03      	subs	r3, #3
 802119c:	429d      	cmp	r5, r3
 802119e:	d302      	bcc.n	80211a6 <rshift+0x42>
 80211a0:	9b02      	ldr	r3, [sp, #8]
 80211a2:	1ae4      	subs	r4, r4, r3
 80211a4:	00a6      	lsls	r6, r4, #2
 80211a6:	1996      	adds	r6, r2, r6
 80211a8:	e018      	b.n	80211dc <rshift+0x78>
 80211aa:	2120      	movs	r1, #32
 80211ac:	9e01      	ldr	r6, [sp, #4]
 80211ae:	9f01      	ldr	r7, [sp, #4]
 80211b0:	1b89      	subs	r1, r1, r6
 80211b2:	9e00      	ldr	r6, [sp, #0]
 80211b4:	9103      	str	r1, [sp, #12]
 80211b6:	ce02      	ldmia	r6!, {r1}
 80211b8:	4694      	mov	ip, r2
 80211ba:	40f9      	lsrs	r1, r7
 80211bc:	42b5      	cmp	r5, r6
 80211be:	d816      	bhi.n	80211ee <rshift+0x8a>
 80211c0:	9b00      	ldr	r3, [sp, #0]
 80211c2:	2600      	movs	r6, #0
 80211c4:	3301      	adds	r3, #1
 80211c6:	429d      	cmp	r5, r3
 80211c8:	d303      	bcc.n	80211d2 <rshift+0x6e>
 80211ca:	9b02      	ldr	r3, [sp, #8]
 80211cc:	1ae4      	subs	r4, r4, r3
 80211ce:	00a6      	lsls	r6, r4, #2
 80211d0:	3e04      	subs	r6, #4
 80211d2:	1996      	adds	r6, r2, r6
 80211d4:	6031      	str	r1, [r6, #0]
 80211d6:	2900      	cmp	r1, #0
 80211d8:	d000      	beq.n	80211dc <rshift+0x78>
 80211da:	3604      	adds	r6, #4
 80211dc:	1ab1      	subs	r1, r6, r2
 80211de:	1089      	asrs	r1, r1, #2
 80211e0:	6101      	str	r1, [r0, #16]
 80211e2:	4296      	cmp	r6, r2
 80211e4:	d101      	bne.n	80211ea <rshift+0x86>
 80211e6:	2300      	movs	r3, #0
 80211e8:	6143      	str	r3, [r0, #20]
 80211ea:	b005      	add	sp, #20
 80211ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211ee:	6837      	ldr	r7, [r6, #0]
 80211f0:	9b03      	ldr	r3, [sp, #12]
 80211f2:	409f      	lsls	r7, r3
 80211f4:	430f      	orrs	r7, r1
 80211f6:	4661      	mov	r1, ip
 80211f8:	c180      	stmia	r1!, {r7}
 80211fa:	468c      	mov	ip, r1
 80211fc:	9b01      	ldr	r3, [sp, #4]
 80211fe:	ce02      	ldmia	r6!, {r1}
 8021200:	40d9      	lsrs	r1, r3
 8021202:	e7db      	b.n	80211bc <rshift+0x58>
 8021204:	c980      	ldmia	r1!, {r7}
 8021206:	c680      	stmia	r6!, {r7}
 8021208:	e7c3      	b.n	8021192 <rshift+0x2e>

0802120a <__hexdig_fun>:
 802120a:	0002      	movs	r2, r0
 802120c:	3a30      	subs	r2, #48	@ 0x30
 802120e:	0003      	movs	r3, r0
 8021210:	2a09      	cmp	r2, #9
 8021212:	d802      	bhi.n	802121a <__hexdig_fun+0x10>
 8021214:	3b20      	subs	r3, #32
 8021216:	b2d8      	uxtb	r0, r3
 8021218:	4770      	bx	lr
 802121a:	0002      	movs	r2, r0
 802121c:	3a61      	subs	r2, #97	@ 0x61
 802121e:	2a05      	cmp	r2, #5
 8021220:	d801      	bhi.n	8021226 <__hexdig_fun+0x1c>
 8021222:	3b47      	subs	r3, #71	@ 0x47
 8021224:	e7f7      	b.n	8021216 <__hexdig_fun+0xc>
 8021226:	001a      	movs	r2, r3
 8021228:	3a41      	subs	r2, #65	@ 0x41
 802122a:	2000      	movs	r0, #0
 802122c:	2a05      	cmp	r2, #5
 802122e:	d8f3      	bhi.n	8021218 <__hexdig_fun+0xe>
 8021230:	3b27      	subs	r3, #39	@ 0x27
 8021232:	e7f0      	b.n	8021216 <__hexdig_fun+0xc>

08021234 <__gethex>:
 8021234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021236:	b089      	sub	sp, #36	@ 0x24
 8021238:	9307      	str	r3, [sp, #28]
 802123a:	680b      	ldr	r3, [r1, #0]
 802123c:	9201      	str	r2, [sp, #4]
 802123e:	9003      	str	r0, [sp, #12]
 8021240:	9106      	str	r1, [sp, #24]
 8021242:	1c9a      	adds	r2, r3, #2
 8021244:	0011      	movs	r1, r2
 8021246:	3201      	adds	r2, #1
 8021248:	1e50      	subs	r0, r2, #1
 802124a:	7800      	ldrb	r0, [r0, #0]
 802124c:	2830      	cmp	r0, #48	@ 0x30
 802124e:	d0f9      	beq.n	8021244 <__gethex+0x10>
 8021250:	1acb      	subs	r3, r1, r3
 8021252:	3b02      	subs	r3, #2
 8021254:	9305      	str	r3, [sp, #20]
 8021256:	9100      	str	r1, [sp, #0]
 8021258:	f7ff ffd7 	bl	802120a <__hexdig_fun>
 802125c:	2300      	movs	r3, #0
 802125e:	001d      	movs	r5, r3
 8021260:	9302      	str	r3, [sp, #8]
 8021262:	4298      	cmp	r0, r3
 8021264:	d11e      	bne.n	80212a4 <__gethex+0x70>
 8021266:	2201      	movs	r2, #1
 8021268:	49a6      	ldr	r1, [pc, #664]	@ (8021504 <__gethex+0x2d0>)
 802126a:	9800      	ldr	r0, [sp, #0]
 802126c:	f7fe ffd8 	bl	8020220 <strncmp>
 8021270:	0007      	movs	r7, r0
 8021272:	42a8      	cmp	r0, r5
 8021274:	d000      	beq.n	8021278 <__gethex+0x44>
 8021276:	e06a      	b.n	802134e <__gethex+0x11a>
 8021278:	9b00      	ldr	r3, [sp, #0]
 802127a:	7858      	ldrb	r0, [r3, #1]
 802127c:	1c5c      	adds	r4, r3, #1
 802127e:	f7ff ffc4 	bl	802120a <__hexdig_fun>
 8021282:	2301      	movs	r3, #1
 8021284:	9302      	str	r3, [sp, #8]
 8021286:	42a8      	cmp	r0, r5
 8021288:	d02f      	beq.n	80212ea <__gethex+0xb6>
 802128a:	9400      	str	r4, [sp, #0]
 802128c:	9b00      	ldr	r3, [sp, #0]
 802128e:	7818      	ldrb	r0, [r3, #0]
 8021290:	2830      	cmp	r0, #48	@ 0x30
 8021292:	d009      	beq.n	80212a8 <__gethex+0x74>
 8021294:	f7ff ffb9 	bl	802120a <__hexdig_fun>
 8021298:	4242      	negs	r2, r0
 802129a:	4142      	adcs	r2, r0
 802129c:	2301      	movs	r3, #1
 802129e:	0025      	movs	r5, r4
 80212a0:	9202      	str	r2, [sp, #8]
 80212a2:	9305      	str	r3, [sp, #20]
 80212a4:	9c00      	ldr	r4, [sp, #0]
 80212a6:	e004      	b.n	80212b2 <__gethex+0x7e>
 80212a8:	9b00      	ldr	r3, [sp, #0]
 80212aa:	3301      	adds	r3, #1
 80212ac:	9300      	str	r3, [sp, #0]
 80212ae:	e7ed      	b.n	802128c <__gethex+0x58>
 80212b0:	3401      	adds	r4, #1
 80212b2:	7820      	ldrb	r0, [r4, #0]
 80212b4:	f7ff ffa9 	bl	802120a <__hexdig_fun>
 80212b8:	1e07      	subs	r7, r0, #0
 80212ba:	d1f9      	bne.n	80212b0 <__gethex+0x7c>
 80212bc:	2201      	movs	r2, #1
 80212be:	0020      	movs	r0, r4
 80212c0:	4990      	ldr	r1, [pc, #576]	@ (8021504 <__gethex+0x2d0>)
 80212c2:	f7fe ffad 	bl	8020220 <strncmp>
 80212c6:	2800      	cmp	r0, #0
 80212c8:	d10d      	bne.n	80212e6 <__gethex+0xb2>
 80212ca:	2d00      	cmp	r5, #0
 80212cc:	d106      	bne.n	80212dc <__gethex+0xa8>
 80212ce:	3401      	adds	r4, #1
 80212d0:	0025      	movs	r5, r4
 80212d2:	7820      	ldrb	r0, [r4, #0]
 80212d4:	f7ff ff99 	bl	802120a <__hexdig_fun>
 80212d8:	2800      	cmp	r0, #0
 80212da:	d102      	bne.n	80212e2 <__gethex+0xae>
 80212dc:	1b2d      	subs	r5, r5, r4
 80212de:	00af      	lsls	r7, r5, #2
 80212e0:	e003      	b.n	80212ea <__gethex+0xb6>
 80212e2:	3401      	adds	r4, #1
 80212e4:	e7f5      	b.n	80212d2 <__gethex+0x9e>
 80212e6:	2d00      	cmp	r5, #0
 80212e8:	d1f8      	bne.n	80212dc <__gethex+0xa8>
 80212ea:	2220      	movs	r2, #32
 80212ec:	7823      	ldrb	r3, [r4, #0]
 80212ee:	0026      	movs	r6, r4
 80212f0:	4393      	bics	r3, r2
 80212f2:	2b50      	cmp	r3, #80	@ 0x50
 80212f4:	d11d      	bne.n	8021332 <__gethex+0xfe>
 80212f6:	7863      	ldrb	r3, [r4, #1]
 80212f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80212fa:	d02d      	beq.n	8021358 <__gethex+0x124>
 80212fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80212fe:	d02f      	beq.n	8021360 <__gethex+0x12c>
 8021300:	2300      	movs	r3, #0
 8021302:	1c66      	adds	r6, r4, #1
 8021304:	9304      	str	r3, [sp, #16]
 8021306:	7830      	ldrb	r0, [r6, #0]
 8021308:	f7ff ff7f 	bl	802120a <__hexdig_fun>
 802130c:	1e43      	subs	r3, r0, #1
 802130e:	b2db      	uxtb	r3, r3
 8021310:	0005      	movs	r5, r0
 8021312:	2b18      	cmp	r3, #24
 8021314:	d82a      	bhi.n	802136c <__gethex+0x138>
 8021316:	7870      	ldrb	r0, [r6, #1]
 8021318:	f7ff ff77 	bl	802120a <__hexdig_fun>
 802131c:	1e43      	subs	r3, r0, #1
 802131e:	b2db      	uxtb	r3, r3
 8021320:	3601      	adds	r6, #1
 8021322:	3d10      	subs	r5, #16
 8021324:	2b18      	cmp	r3, #24
 8021326:	d91d      	bls.n	8021364 <__gethex+0x130>
 8021328:	9b04      	ldr	r3, [sp, #16]
 802132a:	2b00      	cmp	r3, #0
 802132c:	d000      	beq.n	8021330 <__gethex+0xfc>
 802132e:	426d      	negs	r5, r5
 8021330:	197f      	adds	r7, r7, r5
 8021332:	9b06      	ldr	r3, [sp, #24]
 8021334:	601e      	str	r6, [r3, #0]
 8021336:	9b02      	ldr	r3, [sp, #8]
 8021338:	2b00      	cmp	r3, #0
 802133a:	d019      	beq.n	8021370 <__gethex+0x13c>
 802133c:	9b05      	ldr	r3, [sp, #20]
 802133e:	2606      	movs	r6, #6
 8021340:	425a      	negs	r2, r3
 8021342:	4153      	adcs	r3, r2
 8021344:	425b      	negs	r3, r3
 8021346:	401e      	ands	r6, r3
 8021348:	0030      	movs	r0, r6
 802134a:	b009      	add	sp, #36	@ 0x24
 802134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802134e:	2301      	movs	r3, #1
 8021350:	2700      	movs	r7, #0
 8021352:	9c00      	ldr	r4, [sp, #0]
 8021354:	9302      	str	r3, [sp, #8]
 8021356:	e7c8      	b.n	80212ea <__gethex+0xb6>
 8021358:	2300      	movs	r3, #0
 802135a:	9304      	str	r3, [sp, #16]
 802135c:	1ca6      	adds	r6, r4, #2
 802135e:	e7d2      	b.n	8021306 <__gethex+0xd2>
 8021360:	2301      	movs	r3, #1
 8021362:	e7fa      	b.n	802135a <__gethex+0x126>
 8021364:	230a      	movs	r3, #10
 8021366:	435d      	muls	r5, r3
 8021368:	182d      	adds	r5, r5, r0
 802136a:	e7d4      	b.n	8021316 <__gethex+0xe2>
 802136c:	0026      	movs	r6, r4
 802136e:	e7e0      	b.n	8021332 <__gethex+0xfe>
 8021370:	9b00      	ldr	r3, [sp, #0]
 8021372:	9902      	ldr	r1, [sp, #8]
 8021374:	1ae3      	subs	r3, r4, r3
 8021376:	3b01      	subs	r3, #1
 8021378:	2b07      	cmp	r3, #7
 802137a:	dc0a      	bgt.n	8021392 <__gethex+0x15e>
 802137c:	9803      	ldr	r0, [sp, #12]
 802137e:	f000 fb19 	bl	80219b4 <_Balloc>
 8021382:	1e05      	subs	r5, r0, #0
 8021384:	d108      	bne.n	8021398 <__gethex+0x164>
 8021386:	002a      	movs	r2, r5
 8021388:	21e4      	movs	r1, #228	@ 0xe4
 802138a:	4b5f      	ldr	r3, [pc, #380]	@ (8021508 <__gethex+0x2d4>)
 802138c:	485f      	ldr	r0, [pc, #380]	@ (802150c <__gethex+0x2d8>)
 802138e:	f001 fbf1 	bl	8022b74 <__assert_func>
 8021392:	3101      	adds	r1, #1
 8021394:	105b      	asrs	r3, r3, #1
 8021396:	e7ef      	b.n	8021378 <__gethex+0x144>
 8021398:	0003      	movs	r3, r0
 802139a:	3314      	adds	r3, #20
 802139c:	9302      	str	r3, [sp, #8]
 802139e:	9305      	str	r3, [sp, #20]
 80213a0:	2300      	movs	r3, #0
 80213a2:	001e      	movs	r6, r3
 80213a4:	9304      	str	r3, [sp, #16]
 80213a6:	9b00      	ldr	r3, [sp, #0]
 80213a8:	42a3      	cmp	r3, r4
 80213aa:	d338      	bcc.n	802141e <__gethex+0x1ea>
 80213ac:	9c05      	ldr	r4, [sp, #20]
 80213ae:	9b02      	ldr	r3, [sp, #8]
 80213b0:	c440      	stmia	r4!, {r6}
 80213b2:	1ae4      	subs	r4, r4, r3
 80213b4:	10a4      	asrs	r4, r4, #2
 80213b6:	0030      	movs	r0, r6
 80213b8:	612c      	str	r4, [r5, #16]
 80213ba:	f000 fbf3 	bl	8021ba4 <__hi0bits>
 80213be:	9b01      	ldr	r3, [sp, #4]
 80213c0:	0164      	lsls	r4, r4, #5
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	1a26      	subs	r6, r4, r0
 80213c6:	9300      	str	r3, [sp, #0]
 80213c8:	429e      	cmp	r6, r3
 80213ca:	dd52      	ble.n	8021472 <__gethex+0x23e>
 80213cc:	1af6      	subs	r6, r6, r3
 80213ce:	0031      	movs	r1, r6
 80213d0:	0028      	movs	r0, r5
 80213d2:	f000 ff96 	bl	8022302 <__any_on>
 80213d6:	1e04      	subs	r4, r0, #0
 80213d8:	d00f      	beq.n	80213fa <__gethex+0x1c6>
 80213da:	2401      	movs	r4, #1
 80213dc:	231f      	movs	r3, #31
 80213de:	0020      	movs	r0, r4
 80213e0:	1e72      	subs	r2, r6, #1
 80213e2:	4013      	ands	r3, r2
 80213e4:	4098      	lsls	r0, r3
 80213e6:	0003      	movs	r3, r0
 80213e8:	1151      	asrs	r1, r2, #5
 80213ea:	9802      	ldr	r0, [sp, #8]
 80213ec:	0089      	lsls	r1, r1, #2
 80213ee:	5809      	ldr	r1, [r1, r0]
 80213f0:	4219      	tst	r1, r3
 80213f2:	d002      	beq.n	80213fa <__gethex+0x1c6>
 80213f4:	42a2      	cmp	r2, r4
 80213f6:	dc34      	bgt.n	8021462 <__gethex+0x22e>
 80213f8:	2402      	movs	r4, #2
 80213fa:	0031      	movs	r1, r6
 80213fc:	0028      	movs	r0, r5
 80213fe:	f7ff feb1 	bl	8021164 <rshift>
 8021402:	19bf      	adds	r7, r7, r6
 8021404:	9b01      	ldr	r3, [sp, #4]
 8021406:	689b      	ldr	r3, [r3, #8]
 8021408:	42bb      	cmp	r3, r7
 802140a:	da42      	bge.n	8021492 <__gethex+0x25e>
 802140c:	0029      	movs	r1, r5
 802140e:	9803      	ldr	r0, [sp, #12]
 8021410:	f000 fb14 	bl	8021a3c <_Bfree>
 8021414:	2300      	movs	r3, #0
 8021416:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021418:	26a3      	movs	r6, #163	@ 0xa3
 802141a:	6013      	str	r3, [r2, #0]
 802141c:	e794      	b.n	8021348 <__gethex+0x114>
 802141e:	3c01      	subs	r4, #1
 8021420:	7823      	ldrb	r3, [r4, #0]
 8021422:	2b2e      	cmp	r3, #46	@ 0x2e
 8021424:	d012      	beq.n	802144c <__gethex+0x218>
 8021426:	9b04      	ldr	r3, [sp, #16]
 8021428:	2b20      	cmp	r3, #32
 802142a:	d104      	bne.n	8021436 <__gethex+0x202>
 802142c:	9b05      	ldr	r3, [sp, #20]
 802142e:	c340      	stmia	r3!, {r6}
 8021430:	2600      	movs	r6, #0
 8021432:	9305      	str	r3, [sp, #20]
 8021434:	9604      	str	r6, [sp, #16]
 8021436:	7820      	ldrb	r0, [r4, #0]
 8021438:	f7ff fee7 	bl	802120a <__hexdig_fun>
 802143c:	230f      	movs	r3, #15
 802143e:	4018      	ands	r0, r3
 8021440:	9b04      	ldr	r3, [sp, #16]
 8021442:	4098      	lsls	r0, r3
 8021444:	3304      	adds	r3, #4
 8021446:	4306      	orrs	r6, r0
 8021448:	9304      	str	r3, [sp, #16]
 802144a:	e7ac      	b.n	80213a6 <__gethex+0x172>
 802144c:	9b00      	ldr	r3, [sp, #0]
 802144e:	42a3      	cmp	r3, r4
 8021450:	d8e9      	bhi.n	8021426 <__gethex+0x1f2>
 8021452:	2201      	movs	r2, #1
 8021454:	0020      	movs	r0, r4
 8021456:	492b      	ldr	r1, [pc, #172]	@ (8021504 <__gethex+0x2d0>)
 8021458:	f7fe fee2 	bl	8020220 <strncmp>
 802145c:	2800      	cmp	r0, #0
 802145e:	d1e2      	bne.n	8021426 <__gethex+0x1f2>
 8021460:	e7a1      	b.n	80213a6 <__gethex+0x172>
 8021462:	0028      	movs	r0, r5
 8021464:	1eb1      	subs	r1, r6, #2
 8021466:	f000 ff4c 	bl	8022302 <__any_on>
 802146a:	2800      	cmp	r0, #0
 802146c:	d0c4      	beq.n	80213f8 <__gethex+0x1c4>
 802146e:	2403      	movs	r4, #3
 8021470:	e7c3      	b.n	80213fa <__gethex+0x1c6>
 8021472:	9b00      	ldr	r3, [sp, #0]
 8021474:	2400      	movs	r4, #0
 8021476:	429e      	cmp	r6, r3
 8021478:	dac4      	bge.n	8021404 <__gethex+0x1d0>
 802147a:	1b9e      	subs	r6, r3, r6
 802147c:	0029      	movs	r1, r5
 802147e:	0032      	movs	r2, r6
 8021480:	9803      	ldr	r0, [sp, #12]
 8021482:	f000 fd05 	bl	8021e90 <__lshift>
 8021486:	0003      	movs	r3, r0
 8021488:	3314      	adds	r3, #20
 802148a:	0005      	movs	r5, r0
 802148c:	1bbf      	subs	r7, r7, r6
 802148e:	9302      	str	r3, [sp, #8]
 8021490:	e7b8      	b.n	8021404 <__gethex+0x1d0>
 8021492:	9b01      	ldr	r3, [sp, #4]
 8021494:	685e      	ldr	r6, [r3, #4]
 8021496:	42be      	cmp	r6, r7
 8021498:	dd6f      	ble.n	802157a <__gethex+0x346>
 802149a:	9b00      	ldr	r3, [sp, #0]
 802149c:	1bf6      	subs	r6, r6, r7
 802149e:	42b3      	cmp	r3, r6
 80214a0:	dc36      	bgt.n	8021510 <__gethex+0x2dc>
 80214a2:	9b01      	ldr	r3, [sp, #4]
 80214a4:	68db      	ldr	r3, [r3, #12]
 80214a6:	2b02      	cmp	r3, #2
 80214a8:	d024      	beq.n	80214f4 <__gethex+0x2c0>
 80214aa:	2b03      	cmp	r3, #3
 80214ac:	d026      	beq.n	80214fc <__gethex+0x2c8>
 80214ae:	2b01      	cmp	r3, #1
 80214b0:	d117      	bne.n	80214e2 <__gethex+0x2ae>
 80214b2:	9b00      	ldr	r3, [sp, #0]
 80214b4:	42b3      	cmp	r3, r6
 80214b6:	d114      	bne.n	80214e2 <__gethex+0x2ae>
 80214b8:	2b01      	cmp	r3, #1
 80214ba:	d10b      	bne.n	80214d4 <__gethex+0x2a0>
 80214bc:	9b01      	ldr	r3, [sp, #4]
 80214be:	9a07      	ldr	r2, [sp, #28]
 80214c0:	685b      	ldr	r3, [r3, #4]
 80214c2:	2662      	movs	r6, #98	@ 0x62
 80214c4:	6013      	str	r3, [r2, #0]
 80214c6:	2301      	movs	r3, #1
 80214c8:	9a02      	ldr	r2, [sp, #8]
 80214ca:	612b      	str	r3, [r5, #16]
 80214cc:	6013      	str	r3, [r2, #0]
 80214ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214d0:	601d      	str	r5, [r3, #0]
 80214d2:	e739      	b.n	8021348 <__gethex+0x114>
 80214d4:	9900      	ldr	r1, [sp, #0]
 80214d6:	0028      	movs	r0, r5
 80214d8:	3901      	subs	r1, #1
 80214da:	f000 ff12 	bl	8022302 <__any_on>
 80214de:	2800      	cmp	r0, #0
 80214e0:	d1ec      	bne.n	80214bc <__gethex+0x288>
 80214e2:	0029      	movs	r1, r5
 80214e4:	9803      	ldr	r0, [sp, #12]
 80214e6:	f000 faa9 	bl	8021a3c <_Bfree>
 80214ea:	2300      	movs	r3, #0
 80214ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214ee:	2650      	movs	r6, #80	@ 0x50
 80214f0:	6013      	str	r3, [r2, #0]
 80214f2:	e729      	b.n	8021348 <__gethex+0x114>
 80214f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d1f3      	bne.n	80214e2 <__gethex+0x2ae>
 80214fa:	e7df      	b.n	80214bc <__gethex+0x288>
 80214fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d1dc      	bne.n	80214bc <__gethex+0x288>
 8021502:	e7ee      	b.n	80214e2 <__gethex+0x2ae>
 8021504:	08025bbc 	.word	0x08025bbc
 8021508:	08025dc9 	.word	0x08025dc9
 802150c:	08025dda 	.word	0x08025dda
 8021510:	1e77      	subs	r7, r6, #1
 8021512:	2c00      	cmp	r4, #0
 8021514:	d12f      	bne.n	8021576 <__gethex+0x342>
 8021516:	2f00      	cmp	r7, #0
 8021518:	d004      	beq.n	8021524 <__gethex+0x2f0>
 802151a:	0039      	movs	r1, r7
 802151c:	0028      	movs	r0, r5
 802151e:	f000 fef0 	bl	8022302 <__any_on>
 8021522:	0004      	movs	r4, r0
 8021524:	231f      	movs	r3, #31
 8021526:	117a      	asrs	r2, r7, #5
 8021528:	401f      	ands	r7, r3
 802152a:	3b1e      	subs	r3, #30
 802152c:	40bb      	lsls	r3, r7
 802152e:	9902      	ldr	r1, [sp, #8]
 8021530:	0092      	lsls	r2, r2, #2
 8021532:	5852      	ldr	r2, [r2, r1]
 8021534:	421a      	tst	r2, r3
 8021536:	d001      	beq.n	802153c <__gethex+0x308>
 8021538:	2302      	movs	r3, #2
 802153a:	431c      	orrs	r4, r3
 802153c:	9b00      	ldr	r3, [sp, #0]
 802153e:	0031      	movs	r1, r6
 8021540:	1b9b      	subs	r3, r3, r6
 8021542:	2602      	movs	r6, #2
 8021544:	0028      	movs	r0, r5
 8021546:	9300      	str	r3, [sp, #0]
 8021548:	f7ff fe0c 	bl	8021164 <rshift>
 802154c:	9b01      	ldr	r3, [sp, #4]
 802154e:	685f      	ldr	r7, [r3, #4]
 8021550:	2c00      	cmp	r4, #0
 8021552:	d03f      	beq.n	80215d4 <__gethex+0x3a0>
 8021554:	9b01      	ldr	r3, [sp, #4]
 8021556:	68db      	ldr	r3, [r3, #12]
 8021558:	2b02      	cmp	r3, #2
 802155a:	d010      	beq.n	802157e <__gethex+0x34a>
 802155c:	2b03      	cmp	r3, #3
 802155e:	d012      	beq.n	8021586 <__gethex+0x352>
 8021560:	2b01      	cmp	r3, #1
 8021562:	d106      	bne.n	8021572 <__gethex+0x33e>
 8021564:	07a2      	lsls	r2, r4, #30
 8021566:	d504      	bpl.n	8021572 <__gethex+0x33e>
 8021568:	9a02      	ldr	r2, [sp, #8]
 802156a:	6812      	ldr	r2, [r2, #0]
 802156c:	4314      	orrs	r4, r2
 802156e:	421c      	tst	r4, r3
 8021570:	d10c      	bne.n	802158c <__gethex+0x358>
 8021572:	2310      	movs	r3, #16
 8021574:	e02d      	b.n	80215d2 <__gethex+0x39e>
 8021576:	2401      	movs	r4, #1
 8021578:	e7d4      	b.n	8021524 <__gethex+0x2f0>
 802157a:	2601      	movs	r6, #1
 802157c:	e7e8      	b.n	8021550 <__gethex+0x31c>
 802157e:	2301      	movs	r3, #1
 8021580:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021582:	1a9b      	subs	r3, r3, r2
 8021584:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021588:	2b00      	cmp	r3, #0
 802158a:	d0f2      	beq.n	8021572 <__gethex+0x33e>
 802158c:	692b      	ldr	r3, [r5, #16]
 802158e:	2000      	movs	r0, #0
 8021590:	9302      	str	r3, [sp, #8]
 8021592:	009b      	lsls	r3, r3, #2
 8021594:	9304      	str	r3, [sp, #16]
 8021596:	002b      	movs	r3, r5
 8021598:	9a04      	ldr	r2, [sp, #16]
 802159a:	3314      	adds	r3, #20
 802159c:	1899      	adds	r1, r3, r2
 802159e:	681a      	ldr	r2, [r3, #0]
 80215a0:	1c54      	adds	r4, r2, #1
 80215a2:	d01c      	beq.n	80215de <__gethex+0x3aa>
 80215a4:	3201      	adds	r2, #1
 80215a6:	601a      	str	r2, [r3, #0]
 80215a8:	002b      	movs	r3, r5
 80215aa:	3314      	adds	r3, #20
 80215ac:	2e02      	cmp	r6, #2
 80215ae:	d13f      	bne.n	8021630 <__gethex+0x3fc>
 80215b0:	9a01      	ldr	r2, [sp, #4]
 80215b2:	9900      	ldr	r1, [sp, #0]
 80215b4:	6812      	ldr	r2, [r2, #0]
 80215b6:	3a01      	subs	r2, #1
 80215b8:	428a      	cmp	r2, r1
 80215ba:	d109      	bne.n	80215d0 <__gethex+0x39c>
 80215bc:	000a      	movs	r2, r1
 80215be:	201f      	movs	r0, #31
 80215c0:	4010      	ands	r0, r2
 80215c2:	2201      	movs	r2, #1
 80215c4:	4082      	lsls	r2, r0
 80215c6:	1149      	asrs	r1, r1, #5
 80215c8:	0089      	lsls	r1, r1, #2
 80215ca:	58cb      	ldr	r3, [r1, r3]
 80215cc:	4213      	tst	r3, r2
 80215ce:	d13d      	bne.n	802164c <__gethex+0x418>
 80215d0:	2320      	movs	r3, #32
 80215d2:	431e      	orrs	r6, r3
 80215d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80215d6:	601d      	str	r5, [r3, #0]
 80215d8:	9b07      	ldr	r3, [sp, #28]
 80215da:	601f      	str	r7, [r3, #0]
 80215dc:	e6b4      	b.n	8021348 <__gethex+0x114>
 80215de:	c301      	stmia	r3!, {r0}
 80215e0:	4299      	cmp	r1, r3
 80215e2:	d8dc      	bhi.n	802159e <__gethex+0x36a>
 80215e4:	68ab      	ldr	r3, [r5, #8]
 80215e6:	9a02      	ldr	r2, [sp, #8]
 80215e8:	429a      	cmp	r2, r3
 80215ea:	db18      	blt.n	802161e <__gethex+0x3ea>
 80215ec:	6869      	ldr	r1, [r5, #4]
 80215ee:	9803      	ldr	r0, [sp, #12]
 80215f0:	3101      	adds	r1, #1
 80215f2:	f000 f9df 	bl	80219b4 <_Balloc>
 80215f6:	1e04      	subs	r4, r0, #0
 80215f8:	d104      	bne.n	8021604 <__gethex+0x3d0>
 80215fa:	0022      	movs	r2, r4
 80215fc:	2184      	movs	r1, #132	@ 0x84
 80215fe:	4b1d      	ldr	r3, [pc, #116]	@ (8021674 <__gethex+0x440>)
 8021600:	481d      	ldr	r0, [pc, #116]	@ (8021678 <__gethex+0x444>)
 8021602:	e6c4      	b.n	802138e <__gethex+0x15a>
 8021604:	0029      	movs	r1, r5
 8021606:	692a      	ldr	r2, [r5, #16]
 8021608:	310c      	adds	r1, #12
 802160a:	3202      	adds	r2, #2
 802160c:	0092      	lsls	r2, r2, #2
 802160e:	300c      	adds	r0, #12
 8021610:	f7fe fecc 	bl	80203ac <memcpy>
 8021614:	0029      	movs	r1, r5
 8021616:	9803      	ldr	r0, [sp, #12]
 8021618:	f000 fa10 	bl	8021a3c <_Bfree>
 802161c:	0025      	movs	r5, r4
 802161e:	692b      	ldr	r3, [r5, #16]
 8021620:	1c5a      	adds	r2, r3, #1
 8021622:	612a      	str	r2, [r5, #16]
 8021624:	2201      	movs	r2, #1
 8021626:	3304      	adds	r3, #4
 8021628:	009b      	lsls	r3, r3, #2
 802162a:	18eb      	adds	r3, r5, r3
 802162c:	605a      	str	r2, [r3, #4]
 802162e:	e7bb      	b.n	80215a8 <__gethex+0x374>
 8021630:	692a      	ldr	r2, [r5, #16]
 8021632:	9902      	ldr	r1, [sp, #8]
 8021634:	428a      	cmp	r2, r1
 8021636:	dd0b      	ble.n	8021650 <__gethex+0x41c>
 8021638:	2101      	movs	r1, #1
 802163a:	0028      	movs	r0, r5
 802163c:	f7ff fd92 	bl	8021164 <rshift>
 8021640:	9b01      	ldr	r3, [sp, #4]
 8021642:	3701      	adds	r7, #1
 8021644:	689b      	ldr	r3, [r3, #8]
 8021646:	42bb      	cmp	r3, r7
 8021648:	da00      	bge.n	802164c <__gethex+0x418>
 802164a:	e6df      	b.n	802140c <__gethex+0x1d8>
 802164c:	2601      	movs	r6, #1
 802164e:	e7bf      	b.n	80215d0 <__gethex+0x39c>
 8021650:	221f      	movs	r2, #31
 8021652:	9c00      	ldr	r4, [sp, #0]
 8021654:	9900      	ldr	r1, [sp, #0]
 8021656:	4014      	ands	r4, r2
 8021658:	4211      	tst	r1, r2
 802165a:	d0f7      	beq.n	802164c <__gethex+0x418>
 802165c:	9a04      	ldr	r2, [sp, #16]
 802165e:	189b      	adds	r3, r3, r2
 8021660:	3b04      	subs	r3, #4
 8021662:	6818      	ldr	r0, [r3, #0]
 8021664:	f000 fa9e 	bl	8021ba4 <__hi0bits>
 8021668:	2320      	movs	r3, #32
 802166a:	1b1b      	subs	r3, r3, r4
 802166c:	4298      	cmp	r0, r3
 802166e:	dbe3      	blt.n	8021638 <__gethex+0x404>
 8021670:	e7ec      	b.n	802164c <__gethex+0x418>
 8021672:	46c0      	nop			@ (mov r8, r8)
 8021674:	08025dc9 	.word	0x08025dc9
 8021678:	08025dda 	.word	0x08025dda

0802167c <L_shift>:
 802167c:	2308      	movs	r3, #8
 802167e:	b570      	push	{r4, r5, r6, lr}
 8021680:	2520      	movs	r5, #32
 8021682:	1a9a      	subs	r2, r3, r2
 8021684:	0092      	lsls	r2, r2, #2
 8021686:	1aad      	subs	r5, r5, r2
 8021688:	6843      	ldr	r3, [r0, #4]
 802168a:	6804      	ldr	r4, [r0, #0]
 802168c:	001e      	movs	r6, r3
 802168e:	40ae      	lsls	r6, r5
 8021690:	40d3      	lsrs	r3, r2
 8021692:	4334      	orrs	r4, r6
 8021694:	6004      	str	r4, [r0, #0]
 8021696:	6043      	str	r3, [r0, #4]
 8021698:	3004      	adds	r0, #4
 802169a:	4288      	cmp	r0, r1
 802169c:	d3f4      	bcc.n	8021688 <L_shift+0xc>
 802169e:	bd70      	pop	{r4, r5, r6, pc}

080216a0 <__match>:
 80216a0:	b530      	push	{r4, r5, lr}
 80216a2:	6803      	ldr	r3, [r0, #0]
 80216a4:	780c      	ldrb	r4, [r1, #0]
 80216a6:	3301      	adds	r3, #1
 80216a8:	2c00      	cmp	r4, #0
 80216aa:	d102      	bne.n	80216b2 <__match+0x12>
 80216ac:	6003      	str	r3, [r0, #0]
 80216ae:	2001      	movs	r0, #1
 80216b0:	bd30      	pop	{r4, r5, pc}
 80216b2:	781a      	ldrb	r2, [r3, #0]
 80216b4:	0015      	movs	r5, r2
 80216b6:	3d41      	subs	r5, #65	@ 0x41
 80216b8:	2d19      	cmp	r5, #25
 80216ba:	d800      	bhi.n	80216be <__match+0x1e>
 80216bc:	3220      	adds	r2, #32
 80216be:	3101      	adds	r1, #1
 80216c0:	42a2      	cmp	r2, r4
 80216c2:	d0ef      	beq.n	80216a4 <__match+0x4>
 80216c4:	2000      	movs	r0, #0
 80216c6:	e7f3      	b.n	80216b0 <__match+0x10>

080216c8 <__hexnan>:
 80216c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ca:	680b      	ldr	r3, [r1, #0]
 80216cc:	b08b      	sub	sp, #44	@ 0x2c
 80216ce:	9201      	str	r2, [sp, #4]
 80216d0:	9901      	ldr	r1, [sp, #4]
 80216d2:	115a      	asrs	r2, r3, #5
 80216d4:	0092      	lsls	r2, r2, #2
 80216d6:	188a      	adds	r2, r1, r2
 80216d8:	9202      	str	r2, [sp, #8]
 80216da:	0019      	movs	r1, r3
 80216dc:	221f      	movs	r2, #31
 80216de:	4011      	ands	r1, r2
 80216e0:	9008      	str	r0, [sp, #32]
 80216e2:	9106      	str	r1, [sp, #24]
 80216e4:	4213      	tst	r3, r2
 80216e6:	d002      	beq.n	80216ee <__hexnan+0x26>
 80216e8:	9b02      	ldr	r3, [sp, #8]
 80216ea:	3304      	adds	r3, #4
 80216ec:	9302      	str	r3, [sp, #8]
 80216ee:	9b02      	ldr	r3, [sp, #8]
 80216f0:	2500      	movs	r5, #0
 80216f2:	1f1f      	subs	r7, r3, #4
 80216f4:	003e      	movs	r6, r7
 80216f6:	003c      	movs	r4, r7
 80216f8:	9b08      	ldr	r3, [sp, #32]
 80216fa:	603d      	str	r5, [r7, #0]
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	9507      	str	r5, [sp, #28]
 8021700:	9305      	str	r3, [sp, #20]
 8021702:	9503      	str	r5, [sp, #12]
 8021704:	9b05      	ldr	r3, [sp, #20]
 8021706:	3301      	adds	r3, #1
 8021708:	9309      	str	r3, [sp, #36]	@ 0x24
 802170a:	9b05      	ldr	r3, [sp, #20]
 802170c:	785b      	ldrb	r3, [r3, #1]
 802170e:	9304      	str	r3, [sp, #16]
 8021710:	2b00      	cmp	r3, #0
 8021712:	d028      	beq.n	8021766 <__hexnan+0x9e>
 8021714:	9804      	ldr	r0, [sp, #16]
 8021716:	f7ff fd78 	bl	802120a <__hexdig_fun>
 802171a:	2800      	cmp	r0, #0
 802171c:	d155      	bne.n	80217ca <__hexnan+0x102>
 802171e:	9b04      	ldr	r3, [sp, #16]
 8021720:	2b20      	cmp	r3, #32
 8021722:	d819      	bhi.n	8021758 <__hexnan+0x90>
 8021724:	9b03      	ldr	r3, [sp, #12]
 8021726:	9a07      	ldr	r2, [sp, #28]
 8021728:	4293      	cmp	r3, r2
 802172a:	dd12      	ble.n	8021752 <__hexnan+0x8a>
 802172c:	42b4      	cmp	r4, r6
 802172e:	d206      	bcs.n	802173e <__hexnan+0x76>
 8021730:	2d07      	cmp	r5, #7
 8021732:	dc04      	bgt.n	802173e <__hexnan+0x76>
 8021734:	002a      	movs	r2, r5
 8021736:	0031      	movs	r1, r6
 8021738:	0020      	movs	r0, r4
 802173a:	f7ff ff9f 	bl	802167c <L_shift>
 802173e:	9b01      	ldr	r3, [sp, #4]
 8021740:	2508      	movs	r5, #8
 8021742:	429c      	cmp	r4, r3
 8021744:	d905      	bls.n	8021752 <__hexnan+0x8a>
 8021746:	1f26      	subs	r6, r4, #4
 8021748:	2500      	movs	r5, #0
 802174a:	0034      	movs	r4, r6
 802174c:	9b03      	ldr	r3, [sp, #12]
 802174e:	6035      	str	r5, [r6, #0]
 8021750:	9307      	str	r3, [sp, #28]
 8021752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021754:	9305      	str	r3, [sp, #20]
 8021756:	e7d5      	b.n	8021704 <__hexnan+0x3c>
 8021758:	9b04      	ldr	r3, [sp, #16]
 802175a:	2b29      	cmp	r3, #41	@ 0x29
 802175c:	d15a      	bne.n	8021814 <__hexnan+0x14c>
 802175e:	9b05      	ldr	r3, [sp, #20]
 8021760:	9a08      	ldr	r2, [sp, #32]
 8021762:	3302      	adds	r3, #2
 8021764:	6013      	str	r3, [r2, #0]
 8021766:	9b03      	ldr	r3, [sp, #12]
 8021768:	2b00      	cmp	r3, #0
 802176a:	d053      	beq.n	8021814 <__hexnan+0x14c>
 802176c:	42b4      	cmp	r4, r6
 802176e:	d206      	bcs.n	802177e <__hexnan+0xb6>
 8021770:	2d07      	cmp	r5, #7
 8021772:	dc04      	bgt.n	802177e <__hexnan+0xb6>
 8021774:	002a      	movs	r2, r5
 8021776:	0031      	movs	r1, r6
 8021778:	0020      	movs	r0, r4
 802177a:	f7ff ff7f 	bl	802167c <L_shift>
 802177e:	9b01      	ldr	r3, [sp, #4]
 8021780:	429c      	cmp	r4, r3
 8021782:	d936      	bls.n	80217f2 <__hexnan+0x12a>
 8021784:	001a      	movs	r2, r3
 8021786:	0023      	movs	r3, r4
 8021788:	cb02      	ldmia	r3!, {r1}
 802178a:	c202      	stmia	r2!, {r1}
 802178c:	429f      	cmp	r7, r3
 802178e:	d2fb      	bcs.n	8021788 <__hexnan+0xc0>
 8021790:	9b02      	ldr	r3, [sp, #8]
 8021792:	1c61      	adds	r1, r4, #1
 8021794:	1eda      	subs	r2, r3, #3
 8021796:	2304      	movs	r3, #4
 8021798:	4291      	cmp	r1, r2
 802179a:	d805      	bhi.n	80217a8 <__hexnan+0xe0>
 802179c:	9b02      	ldr	r3, [sp, #8]
 802179e:	3b04      	subs	r3, #4
 80217a0:	1b1b      	subs	r3, r3, r4
 80217a2:	089b      	lsrs	r3, r3, #2
 80217a4:	3301      	adds	r3, #1
 80217a6:	009b      	lsls	r3, r3, #2
 80217a8:	9a01      	ldr	r2, [sp, #4]
 80217aa:	18d3      	adds	r3, r2, r3
 80217ac:	2200      	movs	r2, #0
 80217ae:	c304      	stmia	r3!, {r2}
 80217b0:	429f      	cmp	r7, r3
 80217b2:	d2fc      	bcs.n	80217ae <__hexnan+0xe6>
 80217b4:	683b      	ldr	r3, [r7, #0]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d104      	bne.n	80217c4 <__hexnan+0xfc>
 80217ba:	9b01      	ldr	r3, [sp, #4]
 80217bc:	429f      	cmp	r7, r3
 80217be:	d127      	bne.n	8021810 <__hexnan+0x148>
 80217c0:	2301      	movs	r3, #1
 80217c2:	603b      	str	r3, [r7, #0]
 80217c4:	2005      	movs	r0, #5
 80217c6:	b00b      	add	sp, #44	@ 0x2c
 80217c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217ca:	9b03      	ldr	r3, [sp, #12]
 80217cc:	3501      	adds	r5, #1
 80217ce:	3301      	adds	r3, #1
 80217d0:	9303      	str	r3, [sp, #12]
 80217d2:	2d08      	cmp	r5, #8
 80217d4:	dd06      	ble.n	80217e4 <__hexnan+0x11c>
 80217d6:	9b01      	ldr	r3, [sp, #4]
 80217d8:	429c      	cmp	r4, r3
 80217da:	d9ba      	bls.n	8021752 <__hexnan+0x8a>
 80217dc:	2300      	movs	r3, #0
 80217de:	2501      	movs	r5, #1
 80217e0:	3c04      	subs	r4, #4
 80217e2:	6023      	str	r3, [r4, #0]
 80217e4:	220f      	movs	r2, #15
 80217e6:	6823      	ldr	r3, [r4, #0]
 80217e8:	4010      	ands	r0, r2
 80217ea:	011b      	lsls	r3, r3, #4
 80217ec:	4303      	orrs	r3, r0
 80217ee:	6023      	str	r3, [r4, #0]
 80217f0:	e7af      	b.n	8021752 <__hexnan+0x8a>
 80217f2:	9b06      	ldr	r3, [sp, #24]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d0dd      	beq.n	80217b4 <__hexnan+0xec>
 80217f8:	2320      	movs	r3, #32
 80217fa:	9a06      	ldr	r2, [sp, #24]
 80217fc:	9902      	ldr	r1, [sp, #8]
 80217fe:	1a9b      	subs	r3, r3, r2
 8021800:	2201      	movs	r2, #1
 8021802:	4252      	negs	r2, r2
 8021804:	40da      	lsrs	r2, r3
 8021806:	3904      	subs	r1, #4
 8021808:	680b      	ldr	r3, [r1, #0]
 802180a:	4013      	ands	r3, r2
 802180c:	600b      	str	r3, [r1, #0]
 802180e:	e7d1      	b.n	80217b4 <__hexnan+0xec>
 8021810:	3f04      	subs	r7, #4
 8021812:	e7cf      	b.n	80217b4 <__hexnan+0xec>
 8021814:	2004      	movs	r0, #4
 8021816:	e7d6      	b.n	80217c6 <__hexnan+0xfe>

08021818 <malloc>:
 8021818:	b510      	push	{r4, lr}
 802181a:	4b03      	ldr	r3, [pc, #12]	@ (8021828 <malloc+0x10>)
 802181c:	0001      	movs	r1, r0
 802181e:	6818      	ldr	r0, [r3, #0]
 8021820:	f000 f826 	bl	8021870 <_malloc_r>
 8021824:	bd10      	pop	{r4, pc}
 8021826:	46c0      	nop			@ (mov r8, r8)
 8021828:	200003d4 	.word	0x200003d4

0802182c <sbrk_aligned>:
 802182c:	b570      	push	{r4, r5, r6, lr}
 802182e:	4e0f      	ldr	r6, [pc, #60]	@ (802186c <sbrk_aligned+0x40>)
 8021830:	000d      	movs	r5, r1
 8021832:	6831      	ldr	r1, [r6, #0]
 8021834:	0004      	movs	r4, r0
 8021836:	2900      	cmp	r1, #0
 8021838:	d102      	bne.n	8021840 <sbrk_aligned+0x14>
 802183a:	f001 f989 	bl	8022b50 <_sbrk_r>
 802183e:	6030      	str	r0, [r6, #0]
 8021840:	0029      	movs	r1, r5
 8021842:	0020      	movs	r0, r4
 8021844:	f001 f984 	bl	8022b50 <_sbrk_r>
 8021848:	1c43      	adds	r3, r0, #1
 802184a:	d103      	bne.n	8021854 <sbrk_aligned+0x28>
 802184c:	2501      	movs	r5, #1
 802184e:	426d      	negs	r5, r5
 8021850:	0028      	movs	r0, r5
 8021852:	bd70      	pop	{r4, r5, r6, pc}
 8021854:	2303      	movs	r3, #3
 8021856:	1cc5      	adds	r5, r0, #3
 8021858:	439d      	bics	r5, r3
 802185a:	42a8      	cmp	r0, r5
 802185c:	d0f8      	beq.n	8021850 <sbrk_aligned+0x24>
 802185e:	1a29      	subs	r1, r5, r0
 8021860:	0020      	movs	r0, r4
 8021862:	f001 f975 	bl	8022b50 <_sbrk_r>
 8021866:	3001      	adds	r0, #1
 8021868:	d1f2      	bne.n	8021850 <sbrk_aligned+0x24>
 802186a:	e7ef      	b.n	802184c <sbrk_aligned+0x20>
 802186c:	200037b8 	.word	0x200037b8

08021870 <_malloc_r>:
 8021870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021872:	2203      	movs	r2, #3
 8021874:	1ccb      	adds	r3, r1, #3
 8021876:	4393      	bics	r3, r2
 8021878:	3308      	adds	r3, #8
 802187a:	0005      	movs	r5, r0
 802187c:	001f      	movs	r7, r3
 802187e:	2b0c      	cmp	r3, #12
 8021880:	d234      	bcs.n	80218ec <_malloc_r+0x7c>
 8021882:	270c      	movs	r7, #12
 8021884:	42b9      	cmp	r1, r7
 8021886:	d833      	bhi.n	80218f0 <_malloc_r+0x80>
 8021888:	0028      	movs	r0, r5
 802188a:	f000 f883 	bl	8021994 <__malloc_lock>
 802188e:	4e37      	ldr	r6, [pc, #220]	@ (802196c <_malloc_r+0xfc>)
 8021890:	6833      	ldr	r3, [r6, #0]
 8021892:	001c      	movs	r4, r3
 8021894:	2c00      	cmp	r4, #0
 8021896:	d12f      	bne.n	80218f8 <_malloc_r+0x88>
 8021898:	0039      	movs	r1, r7
 802189a:	0028      	movs	r0, r5
 802189c:	f7ff ffc6 	bl	802182c <sbrk_aligned>
 80218a0:	0004      	movs	r4, r0
 80218a2:	1c43      	adds	r3, r0, #1
 80218a4:	d15f      	bne.n	8021966 <_malloc_r+0xf6>
 80218a6:	6834      	ldr	r4, [r6, #0]
 80218a8:	9400      	str	r4, [sp, #0]
 80218aa:	9b00      	ldr	r3, [sp, #0]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d14a      	bne.n	8021946 <_malloc_r+0xd6>
 80218b0:	2c00      	cmp	r4, #0
 80218b2:	d052      	beq.n	802195a <_malloc_r+0xea>
 80218b4:	6823      	ldr	r3, [r4, #0]
 80218b6:	0028      	movs	r0, r5
 80218b8:	18e3      	adds	r3, r4, r3
 80218ba:	9900      	ldr	r1, [sp, #0]
 80218bc:	9301      	str	r3, [sp, #4]
 80218be:	f001 f947 	bl	8022b50 <_sbrk_r>
 80218c2:	9b01      	ldr	r3, [sp, #4]
 80218c4:	4283      	cmp	r3, r0
 80218c6:	d148      	bne.n	802195a <_malloc_r+0xea>
 80218c8:	6823      	ldr	r3, [r4, #0]
 80218ca:	0028      	movs	r0, r5
 80218cc:	1aff      	subs	r7, r7, r3
 80218ce:	0039      	movs	r1, r7
 80218d0:	f7ff ffac 	bl	802182c <sbrk_aligned>
 80218d4:	3001      	adds	r0, #1
 80218d6:	d040      	beq.n	802195a <_malloc_r+0xea>
 80218d8:	6823      	ldr	r3, [r4, #0]
 80218da:	19db      	adds	r3, r3, r7
 80218dc:	6023      	str	r3, [r4, #0]
 80218de:	6833      	ldr	r3, [r6, #0]
 80218e0:	685a      	ldr	r2, [r3, #4]
 80218e2:	2a00      	cmp	r2, #0
 80218e4:	d133      	bne.n	802194e <_malloc_r+0xde>
 80218e6:	9b00      	ldr	r3, [sp, #0]
 80218e8:	6033      	str	r3, [r6, #0]
 80218ea:	e019      	b.n	8021920 <_malloc_r+0xb0>
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	dac9      	bge.n	8021884 <_malloc_r+0x14>
 80218f0:	230c      	movs	r3, #12
 80218f2:	602b      	str	r3, [r5, #0]
 80218f4:	2000      	movs	r0, #0
 80218f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80218f8:	6821      	ldr	r1, [r4, #0]
 80218fa:	1bc9      	subs	r1, r1, r7
 80218fc:	d420      	bmi.n	8021940 <_malloc_r+0xd0>
 80218fe:	290b      	cmp	r1, #11
 8021900:	d90a      	bls.n	8021918 <_malloc_r+0xa8>
 8021902:	19e2      	adds	r2, r4, r7
 8021904:	6027      	str	r7, [r4, #0]
 8021906:	42a3      	cmp	r3, r4
 8021908:	d104      	bne.n	8021914 <_malloc_r+0xa4>
 802190a:	6032      	str	r2, [r6, #0]
 802190c:	6863      	ldr	r3, [r4, #4]
 802190e:	6011      	str	r1, [r2, #0]
 8021910:	6053      	str	r3, [r2, #4]
 8021912:	e005      	b.n	8021920 <_malloc_r+0xb0>
 8021914:	605a      	str	r2, [r3, #4]
 8021916:	e7f9      	b.n	802190c <_malloc_r+0x9c>
 8021918:	6862      	ldr	r2, [r4, #4]
 802191a:	42a3      	cmp	r3, r4
 802191c:	d10e      	bne.n	802193c <_malloc_r+0xcc>
 802191e:	6032      	str	r2, [r6, #0]
 8021920:	0028      	movs	r0, r5
 8021922:	f000 f83f 	bl	80219a4 <__malloc_unlock>
 8021926:	0020      	movs	r0, r4
 8021928:	2207      	movs	r2, #7
 802192a:	300b      	adds	r0, #11
 802192c:	1d23      	adds	r3, r4, #4
 802192e:	4390      	bics	r0, r2
 8021930:	1ac2      	subs	r2, r0, r3
 8021932:	4298      	cmp	r0, r3
 8021934:	d0df      	beq.n	80218f6 <_malloc_r+0x86>
 8021936:	1a1b      	subs	r3, r3, r0
 8021938:	50a3      	str	r3, [r4, r2]
 802193a:	e7dc      	b.n	80218f6 <_malloc_r+0x86>
 802193c:	605a      	str	r2, [r3, #4]
 802193e:	e7ef      	b.n	8021920 <_malloc_r+0xb0>
 8021940:	0023      	movs	r3, r4
 8021942:	6864      	ldr	r4, [r4, #4]
 8021944:	e7a6      	b.n	8021894 <_malloc_r+0x24>
 8021946:	9c00      	ldr	r4, [sp, #0]
 8021948:	6863      	ldr	r3, [r4, #4]
 802194a:	9300      	str	r3, [sp, #0]
 802194c:	e7ad      	b.n	80218aa <_malloc_r+0x3a>
 802194e:	001a      	movs	r2, r3
 8021950:	685b      	ldr	r3, [r3, #4]
 8021952:	42a3      	cmp	r3, r4
 8021954:	d1fb      	bne.n	802194e <_malloc_r+0xde>
 8021956:	2300      	movs	r3, #0
 8021958:	e7da      	b.n	8021910 <_malloc_r+0xa0>
 802195a:	230c      	movs	r3, #12
 802195c:	0028      	movs	r0, r5
 802195e:	602b      	str	r3, [r5, #0]
 8021960:	f000 f820 	bl	80219a4 <__malloc_unlock>
 8021964:	e7c6      	b.n	80218f4 <_malloc_r+0x84>
 8021966:	6007      	str	r7, [r0, #0]
 8021968:	e7da      	b.n	8021920 <_malloc_r+0xb0>
 802196a:	46c0      	nop			@ (mov r8, r8)
 802196c:	200037bc 	.word	0x200037bc

08021970 <__ascii_mbtowc>:
 8021970:	b082      	sub	sp, #8
 8021972:	2900      	cmp	r1, #0
 8021974:	d100      	bne.n	8021978 <__ascii_mbtowc+0x8>
 8021976:	a901      	add	r1, sp, #4
 8021978:	1e10      	subs	r0, r2, #0
 802197a:	d006      	beq.n	802198a <__ascii_mbtowc+0x1a>
 802197c:	2b00      	cmp	r3, #0
 802197e:	d006      	beq.n	802198e <__ascii_mbtowc+0x1e>
 8021980:	7813      	ldrb	r3, [r2, #0]
 8021982:	600b      	str	r3, [r1, #0]
 8021984:	7810      	ldrb	r0, [r2, #0]
 8021986:	1e43      	subs	r3, r0, #1
 8021988:	4198      	sbcs	r0, r3
 802198a:	b002      	add	sp, #8
 802198c:	4770      	bx	lr
 802198e:	2002      	movs	r0, #2
 8021990:	4240      	negs	r0, r0
 8021992:	e7fa      	b.n	802198a <__ascii_mbtowc+0x1a>

08021994 <__malloc_lock>:
 8021994:	b510      	push	{r4, lr}
 8021996:	4802      	ldr	r0, [pc, #8]	@ (80219a0 <__malloc_lock+0xc>)
 8021998:	f7fe fcfb 	bl	8020392 <__retarget_lock_acquire_recursive>
 802199c:	bd10      	pop	{r4, pc}
 802199e:	46c0      	nop			@ (mov r8, r8)
 80219a0:	200037b4 	.word	0x200037b4

080219a4 <__malloc_unlock>:
 80219a4:	b510      	push	{r4, lr}
 80219a6:	4802      	ldr	r0, [pc, #8]	@ (80219b0 <__malloc_unlock+0xc>)
 80219a8:	f7fe fcf4 	bl	8020394 <__retarget_lock_release_recursive>
 80219ac:	bd10      	pop	{r4, pc}
 80219ae:	46c0      	nop			@ (mov r8, r8)
 80219b0:	200037b4 	.word	0x200037b4

080219b4 <_Balloc>:
 80219b4:	b570      	push	{r4, r5, r6, lr}
 80219b6:	69c5      	ldr	r5, [r0, #28]
 80219b8:	0006      	movs	r6, r0
 80219ba:	000c      	movs	r4, r1
 80219bc:	2d00      	cmp	r5, #0
 80219be:	d10e      	bne.n	80219de <_Balloc+0x2a>
 80219c0:	2010      	movs	r0, #16
 80219c2:	f7ff ff29 	bl	8021818 <malloc>
 80219c6:	1e02      	subs	r2, r0, #0
 80219c8:	61f0      	str	r0, [r6, #28]
 80219ca:	d104      	bne.n	80219d6 <_Balloc+0x22>
 80219cc:	216b      	movs	r1, #107	@ 0x6b
 80219ce:	4b19      	ldr	r3, [pc, #100]	@ (8021a34 <_Balloc+0x80>)
 80219d0:	4819      	ldr	r0, [pc, #100]	@ (8021a38 <_Balloc+0x84>)
 80219d2:	f001 f8cf 	bl	8022b74 <__assert_func>
 80219d6:	6045      	str	r5, [r0, #4]
 80219d8:	6085      	str	r5, [r0, #8]
 80219da:	6005      	str	r5, [r0, #0]
 80219dc:	60c5      	str	r5, [r0, #12]
 80219de:	69f5      	ldr	r5, [r6, #28]
 80219e0:	68eb      	ldr	r3, [r5, #12]
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d013      	beq.n	8021a0e <_Balloc+0x5a>
 80219e6:	69f3      	ldr	r3, [r6, #28]
 80219e8:	00a2      	lsls	r2, r4, #2
 80219ea:	68db      	ldr	r3, [r3, #12]
 80219ec:	189b      	adds	r3, r3, r2
 80219ee:	6818      	ldr	r0, [r3, #0]
 80219f0:	2800      	cmp	r0, #0
 80219f2:	d118      	bne.n	8021a26 <_Balloc+0x72>
 80219f4:	2101      	movs	r1, #1
 80219f6:	000d      	movs	r5, r1
 80219f8:	40a5      	lsls	r5, r4
 80219fa:	1d6a      	adds	r2, r5, #5
 80219fc:	0030      	movs	r0, r6
 80219fe:	0092      	lsls	r2, r2, #2
 8021a00:	f001 f8d6 	bl	8022bb0 <_calloc_r>
 8021a04:	2800      	cmp	r0, #0
 8021a06:	d00c      	beq.n	8021a22 <_Balloc+0x6e>
 8021a08:	6044      	str	r4, [r0, #4]
 8021a0a:	6085      	str	r5, [r0, #8]
 8021a0c:	e00d      	b.n	8021a2a <_Balloc+0x76>
 8021a0e:	2221      	movs	r2, #33	@ 0x21
 8021a10:	2104      	movs	r1, #4
 8021a12:	0030      	movs	r0, r6
 8021a14:	f001 f8cc 	bl	8022bb0 <_calloc_r>
 8021a18:	69f3      	ldr	r3, [r6, #28]
 8021a1a:	60e8      	str	r0, [r5, #12]
 8021a1c:	68db      	ldr	r3, [r3, #12]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d1e1      	bne.n	80219e6 <_Balloc+0x32>
 8021a22:	2000      	movs	r0, #0
 8021a24:	bd70      	pop	{r4, r5, r6, pc}
 8021a26:	6802      	ldr	r2, [r0, #0]
 8021a28:	601a      	str	r2, [r3, #0]
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	6103      	str	r3, [r0, #16]
 8021a2e:	60c3      	str	r3, [r0, #12]
 8021a30:	e7f8      	b.n	8021a24 <_Balloc+0x70>
 8021a32:	46c0      	nop			@ (mov r8, r8)
 8021a34:	08025d5a 	.word	0x08025d5a
 8021a38:	08025e3a 	.word	0x08025e3a

08021a3c <_Bfree>:
 8021a3c:	b570      	push	{r4, r5, r6, lr}
 8021a3e:	69c6      	ldr	r6, [r0, #28]
 8021a40:	0005      	movs	r5, r0
 8021a42:	000c      	movs	r4, r1
 8021a44:	2e00      	cmp	r6, #0
 8021a46:	d10e      	bne.n	8021a66 <_Bfree+0x2a>
 8021a48:	2010      	movs	r0, #16
 8021a4a:	f7ff fee5 	bl	8021818 <malloc>
 8021a4e:	1e02      	subs	r2, r0, #0
 8021a50:	61e8      	str	r0, [r5, #28]
 8021a52:	d104      	bne.n	8021a5e <_Bfree+0x22>
 8021a54:	218f      	movs	r1, #143	@ 0x8f
 8021a56:	4b09      	ldr	r3, [pc, #36]	@ (8021a7c <_Bfree+0x40>)
 8021a58:	4809      	ldr	r0, [pc, #36]	@ (8021a80 <_Bfree+0x44>)
 8021a5a:	f001 f88b 	bl	8022b74 <__assert_func>
 8021a5e:	6046      	str	r6, [r0, #4]
 8021a60:	6086      	str	r6, [r0, #8]
 8021a62:	6006      	str	r6, [r0, #0]
 8021a64:	60c6      	str	r6, [r0, #12]
 8021a66:	2c00      	cmp	r4, #0
 8021a68:	d007      	beq.n	8021a7a <_Bfree+0x3e>
 8021a6a:	69eb      	ldr	r3, [r5, #28]
 8021a6c:	6862      	ldr	r2, [r4, #4]
 8021a6e:	68db      	ldr	r3, [r3, #12]
 8021a70:	0092      	lsls	r2, r2, #2
 8021a72:	189b      	adds	r3, r3, r2
 8021a74:	681a      	ldr	r2, [r3, #0]
 8021a76:	6022      	str	r2, [r4, #0]
 8021a78:	601c      	str	r4, [r3, #0]
 8021a7a:	bd70      	pop	{r4, r5, r6, pc}
 8021a7c:	08025d5a 	.word	0x08025d5a
 8021a80:	08025e3a 	.word	0x08025e3a

08021a84 <__multadd>:
 8021a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a86:	000f      	movs	r7, r1
 8021a88:	9001      	str	r0, [sp, #4]
 8021a8a:	000c      	movs	r4, r1
 8021a8c:	001e      	movs	r6, r3
 8021a8e:	2000      	movs	r0, #0
 8021a90:	690d      	ldr	r5, [r1, #16]
 8021a92:	3714      	adds	r7, #20
 8021a94:	683b      	ldr	r3, [r7, #0]
 8021a96:	3001      	adds	r0, #1
 8021a98:	b299      	uxth	r1, r3
 8021a9a:	4351      	muls	r1, r2
 8021a9c:	0c1b      	lsrs	r3, r3, #16
 8021a9e:	4353      	muls	r3, r2
 8021aa0:	1989      	adds	r1, r1, r6
 8021aa2:	0c0e      	lsrs	r6, r1, #16
 8021aa4:	199b      	adds	r3, r3, r6
 8021aa6:	0c1e      	lsrs	r6, r3, #16
 8021aa8:	b289      	uxth	r1, r1
 8021aaa:	041b      	lsls	r3, r3, #16
 8021aac:	185b      	adds	r3, r3, r1
 8021aae:	c708      	stmia	r7!, {r3}
 8021ab0:	4285      	cmp	r5, r0
 8021ab2:	dcef      	bgt.n	8021a94 <__multadd+0x10>
 8021ab4:	2e00      	cmp	r6, #0
 8021ab6:	d022      	beq.n	8021afe <__multadd+0x7a>
 8021ab8:	68a3      	ldr	r3, [r4, #8]
 8021aba:	42ab      	cmp	r3, r5
 8021abc:	dc19      	bgt.n	8021af2 <__multadd+0x6e>
 8021abe:	6861      	ldr	r1, [r4, #4]
 8021ac0:	9801      	ldr	r0, [sp, #4]
 8021ac2:	3101      	adds	r1, #1
 8021ac4:	f7ff ff76 	bl	80219b4 <_Balloc>
 8021ac8:	1e07      	subs	r7, r0, #0
 8021aca:	d105      	bne.n	8021ad8 <__multadd+0x54>
 8021acc:	003a      	movs	r2, r7
 8021ace:	21ba      	movs	r1, #186	@ 0xba
 8021ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8021b04 <__multadd+0x80>)
 8021ad2:	480d      	ldr	r0, [pc, #52]	@ (8021b08 <__multadd+0x84>)
 8021ad4:	f001 f84e 	bl	8022b74 <__assert_func>
 8021ad8:	0021      	movs	r1, r4
 8021ada:	6922      	ldr	r2, [r4, #16]
 8021adc:	310c      	adds	r1, #12
 8021ade:	3202      	adds	r2, #2
 8021ae0:	0092      	lsls	r2, r2, #2
 8021ae2:	300c      	adds	r0, #12
 8021ae4:	f7fe fc62 	bl	80203ac <memcpy>
 8021ae8:	0021      	movs	r1, r4
 8021aea:	9801      	ldr	r0, [sp, #4]
 8021aec:	f7ff ffa6 	bl	8021a3c <_Bfree>
 8021af0:	003c      	movs	r4, r7
 8021af2:	1d2b      	adds	r3, r5, #4
 8021af4:	009b      	lsls	r3, r3, #2
 8021af6:	18e3      	adds	r3, r4, r3
 8021af8:	3501      	adds	r5, #1
 8021afa:	605e      	str	r6, [r3, #4]
 8021afc:	6125      	str	r5, [r4, #16]
 8021afe:	0020      	movs	r0, r4
 8021b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b02:	46c0      	nop			@ (mov r8, r8)
 8021b04:	08025dc9 	.word	0x08025dc9
 8021b08:	08025e3a 	.word	0x08025e3a

08021b0c <__s2b>:
 8021b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021b0e:	0007      	movs	r7, r0
 8021b10:	0018      	movs	r0, r3
 8021b12:	000c      	movs	r4, r1
 8021b14:	3008      	adds	r0, #8
 8021b16:	2109      	movs	r1, #9
 8021b18:	9301      	str	r3, [sp, #4]
 8021b1a:	0015      	movs	r5, r2
 8021b1c:	f7de fbcc 	bl	80002b8 <__divsi3>
 8021b20:	2301      	movs	r3, #1
 8021b22:	2100      	movs	r1, #0
 8021b24:	4283      	cmp	r3, r0
 8021b26:	db0a      	blt.n	8021b3e <__s2b+0x32>
 8021b28:	0038      	movs	r0, r7
 8021b2a:	f7ff ff43 	bl	80219b4 <_Balloc>
 8021b2e:	1e01      	subs	r1, r0, #0
 8021b30:	d108      	bne.n	8021b44 <__s2b+0x38>
 8021b32:	000a      	movs	r2, r1
 8021b34:	4b19      	ldr	r3, [pc, #100]	@ (8021b9c <__s2b+0x90>)
 8021b36:	481a      	ldr	r0, [pc, #104]	@ (8021ba0 <__s2b+0x94>)
 8021b38:	31d3      	adds	r1, #211	@ 0xd3
 8021b3a:	f001 f81b 	bl	8022b74 <__assert_func>
 8021b3e:	005b      	lsls	r3, r3, #1
 8021b40:	3101      	adds	r1, #1
 8021b42:	e7ef      	b.n	8021b24 <__s2b+0x18>
 8021b44:	9b08      	ldr	r3, [sp, #32]
 8021b46:	6143      	str	r3, [r0, #20]
 8021b48:	2301      	movs	r3, #1
 8021b4a:	6103      	str	r3, [r0, #16]
 8021b4c:	2d09      	cmp	r5, #9
 8021b4e:	dd18      	ble.n	8021b82 <__s2b+0x76>
 8021b50:	0023      	movs	r3, r4
 8021b52:	3309      	adds	r3, #9
 8021b54:	001e      	movs	r6, r3
 8021b56:	9300      	str	r3, [sp, #0]
 8021b58:	1964      	adds	r4, r4, r5
 8021b5a:	7833      	ldrb	r3, [r6, #0]
 8021b5c:	220a      	movs	r2, #10
 8021b5e:	0038      	movs	r0, r7
 8021b60:	3b30      	subs	r3, #48	@ 0x30
 8021b62:	f7ff ff8f 	bl	8021a84 <__multadd>
 8021b66:	3601      	adds	r6, #1
 8021b68:	0001      	movs	r1, r0
 8021b6a:	42a6      	cmp	r6, r4
 8021b6c:	d1f5      	bne.n	8021b5a <__s2b+0x4e>
 8021b6e:	002c      	movs	r4, r5
 8021b70:	9b00      	ldr	r3, [sp, #0]
 8021b72:	3c08      	subs	r4, #8
 8021b74:	191c      	adds	r4, r3, r4
 8021b76:	002e      	movs	r6, r5
 8021b78:	9b01      	ldr	r3, [sp, #4]
 8021b7a:	429e      	cmp	r6, r3
 8021b7c:	db04      	blt.n	8021b88 <__s2b+0x7c>
 8021b7e:	0008      	movs	r0, r1
 8021b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021b82:	2509      	movs	r5, #9
 8021b84:	340a      	adds	r4, #10
 8021b86:	e7f6      	b.n	8021b76 <__s2b+0x6a>
 8021b88:	1b63      	subs	r3, r4, r5
 8021b8a:	5d9b      	ldrb	r3, [r3, r6]
 8021b8c:	220a      	movs	r2, #10
 8021b8e:	0038      	movs	r0, r7
 8021b90:	3b30      	subs	r3, #48	@ 0x30
 8021b92:	f7ff ff77 	bl	8021a84 <__multadd>
 8021b96:	3601      	adds	r6, #1
 8021b98:	0001      	movs	r1, r0
 8021b9a:	e7ed      	b.n	8021b78 <__s2b+0x6c>
 8021b9c:	08025dc9 	.word	0x08025dc9
 8021ba0:	08025e3a 	.word	0x08025e3a

08021ba4 <__hi0bits>:
 8021ba4:	2280      	movs	r2, #128	@ 0x80
 8021ba6:	0003      	movs	r3, r0
 8021ba8:	0252      	lsls	r2, r2, #9
 8021baa:	2000      	movs	r0, #0
 8021bac:	4293      	cmp	r3, r2
 8021bae:	d201      	bcs.n	8021bb4 <__hi0bits+0x10>
 8021bb0:	041b      	lsls	r3, r3, #16
 8021bb2:	3010      	adds	r0, #16
 8021bb4:	2280      	movs	r2, #128	@ 0x80
 8021bb6:	0452      	lsls	r2, r2, #17
 8021bb8:	4293      	cmp	r3, r2
 8021bba:	d201      	bcs.n	8021bc0 <__hi0bits+0x1c>
 8021bbc:	3008      	adds	r0, #8
 8021bbe:	021b      	lsls	r3, r3, #8
 8021bc0:	2280      	movs	r2, #128	@ 0x80
 8021bc2:	0552      	lsls	r2, r2, #21
 8021bc4:	4293      	cmp	r3, r2
 8021bc6:	d201      	bcs.n	8021bcc <__hi0bits+0x28>
 8021bc8:	3004      	adds	r0, #4
 8021bca:	011b      	lsls	r3, r3, #4
 8021bcc:	2280      	movs	r2, #128	@ 0x80
 8021bce:	05d2      	lsls	r2, r2, #23
 8021bd0:	4293      	cmp	r3, r2
 8021bd2:	d201      	bcs.n	8021bd8 <__hi0bits+0x34>
 8021bd4:	3002      	adds	r0, #2
 8021bd6:	009b      	lsls	r3, r3, #2
 8021bd8:	2b00      	cmp	r3, #0
 8021bda:	db03      	blt.n	8021be4 <__hi0bits+0x40>
 8021bdc:	3001      	adds	r0, #1
 8021bde:	4213      	tst	r3, r2
 8021be0:	d100      	bne.n	8021be4 <__hi0bits+0x40>
 8021be2:	2020      	movs	r0, #32
 8021be4:	4770      	bx	lr

08021be6 <__lo0bits>:
 8021be6:	6803      	ldr	r3, [r0, #0]
 8021be8:	0001      	movs	r1, r0
 8021bea:	2207      	movs	r2, #7
 8021bec:	0018      	movs	r0, r3
 8021bee:	4010      	ands	r0, r2
 8021bf0:	4213      	tst	r3, r2
 8021bf2:	d00d      	beq.n	8021c10 <__lo0bits+0x2a>
 8021bf4:	3a06      	subs	r2, #6
 8021bf6:	2000      	movs	r0, #0
 8021bf8:	4213      	tst	r3, r2
 8021bfa:	d105      	bne.n	8021c08 <__lo0bits+0x22>
 8021bfc:	3002      	adds	r0, #2
 8021bfe:	4203      	tst	r3, r0
 8021c00:	d003      	beq.n	8021c0a <__lo0bits+0x24>
 8021c02:	40d3      	lsrs	r3, r2
 8021c04:	0010      	movs	r0, r2
 8021c06:	600b      	str	r3, [r1, #0]
 8021c08:	4770      	bx	lr
 8021c0a:	089b      	lsrs	r3, r3, #2
 8021c0c:	600b      	str	r3, [r1, #0]
 8021c0e:	e7fb      	b.n	8021c08 <__lo0bits+0x22>
 8021c10:	b29a      	uxth	r2, r3
 8021c12:	2a00      	cmp	r2, #0
 8021c14:	d101      	bne.n	8021c1a <__lo0bits+0x34>
 8021c16:	2010      	movs	r0, #16
 8021c18:	0c1b      	lsrs	r3, r3, #16
 8021c1a:	b2da      	uxtb	r2, r3
 8021c1c:	2a00      	cmp	r2, #0
 8021c1e:	d101      	bne.n	8021c24 <__lo0bits+0x3e>
 8021c20:	3008      	adds	r0, #8
 8021c22:	0a1b      	lsrs	r3, r3, #8
 8021c24:	071a      	lsls	r2, r3, #28
 8021c26:	d101      	bne.n	8021c2c <__lo0bits+0x46>
 8021c28:	3004      	adds	r0, #4
 8021c2a:	091b      	lsrs	r3, r3, #4
 8021c2c:	079a      	lsls	r2, r3, #30
 8021c2e:	d101      	bne.n	8021c34 <__lo0bits+0x4e>
 8021c30:	3002      	adds	r0, #2
 8021c32:	089b      	lsrs	r3, r3, #2
 8021c34:	07da      	lsls	r2, r3, #31
 8021c36:	d4e9      	bmi.n	8021c0c <__lo0bits+0x26>
 8021c38:	3001      	adds	r0, #1
 8021c3a:	085b      	lsrs	r3, r3, #1
 8021c3c:	d1e6      	bne.n	8021c0c <__lo0bits+0x26>
 8021c3e:	2020      	movs	r0, #32
 8021c40:	e7e2      	b.n	8021c08 <__lo0bits+0x22>
	...

08021c44 <__i2b>:
 8021c44:	b510      	push	{r4, lr}
 8021c46:	000c      	movs	r4, r1
 8021c48:	2101      	movs	r1, #1
 8021c4a:	f7ff feb3 	bl	80219b4 <_Balloc>
 8021c4e:	2800      	cmp	r0, #0
 8021c50:	d107      	bne.n	8021c62 <__i2b+0x1e>
 8021c52:	2146      	movs	r1, #70	@ 0x46
 8021c54:	4c05      	ldr	r4, [pc, #20]	@ (8021c6c <__i2b+0x28>)
 8021c56:	0002      	movs	r2, r0
 8021c58:	4b05      	ldr	r3, [pc, #20]	@ (8021c70 <__i2b+0x2c>)
 8021c5a:	0020      	movs	r0, r4
 8021c5c:	31ff      	adds	r1, #255	@ 0xff
 8021c5e:	f000 ff89 	bl	8022b74 <__assert_func>
 8021c62:	2301      	movs	r3, #1
 8021c64:	6144      	str	r4, [r0, #20]
 8021c66:	6103      	str	r3, [r0, #16]
 8021c68:	bd10      	pop	{r4, pc}
 8021c6a:	46c0      	nop			@ (mov r8, r8)
 8021c6c:	08025e3a 	.word	0x08025e3a
 8021c70:	08025dc9 	.word	0x08025dc9

08021c74 <__multiply>:
 8021c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c76:	0014      	movs	r4, r2
 8021c78:	690a      	ldr	r2, [r1, #16]
 8021c7a:	6923      	ldr	r3, [r4, #16]
 8021c7c:	000d      	movs	r5, r1
 8021c7e:	b08b      	sub	sp, #44	@ 0x2c
 8021c80:	429a      	cmp	r2, r3
 8021c82:	db02      	blt.n	8021c8a <__multiply+0x16>
 8021c84:	0023      	movs	r3, r4
 8021c86:	000c      	movs	r4, r1
 8021c88:	001d      	movs	r5, r3
 8021c8a:	6927      	ldr	r7, [r4, #16]
 8021c8c:	692e      	ldr	r6, [r5, #16]
 8021c8e:	6861      	ldr	r1, [r4, #4]
 8021c90:	19bb      	adds	r3, r7, r6
 8021c92:	9303      	str	r3, [sp, #12]
 8021c94:	68a3      	ldr	r3, [r4, #8]
 8021c96:	19ba      	adds	r2, r7, r6
 8021c98:	4293      	cmp	r3, r2
 8021c9a:	da00      	bge.n	8021c9e <__multiply+0x2a>
 8021c9c:	3101      	adds	r1, #1
 8021c9e:	f7ff fe89 	bl	80219b4 <_Balloc>
 8021ca2:	9002      	str	r0, [sp, #8]
 8021ca4:	2800      	cmp	r0, #0
 8021ca6:	d106      	bne.n	8021cb6 <__multiply+0x42>
 8021ca8:	21b1      	movs	r1, #177	@ 0xb1
 8021caa:	4b49      	ldr	r3, [pc, #292]	@ (8021dd0 <__multiply+0x15c>)
 8021cac:	4849      	ldr	r0, [pc, #292]	@ (8021dd4 <__multiply+0x160>)
 8021cae:	9a02      	ldr	r2, [sp, #8]
 8021cb0:	0049      	lsls	r1, r1, #1
 8021cb2:	f000 ff5f 	bl	8022b74 <__assert_func>
 8021cb6:	9b02      	ldr	r3, [sp, #8]
 8021cb8:	2200      	movs	r2, #0
 8021cba:	3314      	adds	r3, #20
 8021cbc:	469c      	mov	ip, r3
 8021cbe:	19bb      	adds	r3, r7, r6
 8021cc0:	009b      	lsls	r3, r3, #2
 8021cc2:	4463      	add	r3, ip
 8021cc4:	9304      	str	r3, [sp, #16]
 8021cc6:	4663      	mov	r3, ip
 8021cc8:	9904      	ldr	r1, [sp, #16]
 8021cca:	428b      	cmp	r3, r1
 8021ccc:	d32a      	bcc.n	8021d24 <__multiply+0xb0>
 8021cce:	0023      	movs	r3, r4
 8021cd0:	00bf      	lsls	r7, r7, #2
 8021cd2:	3314      	adds	r3, #20
 8021cd4:	3514      	adds	r5, #20
 8021cd6:	9308      	str	r3, [sp, #32]
 8021cd8:	00b6      	lsls	r6, r6, #2
 8021cda:	19db      	adds	r3, r3, r7
 8021cdc:	9305      	str	r3, [sp, #20]
 8021cde:	19ab      	adds	r3, r5, r6
 8021ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ce2:	2304      	movs	r3, #4
 8021ce4:	9306      	str	r3, [sp, #24]
 8021ce6:	0023      	movs	r3, r4
 8021ce8:	9a05      	ldr	r2, [sp, #20]
 8021cea:	3315      	adds	r3, #21
 8021cec:	9501      	str	r5, [sp, #4]
 8021cee:	429a      	cmp	r2, r3
 8021cf0:	d305      	bcc.n	8021cfe <__multiply+0x8a>
 8021cf2:	1b13      	subs	r3, r2, r4
 8021cf4:	3b15      	subs	r3, #21
 8021cf6:	089b      	lsrs	r3, r3, #2
 8021cf8:	3301      	adds	r3, #1
 8021cfa:	009b      	lsls	r3, r3, #2
 8021cfc:	9306      	str	r3, [sp, #24]
 8021cfe:	9b01      	ldr	r3, [sp, #4]
 8021d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d02:	4293      	cmp	r3, r2
 8021d04:	d310      	bcc.n	8021d28 <__multiply+0xb4>
 8021d06:	9b03      	ldr	r3, [sp, #12]
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	dd05      	ble.n	8021d18 <__multiply+0xa4>
 8021d0c:	9b04      	ldr	r3, [sp, #16]
 8021d0e:	3b04      	subs	r3, #4
 8021d10:	9304      	str	r3, [sp, #16]
 8021d12:	681b      	ldr	r3, [r3, #0]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d056      	beq.n	8021dc6 <__multiply+0x152>
 8021d18:	9b02      	ldr	r3, [sp, #8]
 8021d1a:	9a03      	ldr	r2, [sp, #12]
 8021d1c:	0018      	movs	r0, r3
 8021d1e:	611a      	str	r2, [r3, #16]
 8021d20:	b00b      	add	sp, #44	@ 0x2c
 8021d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d24:	c304      	stmia	r3!, {r2}
 8021d26:	e7cf      	b.n	8021cc8 <__multiply+0x54>
 8021d28:	9b01      	ldr	r3, [sp, #4]
 8021d2a:	6818      	ldr	r0, [r3, #0]
 8021d2c:	b280      	uxth	r0, r0
 8021d2e:	2800      	cmp	r0, #0
 8021d30:	d01e      	beq.n	8021d70 <__multiply+0xfc>
 8021d32:	4667      	mov	r7, ip
 8021d34:	2500      	movs	r5, #0
 8021d36:	9e08      	ldr	r6, [sp, #32]
 8021d38:	ce02      	ldmia	r6!, {r1}
 8021d3a:	683b      	ldr	r3, [r7, #0]
 8021d3c:	9307      	str	r3, [sp, #28]
 8021d3e:	b28b      	uxth	r3, r1
 8021d40:	4343      	muls	r3, r0
 8021d42:	001a      	movs	r2, r3
 8021d44:	466b      	mov	r3, sp
 8021d46:	0c09      	lsrs	r1, r1, #16
 8021d48:	8b9b      	ldrh	r3, [r3, #28]
 8021d4a:	4341      	muls	r1, r0
 8021d4c:	18d3      	adds	r3, r2, r3
 8021d4e:	9a07      	ldr	r2, [sp, #28]
 8021d50:	195b      	adds	r3, r3, r5
 8021d52:	0c12      	lsrs	r2, r2, #16
 8021d54:	1889      	adds	r1, r1, r2
 8021d56:	0c1a      	lsrs	r2, r3, #16
 8021d58:	188a      	adds	r2, r1, r2
 8021d5a:	b29b      	uxth	r3, r3
 8021d5c:	0c15      	lsrs	r5, r2, #16
 8021d5e:	0412      	lsls	r2, r2, #16
 8021d60:	431a      	orrs	r2, r3
 8021d62:	9b05      	ldr	r3, [sp, #20]
 8021d64:	c704      	stmia	r7!, {r2}
 8021d66:	42b3      	cmp	r3, r6
 8021d68:	d8e6      	bhi.n	8021d38 <__multiply+0xc4>
 8021d6a:	4663      	mov	r3, ip
 8021d6c:	9a06      	ldr	r2, [sp, #24]
 8021d6e:	509d      	str	r5, [r3, r2]
 8021d70:	9b01      	ldr	r3, [sp, #4]
 8021d72:	6818      	ldr	r0, [r3, #0]
 8021d74:	0c00      	lsrs	r0, r0, #16
 8021d76:	d020      	beq.n	8021dba <__multiply+0x146>
 8021d78:	4663      	mov	r3, ip
 8021d7a:	0025      	movs	r5, r4
 8021d7c:	4661      	mov	r1, ip
 8021d7e:	2700      	movs	r7, #0
 8021d80:	681b      	ldr	r3, [r3, #0]
 8021d82:	3514      	adds	r5, #20
 8021d84:	682a      	ldr	r2, [r5, #0]
 8021d86:	680e      	ldr	r6, [r1, #0]
 8021d88:	b292      	uxth	r2, r2
 8021d8a:	4342      	muls	r2, r0
 8021d8c:	0c36      	lsrs	r6, r6, #16
 8021d8e:	1992      	adds	r2, r2, r6
 8021d90:	19d2      	adds	r2, r2, r7
 8021d92:	0416      	lsls	r6, r2, #16
 8021d94:	b29b      	uxth	r3, r3
 8021d96:	431e      	orrs	r6, r3
 8021d98:	600e      	str	r6, [r1, #0]
 8021d9a:	cd40      	ldmia	r5!, {r6}
 8021d9c:	684b      	ldr	r3, [r1, #4]
 8021d9e:	0c36      	lsrs	r6, r6, #16
 8021da0:	4346      	muls	r6, r0
 8021da2:	b29b      	uxth	r3, r3
 8021da4:	0c12      	lsrs	r2, r2, #16
 8021da6:	18f3      	adds	r3, r6, r3
 8021da8:	189b      	adds	r3, r3, r2
 8021daa:	9a05      	ldr	r2, [sp, #20]
 8021dac:	0c1f      	lsrs	r7, r3, #16
 8021dae:	3104      	adds	r1, #4
 8021db0:	42aa      	cmp	r2, r5
 8021db2:	d8e7      	bhi.n	8021d84 <__multiply+0x110>
 8021db4:	4662      	mov	r2, ip
 8021db6:	9906      	ldr	r1, [sp, #24]
 8021db8:	5053      	str	r3, [r2, r1]
 8021dba:	9b01      	ldr	r3, [sp, #4]
 8021dbc:	3304      	adds	r3, #4
 8021dbe:	9301      	str	r3, [sp, #4]
 8021dc0:	2304      	movs	r3, #4
 8021dc2:	449c      	add	ip, r3
 8021dc4:	e79b      	b.n	8021cfe <__multiply+0x8a>
 8021dc6:	9b03      	ldr	r3, [sp, #12]
 8021dc8:	3b01      	subs	r3, #1
 8021dca:	9303      	str	r3, [sp, #12]
 8021dcc:	e79b      	b.n	8021d06 <__multiply+0x92>
 8021dce:	46c0      	nop			@ (mov r8, r8)
 8021dd0:	08025dc9 	.word	0x08025dc9
 8021dd4:	08025e3a 	.word	0x08025e3a

08021dd8 <__pow5mult>:
 8021dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021dda:	2303      	movs	r3, #3
 8021ddc:	0015      	movs	r5, r2
 8021dde:	0007      	movs	r7, r0
 8021de0:	000e      	movs	r6, r1
 8021de2:	401a      	ands	r2, r3
 8021de4:	421d      	tst	r5, r3
 8021de6:	d008      	beq.n	8021dfa <__pow5mult+0x22>
 8021de8:	4925      	ldr	r1, [pc, #148]	@ (8021e80 <__pow5mult+0xa8>)
 8021dea:	3a01      	subs	r2, #1
 8021dec:	0092      	lsls	r2, r2, #2
 8021dee:	5852      	ldr	r2, [r2, r1]
 8021df0:	2300      	movs	r3, #0
 8021df2:	0031      	movs	r1, r6
 8021df4:	f7ff fe46 	bl	8021a84 <__multadd>
 8021df8:	0006      	movs	r6, r0
 8021dfa:	10ad      	asrs	r5, r5, #2
 8021dfc:	d03d      	beq.n	8021e7a <__pow5mult+0xa2>
 8021dfe:	69fc      	ldr	r4, [r7, #28]
 8021e00:	2c00      	cmp	r4, #0
 8021e02:	d10f      	bne.n	8021e24 <__pow5mult+0x4c>
 8021e04:	2010      	movs	r0, #16
 8021e06:	f7ff fd07 	bl	8021818 <malloc>
 8021e0a:	1e02      	subs	r2, r0, #0
 8021e0c:	61f8      	str	r0, [r7, #28]
 8021e0e:	d105      	bne.n	8021e1c <__pow5mult+0x44>
 8021e10:	21b4      	movs	r1, #180	@ 0xb4
 8021e12:	4b1c      	ldr	r3, [pc, #112]	@ (8021e84 <__pow5mult+0xac>)
 8021e14:	481c      	ldr	r0, [pc, #112]	@ (8021e88 <__pow5mult+0xb0>)
 8021e16:	31ff      	adds	r1, #255	@ 0xff
 8021e18:	f000 feac 	bl	8022b74 <__assert_func>
 8021e1c:	6044      	str	r4, [r0, #4]
 8021e1e:	6084      	str	r4, [r0, #8]
 8021e20:	6004      	str	r4, [r0, #0]
 8021e22:	60c4      	str	r4, [r0, #12]
 8021e24:	69fb      	ldr	r3, [r7, #28]
 8021e26:	689c      	ldr	r4, [r3, #8]
 8021e28:	9301      	str	r3, [sp, #4]
 8021e2a:	2c00      	cmp	r4, #0
 8021e2c:	d108      	bne.n	8021e40 <__pow5mult+0x68>
 8021e2e:	0038      	movs	r0, r7
 8021e30:	4916      	ldr	r1, [pc, #88]	@ (8021e8c <__pow5mult+0xb4>)
 8021e32:	f7ff ff07 	bl	8021c44 <__i2b>
 8021e36:	9b01      	ldr	r3, [sp, #4]
 8021e38:	0004      	movs	r4, r0
 8021e3a:	6098      	str	r0, [r3, #8]
 8021e3c:	2300      	movs	r3, #0
 8021e3e:	6003      	str	r3, [r0, #0]
 8021e40:	2301      	movs	r3, #1
 8021e42:	421d      	tst	r5, r3
 8021e44:	d00a      	beq.n	8021e5c <__pow5mult+0x84>
 8021e46:	0031      	movs	r1, r6
 8021e48:	0022      	movs	r2, r4
 8021e4a:	0038      	movs	r0, r7
 8021e4c:	f7ff ff12 	bl	8021c74 <__multiply>
 8021e50:	0031      	movs	r1, r6
 8021e52:	9001      	str	r0, [sp, #4]
 8021e54:	0038      	movs	r0, r7
 8021e56:	f7ff fdf1 	bl	8021a3c <_Bfree>
 8021e5a:	9e01      	ldr	r6, [sp, #4]
 8021e5c:	106d      	asrs	r5, r5, #1
 8021e5e:	d00c      	beq.n	8021e7a <__pow5mult+0xa2>
 8021e60:	6820      	ldr	r0, [r4, #0]
 8021e62:	2800      	cmp	r0, #0
 8021e64:	d107      	bne.n	8021e76 <__pow5mult+0x9e>
 8021e66:	0022      	movs	r2, r4
 8021e68:	0021      	movs	r1, r4
 8021e6a:	0038      	movs	r0, r7
 8021e6c:	f7ff ff02 	bl	8021c74 <__multiply>
 8021e70:	2300      	movs	r3, #0
 8021e72:	6020      	str	r0, [r4, #0]
 8021e74:	6003      	str	r3, [r0, #0]
 8021e76:	0004      	movs	r4, r0
 8021e78:	e7e2      	b.n	8021e40 <__pow5mult+0x68>
 8021e7a:	0030      	movs	r0, r6
 8021e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021e7e:	46c0      	nop			@ (mov r8, r8)
 8021e80:	08025e94 	.word	0x08025e94
 8021e84:	08025d5a 	.word	0x08025d5a
 8021e88:	08025e3a 	.word	0x08025e3a
 8021e8c:	00000271 	.word	0x00000271

08021e90 <__lshift>:
 8021e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e92:	000c      	movs	r4, r1
 8021e94:	0016      	movs	r6, r2
 8021e96:	6923      	ldr	r3, [r4, #16]
 8021e98:	1157      	asrs	r7, r2, #5
 8021e9a:	b085      	sub	sp, #20
 8021e9c:	18fb      	adds	r3, r7, r3
 8021e9e:	9301      	str	r3, [sp, #4]
 8021ea0:	3301      	adds	r3, #1
 8021ea2:	9300      	str	r3, [sp, #0]
 8021ea4:	6849      	ldr	r1, [r1, #4]
 8021ea6:	68a3      	ldr	r3, [r4, #8]
 8021ea8:	9002      	str	r0, [sp, #8]
 8021eaa:	9a00      	ldr	r2, [sp, #0]
 8021eac:	4293      	cmp	r3, r2
 8021eae:	db10      	blt.n	8021ed2 <__lshift+0x42>
 8021eb0:	9802      	ldr	r0, [sp, #8]
 8021eb2:	f7ff fd7f 	bl	80219b4 <_Balloc>
 8021eb6:	2300      	movs	r3, #0
 8021eb8:	0001      	movs	r1, r0
 8021eba:	0005      	movs	r5, r0
 8021ebc:	001a      	movs	r2, r3
 8021ebe:	3114      	adds	r1, #20
 8021ec0:	4298      	cmp	r0, r3
 8021ec2:	d10c      	bne.n	8021ede <__lshift+0x4e>
 8021ec4:	21ef      	movs	r1, #239	@ 0xef
 8021ec6:	002a      	movs	r2, r5
 8021ec8:	4b25      	ldr	r3, [pc, #148]	@ (8021f60 <__lshift+0xd0>)
 8021eca:	4826      	ldr	r0, [pc, #152]	@ (8021f64 <__lshift+0xd4>)
 8021ecc:	0049      	lsls	r1, r1, #1
 8021ece:	f000 fe51 	bl	8022b74 <__assert_func>
 8021ed2:	3101      	adds	r1, #1
 8021ed4:	005b      	lsls	r3, r3, #1
 8021ed6:	e7e8      	b.n	8021eaa <__lshift+0x1a>
 8021ed8:	0098      	lsls	r0, r3, #2
 8021eda:	500a      	str	r2, [r1, r0]
 8021edc:	3301      	adds	r3, #1
 8021ede:	42bb      	cmp	r3, r7
 8021ee0:	dbfa      	blt.n	8021ed8 <__lshift+0x48>
 8021ee2:	43fb      	mvns	r3, r7
 8021ee4:	17db      	asrs	r3, r3, #31
 8021ee6:	401f      	ands	r7, r3
 8021ee8:	00bf      	lsls	r7, r7, #2
 8021eea:	0023      	movs	r3, r4
 8021eec:	201f      	movs	r0, #31
 8021eee:	19c9      	adds	r1, r1, r7
 8021ef0:	0037      	movs	r7, r6
 8021ef2:	6922      	ldr	r2, [r4, #16]
 8021ef4:	3314      	adds	r3, #20
 8021ef6:	0092      	lsls	r2, r2, #2
 8021ef8:	189a      	adds	r2, r3, r2
 8021efa:	4007      	ands	r7, r0
 8021efc:	4206      	tst	r6, r0
 8021efe:	d029      	beq.n	8021f54 <__lshift+0xc4>
 8021f00:	3001      	adds	r0, #1
 8021f02:	1bc0      	subs	r0, r0, r7
 8021f04:	9003      	str	r0, [sp, #12]
 8021f06:	468c      	mov	ip, r1
 8021f08:	2000      	movs	r0, #0
 8021f0a:	681e      	ldr	r6, [r3, #0]
 8021f0c:	40be      	lsls	r6, r7
 8021f0e:	4306      	orrs	r6, r0
 8021f10:	4660      	mov	r0, ip
 8021f12:	c040      	stmia	r0!, {r6}
 8021f14:	4684      	mov	ip, r0
 8021f16:	9e03      	ldr	r6, [sp, #12]
 8021f18:	cb01      	ldmia	r3!, {r0}
 8021f1a:	40f0      	lsrs	r0, r6
 8021f1c:	429a      	cmp	r2, r3
 8021f1e:	d8f4      	bhi.n	8021f0a <__lshift+0x7a>
 8021f20:	0026      	movs	r6, r4
 8021f22:	3615      	adds	r6, #21
 8021f24:	2304      	movs	r3, #4
 8021f26:	42b2      	cmp	r2, r6
 8021f28:	d304      	bcc.n	8021f34 <__lshift+0xa4>
 8021f2a:	1b13      	subs	r3, r2, r4
 8021f2c:	3b15      	subs	r3, #21
 8021f2e:	089b      	lsrs	r3, r3, #2
 8021f30:	3301      	adds	r3, #1
 8021f32:	009b      	lsls	r3, r3, #2
 8021f34:	50c8      	str	r0, [r1, r3]
 8021f36:	2800      	cmp	r0, #0
 8021f38:	d002      	beq.n	8021f40 <__lshift+0xb0>
 8021f3a:	9b01      	ldr	r3, [sp, #4]
 8021f3c:	3302      	adds	r3, #2
 8021f3e:	9300      	str	r3, [sp, #0]
 8021f40:	9b00      	ldr	r3, [sp, #0]
 8021f42:	9802      	ldr	r0, [sp, #8]
 8021f44:	3b01      	subs	r3, #1
 8021f46:	0021      	movs	r1, r4
 8021f48:	612b      	str	r3, [r5, #16]
 8021f4a:	f7ff fd77 	bl	8021a3c <_Bfree>
 8021f4e:	0028      	movs	r0, r5
 8021f50:	b005      	add	sp, #20
 8021f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f54:	cb01      	ldmia	r3!, {r0}
 8021f56:	c101      	stmia	r1!, {r0}
 8021f58:	429a      	cmp	r2, r3
 8021f5a:	d8fb      	bhi.n	8021f54 <__lshift+0xc4>
 8021f5c:	e7f0      	b.n	8021f40 <__lshift+0xb0>
 8021f5e:	46c0      	nop			@ (mov r8, r8)
 8021f60:	08025dc9 	.word	0x08025dc9
 8021f64:	08025e3a 	.word	0x08025e3a

08021f68 <__mcmp>:
 8021f68:	b530      	push	{r4, r5, lr}
 8021f6a:	690b      	ldr	r3, [r1, #16]
 8021f6c:	6904      	ldr	r4, [r0, #16]
 8021f6e:	0002      	movs	r2, r0
 8021f70:	1ae0      	subs	r0, r4, r3
 8021f72:	429c      	cmp	r4, r3
 8021f74:	d10f      	bne.n	8021f96 <__mcmp+0x2e>
 8021f76:	3214      	adds	r2, #20
 8021f78:	009b      	lsls	r3, r3, #2
 8021f7a:	3114      	adds	r1, #20
 8021f7c:	0014      	movs	r4, r2
 8021f7e:	18c9      	adds	r1, r1, r3
 8021f80:	18d2      	adds	r2, r2, r3
 8021f82:	3a04      	subs	r2, #4
 8021f84:	3904      	subs	r1, #4
 8021f86:	6815      	ldr	r5, [r2, #0]
 8021f88:	680b      	ldr	r3, [r1, #0]
 8021f8a:	429d      	cmp	r5, r3
 8021f8c:	d004      	beq.n	8021f98 <__mcmp+0x30>
 8021f8e:	2001      	movs	r0, #1
 8021f90:	429d      	cmp	r5, r3
 8021f92:	d200      	bcs.n	8021f96 <__mcmp+0x2e>
 8021f94:	3802      	subs	r0, #2
 8021f96:	bd30      	pop	{r4, r5, pc}
 8021f98:	4294      	cmp	r4, r2
 8021f9a:	d3f2      	bcc.n	8021f82 <__mcmp+0x1a>
 8021f9c:	e7fb      	b.n	8021f96 <__mcmp+0x2e>
	...

08021fa0 <__mdiff>:
 8021fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021fa2:	000c      	movs	r4, r1
 8021fa4:	b087      	sub	sp, #28
 8021fa6:	9000      	str	r0, [sp, #0]
 8021fa8:	0011      	movs	r1, r2
 8021faa:	0020      	movs	r0, r4
 8021fac:	0017      	movs	r7, r2
 8021fae:	f7ff ffdb 	bl	8021f68 <__mcmp>
 8021fb2:	1e05      	subs	r5, r0, #0
 8021fb4:	d110      	bne.n	8021fd8 <__mdiff+0x38>
 8021fb6:	0001      	movs	r1, r0
 8021fb8:	9800      	ldr	r0, [sp, #0]
 8021fba:	f7ff fcfb 	bl	80219b4 <_Balloc>
 8021fbe:	1e02      	subs	r2, r0, #0
 8021fc0:	d104      	bne.n	8021fcc <__mdiff+0x2c>
 8021fc2:	4b40      	ldr	r3, [pc, #256]	@ (80220c4 <__mdiff+0x124>)
 8021fc4:	4840      	ldr	r0, [pc, #256]	@ (80220c8 <__mdiff+0x128>)
 8021fc6:	4941      	ldr	r1, [pc, #260]	@ (80220cc <__mdiff+0x12c>)
 8021fc8:	f000 fdd4 	bl	8022b74 <__assert_func>
 8021fcc:	2301      	movs	r3, #1
 8021fce:	6145      	str	r5, [r0, #20]
 8021fd0:	6103      	str	r3, [r0, #16]
 8021fd2:	0010      	movs	r0, r2
 8021fd4:	b007      	add	sp, #28
 8021fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fd8:	2600      	movs	r6, #0
 8021fda:	42b0      	cmp	r0, r6
 8021fdc:	da03      	bge.n	8021fe6 <__mdiff+0x46>
 8021fde:	0023      	movs	r3, r4
 8021fe0:	003c      	movs	r4, r7
 8021fe2:	001f      	movs	r7, r3
 8021fe4:	3601      	adds	r6, #1
 8021fe6:	6861      	ldr	r1, [r4, #4]
 8021fe8:	9800      	ldr	r0, [sp, #0]
 8021fea:	f7ff fce3 	bl	80219b4 <_Balloc>
 8021fee:	1e02      	subs	r2, r0, #0
 8021ff0:	d103      	bne.n	8021ffa <__mdiff+0x5a>
 8021ff2:	4b34      	ldr	r3, [pc, #208]	@ (80220c4 <__mdiff+0x124>)
 8021ff4:	4834      	ldr	r0, [pc, #208]	@ (80220c8 <__mdiff+0x128>)
 8021ff6:	4936      	ldr	r1, [pc, #216]	@ (80220d0 <__mdiff+0x130>)
 8021ff8:	e7e6      	b.n	8021fc8 <__mdiff+0x28>
 8021ffa:	6923      	ldr	r3, [r4, #16]
 8021ffc:	3414      	adds	r4, #20
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	009b      	lsls	r3, r3, #2
 8022002:	18e3      	adds	r3, r4, r3
 8022004:	0021      	movs	r1, r4
 8022006:	9401      	str	r4, [sp, #4]
 8022008:	003c      	movs	r4, r7
 802200a:	9302      	str	r3, [sp, #8]
 802200c:	693b      	ldr	r3, [r7, #16]
 802200e:	3414      	adds	r4, #20
 8022010:	009b      	lsls	r3, r3, #2
 8022012:	18e3      	adds	r3, r4, r3
 8022014:	9303      	str	r3, [sp, #12]
 8022016:	0003      	movs	r3, r0
 8022018:	60c6      	str	r6, [r0, #12]
 802201a:	468c      	mov	ip, r1
 802201c:	2000      	movs	r0, #0
 802201e:	3314      	adds	r3, #20
 8022020:	9304      	str	r3, [sp, #16]
 8022022:	9305      	str	r3, [sp, #20]
 8022024:	4663      	mov	r3, ip
 8022026:	cb20      	ldmia	r3!, {r5}
 8022028:	b2a9      	uxth	r1, r5
 802202a:	000e      	movs	r6, r1
 802202c:	469c      	mov	ip, r3
 802202e:	cc08      	ldmia	r4!, {r3}
 8022030:	0c2d      	lsrs	r5, r5, #16
 8022032:	b299      	uxth	r1, r3
 8022034:	1a71      	subs	r1, r6, r1
 8022036:	1809      	adds	r1, r1, r0
 8022038:	0c1b      	lsrs	r3, r3, #16
 802203a:	1408      	asrs	r0, r1, #16
 802203c:	1aeb      	subs	r3, r5, r3
 802203e:	181b      	adds	r3, r3, r0
 8022040:	1418      	asrs	r0, r3, #16
 8022042:	b289      	uxth	r1, r1
 8022044:	041b      	lsls	r3, r3, #16
 8022046:	4319      	orrs	r1, r3
 8022048:	9b05      	ldr	r3, [sp, #20]
 802204a:	c302      	stmia	r3!, {r1}
 802204c:	9305      	str	r3, [sp, #20]
 802204e:	9b03      	ldr	r3, [sp, #12]
 8022050:	42a3      	cmp	r3, r4
 8022052:	d8e7      	bhi.n	8022024 <__mdiff+0x84>
 8022054:	0039      	movs	r1, r7
 8022056:	9c03      	ldr	r4, [sp, #12]
 8022058:	3115      	adds	r1, #21
 802205a:	2304      	movs	r3, #4
 802205c:	428c      	cmp	r4, r1
 802205e:	d304      	bcc.n	802206a <__mdiff+0xca>
 8022060:	1be3      	subs	r3, r4, r7
 8022062:	3b15      	subs	r3, #21
 8022064:	089b      	lsrs	r3, r3, #2
 8022066:	3301      	adds	r3, #1
 8022068:	009b      	lsls	r3, r3, #2
 802206a:	9901      	ldr	r1, [sp, #4]
 802206c:	18cd      	adds	r5, r1, r3
 802206e:	9904      	ldr	r1, [sp, #16]
 8022070:	002e      	movs	r6, r5
 8022072:	18cb      	adds	r3, r1, r3
 8022074:	001f      	movs	r7, r3
 8022076:	9902      	ldr	r1, [sp, #8]
 8022078:	428e      	cmp	r6, r1
 802207a:	d311      	bcc.n	80220a0 <__mdiff+0x100>
 802207c:	9c02      	ldr	r4, [sp, #8]
 802207e:	1ee9      	subs	r1, r5, #3
 8022080:	2000      	movs	r0, #0
 8022082:	428c      	cmp	r4, r1
 8022084:	d304      	bcc.n	8022090 <__mdiff+0xf0>
 8022086:	0021      	movs	r1, r4
 8022088:	3103      	adds	r1, #3
 802208a:	1b49      	subs	r1, r1, r5
 802208c:	0889      	lsrs	r1, r1, #2
 802208e:	0088      	lsls	r0, r1, #2
 8022090:	181b      	adds	r3, r3, r0
 8022092:	3b04      	subs	r3, #4
 8022094:	6819      	ldr	r1, [r3, #0]
 8022096:	2900      	cmp	r1, #0
 8022098:	d010      	beq.n	80220bc <__mdiff+0x11c>
 802209a:	9b00      	ldr	r3, [sp, #0]
 802209c:	6113      	str	r3, [r2, #16]
 802209e:	e798      	b.n	8021fd2 <__mdiff+0x32>
 80220a0:	4684      	mov	ip, r0
 80220a2:	ce02      	ldmia	r6!, {r1}
 80220a4:	b288      	uxth	r0, r1
 80220a6:	4460      	add	r0, ip
 80220a8:	1400      	asrs	r0, r0, #16
 80220aa:	0c0c      	lsrs	r4, r1, #16
 80220ac:	1904      	adds	r4, r0, r4
 80220ae:	4461      	add	r1, ip
 80220b0:	1420      	asrs	r0, r4, #16
 80220b2:	b289      	uxth	r1, r1
 80220b4:	0424      	lsls	r4, r4, #16
 80220b6:	4321      	orrs	r1, r4
 80220b8:	c702      	stmia	r7!, {r1}
 80220ba:	e7dc      	b.n	8022076 <__mdiff+0xd6>
 80220bc:	9900      	ldr	r1, [sp, #0]
 80220be:	3901      	subs	r1, #1
 80220c0:	9100      	str	r1, [sp, #0]
 80220c2:	e7e6      	b.n	8022092 <__mdiff+0xf2>
 80220c4:	08025dc9 	.word	0x08025dc9
 80220c8:	08025e3a 	.word	0x08025e3a
 80220cc:	00000237 	.word	0x00000237
 80220d0:	00000245 	.word	0x00000245

080220d4 <__ulp>:
 80220d4:	b510      	push	{r4, lr}
 80220d6:	2400      	movs	r4, #0
 80220d8:	4b0c      	ldr	r3, [pc, #48]	@ (802210c <__ulp+0x38>)
 80220da:	4a0d      	ldr	r2, [pc, #52]	@ (8022110 <__ulp+0x3c>)
 80220dc:	400b      	ands	r3, r1
 80220de:	189b      	adds	r3, r3, r2
 80220e0:	42a3      	cmp	r3, r4
 80220e2:	dc06      	bgt.n	80220f2 <__ulp+0x1e>
 80220e4:	425b      	negs	r3, r3
 80220e6:	151a      	asrs	r2, r3, #20
 80220e8:	2a13      	cmp	r2, #19
 80220ea:	dc05      	bgt.n	80220f8 <__ulp+0x24>
 80220ec:	2380      	movs	r3, #128	@ 0x80
 80220ee:	031b      	lsls	r3, r3, #12
 80220f0:	4113      	asrs	r3, r2
 80220f2:	0019      	movs	r1, r3
 80220f4:	0020      	movs	r0, r4
 80220f6:	bd10      	pop	{r4, pc}
 80220f8:	3a14      	subs	r2, #20
 80220fa:	2401      	movs	r4, #1
 80220fc:	2a1e      	cmp	r2, #30
 80220fe:	dc02      	bgt.n	8022106 <__ulp+0x32>
 8022100:	2480      	movs	r4, #128	@ 0x80
 8022102:	0624      	lsls	r4, r4, #24
 8022104:	40d4      	lsrs	r4, r2
 8022106:	2300      	movs	r3, #0
 8022108:	e7f3      	b.n	80220f2 <__ulp+0x1e>
 802210a:	46c0      	nop			@ (mov r8, r8)
 802210c:	7ff00000 	.word	0x7ff00000
 8022110:	fcc00000 	.word	0xfcc00000

08022114 <__b2d>:
 8022114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022116:	0006      	movs	r6, r0
 8022118:	6903      	ldr	r3, [r0, #16]
 802211a:	3614      	adds	r6, #20
 802211c:	009b      	lsls	r3, r3, #2
 802211e:	18f3      	adds	r3, r6, r3
 8022120:	1f1d      	subs	r5, r3, #4
 8022122:	682c      	ldr	r4, [r5, #0]
 8022124:	000f      	movs	r7, r1
 8022126:	0020      	movs	r0, r4
 8022128:	9301      	str	r3, [sp, #4]
 802212a:	f7ff fd3b 	bl	8021ba4 <__hi0bits>
 802212e:	2220      	movs	r2, #32
 8022130:	1a12      	subs	r2, r2, r0
 8022132:	603a      	str	r2, [r7, #0]
 8022134:	0003      	movs	r3, r0
 8022136:	4a1c      	ldr	r2, [pc, #112]	@ (80221a8 <__b2d+0x94>)
 8022138:	280a      	cmp	r0, #10
 802213a:	dc15      	bgt.n	8022168 <__b2d+0x54>
 802213c:	210b      	movs	r1, #11
 802213e:	0027      	movs	r7, r4
 8022140:	1a09      	subs	r1, r1, r0
 8022142:	40cf      	lsrs	r7, r1
 8022144:	433a      	orrs	r2, r7
 8022146:	468c      	mov	ip, r1
 8022148:	0011      	movs	r1, r2
 802214a:	2200      	movs	r2, #0
 802214c:	42ae      	cmp	r6, r5
 802214e:	d202      	bcs.n	8022156 <__b2d+0x42>
 8022150:	9a01      	ldr	r2, [sp, #4]
 8022152:	3a08      	subs	r2, #8
 8022154:	6812      	ldr	r2, [r2, #0]
 8022156:	3315      	adds	r3, #21
 8022158:	409c      	lsls	r4, r3
 802215a:	4663      	mov	r3, ip
 802215c:	0027      	movs	r7, r4
 802215e:	40da      	lsrs	r2, r3
 8022160:	4317      	orrs	r7, r2
 8022162:	0038      	movs	r0, r7
 8022164:	b003      	add	sp, #12
 8022166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022168:	2700      	movs	r7, #0
 802216a:	42ae      	cmp	r6, r5
 802216c:	d202      	bcs.n	8022174 <__b2d+0x60>
 802216e:	9d01      	ldr	r5, [sp, #4]
 8022170:	3d08      	subs	r5, #8
 8022172:	682f      	ldr	r7, [r5, #0]
 8022174:	210b      	movs	r1, #11
 8022176:	4249      	negs	r1, r1
 8022178:	468c      	mov	ip, r1
 802217a:	449c      	add	ip, r3
 802217c:	2b0b      	cmp	r3, #11
 802217e:	d010      	beq.n	80221a2 <__b2d+0x8e>
 8022180:	4661      	mov	r1, ip
 8022182:	2320      	movs	r3, #32
 8022184:	408c      	lsls	r4, r1
 8022186:	1a5b      	subs	r3, r3, r1
 8022188:	0039      	movs	r1, r7
 802218a:	40d9      	lsrs	r1, r3
 802218c:	430c      	orrs	r4, r1
 802218e:	4322      	orrs	r2, r4
 8022190:	0011      	movs	r1, r2
 8022192:	2200      	movs	r2, #0
 8022194:	42b5      	cmp	r5, r6
 8022196:	d901      	bls.n	802219c <__b2d+0x88>
 8022198:	3d04      	subs	r5, #4
 802219a:	682a      	ldr	r2, [r5, #0]
 802219c:	4664      	mov	r4, ip
 802219e:	40a7      	lsls	r7, r4
 80221a0:	e7dd      	b.n	802215e <__b2d+0x4a>
 80221a2:	4322      	orrs	r2, r4
 80221a4:	0011      	movs	r1, r2
 80221a6:	e7dc      	b.n	8022162 <__b2d+0x4e>
 80221a8:	3ff00000 	.word	0x3ff00000

080221ac <__d2b>:
 80221ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221ae:	2101      	movs	r1, #1
 80221b0:	0016      	movs	r6, r2
 80221b2:	001f      	movs	r7, r3
 80221b4:	f7ff fbfe 	bl	80219b4 <_Balloc>
 80221b8:	1e04      	subs	r4, r0, #0
 80221ba:	d105      	bne.n	80221c8 <__d2b+0x1c>
 80221bc:	0022      	movs	r2, r4
 80221be:	4b25      	ldr	r3, [pc, #148]	@ (8022254 <__d2b+0xa8>)
 80221c0:	4825      	ldr	r0, [pc, #148]	@ (8022258 <__d2b+0xac>)
 80221c2:	4926      	ldr	r1, [pc, #152]	@ (802225c <__d2b+0xb0>)
 80221c4:	f000 fcd6 	bl	8022b74 <__assert_func>
 80221c8:	033b      	lsls	r3, r7, #12
 80221ca:	007d      	lsls	r5, r7, #1
 80221cc:	0b1b      	lsrs	r3, r3, #12
 80221ce:	0d6d      	lsrs	r5, r5, #21
 80221d0:	d002      	beq.n	80221d8 <__d2b+0x2c>
 80221d2:	2280      	movs	r2, #128	@ 0x80
 80221d4:	0352      	lsls	r2, r2, #13
 80221d6:	4313      	orrs	r3, r2
 80221d8:	9301      	str	r3, [sp, #4]
 80221da:	2e00      	cmp	r6, #0
 80221dc:	d025      	beq.n	802222a <__d2b+0x7e>
 80221de:	4668      	mov	r0, sp
 80221e0:	9600      	str	r6, [sp, #0]
 80221e2:	f7ff fd00 	bl	8021be6 <__lo0bits>
 80221e6:	9b01      	ldr	r3, [sp, #4]
 80221e8:	9900      	ldr	r1, [sp, #0]
 80221ea:	2800      	cmp	r0, #0
 80221ec:	d01b      	beq.n	8022226 <__d2b+0x7a>
 80221ee:	2220      	movs	r2, #32
 80221f0:	001e      	movs	r6, r3
 80221f2:	1a12      	subs	r2, r2, r0
 80221f4:	4096      	lsls	r6, r2
 80221f6:	0032      	movs	r2, r6
 80221f8:	40c3      	lsrs	r3, r0
 80221fa:	430a      	orrs	r2, r1
 80221fc:	6162      	str	r2, [r4, #20]
 80221fe:	9301      	str	r3, [sp, #4]
 8022200:	9e01      	ldr	r6, [sp, #4]
 8022202:	61a6      	str	r6, [r4, #24]
 8022204:	1e73      	subs	r3, r6, #1
 8022206:	419e      	sbcs	r6, r3
 8022208:	3601      	adds	r6, #1
 802220a:	6126      	str	r6, [r4, #16]
 802220c:	2d00      	cmp	r5, #0
 802220e:	d014      	beq.n	802223a <__d2b+0x8e>
 8022210:	2635      	movs	r6, #53	@ 0x35
 8022212:	4b13      	ldr	r3, [pc, #76]	@ (8022260 <__d2b+0xb4>)
 8022214:	18ed      	adds	r5, r5, r3
 8022216:	9b08      	ldr	r3, [sp, #32]
 8022218:	182d      	adds	r5, r5, r0
 802221a:	601d      	str	r5, [r3, #0]
 802221c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802221e:	1a36      	subs	r6, r6, r0
 8022220:	601e      	str	r6, [r3, #0]
 8022222:	0020      	movs	r0, r4
 8022224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022226:	6161      	str	r1, [r4, #20]
 8022228:	e7ea      	b.n	8022200 <__d2b+0x54>
 802222a:	a801      	add	r0, sp, #4
 802222c:	f7ff fcdb 	bl	8021be6 <__lo0bits>
 8022230:	9b01      	ldr	r3, [sp, #4]
 8022232:	2601      	movs	r6, #1
 8022234:	6163      	str	r3, [r4, #20]
 8022236:	3020      	adds	r0, #32
 8022238:	e7e7      	b.n	802220a <__d2b+0x5e>
 802223a:	4b0a      	ldr	r3, [pc, #40]	@ (8022264 <__d2b+0xb8>)
 802223c:	18c0      	adds	r0, r0, r3
 802223e:	9b08      	ldr	r3, [sp, #32]
 8022240:	6018      	str	r0, [r3, #0]
 8022242:	4b09      	ldr	r3, [pc, #36]	@ (8022268 <__d2b+0xbc>)
 8022244:	18f3      	adds	r3, r6, r3
 8022246:	009b      	lsls	r3, r3, #2
 8022248:	18e3      	adds	r3, r4, r3
 802224a:	6958      	ldr	r0, [r3, #20]
 802224c:	f7ff fcaa 	bl	8021ba4 <__hi0bits>
 8022250:	0176      	lsls	r6, r6, #5
 8022252:	e7e3      	b.n	802221c <__d2b+0x70>
 8022254:	08025dc9 	.word	0x08025dc9
 8022258:	08025e3a 	.word	0x08025e3a
 802225c:	0000030f 	.word	0x0000030f
 8022260:	fffffbcd 	.word	0xfffffbcd
 8022264:	fffffbce 	.word	0xfffffbce
 8022268:	3fffffff 	.word	0x3fffffff

0802226c <__ratio>:
 802226c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802226e:	b087      	sub	sp, #28
 8022270:	000f      	movs	r7, r1
 8022272:	a904      	add	r1, sp, #16
 8022274:	0006      	movs	r6, r0
 8022276:	f7ff ff4d 	bl	8022114 <__b2d>
 802227a:	9000      	str	r0, [sp, #0]
 802227c:	9101      	str	r1, [sp, #4]
 802227e:	9b00      	ldr	r3, [sp, #0]
 8022280:	9c01      	ldr	r4, [sp, #4]
 8022282:	0038      	movs	r0, r7
 8022284:	a905      	add	r1, sp, #20
 8022286:	9302      	str	r3, [sp, #8]
 8022288:	9403      	str	r4, [sp, #12]
 802228a:	f7ff ff43 	bl	8022114 <__b2d>
 802228e:	000d      	movs	r5, r1
 8022290:	0002      	movs	r2, r0
 8022292:	000b      	movs	r3, r1
 8022294:	6930      	ldr	r0, [r6, #16]
 8022296:	6939      	ldr	r1, [r7, #16]
 8022298:	9e04      	ldr	r6, [sp, #16]
 802229a:	1a40      	subs	r0, r0, r1
 802229c:	9905      	ldr	r1, [sp, #20]
 802229e:	0140      	lsls	r0, r0, #5
 80222a0:	1a71      	subs	r1, r6, r1
 80222a2:	1841      	adds	r1, r0, r1
 80222a4:	0508      	lsls	r0, r1, #20
 80222a6:	2900      	cmp	r1, #0
 80222a8:	dd08      	ble.n	80222bc <__ratio+0x50>
 80222aa:	9901      	ldr	r1, [sp, #4]
 80222ac:	1841      	adds	r1, r0, r1
 80222ae:	9103      	str	r1, [sp, #12]
 80222b0:	9802      	ldr	r0, [sp, #8]
 80222b2:	9903      	ldr	r1, [sp, #12]
 80222b4:	f7df fd7e 	bl	8001db4 <__aeabi_ddiv>
 80222b8:	b007      	add	sp, #28
 80222ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222bc:	1a2b      	subs	r3, r5, r0
 80222be:	e7f7      	b.n	80222b0 <__ratio+0x44>

080222c0 <__copybits>:
 80222c0:	b570      	push	{r4, r5, r6, lr}
 80222c2:	0014      	movs	r4, r2
 80222c4:	0005      	movs	r5, r0
 80222c6:	3901      	subs	r1, #1
 80222c8:	6913      	ldr	r3, [r2, #16]
 80222ca:	1149      	asrs	r1, r1, #5
 80222cc:	3101      	adds	r1, #1
 80222ce:	0089      	lsls	r1, r1, #2
 80222d0:	3414      	adds	r4, #20
 80222d2:	009b      	lsls	r3, r3, #2
 80222d4:	1841      	adds	r1, r0, r1
 80222d6:	18e3      	adds	r3, r4, r3
 80222d8:	42a3      	cmp	r3, r4
 80222da:	d80d      	bhi.n	80222f8 <__copybits+0x38>
 80222dc:	0014      	movs	r4, r2
 80222de:	3411      	adds	r4, #17
 80222e0:	2500      	movs	r5, #0
 80222e2:	429c      	cmp	r4, r3
 80222e4:	d803      	bhi.n	80222ee <__copybits+0x2e>
 80222e6:	1a9b      	subs	r3, r3, r2
 80222e8:	3b11      	subs	r3, #17
 80222ea:	089b      	lsrs	r3, r3, #2
 80222ec:	009d      	lsls	r5, r3, #2
 80222ee:	2300      	movs	r3, #0
 80222f0:	1940      	adds	r0, r0, r5
 80222f2:	4281      	cmp	r1, r0
 80222f4:	d803      	bhi.n	80222fe <__copybits+0x3e>
 80222f6:	bd70      	pop	{r4, r5, r6, pc}
 80222f8:	cc40      	ldmia	r4!, {r6}
 80222fa:	c540      	stmia	r5!, {r6}
 80222fc:	e7ec      	b.n	80222d8 <__copybits+0x18>
 80222fe:	c008      	stmia	r0!, {r3}
 8022300:	e7f7      	b.n	80222f2 <__copybits+0x32>

08022302 <__any_on>:
 8022302:	0002      	movs	r2, r0
 8022304:	6900      	ldr	r0, [r0, #16]
 8022306:	b510      	push	{r4, lr}
 8022308:	3214      	adds	r2, #20
 802230a:	114b      	asrs	r3, r1, #5
 802230c:	4298      	cmp	r0, r3
 802230e:	db13      	blt.n	8022338 <__any_on+0x36>
 8022310:	dd0c      	ble.n	802232c <__any_on+0x2a>
 8022312:	241f      	movs	r4, #31
 8022314:	0008      	movs	r0, r1
 8022316:	4020      	ands	r0, r4
 8022318:	4221      	tst	r1, r4
 802231a:	d007      	beq.n	802232c <__any_on+0x2a>
 802231c:	0099      	lsls	r1, r3, #2
 802231e:	588c      	ldr	r4, [r1, r2]
 8022320:	0021      	movs	r1, r4
 8022322:	40c1      	lsrs	r1, r0
 8022324:	4081      	lsls	r1, r0
 8022326:	2001      	movs	r0, #1
 8022328:	428c      	cmp	r4, r1
 802232a:	d104      	bne.n	8022336 <__any_on+0x34>
 802232c:	009b      	lsls	r3, r3, #2
 802232e:	18d3      	adds	r3, r2, r3
 8022330:	4293      	cmp	r3, r2
 8022332:	d803      	bhi.n	802233c <__any_on+0x3a>
 8022334:	2000      	movs	r0, #0
 8022336:	bd10      	pop	{r4, pc}
 8022338:	0003      	movs	r3, r0
 802233a:	e7f7      	b.n	802232c <__any_on+0x2a>
 802233c:	3b04      	subs	r3, #4
 802233e:	6819      	ldr	r1, [r3, #0]
 8022340:	2900      	cmp	r1, #0
 8022342:	d0f5      	beq.n	8022330 <__any_on+0x2e>
 8022344:	2001      	movs	r0, #1
 8022346:	e7f6      	b.n	8022336 <__any_on+0x34>

08022348 <__ascii_wctomb>:
 8022348:	0003      	movs	r3, r0
 802234a:	1e08      	subs	r0, r1, #0
 802234c:	d005      	beq.n	802235a <__ascii_wctomb+0x12>
 802234e:	2aff      	cmp	r2, #255	@ 0xff
 8022350:	d904      	bls.n	802235c <__ascii_wctomb+0x14>
 8022352:	228a      	movs	r2, #138	@ 0x8a
 8022354:	2001      	movs	r0, #1
 8022356:	601a      	str	r2, [r3, #0]
 8022358:	4240      	negs	r0, r0
 802235a:	4770      	bx	lr
 802235c:	2001      	movs	r0, #1
 802235e:	700a      	strb	r2, [r1, #0]
 8022360:	e7fb      	b.n	802235a <__ascii_wctomb+0x12>
	...

08022364 <__ssputs_r>:
 8022364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022366:	688e      	ldr	r6, [r1, #8]
 8022368:	b085      	sub	sp, #20
 802236a:	001f      	movs	r7, r3
 802236c:	000c      	movs	r4, r1
 802236e:	680b      	ldr	r3, [r1, #0]
 8022370:	9002      	str	r0, [sp, #8]
 8022372:	9203      	str	r2, [sp, #12]
 8022374:	42be      	cmp	r6, r7
 8022376:	d830      	bhi.n	80223da <__ssputs_r+0x76>
 8022378:	210c      	movs	r1, #12
 802237a:	5e62      	ldrsh	r2, [r4, r1]
 802237c:	2190      	movs	r1, #144	@ 0x90
 802237e:	00c9      	lsls	r1, r1, #3
 8022380:	420a      	tst	r2, r1
 8022382:	d028      	beq.n	80223d6 <__ssputs_r+0x72>
 8022384:	2003      	movs	r0, #3
 8022386:	6921      	ldr	r1, [r4, #16]
 8022388:	1a5b      	subs	r3, r3, r1
 802238a:	9301      	str	r3, [sp, #4]
 802238c:	6963      	ldr	r3, [r4, #20]
 802238e:	4343      	muls	r3, r0
 8022390:	9801      	ldr	r0, [sp, #4]
 8022392:	0fdd      	lsrs	r5, r3, #31
 8022394:	18ed      	adds	r5, r5, r3
 8022396:	1c7b      	adds	r3, r7, #1
 8022398:	181b      	adds	r3, r3, r0
 802239a:	106d      	asrs	r5, r5, #1
 802239c:	42ab      	cmp	r3, r5
 802239e:	d900      	bls.n	80223a2 <__ssputs_r+0x3e>
 80223a0:	001d      	movs	r5, r3
 80223a2:	0552      	lsls	r2, r2, #21
 80223a4:	d528      	bpl.n	80223f8 <__ssputs_r+0x94>
 80223a6:	0029      	movs	r1, r5
 80223a8:	9802      	ldr	r0, [sp, #8]
 80223aa:	f7ff fa61 	bl	8021870 <_malloc_r>
 80223ae:	1e06      	subs	r6, r0, #0
 80223b0:	d02c      	beq.n	802240c <__ssputs_r+0xa8>
 80223b2:	9a01      	ldr	r2, [sp, #4]
 80223b4:	6921      	ldr	r1, [r4, #16]
 80223b6:	f7fd fff9 	bl	80203ac <memcpy>
 80223ba:	89a2      	ldrh	r2, [r4, #12]
 80223bc:	4b18      	ldr	r3, [pc, #96]	@ (8022420 <__ssputs_r+0xbc>)
 80223be:	401a      	ands	r2, r3
 80223c0:	2380      	movs	r3, #128	@ 0x80
 80223c2:	4313      	orrs	r3, r2
 80223c4:	81a3      	strh	r3, [r4, #12]
 80223c6:	9b01      	ldr	r3, [sp, #4]
 80223c8:	6126      	str	r6, [r4, #16]
 80223ca:	18f6      	adds	r6, r6, r3
 80223cc:	6026      	str	r6, [r4, #0]
 80223ce:	003e      	movs	r6, r7
 80223d0:	6165      	str	r5, [r4, #20]
 80223d2:	1aed      	subs	r5, r5, r3
 80223d4:	60a5      	str	r5, [r4, #8]
 80223d6:	42be      	cmp	r6, r7
 80223d8:	d900      	bls.n	80223dc <__ssputs_r+0x78>
 80223da:	003e      	movs	r6, r7
 80223dc:	0032      	movs	r2, r6
 80223de:	9903      	ldr	r1, [sp, #12]
 80223e0:	6820      	ldr	r0, [r4, #0]
 80223e2:	f000 fb7e 	bl	8022ae2 <memmove>
 80223e6:	2000      	movs	r0, #0
 80223e8:	68a3      	ldr	r3, [r4, #8]
 80223ea:	1b9b      	subs	r3, r3, r6
 80223ec:	60a3      	str	r3, [r4, #8]
 80223ee:	6823      	ldr	r3, [r4, #0]
 80223f0:	199b      	adds	r3, r3, r6
 80223f2:	6023      	str	r3, [r4, #0]
 80223f4:	b005      	add	sp, #20
 80223f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223f8:	002a      	movs	r2, r5
 80223fa:	9802      	ldr	r0, [sp, #8]
 80223fc:	f000 fc05 	bl	8022c0a <_realloc_r>
 8022400:	1e06      	subs	r6, r0, #0
 8022402:	d1e0      	bne.n	80223c6 <__ssputs_r+0x62>
 8022404:	6921      	ldr	r1, [r4, #16]
 8022406:	9802      	ldr	r0, [sp, #8]
 8022408:	f7fe fe62 	bl	80210d0 <_free_r>
 802240c:	230c      	movs	r3, #12
 802240e:	2001      	movs	r0, #1
 8022410:	9a02      	ldr	r2, [sp, #8]
 8022412:	4240      	negs	r0, r0
 8022414:	6013      	str	r3, [r2, #0]
 8022416:	89a2      	ldrh	r2, [r4, #12]
 8022418:	3334      	adds	r3, #52	@ 0x34
 802241a:	4313      	orrs	r3, r2
 802241c:	81a3      	strh	r3, [r4, #12]
 802241e:	e7e9      	b.n	80223f4 <__ssputs_r+0x90>
 8022420:	fffffb7f 	.word	0xfffffb7f

08022424 <_svfiprintf_r>:
 8022424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022426:	b0a1      	sub	sp, #132	@ 0x84
 8022428:	9003      	str	r0, [sp, #12]
 802242a:	001d      	movs	r5, r3
 802242c:	898b      	ldrh	r3, [r1, #12]
 802242e:	000f      	movs	r7, r1
 8022430:	0016      	movs	r6, r2
 8022432:	061b      	lsls	r3, r3, #24
 8022434:	d511      	bpl.n	802245a <_svfiprintf_r+0x36>
 8022436:	690b      	ldr	r3, [r1, #16]
 8022438:	2b00      	cmp	r3, #0
 802243a:	d10e      	bne.n	802245a <_svfiprintf_r+0x36>
 802243c:	2140      	movs	r1, #64	@ 0x40
 802243e:	f7ff fa17 	bl	8021870 <_malloc_r>
 8022442:	6038      	str	r0, [r7, #0]
 8022444:	6138      	str	r0, [r7, #16]
 8022446:	2800      	cmp	r0, #0
 8022448:	d105      	bne.n	8022456 <_svfiprintf_r+0x32>
 802244a:	230c      	movs	r3, #12
 802244c:	9a03      	ldr	r2, [sp, #12]
 802244e:	6013      	str	r3, [r2, #0]
 8022450:	2001      	movs	r0, #1
 8022452:	4240      	negs	r0, r0
 8022454:	e0cf      	b.n	80225f6 <_svfiprintf_r+0x1d2>
 8022456:	2340      	movs	r3, #64	@ 0x40
 8022458:	617b      	str	r3, [r7, #20]
 802245a:	2300      	movs	r3, #0
 802245c:	ac08      	add	r4, sp, #32
 802245e:	6163      	str	r3, [r4, #20]
 8022460:	3320      	adds	r3, #32
 8022462:	7663      	strb	r3, [r4, #25]
 8022464:	3310      	adds	r3, #16
 8022466:	76a3      	strb	r3, [r4, #26]
 8022468:	9507      	str	r5, [sp, #28]
 802246a:	0035      	movs	r5, r6
 802246c:	782b      	ldrb	r3, [r5, #0]
 802246e:	2b00      	cmp	r3, #0
 8022470:	d001      	beq.n	8022476 <_svfiprintf_r+0x52>
 8022472:	2b25      	cmp	r3, #37	@ 0x25
 8022474:	d148      	bne.n	8022508 <_svfiprintf_r+0xe4>
 8022476:	1bab      	subs	r3, r5, r6
 8022478:	9305      	str	r3, [sp, #20]
 802247a:	42b5      	cmp	r5, r6
 802247c:	d00b      	beq.n	8022496 <_svfiprintf_r+0x72>
 802247e:	0032      	movs	r2, r6
 8022480:	0039      	movs	r1, r7
 8022482:	9803      	ldr	r0, [sp, #12]
 8022484:	f7ff ff6e 	bl	8022364 <__ssputs_r>
 8022488:	3001      	adds	r0, #1
 802248a:	d100      	bne.n	802248e <_svfiprintf_r+0x6a>
 802248c:	e0ae      	b.n	80225ec <_svfiprintf_r+0x1c8>
 802248e:	6963      	ldr	r3, [r4, #20]
 8022490:	9a05      	ldr	r2, [sp, #20]
 8022492:	189b      	adds	r3, r3, r2
 8022494:	6163      	str	r3, [r4, #20]
 8022496:	782b      	ldrb	r3, [r5, #0]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d100      	bne.n	802249e <_svfiprintf_r+0x7a>
 802249c:	e0a6      	b.n	80225ec <_svfiprintf_r+0x1c8>
 802249e:	2201      	movs	r2, #1
 80224a0:	2300      	movs	r3, #0
 80224a2:	4252      	negs	r2, r2
 80224a4:	6062      	str	r2, [r4, #4]
 80224a6:	a904      	add	r1, sp, #16
 80224a8:	3254      	adds	r2, #84	@ 0x54
 80224aa:	1852      	adds	r2, r2, r1
 80224ac:	1c6e      	adds	r6, r5, #1
 80224ae:	6023      	str	r3, [r4, #0]
 80224b0:	60e3      	str	r3, [r4, #12]
 80224b2:	60a3      	str	r3, [r4, #8]
 80224b4:	7013      	strb	r3, [r2, #0]
 80224b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80224b8:	4b54      	ldr	r3, [pc, #336]	@ (802260c <_svfiprintf_r+0x1e8>)
 80224ba:	2205      	movs	r2, #5
 80224bc:	0018      	movs	r0, r3
 80224be:	7831      	ldrb	r1, [r6, #0]
 80224c0:	9305      	str	r3, [sp, #20]
 80224c2:	f7fd ff68 	bl	8020396 <memchr>
 80224c6:	1c75      	adds	r5, r6, #1
 80224c8:	2800      	cmp	r0, #0
 80224ca:	d11f      	bne.n	802250c <_svfiprintf_r+0xe8>
 80224cc:	6822      	ldr	r2, [r4, #0]
 80224ce:	06d3      	lsls	r3, r2, #27
 80224d0:	d504      	bpl.n	80224dc <_svfiprintf_r+0xb8>
 80224d2:	2353      	movs	r3, #83	@ 0x53
 80224d4:	a904      	add	r1, sp, #16
 80224d6:	185b      	adds	r3, r3, r1
 80224d8:	2120      	movs	r1, #32
 80224da:	7019      	strb	r1, [r3, #0]
 80224dc:	0713      	lsls	r3, r2, #28
 80224de:	d504      	bpl.n	80224ea <_svfiprintf_r+0xc6>
 80224e0:	2353      	movs	r3, #83	@ 0x53
 80224e2:	a904      	add	r1, sp, #16
 80224e4:	185b      	adds	r3, r3, r1
 80224e6:	212b      	movs	r1, #43	@ 0x2b
 80224e8:	7019      	strb	r1, [r3, #0]
 80224ea:	7833      	ldrb	r3, [r6, #0]
 80224ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80224ee:	d016      	beq.n	802251e <_svfiprintf_r+0xfa>
 80224f0:	0035      	movs	r5, r6
 80224f2:	2100      	movs	r1, #0
 80224f4:	200a      	movs	r0, #10
 80224f6:	68e3      	ldr	r3, [r4, #12]
 80224f8:	782a      	ldrb	r2, [r5, #0]
 80224fa:	1c6e      	adds	r6, r5, #1
 80224fc:	3a30      	subs	r2, #48	@ 0x30
 80224fe:	2a09      	cmp	r2, #9
 8022500:	d950      	bls.n	80225a4 <_svfiprintf_r+0x180>
 8022502:	2900      	cmp	r1, #0
 8022504:	d111      	bne.n	802252a <_svfiprintf_r+0x106>
 8022506:	e017      	b.n	8022538 <_svfiprintf_r+0x114>
 8022508:	3501      	adds	r5, #1
 802250a:	e7af      	b.n	802246c <_svfiprintf_r+0x48>
 802250c:	9b05      	ldr	r3, [sp, #20]
 802250e:	6822      	ldr	r2, [r4, #0]
 8022510:	1ac0      	subs	r0, r0, r3
 8022512:	2301      	movs	r3, #1
 8022514:	4083      	lsls	r3, r0
 8022516:	4313      	orrs	r3, r2
 8022518:	002e      	movs	r6, r5
 802251a:	6023      	str	r3, [r4, #0]
 802251c:	e7cc      	b.n	80224b8 <_svfiprintf_r+0x94>
 802251e:	9b07      	ldr	r3, [sp, #28]
 8022520:	1d19      	adds	r1, r3, #4
 8022522:	681b      	ldr	r3, [r3, #0]
 8022524:	9107      	str	r1, [sp, #28]
 8022526:	2b00      	cmp	r3, #0
 8022528:	db01      	blt.n	802252e <_svfiprintf_r+0x10a>
 802252a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802252c:	e004      	b.n	8022538 <_svfiprintf_r+0x114>
 802252e:	425b      	negs	r3, r3
 8022530:	60e3      	str	r3, [r4, #12]
 8022532:	2302      	movs	r3, #2
 8022534:	4313      	orrs	r3, r2
 8022536:	6023      	str	r3, [r4, #0]
 8022538:	782b      	ldrb	r3, [r5, #0]
 802253a:	2b2e      	cmp	r3, #46	@ 0x2e
 802253c:	d10c      	bne.n	8022558 <_svfiprintf_r+0x134>
 802253e:	786b      	ldrb	r3, [r5, #1]
 8022540:	2b2a      	cmp	r3, #42	@ 0x2a
 8022542:	d134      	bne.n	80225ae <_svfiprintf_r+0x18a>
 8022544:	9b07      	ldr	r3, [sp, #28]
 8022546:	3502      	adds	r5, #2
 8022548:	1d1a      	adds	r2, r3, #4
 802254a:	681b      	ldr	r3, [r3, #0]
 802254c:	9207      	str	r2, [sp, #28]
 802254e:	2b00      	cmp	r3, #0
 8022550:	da01      	bge.n	8022556 <_svfiprintf_r+0x132>
 8022552:	2301      	movs	r3, #1
 8022554:	425b      	negs	r3, r3
 8022556:	9309      	str	r3, [sp, #36]	@ 0x24
 8022558:	4e2d      	ldr	r6, [pc, #180]	@ (8022610 <_svfiprintf_r+0x1ec>)
 802255a:	2203      	movs	r2, #3
 802255c:	0030      	movs	r0, r6
 802255e:	7829      	ldrb	r1, [r5, #0]
 8022560:	f7fd ff19 	bl	8020396 <memchr>
 8022564:	2800      	cmp	r0, #0
 8022566:	d006      	beq.n	8022576 <_svfiprintf_r+0x152>
 8022568:	2340      	movs	r3, #64	@ 0x40
 802256a:	1b80      	subs	r0, r0, r6
 802256c:	4083      	lsls	r3, r0
 802256e:	6822      	ldr	r2, [r4, #0]
 8022570:	3501      	adds	r5, #1
 8022572:	4313      	orrs	r3, r2
 8022574:	6023      	str	r3, [r4, #0]
 8022576:	7829      	ldrb	r1, [r5, #0]
 8022578:	2206      	movs	r2, #6
 802257a:	4826      	ldr	r0, [pc, #152]	@ (8022614 <_svfiprintf_r+0x1f0>)
 802257c:	1c6e      	adds	r6, r5, #1
 802257e:	7621      	strb	r1, [r4, #24]
 8022580:	f7fd ff09 	bl	8020396 <memchr>
 8022584:	2800      	cmp	r0, #0
 8022586:	d038      	beq.n	80225fa <_svfiprintf_r+0x1d6>
 8022588:	4b23      	ldr	r3, [pc, #140]	@ (8022618 <_svfiprintf_r+0x1f4>)
 802258a:	2b00      	cmp	r3, #0
 802258c:	d122      	bne.n	80225d4 <_svfiprintf_r+0x1b0>
 802258e:	2207      	movs	r2, #7
 8022590:	9b07      	ldr	r3, [sp, #28]
 8022592:	3307      	adds	r3, #7
 8022594:	4393      	bics	r3, r2
 8022596:	3308      	adds	r3, #8
 8022598:	9307      	str	r3, [sp, #28]
 802259a:	6963      	ldr	r3, [r4, #20]
 802259c:	9a04      	ldr	r2, [sp, #16]
 802259e:	189b      	adds	r3, r3, r2
 80225a0:	6163      	str	r3, [r4, #20]
 80225a2:	e762      	b.n	802246a <_svfiprintf_r+0x46>
 80225a4:	4343      	muls	r3, r0
 80225a6:	0035      	movs	r5, r6
 80225a8:	2101      	movs	r1, #1
 80225aa:	189b      	adds	r3, r3, r2
 80225ac:	e7a4      	b.n	80224f8 <_svfiprintf_r+0xd4>
 80225ae:	2300      	movs	r3, #0
 80225b0:	200a      	movs	r0, #10
 80225b2:	0019      	movs	r1, r3
 80225b4:	3501      	adds	r5, #1
 80225b6:	6063      	str	r3, [r4, #4]
 80225b8:	782a      	ldrb	r2, [r5, #0]
 80225ba:	1c6e      	adds	r6, r5, #1
 80225bc:	3a30      	subs	r2, #48	@ 0x30
 80225be:	2a09      	cmp	r2, #9
 80225c0:	d903      	bls.n	80225ca <_svfiprintf_r+0x1a6>
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d0c8      	beq.n	8022558 <_svfiprintf_r+0x134>
 80225c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80225c8:	e7c6      	b.n	8022558 <_svfiprintf_r+0x134>
 80225ca:	4341      	muls	r1, r0
 80225cc:	0035      	movs	r5, r6
 80225ce:	2301      	movs	r3, #1
 80225d0:	1889      	adds	r1, r1, r2
 80225d2:	e7f1      	b.n	80225b8 <_svfiprintf_r+0x194>
 80225d4:	aa07      	add	r2, sp, #28
 80225d6:	9200      	str	r2, [sp, #0]
 80225d8:	0021      	movs	r1, r4
 80225da:	003a      	movs	r2, r7
 80225dc:	4b0f      	ldr	r3, [pc, #60]	@ (802261c <_svfiprintf_r+0x1f8>)
 80225de:	9803      	ldr	r0, [sp, #12]
 80225e0:	f7fc ffd4 	bl	801f58c <_printf_float>
 80225e4:	9004      	str	r0, [sp, #16]
 80225e6:	9b04      	ldr	r3, [sp, #16]
 80225e8:	3301      	adds	r3, #1
 80225ea:	d1d6      	bne.n	802259a <_svfiprintf_r+0x176>
 80225ec:	89bb      	ldrh	r3, [r7, #12]
 80225ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80225f0:	065b      	lsls	r3, r3, #25
 80225f2:	d500      	bpl.n	80225f6 <_svfiprintf_r+0x1d2>
 80225f4:	e72c      	b.n	8022450 <_svfiprintf_r+0x2c>
 80225f6:	b021      	add	sp, #132	@ 0x84
 80225f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225fa:	aa07      	add	r2, sp, #28
 80225fc:	9200      	str	r2, [sp, #0]
 80225fe:	0021      	movs	r1, r4
 8022600:	003a      	movs	r2, r7
 8022602:	4b06      	ldr	r3, [pc, #24]	@ (802261c <_svfiprintf_r+0x1f8>)
 8022604:	9803      	ldr	r0, [sp, #12]
 8022606:	f7fd fa6f 	bl	801fae8 <_printf_i>
 802260a:	e7eb      	b.n	80225e4 <_svfiprintf_r+0x1c0>
 802260c:	08025f90 	.word	0x08025f90
 8022610:	08025f96 	.word	0x08025f96
 8022614:	08025f9a 	.word	0x08025f9a
 8022618:	0801f58d 	.word	0x0801f58d
 802261c:	08022365 	.word	0x08022365

08022620 <__sfputc_r>:
 8022620:	6893      	ldr	r3, [r2, #8]
 8022622:	b510      	push	{r4, lr}
 8022624:	3b01      	subs	r3, #1
 8022626:	6093      	str	r3, [r2, #8]
 8022628:	2b00      	cmp	r3, #0
 802262a:	da04      	bge.n	8022636 <__sfputc_r+0x16>
 802262c:	6994      	ldr	r4, [r2, #24]
 802262e:	42a3      	cmp	r3, r4
 8022630:	db07      	blt.n	8022642 <__sfputc_r+0x22>
 8022632:	290a      	cmp	r1, #10
 8022634:	d005      	beq.n	8022642 <__sfputc_r+0x22>
 8022636:	6813      	ldr	r3, [r2, #0]
 8022638:	1c58      	adds	r0, r3, #1
 802263a:	6010      	str	r0, [r2, #0]
 802263c:	7019      	strb	r1, [r3, #0]
 802263e:	0008      	movs	r0, r1
 8022640:	bd10      	pop	{r4, pc}
 8022642:	f7fd fd37 	bl	80200b4 <__swbuf_r>
 8022646:	0001      	movs	r1, r0
 8022648:	e7f9      	b.n	802263e <__sfputc_r+0x1e>

0802264a <__sfputs_r>:
 802264a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802264c:	0006      	movs	r6, r0
 802264e:	000f      	movs	r7, r1
 8022650:	0014      	movs	r4, r2
 8022652:	18d5      	adds	r5, r2, r3
 8022654:	42ac      	cmp	r4, r5
 8022656:	d101      	bne.n	802265c <__sfputs_r+0x12>
 8022658:	2000      	movs	r0, #0
 802265a:	e007      	b.n	802266c <__sfputs_r+0x22>
 802265c:	7821      	ldrb	r1, [r4, #0]
 802265e:	003a      	movs	r2, r7
 8022660:	0030      	movs	r0, r6
 8022662:	f7ff ffdd 	bl	8022620 <__sfputc_r>
 8022666:	3401      	adds	r4, #1
 8022668:	1c43      	adds	r3, r0, #1
 802266a:	d1f3      	bne.n	8022654 <__sfputs_r+0xa>
 802266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022670 <_vfiprintf_r>:
 8022670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022672:	b0a1      	sub	sp, #132	@ 0x84
 8022674:	000f      	movs	r7, r1
 8022676:	0015      	movs	r5, r2
 8022678:	001e      	movs	r6, r3
 802267a:	9003      	str	r0, [sp, #12]
 802267c:	2800      	cmp	r0, #0
 802267e:	d004      	beq.n	802268a <_vfiprintf_r+0x1a>
 8022680:	6a03      	ldr	r3, [r0, #32]
 8022682:	2b00      	cmp	r3, #0
 8022684:	d101      	bne.n	802268a <_vfiprintf_r+0x1a>
 8022686:	f7fd fbcd 	bl	801fe24 <__sinit>
 802268a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802268c:	07db      	lsls	r3, r3, #31
 802268e:	d405      	bmi.n	802269c <_vfiprintf_r+0x2c>
 8022690:	89bb      	ldrh	r3, [r7, #12]
 8022692:	059b      	lsls	r3, r3, #22
 8022694:	d402      	bmi.n	802269c <_vfiprintf_r+0x2c>
 8022696:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022698:	f7fd fe7b 	bl	8020392 <__retarget_lock_acquire_recursive>
 802269c:	89bb      	ldrh	r3, [r7, #12]
 802269e:	071b      	lsls	r3, r3, #28
 80226a0:	d502      	bpl.n	80226a8 <_vfiprintf_r+0x38>
 80226a2:	693b      	ldr	r3, [r7, #16]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d113      	bne.n	80226d0 <_vfiprintf_r+0x60>
 80226a8:	0039      	movs	r1, r7
 80226aa:	9803      	ldr	r0, [sp, #12]
 80226ac:	f7fd fd44 	bl	8020138 <__swsetup_r>
 80226b0:	2800      	cmp	r0, #0
 80226b2:	d00d      	beq.n	80226d0 <_vfiprintf_r+0x60>
 80226b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80226b6:	07db      	lsls	r3, r3, #31
 80226b8:	d503      	bpl.n	80226c2 <_vfiprintf_r+0x52>
 80226ba:	2001      	movs	r0, #1
 80226bc:	4240      	negs	r0, r0
 80226be:	b021      	add	sp, #132	@ 0x84
 80226c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226c2:	89bb      	ldrh	r3, [r7, #12]
 80226c4:	059b      	lsls	r3, r3, #22
 80226c6:	d4f8      	bmi.n	80226ba <_vfiprintf_r+0x4a>
 80226c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80226ca:	f7fd fe63 	bl	8020394 <__retarget_lock_release_recursive>
 80226ce:	e7f4      	b.n	80226ba <_vfiprintf_r+0x4a>
 80226d0:	2300      	movs	r3, #0
 80226d2:	ac08      	add	r4, sp, #32
 80226d4:	6163      	str	r3, [r4, #20]
 80226d6:	3320      	adds	r3, #32
 80226d8:	7663      	strb	r3, [r4, #25]
 80226da:	3310      	adds	r3, #16
 80226dc:	76a3      	strb	r3, [r4, #26]
 80226de:	9607      	str	r6, [sp, #28]
 80226e0:	002e      	movs	r6, r5
 80226e2:	7833      	ldrb	r3, [r6, #0]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d001      	beq.n	80226ec <_vfiprintf_r+0x7c>
 80226e8:	2b25      	cmp	r3, #37	@ 0x25
 80226ea:	d148      	bne.n	802277e <_vfiprintf_r+0x10e>
 80226ec:	1b73      	subs	r3, r6, r5
 80226ee:	9305      	str	r3, [sp, #20]
 80226f0:	42ae      	cmp	r6, r5
 80226f2:	d00b      	beq.n	802270c <_vfiprintf_r+0x9c>
 80226f4:	002a      	movs	r2, r5
 80226f6:	0039      	movs	r1, r7
 80226f8:	9803      	ldr	r0, [sp, #12]
 80226fa:	f7ff ffa6 	bl	802264a <__sfputs_r>
 80226fe:	3001      	adds	r0, #1
 8022700:	d100      	bne.n	8022704 <_vfiprintf_r+0x94>
 8022702:	e0ae      	b.n	8022862 <_vfiprintf_r+0x1f2>
 8022704:	6963      	ldr	r3, [r4, #20]
 8022706:	9a05      	ldr	r2, [sp, #20]
 8022708:	189b      	adds	r3, r3, r2
 802270a:	6163      	str	r3, [r4, #20]
 802270c:	7833      	ldrb	r3, [r6, #0]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d100      	bne.n	8022714 <_vfiprintf_r+0xa4>
 8022712:	e0a6      	b.n	8022862 <_vfiprintf_r+0x1f2>
 8022714:	2201      	movs	r2, #1
 8022716:	2300      	movs	r3, #0
 8022718:	4252      	negs	r2, r2
 802271a:	6062      	str	r2, [r4, #4]
 802271c:	a904      	add	r1, sp, #16
 802271e:	3254      	adds	r2, #84	@ 0x54
 8022720:	1852      	adds	r2, r2, r1
 8022722:	1c75      	adds	r5, r6, #1
 8022724:	6023      	str	r3, [r4, #0]
 8022726:	60e3      	str	r3, [r4, #12]
 8022728:	60a3      	str	r3, [r4, #8]
 802272a:	7013      	strb	r3, [r2, #0]
 802272c:	65a3      	str	r3, [r4, #88]	@ 0x58
 802272e:	4b59      	ldr	r3, [pc, #356]	@ (8022894 <_vfiprintf_r+0x224>)
 8022730:	2205      	movs	r2, #5
 8022732:	0018      	movs	r0, r3
 8022734:	7829      	ldrb	r1, [r5, #0]
 8022736:	9305      	str	r3, [sp, #20]
 8022738:	f7fd fe2d 	bl	8020396 <memchr>
 802273c:	1c6e      	adds	r6, r5, #1
 802273e:	2800      	cmp	r0, #0
 8022740:	d11f      	bne.n	8022782 <_vfiprintf_r+0x112>
 8022742:	6822      	ldr	r2, [r4, #0]
 8022744:	06d3      	lsls	r3, r2, #27
 8022746:	d504      	bpl.n	8022752 <_vfiprintf_r+0xe2>
 8022748:	2353      	movs	r3, #83	@ 0x53
 802274a:	a904      	add	r1, sp, #16
 802274c:	185b      	adds	r3, r3, r1
 802274e:	2120      	movs	r1, #32
 8022750:	7019      	strb	r1, [r3, #0]
 8022752:	0713      	lsls	r3, r2, #28
 8022754:	d504      	bpl.n	8022760 <_vfiprintf_r+0xf0>
 8022756:	2353      	movs	r3, #83	@ 0x53
 8022758:	a904      	add	r1, sp, #16
 802275a:	185b      	adds	r3, r3, r1
 802275c:	212b      	movs	r1, #43	@ 0x2b
 802275e:	7019      	strb	r1, [r3, #0]
 8022760:	782b      	ldrb	r3, [r5, #0]
 8022762:	2b2a      	cmp	r3, #42	@ 0x2a
 8022764:	d016      	beq.n	8022794 <_vfiprintf_r+0x124>
 8022766:	002e      	movs	r6, r5
 8022768:	2100      	movs	r1, #0
 802276a:	200a      	movs	r0, #10
 802276c:	68e3      	ldr	r3, [r4, #12]
 802276e:	7832      	ldrb	r2, [r6, #0]
 8022770:	1c75      	adds	r5, r6, #1
 8022772:	3a30      	subs	r2, #48	@ 0x30
 8022774:	2a09      	cmp	r2, #9
 8022776:	d950      	bls.n	802281a <_vfiprintf_r+0x1aa>
 8022778:	2900      	cmp	r1, #0
 802277a:	d111      	bne.n	80227a0 <_vfiprintf_r+0x130>
 802277c:	e017      	b.n	80227ae <_vfiprintf_r+0x13e>
 802277e:	3601      	adds	r6, #1
 8022780:	e7af      	b.n	80226e2 <_vfiprintf_r+0x72>
 8022782:	9b05      	ldr	r3, [sp, #20]
 8022784:	6822      	ldr	r2, [r4, #0]
 8022786:	1ac0      	subs	r0, r0, r3
 8022788:	2301      	movs	r3, #1
 802278a:	4083      	lsls	r3, r0
 802278c:	4313      	orrs	r3, r2
 802278e:	0035      	movs	r5, r6
 8022790:	6023      	str	r3, [r4, #0]
 8022792:	e7cc      	b.n	802272e <_vfiprintf_r+0xbe>
 8022794:	9b07      	ldr	r3, [sp, #28]
 8022796:	1d19      	adds	r1, r3, #4
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	9107      	str	r1, [sp, #28]
 802279c:	2b00      	cmp	r3, #0
 802279e:	db01      	blt.n	80227a4 <_vfiprintf_r+0x134>
 80227a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80227a2:	e004      	b.n	80227ae <_vfiprintf_r+0x13e>
 80227a4:	425b      	negs	r3, r3
 80227a6:	60e3      	str	r3, [r4, #12]
 80227a8:	2302      	movs	r3, #2
 80227aa:	4313      	orrs	r3, r2
 80227ac:	6023      	str	r3, [r4, #0]
 80227ae:	7833      	ldrb	r3, [r6, #0]
 80227b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80227b2:	d10c      	bne.n	80227ce <_vfiprintf_r+0x15e>
 80227b4:	7873      	ldrb	r3, [r6, #1]
 80227b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80227b8:	d134      	bne.n	8022824 <_vfiprintf_r+0x1b4>
 80227ba:	9b07      	ldr	r3, [sp, #28]
 80227bc:	3602      	adds	r6, #2
 80227be:	1d1a      	adds	r2, r3, #4
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	9207      	str	r2, [sp, #28]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	da01      	bge.n	80227cc <_vfiprintf_r+0x15c>
 80227c8:	2301      	movs	r3, #1
 80227ca:	425b      	negs	r3, r3
 80227cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80227ce:	4d32      	ldr	r5, [pc, #200]	@ (8022898 <_vfiprintf_r+0x228>)
 80227d0:	2203      	movs	r2, #3
 80227d2:	0028      	movs	r0, r5
 80227d4:	7831      	ldrb	r1, [r6, #0]
 80227d6:	f7fd fdde 	bl	8020396 <memchr>
 80227da:	2800      	cmp	r0, #0
 80227dc:	d006      	beq.n	80227ec <_vfiprintf_r+0x17c>
 80227de:	2340      	movs	r3, #64	@ 0x40
 80227e0:	1b40      	subs	r0, r0, r5
 80227e2:	4083      	lsls	r3, r0
 80227e4:	6822      	ldr	r2, [r4, #0]
 80227e6:	3601      	adds	r6, #1
 80227e8:	4313      	orrs	r3, r2
 80227ea:	6023      	str	r3, [r4, #0]
 80227ec:	7831      	ldrb	r1, [r6, #0]
 80227ee:	2206      	movs	r2, #6
 80227f0:	482a      	ldr	r0, [pc, #168]	@ (802289c <_vfiprintf_r+0x22c>)
 80227f2:	1c75      	adds	r5, r6, #1
 80227f4:	7621      	strb	r1, [r4, #24]
 80227f6:	f7fd fdce 	bl	8020396 <memchr>
 80227fa:	2800      	cmp	r0, #0
 80227fc:	d040      	beq.n	8022880 <_vfiprintf_r+0x210>
 80227fe:	4b28      	ldr	r3, [pc, #160]	@ (80228a0 <_vfiprintf_r+0x230>)
 8022800:	2b00      	cmp	r3, #0
 8022802:	d122      	bne.n	802284a <_vfiprintf_r+0x1da>
 8022804:	2207      	movs	r2, #7
 8022806:	9b07      	ldr	r3, [sp, #28]
 8022808:	3307      	adds	r3, #7
 802280a:	4393      	bics	r3, r2
 802280c:	3308      	adds	r3, #8
 802280e:	9307      	str	r3, [sp, #28]
 8022810:	6963      	ldr	r3, [r4, #20]
 8022812:	9a04      	ldr	r2, [sp, #16]
 8022814:	189b      	adds	r3, r3, r2
 8022816:	6163      	str	r3, [r4, #20]
 8022818:	e762      	b.n	80226e0 <_vfiprintf_r+0x70>
 802281a:	4343      	muls	r3, r0
 802281c:	002e      	movs	r6, r5
 802281e:	2101      	movs	r1, #1
 8022820:	189b      	adds	r3, r3, r2
 8022822:	e7a4      	b.n	802276e <_vfiprintf_r+0xfe>
 8022824:	2300      	movs	r3, #0
 8022826:	200a      	movs	r0, #10
 8022828:	0019      	movs	r1, r3
 802282a:	3601      	adds	r6, #1
 802282c:	6063      	str	r3, [r4, #4]
 802282e:	7832      	ldrb	r2, [r6, #0]
 8022830:	1c75      	adds	r5, r6, #1
 8022832:	3a30      	subs	r2, #48	@ 0x30
 8022834:	2a09      	cmp	r2, #9
 8022836:	d903      	bls.n	8022840 <_vfiprintf_r+0x1d0>
 8022838:	2b00      	cmp	r3, #0
 802283a:	d0c8      	beq.n	80227ce <_vfiprintf_r+0x15e>
 802283c:	9109      	str	r1, [sp, #36]	@ 0x24
 802283e:	e7c6      	b.n	80227ce <_vfiprintf_r+0x15e>
 8022840:	4341      	muls	r1, r0
 8022842:	002e      	movs	r6, r5
 8022844:	2301      	movs	r3, #1
 8022846:	1889      	adds	r1, r1, r2
 8022848:	e7f1      	b.n	802282e <_vfiprintf_r+0x1be>
 802284a:	aa07      	add	r2, sp, #28
 802284c:	9200      	str	r2, [sp, #0]
 802284e:	0021      	movs	r1, r4
 8022850:	003a      	movs	r2, r7
 8022852:	4b14      	ldr	r3, [pc, #80]	@ (80228a4 <_vfiprintf_r+0x234>)
 8022854:	9803      	ldr	r0, [sp, #12]
 8022856:	f7fc fe99 	bl	801f58c <_printf_float>
 802285a:	9004      	str	r0, [sp, #16]
 802285c:	9b04      	ldr	r3, [sp, #16]
 802285e:	3301      	adds	r3, #1
 8022860:	d1d6      	bne.n	8022810 <_vfiprintf_r+0x1a0>
 8022862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022864:	07db      	lsls	r3, r3, #31
 8022866:	d405      	bmi.n	8022874 <_vfiprintf_r+0x204>
 8022868:	89bb      	ldrh	r3, [r7, #12]
 802286a:	059b      	lsls	r3, r3, #22
 802286c:	d402      	bmi.n	8022874 <_vfiprintf_r+0x204>
 802286e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022870:	f7fd fd90 	bl	8020394 <__retarget_lock_release_recursive>
 8022874:	89bb      	ldrh	r3, [r7, #12]
 8022876:	065b      	lsls	r3, r3, #25
 8022878:	d500      	bpl.n	802287c <_vfiprintf_r+0x20c>
 802287a:	e71e      	b.n	80226ba <_vfiprintf_r+0x4a>
 802287c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802287e:	e71e      	b.n	80226be <_vfiprintf_r+0x4e>
 8022880:	aa07      	add	r2, sp, #28
 8022882:	9200      	str	r2, [sp, #0]
 8022884:	0021      	movs	r1, r4
 8022886:	003a      	movs	r2, r7
 8022888:	4b06      	ldr	r3, [pc, #24]	@ (80228a4 <_vfiprintf_r+0x234>)
 802288a:	9803      	ldr	r0, [sp, #12]
 802288c:	f7fd f92c 	bl	801fae8 <_printf_i>
 8022890:	e7e3      	b.n	802285a <_vfiprintf_r+0x1ea>
 8022892:	46c0      	nop			@ (mov r8, r8)
 8022894:	08025f90 	.word	0x08025f90
 8022898:	08025f96 	.word	0x08025f96
 802289c:	08025f9a 	.word	0x08025f9a
 80228a0:	0801f58d 	.word	0x0801f58d
 80228a4:	0802264b 	.word	0x0802264b

080228a8 <__sflush_r>:
 80228a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80228aa:	220c      	movs	r2, #12
 80228ac:	5e8b      	ldrsh	r3, [r1, r2]
 80228ae:	0005      	movs	r5, r0
 80228b0:	000c      	movs	r4, r1
 80228b2:	071a      	lsls	r2, r3, #28
 80228b4:	d456      	bmi.n	8022964 <__sflush_r+0xbc>
 80228b6:	684a      	ldr	r2, [r1, #4]
 80228b8:	2a00      	cmp	r2, #0
 80228ba:	dc02      	bgt.n	80228c2 <__sflush_r+0x1a>
 80228bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80228be:	2a00      	cmp	r2, #0
 80228c0:	dd4e      	ble.n	8022960 <__sflush_r+0xb8>
 80228c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80228c4:	2f00      	cmp	r7, #0
 80228c6:	d04b      	beq.n	8022960 <__sflush_r+0xb8>
 80228c8:	2200      	movs	r2, #0
 80228ca:	2080      	movs	r0, #128	@ 0x80
 80228cc:	682e      	ldr	r6, [r5, #0]
 80228ce:	602a      	str	r2, [r5, #0]
 80228d0:	001a      	movs	r2, r3
 80228d2:	0140      	lsls	r0, r0, #5
 80228d4:	6a21      	ldr	r1, [r4, #32]
 80228d6:	4002      	ands	r2, r0
 80228d8:	4203      	tst	r3, r0
 80228da:	d033      	beq.n	8022944 <__sflush_r+0x9c>
 80228dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80228de:	89a3      	ldrh	r3, [r4, #12]
 80228e0:	075b      	lsls	r3, r3, #29
 80228e2:	d506      	bpl.n	80228f2 <__sflush_r+0x4a>
 80228e4:	6863      	ldr	r3, [r4, #4]
 80228e6:	1ad2      	subs	r2, r2, r3
 80228e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d001      	beq.n	80228f2 <__sflush_r+0x4a>
 80228ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80228f0:	1ad2      	subs	r2, r2, r3
 80228f2:	2300      	movs	r3, #0
 80228f4:	0028      	movs	r0, r5
 80228f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80228f8:	6a21      	ldr	r1, [r4, #32]
 80228fa:	47b8      	blx	r7
 80228fc:	89a2      	ldrh	r2, [r4, #12]
 80228fe:	1c43      	adds	r3, r0, #1
 8022900:	d106      	bne.n	8022910 <__sflush_r+0x68>
 8022902:	6829      	ldr	r1, [r5, #0]
 8022904:	291d      	cmp	r1, #29
 8022906:	d846      	bhi.n	8022996 <__sflush_r+0xee>
 8022908:	4b29      	ldr	r3, [pc, #164]	@ (80229b0 <__sflush_r+0x108>)
 802290a:	410b      	asrs	r3, r1
 802290c:	07db      	lsls	r3, r3, #31
 802290e:	d442      	bmi.n	8022996 <__sflush_r+0xee>
 8022910:	2300      	movs	r3, #0
 8022912:	6063      	str	r3, [r4, #4]
 8022914:	6923      	ldr	r3, [r4, #16]
 8022916:	6023      	str	r3, [r4, #0]
 8022918:	04d2      	lsls	r2, r2, #19
 802291a:	d505      	bpl.n	8022928 <__sflush_r+0x80>
 802291c:	1c43      	adds	r3, r0, #1
 802291e:	d102      	bne.n	8022926 <__sflush_r+0x7e>
 8022920:	682b      	ldr	r3, [r5, #0]
 8022922:	2b00      	cmp	r3, #0
 8022924:	d100      	bne.n	8022928 <__sflush_r+0x80>
 8022926:	6560      	str	r0, [r4, #84]	@ 0x54
 8022928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802292a:	602e      	str	r6, [r5, #0]
 802292c:	2900      	cmp	r1, #0
 802292e:	d017      	beq.n	8022960 <__sflush_r+0xb8>
 8022930:	0023      	movs	r3, r4
 8022932:	3344      	adds	r3, #68	@ 0x44
 8022934:	4299      	cmp	r1, r3
 8022936:	d002      	beq.n	802293e <__sflush_r+0x96>
 8022938:	0028      	movs	r0, r5
 802293a:	f7fe fbc9 	bl	80210d0 <_free_r>
 802293e:	2300      	movs	r3, #0
 8022940:	6363      	str	r3, [r4, #52]	@ 0x34
 8022942:	e00d      	b.n	8022960 <__sflush_r+0xb8>
 8022944:	2301      	movs	r3, #1
 8022946:	0028      	movs	r0, r5
 8022948:	47b8      	blx	r7
 802294a:	0002      	movs	r2, r0
 802294c:	1c43      	adds	r3, r0, #1
 802294e:	d1c6      	bne.n	80228de <__sflush_r+0x36>
 8022950:	682b      	ldr	r3, [r5, #0]
 8022952:	2b00      	cmp	r3, #0
 8022954:	d0c3      	beq.n	80228de <__sflush_r+0x36>
 8022956:	2b1d      	cmp	r3, #29
 8022958:	d001      	beq.n	802295e <__sflush_r+0xb6>
 802295a:	2b16      	cmp	r3, #22
 802295c:	d11a      	bne.n	8022994 <__sflush_r+0xec>
 802295e:	602e      	str	r6, [r5, #0]
 8022960:	2000      	movs	r0, #0
 8022962:	e01e      	b.n	80229a2 <__sflush_r+0xfa>
 8022964:	690e      	ldr	r6, [r1, #16]
 8022966:	2e00      	cmp	r6, #0
 8022968:	d0fa      	beq.n	8022960 <__sflush_r+0xb8>
 802296a:	680f      	ldr	r7, [r1, #0]
 802296c:	600e      	str	r6, [r1, #0]
 802296e:	1bba      	subs	r2, r7, r6
 8022970:	9201      	str	r2, [sp, #4]
 8022972:	2200      	movs	r2, #0
 8022974:	079b      	lsls	r3, r3, #30
 8022976:	d100      	bne.n	802297a <__sflush_r+0xd2>
 8022978:	694a      	ldr	r2, [r1, #20]
 802297a:	60a2      	str	r2, [r4, #8]
 802297c:	9b01      	ldr	r3, [sp, #4]
 802297e:	2b00      	cmp	r3, #0
 8022980:	ddee      	ble.n	8022960 <__sflush_r+0xb8>
 8022982:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022984:	0032      	movs	r2, r6
 8022986:	001f      	movs	r7, r3
 8022988:	0028      	movs	r0, r5
 802298a:	9b01      	ldr	r3, [sp, #4]
 802298c:	6a21      	ldr	r1, [r4, #32]
 802298e:	47b8      	blx	r7
 8022990:	2800      	cmp	r0, #0
 8022992:	dc07      	bgt.n	80229a4 <__sflush_r+0xfc>
 8022994:	89a2      	ldrh	r2, [r4, #12]
 8022996:	2340      	movs	r3, #64	@ 0x40
 8022998:	2001      	movs	r0, #1
 802299a:	4313      	orrs	r3, r2
 802299c:	b21b      	sxth	r3, r3
 802299e:	81a3      	strh	r3, [r4, #12]
 80229a0:	4240      	negs	r0, r0
 80229a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80229a4:	9b01      	ldr	r3, [sp, #4]
 80229a6:	1836      	adds	r6, r6, r0
 80229a8:	1a1b      	subs	r3, r3, r0
 80229aa:	9301      	str	r3, [sp, #4]
 80229ac:	e7e6      	b.n	802297c <__sflush_r+0xd4>
 80229ae:	46c0      	nop			@ (mov r8, r8)
 80229b0:	dfbffffe 	.word	0xdfbffffe

080229b4 <_fflush_r>:
 80229b4:	690b      	ldr	r3, [r1, #16]
 80229b6:	b570      	push	{r4, r5, r6, lr}
 80229b8:	0005      	movs	r5, r0
 80229ba:	000c      	movs	r4, r1
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d102      	bne.n	80229c6 <_fflush_r+0x12>
 80229c0:	2500      	movs	r5, #0
 80229c2:	0028      	movs	r0, r5
 80229c4:	bd70      	pop	{r4, r5, r6, pc}
 80229c6:	2800      	cmp	r0, #0
 80229c8:	d004      	beq.n	80229d4 <_fflush_r+0x20>
 80229ca:	6a03      	ldr	r3, [r0, #32]
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d101      	bne.n	80229d4 <_fflush_r+0x20>
 80229d0:	f7fd fa28 	bl	801fe24 <__sinit>
 80229d4:	220c      	movs	r2, #12
 80229d6:	5ea3      	ldrsh	r3, [r4, r2]
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d0f1      	beq.n	80229c0 <_fflush_r+0xc>
 80229dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80229de:	07d2      	lsls	r2, r2, #31
 80229e0:	d404      	bmi.n	80229ec <_fflush_r+0x38>
 80229e2:	059b      	lsls	r3, r3, #22
 80229e4:	d402      	bmi.n	80229ec <_fflush_r+0x38>
 80229e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80229e8:	f7fd fcd3 	bl	8020392 <__retarget_lock_acquire_recursive>
 80229ec:	0028      	movs	r0, r5
 80229ee:	0021      	movs	r1, r4
 80229f0:	f7ff ff5a 	bl	80228a8 <__sflush_r>
 80229f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80229f6:	0005      	movs	r5, r0
 80229f8:	07db      	lsls	r3, r3, #31
 80229fa:	d4e2      	bmi.n	80229c2 <_fflush_r+0xe>
 80229fc:	89a3      	ldrh	r3, [r4, #12]
 80229fe:	059b      	lsls	r3, r3, #22
 8022a00:	d4df      	bmi.n	80229c2 <_fflush_r+0xe>
 8022a02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022a04:	f7fd fcc6 	bl	8020394 <__retarget_lock_release_recursive>
 8022a08:	e7db      	b.n	80229c2 <_fflush_r+0xe>
	...

08022a0c <__swhatbuf_r>:
 8022a0c:	b570      	push	{r4, r5, r6, lr}
 8022a0e:	000e      	movs	r6, r1
 8022a10:	001d      	movs	r5, r3
 8022a12:	230e      	movs	r3, #14
 8022a14:	5ec9      	ldrsh	r1, [r1, r3]
 8022a16:	0014      	movs	r4, r2
 8022a18:	b096      	sub	sp, #88	@ 0x58
 8022a1a:	2900      	cmp	r1, #0
 8022a1c:	da0c      	bge.n	8022a38 <__swhatbuf_r+0x2c>
 8022a1e:	89b2      	ldrh	r2, [r6, #12]
 8022a20:	2380      	movs	r3, #128	@ 0x80
 8022a22:	0011      	movs	r1, r2
 8022a24:	4019      	ands	r1, r3
 8022a26:	421a      	tst	r2, r3
 8022a28:	d114      	bne.n	8022a54 <__swhatbuf_r+0x48>
 8022a2a:	2380      	movs	r3, #128	@ 0x80
 8022a2c:	00db      	lsls	r3, r3, #3
 8022a2e:	2000      	movs	r0, #0
 8022a30:	6029      	str	r1, [r5, #0]
 8022a32:	6023      	str	r3, [r4, #0]
 8022a34:	b016      	add	sp, #88	@ 0x58
 8022a36:	bd70      	pop	{r4, r5, r6, pc}
 8022a38:	466a      	mov	r2, sp
 8022a3a:	f000 f865 	bl	8022b08 <_fstat_r>
 8022a3e:	2800      	cmp	r0, #0
 8022a40:	dbed      	blt.n	8022a1e <__swhatbuf_r+0x12>
 8022a42:	23f0      	movs	r3, #240	@ 0xf0
 8022a44:	9901      	ldr	r1, [sp, #4]
 8022a46:	021b      	lsls	r3, r3, #8
 8022a48:	4019      	ands	r1, r3
 8022a4a:	4b04      	ldr	r3, [pc, #16]	@ (8022a5c <__swhatbuf_r+0x50>)
 8022a4c:	18c9      	adds	r1, r1, r3
 8022a4e:	424b      	negs	r3, r1
 8022a50:	4159      	adcs	r1, r3
 8022a52:	e7ea      	b.n	8022a2a <__swhatbuf_r+0x1e>
 8022a54:	2100      	movs	r1, #0
 8022a56:	2340      	movs	r3, #64	@ 0x40
 8022a58:	e7e9      	b.n	8022a2e <__swhatbuf_r+0x22>
 8022a5a:	46c0      	nop			@ (mov r8, r8)
 8022a5c:	ffffe000 	.word	0xffffe000

08022a60 <__smakebuf_r>:
 8022a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a62:	2602      	movs	r6, #2
 8022a64:	898b      	ldrh	r3, [r1, #12]
 8022a66:	0005      	movs	r5, r0
 8022a68:	000c      	movs	r4, r1
 8022a6a:	b085      	sub	sp, #20
 8022a6c:	4233      	tst	r3, r6
 8022a6e:	d007      	beq.n	8022a80 <__smakebuf_r+0x20>
 8022a70:	0023      	movs	r3, r4
 8022a72:	3347      	adds	r3, #71	@ 0x47
 8022a74:	6023      	str	r3, [r4, #0]
 8022a76:	6123      	str	r3, [r4, #16]
 8022a78:	2301      	movs	r3, #1
 8022a7a:	6163      	str	r3, [r4, #20]
 8022a7c:	b005      	add	sp, #20
 8022a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a80:	ab03      	add	r3, sp, #12
 8022a82:	aa02      	add	r2, sp, #8
 8022a84:	f7ff ffc2 	bl	8022a0c <__swhatbuf_r>
 8022a88:	9f02      	ldr	r7, [sp, #8]
 8022a8a:	9001      	str	r0, [sp, #4]
 8022a8c:	0039      	movs	r1, r7
 8022a8e:	0028      	movs	r0, r5
 8022a90:	f7fe feee 	bl	8021870 <_malloc_r>
 8022a94:	2800      	cmp	r0, #0
 8022a96:	d108      	bne.n	8022aaa <__smakebuf_r+0x4a>
 8022a98:	220c      	movs	r2, #12
 8022a9a:	5ea3      	ldrsh	r3, [r4, r2]
 8022a9c:	059a      	lsls	r2, r3, #22
 8022a9e:	d4ed      	bmi.n	8022a7c <__smakebuf_r+0x1c>
 8022aa0:	2203      	movs	r2, #3
 8022aa2:	4393      	bics	r3, r2
 8022aa4:	431e      	orrs	r6, r3
 8022aa6:	81a6      	strh	r6, [r4, #12]
 8022aa8:	e7e2      	b.n	8022a70 <__smakebuf_r+0x10>
 8022aaa:	2380      	movs	r3, #128	@ 0x80
 8022aac:	89a2      	ldrh	r2, [r4, #12]
 8022aae:	6020      	str	r0, [r4, #0]
 8022ab0:	4313      	orrs	r3, r2
 8022ab2:	81a3      	strh	r3, [r4, #12]
 8022ab4:	9b03      	ldr	r3, [sp, #12]
 8022ab6:	6120      	str	r0, [r4, #16]
 8022ab8:	6167      	str	r7, [r4, #20]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d00c      	beq.n	8022ad8 <__smakebuf_r+0x78>
 8022abe:	0028      	movs	r0, r5
 8022ac0:	230e      	movs	r3, #14
 8022ac2:	5ee1      	ldrsh	r1, [r4, r3]
 8022ac4:	f000 f832 	bl	8022b2c <_isatty_r>
 8022ac8:	2800      	cmp	r0, #0
 8022aca:	d005      	beq.n	8022ad8 <__smakebuf_r+0x78>
 8022acc:	2303      	movs	r3, #3
 8022ace:	89a2      	ldrh	r2, [r4, #12]
 8022ad0:	439a      	bics	r2, r3
 8022ad2:	3b02      	subs	r3, #2
 8022ad4:	4313      	orrs	r3, r2
 8022ad6:	81a3      	strh	r3, [r4, #12]
 8022ad8:	89a3      	ldrh	r3, [r4, #12]
 8022ada:	9a01      	ldr	r2, [sp, #4]
 8022adc:	4313      	orrs	r3, r2
 8022ade:	81a3      	strh	r3, [r4, #12]
 8022ae0:	e7cc      	b.n	8022a7c <__smakebuf_r+0x1c>

08022ae2 <memmove>:
 8022ae2:	b510      	push	{r4, lr}
 8022ae4:	4288      	cmp	r0, r1
 8022ae6:	d806      	bhi.n	8022af6 <memmove+0x14>
 8022ae8:	2300      	movs	r3, #0
 8022aea:	429a      	cmp	r2, r3
 8022aec:	d008      	beq.n	8022b00 <memmove+0x1e>
 8022aee:	5ccc      	ldrb	r4, [r1, r3]
 8022af0:	54c4      	strb	r4, [r0, r3]
 8022af2:	3301      	adds	r3, #1
 8022af4:	e7f9      	b.n	8022aea <memmove+0x8>
 8022af6:	188b      	adds	r3, r1, r2
 8022af8:	4298      	cmp	r0, r3
 8022afa:	d2f5      	bcs.n	8022ae8 <memmove+0x6>
 8022afc:	3a01      	subs	r2, #1
 8022afe:	d200      	bcs.n	8022b02 <memmove+0x20>
 8022b00:	bd10      	pop	{r4, pc}
 8022b02:	5c8b      	ldrb	r3, [r1, r2]
 8022b04:	5483      	strb	r3, [r0, r2]
 8022b06:	e7f9      	b.n	8022afc <memmove+0x1a>

08022b08 <_fstat_r>:
 8022b08:	2300      	movs	r3, #0
 8022b0a:	b570      	push	{r4, r5, r6, lr}
 8022b0c:	4d06      	ldr	r5, [pc, #24]	@ (8022b28 <_fstat_r+0x20>)
 8022b0e:	0004      	movs	r4, r0
 8022b10:	0008      	movs	r0, r1
 8022b12:	0011      	movs	r1, r2
 8022b14:	602b      	str	r3, [r5, #0]
 8022b16:	f7eb f87d 	bl	800dc14 <_fstat>
 8022b1a:	1c43      	adds	r3, r0, #1
 8022b1c:	d103      	bne.n	8022b26 <_fstat_r+0x1e>
 8022b1e:	682b      	ldr	r3, [r5, #0]
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d000      	beq.n	8022b26 <_fstat_r+0x1e>
 8022b24:	6023      	str	r3, [r4, #0]
 8022b26:	bd70      	pop	{r4, r5, r6, pc}
 8022b28:	200037b0 	.word	0x200037b0

08022b2c <_isatty_r>:
 8022b2c:	2300      	movs	r3, #0
 8022b2e:	b570      	push	{r4, r5, r6, lr}
 8022b30:	4d06      	ldr	r5, [pc, #24]	@ (8022b4c <_isatty_r+0x20>)
 8022b32:	0004      	movs	r4, r0
 8022b34:	0008      	movs	r0, r1
 8022b36:	602b      	str	r3, [r5, #0]
 8022b38:	f7eb f87a 	bl	800dc30 <_isatty>
 8022b3c:	1c43      	adds	r3, r0, #1
 8022b3e:	d103      	bne.n	8022b48 <_isatty_r+0x1c>
 8022b40:	682b      	ldr	r3, [r5, #0]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d000      	beq.n	8022b48 <_isatty_r+0x1c>
 8022b46:	6023      	str	r3, [r4, #0]
 8022b48:	bd70      	pop	{r4, r5, r6, pc}
 8022b4a:	46c0      	nop			@ (mov r8, r8)
 8022b4c:	200037b0 	.word	0x200037b0

08022b50 <_sbrk_r>:
 8022b50:	2300      	movs	r3, #0
 8022b52:	b570      	push	{r4, r5, r6, lr}
 8022b54:	4d06      	ldr	r5, [pc, #24]	@ (8022b70 <_sbrk_r+0x20>)
 8022b56:	0004      	movs	r4, r0
 8022b58:	0008      	movs	r0, r1
 8022b5a:	602b      	str	r3, [r5, #0]
 8022b5c:	f7eb f87c 	bl	800dc58 <_sbrk>
 8022b60:	1c43      	adds	r3, r0, #1
 8022b62:	d103      	bne.n	8022b6c <_sbrk_r+0x1c>
 8022b64:	682b      	ldr	r3, [r5, #0]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d000      	beq.n	8022b6c <_sbrk_r+0x1c>
 8022b6a:	6023      	str	r3, [r4, #0]
 8022b6c:	bd70      	pop	{r4, r5, r6, pc}
 8022b6e:	46c0      	nop			@ (mov r8, r8)
 8022b70:	200037b0 	.word	0x200037b0

08022b74 <__assert_func>:
 8022b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022b76:	0014      	movs	r4, r2
 8022b78:	001a      	movs	r2, r3
 8022b7a:	4b09      	ldr	r3, [pc, #36]	@ (8022ba0 <__assert_func+0x2c>)
 8022b7c:	0005      	movs	r5, r0
 8022b7e:	681b      	ldr	r3, [r3, #0]
 8022b80:	000e      	movs	r6, r1
 8022b82:	68d8      	ldr	r0, [r3, #12]
 8022b84:	4b07      	ldr	r3, [pc, #28]	@ (8022ba4 <__assert_func+0x30>)
 8022b86:	2c00      	cmp	r4, #0
 8022b88:	d101      	bne.n	8022b8e <__assert_func+0x1a>
 8022b8a:	4b07      	ldr	r3, [pc, #28]	@ (8022ba8 <__assert_func+0x34>)
 8022b8c:	001c      	movs	r4, r3
 8022b8e:	4907      	ldr	r1, [pc, #28]	@ (8022bac <__assert_func+0x38>)
 8022b90:	9301      	str	r3, [sp, #4]
 8022b92:	9402      	str	r4, [sp, #8]
 8022b94:	002b      	movs	r3, r5
 8022b96:	9600      	str	r6, [sp, #0]
 8022b98:	f000 f866 	bl	8022c68 <fiprintf>
 8022b9c:	f000 f874 	bl	8022c88 <abort>
 8022ba0:	200003d4 	.word	0x200003d4
 8022ba4:	08025fa1 	.word	0x08025fa1
 8022ba8:	08025fdc 	.word	0x08025fdc
 8022bac:	08025fae 	.word	0x08025fae

08022bb0 <_calloc_r>:
 8022bb0:	b570      	push	{r4, r5, r6, lr}
 8022bb2:	0c0b      	lsrs	r3, r1, #16
 8022bb4:	0c15      	lsrs	r5, r2, #16
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d11e      	bne.n	8022bf8 <_calloc_r+0x48>
 8022bba:	2d00      	cmp	r5, #0
 8022bbc:	d10c      	bne.n	8022bd8 <_calloc_r+0x28>
 8022bbe:	b289      	uxth	r1, r1
 8022bc0:	b294      	uxth	r4, r2
 8022bc2:	434c      	muls	r4, r1
 8022bc4:	0021      	movs	r1, r4
 8022bc6:	f7fe fe53 	bl	8021870 <_malloc_r>
 8022bca:	1e05      	subs	r5, r0, #0
 8022bcc:	d01a      	beq.n	8022c04 <_calloc_r+0x54>
 8022bce:	0022      	movs	r2, r4
 8022bd0:	2100      	movs	r1, #0
 8022bd2:	f7fd fb0f 	bl	80201f4 <memset>
 8022bd6:	e016      	b.n	8022c06 <_calloc_r+0x56>
 8022bd8:	1c2b      	adds	r3, r5, #0
 8022bda:	1c0c      	adds	r4, r1, #0
 8022bdc:	b289      	uxth	r1, r1
 8022bde:	b292      	uxth	r2, r2
 8022be0:	434a      	muls	r2, r1
 8022be2:	b29b      	uxth	r3, r3
 8022be4:	b2a1      	uxth	r1, r4
 8022be6:	4359      	muls	r1, r3
 8022be8:	0c14      	lsrs	r4, r2, #16
 8022bea:	190c      	adds	r4, r1, r4
 8022bec:	0c23      	lsrs	r3, r4, #16
 8022bee:	d107      	bne.n	8022c00 <_calloc_r+0x50>
 8022bf0:	0424      	lsls	r4, r4, #16
 8022bf2:	b292      	uxth	r2, r2
 8022bf4:	4314      	orrs	r4, r2
 8022bf6:	e7e5      	b.n	8022bc4 <_calloc_r+0x14>
 8022bf8:	2d00      	cmp	r5, #0
 8022bfa:	d101      	bne.n	8022c00 <_calloc_r+0x50>
 8022bfc:	1c14      	adds	r4, r2, #0
 8022bfe:	e7ed      	b.n	8022bdc <_calloc_r+0x2c>
 8022c00:	230c      	movs	r3, #12
 8022c02:	6003      	str	r3, [r0, #0]
 8022c04:	2500      	movs	r5, #0
 8022c06:	0028      	movs	r0, r5
 8022c08:	bd70      	pop	{r4, r5, r6, pc}

08022c0a <_realloc_r>:
 8022c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c0c:	0006      	movs	r6, r0
 8022c0e:	000c      	movs	r4, r1
 8022c10:	0015      	movs	r5, r2
 8022c12:	2900      	cmp	r1, #0
 8022c14:	d105      	bne.n	8022c22 <_realloc_r+0x18>
 8022c16:	0011      	movs	r1, r2
 8022c18:	f7fe fe2a 	bl	8021870 <_malloc_r>
 8022c1c:	0004      	movs	r4, r0
 8022c1e:	0020      	movs	r0, r4
 8022c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c22:	2a00      	cmp	r2, #0
 8022c24:	d103      	bne.n	8022c2e <_realloc_r+0x24>
 8022c26:	f7fe fa53 	bl	80210d0 <_free_r>
 8022c2a:	2400      	movs	r4, #0
 8022c2c:	e7f7      	b.n	8022c1e <_realloc_r+0x14>
 8022c2e:	f000 f832 	bl	8022c96 <_malloc_usable_size_r>
 8022c32:	0007      	movs	r7, r0
 8022c34:	4285      	cmp	r5, r0
 8022c36:	d802      	bhi.n	8022c3e <_realloc_r+0x34>
 8022c38:	0843      	lsrs	r3, r0, #1
 8022c3a:	42ab      	cmp	r3, r5
 8022c3c:	d3ef      	bcc.n	8022c1e <_realloc_r+0x14>
 8022c3e:	0029      	movs	r1, r5
 8022c40:	0030      	movs	r0, r6
 8022c42:	f7fe fe15 	bl	8021870 <_malloc_r>
 8022c46:	9001      	str	r0, [sp, #4]
 8022c48:	2800      	cmp	r0, #0
 8022c4a:	d0ee      	beq.n	8022c2a <_realloc_r+0x20>
 8022c4c:	002a      	movs	r2, r5
 8022c4e:	42bd      	cmp	r5, r7
 8022c50:	d900      	bls.n	8022c54 <_realloc_r+0x4a>
 8022c52:	003a      	movs	r2, r7
 8022c54:	0021      	movs	r1, r4
 8022c56:	9801      	ldr	r0, [sp, #4]
 8022c58:	f7fd fba8 	bl	80203ac <memcpy>
 8022c5c:	0021      	movs	r1, r4
 8022c5e:	0030      	movs	r0, r6
 8022c60:	f7fe fa36 	bl	80210d0 <_free_r>
 8022c64:	9c01      	ldr	r4, [sp, #4]
 8022c66:	e7da      	b.n	8022c1e <_realloc_r+0x14>

08022c68 <fiprintf>:
 8022c68:	b40e      	push	{r1, r2, r3}
 8022c6a:	b517      	push	{r0, r1, r2, r4, lr}
 8022c6c:	4c05      	ldr	r4, [pc, #20]	@ (8022c84 <fiprintf+0x1c>)
 8022c6e:	ab05      	add	r3, sp, #20
 8022c70:	cb04      	ldmia	r3!, {r2}
 8022c72:	0001      	movs	r1, r0
 8022c74:	6820      	ldr	r0, [r4, #0]
 8022c76:	9301      	str	r3, [sp, #4]
 8022c78:	f7ff fcfa 	bl	8022670 <_vfiprintf_r>
 8022c7c:	bc1e      	pop	{r1, r2, r3, r4}
 8022c7e:	bc08      	pop	{r3}
 8022c80:	b003      	add	sp, #12
 8022c82:	4718      	bx	r3
 8022c84:	200003d4 	.word	0x200003d4

08022c88 <abort>:
 8022c88:	2006      	movs	r0, #6
 8022c8a:	b510      	push	{r4, lr}
 8022c8c:	f000 f834 	bl	8022cf8 <raise>
 8022c90:	2001      	movs	r0, #1
 8022c92:	f7ea ff8b 	bl	800dbac <_exit>

08022c96 <_malloc_usable_size_r>:
 8022c96:	1f0b      	subs	r3, r1, #4
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	1f18      	subs	r0, r3, #4
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	da01      	bge.n	8022ca4 <_malloc_usable_size_r+0xe>
 8022ca0:	580b      	ldr	r3, [r1, r0]
 8022ca2:	18c0      	adds	r0, r0, r3
 8022ca4:	4770      	bx	lr

08022ca6 <_raise_r>:
 8022ca6:	b570      	push	{r4, r5, r6, lr}
 8022ca8:	0004      	movs	r4, r0
 8022caa:	000d      	movs	r5, r1
 8022cac:	291f      	cmp	r1, #31
 8022cae:	d904      	bls.n	8022cba <_raise_r+0x14>
 8022cb0:	2316      	movs	r3, #22
 8022cb2:	6003      	str	r3, [r0, #0]
 8022cb4:	2001      	movs	r0, #1
 8022cb6:	4240      	negs	r0, r0
 8022cb8:	bd70      	pop	{r4, r5, r6, pc}
 8022cba:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	d004      	beq.n	8022cca <_raise_r+0x24>
 8022cc0:	008a      	lsls	r2, r1, #2
 8022cc2:	189b      	adds	r3, r3, r2
 8022cc4:	681a      	ldr	r2, [r3, #0]
 8022cc6:	2a00      	cmp	r2, #0
 8022cc8:	d108      	bne.n	8022cdc <_raise_r+0x36>
 8022cca:	0020      	movs	r0, r4
 8022ccc:	f000 f830 	bl	8022d30 <_getpid_r>
 8022cd0:	002a      	movs	r2, r5
 8022cd2:	0001      	movs	r1, r0
 8022cd4:	0020      	movs	r0, r4
 8022cd6:	f000 f819 	bl	8022d0c <_kill_r>
 8022cda:	e7ed      	b.n	8022cb8 <_raise_r+0x12>
 8022cdc:	2a01      	cmp	r2, #1
 8022cde:	d009      	beq.n	8022cf4 <_raise_r+0x4e>
 8022ce0:	1c51      	adds	r1, r2, #1
 8022ce2:	d103      	bne.n	8022cec <_raise_r+0x46>
 8022ce4:	2316      	movs	r3, #22
 8022ce6:	6003      	str	r3, [r0, #0]
 8022ce8:	2001      	movs	r0, #1
 8022cea:	e7e5      	b.n	8022cb8 <_raise_r+0x12>
 8022cec:	2100      	movs	r1, #0
 8022cee:	0028      	movs	r0, r5
 8022cf0:	6019      	str	r1, [r3, #0]
 8022cf2:	4790      	blx	r2
 8022cf4:	2000      	movs	r0, #0
 8022cf6:	e7df      	b.n	8022cb8 <_raise_r+0x12>

08022cf8 <raise>:
 8022cf8:	b510      	push	{r4, lr}
 8022cfa:	4b03      	ldr	r3, [pc, #12]	@ (8022d08 <raise+0x10>)
 8022cfc:	0001      	movs	r1, r0
 8022cfe:	6818      	ldr	r0, [r3, #0]
 8022d00:	f7ff ffd1 	bl	8022ca6 <_raise_r>
 8022d04:	bd10      	pop	{r4, pc}
 8022d06:	46c0      	nop			@ (mov r8, r8)
 8022d08:	200003d4 	.word	0x200003d4

08022d0c <_kill_r>:
 8022d0c:	2300      	movs	r3, #0
 8022d0e:	b570      	push	{r4, r5, r6, lr}
 8022d10:	4d06      	ldr	r5, [pc, #24]	@ (8022d2c <_kill_r+0x20>)
 8022d12:	0004      	movs	r4, r0
 8022d14:	0008      	movs	r0, r1
 8022d16:	0011      	movs	r1, r2
 8022d18:	602b      	str	r3, [r5, #0]
 8022d1a:	f7ea ff37 	bl	800db8c <_kill>
 8022d1e:	1c43      	adds	r3, r0, #1
 8022d20:	d103      	bne.n	8022d2a <_kill_r+0x1e>
 8022d22:	682b      	ldr	r3, [r5, #0]
 8022d24:	2b00      	cmp	r3, #0
 8022d26:	d000      	beq.n	8022d2a <_kill_r+0x1e>
 8022d28:	6023      	str	r3, [r4, #0]
 8022d2a:	bd70      	pop	{r4, r5, r6, pc}
 8022d2c:	200037b0 	.word	0x200037b0

08022d30 <_getpid_r>:
 8022d30:	b510      	push	{r4, lr}
 8022d32:	f7ea ff25 	bl	800db80 <_getpid>
 8022d36:	bd10      	pop	{r4, pc}

08022d38 <expf>:
 8022d38:	b570      	push	{r4, r5, r6, lr}
 8022d3a:	1c04      	adds	r4, r0, #0
 8022d3c:	f000 f8e6 	bl	8022f0c <__ieee754_expf>
 8022d40:	1c05      	adds	r5, r0, #0
 8022d42:	1c20      	adds	r0, r4, #0
 8022d44:	f000 f83c 	bl	8022dc0 <finitef>
 8022d48:	2800      	cmp	r0, #0
 8022d4a:	d00b      	beq.n	8022d64 <expf+0x2c>
 8022d4c:	490c      	ldr	r1, [pc, #48]	@ (8022d80 <expf+0x48>)
 8022d4e:	1c20      	adds	r0, r4, #0
 8022d50:	f7dd fc02 	bl	8000558 <__aeabi_fcmpgt>
 8022d54:	2800      	cmp	r0, #0
 8022d56:	d007      	beq.n	8022d68 <expf+0x30>
 8022d58:	f7fd faf0 	bl	802033c <__errno>
 8022d5c:	25ff      	movs	r5, #255	@ 0xff
 8022d5e:	2322      	movs	r3, #34	@ 0x22
 8022d60:	05ed      	lsls	r5, r5, #23
 8022d62:	6003      	str	r3, [r0, #0]
 8022d64:	1c28      	adds	r0, r5, #0
 8022d66:	bd70      	pop	{r4, r5, r6, pc}
 8022d68:	4906      	ldr	r1, [pc, #24]	@ (8022d84 <expf+0x4c>)
 8022d6a:	1c20      	adds	r0, r4, #0
 8022d6c:	f7dd fbe0 	bl	8000530 <__aeabi_fcmplt>
 8022d70:	2800      	cmp	r0, #0
 8022d72:	d0f7      	beq.n	8022d64 <expf+0x2c>
 8022d74:	f7fd fae2 	bl	802033c <__errno>
 8022d78:	2322      	movs	r3, #34	@ 0x22
 8022d7a:	2500      	movs	r5, #0
 8022d7c:	6003      	str	r3, [r0, #0]
 8022d7e:	e7f1      	b.n	8022d64 <expf+0x2c>
 8022d80:	42b17217 	.word	0x42b17217
 8022d84:	c2cff1b5 	.word	0xc2cff1b5

08022d88 <sqrtf>:
 8022d88:	b570      	push	{r4, r5, r6, lr}
 8022d8a:	1c05      	adds	r5, r0, #0
 8022d8c:	f000 f822 	bl	8022dd4 <__ieee754_sqrtf>
 8022d90:	1c29      	adds	r1, r5, #0
 8022d92:	1c04      	adds	r4, r0, #0
 8022d94:	1c28      	adds	r0, r5, #0
 8022d96:	f7de fbe5 	bl	8001564 <__aeabi_fcmpun>
 8022d9a:	2800      	cmp	r0, #0
 8022d9c:	d10e      	bne.n	8022dbc <sqrtf+0x34>
 8022d9e:	2100      	movs	r1, #0
 8022da0:	1c28      	adds	r0, r5, #0
 8022da2:	f7dd fbc5 	bl	8000530 <__aeabi_fcmplt>
 8022da6:	2800      	cmp	r0, #0
 8022da8:	d008      	beq.n	8022dbc <sqrtf+0x34>
 8022daa:	f7fd fac7 	bl	802033c <__errno>
 8022dae:	2321      	movs	r3, #33	@ 0x21
 8022db0:	2100      	movs	r1, #0
 8022db2:	6003      	str	r3, [r0, #0]
 8022db4:	1c08      	adds	r0, r1, #0
 8022db6:	f7dd ff0d 	bl	8000bd4 <__aeabi_fdiv>
 8022dba:	1c04      	adds	r4, r0, #0
 8022dbc:	1c20      	adds	r0, r4, #0
 8022dbe:	bd70      	pop	{r4, r5, r6, pc}

08022dc0 <finitef>:
 8022dc0:	22ff      	movs	r2, #255	@ 0xff
 8022dc2:	0043      	lsls	r3, r0, #1
 8022dc4:	085b      	lsrs	r3, r3, #1
 8022dc6:	2001      	movs	r0, #1
 8022dc8:	05d2      	lsls	r2, r2, #23
 8022dca:	4293      	cmp	r3, r2
 8022dcc:	db00      	blt.n	8022dd0 <finitef+0x10>
 8022dce:	2000      	movs	r0, #0
 8022dd0:	4770      	bx	lr
	...

08022dd4 <__ieee754_sqrtf>:
 8022dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022dd6:	0003      	movs	r3, r0
 8022dd8:	0042      	lsls	r2, r0, #1
 8022dda:	1c04      	adds	r4, r0, #0
 8022ddc:	20ff      	movs	r0, #255	@ 0xff
 8022dde:	0852      	lsrs	r2, r2, #1
 8022de0:	05c0      	lsls	r0, r0, #23
 8022de2:	4282      	cmp	r2, r0
 8022de4:	d30a      	bcc.n	8022dfc <__ieee754_sqrtf+0x28>
 8022de6:	1c21      	adds	r1, r4, #0
 8022de8:	1c20      	adds	r0, r4, #0
 8022dea:	f7de f8d9 	bl	8000fa0 <__aeabi_fmul>
 8022dee:	1c01      	adds	r1, r0, #0
 8022df0:	1c20      	adds	r0, r4, #0
 8022df2:	f7dd fd65 	bl	80008c0 <__aeabi_fadd>
 8022df6:	1c04      	adds	r4, r0, #0
 8022df8:	1c20      	adds	r0, r4, #0
 8022dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022dfc:	2a00      	cmp	r2, #0
 8022dfe:	d0fb      	beq.n	8022df8 <__ieee754_sqrtf+0x24>
 8022e00:	2c00      	cmp	r4, #0
 8022e02:	da07      	bge.n	8022e14 <__ieee754_sqrtf+0x40>
 8022e04:	1c21      	adds	r1, r4, #0
 8022e06:	1c20      	adds	r0, r4, #0
 8022e08:	f7de fa08 	bl	800121c <__aeabi_fsub>
 8022e0c:	1c01      	adds	r1, r0, #0
 8022e0e:	f7dd fee1 	bl	8000bd4 <__aeabi_fdiv>
 8022e12:	e7f0      	b.n	8022df6 <__ieee754_sqrtf+0x22>
 8022e14:	0022      	movs	r2, r4
 8022e16:	15e1      	asrs	r1, r4, #23
 8022e18:	4002      	ands	r2, r0
 8022e1a:	4204      	tst	r4, r0
 8022e1c:	d046      	beq.n	8022eac <__ieee754_sqrtf+0xd8>
 8022e1e:	2280      	movs	r2, #128	@ 0x80
 8022e20:	000f      	movs	r7, r1
 8022e22:	025b      	lsls	r3, r3, #9
 8022e24:	0a5b      	lsrs	r3, r3, #9
 8022e26:	0412      	lsls	r2, r2, #16
 8022e28:	3f7f      	subs	r7, #127	@ 0x7f
 8022e2a:	4313      	orrs	r3, r2
 8022e2c:	07c9      	lsls	r1, r1, #31
 8022e2e:	d400      	bmi.n	8022e32 <__ieee754_sqrtf+0x5e>
 8022e30:	005b      	lsls	r3, r3, #1
 8022e32:	2400      	movs	r4, #0
 8022e34:	2180      	movs	r1, #128	@ 0x80
 8022e36:	2019      	movs	r0, #25
 8022e38:	0026      	movs	r6, r4
 8022e3a:	107f      	asrs	r7, r7, #1
 8022e3c:	005b      	lsls	r3, r3, #1
 8022e3e:	0449      	lsls	r1, r1, #17
 8022e40:	1875      	adds	r5, r6, r1
 8022e42:	001a      	movs	r2, r3
 8022e44:	429d      	cmp	r5, r3
 8022e46:	dc02      	bgt.n	8022e4e <__ieee754_sqrtf+0x7a>
 8022e48:	186e      	adds	r6, r5, r1
 8022e4a:	1b5a      	subs	r2, r3, r5
 8022e4c:	1864      	adds	r4, r4, r1
 8022e4e:	3801      	subs	r0, #1
 8022e50:	0053      	lsls	r3, r2, #1
 8022e52:	0849      	lsrs	r1, r1, #1
 8022e54:	2800      	cmp	r0, #0
 8022e56:	d1f3      	bne.n	8022e40 <__ieee754_sqrtf+0x6c>
 8022e58:	2a00      	cmp	r2, #0
 8022e5a:	d019      	beq.n	8022e90 <__ieee754_sqrtf+0xbc>
 8022e5c:	4d17      	ldr	r5, [pc, #92]	@ (8022ebc <__ieee754_sqrtf+0xe8>)
 8022e5e:	4e18      	ldr	r6, [pc, #96]	@ (8022ec0 <__ieee754_sqrtf+0xec>)
 8022e60:	6828      	ldr	r0, [r5, #0]
 8022e62:	6831      	ldr	r1, [r6, #0]
 8022e64:	682b      	ldr	r3, [r5, #0]
 8022e66:	9301      	str	r3, [sp, #4]
 8022e68:	f7de f9d8 	bl	800121c <__aeabi_fsub>
 8022e6c:	1c01      	adds	r1, r0, #0
 8022e6e:	9801      	ldr	r0, [sp, #4]
 8022e70:	f7dd fb68 	bl	8000544 <__aeabi_fcmple>
 8022e74:	2800      	cmp	r0, #0
 8022e76:	d00b      	beq.n	8022e90 <__ieee754_sqrtf+0xbc>
 8022e78:	6828      	ldr	r0, [r5, #0]
 8022e7a:	6831      	ldr	r1, [r6, #0]
 8022e7c:	f7dd fd20 	bl	80008c0 <__aeabi_fadd>
 8022e80:	682d      	ldr	r5, [r5, #0]
 8022e82:	1c01      	adds	r1, r0, #0
 8022e84:	1c28      	adds	r0, r5, #0
 8022e86:	f7dd fb53 	bl	8000530 <__aeabi_fcmplt>
 8022e8a:	2800      	cmp	r0, #0
 8022e8c:	d011      	beq.n	8022eb2 <__ieee754_sqrtf+0xde>
 8022e8e:	3402      	adds	r4, #2
 8022e90:	23fc      	movs	r3, #252	@ 0xfc
 8022e92:	1064      	asrs	r4, r4, #1
 8022e94:	059b      	lsls	r3, r3, #22
 8022e96:	18e3      	adds	r3, r4, r3
 8022e98:	05fc      	lsls	r4, r7, #23
 8022e9a:	18e4      	adds	r4, r4, r3
 8022e9c:	e7ac      	b.n	8022df8 <__ieee754_sqrtf+0x24>
 8022e9e:	005b      	lsls	r3, r3, #1
 8022ea0:	3201      	adds	r2, #1
 8022ea2:	4203      	tst	r3, r0
 8022ea4:	d0fb      	beq.n	8022e9e <__ieee754_sqrtf+0xca>
 8022ea6:	3a01      	subs	r2, #1
 8022ea8:	1a89      	subs	r1, r1, r2
 8022eaa:	e7b8      	b.n	8022e1e <__ieee754_sqrtf+0x4a>
 8022eac:	2080      	movs	r0, #128	@ 0x80
 8022eae:	0400      	lsls	r0, r0, #16
 8022eb0:	e7f7      	b.n	8022ea2 <__ieee754_sqrtf+0xce>
 8022eb2:	2301      	movs	r3, #1
 8022eb4:	3401      	adds	r4, #1
 8022eb6:	439c      	bics	r4, r3
 8022eb8:	e7ea      	b.n	8022e90 <__ieee754_sqrtf+0xbc>
 8022eba:	46c0      	nop			@ (mov r8, r8)
 8022ebc:	20000428 	.word	0x20000428
 8022ec0:	20000424 	.word	0x20000424

08022ec4 <roundf>:
 8022ec4:	0dc3      	lsrs	r3, r0, #23
 8022ec6:	b2db      	uxtb	r3, r3
 8022ec8:	3b7f      	subs	r3, #127	@ 0x7f
 8022eca:	0002      	movs	r2, r0
 8022ecc:	b510      	push	{r4, lr}
 8022ece:	2b16      	cmp	r3, #22
 8022ed0:	dc13      	bgt.n	8022efa <roundf+0x36>
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	da07      	bge.n	8022ee6 <roundf+0x22>
 8022ed6:	0fc2      	lsrs	r2, r0, #31
 8022ed8:	07d0      	lsls	r0, r2, #31
 8022eda:	3301      	adds	r3, #1
 8022edc:	d102      	bne.n	8022ee4 <roundf+0x20>
 8022ede:	23fe      	movs	r3, #254	@ 0xfe
 8022ee0:	059b      	lsls	r3, r3, #22
 8022ee2:	4318      	orrs	r0, r3
 8022ee4:	bd10      	pop	{r4, pc}
 8022ee6:	4908      	ldr	r1, [pc, #32]	@ (8022f08 <roundf+0x44>)
 8022ee8:	4119      	asrs	r1, r3
 8022eea:	4208      	tst	r0, r1
 8022eec:	d0fa      	beq.n	8022ee4 <roundf+0x20>
 8022eee:	2080      	movs	r0, #128	@ 0x80
 8022ef0:	03c0      	lsls	r0, r0, #15
 8022ef2:	4118      	asrs	r0, r3
 8022ef4:	1880      	adds	r0, r0, r2
 8022ef6:	4388      	bics	r0, r1
 8022ef8:	e7f4      	b.n	8022ee4 <roundf+0x20>
 8022efa:	2b80      	cmp	r3, #128	@ 0x80
 8022efc:	d1f2      	bne.n	8022ee4 <roundf+0x20>
 8022efe:	1c01      	adds	r1, r0, #0
 8022f00:	f7dd fcde 	bl	80008c0 <__aeabi_fadd>
 8022f04:	e7ee      	b.n	8022ee4 <roundf+0x20>
 8022f06:	46c0      	nop			@ (mov r8, r8)
 8022f08:	007fffff 	.word	0x007fffff

08022f0c <__ieee754_expf>:
 8022f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022f0e:	21ff      	movs	r1, #255	@ 0xff
 8022f10:	0043      	lsls	r3, r0, #1
 8022f12:	1c04      	adds	r4, r0, #0
 8022f14:	085b      	lsrs	r3, r3, #1
 8022f16:	05c9      	lsls	r1, r1, #23
 8022f18:	428b      	cmp	r3, r1
 8022f1a:	d904      	bls.n	8022f26 <__ieee754_expf+0x1a>
 8022f1c:	1c01      	adds	r1, r0, #0
 8022f1e:	1c20      	adds	r0, r4, #0
 8022f20:	f7dd fcce 	bl	80008c0 <__aeabi_fadd>
 8022f24:	e00d      	b.n	8022f42 <__ieee754_expf+0x36>
 8022f26:	0fc6      	lsrs	r6, r0, #31
 8022f28:	428b      	cmp	r3, r1
 8022f2a:	d104      	bne.n	8022f36 <__ieee754_expf+0x2a>
 8022f2c:	2e00      	cmp	r6, #0
 8022f2e:	d000      	beq.n	8022f32 <__ieee754_expf+0x26>
 8022f30:	e0ba      	b.n	80230a8 <__ieee754_expf+0x19c>
 8022f32:	1c20      	adds	r0, r4, #0
 8022f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022f36:	495d      	ldr	r1, [pc, #372]	@ (80230ac <__ieee754_expf+0x1a0>)
 8022f38:	4288      	cmp	r0, r1
 8022f3a:	dd04      	ble.n	8022f46 <__ieee754_expf+0x3a>
 8022f3c:	2000      	movs	r0, #0
 8022f3e:	f000 f8f1 	bl	8023124 <__math_oflowf>
 8022f42:	1c04      	adds	r4, r0, #0
 8022f44:	e7f5      	b.n	8022f32 <__ieee754_expf+0x26>
 8022f46:	2800      	cmp	r0, #0
 8022f48:	da06      	bge.n	8022f58 <__ieee754_expf+0x4c>
 8022f4a:	4a59      	ldr	r2, [pc, #356]	@ (80230b0 <__ieee754_expf+0x1a4>)
 8022f4c:	4293      	cmp	r3, r2
 8022f4e:	d903      	bls.n	8022f58 <__ieee754_expf+0x4c>
 8022f50:	2000      	movs	r0, #0
 8022f52:	f000 f8e1 	bl	8023118 <__math_uflowf>
 8022f56:	e7f4      	b.n	8022f42 <__ieee754_expf+0x36>
 8022f58:	4a56      	ldr	r2, [pc, #344]	@ (80230b4 <__ieee754_expf+0x1a8>)
 8022f5a:	4293      	cmp	r3, r2
 8022f5c:	d96e      	bls.n	802303c <__ieee754_expf+0x130>
 8022f5e:	4a56      	ldr	r2, [pc, #344]	@ (80230b8 <__ieee754_expf+0x1ac>)
 8022f60:	00b5      	lsls	r5, r6, #2
 8022f62:	4293      	cmp	r3, r2
 8022f64:	d84e      	bhi.n	8023004 <__ieee754_expf+0xf8>
 8022f66:	4b55      	ldr	r3, [pc, #340]	@ (80230bc <__ieee754_expf+0x1b0>)
 8022f68:	1c20      	adds	r0, r4, #0
 8022f6a:	5959      	ldr	r1, [r3, r5]
 8022f6c:	f7de f956 	bl	800121c <__aeabi_fsub>
 8022f70:	4b53      	ldr	r3, [pc, #332]	@ (80230c0 <__ieee754_expf+0x1b4>)
 8022f72:	1c07      	adds	r7, r0, #0
 8022f74:	595b      	ldr	r3, [r3, r5]
 8022f76:	2501      	movs	r5, #1
 8022f78:	1bad      	subs	r5, r5, r6
 8022f7a:	9300      	str	r3, [sp, #0]
 8022f7c:	1bad      	subs	r5, r5, r6
 8022f7e:	9900      	ldr	r1, [sp, #0]
 8022f80:	1c38      	adds	r0, r7, #0
 8022f82:	f7de f94b 	bl	800121c <__aeabi_fsub>
 8022f86:	1c04      	adds	r4, r0, #0
 8022f88:	1c21      	adds	r1, r4, #0
 8022f8a:	1c20      	adds	r0, r4, #0
 8022f8c:	f7de f808 	bl	8000fa0 <__aeabi_fmul>
 8022f90:	494c      	ldr	r1, [pc, #304]	@ (80230c4 <__ieee754_expf+0x1b8>)
 8022f92:	1c06      	adds	r6, r0, #0
 8022f94:	f7de f804 	bl	8000fa0 <__aeabi_fmul>
 8022f98:	494b      	ldr	r1, [pc, #300]	@ (80230c8 <__ieee754_expf+0x1bc>)
 8022f9a:	f7de f93f 	bl	800121c <__aeabi_fsub>
 8022f9e:	1c31      	adds	r1, r6, #0
 8022fa0:	f7dd fffe 	bl	8000fa0 <__aeabi_fmul>
 8022fa4:	4949      	ldr	r1, [pc, #292]	@ (80230cc <__ieee754_expf+0x1c0>)
 8022fa6:	f7dd fc8b 	bl	80008c0 <__aeabi_fadd>
 8022faa:	1c31      	adds	r1, r6, #0
 8022fac:	f7dd fff8 	bl	8000fa0 <__aeabi_fmul>
 8022fb0:	4947      	ldr	r1, [pc, #284]	@ (80230d0 <__ieee754_expf+0x1c4>)
 8022fb2:	f7de f933 	bl	800121c <__aeabi_fsub>
 8022fb6:	1c31      	adds	r1, r6, #0
 8022fb8:	f7dd fff2 	bl	8000fa0 <__aeabi_fmul>
 8022fbc:	4945      	ldr	r1, [pc, #276]	@ (80230d4 <__ieee754_expf+0x1c8>)
 8022fbe:	f7dd fc7f 	bl	80008c0 <__aeabi_fadd>
 8022fc2:	1c31      	adds	r1, r6, #0
 8022fc4:	f7dd ffec 	bl	8000fa0 <__aeabi_fmul>
 8022fc8:	1c01      	adds	r1, r0, #0
 8022fca:	1c20      	adds	r0, r4, #0
 8022fcc:	f7de f926 	bl	800121c <__aeabi_fsub>
 8022fd0:	1c01      	adds	r1, r0, #0
 8022fd2:	1c06      	adds	r6, r0, #0
 8022fd4:	1c20      	adds	r0, r4, #0
 8022fd6:	f7dd ffe3 	bl	8000fa0 <__aeabi_fmul>
 8022fda:	9001      	str	r0, [sp, #4]
 8022fdc:	2d00      	cmp	r5, #0
 8022fde:	d140      	bne.n	8023062 <__ieee754_expf+0x156>
 8022fe0:	2180      	movs	r1, #128	@ 0x80
 8022fe2:	1c30      	adds	r0, r6, #0
 8022fe4:	05c9      	lsls	r1, r1, #23
 8022fe6:	f7de f919 	bl	800121c <__aeabi_fsub>
 8022fea:	1c01      	adds	r1, r0, #0
 8022fec:	9801      	ldr	r0, [sp, #4]
 8022fee:	f7dd fdf1 	bl	8000bd4 <__aeabi_fdiv>
 8022ff2:	1c21      	adds	r1, r4, #0
 8022ff4:	f7de f912 	bl	800121c <__aeabi_fsub>
 8022ff8:	1c01      	adds	r1, r0, #0
 8022ffa:	20fe      	movs	r0, #254	@ 0xfe
 8022ffc:	0580      	lsls	r0, r0, #22
 8022ffe:	f7de f90d 	bl	800121c <__aeabi_fsub>
 8023002:	e79e      	b.n	8022f42 <__ieee754_expf+0x36>
 8023004:	4934      	ldr	r1, [pc, #208]	@ (80230d8 <__ieee754_expf+0x1cc>)
 8023006:	1c20      	adds	r0, r4, #0
 8023008:	f7dd ffca 	bl	8000fa0 <__aeabi_fmul>
 802300c:	4b33      	ldr	r3, [pc, #204]	@ (80230dc <__ieee754_expf+0x1d0>)
 802300e:	5959      	ldr	r1, [r3, r5]
 8023010:	f7dd fc56 	bl	80008c0 <__aeabi_fadd>
 8023014:	f7de fabc 	bl	8001590 <__aeabi_f2iz>
 8023018:	0005      	movs	r5, r0
 802301a:	f7de fad9 	bl	80015d0 <__aeabi_i2f>
 802301e:	4930      	ldr	r1, [pc, #192]	@ (80230e0 <__ieee754_expf+0x1d4>)
 8023020:	1c06      	adds	r6, r0, #0
 8023022:	f7dd ffbd 	bl	8000fa0 <__aeabi_fmul>
 8023026:	1c01      	adds	r1, r0, #0
 8023028:	1c20      	adds	r0, r4, #0
 802302a:	f7de f8f7 	bl	800121c <__aeabi_fsub>
 802302e:	492d      	ldr	r1, [pc, #180]	@ (80230e4 <__ieee754_expf+0x1d8>)
 8023030:	1c07      	adds	r7, r0, #0
 8023032:	1c30      	adds	r0, r6, #0
 8023034:	f7dd ffb4 	bl	8000fa0 <__aeabi_fmul>
 8023038:	9000      	str	r0, [sp, #0]
 802303a:	e7a0      	b.n	8022f7e <__ieee754_expf+0x72>
 802303c:	22d0      	movs	r2, #208	@ 0xd0
 802303e:	0592      	lsls	r2, r2, #22
 8023040:	4293      	cmp	r3, r2
 8023042:	d20c      	bcs.n	802305e <__ieee754_expf+0x152>
 8023044:	4928      	ldr	r1, [pc, #160]	@ (80230e8 <__ieee754_expf+0x1dc>)
 8023046:	1c20      	adds	r0, r4, #0
 8023048:	f7dd fc3a 	bl	80008c0 <__aeabi_fadd>
 802304c:	21fe      	movs	r1, #254	@ 0xfe
 802304e:	0589      	lsls	r1, r1, #22
 8023050:	f7dd fa82 	bl	8000558 <__aeabi_fcmpgt>
 8023054:	1e05      	subs	r5, r0, #0
 8023056:	d097      	beq.n	8022f88 <__ieee754_expf+0x7c>
 8023058:	21fe      	movs	r1, #254	@ 0xfe
 802305a:	0589      	lsls	r1, r1, #22
 802305c:	e75f      	b.n	8022f1e <__ieee754_expf+0x12>
 802305e:	2500      	movs	r5, #0
 8023060:	e792      	b.n	8022f88 <__ieee754_expf+0x7c>
 8023062:	2080      	movs	r0, #128	@ 0x80
 8023064:	1c31      	adds	r1, r6, #0
 8023066:	05c0      	lsls	r0, r0, #23
 8023068:	f7de f8d8 	bl	800121c <__aeabi_fsub>
 802306c:	1c01      	adds	r1, r0, #0
 802306e:	9801      	ldr	r0, [sp, #4]
 8023070:	f7dd fdb0 	bl	8000bd4 <__aeabi_fdiv>
 8023074:	1c01      	adds	r1, r0, #0
 8023076:	9800      	ldr	r0, [sp, #0]
 8023078:	f7de f8d0 	bl	800121c <__aeabi_fsub>
 802307c:	1c39      	adds	r1, r7, #0
 802307e:	f7de f8cd 	bl	800121c <__aeabi_fsub>
 8023082:	1c01      	adds	r1, r0, #0
 8023084:	20fe      	movs	r0, #254	@ 0xfe
 8023086:	0580      	lsls	r0, r0, #22
 8023088:	f7de f8c8 	bl	800121c <__aeabi_fsub>
 802308c:	002b      	movs	r3, r5
 802308e:	337d      	adds	r3, #125	@ 0x7d
 8023090:	db02      	blt.n	8023098 <__ieee754_expf+0x18c>
 8023092:	05ec      	lsls	r4, r5, #23
 8023094:	1824      	adds	r4, r4, r0
 8023096:	e74c      	b.n	8022f32 <__ieee754_expf+0x26>
 8023098:	21d8      	movs	r1, #216	@ 0xd8
 802309a:	3564      	adds	r5, #100	@ 0x64
 802309c:	05ed      	lsls	r5, r5, #23
 802309e:	1828      	adds	r0, r5, r0
 80230a0:	0509      	lsls	r1, r1, #20
 80230a2:	f7dd ff7d 	bl	8000fa0 <__aeabi_fmul>
 80230a6:	e74c      	b.n	8022f42 <__ieee754_expf+0x36>
 80230a8:	2400      	movs	r4, #0
 80230aa:	e742      	b.n	8022f32 <__ieee754_expf+0x26>
 80230ac:	42b17217 	.word	0x42b17217
 80230b0:	42cff1b5 	.word	0x42cff1b5
 80230b4:	3eb17218 	.word	0x3eb17218
 80230b8:	3f851591 	.word	0x3f851591
 80230bc:	08025fe8 	.word	0x08025fe8
 80230c0:	08025fe0 	.word	0x08025fe0
 80230c4:	3331bb4c 	.word	0x3331bb4c
 80230c8:	35ddea0e 	.word	0x35ddea0e
 80230cc:	388ab355 	.word	0x388ab355
 80230d0:	3b360b61 	.word	0x3b360b61
 80230d4:	3e2aaaab 	.word	0x3e2aaaab
 80230d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80230dc:	08025ff0 	.word	0x08025ff0
 80230e0:	3f317180 	.word	0x3f317180
 80230e4:	3717f7d1 	.word	0x3717f7d1
 80230e8:	7149f2ca 	.word	0x7149f2ca

080230ec <with_errnof>:
 80230ec:	b570      	push	{r4, r5, r6, lr}
 80230ee:	000d      	movs	r5, r1
 80230f0:	1c04      	adds	r4, r0, #0
 80230f2:	f7fd f923 	bl	802033c <__errno>
 80230f6:	6005      	str	r5, [r0, #0]
 80230f8:	1c20      	adds	r0, r4, #0
 80230fa:	bd70      	pop	{r4, r5, r6, pc}

080230fc <xflowf>:
 80230fc:	b510      	push	{r4, lr}
 80230fe:	1c0b      	adds	r3, r1, #0
 8023100:	2800      	cmp	r0, #0
 8023102:	d002      	beq.n	802310a <xflowf+0xe>
 8023104:	2380      	movs	r3, #128	@ 0x80
 8023106:	061b      	lsls	r3, r3, #24
 8023108:	18cb      	adds	r3, r1, r3
 802310a:	1c18      	adds	r0, r3, #0
 802310c:	f7dd ff48 	bl	8000fa0 <__aeabi_fmul>
 8023110:	2122      	movs	r1, #34	@ 0x22
 8023112:	f7ff ffeb 	bl	80230ec <with_errnof>
 8023116:	bd10      	pop	{r4, pc}

08023118 <__math_uflowf>:
 8023118:	2180      	movs	r1, #128	@ 0x80
 802311a:	b510      	push	{r4, lr}
 802311c:	0549      	lsls	r1, r1, #21
 802311e:	f7ff ffed 	bl	80230fc <xflowf>
 8023122:	bd10      	pop	{r4, pc}

08023124 <__math_oflowf>:
 8023124:	21e0      	movs	r1, #224	@ 0xe0
 8023126:	b510      	push	{r4, lr}
 8023128:	05c9      	lsls	r1, r1, #23
 802312a:	f7ff ffe7 	bl	80230fc <xflowf>
 802312e:	bd10      	pop	{r4, pc}

08023130 <_init>:
 8023130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023132:	46c0      	nop			@ (mov r8, r8)
 8023134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023136:	bc08      	pop	{r3}
 8023138:	469e      	mov	lr, r3
 802313a:	4770      	bx	lr

0802313c <_fini>:
 802313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802313e:	46c0      	nop			@ (mov r8, r8)
 8023140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023142:	bc08      	pop	{r3}
 8023144:	469e      	mov	lr, r3
 8023146:	4770      	bx	lr
